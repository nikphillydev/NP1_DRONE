
Flight Control Computer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021b04  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001180  08021ce8  08021ce8  00022ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022e68  08022e68  00024370  2**0
                  CONTENTS
  4 .ARM          00000008  08022e68  08022e68  00023e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022e70  08022e70  00024370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08022e70  08022e70  00023e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08022e78  08022e78  00023e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  08022e80  00024000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017984  20000370  080231f0  00024370  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20017cf4  080231f0  00024cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024370  2**0
                  CONTENTS, READONLY
 12 .debug_info   00047be3  00000000  00000000  000243a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000097a3  00000000  00000000  0006bf83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002db0  00000000  00000000  00075728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000022fa  00000000  00000000  000784d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035f75  00000000  00000000  0007a7d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003dca5  00000000  00000000  000b0747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00126caa  00000000  00000000  000ee3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00215096  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d9b4  00000000  00000000  0021511c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00222ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000370 	.word	0x20000370
 80001fc:	00000000 	.word	0x00000000
 8000200:	08021ccc 	.word	0x08021ccc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000374 	.word	0x20000374
 800021c:	08021ccc 	.word	0x08021ccc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <_ZNSt5tupleIJP9IIRFilterSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f805 	bl	8000fa2 <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEEC2Ev>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEEC2Ev>:
      constexpr _Tuple_impl()
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f809 	bl	8000fc2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9IIRFilterEEEC2Ev>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f81c 	bl	8000ff0 <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EEC2Ev>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9IIRFilterEEEC2Ev>:
      _Tuple_impl()
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f805 	bl	8000fda <_ZNSt10_Head_baseILj1ESt14default_deleteI9IIRFilterELb1EEC2Ev>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_ZNSt10_Head_baseILj1ESt14default_deleteI9IIRFilterELb1EEC2Ev>:
      constexpr _Head_base()
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EEC2Ev>:
      constexpr _Head_base()
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <_ZN2np10lock_guardC1ERPv>:
{
	/*
	 * Class to implement mutex RAII for CMSIS-V2
	 */
public:
	lock_guard(osMutexId_t& mutex) : mutex(mutex) { osMutexAcquire(this->mutex, osWaitForever); }
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001026:	4618      	mov	r0, r3
 8001028:	f00d ff82 	bl	800ef30 <osMutexAcquire>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <_ZN2np10lock_guardD1Ev>:
	~lock_guard() { osMutexRelease(mutex); }
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f00d ffbe 	bl	800efc6 <osMutexRelease>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <_ZN6BMI088C1ER19__SPI_HandleTypeDefRPvP12GPIO_TypeDefS5_ttS3_S3_>:
#include "Drivers/BMI088.hpp"
#include "Drivers/usb.hpp"
#include "Utility/lock_guard.hpp"
#include <cstdio>

BMI088::BMI088(SPI_HandleTypeDef& spi_handle, osMutexId_t& spi_mutex, GPIO_TypeDef* acc_cs_port, GPIO_TypeDef* gyro_cs_port, 
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	603b      	str	r3, [r7, #0]
			uint16_t acc_cs_pin, uint16_t gyro_cs_pin, osMutexId_t& accel_data_mutex, osMutexId_t& gyro_data_mutex)
	: spi_handle(spi_handle),
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	601a      	str	r2, [r3, #0]
	  spi_mutex(spi_mutex),
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	605a      	str	r2, [r3, #4]
	  acc_cs_port(acc_cs_port),
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	609a      	str	r2, [r3, #8]
	  gyro_cs_port(gyro_cs_port),
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	60da      	str	r2, [r3, #12]
	  acc_cs_pin(acc_cs_pin),
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	8bba      	ldrh	r2, [r7, #28]
 800107e:	821a      	strh	r2, [r3, #16]
	  gyro_cs_pin(gyro_cs_pin),
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	8c3a      	ldrh	r2, [r7, #32]
 8001084:	825a      	strh	r2, [r3, #18]
	  accel_data_mutex(accel_data_mutex),
	  gyro_data_mutex(gyro_data_mutex) {}
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4a14      	ldr	r2, [pc, #80]	@ (80010dc <_ZN6BMI088C1ER19__SPI_HandleTypeDefRPvP12GPIO_TypeDefS5_ttS3_S3_+0x88>)
 800108a:	619a      	str	r2, [r3, #24]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4a14      	ldr	r2, [pc, #80]	@ (80010e0 <_ZN6BMI088C1ER19__SPI_HandleTypeDefRPvP12GPIO_TypeDefS5_ttS3_S3_+0x8c>)
 8001090:	61da      	str	r2, [r3, #28]
	  accel_data_mutex(accel_data_mutex),
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001096:	621a      	str	r2, [r3, #32]
	  gyro_data_mutex(gyro_data_mutex) {}
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800109c:	625a      	str	r2, [r3, #36]	@ 0x24
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3328      	adds	r3, #40	@ 0x28
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3334      	adds	r3, #52	@ 0x34
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	3344      	adds	r3, #68	@ 0x44
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3350      	adds	r3, #80	@ 0x50
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	3a6b5c0f 	.word	0x3a6b5c0f
 80010e0:	398ba058 	.word	0x398ba058

080010e4 <_ZNSt15__uniq_ptr_dataI9IIRFilterSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 f83f 	bl	8002178 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ffe5 	bl	80010e4 <_ZNSt15__uniq_ptr_dataI9IIRFilterSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZN6BMI0884initEv>:

bool BMI088::init()
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08e      	sub	sp, #56	@ 0x38
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	bool status = false;
 800112c:	2300      	movs	r3, #0
 800112e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];

	// Accelerometer requires rising edge on CS pin to switch to SPI mode
	HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_RESET);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6898      	ldr	r0, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	8a1b      	ldrh	r3, [r3, #16]
 800113a:	2200      	movs	r2, #0
 800113c:	4619      	mov	r1, r3
 800113e:	f004 ff37 	bl	8005fb0 <HAL_GPIO_WritePin>
	osDelay(10);
 8001142:	200a      	movs	r0, #10
 8001144:	f00d fe53 	bl	800edee <osDelay>
	HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_SET);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6898      	ldr	r0, [r3, #8]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	8a1b      	ldrh	r3, [r3, #16]
 8001150:	2201      	movs	r2, #1
 8001152:	4619      	mov	r1, r3
 8001154:	f004 ff2c 	bl	8005fb0 <HAL_GPIO_WritePin>
	osDelay(10);
 8001158:	200a      	movs	r0, #10
 800115a:	f00d fe48 	bl	800edee <osDelay>
	
	// Perform soft-reset of accelerometer
	tx_data[0] = 0xB6;
 800115e:	23b6      	movs	r3, #182	@ 0xb6
 8001160:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_ACC_SOFTRESET, tx_data, 1);
 8001164:	f107 0220 	add.w	r2, r7, #32
 8001168:	2301      	movs	r3, #1
 800116a:	217e      	movs	r1, #126	@ 0x7e
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 fe79 	bl	8001e64 <_ZN6BMI08820write_accel_registerEhPht>
 8001172:	4603      	mov	r3, r0
 8001174:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001178:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800117c:	f083 0301 	eor.w	r3, r3, #1
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <_ZN6BMI0884initEv+0x68>
 8001186:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800118a:	e20f      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 800118c:	200a      	movs	r0, #10
 800118e:	f00d fe2e 	bl	800edee <osDelay>

	// Perform soft-reset of gyroscope
	tx_data[0] = 0xB6;
 8001192:	23b6      	movs	r3, #182	@ 0xb6
 8001194:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_GYRO_SOFTRESET, tx_data, 1);
 8001198:	f107 0220 	add.w	r2, r7, #32
 800119c:	2301      	movs	r3, #1
 800119e:	2114      	movs	r1, #20
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 fef1 	bl	8001f88 <_ZN6BMI08819write_gyro_registerEhPht>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 80011ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011b0:	f083 0301 	eor.w	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <_ZN6BMI0884initEv+0x9c>
 80011ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011be:	e1f5      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 80011c0:	200a      	movs	r0, #10
 80011c2:	f00d fe14 	bl	800edee <osDelay>
	/*
	 * ACCELEROMETER SETUP
	 */

	// Accelerometer requires rising edge on CS pin to switch to SPI mode
	HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_RESET);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6898      	ldr	r0, [r3, #8]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	8a1b      	ldrh	r3, [r3, #16]
 80011ce:	2200      	movs	r2, #0
 80011d0:	4619      	mov	r1, r3
 80011d2:	f004 feed 	bl	8005fb0 <HAL_GPIO_WritePin>
	osDelay(10);
 80011d6:	200a      	movs	r0, #10
 80011d8:	f00d fe09 	bl	800edee <osDelay>
	HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_SET);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6898      	ldr	r0, [r3, #8]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	8a1b      	ldrh	r3, [r3, #16]
 80011e4:	2201      	movs	r2, #1
 80011e6:	4619      	mov	r1, r3
 80011e8:	f004 fee2 	bl	8005fb0 <HAL_GPIO_WritePin>
	osDelay(10);
 80011ec:	200a      	movs	r0, #10
 80011ee:	f00d fdfe 	bl	800edee <osDelay>

	// Check accelerometer chip ID
	rx_data[0] = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	773b      	strb	r3, [r7, #28]
	status = read_accel_register(REG_ACC_CHIP_ID, rx_data, 1);
 80011f6:	f107 021c 	add.w	r2, r7, #28
 80011fa:	2301      	movs	r3, #1
 80011fc:	2100      	movs	r1, #0
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 fc8c 	bl	8001b1c <_ZN6BMI08819read_accel_registerEhPht>
 8001204:	4603      	mov	r3, r0
 8001206:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (status && rx_data[0] == 0x1E)
 800120a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800120e:	2b00      	cmp	r3, #0
 8001210:	d01e      	beq.n	8001250 <_ZN6BMI0884initEv+0x12c>
 8001212:	7f3b      	ldrb	r3, [r7, #28]
 8001214:	2b1e      	cmp	r3, #30
 8001216:	d11b      	bne.n	8001250 <_ZN6BMI0884initEv+0x12c>
	{
		USB_Log("Found BMI088 accelerometer, starting initialization.", CRITICAL);
 8001218:	2101      	movs	r1, #1
 800121a:	48c9      	ldr	r0, [pc, #804]	@ (8001540 <_ZN6BMI0884initEv+0x41c>)
 800121c:	f002 fa52 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	else
	{
		USB_Log("Failed to find BMI088 accelerometer. Initialization failed.", ERR);
		return false;
	}
	osDelay(10);
 8001220:	200a      	movs	r0, #10
 8001222:	f00d fde4 	bl	800edee <osDelay>

	// Set 400Hz ODR, no over-sampling (145Hz BW)
	tx_data[0] = 0xAA;
 8001226:	23aa      	movs	r3, #170	@ 0xaa
 8001228:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_ACC_CONF, tx_data, 1);
 800122c:	f107 0220 	add.w	r2, r7, #32
 8001230:	2301      	movs	r3, #1
 8001232:	2140      	movs	r1, #64	@ 0x40
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 fe15 	bl	8001e64 <_ZN6BMI08820write_accel_registerEhPht>
 800123a:	4603      	mov	r3, r0
 800123c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001240:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001244:	f083 0301 	eor.w	r3, r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d106      	bne.n	800125c <_ZN6BMI0884initEv+0x138>
 800124e:	e008      	b.n	8001262 <_ZN6BMI0884initEv+0x13e>
		USB_Log("Failed to find BMI088 accelerometer. Initialization failed.", ERR);
 8001250:	2102      	movs	r1, #2
 8001252:	48bc      	ldr	r0, [pc, #752]	@ (8001544 <_ZN6BMI0884initEv+0x420>)
 8001254:	f002 fa36 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
		return false;
 8001258:	2300      	movs	r3, #0
 800125a:	e1a7      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	if (!status) return status;
 800125c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001260:	e1a4      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 8001262:	200a      	movs	r0, #10
 8001264:	f00d fdc3 	bl	800edee <osDelay>

	// Initilize accelerometer IIR Filters
	float ACCEL_ODR = 400;			// Hz
 8001268:	4bb7      	ldr	r3, [pc, #732]	@ (8001548 <_ZN6BMI0884initEv+0x424>)
 800126a:	61bb      	str	r3, [r7, #24]
	float ACCEL_CUTOFF = 10;		// Hz
 800126c:	4bb7      	ldr	r3, [pc, #732]	@ (800154c <_ZN6BMI0884initEv+0x428>)
 800126e:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < accel_filters.size(); i++)
 8001270:	2300      	movs	r3, #0
 8001272:	637b      	str	r3, [r7, #52]	@ 0x34
 8001274:	e01d      	b.n	80012b2 <_ZN6BMI0884initEv+0x18e>
	{
		accel_filters[i] = std::make_unique<IIRFilter>(ACCEL_CUTOFF, ACCEL_ODR);
 8001276:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800127a:	f107 0218 	add.w	r2, r7, #24
 800127e:	f107 0114 	add.w	r1, r7, #20
 8001282:	4618      	mov	r0, r3
 8001284:	f000 ff4e 	bl	8002124 <_ZSt11make_uniqueI9IIRFilterJRfS1_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3344      	adds	r3, #68	@ 0x44
 800128c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800128e:	4618      	mov	r0, r3
 8001290:	f000 ff39 	bl	8002106 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8001294:	4602      	mov	r2, r0
 8001296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129a:	4619      	mov	r1, r3
 800129c:	4610      	mov	r0, r2
 800129e:	f7ff ff31 	bl	8001104 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>
 80012a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 ff00 	bl	80020ac <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev>
	for (size_t i = 0; i < accel_filters.size(); i++)
 80012ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012ae:	3301      	adds	r3, #1
 80012b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3344      	adds	r3, #68	@ 0x44
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 ff1a 	bl	80020f0 <_ZNKSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE4sizeEv>
 80012bc:	4602      	mov	r2, r0
 80012be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d3d8      	bcc.n	8001276 <_ZN6BMI0884initEv+0x152>
	}

	// Set +-3g range (10920 LSB/g)
	tx_data[0] = 0x00;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_ACC_RANGE, tx_data, 1);
 80012ca:	f107 0220 	add.w	r2, r7, #32
 80012ce:	2301      	movs	r3, #1
 80012d0:	2141      	movs	r1, #65	@ 0x41
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 fdc6 	bl	8001e64 <_ZN6BMI08820write_accel_registerEhPht>
 80012d8:	4603      	mov	r3, r0
 80012da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 80012de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012e2:	f083 0301 	eor.w	r3, r3, #1
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <_ZN6BMI0884initEv+0x1ce>
 80012ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012f0:	e15c      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 80012f2:	200a      	movs	r0, #10
 80012f4:	f00d fd7b 	bl	800edee <osDelay>

	// Configure INT1 (output, push-pull, active high)
	tx_data[0] = 0x0A;
 80012f8:	230a      	movs	r3, #10
 80012fa:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_INT1_IO_CTRL, tx_data, 1);
 80012fe:	f107 0220 	add.w	r2, r7, #32
 8001302:	2301      	movs	r3, #1
 8001304:	2153      	movs	r1, #83	@ 0x53
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 fdac 	bl	8001e64 <_ZN6BMI08820write_accel_registerEhPht>
 800130c:	4603      	mov	r3, r0
 800130e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001312:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001316:	f083 0301 	eor.w	r3, r3, #1
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <_ZN6BMI0884initEv+0x202>
 8001320:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001324:	e142      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 8001326:	200a      	movs	r0, #10
 8001328:	f00d fd61 	bl	800edee <osDelay>

	// Map accelerometer data ready interrupt to INT1
	tx_data[0] = 0x04;
 800132c:	2304      	movs	r3, #4
 800132e:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_INT_MAP_DATA, tx_data, 1);
 8001332:	f107 0220 	add.w	r2, r7, #32
 8001336:	2301      	movs	r3, #1
 8001338:	2158      	movs	r1, #88	@ 0x58
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 fd92 	bl	8001e64 <_ZN6BMI08820write_accel_registerEhPht>
 8001340:	4603      	mov	r3, r0
 8001342:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001346:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800134a:	f083 0301 	eor.w	r3, r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <_ZN6BMI0884initEv+0x236>
 8001354:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001358:	e128      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 800135a:	200a      	movs	r0, #10
 800135c:	f00d fd47 	bl	800edee <osDelay>

	// Switch accelerometer into active mode (enable data acquisition)
	tx_data[0] = 0x00;
 8001360:	2300      	movs	r3, #0
 8001362:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_ACC_PWR_CONF, tx_data, 1);
 8001366:	f107 0220 	add.w	r2, r7, #32
 800136a:	2301      	movs	r3, #1
 800136c:	217c      	movs	r1, #124	@ 0x7c
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 fd78 	bl	8001e64 <_ZN6BMI08820write_accel_registerEhPht>
 8001374:	4603      	mov	r3, r0
 8001376:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 800137a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800137e:	f083 0301 	eor.w	r3, r3, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <_ZN6BMI0884initEv+0x26a>
 8001388:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800138c:	e10e      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 800138e:	200a      	movs	r0, #10
 8001390:	f00d fd2d 	bl	800edee <osDelay>

	// Turn accelerometer ON
	tx_data[0] = 0x04;
 8001394:	2304      	movs	r3, #4
 8001396:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_ACC_PWR_CTRL, tx_data, 1);
 800139a:	f107 0220 	add.w	r2, r7, #32
 800139e:	2301      	movs	r3, #1
 80013a0:	217d      	movs	r1, #125	@ 0x7d
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 fd5e 	bl	8001e64 <_ZN6BMI08820write_accel_registerEhPht>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 80013ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013b2:	f083 0301 	eor.w	r3, r3, #1
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <_ZN6BMI0884initEv+0x29e>
 80013bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013c0:	e0f4      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 80013c2:	200a      	movs	r0, #10
 80013c4:	f00d fd13 	bl	800edee <osDelay>

	USB_Log("BMI088 accelerometer initialized OK.", CRITICAL);
 80013c8:	2101      	movs	r1, #1
 80013ca:	4861      	ldr	r0, [pc, #388]	@ (8001550 <_ZN6BMI0884initEv+0x42c>)
 80013cc:	f002 f97a 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 80013d0:	2064      	movs	r0, #100	@ 0x64
 80013d2:	f00d fd0c 	bl	800edee <osDelay>
	/*
	 * GYROSCOPE SETUP
	 */

	// Check gyroscope chip ID
	rx_data[0] = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	773b      	strb	r3, [r7, #28]
	status = read_gyro_register(REG_GYRO_CHIP_ID, rx_data, 1);
 80013da:	f107 021c 	add.w	r2, r7, #28
 80013de:	2301      	movs	r3, #1
 80013e0:	2100      	movs	r1, #0
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 fc6c 	bl	8001cc0 <_ZN6BMI08818read_gyro_registerEhPht>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (status && rx_data[0] == 0x0F)
 80013ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d01e      	beq.n	8001434 <_ZN6BMI0884initEv+0x310>
 80013f6:	7f3b      	ldrb	r3, [r7, #28]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d11b      	bne.n	8001434 <_ZN6BMI0884initEv+0x310>
	{
		USB_Log("Found BMI088 gyroscope, starting initialization.", CRITICAL);
 80013fc:	2101      	movs	r1, #1
 80013fe:	4855      	ldr	r0, [pc, #340]	@ (8001554 <_ZN6BMI0884initEv+0x430>)
 8001400:	f002 f960 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	else
	{
		USB_Log("Failed to find BMI088 gyroscope. Initialization failed.", ERR);
		return false;
	}
	osDelay(10);
 8001404:	200a      	movs	r0, #10
 8001406:	f00d fcf2 	bl	800edee <osDelay>

	// Set 400Hz ODR (47Hz BW)
	tx_data[0] = 0x03;
 800140a:	2303      	movs	r3, #3
 800140c:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_GYRO_BANDWIDTH, tx_data, 1);
 8001410:	f107 0220 	add.w	r2, r7, #32
 8001414:	2301      	movs	r3, #1
 8001416:	2110      	movs	r1, #16
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fdb5 	bl	8001f88 <_ZN6BMI08819write_gyro_registerEhPht>
 800141e:	4603      	mov	r3, r0
 8001420:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001424:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001428:	f083 0301 	eor.w	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <_ZN6BMI0884initEv+0x31c>
 8001432:	e008      	b.n	8001446 <_ZN6BMI0884initEv+0x322>
		USB_Log("Failed to find BMI088 gyroscope. Initialization failed.", ERR);
 8001434:	2102      	movs	r1, #2
 8001436:	4848      	ldr	r0, [pc, #288]	@ (8001558 <_ZN6BMI0884initEv+0x434>)
 8001438:	f002 f944 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
		return false;
 800143c:	2300      	movs	r3, #0
 800143e:	e0b5      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	if (!status) return status;
 8001440:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001444:	e0b2      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 8001446:	200a      	movs	r0, #10
 8001448:	f00d fcd1 	bl	800edee <osDelay>

	// Initilize gyroscope IIR Filters
	float GYRO_ODR = 400;		// Hz
 800144c:	4b3e      	ldr	r3, [pc, #248]	@ (8001548 <_ZN6BMI0884initEv+0x424>)
 800144e:	613b      	str	r3, [r7, #16]
	float GYRO_CUTOFF = 50;		// Hz
 8001450:	4b42      	ldr	r3, [pc, #264]	@ (800155c <_ZN6BMI0884initEv+0x438>)
 8001452:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; i < gyro_filters.size(); i++)
 8001454:	2300      	movs	r3, #0
 8001456:	633b      	str	r3, [r7, #48]	@ 0x30
 8001458:	e01d      	b.n	8001496 <_ZN6BMI0884initEv+0x372>
	{
		gyro_filters[i] = std::make_unique<IIRFilter>(GYRO_CUTOFF, GYRO_ODR);
 800145a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800145e:	f107 0210 	add.w	r2, r7, #16
 8001462:	f107 010c 	add.w	r1, r7, #12
 8001466:	4618      	mov	r0, r3
 8001468:	f000 fe5c 	bl	8002124 <_ZSt11make_uniqueI9IIRFilterJRfS1_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3350      	adds	r3, #80	@ 0x50
 8001470:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001472:	4618      	mov	r0, r3
 8001474:	f000 fe47 	bl	8002106 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8001478:	4602      	mov	r2, r0
 800147a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800147e:	4619      	mov	r1, r3
 8001480:	4610      	mov	r0, r2
 8001482:	f7ff fe3f 	bl	8001104 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>
 8001486:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fe0e 	bl	80020ac <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev>
	for (size_t i = 0; i < gyro_filters.size(); i++)
 8001490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001492:	3301      	adds	r3, #1
 8001494:	633b      	str	r3, [r7, #48]	@ 0x30
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3350      	adds	r3, #80	@ 0x50
 800149a:	4618      	mov	r0, r3
 800149c:	f000 fe28 	bl	80020f0 <_ZNKSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE4sizeEv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d3d8      	bcc.n	800145a <_ZN6BMI0884initEv+0x336>
	}

	// Set +-500 deg/s range (65.536 LSB/deg/s)
	tx_data[0] = 0x02;
 80014a8:	2302      	movs	r3, #2
 80014aa:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_GYRO_RANGE, tx_data, 1);
 80014ae:	f107 0220 	add.w	r2, r7, #32
 80014b2:	2301      	movs	r3, #1
 80014b4:	210f      	movs	r1, #15
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 fd66 	bl	8001f88 <_ZN6BMI08819write_gyro_registerEhPht>
 80014bc:	4603      	mov	r3, r0
 80014be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 80014c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014c6:	f083 0301 	eor.w	r3, r3, #1
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <_ZN6BMI0884initEv+0x3b2>
 80014d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014d4:	e06a      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 80014d6:	200a      	movs	r0, #10
 80014d8:	f00d fc89 	bl	800edee <osDelay>

	// Configure INT3 (push-pull, active high)
	tx_data[0] = 0x01;
 80014dc:	2301      	movs	r3, #1
 80014de:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_INT3_INT4_IO_CONF, tx_data, 1);
 80014e2:	f107 0220 	add.w	r2, r7, #32
 80014e6:	2301      	movs	r3, #1
 80014e8:	2116      	movs	r1, #22
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 fd4c 	bl	8001f88 <_ZN6BMI08819write_gyro_registerEhPht>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 80014f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014fa:	f083 0301 	eor.w	r3, r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <_ZN6BMI0884initEv+0x3e6>
 8001504:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001508:	e050      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 800150a:	200a      	movs	r0, #10
 800150c:	f00d fc6f 	bl	800edee <osDelay>

	// Map gyroscope data ready interrupt to INT3
	tx_data[0] = 0x01;
 8001510:	2301      	movs	r3, #1
 8001512:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_INT3_INT4_IO_MAP, tx_data, 1);
 8001516:	f107 0220 	add.w	r2, r7, #32
 800151a:	2301      	movs	r3, #1
 800151c:	2118      	movs	r1, #24
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 fd32 	bl	8001f88 <_ZN6BMI08819write_gyro_registerEhPht>
 8001524:	4603      	mov	r3, r0
 8001526:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 800152a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800152e:	f083 0301 	eor.w	r3, r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d013      	beq.n	8001560 <_ZN6BMI0884initEv+0x43c>
 8001538:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800153c:	e036      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
 800153e:	bf00      	nop
 8001540:	08021ce8 	.word	0x08021ce8
 8001544:	08021d20 	.word	0x08021d20
 8001548:	43c80000 	.word	0x43c80000
 800154c:	41200000 	.word	0x41200000
 8001550:	08021d5c 	.word	0x08021d5c
 8001554:	08021d84 	.word	0x08021d84
 8001558:	08021db8 	.word	0x08021db8
 800155c:	42480000 	.word	0x42480000
	osDelay(10);
 8001560:	200a      	movs	r0, #10
 8001562:	f00d fc44 	bl	800edee <osDelay>

	// Enable gyroscope new data interrupt
	tx_data[0] = 0x80;
 8001566:	2380      	movs	r3, #128	@ 0x80
 8001568:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_GYRO_INT_CTRL, tx_data, 1);
 800156c:	f107 0220 	add.w	r2, r7, #32
 8001570:	2301      	movs	r3, #1
 8001572:	2115      	movs	r1, #21
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 fd07 	bl	8001f88 <_ZN6BMI08819write_gyro_registerEhPht>
 800157a:	4603      	mov	r3, r0
 800157c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001580:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001584:	f083 0301 	eor.w	r3, r3, #1
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d002      	beq.n	8001594 <_ZN6BMI0884initEv+0x470>
 800158e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001592:	e00b      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 8001594:	200a      	movs	r0, #10
 8001596:	f00d fc2a 	bl	800edee <osDelay>

	USB_Log("BMI088 gyroscope initialized OK.", CRITICAL);
 800159a:	2101      	movs	r1, #1
 800159c:	4805      	ldr	r0, [pc, #20]	@ (80015b4 <_ZN6BMI0884initEv+0x490>)
 800159e:	f002 f891 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 80015a2:	2064      	movs	r0, #100	@ 0x64
 80015a4:	f00d fc23 	bl	800edee <osDelay>

	return status;
 80015a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3738      	adds	r7, #56	@ 0x38
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	08021df0 	.word	0x08021df0

080015b8 <_ZN6BMI08825service_irq_accelerometerEv>:

bool BMI088::service_irq_accelerometer()
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b08b      	sub	sp, #44	@ 0x2c
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	// Read raw accelerometer data
	uint8_t rx_data[6];
	bool status = read_accel_register(REG_ACC_X_LSB, rx_data, sizeof(rx_data));
 80015c0:	f107 020c 	add.w	r2, r7, #12
 80015c4:	2306      	movs	r3, #6
 80015c6:	2112      	movs	r1, #18
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 faa7 	bl	8001b1c <_ZN6BMI08819read_accel_registerEhPht>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status)
 80015d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 809e 	beq.w	800171a <_ZN6BMI08825service_irq_accelerometerEv+0x162>
	{
		// Convert raw data into engineering units
		int16_t accel_x_int16 = (rx_data[1] << 8) | rx_data[0];
 80015de:	7b7b      	ldrb	r3, [r7, #13]
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	7b3b      	ldrb	r3, [r7, #12]
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
		int16_t accel_y_int16 = (rx_data[3] << 8) | rx_data[2];
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	7bbb      	ldrb	r3, [r7, #14]
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	4313      	orrs	r3, r2
 80015f8:	847b      	strh	r3, [r7, #34]	@ 0x22
		int16_t accel_z_int16 = (rx_data[5] << 8) | rx_data[4];
 80015fa:	7c7b      	ldrb	r3, [r7, #17]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b21a      	sxth	r2, r3
 8001600:	7c3b      	ldrb	r3, [r7, #16]
 8001602:	b21b      	sxth	r3, r3
 8001604:	4313      	orrs	r3, r2
 8001606:	843b      	strh	r3, [r7, #32]
		
		float bmi_x = accel_filters[0]->update(accel_x_int16 * acc_conversion);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3344      	adds	r3, #68	@ 0x44
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f000 fd79 	bl	8002106 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8001614:	4603      	mov	r3, r0
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fdca 	bl	80021b0 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 800161c:	4602      	mov	r2, r0
 800161e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001634:	eeb0 0a67 	vmov.f32	s0, s15
 8001638:	4610      	mov	r0, r2
 800163a:	f002 fe43 	bl	80042c4 <_ZN9IIRFilter6updateEf>
 800163e:	ed87 0a07 	vstr	s0, [r7, #28]
		float bmi_y = accel_filters[1]->update(accel_y_int16 * acc_conversion);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3344      	adds	r3, #68	@ 0x44
 8001646:	2101      	movs	r1, #1
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fd5c 	bl	8002106 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 800164e:	4603      	mov	r3, r0
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fdad 	bl	80021b0 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 8001656:	4602      	mov	r2, r0
 8001658:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800165c:	ee07 3a90 	vmov	s15, r3
 8001660:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	edd3 7a06 	vldr	s15, [r3, #24]
 800166a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166e:	eeb0 0a67 	vmov.f32	s0, s15
 8001672:	4610      	mov	r0, r2
 8001674:	f002 fe26 	bl	80042c4 <_ZN9IIRFilter6updateEf>
 8001678:	ed87 0a06 	vstr	s0, [r7, #24]
		float bmi_z = accel_filters[2]->update(accel_z_int16 * acc_conversion);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3344      	adds	r3, #68	@ 0x44
 8001680:	2102      	movs	r1, #2
 8001682:	4618      	mov	r0, r3
 8001684:	f000 fd3f 	bl	8002106 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8001688:	4603      	mov	r3, r0
 800168a:	4618      	mov	r0, r3
 800168c:	f000 fd90 	bl	80021b0 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 8001690:	4602      	mov	r2, r0
 8001692:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001696:	ee07 3a90 	vmov	s15, r3
 800169a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80016a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a8:	eeb0 0a67 	vmov.f32	s0, s15
 80016ac:	4610      	mov	r0, r2
 80016ae:	f002 fe09 	bl	80042c4 <_ZN9IIRFilter6updateEf>
 80016b2:	ed87 0a05 	vstr	s0, [r7, #20]

		{
			np::lock_guard lock(accel_data_mutex);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1a      	ldr	r2, [r3, #32]
 80016ba:	f107 0308 	add.w	r3, r7, #8
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fca3 	bl	800100c <_ZN2np10lock_guardC1ERPv>
			linear_accelerations[0] = bmi_x;
 80016c6:	69fc      	ldr	r4, [r7, #28]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3328      	adds	r3, #40	@ 0x28
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fd7a 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 80016d4:	4603      	mov	r3, r0
 80016d6:	601c      	str	r4, [r3, #0]
			linear_accelerations[1] = bmi_y;
 80016d8:	69bc      	ldr	r4, [r7, #24]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3328      	adds	r3, #40	@ 0x28
 80016de:	2101      	movs	r1, #1
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 fd71 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 80016e6:	4603      	mov	r3, r0
 80016e8:	601c      	str	r4, [r3, #0]
			linear_accelerations[2] = bmi_z;
 80016ea:	697c      	ldr	r4, [r7, #20]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3328      	adds	r3, #40	@ 0x28
 80016f0:	2102      	movs	r1, #2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fd68 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 80016f8:	4603      	mov	r3, r0
 80016fa:	601c      	str	r4, [r3, #0]
		}
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fc98 	bl	8001036 <_ZN2np10lock_guardD1Ev>

		// Clear data ready interrupt
		bool temp = read_accel_register(REG_ACC_INT_STAT_1, rx_data, 1);
 8001706:	f107 020c 	add.w	r2, r7, #12
 800170a:	2301      	movs	r3, #1
 800170c:	211d      	movs	r1, #29
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 fa04 	bl	8001b1c <_ZN6BMI08819read_accel_registerEhPht>
 8001714:	4603      	mov	r3, r0
 8001716:	74fb      	strb	r3, [r7, #19]
 8001718:	e003      	b.n	8001722 <_ZN6BMI08825service_irq_accelerometerEv+0x16a>
		(void)temp;
	}
	else
	{
		USB_Log("ERROR reading BMI088 accelerometer data.", ERR);
 800171a:	2102      	movs	r1, #2
 800171c:	4804      	ldr	r0, [pc, #16]	@ (8001730 <_ZN6BMI08825service_irq_accelerometerEv+0x178>)
 800171e:	f001 ffd1 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 8001722:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001726:	4618      	mov	r0, r3
 8001728:	372c      	adds	r7, #44	@ 0x2c
 800172a:	46bd      	mov	sp, r7
 800172c:	bd90      	pop	{r4, r7, pc}
 800172e:	bf00      	nop
 8001730:	08021e14 	.word	0x08021e14

08001734 <_ZN6BMI08821service_irq_gyroscopeEv>:

bool BMI088::service_irq_gyroscope()
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b08b      	sub	sp, #44	@ 0x2c
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	// Read raw gyroscope data
	uint8_t rx_data[6];
	bool status = read_gyro_register(REG_RATE_X_LSB, rx_data, sizeof(rx_data));
 800173c:	f107 020c 	add.w	r2, r7, #12
 8001740:	2306      	movs	r3, #6
 8001742:	2102      	movs	r1, #2
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 fabb 	bl	8001cc0 <_ZN6BMI08818read_gyro_registerEhPht>
 800174a:	4603      	mov	r3, r0
 800174c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status)
 8001750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 8095 	beq.w	8001884 <_ZN6BMI08821service_irq_gyroscopeEv+0x150>
	{
		// Convert raw data into engineering units
		int16_t rate_x_int16 = (rx_data[1] << 8) | rx_data[0];
 800175a:	7b7b      	ldrb	r3, [r7, #13]
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	b21a      	sxth	r2, r3
 8001760:	7b3b      	ldrb	r3, [r7, #12]
 8001762:	b21b      	sxth	r3, r3
 8001764:	4313      	orrs	r3, r2
 8001766:	84bb      	strh	r3, [r7, #36]	@ 0x24
		int16_t rate_y_int16 = (rx_data[3] << 8) | rx_data[2];
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	b21a      	sxth	r2, r3
 800176e:	7bbb      	ldrb	r3, [r7, #14]
 8001770:	b21b      	sxth	r3, r3
 8001772:	4313      	orrs	r3, r2
 8001774:	847b      	strh	r3, [r7, #34]	@ 0x22
		int16_t rate_z_int16 = (rx_data[5] << 8) | rx_data[4];
 8001776:	7c7b      	ldrb	r3, [r7, #17]
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	b21a      	sxth	r2, r3
 800177c:	7c3b      	ldrb	r3, [r7, #16]
 800177e:	b21b      	sxth	r3, r3
 8001780:	4313      	orrs	r3, r2
 8001782:	843b      	strh	r3, [r7, #32]

		float bmi_x = gyro_filters[0]->update(rate_x_int16 * gyro_conversion);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3350      	adds	r3, #80	@ 0x50
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fcbb 	bl	8002106 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8001790:	4603      	mov	r3, r0
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fd0c 	bl	80021b0 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 8001798:	4602      	mov	r2, r0
 800179a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80017ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b0:	eeb0 0a67 	vmov.f32	s0, s15
 80017b4:	4610      	mov	r0, r2
 80017b6:	f002 fd85 	bl	80042c4 <_ZN9IIRFilter6updateEf>
 80017ba:	ed87 0a07 	vstr	s0, [r7, #28]
		float bmi_y = gyro_filters[1]->update(rate_y_int16 * gyro_conversion);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3350      	adds	r3, #80	@ 0x50
 80017c2:	2101      	movs	r1, #1
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fc9e 	bl	8002106 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 fcef 	bl	80021b0 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 80017d2:	4602      	mov	r2, r0
 80017d4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80017d8:	ee07 3a90 	vmov	s15, r3
 80017dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	edd3 7a07 	vldr	s15, [r3, #28]
 80017e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ea:	eeb0 0a67 	vmov.f32	s0, s15
 80017ee:	4610      	mov	r0, r2
 80017f0:	f002 fd68 	bl	80042c4 <_ZN9IIRFilter6updateEf>
 80017f4:	ed87 0a06 	vstr	s0, [r7, #24]
		float bmi_z = gyro_filters[2]->update(rate_z_int16 * gyro_conversion);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3350      	adds	r3, #80	@ 0x50
 80017fc:	2102      	movs	r1, #2
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 fc81 	bl	8002106 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8001804:	4603      	mov	r3, r0
 8001806:	4618      	mov	r0, r3
 8001808:	f000 fcd2 	bl	80021b0 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 800180c:	4602      	mov	r2, r0
 800180e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001824:	eeb0 0a67 	vmov.f32	s0, s15
 8001828:	4610      	mov	r0, r2
 800182a:	f002 fd4b 	bl	80042c4 <_ZN9IIRFilter6updateEf>
 800182e:	ed87 0a05 	vstr	s0, [r7, #20]

		np::lock_guard lock(gyro_data_mutex);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fbe5 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		angular_velocities[0] = bmi_x;
 8001842:	69fc      	ldr	r4, [r7, #28]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3334      	adds	r3, #52	@ 0x34
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f000 fcbc 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8001850:	4603      	mov	r3, r0
 8001852:	601c      	str	r4, [r3, #0]
		angular_velocities[1] = bmi_y;
 8001854:	69bc      	ldr	r4, [r7, #24]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3334      	adds	r3, #52	@ 0x34
 800185a:	2101      	movs	r1, #1
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fcb3 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8001862:	4603      	mov	r3, r0
 8001864:	601c      	str	r4, [r3, #0]
		angular_velocities[2] = bmi_z;
 8001866:	697c      	ldr	r4, [r7, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3334      	adds	r3, #52	@ 0x34
 800186c:	2102      	movs	r1, #2
 800186e:	4618      	mov	r0, r3
 8001870:	f000 fcaa 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8001874:	4603      	mov	r3, r0
 8001876:	601c      	str	r4, [r3, #0]

		// Interrupt cleared automatically after 280-400us
	}
 8001878:	f107 0308 	add.w	r3, r7, #8
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fbda 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 8001882:	e003      	b.n	800188c <_ZN6BMI08821service_irq_gyroscopeEv+0x158>
	else
	{
		USB_Log("ERROR reading BMI088 gyroscope data.", ERR);
 8001884:	2102      	movs	r1, #2
 8001886:	4804      	ldr	r0, [pc, #16]	@ (8001898 <_ZN6BMI08821service_irq_gyroscopeEv+0x164>)
 8001888:	f001 ff1c 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 800188c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001890:	4618      	mov	r0, r3
 8001892:	372c      	adds	r7, #44	@ 0x2c
 8001894:	46bd      	mov	sp, r7
 8001896:	bd90      	pop	{r4, r7, pc}
 8001898:	08021e40 	.word	0x08021e40

0800189c <_ZN6BMI08823service_irq_temperatureEv>:

bool BMI088::service_irq_temperature()
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	// Read raw temperature data
	uint8_t rx_data[2];
	bool status = read_accel_register(REG_TEMP_MSB, rx_data, sizeof(rx_data));
 80018a4:	f107 0210 	add.w	r2, r7, #16
 80018a8:	2302      	movs	r3, #2
 80018aa:	2122      	movs	r1, #34	@ 0x22
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f935 	bl	8001b1c <_ZN6BMI08819read_accel_registerEhPht>
 80018b2:	4603      	mov	r3, r0
 80018b4:	757b      	strb	r3, [r7, #21]

	if (status)
 80018b6:	7d7b      	ldrb	r3, [r7, #21]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d036      	beq.n	800192a <_ZN6BMI08823service_irq_temperatureEv+0x8e>
	{
		// Convert raw data into engineering units
		uint16_t temp_uint11 = (rx_data[0] << 3) | (rx_data[1] >> 5);
 80018bc:	7c3b      	ldrb	r3, [r7, #16]
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	b21a      	sxth	r2, r3
 80018c2:	7c7b      	ldrb	r3, [r7, #17]
 80018c4:	095b      	lsrs	r3, r3, #5
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	b21b      	sxth	r3, r3
 80018ca:	4313      	orrs	r3, r2
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	827b      	strh	r3, [r7, #18]
		int16_t temp_int11 = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	82fb      	strh	r3, [r7, #22]
		if (temp_uint11 > 1023)
 80018d4:	8a7b      	ldrh	r3, [r7, #18]
 80018d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018da:	d305      	bcc.n	80018e8 <_ZN6BMI08823service_irq_temperatureEv+0x4c>
		{
			temp_int11 = temp_uint11 - 2048;
 80018dc:	8a7b      	ldrh	r3, [r7, #18]
 80018de:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	82fb      	strh	r3, [r7, #22]
 80018e6:	e001      	b.n	80018ec <_ZN6BMI08823service_irq_temperatureEv+0x50>
		}
		else
		{
			temp_int11 = temp_uint11;
 80018e8:	8a7b      	ldrh	r3, [r7, #18]
 80018ea:	82fb      	strh	r3, [r7, #22]
		}
		np::lock_guard lock(accel_data_mutex);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1a      	ldr	r2, [r3, #32]
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	4611      	mov	r1, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fb88 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		temperature = temp_int11 * 0.125f + 23.0f;
 80018fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001908:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 800190c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001910:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8001914:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	}
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fb87 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 8001928:	e003      	b.n	8001932 <_ZN6BMI08823service_irq_temperatureEv+0x96>
	else
	{
		USB_Log("ERROR reading BMI088 temperature data.", ERR);
 800192a:	2102      	movs	r1, #2
 800192c:	4803      	ldr	r0, [pc, #12]	@ (800193c <_ZN6BMI08823service_irq_temperatureEv+0xa0>)
 800192e:	f001 fec9 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 8001932:	7d7b      	ldrb	r3, [r7, #21]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	08021e68 	.word	0x08021e68

08001940 <_ZN6BMI08815log_data_to_gcsEv>:

void BMI088::log_data_to_gcs()
{
 8001940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001944:	b0b8      	sub	sp, #224	@ 0xe0
 8001946:	af0e      	add	r7, sp, #56	@ 0x38
 8001948:	61f8      	str	r0, [r7, #28]
	char string[128];
	{
		np::lock_guard lock1(accel_data_mutex);
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	6a1a      	ldr	r2, [r3, #32]
 800194e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fb59 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		np::lock_guard lock2(gyro_data_mutex);
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800195e:	f107 0320 	add.w	r3, r7, #32
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fb51 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
				linear_accelerations[0],
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3328      	adds	r3, #40	@ 0x28
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f000 fc29 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8001976:	4603      	mov	r3, r0
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fe0c 	bl	8000598 <__aeabi_f2d>
 8001980:	4680      	mov	r8, r0
 8001982:	4689      	mov	r9, r1
				linear_accelerations[1],
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	3328      	adds	r3, #40	@ 0x28
 8001988:	2101      	movs	r1, #1
 800198a:	4618      	mov	r0, r3
 800198c:	f000 fc1c 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8001990:	4603      	mov	r3, r0
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fdff 	bl	8000598 <__aeabi_f2d>
 800199a:	4682      	mov	sl, r0
 800199c:	468b      	mov	fp, r1
				linear_accelerations[2],
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3328      	adds	r3, #40	@ 0x28
 80019a2:	2102      	movs	r1, #2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 fc0f 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 80019aa:	4603      	mov	r3, r0
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fdf2 	bl	8000598 <__aeabi_f2d>
 80019b4:	e9c7 0104 	strd	r0, r1, [r7, #16]
				angular_velocities[0],
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	3334      	adds	r3, #52	@ 0x34
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fc02 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 80019c4:	4603      	mov	r3, r0
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fde5 	bl	8000598 <__aeabi_f2d>
 80019ce:	e9c7 0102 	strd	r0, r1, [r7, #8]
				angular_velocities[1],
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3334      	adds	r3, #52	@ 0x34
 80019d6:	2101      	movs	r1, #1
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 fbf5 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 80019de:	4603      	mov	r3, r0
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fdd8 	bl	8000598 <__aeabi_f2d>
 80019e8:	e9c7 0100 	strd	r0, r1, [r7]
				angular_velocities[2],
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	3334      	adds	r3, #52	@ 0x34
 80019f0:	2102      	movs	r1, #2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fbe8 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 80019f8:	4603      	mov	r3, r0
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fdcb 	bl	8000598 <__aeabi_f2d>
 8001a02:	4604      	mov	r4, r0
 8001a04:	460d      	mov	r5, r1
				temperature);
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fdc4 	bl	8000598 <__aeabi_f2d>
 8001a10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a14:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8001a18:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 8001a1c:	ed97 7b00 	vldr	d7, [r7]
 8001a20:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001a24:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a28:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001a2c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a30:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001a34:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001a38:	e9cd 8900 	strd	r8, r9, [sp]
 8001a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a70 <_ZN6BMI08815log_data_to_gcsEv+0x130>)
 8001a3e:	2180      	movs	r1, #128	@ 0x80
 8001a40:	4618      	mov	r0, r3
 8001a42:	f01e f869 	bl	801fb18 <sniprintf>
	}
 8001a46:	f107 0320 	add.w	r3, r7, #32
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff faf3 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 8001a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff faee 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	USB_Log(string, SENSOR);
 8001a5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a5e:	2103      	movs	r1, #3
 8001a60:	4618      	mov	r0, r3
 8001a62:	f001 fe2f 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
}
 8001a66:	bf00      	nop
 8001a68:	37a8      	adds	r7, #168	@ 0xa8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a70:	08021e90 	.word	0x08021e90

08001a74 <_ZN6BMI08824get_linear_accelerationsEv>:

std::array<float, 3> BMI088::get_linear_accelerations()
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	@ 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6178      	str	r0, [r7, #20]
	np::lock_guard lock(accel_data_mutex);
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	6a1a      	ldr	r2, [r3, #32]
 8001a80:	f107 0318 	add.w	r3, r7, #24
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fac0 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	return linear_accelerations;
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	f107 031c 	add.w	r3, r7, #28
 8001a92:	3228      	adds	r2, #40	@ 0x28
 8001a94:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8001a9a:	f107 0318 	add.w	r3, r7, #24
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fac9 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	return linear_accelerations;
 8001aa4:	69f9      	ldr	r1, [r7, #28]
 8001aa6:	6a3a      	ldr	r2, [r7, #32]
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	ee06 1a90 	vmov	s13, r1
 8001aae:	ee07 2a10 	vmov	s14, r2
 8001ab2:	ee07 3a90 	vmov	s15, r3
}
 8001ab6:	eeb0 0a66 	vmov.f32	s0, s13
 8001aba:	eef0 0a47 	vmov.f32	s1, s14
 8001abe:	eeb0 1a67 	vmov.f32	s2, s15
 8001ac2:	3728      	adds	r7, #40	@ 0x28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_ZN6BMI08822get_angular_velocitiesEv>:

std::array<float, 3> BMI088::get_angular_velocities()
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	@ 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6178      	str	r0, [r7, #20]
	np::lock_guard lock(gyro_data_mutex);
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fa96 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	return angular_velocities;
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	f107 031c 	add.w	r3, r7, #28
 8001ae6:	3234      	adds	r2, #52	@ 0x34
 8001ae8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8001aee:	f107 0318 	add.w	r3, r7, #24
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fa9f 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	return angular_velocities;
 8001af8:	69f9      	ldr	r1, [r7, #28]
 8001afa:	6a3a      	ldr	r2, [r7, #32]
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	ee06 1a90 	vmov	s13, r1
 8001b02:	ee07 2a10 	vmov	s14, r2
 8001b06:	ee07 3a90 	vmov	s15, r3
}
 8001b0a:	eeb0 0a66 	vmov.f32	s0, s13
 8001b0e:	eef0 0a47 	vmov.f32	s1, s14
 8001b12:	eeb0 1a67 	vmov.f32	s2, s15
 8001b16:	3728      	adds	r7, #40	@ 0x28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_ZN6BMI08819read_accel_registerEhPht>:
 *
 *  Low-level register read / write
 *
 */
bool BMI088::read_accel_register(uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 8001b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b20:	b091      	sub	sp, #68	@ 0x44
 8001b22:	af02      	add	r7, sp, #8
 8001b24:	6178      	str	r0, [r7, #20]
 8001b26:	60fa      	str	r2, [r7, #12]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	74fb      	strb	r3, [r7, #19]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	823b      	strh	r3, [r7, #16]
	{
		USB_Log("BMI088 accelerometer register read failed.\n", ERR);
	}

	return status;
}
 8001b32:	466b      	mov	r3, sp
 8001b34:	461e      	mov	r6, r3
	bool status = false;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint16_t num_bytes = data_len + 2;
 8001b3c:	8a3b      	ldrh	r3, [r7, #16]
 8001b3e:	3302      	adds	r3, #2
 8001b40:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	uint8_t tx_buffer[num_bytes];
 8001b42:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001b44:	460b      	mov	r3, r1
 8001b46:	3b01      	subs	r3, #1
 8001b48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b4a:	b28b      	uxth	r3, r1
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	00c3      	lsls	r3, r0, #3
 8001b5e:	6838      	ldr	r0, [r7, #0]
 8001b60:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b64:	6838      	ldr	r0, [r7, #0]
 8001b66:	00c2      	lsls	r2, r0, #3
 8001b68:	b28b      	uxth	r3, r1
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	469a      	mov	sl, r3
 8001b6e:	4693      	mov	fp, r2
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b84:	460b      	mov	r3, r1
 8001b86:	3307      	adds	r3, #7
 8001b88:	08db      	lsrs	r3, r3, #3
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	ebad 0d03 	sub.w	sp, sp, r3
 8001b90:	ab02      	add	r3, sp, #8
 8001b92:	3300      	adds	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t rx_buffer[num_bytes];
 8001b96:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001b98:	460b      	mov	r3, r1
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	623b      	str	r3, [r7, #32]
 8001b9e:	b28b      	uxth	r3, r1
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4698      	mov	r8, r3
 8001ba4:	4691      	mov	r9, r2
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bba:	b28b      	uxth	r3, r1
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	461c      	mov	r4, r3
 8001bc0:	4615      	mov	r5, r2
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	00eb      	lsls	r3, r5, #3
 8001bcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bd0:	00e2      	lsls	r2, r4, #3
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	3307      	adds	r3, #7
 8001bd6:	08db      	lsrs	r3, r3, #3
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	ebad 0d03 	sub.w	sp, sp, r3
 8001bde:	ab02      	add	r3, sp, #8
 8001be0:	3300      	adds	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < num_bytes; i++)
 8001be4:	2300      	movs	r3, #0
 8001be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001be8:	e00c      	b.n	8001c04 <_ZN6BMI08819read_accel_registerEhPht+0xe8>
		tx_buffer[i] = 0;
 8001bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bee:	4413      	add	r3, r2
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = 0;
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bf8:	4413      	add	r3, r2
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_bytes; i++)
 8001bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c00:	3301      	adds	r3, #1
 8001c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c04:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001c06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	dbee      	blt.n	8001bea <_ZN6BMI08819read_accel_registerEhPht+0xce>
	tx_buffer[0] = 0x80 | reg_addr;	// Read operation
 8001c0c:	7cfb      	ldrb	r3, [r7, #19]
 8001c0e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c16:	701a      	strb	r2, [r3, #0]
		np::lock_guard lock(spi_mutex);
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	f107 0318 	add.w	r3, r7, #24
 8001c20:	4611      	mov	r1, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff f9f2 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_RESET);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	6898      	ldr	r0, [r3, #8]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	8a1b      	ldrh	r3, [r3, #16]
 8001c30:	2200      	movs	r2, #0
 8001c32:	4619      	mov	r1, r3
 8001c34:	f004 f9bc 	bl	8005fb0 <HAL_GPIO_WritePin>
		status = (HAL_SPI_TransmitReceive(&spi_handle, tx_buffer, rx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001c3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c42:	9200      	str	r2, [sp, #0]
 8001c44:	69fa      	ldr	r2, [r7, #28]
 8001c46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c48:	f007 ff85 	bl	8009b56 <HAL_SPI_TransmitReceive>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	bf0c      	ite	eq
 8001c52:	2301      	moveq	r3, #1
 8001c54:	2300      	movne	r3, #0
 8001c56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_SET);
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	6898      	ldr	r0, [r3, #8]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	8a1b      	ldrh	r3, [r3, #16]
 8001c62:	2201      	movs	r2, #1
 8001c64:	4619      	mov	r1, r3
 8001c66:	f004 f9a3 	bl	8005fb0 <HAL_GPIO_WritePin>
	}
 8001c6a:	f107 0318 	add.w	r3, r7, #24
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f9e1 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	if (status)
 8001c74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d013      	beq.n	8001ca4 <_ZN6BMI08819read_accel_registerEhPht+0x188>
		for (int i = 2; i < num_bytes; i++)
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c80:	e00b      	b.n	8001c9a <_ZN6BMI08819read_accel_registerEhPht+0x17e>
			rx_data[i - 2] = rx_buffer[i];
 8001c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c84:	3b02      	subs	r3, #2
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4413      	add	r3, r2
 8001c8a:	69f9      	ldr	r1, [r7, #28]
 8001c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c8e:	440a      	add	r2, r1
 8001c90:	7812      	ldrb	r2, [r2, #0]
 8001c92:	701a      	strb	r2, [r3, #0]
		for (int i = 2; i < num_bytes; i++)
 8001c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c96:	3301      	adds	r3, #1
 8001c98:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c9a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001c9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dbef      	blt.n	8001c82 <_ZN6BMI08819read_accel_registerEhPht+0x166>
 8001ca2:	e003      	b.n	8001cac <_ZN6BMI08819read_accel_registerEhPht+0x190>
		USB_Log("BMI088 accelerometer register read failed.\n", ERR);
 8001ca4:	2102      	movs	r1, #2
 8001ca6:	4805      	ldr	r0, [pc, #20]	@ (8001cbc <_ZN6BMI08819read_accel_registerEhPht+0x1a0>)
 8001ca8:	f001 fd0c 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	return status;
 8001cac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001cb0:	46b5      	mov	sp, r6
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	373c      	adds	r7, #60	@ 0x3c
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cbc:	08021ebc 	.word	0x08021ebc

08001cc0 <_ZN6BMI08818read_gyro_registerEhPht>:

bool BMI088::read_gyro_register(uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 8001cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cc4:	b091      	sub	sp, #68	@ 0x44
 8001cc6:	af02      	add	r7, sp, #8
 8001cc8:	6178      	str	r0, [r7, #20]
 8001cca:	60fa      	str	r2, [r7, #12]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	460b      	mov	r3, r1
 8001cd0:	74fb      	strb	r3, [r7, #19]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	823b      	strh	r3, [r7, #16]
	{
		USB_Log("BMI088 gyroscope register read failed.\n", ERR);
	}

	return status;
}
 8001cd6:	466b      	mov	r3, sp
 8001cd8:	461e      	mov	r6, r3
	bool status = false;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint16_t num_bytes = data_len + 1;
 8001ce0:	8a3b      	ldrh	r3, [r7, #16]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	uint8_t tx_buffer[num_bytes];
 8001ce6:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001ce8:	460b      	mov	r3, r1
 8001cea:	3b01      	subs	r3, #1
 8001cec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cee:	b28b      	uxth	r3, r1
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	00c3      	lsls	r3, r0, #3
 8001d02:	6838      	ldr	r0, [r7, #0]
 8001d04:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d08:	6838      	ldr	r0, [r7, #0]
 8001d0a:	00c2      	lsls	r2, r0, #3
 8001d0c:	b28b      	uxth	r3, r1
 8001d0e:	2200      	movs	r2, #0
 8001d10:	469a      	mov	sl, r3
 8001d12:	4693      	mov	fp, r2
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d28:	460b      	mov	r3, r1
 8001d2a:	3307      	adds	r3, #7
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	ebad 0d03 	sub.w	sp, sp, r3
 8001d34:	ab02      	add	r3, sp, #8
 8001d36:	3300      	adds	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t rx_buffer[num_bytes];
 8001d3a:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	623b      	str	r3, [r7, #32]
 8001d42:	b28b      	uxth	r3, r1
 8001d44:	2200      	movs	r2, #0
 8001d46:	4698      	mov	r8, r3
 8001d48:	4691      	mov	r9, r2
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d5e:	b28b      	uxth	r3, r1
 8001d60:	2200      	movs	r2, #0
 8001d62:	461c      	mov	r4, r3
 8001d64:	4615      	mov	r5, r2
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	00eb      	lsls	r3, r5, #3
 8001d70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d74:	00e2      	lsls	r2, r4, #3
 8001d76:	460b      	mov	r3, r1
 8001d78:	3307      	adds	r3, #7
 8001d7a:	08db      	lsrs	r3, r3, #3
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	ebad 0d03 	sub.w	sp, sp, r3
 8001d82:	ab02      	add	r3, sp, #8
 8001d84:	3300      	adds	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < num_bytes; i++)
 8001d88:	2300      	movs	r3, #0
 8001d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d8c:	e00c      	b.n	8001da8 <_ZN6BMI08818read_gyro_registerEhPht+0xe8>
		tx_buffer[i] = 0;
 8001d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d92:	4413      	add	r3, r2
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = 0;
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d9c:	4413      	add	r3, r2
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_bytes; i++)
 8001da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001da4:	3301      	adds	r3, #1
 8001da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001da8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001daa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001dac:	429a      	cmp	r2, r3
 8001dae:	dbee      	blt.n	8001d8e <_ZN6BMI08818read_gyro_registerEhPht+0xce>
	tx_buffer[0] = 0x80 | reg_addr;	// Read operation
 8001db0:	7cfb      	ldrb	r3, [r7, #19]
 8001db2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dba:	701a      	strb	r2, [r3, #0]
		np::lock_guard lock(spi_mutex);
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	f107 0318 	add.w	r3, r7, #24
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff f920 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		HAL_GPIO_WritePin(gyro_cs_port, gyro_cs_pin, GPIO_PIN_RESET);
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	68d8      	ldr	r0, [r3, #12]
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	8a5b      	ldrh	r3, [r3, #18]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f004 f8ea 	bl	8005fb0 <HAL_GPIO_WritePin>
		status = (HAL_SPI_TransmitReceive(&spi_handle, tx_buffer, rx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001de2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001de6:	9200      	str	r2, [sp, #0]
 8001de8:	69fa      	ldr	r2, [r7, #28]
 8001dea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dec:	f007 feb3 	bl	8009b56 <HAL_SPI_TransmitReceive>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	bf0c      	ite	eq
 8001df6:	2301      	moveq	r3, #1
 8001df8:	2300      	movne	r3, #0
 8001dfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		HAL_GPIO_WritePin(gyro_cs_port, gyro_cs_pin, GPIO_PIN_SET);
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	68d8      	ldr	r0, [r3, #12]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	8a5b      	ldrh	r3, [r3, #18]
 8001e06:	2201      	movs	r2, #1
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f004 f8d1 	bl	8005fb0 <HAL_GPIO_WritePin>
	}
 8001e0e:	f107 0318 	add.w	r3, r7, #24
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff f90f 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	if (status)
 8001e18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d013      	beq.n	8001e48 <_ZN6BMI08818read_gyro_registerEhPht+0x188>
		for (int i = 1; i < num_bytes; i++)
 8001e20:	2301      	movs	r3, #1
 8001e22:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e24:	e00b      	b.n	8001e3e <_ZN6BMI08818read_gyro_registerEhPht+0x17e>
			rx_data[i - 1] = rx_buffer[i];
 8001e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	69f9      	ldr	r1, [r7, #28]
 8001e30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e32:	440a      	add	r2, r1
 8001e34:	7812      	ldrb	r2, [r2, #0]
 8001e36:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < num_bytes; i++)
 8001e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e3e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e42:	429a      	cmp	r2, r3
 8001e44:	dbef      	blt.n	8001e26 <_ZN6BMI08818read_gyro_registerEhPht+0x166>
 8001e46:	e003      	b.n	8001e50 <_ZN6BMI08818read_gyro_registerEhPht+0x190>
		USB_Log("BMI088 gyroscope register read failed.\n", ERR);
 8001e48:	2102      	movs	r1, #2
 8001e4a:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <_ZN6BMI08818read_gyro_registerEhPht+0x1a0>)
 8001e4c:	f001 fc3a 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	return status;
 8001e50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e54:	46b5      	mov	sp, r6
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	373c      	adds	r7, #60	@ 0x3c
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e60:	08021ee8 	.word	0x08021ee8

08001e64 <_ZN6BMI08820write_accel_registerEhPht>:

bool BMI088::write_accel_register(uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8001e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e68:	b08b      	sub	sp, #44	@ 0x2c
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	461a      	mov	r2, r3
 8001e72:	460b      	mov	r3, r1
 8001e74:	72fb      	strb	r3, [r7, #11]
 8001e76:	4613      	mov	r3, r2
 8001e78:	813b      	strh	r3, [r7, #8]
	{
		USB_Log("BMI088 accelerometer register write failed.\n", ERR);
	}

	return status;
}
 8001e7a:	466b      	mov	r3, sp
 8001e7c:	461e      	mov	r6, r3
	bool status = false;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint16_t num_bytes = data_len + 1;
 8001e84:	893b      	ldrh	r3, [r7, #8]
 8001e86:	3301      	adds	r3, #1
 8001e88:	843b      	strh	r3, [r7, #32]
	uint8_t tx_buffer[num_bytes];
 8001e8a:	8c39      	ldrh	r1, [r7, #32]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	b28b      	uxth	r3, r1
 8001e94:	2200      	movs	r2, #0
 8001e96:	4698      	mov	r8, r3
 8001e98:	4691      	mov	r9, r2
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eae:	b28b      	uxth	r3, r1
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	461c      	mov	r4, r3
 8001eb4:	4615      	mov	r5, r2
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	00eb      	lsls	r3, r5, #3
 8001ec0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ec4:	00e2      	lsls	r2, r4, #3
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	3307      	adds	r3, #7
 8001eca:	08db      	lsrs	r3, r3, #3
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	ebad 0d03 	sub.w	sp, sp, r3
 8001ed2:	466b      	mov	r3, sp
 8001ed4:	3300      	adds	r3, #0
 8001ed6:	61bb      	str	r3, [r7, #24]
	tx_buffer[0] = reg_addr;	// Write operation
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	7afa      	ldrb	r2, [r7, #11]
 8001edc:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8001ede:	2301      	movs	r3, #1
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee2:	e00c      	b.n	8001efe <_ZN6BMI08820write_accel_registerEhPht+0x9a>
		tx_buffer[i] = tx_data[i - 1];
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	7819      	ldrb	r1, [r3, #0]
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef2:	4413      	add	r3, r2
 8001ef4:	460a      	mov	r2, r1
 8001ef6:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efa:	3301      	adds	r3, #1
 8001efc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001efe:	8c3b      	ldrh	r3, [r7, #32]
 8001f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f02:	429a      	cmp	r2, r3
 8001f04:	dbee      	blt.n	8001ee4 <_ZN6BMI08820write_accel_registerEhPht+0x80>
		np::lock_guard lock(spi_mutex);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff f87b 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_RESET);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6898      	ldr	r0, [r3, #8]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8a1b      	ldrh	r3, [r3, #16]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	4619      	mov	r1, r3
 8001f22:	f004 f845 	bl	8005fb0 <HAL_GPIO_WritePin>
		status = (HAL_SPI_Transmit(&spi_handle, tx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	8c3a      	ldrh	r2, [r7, #32]
 8001f2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f30:	69b9      	ldr	r1, [r7, #24]
 8001f32:	f007 fc9a 	bl	800986a <HAL_SPI_Transmit>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_SET);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6898      	ldr	r0, [r3, #8]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8a1b      	ldrh	r3, [r3, #16]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f004 f82e 	bl	8005fb0 <HAL_GPIO_WritePin>
	}
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff f86c 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	if (!status)
 8001f5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f62:	f083 0301 	eor.w	r3, r3, #1
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <_ZN6BMI08820write_accel_registerEhPht+0x110>
		USB_Log("BMI088 accelerometer register write failed.\n", ERR);
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	4805      	ldr	r0, [pc, #20]	@ (8001f84 <_ZN6BMI08820write_accel_registerEhPht+0x120>)
 8001f70:	f001 fba8 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	return status;
 8001f74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f78:	46b5      	mov	sp, r6
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	372c      	adds	r7, #44	@ 0x2c
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f84:	08021f10 	.word	0x08021f10

08001f88 <_ZN6BMI08819write_gyro_registerEhPht>:

bool BMI088::write_gyro_register(uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8001f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f8c:	b08b      	sub	sp, #44	@ 0x2c
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	461a      	mov	r2, r3
 8001f96:	460b      	mov	r3, r1
 8001f98:	72fb      	strb	r3, [r7, #11]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	813b      	strh	r3, [r7, #8]
	{
		USB_Log("BMI088 gyroscope register write failed.\n", ERR);
	}

	return status;
}
 8001f9e:	466b      	mov	r3, sp
 8001fa0:	461e      	mov	r6, r3
	bool status = false;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint16_t num_bytes = data_len + 1;
 8001fa8:	893b      	ldrh	r3, [r7, #8]
 8001faa:	3301      	adds	r3, #1
 8001fac:	843b      	strh	r3, [r7, #32]
	uint8_t tx_buffer[num_bytes];
 8001fae:	8c39      	ldrh	r1, [r7, #32]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	b28b      	uxth	r3, r1
 8001fb8:	2200      	movs	r2, #0
 8001fba:	4698      	mov	r8, r3
 8001fbc:	4691      	mov	r9, r2
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fd2:	b28b      	uxth	r3, r1
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	461c      	mov	r4, r3
 8001fd8:	4615      	mov	r5, r2
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	00eb      	lsls	r3, r5, #3
 8001fe4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fe8:	00e2      	lsls	r2, r4, #3
 8001fea:	460b      	mov	r3, r1
 8001fec:	3307      	adds	r3, #7
 8001fee:	08db      	lsrs	r3, r3, #3
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	ebad 0d03 	sub.w	sp, sp, r3
 8001ff6:	466b      	mov	r3, sp
 8001ff8:	3300      	adds	r3, #0
 8001ffa:	61bb      	str	r3, [r7, #24]
	tx_buffer[0] = reg_addr;	// Write operation
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	7afa      	ldrb	r2, [r7, #11]
 8002000:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8002002:	2301      	movs	r3, #1
 8002004:	627b      	str	r3, [r7, #36]	@ 0x24
 8002006:	e00c      	b.n	8002022 <_ZN6BMI08819write_gyro_registerEhPht+0x9a>
		tx_buffer[i] = tx_data[i - 1];
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	3b01      	subs	r3, #1
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	7819      	ldrb	r1, [r3, #0]
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002016:	4413      	add	r3, r2
 8002018:	460a      	mov	r2, r1
 800201a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	3301      	adds	r3, #1
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
 8002022:	8c3b      	ldrh	r3, [r7, #32]
 8002024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002026:	429a      	cmp	r2, r3
 8002028:	dbee      	blt.n	8002008 <_ZN6BMI08819write_gyro_registerEhPht+0x80>
		np::lock_guard lock(spi_mutex);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe ffe9 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		HAL_GPIO_WritePin(gyro_cs_port, gyro_cs_pin, GPIO_PIN_RESET);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	68d8      	ldr	r0, [r3, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8a5b      	ldrh	r3, [r3, #18]
 8002042:	2200      	movs	r2, #0
 8002044:	4619      	mov	r1, r3
 8002046:	f003 ffb3 	bl	8005fb0 <HAL_GPIO_WritePin>
		status = (HAL_SPI_Transmit(&spi_handle, tx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	8c3a      	ldrh	r2, [r7, #32]
 8002050:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002054:	69b9      	ldr	r1, [r7, #24]
 8002056:	f007 fc08 	bl	800986a <HAL_SPI_Transmit>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	bf0c      	ite	eq
 8002060:	2301      	moveq	r3, #1
 8002062:	2300      	movne	r3, #0
 8002064:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		HAL_GPIO_WritePin(gyro_cs_port, gyro_cs_pin, GPIO_PIN_SET);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	68d8      	ldr	r0, [r3, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8a5b      	ldrh	r3, [r3, #18]
 8002070:	2201      	movs	r2, #1
 8002072:	4619      	mov	r1, r3
 8002074:	f003 ff9c 	bl	8005fb0 <HAL_GPIO_WritePin>
	}
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe ffda 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	if (!status)
 8002082:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002086:	f083 0301 	eor.w	r3, r3, #1
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <_ZN6BMI08819write_gyro_registerEhPht+0x110>
		USB_Log("BMI088 gyroscope register write failed.\n", ERR);
 8002090:	2102      	movs	r1, #2
 8002092:	4805      	ldr	r0, [pc, #20]	@ (80020a8 <_ZN6BMI08819write_gyro_registerEhPht+0x120>)
 8002094:	f001 fb16 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	return status;
 8002098:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800209c:	46b5      	mov	sp, r6
}
 800209e:	4618      	mov	r0, r3
 80020a0:	372c      	adds	r7, #44	@ 0x2c
 80020a2:	46bd      	mov	sp, r7
 80020a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020a8:	08021f40 	.word	0x08021f40

080020ac <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f895 	bl	80021e6 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 80020bc:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00c      	beq.n	80020e0 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f89a 	bl	8002200 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EE11get_deleterEv>
 80020cc:	4604      	mov	r4, r0
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f8a3 	bl	800221a <_ZSt4moveIRP9IIRFilterEONSt16remove_referenceIT_E4typeEOS4_>
 80020d4:	4603      	mov	r3, r0
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4619      	mov	r1, r3
 80020da:	4620      	mov	r0, r4
 80020dc:	f000 f8a8 	bl	8002230 <_ZNKSt14default_deleteI9IIRFilterEclEPS0_>
	__ptr = pointer();
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
      }
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd90      	pop	{r4, r7, pc}

080020f0 <_ZNKSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE4sizeEv>:
      { return const_reverse_iterator(begin()); }

      // Capacity.
      [[__gnu__::__const__, __nodiscard__]]
      constexpr size_type
      size() const noexcept { return _Nm; }
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	2303      	movs	r3, #3
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>:
      empty() const noexcept { return size() == 0; }

      // Element access.
      [[__nodiscard__]]
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6839      	ldr	r1, [r7, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f000 f89b 	bl	8002250 <_ZNSt14__array_traitsISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE6_S_refERA3_KS4_j>
 800211a:	4603      	mov	r3, r0
      }
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <_ZSt11make_uniqueI9IIRFilterJRfS1_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 8002124:	b590      	push	{r4, r7, lr}
 8002126:	ed2d 8b02 	vpush	{d8}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8002134:	2034      	movs	r0, #52	@ 0x34
 8002136:	f01a fccd 	bl	801cad4 <_Znwj>
 800213a:	4603      	mov	r3, r0
 800213c:	461c      	mov	r4, r3
 800213e:	68b8      	ldr	r0, [r7, #8]
 8002140:	f000 f895 	bl	800226e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8002144:	4603      	mov	r3, r0
 8002146:	ed93 8a00 	vldr	s16, [r3]
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f88f 	bl	800226e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8002150:	4603      	mov	r3, r0
 8002152:	edd3 7a00 	vldr	s15, [r3]
 8002156:	eef0 0a67 	vmov.f32	s1, s15
 800215a:	eeb0 0a48 	vmov.f32	s0, s16
 800215e:	4620      	mov	r0, r4
 8002160:	f001 ffa6 	bl	80040b0 <_ZN9IIRFilterC1Eff>
 8002164:	4621      	mov	r1, r4
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 f89c 	bl	80022a4 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	ecbd 8b02 	vpop	{d8}
 8002176:	bd90      	pop	{r4, r7, pc}

08002178 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8002182:	6838      	ldr	r0, [r7, #0]
 8002184:	f000 f8bd 	bl	8002302 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE7releaseEv>
 8002188:	4603      	mov	r3, r0
 800218a:	4619      	mov	r1, r3
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f898 	bl	80022c2 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 8002192:	6838      	ldr	r0, [r7, #0]
 8002194:	f000 f8ca 	bl	800232c <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE10_M_deleterEv>
 8002198:	4603      	mov	r3, r0
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f8d3 	bl	8002346 <_ZSt7forwardISt14default_deleteI9IIRFilterEEOT_RNSt16remove_referenceIS3_E4typeE>
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f8c3 	bl	800232c <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 80021a6:	687b      	ldr	r3, [r7, #4]
      }
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	return get();
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f8cf 	bl	800235c <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EE3getEv>
 80021be:	4603      	mov	r3, r0
      }
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <_ZNSt5arrayIfLj3EEixEj>:
      operator[](size_type __n) noexcept
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6839      	ldr	r1, [r7, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f8cd 	bl	8002376 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 80021dc:	4603      	mov	r3, r0
      }
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 f8cf 	bl	8002394 <_ZSt3getILj0EJP9IIRFilterSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f88e 	bl	800232c <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE10_M_deleterEv>
 8002210:	4603      	mov	r3, r0
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <_ZSt4moveIRP9IIRFilterEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <_ZNKSt14default_deleteI9IIRFilterEclEPS0_>:
      operator()(_Tp* __ptr) const
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <_ZNKSt14default_deleteI9IIRFilterEclEPS0_+0x18>
 8002240:	2134      	movs	r1, #52	@ 0x34
 8002242:	4618      	mov	r0, r3
 8002244:	f01a fc44 	bl	801cad0 <_ZdlPvj>
      }
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <_ZNSt14__array_traitsISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE6_S_refERA3_KS4_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <_ZNSt15__uniq_ptr_dataI9IIRFilterSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f000 f88a 	bl	80023ae <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EEC1EPS0_>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6839      	ldr	r1, [r7, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ffe6 	bl	8002284 <_ZNSt15__uniq_ptr_dataI9IIRFilterSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 80022c2:	b590      	push	{r4, r7, lr}
 80022c4:	b085      	sub	sp, #20
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff8a 	bl	80021e6 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 80022d2:	4603      	mov	r3, r0
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 80022d8:	683c      	ldr	r4, [r7, #0]
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ff83 	bl	80021e6 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 80022e0:	4603      	mov	r3, r0
 80022e2:	601c      	str	r4, [r3, #0]
	if (__old_p)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d007      	beq.n	80022fa <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f81e 	bl	800232c <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE10_M_deleterEv>
 80022f0:	4603      	mov	r3, r0
 80022f2:	68f9      	ldr	r1, [r7, #12]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff9b 	bl	8002230 <_ZNKSt14default_deleteI9IIRFilterEclEPS0_>
      }
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd90      	pop	{r4, r7, pc}

08002302 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ff6b 	bl	80021e6 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 8002310:	4603      	mov	r3, r0
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff ff65 	bl	80021e6 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 800231c:	4603      	mov	r3, r0
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
	return __p;
 8002322:	68fb      	ldr	r3, [r7, #12]
      }
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f84d 	bl	80023d6 <_ZSt3getILj1EJP9IIRFilterSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800233c:	4603      	mov	r3, r0
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <_ZSt7forwardISt14default_deleteI9IIRFilterEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f841 	bl	80023ee <_ZNKSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 800236c:	4603      	mov	r3, r0
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <_ZSt3getILj0EJP9IIRFilterSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f833 	bl	800240a <_ZSt12__get_helperILj0EP9IIRFilterJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80023ae:	b590      	push	{r4, r7, lr}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe fde4 	bl	8000f88 <_ZNSt5tupleIJP9IIRFilterSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80023c0:	683c      	ldr	r4, [r7, #0]
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ff0f 	bl	80021e6 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 80023c8:	4603      	mov	r3, r0
 80023ca:	601c      	str	r4, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd90      	pop	{r4, r7, pc}

080023d6 <_ZSt3getILj1EJP9IIRFilterSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f81f 	bl	8002422 <_ZSt12__get_helperILj1ESt14default_deleteI9IIRFilterEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80023e4:	4603      	mov	r3, r0
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <_ZNKSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 f81e 	bl	800243a <_ZSt3getILj0EJP9IIRFilterSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80023fe:	4603      	mov	r3, r0
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <_ZSt12__get_helperILj0EP9IIRFilterJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f81e 	bl	8002454 <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEE7_M_headERS4_>
 8002418:	4603      	mov	r3, r0
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <_ZSt12__get_helperILj1ESt14default_deleteI9IIRFilterEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f81f 	bl	800246e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9IIRFilterEEE7_M_headERS3_>
 8002430:	4603      	mov	r3, r0
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <_ZSt3getILj0EJP9IIRFilterSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4618      	mov	r0, r3
 8002446:	f000 f81e 	bl	8002486 <_ZSt12__get_helperILj0EP9IIRFilterJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800244a:	4603      	mov	r3, r0
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f81d 	bl	800249e <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EE7_M_headERS2_>
 8002464:	4603      	mov	r3, r0
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9IIRFilterEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f81c 	bl	80024b4 <_ZNSt10_Head_baseILj1ESt14default_deleteI9IIRFilterELb1EE7_M_headERS3_>
 800247c:	4603      	mov	r3, r0
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <_ZSt12__get_helperILj0EP9IIRFilterJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f81b 	bl	80024ca <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEE7_M_headERKS4_>
 8002494:	4603      	mov	r3, r0
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <_ZNSt10_Head_baseILj1ESt14default_deleteI9IIRFilterELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 f805 	bl	80024e4 <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EE7_M_headERKS2_>
 80024da:	4603      	mov	r3, r0
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <_ZN6BMP388C1ER19__I2C_HandleTypeDefRPvS3_>:
#include "Drivers/usb.hpp"
#include "Utility/lock_guard.hpp"
#include <cmath>
#include <cstdio>

BMP388::BMP388(I2C_HandleTypeDef& i2c_handle, osMutexId_t& i2c_mutex, osMutexId_t& baro_data_mutex)
 80024fa:	b480      	push	{r7}
 80024fc:	b085      	sub	sp, #20
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	603b      	str	r3, [r7, #0]
	:i2c_handle(i2c_handle),
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	601a      	str	r2, [r3, #0]
	 i2c_mutex(i2c_mutex),
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	605a      	str	r2, [r3, #4]
	 baro_data_mutex(baro_data_mutex) {}
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2276      	movs	r2, #118	@ 0x76
 8002518:	721a      	strb	r2, [r3, #8]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <_ZN6BMP3884initEv>:

bool BMP388::init()
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	bool status = false;
 8002538:	2300      	movs	r3, #0
 800253a:	75fb      	strb	r3, [r7, #23]
	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];

	// Check chip ID
	rx_data[0] = 0x00;
 800253c:	2300      	movs	r3, #0
 800253e:	733b      	strb	r3, [r7, #12]
	status = read_register(REG_CHIP_ID, rx_data, 1);
 8002540:	f107 020c 	add.w	r2, r7, #12
 8002544:	2301      	movs	r3, #1
 8002546:	2100      	movs	r1, #0
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 fd35 	bl	8002fb8 <_ZN6BMP38813read_registerEhPht>
 800254e:	4603      	mov	r3, r0
 8002550:	75fb      	strb	r3, [r7, #23]
	if (status && rx_data[0] == 0x50)
 8002552:	7dfb      	ldrb	r3, [r7, #23]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d01b      	beq.n	8002590 <_ZN6BMP3884initEv+0x60>
 8002558:	7b3b      	ldrb	r3, [r7, #12]
 800255a:	2b50      	cmp	r3, #80	@ 0x50
 800255c:	d118      	bne.n	8002590 <_ZN6BMP3884initEv+0x60>
	{
		USB_Log("Found BMP388, starting initialization.", CRITICAL);
 800255e:	2101      	movs	r1, #1
 8002560:	485b      	ldr	r0, [pc, #364]	@ (80026d0 <_ZN6BMP3884initEv+0x1a0>)
 8002562:	f001 f8af 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	else
	{
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
		return false;
	}
	osDelay(10);
 8002566:	200a      	movs	r0, #10
 8002568:	f00c fc41 	bl	800edee <osDelay>

	// Perform soft-reset of device
	tx_data[0] = 0xB6;
 800256c:	23b6      	movs	r3, #182	@ 0xb6
 800256e:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_CMD, tx_data, 1);
 8002570:	f107 0210 	add.w	r2, r7, #16
 8002574:	2301      	movs	r3, #1
 8002576:	217e      	movs	r1, #126	@ 0x7e
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 fd5f 	bl	800303c <_ZN6BMP38814write_registerEhPht>
 800257e:	4603      	mov	r3, r0
 8002580:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8002582:	7dfb      	ldrb	r3, [r7, #23]
 8002584:	f083 0301 	eor.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <_ZN6BMP3884initEv+0x6c>
 800258e:	e007      	b.n	80025a0 <_ZN6BMP3884initEv+0x70>
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
 8002590:	2102      	movs	r1, #2
 8002592:	4850      	ldr	r0, [pc, #320]	@ (80026d4 <_ZN6BMP3884initEv+0x1a4>)
 8002594:	f001 f896 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
		return false;
 8002598:	2300      	movs	r3, #0
 800259a:	e094      	b.n	80026c6 <_ZN6BMP3884initEv+0x196>
	if (!status) return status;
 800259c:	7dfb      	ldrb	r3, [r7, #23]
 800259e:	e092      	b.n	80026c6 <_ZN6BMP3884initEv+0x196>
	osDelay(10);
 80025a0:	200a      	movs	r0, #10
 80025a2:	f00c fc24 	bl	800edee <osDelay>

	// Read, calculate, and store calibration coefficients
	status = read_calibration_nvm();
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 fa66 	bl	8002a78 <_ZN6BMP38820read_calibration_nvmEv>
 80025ac:	4603      	mov	r3, r0
 80025ae:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 80025b0:	7dfb      	ldrb	r3, [r7, #23]
 80025b2:	f083 0301 	eor.w	r3, r3, #1
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <_ZN6BMP3884initEv+0x90>
 80025bc:	7dfb      	ldrb	r3, [r7, #23]
 80025be:	e082      	b.n	80026c6 <_ZN6BMP3884initEv+0x196>

	// Set pressure measurement to ultra-high resolution (x16 over-sampling, 20 bit / 0.17 Pa),
	// set temperature measurement to low power (x2 over-sampling, 17 bit / 0.0025 degC)
	tx_data[0] = 0x0C;
 80025c0:	230c      	movs	r3, #12
 80025c2:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_OSR, tx_data, 1);
 80025c4:	f107 0210 	add.w	r2, r7, #16
 80025c8:	2301      	movs	r3, #1
 80025ca:	211c      	movs	r1, #28
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 fd35 	bl	800303c <_ZN6BMP38814write_registerEhPht>
 80025d2:	4603      	mov	r3, r0
 80025d4:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 80025d6:	7dfb      	ldrb	r3, [r7, #23]
 80025d8:	f083 0301 	eor.w	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <_ZN6BMP3884initEv+0xb6>
 80025e2:	7dfb      	ldrb	r3, [r7, #23]
 80025e4:	e06f      	b.n	80026c6 <_ZN6BMP3884initEv+0x196>
	osDelay(10);
 80025e6:	200a      	movs	r0, #10
 80025e8:	f00c fc01 	bl	800edee <osDelay>

	// Set 25Hz ODR
	tx_data[0] = 0x03;
 80025ec:	2303      	movs	r3, #3
 80025ee:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_ODR, tx_data, 1);
 80025f0:	f107 0210 	add.w	r2, r7, #16
 80025f4:	2301      	movs	r3, #1
 80025f6:	211d      	movs	r1, #29
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fd1f 	bl	800303c <_ZN6BMP38814write_registerEhPht>
 80025fe:	4603      	mov	r3, r0
 8002600:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8002602:	7dfb      	ldrb	r3, [r7, #23]
 8002604:	f083 0301 	eor.w	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <_ZN6BMP3884initEv+0xe2>
 800260e:	7dfb      	ldrb	r3, [r7, #23]
 8002610:	e059      	b.n	80026c6 <_ZN6BMP3884initEv+0x196>
	osDelay(10);
 8002612:	200a      	movs	r0, #10
 8002614:	f00c fbeb 	bl	800edee <osDelay>

	// Set IIR filter coefficient to 15
	tx_data[0] = 0x04;
 8002618:	2304      	movs	r3, #4
 800261a:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_CONFIG, tx_data, 1);
 800261c:	f107 0210 	add.w	r2, r7, #16
 8002620:	2301      	movs	r3, #1
 8002622:	211f      	movs	r1, #31
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fd09 	bl	800303c <_ZN6BMP38814write_registerEhPht>
 800262a:	4603      	mov	r3, r0
 800262c:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 800262e:	7dfb      	ldrb	r3, [r7, #23]
 8002630:	f083 0301 	eor.w	r3, r3, #1
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <_ZN6BMP3884initEv+0x10e>
 800263a:	7dfb      	ldrb	r3, [r7, #23]
 800263c:	e043      	b.n	80026c6 <_ZN6BMP3884initEv+0x196>
	osDelay(10);
 800263e:	200a      	movs	r0, #10
 8002640:	f00c fbd5 	bl	800edee <osDelay>

	// Compute startup pressure for initial altitude reference
	status = compute_startup_pressure();
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fc53 	bl	8002ef0 <_ZN6BMP38824compute_startup_pressureEv>
 800264a:	4603      	mov	r3, r0
 800264c:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 800264e:	7dfb      	ldrb	r3, [r7, #23]
 8002650:	f083 0301 	eor.w	r3, r3, #1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <_ZN6BMP3884initEv+0x12e>
 800265a:	7dfb      	ldrb	r3, [r7, #23]
 800265c:	e033      	b.n	80026c6 <_ZN6BMP3884initEv+0x196>

	// Switch device into normal mode and enable pressure, temperature sensor
	tx_data[0] = 0x33;
 800265e:	2333      	movs	r3, #51	@ 0x33
 8002660:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_PWR_CTRL, tx_data, 1);
 8002662:	f107 0210 	add.w	r2, r7, #16
 8002666:	2301      	movs	r3, #1
 8002668:	211b      	movs	r1, #27
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fce6 	bl	800303c <_ZN6BMP38814write_registerEhPht>
 8002670:	4603      	mov	r3, r0
 8002672:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8002674:	7dfb      	ldrb	r3, [r7, #23]
 8002676:	f083 0301 	eor.w	r3, r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <_ZN6BMP3884initEv+0x154>
 8002680:	7dfb      	ldrb	r3, [r7, #23]
 8002682:	e020      	b.n	80026c6 <_ZN6BMP3884initEv+0x196>
	osDelay(10);
 8002684:	200a      	movs	r0, #10
 8002686:	f00c fbb2 	bl	800edee <osDelay>

	// Enable data ready interrupt (temperature and pressure) and configure INT pin (active high, push-pull)
	tx_data[0] = 0x42;
 800268a:	2342      	movs	r3, #66	@ 0x42
 800268c:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_INT_CTRL, tx_data, 1);
 800268e:	f107 0210 	add.w	r2, r7, #16
 8002692:	2301      	movs	r3, #1
 8002694:	2119      	movs	r1, #25
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fcd0 	bl	800303c <_ZN6BMP38814write_registerEhPht>
 800269c:	4603      	mov	r3, r0
 800269e:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 80026a0:	7dfb      	ldrb	r3, [r7, #23]
 80026a2:	f083 0301 	eor.w	r3, r3, #1
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <_ZN6BMP3884initEv+0x180>
 80026ac:	7dfb      	ldrb	r3, [r7, #23]
 80026ae:	e00a      	b.n	80026c6 <_ZN6BMP3884initEv+0x196>
	osDelay(10);
 80026b0:	200a      	movs	r0, #10
 80026b2:	f00c fb9c 	bl	800edee <osDelay>

	USB_Log("BMP388 initialized OK.", CRITICAL);
 80026b6:	2101      	movs	r1, #1
 80026b8:	4807      	ldr	r0, [pc, #28]	@ (80026d8 <_ZN6BMP3884initEv+0x1a8>)
 80026ba:	f001 f803 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 80026be:	2064      	movs	r0, #100	@ 0x64
 80026c0:	f00c fb95 	bl	800edee <osDelay>

	return status;
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	08021f6c 	.word	0x08021f6c
 80026d4:	08021f94 	.word	0x08021f94
 80026d8:	08021fc4 	.word	0x08021fc4

080026dc <_ZN6BMP38811service_irqEv>:

bool BMP388::service_irq()
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b092      	sub	sp, #72	@ 0x48
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	// Compute compensated temperature

	uint8_t rx_temp_data[3];
	bool status_temp = read_register(REG_DATA_3, rx_temp_data, sizeof(rx_temp_data));
 80026e4:	f107 0214 	add.w	r2, r7, #20
 80026e8:	2303      	movs	r3, #3
 80026ea:	2107      	movs	r1, #7
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 fc63 	bl	8002fb8 <_ZN6BMP38813read_registerEhPht>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (status_temp)
 80026f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d039      	beq.n	8002774 <_ZN6BMP38811service_irqEv+0x98>
	{
		uint32_t temp_raw = (rx_temp_data[2] << 16) | (rx_temp_data[1] << 8) | rx_temp_data[0];
 8002700:	7dbb      	ldrb	r3, [r7, #22]
 8002702:	041a      	lsls	r2, r3, #16
 8002704:	7d7b      	ldrb	r3, [r7, #21]
 8002706:	021b      	lsls	r3, r3, #8
 8002708:	4313      	orrs	r3, r2
 800270a:	7d3a      	ldrb	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	643b      	str	r3, [r7, #64]	@ 0x40

		float temp_partial_data1 = (float)temp_raw - calib_data.par_t1;
 8002710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002712:	ee07 3a90 	vmov	s15, r3
 8002716:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002724:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		float temp_partial_data2 = temp_partial_data1 * calib_data.par_t2;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	edd3 7a04 	vldr	s15, [r3, #16]
 800272e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002736:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		np::lock_guard lock(baro_data_mutex);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800273e:	f107 030c 	add.w	r3, r7, #12
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fc61 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		temperature = temp_partial_data2 + (temp_partial_data1 * temp_partial_data1) * calib_data.par_t3;
 800274a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800274e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	edd3 7a05 	vldr	s15, [r3, #20]
 8002758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800275c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
	}
 800276a:	f107 030c 	add.w	r3, r7, #12
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fc61 	bl	8001036 <_ZN2np10lock_guardD1Ev>

	// Compute compensated pressure

	uint8_t rx_press_data[3];
	bool status_pressure = read_register(REG_DATA_0, rx_press_data, sizeof(rx_press_data));
 8002774:	f107 0210 	add.w	r2, r7, #16
 8002778:	2303      	movs	r3, #3
 800277a:	2104      	movs	r1, #4
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 fc1b 	bl	8002fb8 <_ZN6BMP38813read_registerEhPht>
 8002782:	4603      	mov	r3, r0
 8002784:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	
	if (status_temp && status_pressure)
 8002788:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 8119 	beq.w	80029c4 <_ZN6BMP38811service_irqEv+0x2e8>
 8002792:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8114 	beq.w	80029c4 <_ZN6BMP38811service_irqEv+0x2e8>
	{
		uint32_t press_raw = (rx_press_data[2] << 16) | (rx_press_data[1] << 8) | rx_press_data[0];
 800279c:	7cbb      	ldrb	r3, [r7, #18]
 800279e:	041a      	lsls	r2, r3, #16
 80027a0:	7c7b      	ldrb	r3, [r7, #17]
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	4313      	orrs	r3, r2
 80027a6:	7c3a      	ldrb	r2, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	633b      	str	r3, [r7, #48]	@ 0x30

		np::lock_guard lock(baro_data_mutex);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027b0:	f107 0308 	add.w	r3, r7, #8
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fc28 	bl	800100c <_ZN2np10lock_guardC1ERPv>

		float press_partial_data1 = calib_data.par_p6 * temperature;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80027c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027cc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		float press_partial_data2 = calib_data.par_p7 * (temperature * temperature);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80027e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ea:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		float press_partial_data3 = calib_data.par_p8 * (temperature * temperature * temperature);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002800:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800280a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800280e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002812:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		float press_partial_out1 = calib_data.par_p5 + press_partial_data1 + press_partial_data2 + press_partial_data3;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800281c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002820:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002824:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800282c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002834:	edc7 7a08 	vstr	s15, [r7, #32]

		press_partial_data1 = calib_data.par_p2 * temperature;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	ed93 7a07 	vldr	s14, [r3, #28]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002848:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		press_partial_data2 = calib_data.par_p3 * (temperature * temperature);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800285e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002866:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		press_partial_data3 = calib_data.par_p4 * (temperature * temperature * temperature);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800287c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800288a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		float press_partial_out2 = (float)press_raw * (calib_data.par_p1 + press_partial_data1 + press_partial_data2 + press_partial_data3);
 8002892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002894:	ee07 3a90 	vmov	s15, r3
 8002898:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	edd3 6a06 	vldr	s13, [r3, #24]
 80028a2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80028a6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028aa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80028ae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028b2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80028b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028be:	edc7 7a07 	vstr	s15, [r7, #28]

		press_partial_data1 = (float)press_raw * (float)press_raw;
 80028c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c4:	ee07 3a90 	vmov	s15, r3
 80028c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ce:	ee07 3a90 	vmov	s15, r3
 80028d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028da:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		press_partial_data2 = calib_data.par_p9 + calib_data.par_p10 * temperature;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80028f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		press_partial_data3 = press_partial_data1 *	press_partial_data2;
 80028fc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002900:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002908:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		float press_partial_out3 = press_partial_data3 + ((float)press_raw * (float)press_raw * (float)press_raw) * calib_data.par_p11;
 800290c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290e:	ee07 3a90 	vmov	s15, r3
 8002912:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002918:	ee07 3a90 	vmov	s15, r3
 800291c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002920:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002926:	ee07 3a90 	vmov	s15, r3
 800292a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800292e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800293c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002944:	edc7 7a06 	vstr	s15, [r7, #24]

		pressure = press_partial_out1 + press_partial_out2 + press_partial_out3;
 8002948:	ed97 7a08 	vldr	s14, [r7, #32]
 800294c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002950:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002954:	edd7 7a06 	vldr	s15, [r7, #24]
 8002958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

		// Compute altitude

		if (pressure && startup_pressure)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002968:	eef5 7a40 	vcmp.f32	s15, #0.0
 800296c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002970:	d022      	beq.n	80029b8 <_ZN6BMP38811service_irqEv+0x2dc>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002978:	eef5 7a40 	vcmp.f32	s15, #0.0
 800297c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002980:	d01a      	beq.n	80029b8 <_ZN6BMP38811service_irqEv+0x2dc>
		{
			altitude = 44330 * (1 - powf(pressure / startup_pressure, 1.0 / 5.25579));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800298e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002992:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80029ec <_ZN6BMP38811service_irqEv+0x310>
 8002996:	eeb0 0a66 	vmov.f32	s0, s13
 800299a:	f01a f93f 	bl	801cc1c <powf>
 800299e:	eef0 7a40 	vmov.f32	s15, s0
 80029a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80029a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029aa:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80029f0 <_ZN6BMP38811service_irqEv+0x314>
 80029ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
		}

		// Data ready INT cleared automatically 2.5 ms after the interrupt assertion
	}
 80029b8:	f107 0308 	add.w	r3, r7, #8
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe fb3a 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 80029c2:	e003      	b.n	80029cc <_ZN6BMP38811service_irqEv+0x2f0>
	else
	{
		USB_Log("ERROR reading BMP388 data.", ERR);
 80029c4:	2102      	movs	r1, #2
 80029c6:	480b      	ldr	r0, [pc, #44]	@ (80029f4 <_ZN6BMP38811service_irqEv+0x318>)
 80029c8:	f000 fe7c 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	}

	return status_temp && status_pressure;
 80029cc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <_ZN6BMP38811service_irqEv+0x304>
 80029d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <_ZN6BMP38811service_irqEv+0x304>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <_ZN6BMP38811service_irqEv+0x306>
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3748      	adds	r7, #72	@ 0x48
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	3e42d52f 	.word	0x3e42d52f
 80029f0:	472d2a00 	.word	0x472d2a00
 80029f4:	08021fdc 	.word	0x08021fdc

080029f8 <_ZN6BMP38815log_data_to_gcsEv>:

void BMP388::log_data_to_gcs()
{
 80029f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029fc:	b0aa      	sub	sp, #168	@ 0xa8
 80029fe:	af06      	add	r7, sp, #24
 8002a00:	6078      	str	r0, [r7, #4]
	char string[128];
	{
		np::lock_guard lock(baro_data_mutex);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a06:	f107 030c 	add.w	r3, r7, #12
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe fafd 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		snprintf(string, 128, "BMP388 %.2f %.2f %.2f", pressure, altitude, temperature);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fd fdbe 	bl	8000598 <__aeabi_f2d>
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	460d      	mov	r5, r1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fd fdb7 	bl	8000598 <__aeabi_f2d>
 8002a2a:	4680      	mov	r8, r0
 8002a2c:	4689      	mov	r9, r1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fd fdb0 	bl	8000598 <__aeabi_f2d>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	f107 0010 	add.w	r0, r7, #16
 8002a40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002a44:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002a48:	e9cd 4500 	strd	r4, r5, [sp]
 8002a4c:	4a09      	ldr	r2, [pc, #36]	@ (8002a74 <_ZN6BMP38815log_data_to_gcsEv+0x7c>)
 8002a4e:	2180      	movs	r1, #128	@ 0x80
 8002a50:	f01d f862 	bl	801fb18 <sniprintf>
	}
 8002a54:	f107 030c 	add.w	r3, r7, #12
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe faec 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	USB_Log(string, SENSOR);
 8002a5e:	f107 0310 	add.w	r3, r7, #16
 8002a62:	2103      	movs	r1, #3
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 fe2d 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
}
 8002a6a:	bf00      	nop
 8002a6c:	3790      	adds	r7, #144	@ 0x90
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a74:	08021ff8 	.word	0x08021ff8

08002a78 <_ZN6BMP38820read_calibration_nvmEv>:
	np::lock_guard lock(baro_data_mutex);
	return temperature;
}

bool BMP388::read_calibration_nvm()
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08a      	sub	sp, #40	@ 0x28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
	bool status = false;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t rx_data[2];

	// PAR T1
	status = read_register(REG_NVM_PAR_T1_LSB, rx_data, 2);
 8002a86:	f107 020c 	add.w	r2, r7, #12
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	2131      	movs	r1, #49	@ 0x31
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fa92 	bl	8002fb8 <_ZN6BMP38813read_registerEhPht>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002a9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a9e:	f083 0301 	eor.w	r3, r3, #1
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <_ZN6BMP38820read_calibration_nvmEv+0x36>
 8002aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002aac:	e21b      	b.n	8002ee6 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	uint16_t par_t1_raw = (rx_data[1] << 8) | rx_data[0];
 8002aae:	7b7b      	ldrb	r3, [r7, #13]
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	b21a      	sxth	r2, r3
 8002ab4:	7b3b      	ldrb	r3, [r7, #12]
 8002ab6:	b21b      	sxth	r3, r3
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	b21b      	sxth	r3, r3
 8002abc:	84bb      	strh	r3, [r7, #36]	@ 0x24
	calib_data.par_t1 = (float)par_t1_raw / powf(2, -8);
 8002abe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ac8:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002db8 <_ZN6BMP38820read_calibration_nvmEv+0x340>
 8002acc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	edc3 7a03 	vstr	s15, [r3, #12]

	// PAR T2
	status = read_register(REG_NVM_PAR_T2_LSB, rx_data, 2);
 8002ad6:	f107 020c 	add.w	r2, r7, #12
 8002ada:	2302      	movs	r3, #2
 8002adc:	2133      	movs	r1, #51	@ 0x33
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fa6a 	bl	8002fb8 <_ZN6BMP38813read_registerEhPht>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002aea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002aee:	f083 0301 	eor.w	r3, r3, #1
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <_ZN6BMP38820read_calibration_nvmEv+0x86>
 8002af8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002afc:	e1f3      	b.n	8002ee6 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	uint16_t par_t2_raw = (rx_data[1] << 8) | rx_data[0];
 8002afe:	7b7b      	ldrb	r3, [r7, #13]
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	b21a      	sxth	r2, r3
 8002b04:	7b3b      	ldrb	r3, [r7, #12]
 8002b06:	b21b      	sxth	r3, r3
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	b21b      	sxth	r3, r3
 8002b0c:	847b      	strh	r3, [r7, #34]	@ 0x22
	calib_data.par_t2 = (float)par_t2_raw / powf(2, 30);
 8002b0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002b10:	ee07 3a90 	vmov	s15, r3
 8002b14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b18:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002dbc <_ZN6BMP38820read_calibration_nvmEv+0x344>
 8002b1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	edc3 7a04 	vstr	s15, [r3, #16]

	// PAR T3
	status = read_register(REG_NVM_PAR_T3, rx_data, 1);
 8002b26:	f107 020c 	add.w	r2, r7, #12
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	2135      	movs	r1, #53	@ 0x35
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fa42 	bl	8002fb8 <_ZN6BMP38813read_registerEhPht>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b3e:	f083 0301 	eor.w	r3, r3, #1
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <_ZN6BMP38820read_calibration_nvmEv+0xd6>
 8002b48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b4c:	e1cb      	b.n	8002ee6 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_t3_raw = rx_data[0];
 8002b4e:	7b3b      	ldrb	r3, [r7, #12]
 8002b50:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	calib_data.par_t3 = (float)par_t3_raw / powf(2, 48);
 8002b54:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8002b58:	ee07 3a90 	vmov	s15, r3
 8002b5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b60:	eddf 6a9f 	vldr	s13, [pc, #636]	@ 8002de0 <_ZN6BMP38820read_calibration_nvmEv+0x368>
 8002b64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	edc3 7a05 	vstr	s15, [r3, #20]

	// PAR P1
	status = read_register(REG_NVM_PAR_P1_LSB, rx_data, 2);
 8002b6e:	f107 020c 	add.w	r2, r7, #12
 8002b72:	2302      	movs	r3, #2
 8002b74:	2136      	movs	r1, #54	@ 0x36
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fa1e 	bl	8002fb8 <_ZN6BMP38813read_registerEhPht>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002b82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b86:	f083 0301 	eor.w	r3, r3, #1
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <_ZN6BMP38820read_calibration_nvmEv+0x11e>
 8002b90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b94:	e1a7      	b.n	8002ee6 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int16_t par_p1_raw = (rx_data[1] << 8) | rx_data[0];
 8002b96:	7b7b      	ldrb	r3, [r7, #13]
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	b21a      	sxth	r2, r3
 8002b9c:	7b3b      	ldrb	r3, [r7, #12]
 8002b9e:	b21b      	sxth	r3, r3
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	83fb      	strh	r3, [r7, #30]
	calib_data.par_p1 = ((float)par_p1_raw - powf(2, 14)) / powf(2, 20);
 8002ba4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bb0:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002dc0 <_ZN6BMP38820read_calibration_nvmEv+0x348>
 8002bb4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002bb8:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8002dc4 <_ZN6BMP38820read_calibration_nvmEv+0x34c>
 8002bbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	edc3 7a06 	vstr	s15, [r3, #24]

	// PAR P2
	status = read_register(REG_NVM_PAR_P2_LSB, rx_data, 2);
 8002bc6:	f107 020c 	add.w	r2, r7, #12
 8002bca:	2302      	movs	r3, #2
 8002bcc:	2138      	movs	r1, #56	@ 0x38
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f9f2 	bl	8002fb8 <_ZN6BMP38813read_registerEhPht>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002bda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bde:	f083 0301 	eor.w	r3, r3, #1
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <_ZN6BMP38820read_calibration_nvmEv+0x176>
 8002be8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bec:	e17b      	b.n	8002ee6 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int16_t par_p2_raw = (rx_data[1] << 8) | rx_data[0];
 8002bee:	7b7b      	ldrb	r3, [r7, #13]
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	b21a      	sxth	r2, r3
 8002bf4:	7b3b      	ldrb	r3, [r7, #12]
 8002bf6:	b21b      	sxth	r3, r3
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	83bb      	strh	r3, [r7, #28]
	calib_data.par_p2 = ((float)par_p2_raw - powf(2, 14)) / powf(2, 29);
 8002bfc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c08:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8002dc0 <_ZN6BMP38820read_calibration_nvmEv+0x348>
 8002c0c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002c10:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8002dc8 <_ZN6BMP38820read_calibration_nvmEv+0x350>
 8002c14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	edc3 7a07 	vstr	s15, [r3, #28]

	// PAR P3
	status = read_register(REG_NVM_PAR_P3, rx_data, 1);
 8002c1e:	f107 020c 	add.w	r2, r7, #12
 8002c22:	2301      	movs	r3, #1
 8002c24:	213a      	movs	r1, #58	@ 0x3a
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f9c6 	bl	8002fb8 <_ZN6BMP38813read_registerEhPht>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002c32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c36:	f083 0301 	eor.w	r3, r3, #1
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <_ZN6BMP38820read_calibration_nvmEv+0x1ce>
 8002c40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c44:	e14f      	b.n	8002ee6 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_p3_raw = rx_data[0];
 8002c46:	7b3b      	ldrb	r3, [r7, #12]
 8002c48:	76fb      	strb	r3, [r7, #27]
	calib_data.par_p3 = (float)par_p3_raw / powf(2, 32);
 8002c4a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002c4e:	ee07 3a90 	vmov	s15, r3
 8002c52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c56:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8002dcc <_ZN6BMP38820read_calibration_nvmEv+0x354>
 8002c5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	edc3 7a08 	vstr	s15, [r3, #32]

	// PAR P4
	status = read_register(REG_NVM_PAR_P4, rx_data, 1);
 8002c64:	f107 020c 	add.w	r2, r7, #12
 8002c68:	2301      	movs	r3, #1
 8002c6a:	213b      	movs	r1, #59	@ 0x3b
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f9a3 	bl	8002fb8 <_ZN6BMP38813read_registerEhPht>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c7c:	f083 0301 	eor.w	r3, r3, #1
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <_ZN6BMP38820read_calibration_nvmEv+0x214>
 8002c86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c8a:	e12c      	b.n	8002ee6 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_p4_raw = rx_data[0];
 8002c8c:	7b3b      	ldrb	r3, [r7, #12]
 8002c8e:	76bb      	strb	r3, [r7, #26]
	calib_data.par_p4 = (float)par_p4_raw / powf(2, 37);
 8002c90:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002c94:	ee07 3a90 	vmov	s15, r3
 8002c98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c9c:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002dd0 <_ZN6BMP38820read_calibration_nvmEv+0x358>
 8002ca0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// PAR P5
	status = read_register(REG_NVM_PAR_P5_LSB, rx_data, 2);
 8002caa:	f107 020c 	add.w	r2, r7, #12
 8002cae:	2302      	movs	r3, #2
 8002cb0:	213c      	movs	r1, #60	@ 0x3c
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f980 	bl	8002fb8 <_ZN6BMP38813read_registerEhPht>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cc2:	f083 0301 	eor.w	r3, r3, #1
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <_ZN6BMP38820read_calibration_nvmEv+0x25a>
 8002ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cd0:	e109      	b.n	8002ee6 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	uint16_t par_p5_raw = (rx_data[1] << 8) | rx_data[0];
 8002cd2:	7b7b      	ldrb	r3, [r7, #13]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	b21a      	sxth	r2, r3
 8002cd8:	7b3b      	ldrb	r3, [r7, #12]
 8002cda:	b21b      	sxth	r3, r3
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	b21b      	sxth	r3, r3
 8002ce0:	833b      	strh	r3, [r7, #24]
	calib_data.par_p5 = (float)par_p5_raw / powf(2, -3);
 8002ce2:	8b3b      	ldrh	r3, [r7, #24]
 8002ce4:	ee07 3a90 	vmov	s15, r3
 8002ce8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cec:	eef4 6a00 	vmov.f32	s13, #64	@ 0x3e000000  0.125
 8002cf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// PAR P6
	status = read_register(REG_NVM_PAR_P6_LSB, rx_data, 2);
 8002cfa:	f107 020c 	add.w	r2, r7, #12
 8002cfe:	2302      	movs	r3, #2
 8002d00:	213e      	movs	r1, #62	@ 0x3e
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f958 	bl	8002fb8 <_ZN6BMP38813read_registerEhPht>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d12:	f083 0301 	eor.w	r3, r3, #1
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <_ZN6BMP38820read_calibration_nvmEv+0x2aa>
 8002d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d20:	e0e1      	b.n	8002ee6 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	uint16_t par_p6_raw = (rx_data[1] << 8) | rx_data[0];
 8002d22:	7b7b      	ldrb	r3, [r7, #13]
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	b21a      	sxth	r2, r3
 8002d28:	7b3b      	ldrb	r3, [r7, #12]
 8002d2a:	b21b      	sxth	r3, r3
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	b21b      	sxth	r3, r3
 8002d30:	82fb      	strh	r3, [r7, #22]
	calib_data.par_p6 = (float)par_p6_raw / powf(2, 6);
 8002d32:	8afb      	ldrh	r3, [r7, #22]
 8002d34:	ee07 3a90 	vmov	s15, r3
 8002d38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d3c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8002dd4 <_ZN6BMP38820read_calibration_nvmEv+0x35c>
 8002d40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// PAR P7
	status = read_register(REG_NVM_PAR_P7, rx_data, 1);
 8002d4a:	f107 020c 	add.w	r2, r7, #12
 8002d4e:	2301      	movs	r3, #1
 8002d50:	2140      	movs	r1, #64	@ 0x40
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f930 	bl	8002fb8 <_ZN6BMP38813read_registerEhPht>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d62:	f083 0301 	eor.w	r3, r3, #1
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <_ZN6BMP38820read_calibration_nvmEv+0x2fa>
 8002d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d70:	e0b9      	b.n	8002ee6 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_p7_raw = rx_data[0];
 8002d72:	7b3b      	ldrb	r3, [r7, #12]
 8002d74:	757b      	strb	r3, [r7, #21]
	calib_data.par_p7 = (float)par_p7_raw / powf(2, 8);
 8002d76:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002d7a:	ee07 3a90 	vmov	s15, r3
 8002d7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d82:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002dd8 <_ZN6BMP38820read_calibration_nvmEv+0x360>
 8002d86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	// PAR P8
	status = read_register(REG_NVM_PAR_P8, rx_data, 1);
 8002d90:	f107 020c 	add.w	r2, r7, #12
 8002d94:	2301      	movs	r3, #1
 8002d96:	2141      	movs	r1, #65	@ 0x41
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f90d 	bl	8002fb8 <_ZN6BMP38813read_registerEhPht>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002da4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002da8:	f083 0301 	eor.w	r3, r3, #1
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d01a      	beq.n	8002de8 <_ZN6BMP38820read_calibration_nvmEv+0x370>
 8002db2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002db6:	e096      	b.n	8002ee6 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
 8002db8:	3b800000 	.word	0x3b800000
 8002dbc:	4e800000 	.word	0x4e800000
 8002dc0:	46800000 	.word	0x46800000
 8002dc4:	49800000 	.word	0x49800000
 8002dc8:	4e000000 	.word	0x4e000000
 8002dcc:	4f800000 	.word	0x4f800000
 8002dd0:	52000000 	.word	0x52000000
 8002dd4:	42800000 	.word	0x42800000
 8002dd8:	43800000 	.word	0x43800000
 8002ddc:	47000000 	.word	0x47000000
 8002de0:	57800000 	.word	0x57800000
 8002de4:	60000000 	.word	0x60000000
	int8_t par_p8_raw = rx_data[0];
 8002de8:	7b3b      	ldrb	r3, [r7, #12]
 8002dea:	753b      	strb	r3, [r7, #20]
	calib_data.par_p8 = (float)par_p8_raw / powf(2, 15);
 8002dec:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002df0:	ee07 3a90 	vmov	s15, r3
 8002df4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002df8:	ed5f 6a08 	vldr	s13, [pc, #-32]	@ 8002ddc <_ZN6BMP38820read_calibration_nvmEv+0x364>
 8002dfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	// PAR P9
	status = read_register(REG_NVM_PAR_P9_LSB, rx_data, 2);
 8002e06:	f107 020c 	add.w	r2, r7, #12
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	2142      	movs	r1, #66	@ 0x42
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f8d2 	bl	8002fb8 <_ZN6BMP38813read_registerEhPht>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e1e:	f083 0301 	eor.w	r3, r3, #1
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <_ZN6BMP38820read_calibration_nvmEv+0x3b6>
 8002e28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e2c:	e05b      	b.n	8002ee6 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int16_t par_p9_raw = (rx_data[1] << 8) | rx_data[0];
 8002e2e:	7b7b      	ldrb	r3, [r7, #13]
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	b21a      	sxth	r2, r3
 8002e34:	7b3b      	ldrb	r3, [r7, #12]
 8002e36:	b21b      	sxth	r3, r3
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	827b      	strh	r3, [r7, #18]
	calib_data.par_p9 = (float)par_p9_raw / powf(2, 48);
 8002e3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e40:	ee07 3a90 	vmov	s15, r3
 8002e44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e48:	ed5f 6a1b 	vldr	s13, [pc, #-108]	@ 8002de0 <_ZN6BMP38820read_calibration_nvmEv+0x368>
 8002e4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	// PAR P10
	status = read_register(REG_NVM_PAR_P10, rx_data, 1);
 8002e56:	f107 020c 	add.w	r2, r7, #12
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	2144      	movs	r1, #68	@ 0x44
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f8aa 	bl	8002fb8 <_ZN6BMP38813read_registerEhPht>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e6e:	f083 0301 	eor.w	r3, r3, #1
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <_ZN6BMP38820read_calibration_nvmEv+0x406>
 8002e78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e7c:	e033      	b.n	8002ee6 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_p10_raw = rx_data[0];
 8002e7e:	7b3b      	ldrb	r3, [r7, #12]
 8002e80:	747b      	strb	r3, [r7, #17]
	calib_data.par_p10 = (float)par_p10_raw / powf(2, 48);
 8002e82:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002e86:	ee07 3a90 	vmov	s15, r3
 8002e8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e8e:	ed5f 6a2c 	vldr	s13, [pc, #-176]	@ 8002de0 <_ZN6BMP38820read_calibration_nvmEv+0x368>
 8002e92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

	// PAR P11
	status = read_register(REG_NVM_PAR_P11, rx_data, 1);
 8002e9c:	f107 020c 	add.w	r2, r7, #12
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	2145      	movs	r1, #69	@ 0x45
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f887 	bl	8002fb8 <_ZN6BMP38813read_registerEhPht>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002eb4:	f083 0301 	eor.w	r3, r3, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <_ZN6BMP38820read_calibration_nvmEv+0x44c>
 8002ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ec2:	e010      	b.n	8002ee6 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_p11_raw = rx_data[0];
 8002ec4:	7b3b      	ldrb	r3, [r7, #12]
 8002ec6:	743b      	strb	r3, [r7, #16]
	calib_data.par_p11 = (float)par_p11_raw / powf(2, 65);
 8002ec8:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002ecc:	ee07 3a90 	vmov	s15, r3
 8002ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ed4:	ed5f 6a3d 	vldr	s13, [pc, #-244]	@ 8002de4 <_ZN6BMP38820read_calibration_nvmEv+0x36c>
 8002ed8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

	return status;
 8002ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3728      	adds	r7, #40	@ 0x28
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop

08002ef0 <_ZN6BMP38824compute_startup_pressureEv>:

bool BMP388::compute_startup_pressure()
{
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b089      	sub	sp, #36	@ 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
	/* Compute the average current pressure (for initial altitude reference) */
	bool status = false;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	77fb      	strb	r3, [r7, #31]
	uint8_t tx_data[2];
	uint8_t sample_num = 50;
 8002efc:	2332      	movs	r3, #50	@ 0x32
 8002efe:	74fb      	strb	r3, [r7, #19]
	float running_pressure = 0;
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]

	for (int i = 0; i < sample_num; i++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	e031      	b.n	8002f70 <_ZN6BMP38824compute_startup_pressureEv+0x80>
	{
		// Switch sensor into forced mode (take one reading, return to sleep)
		tx_data[0] = 0x13;
 8002f0c:	2313      	movs	r3, #19
 8002f0e:	743b      	strb	r3, [r7, #16]
		status = write_register(REG_PWR_CTRL, tx_data, 1);
 8002f10:	f107 0210 	add.w	r2, r7, #16
 8002f14:	2301      	movs	r3, #1
 8002f16:	211b      	movs	r1, #27
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f88f 	bl	800303c <_ZN6BMP38814write_registerEhPht>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	77fb      	strb	r3, [r7, #31]
		if (!status) return status;
 8002f22:	7ffb      	ldrb	r3, [r7, #31]
 8002f24:	f083 0301 	eor.w	r3, r3, #1
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <_ZN6BMP38824compute_startup_pressureEv+0x42>
 8002f2e:	7ffc      	ldrb	r4, [r7, #31]
 8002f30:	e03c      	b.n	8002fac <_ZN6BMP38824compute_startup_pressureEv+0xbc>
		osDelay(40);
 8002f32:	2028      	movs	r0, #40	@ 0x28
 8002f34:	f00b ff5b 	bl	800edee <osDelay>
		service_irq();
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff fbcf 	bl	80026dc <_ZN6BMP38811service_irqEv>
		np::lock_guard lock(baro_data_mutex);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f42:	f107 0308 	add.w	r3, r7, #8
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fe f85f 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		running_pressure += pressure;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002f54:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f5c:	edc7 7a06 	vstr	s15, [r7, #24]
	}
 8002f60:	f107 0308 	add.w	r3, r7, #8
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe f866 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	for (int i = 0; i < sample_num; i++)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	7cfb      	ldrb	r3, [r7, #19]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	dbc9      	blt.n	8002f0c <_ZN6BMP38824compute_startup_pressureEv+0x1c>
	np::lock_guard lock(baro_data_mutex);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f7c:	f107 030c 	add.w	r3, r7, #12
 8002f80:	4611      	mov	r1, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fe f842 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	startup_pressure = running_pressure / sample_num;
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	ee07 3a90 	vmov	s15, r3
 8002f8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f92:	edd7 6a06 	vldr	s13, [r7, #24]
 8002f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	return status;
 8002fa0:	7ffc      	ldrb	r4, [r7, #31]
}
 8002fa2:	f107 030c 	add.w	r3, r7, #12
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe f845 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 8002fac:	4623      	mov	r3, r4
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3724      	adds	r7, #36	@ 0x24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd90      	pop	{r4, r7, pc}
	...

08002fb8 <_ZN6BMP38813read_registerEhPht>:
 *
 *  Low-level register read / write
 *
 */
bool BMP388::read_register(uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	@ 0x28
 8002fbc:	af04      	add	r7, sp, #16
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	72fb      	strb	r3, [r7, #11]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	813b      	strh	r3, [r7, #8]
	bool status = false;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	75fb      	strb	r3, [r7, #23]
	{
		np::lock_guard lock(i2c_mutex);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	f107 0310 	add.w	r3, r7, #16
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe f816 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		status = (HAL_I2C_Mem_Read(&i2c_handle, (BMP388_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, rx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	7a1b      	ldrb	r3, [r3, #8]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	b299      	uxth	r1, r3
 8002fec:	7afb      	ldrb	r3, [r7, #11]
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ff4:	9302      	str	r3, [sp, #8]
 8002ff6:	893b      	ldrh	r3, [r7, #8]
 8002ff8:	9301      	str	r3, [sp, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	2301      	movs	r3, #1
 8003000:	f003 f9b6 	bl	8006370 <HAL_I2C_Mem_Read>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	bf0c      	ite	eq
 800300a:	2301      	moveq	r3, #1
 800300c:	2300      	movne	r3, #0
 800300e:	75fb      	strb	r3, [r7, #23]
	}
 8003010:	f107 0310 	add.w	r3, r7, #16
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe f80e 	bl	8001036 <_ZN2np10lock_guardD1Ev>

	if (!status)
 800301a:	7dfb      	ldrb	r3, [r7, #23]
 800301c:	f083 0301 	eor.w	r3, r3, #1
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <_ZN6BMP38813read_registerEhPht+0x76>
	{
		USB_Log("BMP388 register read failed.\n", ERR);
 8003026:	2102      	movs	r1, #2
 8003028:	4803      	ldr	r0, [pc, #12]	@ (8003038 <_ZN6BMP38813read_registerEhPht+0x80>)
 800302a:	f000 fb4b 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 800302e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	08022010 	.word	0x08022010

0800303c <_ZN6BMP38814write_registerEhPht>:

bool BMP388::write_register(uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	@ 0x28
 8003040:	af04      	add	r7, sp, #16
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	461a      	mov	r2, r3
 8003048:	460b      	mov	r3, r1
 800304a:	72fb      	strb	r3, [r7, #11]
 800304c:	4613      	mov	r3, r2
 800304e:	813b      	strh	r3, [r7, #8]
	bool status = false;
 8003050:	2300      	movs	r3, #0
 8003052:	75fb      	strb	r3, [r7, #23]
	{
		np::lock_guard lock(i2c_mutex);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	f107 0310 	add.w	r3, r7, #16
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd ffd4 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		status = (HAL_I2C_Mem_Write(&i2c_handle, (BMP388_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, tx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	7a1b      	ldrb	r3, [r3, #8]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	b299      	uxth	r1, r3
 8003070:	7afb      	ldrb	r3, [r7, #11]
 8003072:	b29a      	uxth	r2, r3
 8003074:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003078:	9302      	str	r3, [sp, #8]
 800307a:	893b      	ldrh	r3, [r7, #8]
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	2301      	movs	r3, #1
 8003084:	f003 f860 	bl	8006148 <HAL_I2C_Mem_Write>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	bf0c      	ite	eq
 800308e:	2301      	moveq	r3, #1
 8003090:	2300      	movne	r3, #0
 8003092:	75fb      	strb	r3, [r7, #23]
	}
 8003094:	f107 0310 	add.w	r3, r7, #16
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd ffcc 	bl	8001036 <_ZN2np10lock_guardD1Ev>

	if (!status)
 800309e:	7dfb      	ldrb	r3, [r7, #23]
 80030a0:	f083 0301 	eor.w	r3, r3, #1
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <_ZN6BMP38814write_registerEhPht+0x76>
	{
		USB_Log("BMP388 register write failed.\n", ERR);
 80030aa:	2102      	movs	r1, #2
 80030ac:	4803      	ldr	r0, [pc, #12]	@ (80030bc <_ZN6BMP38814write_registerEhPht+0x80>)
 80030ae:	f000 fb09 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 80030b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	08022030 	.word	0x08022030

080030c0 <_ZN23LIS3MDL_CalibrationDataC1Ev>:
#define REG_INT_SRC					0x31
#define REG_INT_THS_L				0x32
#define REG_INT_THS_H				0x33


struct LIS3MDL_CalibrationData
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a07      	ldr	r2, [pc, #28]	@ (80030e8 <_ZN23LIS3MDL_CalibrationDataC1Ev+0x28>)
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a06      	ldr	r2, [pc, #24]	@ (80030ec <_ZN23LIS3MDL_CalibrationDataC1Ev+0x2c>)
 80030d2:	605a      	str	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a06      	ldr	r2, [pc, #24]	@ (80030f0 <_ZN23LIS3MDL_CalibrationDataC1Ev+0x30>)
 80030d8:	609a      	str	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	be9ff2e5 	.word	0xbe9ff2e5
 80030ec:	be8b020c 	.word	0xbe8b020c
 80030f0:	bdbc6a7f 	.word	0xbdbc6a7f

080030f4 <_ZN7LIS3MDLC1ER19__I2C_HandleTypeDefRPvS3_>:
#include "Utility/lock_guard.hpp"
#include <cmath>
#include <cstdio>


LIS3MDL::LIS3MDL(I2C_HandleTypeDef& i2c_handle, osMutexId_t& i2c_mutex, osMutexId_t& mag_data_mutex)
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
	:i2c_handle(i2c_handle),
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	601a      	str	r2, [r3, #0]
	 i2c_mutex(i2c_mutex),
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	605a      	str	r2, [r3, #4]
	 mag_data_mutex(mag_data_mutex) {}
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	221c      	movs	r2, #28
 8003112:	721a      	strb	r2, [r3, #8]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	330c      	adds	r3, #12
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff ffd1 	bl	80030c0 <_ZN23LIS3MDL_CalibrationDataC1Ev>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4a0a      	ldr	r2, [pc, #40]	@ (800314c <_ZN7LIS3MDLC1ER19__I2C_HandleTypeDefRPvS3_+0x58>)
 8003122:	619a      	str	r2, [r3, #24]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	61da      	str	r2, [r3, #28]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3320      	adds	r3, #32
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	605a      	str	r2, [r3, #4]
 8003134:	609a      	str	r2, [r3, #8]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	332c      	adds	r3, #44	@ 0x2c
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	605a      	str	r2, [r3, #4]
 8003140:	609a      	str	r2, [r3, #8]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	45d5d000 	.word	0x45d5d000

08003150 <_ZN7LIS3MDL4initEv>:

bool LIS3MDL::init()
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	@ 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
	bool status = false;
 8003158:	2300      	movs	r3, #0
 800315a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];

	// Check chip ID
	rx_data[0] = 0x00;
 800315e:	2300      	movs	r3, #0
 8003160:	753b      	strb	r3, [r7, #20]
	status = read_register(REG_WHO_AM_I, rx_data, 1);
 8003162:	f107 0214 	add.w	r2, r7, #20
 8003166:	2301      	movs	r3, #1
 8003168:	210f      	movs	r1, #15
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fa1e 	bl	80035ac <_ZN7LIS3MDL13read_registerEhPht>
 8003170:	4603      	mov	r3, r0
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (status && rx_data[0] == 0x3D)
 8003176:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800317a:	2b00      	cmp	r3, #0
 800317c:	d01d      	beq.n	80031ba <_ZN7LIS3MDL4initEv+0x6a>
 800317e:	7d3b      	ldrb	r3, [r7, #20]
 8003180:	2b3d      	cmp	r3, #61	@ 0x3d
 8003182:	d11a      	bne.n	80031ba <_ZN7LIS3MDL4initEv+0x6a>
	{
		USB_Log("Found LIS3MDL, starting initialization.", CRITICAL);
 8003184:	2101      	movs	r1, #1
 8003186:	4864      	ldr	r0, [pc, #400]	@ (8003318 <_ZN7LIS3MDL4initEv+0x1c8>)
 8003188:	f000 fa9c 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	else
	{
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
		return false;
	}
	osDelay(10);
 800318c:	200a      	movs	r0, #10
 800318e:	f00b fe2e 	bl	800edee <osDelay>

	// Perform soft-reset of device
	tx_data[0] = 0x04;
 8003192:	2304      	movs	r3, #4
 8003194:	763b      	strb	r3, [r7, #24]
	status = write_register(REG_CTRL_REG2, tx_data, 1);
 8003196:	f107 0218 	add.w	r2, r7, #24
 800319a:	2301      	movs	r3, #1
 800319c:	2121      	movs	r1, #33	@ 0x21
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fa4e 	bl	8003640 <_ZN7LIS3MDL14write_registerEhPht>
 80031a4:	4603      	mov	r3, r0
 80031a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (!status) return status;
 80031aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031ae:	f083 0301 	eor.w	r3, r3, #1
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d106      	bne.n	80031c6 <_ZN7LIS3MDL4initEv+0x76>
 80031b8:	e008      	b.n	80031cc <_ZN7LIS3MDL4initEv+0x7c>
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
 80031ba:	2102      	movs	r1, #2
 80031bc:	4857      	ldr	r0, [pc, #348]	@ (800331c <_ZN7LIS3MDL4initEv+0x1cc>)
 80031be:	f000 fa81 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
		return false;
 80031c2:	2300      	movs	r3, #0
 80031c4:	e0a3      	b.n	800330e <_ZN7LIS3MDL4initEv+0x1be>
	if (!status) return status;
 80031c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031ca:	e0a0      	b.n	800330e <_ZN7LIS3MDL4initEv+0x1be>
	osDelay(10);
 80031cc:	200a      	movs	r0, #10
 80031ce:	f00b fe0e 	bl	800edee <osDelay>

	// Set +-4G range
	tx_data[0] = 0x00;
 80031d2:	2300      	movs	r3, #0
 80031d4:	763b      	strb	r3, [r7, #24]
	status = write_register(REG_CTRL_REG2, tx_data, 1);
 80031d6:	f107 0218 	add.w	r2, r7, #24
 80031da:	2301      	movs	r3, #1
 80031dc:	2121      	movs	r1, #33	@ 0x21
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fa2e 	bl	8003640 <_ZN7LIS3MDL14write_registerEhPht>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (!status) return status;
 80031ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031ee:	f083 0301 	eor.w	r3, r3, #1
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <_ZN7LIS3MDL4initEv+0xae>
 80031f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031fc:	e087      	b.n	800330e <_ZN7LIS3MDL4initEv+0x1be>
	osDelay(10);
 80031fe:	200a      	movs	r0, #10
 8003200:	f00b fdf5 	bl	800edee <osDelay>

	// Set X,Y axes ultra-high performance mode, 40Hz ODR, enable temperature sensor
	tx_data[0] = 0xF8;
 8003204:	23f8      	movs	r3, #248	@ 0xf8
 8003206:	763b      	strb	r3, [r7, #24]
	status = write_register(REG_CTRL_REG1, tx_data, 1);
 8003208:	f107 0218 	add.w	r2, r7, #24
 800320c:	2301      	movs	r3, #1
 800320e:	2120      	movs	r1, #32
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fa15 	bl	8003640 <_ZN7LIS3MDL14write_registerEhPht>
 8003216:	4603      	mov	r3, r0
 8003218:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (!status) return status;
 800321c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003220:	f083 0301 	eor.w	r3, r3, #1
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <_ZN7LIS3MDL4initEv+0xe0>
 800322a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800322e:	e06e      	b.n	800330e <_ZN7LIS3MDL4initEv+0x1be>
	osDelay(10);
 8003230:	200a      	movs	r0, #10
 8003232:	f00b fddc 	bl	800edee <osDelay>

	// Set Z axis ultra-high performance mode
	tx_data[0] = 0x0C;
 8003236:	230c      	movs	r3, #12
 8003238:	763b      	strb	r3, [r7, #24]
	status = write_register(REG_CTRL_REG4, tx_data, 1);
 800323a:	f107 0218 	add.w	r2, r7, #24
 800323e:	2301      	movs	r3, #1
 8003240:	2123      	movs	r1, #35	@ 0x23
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f9fc 	bl	8003640 <_ZN7LIS3MDL14write_registerEhPht>
 8003248:	4603      	mov	r3, r0
 800324a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (!status) return status;
 800324e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003252:	f083 0301 	eor.w	r3, r3, #1
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <_ZN7LIS3MDL4initEv+0x112>
 800325c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003260:	e055      	b.n	800330e <_ZN7LIS3MDL4initEv+0x1be>
	osDelay(10);
 8003262:	200a      	movs	r0, #10
 8003264:	f00b fdc3 	bl	800edee <osDelay>

	// Initilize IIR Filters
	float ODR = 40;				// Hz
 8003268:	4b2d      	ldr	r3, [pc, #180]	@ (8003320 <_ZN7LIS3MDL4initEv+0x1d0>)
 800326a:	613b      	str	r3, [r7, #16]
	float CUTOFF = 10;			// Hz
 800326c:	4b2d      	ldr	r3, [pc, #180]	@ (8003324 <_ZN7LIS3MDL4initEv+0x1d4>)
 800326e:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; i < filters.size(); i++)
 8003270:	2300      	movs	r3, #0
 8003272:	627b      	str	r3, [r7, #36]	@ 0x24
 8003274:	e01d      	b.n	80032b2 <_ZN7LIS3MDL4initEv+0x162>
	{
		filters[i] = std::make_unique<IIRFilter>(CUTOFF, ODR);
 8003276:	f107 031c 	add.w	r3, r7, #28
 800327a:	f107 0210 	add.w	r2, r7, #16
 800327e:	f107 010c 	add.w	r1, r7, #12
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe ff4e 	bl	8002124 <_ZSt11make_uniqueI9IIRFilterJRfS1_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	332c      	adds	r3, #44	@ 0x2c
 800328c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe ff39 	bl	8002106 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8003294:	4602      	mov	r2, r0
 8003296:	f107 031c 	add.w	r3, r7, #28
 800329a:	4619      	mov	r1, r3
 800329c:	4610      	mov	r0, r2
 800329e:	f7fd ff31 	bl	8001104 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>
 80032a2:	f107 031c 	add.w	r3, r7, #28
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe ff00 	bl	80020ac <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev>
	for (size_t i = 0; i < filters.size(); i++)
 80032ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ae:	3301      	adds	r3, #1
 80032b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	332c      	adds	r3, #44	@ 0x2c
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe ff1a 	bl	80020f0 <_ZNKSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE4sizeEv>
 80032bc:	4602      	mov	r2, r0
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d3d8      	bcc.n	8003276 <_ZN7LIS3MDL4initEv+0x126>
	}

	// Switch to continuous-conversion mode
	tx_data[0] = 0x00;
 80032c4:	2300      	movs	r3, #0
 80032c6:	763b      	strb	r3, [r7, #24]
	status = write_register(REG_CTRL_REG3, tx_data, 1);
 80032c8:	f107 0218 	add.w	r2, r7, #24
 80032cc:	2301      	movs	r3, #1
 80032ce:	2122      	movs	r1, #34	@ 0x22
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f9b5 	bl	8003640 <_ZN7LIS3MDL14write_registerEhPht>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (!status) return status;
 80032dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032e0:	f083 0301 	eor.w	r3, r3, #1
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <_ZN7LIS3MDL4initEv+0x1a0>
 80032ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032ee:	e00e      	b.n	800330e <_ZN7LIS3MDL4initEv+0x1be>
	osDelay(10);
 80032f0:	200a      	movs	r0, #10
 80032f2:	f00b fd7c 	bl	800edee <osDelay>

	// Read data to clear DRDY interrupt
	service_irq();
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f818 	bl	800332c <_ZN7LIS3MDL11service_irqEv>

	USB_Log("LIS3MDL initialized OK.", CRITICAL);
 80032fc:	2101      	movs	r1, #1
 80032fe:	480a      	ldr	r0, [pc, #40]	@ (8003328 <_ZN7LIS3MDL4initEv+0x1d8>)
 8003300:	f000 f9e0 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 8003304:	2064      	movs	r0, #100	@ 0x64
 8003306:	f00b fd72 	bl	800edee <osDelay>

	return status;
 800330a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800330e:	4618      	mov	r0, r3
 8003310:	3728      	adds	r7, #40	@ 0x28
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	08022050 	.word	0x08022050
 800331c:	08022078 	.word	0x08022078
 8003320:	42200000 	.word	0x42200000
 8003324:	41200000 	.word	0x41200000
 8003328:	080220a8 	.word	0x080220a8

0800332c <_ZN7LIS3MDL11service_irqEv>:

bool LIS3MDL::service_irq()
{
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b08b      	sub	sp, #44	@ 0x2c
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[6];
	bool status = read_register(REG_OUT_X_L, raw_data, sizeof(raw_data));
 8003334:	f107 020c 	add.w	r2, r7, #12
 8003338:	2306      	movs	r3, #6
 800333a:	2128      	movs	r1, #40	@ 0x28
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f935 	bl	80035ac <_ZN7LIS3MDL13read_registerEhPht>
 8003342:	4603      	mov	r3, r0
 8003344:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status)
 8003348:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80a4 	beq.w	800349a <_ZN7LIS3MDL11service_irqEv+0x16e>
	{
		int16_t raw_x_int16 = (raw_data[1] << 8) | raw_data[0];
 8003352:	7b7b      	ldrb	r3, [r7, #13]
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	b21a      	sxth	r2, r3
 8003358:	7b3b      	ldrb	r3, [r7, #12]
 800335a:	b21b      	sxth	r3, r3
 800335c:	4313      	orrs	r3, r2
 800335e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		int16_t raw_y_int16 = (raw_data[3] << 8) | raw_data[2];
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	b21a      	sxth	r2, r3
 8003366:	7bbb      	ldrb	r3, [r7, #14]
 8003368:	b21b      	sxth	r3, r3
 800336a:	4313      	orrs	r3, r2
 800336c:	847b      	strh	r3, [r7, #34]	@ 0x22
		int16_t raw_z_int16 = (raw_data[5] << 8) | raw_data[4];
 800336e:	7c7b      	ldrb	r3, [r7, #17]
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	b21a      	sxth	r2, r3
 8003374:	7c3b      	ldrb	r3, [r7, #16]
 8003376:	b21b      	sxth	r3, r3
 8003378:	4313      	orrs	r3, r2
 800337a:	843b      	strh	r3, [r7, #32]

		float LIS3_x = filters[0]->update(raw_x_int16 / LSB_per_gauss - calib_data.x_offset);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	332c      	adds	r3, #44	@ 0x2c
 8003380:	2100      	movs	r1, #0
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe febf 	bl	8002106 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8003388:	4603      	mov	r3, r0
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe ff10 	bl	80021b0 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 8003390:	4602      	mov	r2, r0
 8003392:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80033a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80033ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b2:	eeb0 0a67 	vmov.f32	s0, s15
 80033b6:	4610      	mov	r0, r2
 80033b8:	f000 ff84 	bl	80042c4 <_ZN9IIRFilter6updateEf>
 80033bc:	ed87 0a07 	vstr	s0, [r7, #28]
		float LIS3_y = filters[1]->update(raw_y_int16 / LSB_per_gauss - calib_data.y_offset);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	332c      	adds	r3, #44	@ 0x2c
 80033c4:	2101      	movs	r1, #1
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fe fe9d 	bl	8002106 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 80033cc:	4603      	mov	r3, r0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe feee 	bl	80021b0 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 80033d4:	4602      	mov	r2, r0
 80033d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80033e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80033f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033f6:	eeb0 0a67 	vmov.f32	s0, s15
 80033fa:	4610      	mov	r0, r2
 80033fc:	f000 ff62 	bl	80042c4 <_ZN9IIRFilter6updateEf>
 8003400:	ed87 0a06 	vstr	s0, [r7, #24]
		float LIS3_z = filters[2]->update(raw_z_int16 / LSB_per_gauss - calib_data.z_offset);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	332c      	adds	r3, #44	@ 0x2c
 8003408:	2102      	movs	r1, #2
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe fe7b 	bl	8002106 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8003410:	4603      	mov	r3, r0
 8003412:	4618      	mov	r0, r3
 8003414:	f7fe fecc 	bl	80021b0 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 8003418:	4602      	mov	r2, r0
 800341a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	edd3 7a06 	vldr	s15, [r3, #24]
 800342c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	edd3 7a05 	vldr	s15, [r3, #20]
 8003436:	ee77 7a67 	vsub.f32	s15, s14, s15
 800343a:	eeb0 0a67 	vmov.f32	s0, s15
 800343e:	4610      	mov	r0, r2
 8003440:	f000 ff40 	bl	80042c4 <_ZN9IIRFilter6updateEf>
 8003444:	ed87 0a05 	vstr	s0, [r7, #20]

		np::lock_guard lock(mag_data_mutex);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	f107 0308 	add.w	r3, r7, #8
 8003450:	4611      	mov	r1, r2
 8003452:	4618      	mov	r0, r3
 8003454:	f7fd fdda 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		axis_intensities[0] = LIS3_x;
 8003458:	69fc      	ldr	r4, [r7, #28]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3320      	adds	r3, #32
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f7fe feb1 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8003466:	4603      	mov	r3, r0
 8003468:	601c      	str	r4, [r3, #0]
		axis_intensities[1] = LIS3_y;
 800346a:	69bc      	ldr	r4, [r7, #24]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3320      	adds	r3, #32
 8003470:	2101      	movs	r1, #1
 8003472:	4618      	mov	r0, r3
 8003474:	f7fe fea8 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8003478:	4603      	mov	r3, r0
 800347a:	601c      	str	r4, [r3, #0]
		axis_intensities[2] = LIS3_z;
 800347c:	697c      	ldr	r4, [r7, #20]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3320      	adds	r3, #32
 8003482:	2102      	movs	r1, #2
 8003484:	4618      	mov	r0, r3
 8003486:	f7fe fe9f 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 800348a:	4603      	mov	r3, r0
 800348c:	601c      	str	r4, [r3, #0]

		// DRDY interrupt cleared automatically after read
	}
 800348e:	f107 0308 	add.w	r3, r7, #8
 8003492:	4618      	mov	r0, r3
 8003494:	f7fd fdcf 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 8003498:	e003      	b.n	80034a2 <_ZN7LIS3MDL11service_irqEv+0x176>
	else
	{
		USB_Log("ERR reading LIS3MDL data.", ERR);
 800349a:	2102      	movs	r1, #2
 800349c:	4804      	ldr	r0, [pc, #16]	@ (80034b0 <_ZN7LIS3MDL11service_irqEv+0x184>)
 800349e:	f000 f911 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 80034a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	372c      	adds	r7, #44	@ 0x2c
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd90      	pop	{r4, r7, pc}
 80034ae:	bf00      	nop
 80034b0:	080220c0 	.word	0x080220c0

080034b4 <_ZN7LIS3MDL15log_data_to_gcsEv>:

void LIS3MDL::log_data_to_gcs()
{
 80034b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034b8:	b0aa      	sub	sp, #168	@ 0xa8
 80034ba:	af06      	add	r7, sp, #24
 80034bc:	6078      	str	r0, [r7, #4]
	char string[128];
	{
		np::lock_guard lock(mag_data_mutex);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69da      	ldr	r2, [r3, #28]
 80034c2:	f107 030c 	add.w	r3, r7, #12
 80034c6:	4611      	mov	r1, r2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fd fd9f 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		snprintf(string, 128, "LIS3MDL %.2f %.2f %.2f", axis_intensities[0], axis_intensities[1], axis_intensities[2]);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3320      	adds	r3, #32
 80034d2:	2100      	movs	r1, #0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fe fe77 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 80034da:	4603      	mov	r3, r0
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd f85a 	bl	8000598 <__aeabi_f2d>
 80034e4:	4604      	mov	r4, r0
 80034e6:	460d      	mov	r5, r1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3320      	adds	r3, #32
 80034ec:	2101      	movs	r1, #1
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fe fe6a 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 80034f4:	4603      	mov	r3, r0
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd f84d 	bl	8000598 <__aeabi_f2d>
 80034fe:	4680      	mov	r8, r0
 8003500:	4689      	mov	r9, r1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3320      	adds	r3, #32
 8003506:	2102      	movs	r1, #2
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe fe5d 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 800350e:	4603      	mov	r3, r0
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd f840 	bl	8000598 <__aeabi_f2d>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	f107 0010 	add.w	r0, r7, #16
 8003520:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003524:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003528:	e9cd 4500 	strd	r4, r5, [sp]
 800352c:	4a09      	ldr	r2, [pc, #36]	@ (8003554 <_ZN7LIS3MDL15log_data_to_gcsEv+0xa0>)
 800352e:	2180      	movs	r1, #128	@ 0x80
 8003530:	f01c faf2 	bl	801fb18 <sniprintf>
	}
 8003534:	f107 030c 	add.w	r3, r7, #12
 8003538:	4618      	mov	r0, r3
 800353a:	f7fd fd7c 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	USB_Log(string, SENSOR);
 800353e:	f107 0310 	add.w	r3, r7, #16
 8003542:	2103      	movs	r1, #3
 8003544:	4618      	mov	r0, r3
 8003546:	f000 f8bd 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
}
 800354a:	bf00      	nop
 800354c:	3790      	adds	r7, #144	@ 0x90
 800354e:	46bd      	mov	sp, r7
 8003550:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003554:	080220dc 	.word	0x080220dc

08003558 <_ZN7LIS3MDL20get_axis_intensitiesEv>:

std::array<float, 3> LIS3MDL::get_axis_intensities()
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08a      	sub	sp, #40	@ 0x28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6178      	str	r0, [r7, #20]
	np::lock_guard lock(mag_data_mutex);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	f107 0318 	add.w	r3, r7, #24
 8003568:	4611      	mov	r1, r2
 800356a:	4618      	mov	r0, r3
 800356c:	f7fd fd4e 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	return axis_intensities;
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	f107 031c 	add.w	r3, r7, #28
 8003576:	3220      	adds	r2, #32
 8003578:	ca07      	ldmia	r2, {r0, r1, r2}
 800357a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800357e:	f107 0318 	add.w	r3, r7, #24
 8003582:	4618      	mov	r0, r3
 8003584:	f7fd fd57 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	return axis_intensities;
 8003588:	69f9      	ldr	r1, [r7, #28]
 800358a:	6a3a      	ldr	r2, [r7, #32]
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	ee06 1a90 	vmov	s13, r1
 8003592:	ee07 2a10 	vmov	s14, r2
 8003596:	ee07 3a90 	vmov	s15, r3
}
 800359a:	eeb0 0a66 	vmov.f32	s0, s13
 800359e:	eef0 0a47 	vmov.f32	s1, s14
 80035a2:	eeb0 1a67 	vmov.f32	s2, s15
 80035a6:	3728      	adds	r7, #40	@ 0x28
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <_ZN7LIS3MDL13read_registerEhPht>:
 *
 *  Low-level register read / write
 *
 */
bool LIS3MDL::read_register(uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08a      	sub	sp, #40	@ 0x28
 80035b0:	af04      	add	r7, sp, #16
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	461a      	mov	r2, r3
 80035b8:	460b      	mov	r3, r1
 80035ba:	72fb      	strb	r3, [r7, #11]
 80035bc:	4613      	mov	r3, r2
 80035be:	813b      	strh	r3, [r7, #8]
	bool status = false;
 80035c0:	2300      	movs	r3, #0
 80035c2:	75fb      	strb	r3, [r7, #23]

	if (data_len > 1)
 80035c4:	893b      	ldrh	r3, [r7, #8]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d903      	bls.n	80035d2 <_ZN7LIS3MDL13read_registerEhPht+0x26>
	{
		// In order to read multiple bytes, it is necessary to assert the most significant bit of the address field
		reg_addr |= 0x80;
 80035ca:	7afb      	ldrb	r3, [r7, #11]
 80035cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80035d0:	72fb      	strb	r3, [r7, #11]
	}

	{
		np::lock_guard lock(i2c_mutex);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	f107 0310 	add.w	r3, r7, #16
 80035da:	4611      	mov	r1, r2
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fd fd15 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		status = (HAL_I2C_Mem_Read(&i2c_handle, (LIS3MDL_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, rx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	7a1b      	ldrb	r3, [r3, #8]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	b299      	uxth	r1, r3
 80035ee:	7afb      	ldrb	r3, [r7, #11]
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80035f6:	9302      	str	r3, [sp, #8]
 80035f8:	893b      	ldrh	r3, [r7, #8]
 80035fa:	9301      	str	r3, [sp, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	2301      	movs	r3, #1
 8003602:	f002 feb5 	bl	8006370 <HAL_I2C_Mem_Read>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	bf0c      	ite	eq
 800360c:	2301      	moveq	r3, #1
 800360e:	2300      	movne	r3, #0
 8003610:	75fb      	strb	r3, [r7, #23]
	}
 8003612:	f107 0310 	add.w	r3, r7, #16
 8003616:	4618      	mov	r0, r3
 8003618:	f7fd fd0d 	bl	8001036 <_ZN2np10lock_guardD1Ev>

	if (!status)
 800361c:	7dfb      	ldrb	r3, [r7, #23]
 800361e:	f083 0301 	eor.w	r3, r3, #1
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <_ZN7LIS3MDL13read_registerEhPht+0x84>
	{
		USB_Log("LIS3MDL register read failed.\n", ERR);
 8003628:	2102      	movs	r1, #2
 800362a:	4804      	ldr	r0, [pc, #16]	@ (800363c <_ZN7LIS3MDL13read_registerEhPht+0x90>)
 800362c:	f000 f84a 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 8003630:	7dfb      	ldrb	r3, [r7, #23]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	080220f4 	.word	0x080220f4

08003640 <_ZN7LIS3MDL14write_registerEhPht>:

bool LIS3MDL::write_register(uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08a      	sub	sp, #40	@ 0x28
 8003644:	af04      	add	r7, sp, #16
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	607a      	str	r2, [r7, #4]
 800364a:	461a      	mov	r2, r3
 800364c:	460b      	mov	r3, r1
 800364e:	72fb      	strb	r3, [r7, #11]
 8003650:	4613      	mov	r3, r2
 8003652:	813b      	strh	r3, [r7, #8]
	bool status = false;
 8003654:	2300      	movs	r3, #0
 8003656:	75fb      	strb	r3, [r7, #23]
	{
		np::lock_guard lock(i2c_mutex);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	f107 0310 	add.w	r3, r7, #16
 8003660:	4611      	mov	r1, r2
 8003662:	4618      	mov	r0, r3
 8003664:	f7fd fcd2 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		status = (HAL_I2C_Mem_Write(&i2c_handle, (LIS3MDL_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, tx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6818      	ldr	r0, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	7a1b      	ldrb	r3, [r3, #8]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	b299      	uxth	r1, r3
 8003674:	7afb      	ldrb	r3, [r7, #11]
 8003676:	b29a      	uxth	r2, r3
 8003678:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800367c:	9302      	str	r3, [sp, #8]
 800367e:	893b      	ldrh	r3, [r7, #8]
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	2301      	movs	r3, #1
 8003688:	f002 fd5e 	bl	8006148 <HAL_I2C_Mem_Write>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	bf0c      	ite	eq
 8003692:	2301      	moveq	r3, #1
 8003694:	2300      	movne	r3, #0
 8003696:	75fb      	strb	r3, [r7, #23]
	}
 8003698:	f107 0310 	add.w	r3, r7, #16
 800369c:	4618      	mov	r0, r3
 800369e:	f7fd fcca 	bl	8001036 <_ZN2np10lock_guardD1Ev>

	if (!status)
 80036a2:	7dfb      	ldrb	r3, [r7, #23]
 80036a4:	f083 0301 	eor.w	r3, r3, #1
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <_ZN7LIS3MDL14write_registerEhPht+0x76>
	{
		USB_Log("LIS3MDL register write failed.\n", ERR);
 80036ae:	2102      	movs	r1, #2
 80036b0:	4803      	ldr	r0, [pc, #12]	@ (80036c0 <_ZN7LIS3MDL14write_registerEhPht+0x80>)
 80036b2:	f000 f807 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	08022114 	.word	0x08022114

080036c4 <_Z7USB_LogPKc9Log_Level>:
#include "usbd_cdc_if.h"
#include "usbd_def.h"
#include <cstdio>

void USB_Log(const char* string, Log_Level level)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	ed2d 8b02 	vpush	{d8}
 80036ca:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80036ce:	af04      	add	r7, sp, #16
 80036d0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80036d4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80036d8:	6018      	str	r0, [r3, #0]
 80036da:	460a      	mov	r2, r1
 80036dc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80036e0:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80036e4:	701a      	strb	r2, [r3, #0]
	char str[512];
	float seconds = (float)osKernelGetTickCount() / (float)osKernelGetTickFreq();
 80036e6:	f00b fad1 	bl	800ec8c <osKernelGetTickCount>
 80036ea:	ee07 0a90 	vmov	s15, r0
 80036ee:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80036f2:	f00b fae0 	bl	800ecb6 <osKernelGetTickFreq>
 80036f6:	ee07 0a90 	vmov	s15, r0
 80036fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036fe:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003702:	edc7 7a84 	vstr	s15, [r7, #528]	@ 0x210

	switch (level) {
 8003706:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800370a:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b05      	cmp	r3, #5
 8003712:	f200 8081 	bhi.w	8003818 <_Z7USB_LogPKc9Log_Level+0x154>
 8003716:	a201      	add	r2, pc, #4	@ (adr r2, 800371c <_Z7USB_LogPKc9Log_Level+0x58>)
 8003718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371c:	08003735 	.word	0x08003735
 8003720:	08003761 	.word	0x08003761
 8003724:	0800378d 	.word	0x0800378d
 8003728:	080037b9 	.word	0x080037b9
 800372c:	080037e5 	.word	0x080037e5
 8003730:	080037ff 	.word	0x080037ff
		case INFO:
			snprintf(str, 512, "LOG %.2f INFO %s\n", seconds, string);
 8003734:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8003738:	f7fc ff2e 	bl	8000598 <__aeabi_f2d>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	f107 0010 	add.w	r0, r7, #16
 8003744:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8003748:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 800374c:	6809      	ldr	r1, [r1, #0]
 800374e:	9102      	str	r1, [sp, #8]
 8003750:	e9cd 2300 	strd	r2, r3, [sp]
 8003754:	4a58      	ldr	r2, [pc, #352]	@ (80038b8 <_Z7USB_LogPKc9Log_Level+0x1f4>)
 8003756:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800375a:	f01c f9dd 	bl	801fb18 <sniprintf>
			break;
 800375e:	e071      	b.n	8003844 <_Z7USB_LogPKc9Log_Level+0x180>
		case CRITICAL:
			snprintf(str, 512, "LOG %.2f CRIT %s\n", seconds, string);
 8003760:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8003764:	f7fc ff18 	bl	8000598 <__aeabi_f2d>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	f107 0010 	add.w	r0, r7, #16
 8003770:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8003774:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 8003778:	6809      	ldr	r1, [r1, #0]
 800377a:	9102      	str	r1, [sp, #8]
 800377c:	e9cd 2300 	strd	r2, r3, [sp]
 8003780:	4a4e      	ldr	r2, [pc, #312]	@ (80038bc <_Z7USB_LogPKc9Log_Level+0x1f8>)
 8003782:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003786:	f01c f9c7 	bl	801fb18 <sniprintf>
			break;
 800378a:	e05b      	b.n	8003844 <_Z7USB_LogPKc9Log_Level+0x180>
		case ERR:
			snprintf(str, 512, "LOG %.2f ERR %s\n", seconds, string);
 800378c:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8003790:	f7fc ff02 	bl	8000598 <__aeabi_f2d>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	f107 0010 	add.w	r0, r7, #16
 800379c:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 80037a0:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 80037a4:	6809      	ldr	r1, [r1, #0]
 80037a6:	9102      	str	r1, [sp, #8]
 80037a8:	e9cd 2300 	strd	r2, r3, [sp]
 80037ac:	4a44      	ldr	r2, [pc, #272]	@ (80038c0 <_Z7USB_LogPKc9Log_Level+0x1fc>)
 80037ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80037b2:	f01c f9b1 	bl	801fb18 <sniprintf>
			break;
 80037b6:	e045      	b.n	8003844 <_Z7USB_LogPKc9Log_Level+0x180>
		case SENSOR:
			snprintf(str, 512, "SENSOR %.2f %s\n", seconds, string);
 80037b8:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80037bc:	f7fc feec 	bl	8000598 <__aeabi_f2d>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	f107 0010 	add.w	r0, r7, #16
 80037c8:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 80037cc:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 80037d0:	6809      	ldr	r1, [r1, #0]
 80037d2:	9102      	str	r1, [sp, #8]
 80037d4:	e9cd 2300 	strd	r2, r3, [sp]
 80037d8:	4a3a      	ldr	r2, [pc, #232]	@ (80038c4 <_Z7USB_LogPKc9Log_Level+0x200>)
 80037da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80037de:	f01c f99b 	bl	801fb18 <sniprintf>
			break;
 80037e2:	e02f      	b.n	8003844 <_Z7USB_LogPKc9Log_Level+0x180>
		case STATE:
			snprintf(str, 512, "STATE %s\n", string);
 80037e4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80037e8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80037ec:	f107 0010 	add.w	r0, r7, #16
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a35      	ldr	r2, [pc, #212]	@ (80038c8 <_Z7USB_LogPKc9Log_Level+0x204>)
 80037f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80037f8:	f01c f98e 	bl	801fb18 <sniprintf>
			break;
 80037fc:	e022      	b.n	8003844 <_Z7USB_LogPKc9Log_Level+0x180>
		case RAW:
			snprintf(str, 512, "%s\n", string);
 80037fe:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003802:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003806:	f107 0010 	add.w	r0, r7, #16
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a2f      	ldr	r2, [pc, #188]	@ (80038cc <_Z7USB_LogPKc9Log_Level+0x208>)
 800380e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003812:	f01c f981 	bl	801fb18 <sniprintf>
			break;
 8003816:	e015      	b.n	8003844 <_Z7USB_LogPKc9Log_Level+0x180>
		default:
			snprintf(str, 512, "LOG %.2f ERR INVALID LOG FORMATTING: %s\n", seconds, string);
 8003818:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 800381c:	f7fc febc 	bl	8000598 <__aeabi_f2d>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	f107 0010 	add.w	r0, r7, #16
 8003828:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 800382c:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 8003830:	6809      	ldr	r1, [r1, #0]
 8003832:	9102      	str	r1, [sp, #8]
 8003834:	e9cd 2300 	strd	r2, r3, [sp]
 8003838:	4a25      	ldr	r2, [pc, #148]	@ (80038d0 <_Z7USB_LogPKc9Log_Level+0x20c>)
 800383a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800383e:	f01c f96b 	bl	801fb18 <sniprintf>
			break;
 8003842:	bf00      	nop
	}


	np::lock_guard lock(usbMutexHandle);
 8003844:	f107 030c 	add.w	r3, r7, #12
 8003848:	4922      	ldr	r1, [pc, #136]	@ (80038d4 <_Z7USB_LogPKc9Log_Level+0x210>)
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd fbde 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	uint8_t status = CDC_Transmit_FS((uint8_t*)str, strlen(str));
 8003850:	f107 0310 	add.w	r3, r7, #16
 8003854:	4618      	mov	r0, r3
 8003856:	f7fc fd33 	bl	80002c0 <strlen>
 800385a:	4603      	mov	r3, r0
 800385c:	b29a      	uxth	r2, r3
 800385e:	f107 0310 	add.w	r3, r7, #16
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f00f f81d 	bl	80128a4 <CDC_Transmit_FS>
 800386a:	4603      	mov	r3, r0
 800386c:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	while (status == USBD_BUSY)
 8003870:	e012      	b.n	8003898 <_Z7USB_LogPKc9Log_Level+0x1d4>
	{
		osDelay(1);
 8003872:	2001      	movs	r0, #1
 8003874:	f00b fabb 	bl	800edee <osDelay>
		status = CDC_Transmit_FS((uint8_t*)str, strlen(str));
 8003878:	f107 0310 	add.w	r3, r7, #16
 800387c:	4618      	mov	r0, r3
 800387e:	f7fc fd1f 	bl	80002c0 <strlen>
 8003882:	4603      	mov	r3, r0
 8003884:	b29a      	uxth	r2, r3
 8003886:	f107 0310 	add.w	r3, r7, #16
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f00f f809 	bl	80128a4 <CDC_Transmit_FS>
 8003892:	4603      	mov	r3, r0
 8003894:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	while (status == USBD_BUSY)
 8003898:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800389c:	2b01      	cmp	r3, #1
 800389e:	d0e8      	beq.n	8003872 <_Z7USB_LogPKc9Log_Level+0x1ae>
	np::lock_guard lock(usbMutexHandle);
 80038a0:	f107 030c 	add.w	r3, r7, #12
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fd fbc6 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	}
}
 80038aa:	bf00      	nop
 80038ac:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80038b0:	46bd      	mov	sp, r7
 80038b2:	ecbd 8b02 	vpop	{d8}
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	08022134 	.word	0x08022134
 80038bc:	08022148 	.word	0x08022148
 80038c0:	0802215c 	.word	0x0802215c
 80038c4:	08022170 	.word	0x08022170
 80038c8:	08022180 	.word	0x08022180
 80038cc:	0802218c 	.word	0x0802218c
 80038d0:	08022190 	.word	0x08022190
 80038d4:	20004acc 	.word	0x20004acc

080038d8 <sensor_fusion_thread>:

/*
 * THREAD
 */
void sensor_fusion_thread()
{
 80038d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038dc:	ed2d 8b02 	vpush	{d8}
 80038e0:	b0a0      	sub	sp, #128	@ 0x80
 80038e2:	af06      	add	r7, sp, #24
	osDelay(400);
 80038e4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80038e8:	f00b fa81 	bl	800edee <osDelay>
	USB_Log("--- SENSOR FUSION THREAD STARTING ---", CRITICAL);
 80038ec:	2101      	movs	r1, #1
 80038ee:	4897      	ldr	r0, [pc, #604]	@ (8003b4c <sensor_fusion_thread+0x274>)
 80038f0:	f7ff fee8 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 80038f4:	2064      	movs	r0, #100	@ 0x64
 80038f6:	f00b fa7a 	bl	800edee <osDelay>

	/*
	 * Initialize sensors
	 */
	bool imu_init = imu.init();
 80038fa:	4895      	ldr	r0, [pc, #596]	@ (8003b50 <sensor_fusion_thread+0x278>)
 80038fc:	f7fd fc12 	bl	8001124 <_ZN6BMI0884initEv>
 8003900:	4603      	mov	r3, r0
 8003902:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	bool baro_init = barometer.init();
 8003906:	4893      	ldr	r0, [pc, #588]	@ (8003b54 <sensor_fusion_thread+0x27c>)
 8003908:	f7fe fe12 	bl	8002530 <_ZN6BMP3884initEv>
 800390c:	4603      	mov	r3, r0
 800390e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	bool mag_init = magnetometer.init();
 8003912:	4891      	ldr	r0, [pc, #580]	@ (8003b58 <sensor_fusion_thread+0x280>)
 8003914:	f7ff fc1c 	bl	8003150 <_ZN7LIS3MDL4initEv>
 8003918:	4603      	mov	r3, r0
 800391a:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	if (imu_init && baro_init && mag_init)
 800391e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 82bf 	beq.w	8003ea6 <sensor_fusion_thread+0x5ce>
 8003928:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 82ba 	beq.w	8003ea6 <sensor_fusion_thread+0x5ce>
 8003932:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 82b5 	beq.w	8003ea6 <sensor_fusion_thread+0x5ce>
	{
		USB_Log("All sensors initialized successfully.", CRITICAL);
 800393c:	2101      	movs	r1, #1
 800393e:	4887      	ldr	r0, [pc, #540]	@ (8003b5c <sensor_fusion_thread+0x284>)
 8003940:	f7ff fec0 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>

		/*
		 * Initialize MotionFX Sensor Fusion library
		 */
		if (STATE_SIZE < MotionFX_GetStateSize())
 8003944:	f018 fb2a 	bl	801bf9c <MotionFX_GetStateSize>
 8003948:	4603      	mov	r3, r0
 800394a:	f5b3 6f18 	cmp.w	r3, #2432	@ 0x980
 800394e:	bf8c      	ite	hi
 8003950:	2301      	movhi	r3, #1
 8003952:	2300      	movls	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <sensor_fusion_thread+0x96>
		{
			USB_Log("MotionFX algorithm state not enough memory", ERR);
 800395a:	2102      	movs	r1, #2
 800395c:	4880      	ldr	r0, [pc, #512]	@ (8003b60 <sensor_fusion_thread+0x288>)
 800395e:	f7ff feb1 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
			osDelay(500);
 8003962:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003966:	f00b fa42 	bl	800edee <osDelay>
			Error_Handler();
 800396a:	f001 fa6d 	bl	8004e48 <Error_Handler>
		}
		MotionFX_initialize((MFXState_t *)mfxstate);
 800396e:	487d      	ldr	r0, [pc, #500]	@ (8003b64 <sensor_fusion_thread+0x28c>)
 8003970:	f018 fb18 	bl	801bfa4 <MotionFX_initialize>

		// Turn library knobs...
		MotionFX_getKnobs(mfxstate, &iKnobs);
 8003974:	497c      	ldr	r1, [pc, #496]	@ (8003b68 <sensor_fusion_thread+0x290>)
 8003976:	487b      	ldr	r0, [pc, #492]	@ (8003b64 <sensor_fusion_thread+0x28c>)
 8003978:	f018 fc18 	bl	801c1ac <MotionFX_getKnobs>

		iKnobs.acc_orientation[0] = 'w';	// positive orientation to the
 800397c:	4b7a      	ldr	r3, [pc, #488]	@ (8003b68 <sensor_fusion_thread+0x290>)
 800397e:	2277      	movs	r2, #119	@ 0x77
 8003980:	775a      	strb	r2, [r3, #29]
		iKnobs.acc_orientation[1] = 's';	// 	   board's reference frame
 8003982:	4b79      	ldr	r3, [pc, #484]	@ (8003b68 <sensor_fusion_thread+0x290>)
 8003984:	2273      	movs	r2, #115	@ 0x73
 8003986:	779a      	strb	r2, [r3, #30]
		iKnobs.acc_orientation[2] = 'u';
 8003988:	4b77      	ldr	r3, [pc, #476]	@ (8003b68 <sensor_fusion_thread+0x290>)
 800398a:	2275      	movs	r2, #117	@ 0x75
 800398c:	77da      	strb	r2, [r3, #31]
		iKnobs.gyro_orientation[0] = 'w';
 800398e:	4b76      	ldr	r3, [pc, #472]	@ (8003b68 <sensor_fusion_thread+0x290>)
 8003990:	2277      	movs	r2, #119	@ 0x77
 8003992:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		iKnobs.gyro_orientation[1] = 's';
 8003996:	4b74      	ldr	r3, [pc, #464]	@ (8003b68 <sensor_fusion_thread+0x290>)
 8003998:	2273      	movs	r2, #115	@ 0x73
 800399a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		iKnobs.gyro_orientation[2] = 'u';
 800399e:	4b72      	ldr	r3, [pc, #456]	@ (8003b68 <sensor_fusion_thread+0x290>)
 80039a0:	2275      	movs	r2, #117	@ 0x75
 80039a2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		iKnobs.mag_orientation[0] = 'n';
 80039a6:	4b70      	ldr	r3, [pc, #448]	@ (8003b68 <sensor_fusion_thread+0x290>)
 80039a8:	226e      	movs	r2, #110	@ 0x6e
 80039aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		iKnobs.mag_orientation[1] = 'w';
 80039ae:	4b6e      	ldr	r3, [pc, #440]	@ (8003b68 <sensor_fusion_thread+0x290>)
 80039b0:	2277      	movs	r2, #119	@ 0x77
 80039b2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		iKnobs.mag_orientation[2] = 'u';
 80039b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003b68 <sensor_fusion_thread+0x290>)
 80039b8:	2275      	movs	r2, #117	@ 0x75
 80039ba:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

		iKnobs.gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 80039be:	4b6a      	ldr	r3, [pc, #424]	@ (8003b68 <sensor_fusion_thread+0x290>)
 80039c0:	4a6a      	ldr	r2, [pc, #424]	@ (8003b6c <sensor_fusion_thread+0x294>)
 80039c2:	615a      	str	r2, [r3, #20]
		iKnobs.gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 80039c4:	4b68      	ldr	r3, [pc, #416]	@ (8003b68 <sensor_fusion_thread+0x290>)
 80039c6:	4a6a      	ldr	r2, [pc, #424]	@ (8003b70 <sensor_fusion_thread+0x298>)
 80039c8:	619a      	str	r2, [r3, #24]
		iKnobs.gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 80039ca:	4b67      	ldr	r3, [pc, #412]	@ (8003b68 <sensor_fusion_thread+0x290>)
 80039cc:	4a69      	ldr	r2, [pc, #420]	@ (8003b74 <sensor_fusion_thread+0x29c>)
 80039ce:	611a      	str	r2, [r3, #16]

		iKnobs.output_type = MFX_ENGINE_OUTPUT_NED;	// NED output orientation
 80039d0:	4b65      	ldr	r3, [pc, #404]	@ (8003b68 <sensor_fusion_thread+0x290>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		iKnobs.LMode = 1;							// static learning
 80039d8:	4b63      	ldr	r3, [pc, #396]	@ (8003b68 <sensor_fusion_thread+0x290>)
 80039da:	2201      	movs	r2, #1
 80039dc:	731a      	strb	r2, [r3, #12]
		iKnobs.modx = 1;							// decimation of MotionFX_update call frequency
 80039de:	4b62      	ldr	r3, [pc, #392]	@ (8003b68 <sensor_fusion_thread+0x290>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	771a      	strb	r2, [r3, #28]

		MotionFX_setKnobs(mfxstate, &iKnobs);
 80039e4:	4960      	ldr	r1, [pc, #384]	@ (8003b68 <sensor_fusion_thread+0x290>)
 80039e6:	485f      	ldr	r0, [pc, #380]	@ (8003b64 <sensor_fusion_thread+0x28c>)
 80039e8:	f018 fb94 	bl	801c114 <MotionFX_setKnobs>

		// Enable 9-axis sensor fusion
		MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 80039ec:	2100      	movs	r1, #0
 80039ee:	485d      	ldr	r0, [pc, #372]	@ (8003b64 <sensor_fusion_thread+0x28c>)
 80039f0:	f018 fc1a 	bl	801c228 <MotionFX_enable_6X>
		MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 80039f4:	2101      	movs	r1, #1
 80039f6:	485b      	ldr	r0, [pc, #364]	@ (8003b64 <sensor_fusion_thread+0x28c>)
 80039f8:	f018 fc36 	bl	801c268 <MotionFX_enable_9X>

		USB_Log("Starting sensor fusion.", CRITICAL);
 80039fc:	2101      	movs	r1, #1
 80039fe:	485e      	ldr	r0, [pc, #376]	@ (8003b78 <sensor_fusion_thread+0x2a0>)
 8003a00:	f7ff fe60 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
		osDelay(10);
 8003a04:	200a      	movs	r0, #10
 8003a06:	f00b f9f2 	bl	800edee <osDelay>

		if (calibrate_mag)
 8003a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8003b7c <sensor_fusion_thread+0x2a4>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00c      	beq.n	8003a2c <sensor_fusion_thread+0x154>
		{
			mag_calibrated = false;
 8003a12:	4b5b      	ldr	r3, [pc, #364]	@ (8003b80 <sensor_fusion_thread+0x2a8>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	701a      	strb	r2, [r3, #0]
			USB_Log("Please, slowly rotate the device in a figure 8 pattern in space to calibrate the magnetometer...", INFO);
 8003a18:	2100      	movs	r1, #0
 8003a1a:	485a      	ldr	r0, [pc, #360]	@ (8003b84 <sensor_fusion_thread+0x2ac>)
 8003a1c:	f7ff fe52 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
			MotionFX_MagCal_init(mag_update_period_ms, 1);
 8003a20:	4b59      	ldr	r3, [pc, #356]	@ (8003b88 <sensor_fusion_thread+0x2b0>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2101      	movs	r1, #1
 8003a26:	4618      	mov	r0, r3
 8003a28:	f018 fd4a 	bl	801c4c0 <MotionFX_MagCal_init>
		}

		while (1)
		{
			if (!mag_calibrated)
 8003a2c:	4b54      	ldr	r3, [pc, #336]	@ (8003b80 <sensor_fusion_thread+0x2a8>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	f083 0301 	eor.w	r3, r3, #1
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 80b8 	beq.w	8003bac <sensor_fusion_thread+0x2d4>
			{
				osDelay(mag_update_period_ms);
 8003a3c:	4b52      	ldr	r3, [pc, #328]	@ (8003b88 <sensor_fusion_thread+0x2b0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f00b f9d4 	bl	800edee <osDelay>
				/*
				 * Perform magnetometer calibration
				 */

				// Get magnetometer data
				mag_intensities = magnetometer.get_axis_intensities();
 8003a46:	4844      	ldr	r0, [pc, #272]	@ (8003b58 <sensor_fusion_thread+0x280>)
 8003a48:	f7ff fd86 	bl	8003558 <_ZN7LIS3MDL20get_axis_intensitiesEv>
 8003a4c:	eef0 6a40 	vmov.f32	s13, s0
 8003a50:	eeb0 7a60 	vmov.f32	s14, s1
 8003a54:	eef0 7a41 	vmov.f32	s15, s2
 8003a58:	4b4c      	ldr	r3, [pc, #304]	@ (8003b8c <sensor_fusion_thread+0x2b4>)
 8003a5a:	edc3 6a00 	vstr	s13, [r3]
 8003a5e:	ed83 7a01 	vstr	s14, [r3, #4]
 8003a62:	edc3 7a02 	vstr	s15, [r3, #8]
				mag_data_in.mag[0] = mag_intensities[0] * GAUSS_TO_uTESLA / 50;		// in uT/50
 8003a66:	2100      	movs	r1, #0
 8003a68:	4848      	ldr	r0, [pc, #288]	@ (8003b8c <sensor_fusion_thread+0x2b4>)
 8003a6a:	f7fe fbad 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	edd3 7a00 	vldr	s15, [r3]
 8003a74:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8003b90 <sensor_fusion_thread+0x2b8>
 8003a78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a7c:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8003b94 <sensor_fusion_thread+0x2bc>
 8003a80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a84:	4b44      	ldr	r3, [pc, #272]	@ (8003b98 <sensor_fusion_thread+0x2c0>)
 8003a86:	edc3 7a00 	vstr	s15, [r3]
				mag_data_in.mag[1] = mag_intensities[1] * GAUSS_TO_uTESLA / 50;
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	483f      	ldr	r0, [pc, #252]	@ (8003b8c <sensor_fusion_thread+0x2b4>)
 8003a8e:	f7fe fb9b 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8003a92:	4603      	mov	r3, r0
 8003a94:	edd3 7a00 	vldr	s15, [r3]
 8003a98:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8003b90 <sensor_fusion_thread+0x2b8>
 8003a9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003aa0:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8003b94 <sensor_fusion_thread+0x2bc>
 8003aa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8003b98 <sensor_fusion_thread+0x2c0>)
 8003aaa:	edc3 7a01 	vstr	s15, [r3, #4]
				mag_data_in.mag[2] = mag_intensities[2] * GAUSS_TO_uTESLA / 50;
 8003aae:	2102      	movs	r1, #2
 8003ab0:	4836      	ldr	r0, [pc, #216]	@ (8003b8c <sensor_fusion_thread+0x2b4>)
 8003ab2:	f7fe fb89 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	edd3 7a00 	vldr	s15, [r3]
 8003abc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8003b90 <sensor_fusion_thread+0x2b8>
 8003ac0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ac4:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8003b94 <sensor_fusion_thread+0x2bc>
 8003ac8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003acc:	4b32      	ldr	r3, [pc, #200]	@ (8003b98 <sensor_fusion_thread+0x2c0>)
 8003ace:	edc3 7a02 	vstr	s15, [r3, #8]

				// Apply timestamp to data
				mag_data_in.time_stamp = mag_timestamp;	// in ms
 8003ad2:	4b32      	ldr	r3, [pc, #200]	@ (8003b9c <sensor_fusion_thread+0x2c4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	4b2f      	ldr	r3, [pc, #188]	@ (8003b98 <sensor_fusion_thread+0x2c0>)
 8003ada:	60da      	str	r2, [r3, #12]
				mag_timestamp += mag_update_period_ms;
 8003adc:	4b2f      	ldr	r3, [pc, #188]	@ (8003b9c <sensor_fusion_thread+0x2c4>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4b29      	ldr	r3, [pc, #164]	@ (8003b88 <sensor_fusion_thread+0x2b0>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	4a2d      	ldr	r2, [pc, #180]	@ (8003b9c <sensor_fusion_thread+0x2c4>)
 8003ae8:	6013      	str	r3, [r2, #0]

				// Run calibration
				MotionFX_MagCal_run(&mag_data_in);
 8003aea:	482b      	ldr	r0, [pc, #172]	@ (8003b98 <sensor_fusion_thread+0x2c0>)
 8003aec:	f018 fd78 	bl	801c5e0 <MotionFX_MagCal_run>
				MotionFX_MagCal_getParams(&mag_data_out);
 8003af0:	482b      	ldr	r0, [pc, #172]	@ (8003ba0 <sensor_fusion_thread+0x2c8>)
 8003af2:	f018 ffa7 	bl	801ca44 <MotionFX_MagCal_getParams>

				if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 8003af6:	4b2a      	ldr	r3, [pc, #168]	@ (8003ba0 <sensor_fusion_thread+0x2c8>)
 8003af8:	7b1b      	ldrb	r3, [r3, #12]
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d196      	bne.n	8003a2c <sensor_fusion_thread+0x154>
				{
					hard_iron[0] = mag_data_out.hi_bias[0];
 8003afe:	4b28      	ldr	r3, [pc, #160]	@ (8003ba0 <sensor_fusion_thread+0x2c8>)
 8003b00:	681c      	ldr	r4, [r3, #0]
 8003b02:	2100      	movs	r1, #0
 8003b04:	4827      	ldr	r0, [pc, #156]	@ (8003ba4 <sensor_fusion_thread+0x2cc>)
 8003b06:	f7fe fb5f 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	601c      	str	r4, [r3, #0]
					hard_iron[1] = mag_data_out.hi_bias[1];
 8003b0e:	4b24      	ldr	r3, [pc, #144]	@ (8003ba0 <sensor_fusion_thread+0x2c8>)
 8003b10:	685c      	ldr	r4, [r3, #4]
 8003b12:	2101      	movs	r1, #1
 8003b14:	4823      	ldr	r0, [pc, #140]	@ (8003ba4 <sensor_fusion_thread+0x2cc>)
 8003b16:	f7fe fb57 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	601c      	str	r4, [r3, #0]
					hard_iron[2] = mag_data_out.hi_bias[2];
 8003b1e:	4b20      	ldr	r3, [pc, #128]	@ (8003ba0 <sensor_fusion_thread+0x2c8>)
 8003b20:	689c      	ldr	r4, [r3, #8]
 8003b22:	2102      	movs	r1, #2
 8003b24:	481f      	ldr	r0, [pc, #124]	@ (8003ba4 <sensor_fusion_thread+0x2cc>)
 8003b26:	f7fe fb4f 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	601c      	str	r4, [r3, #0]

					// Disable magnetometer calibration
					mag_calibrated = true;
 8003b2e:	4b14      	ldr	r3, [pc, #80]	@ (8003b80 <sensor_fusion_thread+0x2a8>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	701a      	strb	r2, [r3, #0]
					USB_Log("Magnetomer calibration complete.", INFO);
 8003b34:	2100      	movs	r1, #0
 8003b36:	481c      	ldr	r0, [pc, #112]	@ (8003ba8 <sensor_fusion_thread+0x2d0>)
 8003b38:	f7ff fdc4 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>
					MotionFX_MagCal_init(mag_update_period_ms, 0);
 8003b3c:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <sensor_fusion_thread+0x2b0>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2100      	movs	r1, #0
 8003b42:	4618      	mov	r0, r3
 8003b44:	f018 fcbc 	bl	801c4c0 <MotionFX_MagCal_init>
 8003b48:	e770      	b.n	8003a2c <sensor_fusion_thread+0x154>
 8003b4a:	bf00      	nop
 8003b4c:	080221bc 	.word	0x080221bc
 8003b50:	20000be8 	.word	0x20000be8
 8003b54:	20000c44 	.word	0x20000c44
 8003b58:	20000c9c 	.word	0x20000c9c
 8003b5c:	080221e4 	.word	0x080221e4
 8003b60:	0802220c 	.word	0x0802220c
 8003b64:	20000d28 	.word	0x20000d28
 8003b68:	200016a8 	.word	0x200016a8
 8003b6c:	3ac88a48 	.word	0x3ac88a48
 8003b70:	3b83126f 	.word	0x3b83126f
 8003b74:	3b449ba6 	.word	0x3b449ba6
 8003b78:	08022238 	.word	0x08022238
 8003b7c:	20000004 	.word	0x20000004
 8003b80:	20000005 	.word	0x20000005
 8003b84:	08022250 	.word	0x08022250
 8003b88:	20000008 	.word	0x20000008
 8003b8c:	20000cec 	.word	0x20000cec
 8003b90:	42c80000 	.word	0x42c80000
 8003b94:	42480000 	.word	0x42480000
 8003b98:	20000cfc 	.word	0x20000cfc
 8003b9c:	20000cf8 	.word	0x20000cf8
 8003ba0:	20000d0c 	.word	0x20000d0c
 8003ba4:	20000d1c 	.word	0x20000d1c
 8003ba8:	080222b4 	.word	0x080222b4
				}
			}
			else
			{
				osDelay(4);		// ~250 Hz update
 8003bac:	2004      	movs	r0, #4
 8003bae:	f00b f91e 	bl	800edee <osDelay>
				/*
				 * Run Sensor Fusion algorithm
				 */

				// Get sensor data
				linear_accelerations = imu.get_linear_accelerations();
 8003bb2:	48c7      	ldr	r0, [pc, #796]	@ (8003ed0 <sensor_fusion_thread+0x5f8>)
 8003bb4:	f7fd ff5e 	bl	8001a74 <_ZN6BMI08824get_linear_accelerationsEv>
 8003bb8:	eef0 6a40 	vmov.f32	s13, s0
 8003bbc:	eeb0 7a60 	vmov.f32	s14, s1
 8003bc0:	eef0 7a41 	vmov.f32	s15, s2
 8003bc4:	4bc3      	ldr	r3, [pc, #780]	@ (8003ed4 <sensor_fusion_thread+0x5fc>)
 8003bc6:	edc3 6a00 	vstr	s13, [r3]
 8003bca:	ed83 7a01 	vstr	s14, [r3, #4]
 8003bce:	edc3 7a02 	vstr	s15, [r3, #8]
				angular_velocities = imu.get_angular_velocities();
 8003bd2:	48bf      	ldr	r0, [pc, #764]	@ (8003ed0 <sensor_fusion_thread+0x5f8>)
 8003bd4:	f7fd ff78 	bl	8001ac8 <_ZN6BMI08822get_angular_velocitiesEv>
 8003bd8:	eef0 6a40 	vmov.f32	s13, s0
 8003bdc:	eeb0 7a60 	vmov.f32	s14, s1
 8003be0:	eef0 7a41 	vmov.f32	s15, s2
 8003be4:	4bbc      	ldr	r3, [pc, #752]	@ (8003ed8 <sensor_fusion_thread+0x600>)
 8003be6:	edc3 6a00 	vstr	s13, [r3]
 8003bea:	ed83 7a01 	vstr	s14, [r3, #4]
 8003bee:	edc3 7a02 	vstr	s15, [r3, #8]
				mag_intensities = magnetometer.get_axis_intensities();
 8003bf2:	48ba      	ldr	r0, [pc, #744]	@ (8003edc <sensor_fusion_thread+0x604>)
 8003bf4:	f7ff fcb0 	bl	8003558 <_ZN7LIS3MDL20get_axis_intensitiesEv>
 8003bf8:	eef0 6a40 	vmov.f32	s13, s0
 8003bfc:	eeb0 7a60 	vmov.f32	s14, s1
 8003c00:	eef0 7a41 	vmov.f32	s15, s2
 8003c04:	4bb6      	ldr	r3, [pc, #728]	@ (8003ee0 <sensor_fusion_thread+0x608>)
 8003c06:	edc3 6a00 	vstr	s13, [r3]
 8003c0a:	ed83 7a01 	vstr	s14, [r3, #4]
 8003c0e:	edc3 7a02 	vstr	s15, [r3, #8]

				data_in.acc[0] = linear_accelerations[0] * MS2_TO_G;			// in g
 8003c12:	2100      	movs	r1, #0
 8003c14:	48af      	ldr	r0, [pc, #700]	@ (8003ed4 <sensor_fusion_thread+0x5fc>)
 8003c16:	f7fe fad7 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fc fcba 	bl	8000598 <__aeabi_f2d>
 8003c24:	a3a6      	add	r3, pc, #664	@ (adr r3, 8003ec0 <sensor_fusion_thread+0x5e8>)
 8003c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2a:	f7fc fe37 	bl	800089c <__aeabi_ddiv>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4610      	mov	r0, r2
 8003c34:	4619      	mov	r1, r3
 8003c36:	f7fc ffdf 	bl	8000bf8 <__aeabi_d2f>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4aa9      	ldr	r2, [pc, #676]	@ (8003ee4 <sensor_fusion_thread+0x60c>)
 8003c3e:	60d3      	str	r3, [r2, #12]
				data_in.acc[1] = linear_accelerations[1] * MS2_TO_G;
 8003c40:	2101      	movs	r1, #1
 8003c42:	48a4      	ldr	r0, [pc, #656]	@ (8003ed4 <sensor_fusion_thread+0x5fc>)
 8003c44:	f7fe fac0 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fc fca3 	bl	8000598 <__aeabi_f2d>
 8003c52:	a39b      	add	r3, pc, #620	@ (adr r3, 8003ec0 <sensor_fusion_thread+0x5e8>)
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	f7fc fe20 	bl	800089c <__aeabi_ddiv>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	f7fc ffc8 	bl	8000bf8 <__aeabi_d2f>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	4a9e      	ldr	r2, [pc, #632]	@ (8003ee4 <sensor_fusion_thread+0x60c>)
 8003c6c:	6113      	str	r3, [r2, #16]
				data_in.acc[2] = linear_accelerations[2] * MS2_TO_G;
 8003c6e:	2102      	movs	r1, #2
 8003c70:	4898      	ldr	r0, [pc, #608]	@ (8003ed4 <sensor_fusion_thread+0x5fc>)
 8003c72:	f7fe faa9 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8003c76:	4603      	mov	r3, r0
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fc fc8c 	bl	8000598 <__aeabi_f2d>
 8003c80:	a38f      	add	r3, pc, #572	@ (adr r3, 8003ec0 <sensor_fusion_thread+0x5e8>)
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	f7fc fe09 	bl	800089c <__aeabi_ddiv>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4610      	mov	r0, r2
 8003c90:	4619      	mov	r1, r3
 8003c92:	f7fc ffb1 	bl	8000bf8 <__aeabi_d2f>
 8003c96:	4603      	mov	r3, r0
 8003c98:	4a92      	ldr	r2, [pc, #584]	@ (8003ee4 <sensor_fusion_thread+0x60c>)
 8003c9a:	6153      	str	r3, [r2, #20]
				data_in.gyro[0] = angular_velocities[0] * RADIANS_TO_DEGREES;	// in dps
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	488e      	ldr	r0, [pc, #568]	@ (8003ed8 <sensor_fusion_thread+0x600>)
 8003ca0:	f7fe fa92 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	edd3 7a00 	vldr	s15, [r3]
 8003caa:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8003ee8 <sensor_fusion_thread+0x610>
 8003cae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cb2:	ee17 0a90 	vmov	r0, s15
 8003cb6:	f7fc fc6f 	bl	8000598 <__aeabi_f2d>
 8003cba:	a383      	add	r3, pc, #524	@ (adr r3, 8003ec8 <sensor_fusion_thread+0x5f0>)
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	f7fc fdec 	bl	800089c <__aeabi_ddiv>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	f7fc ff94 	bl	8000bf8 <__aeabi_d2f>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	4a84      	ldr	r2, [pc, #528]	@ (8003ee4 <sensor_fusion_thread+0x60c>)
 8003cd4:	6193      	str	r3, [r2, #24]
				data_in.gyro[1] = angular_velocities[1] * RADIANS_TO_DEGREES;
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	487f      	ldr	r0, [pc, #508]	@ (8003ed8 <sensor_fusion_thread+0x600>)
 8003cda:	f7fe fa75 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	edd3 7a00 	vldr	s15, [r3]
 8003ce4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8003ee8 <sensor_fusion_thread+0x610>
 8003ce8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cec:	ee17 0a90 	vmov	r0, s15
 8003cf0:	f7fc fc52 	bl	8000598 <__aeabi_f2d>
 8003cf4:	a374      	add	r3, pc, #464	@ (adr r3, 8003ec8 <sensor_fusion_thread+0x5f0>)
 8003cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfa:	f7fc fdcf 	bl	800089c <__aeabi_ddiv>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4610      	mov	r0, r2
 8003d04:	4619      	mov	r1, r3
 8003d06:	f7fc ff77 	bl	8000bf8 <__aeabi_d2f>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4a75      	ldr	r2, [pc, #468]	@ (8003ee4 <sensor_fusion_thread+0x60c>)
 8003d0e:	61d3      	str	r3, [r2, #28]
				data_in.gyro[2] = angular_velocities[2] * RADIANS_TO_DEGREES;
 8003d10:	2102      	movs	r1, #2
 8003d12:	4871      	ldr	r0, [pc, #452]	@ (8003ed8 <sensor_fusion_thread+0x600>)
 8003d14:	f7fe fa58 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	edd3 7a00 	vldr	s15, [r3]
 8003d1e:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8003ee8 <sensor_fusion_thread+0x610>
 8003d22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d26:	ee17 0a90 	vmov	r0, s15
 8003d2a:	f7fc fc35 	bl	8000598 <__aeabi_f2d>
 8003d2e:	a366      	add	r3, pc, #408	@ (adr r3, 8003ec8 <sensor_fusion_thread+0x5f0>)
 8003d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d34:	f7fc fdb2 	bl	800089c <__aeabi_ddiv>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	f7fc ff5a 	bl	8000bf8 <__aeabi_d2f>
 8003d44:	4603      	mov	r3, r0
 8003d46:	4a67      	ldr	r2, [pc, #412]	@ (8003ee4 <sensor_fusion_thread+0x60c>)
 8003d48:	6213      	str	r3, [r2, #32]
				data_in.mag[0] = mag_intensities[0] * GAUSS_TO_uTESLA / 50 - hard_iron[0];		// in uT/50
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4864      	ldr	r0, [pc, #400]	@ (8003ee0 <sensor_fusion_thread+0x608>)
 8003d4e:	f7fe fa3b 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8003d52:	4603      	mov	r3, r0
 8003d54:	edd3 7a00 	vldr	s15, [r3]
 8003d58:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8003eec <sensor_fusion_thread+0x614>
 8003d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d60:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8003ef0 <sensor_fusion_thread+0x618>
 8003d64:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4862      	ldr	r0, [pc, #392]	@ (8003ef4 <sensor_fusion_thread+0x61c>)
 8003d6c:	f7fe fa2c 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8003d70:	4603      	mov	r3, r0
 8003d72:	edd3 7a00 	vldr	s15, [r3]
 8003d76:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003d7a:	4b5a      	ldr	r3, [pc, #360]	@ (8003ee4 <sensor_fusion_thread+0x60c>)
 8003d7c:	edc3 7a00 	vstr	s15, [r3]
				data_in.mag[1] = mag_intensities[1] * GAUSS_TO_uTESLA / 50 - hard_iron[1];
 8003d80:	2101      	movs	r1, #1
 8003d82:	4857      	ldr	r0, [pc, #348]	@ (8003ee0 <sensor_fusion_thread+0x608>)
 8003d84:	f7fe fa20 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	edd3 7a00 	vldr	s15, [r3]
 8003d8e:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8003eec <sensor_fusion_thread+0x614>
 8003d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d96:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8003ef0 <sensor_fusion_thread+0x618>
 8003d9a:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8003d9e:	2101      	movs	r1, #1
 8003da0:	4854      	ldr	r0, [pc, #336]	@ (8003ef4 <sensor_fusion_thread+0x61c>)
 8003da2:	f7fe fa11 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8003da6:	4603      	mov	r3, r0
 8003da8:	edd3 7a00 	vldr	s15, [r3]
 8003dac:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003db0:	4b4c      	ldr	r3, [pc, #304]	@ (8003ee4 <sensor_fusion_thread+0x60c>)
 8003db2:	edc3 7a01 	vstr	s15, [r3, #4]
				data_in.mag[2] = mag_intensities[2] * GAUSS_TO_uTESLA / 50 - hard_iron[2];
 8003db6:	2102      	movs	r1, #2
 8003db8:	4849      	ldr	r0, [pc, #292]	@ (8003ee0 <sensor_fusion_thread+0x608>)
 8003dba:	f7fe fa05 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	edd3 7a00 	vldr	s15, [r3]
 8003dc4:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8003eec <sensor_fusion_thread+0x614>
 8003dc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dcc:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8003ef0 <sensor_fusion_thread+0x618>
 8003dd0:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8003dd4:	2102      	movs	r1, #2
 8003dd6:	4847      	ldr	r0, [pc, #284]	@ (8003ef4 <sensor_fusion_thread+0x61c>)
 8003dd8:	f7fe f9f6 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	edd3 7a00 	vldr	s15, [r3]
 8003de2:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003de6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ee4 <sensor_fusion_thread+0x60c>)
 8003de8:	edc3 7a02 	vstr	s15, [r3, #8]

				// Compute delta time since last update
				current_time = ulHighFrequencyTimerCounts * COUNTS_TO_SECONDS;
 8003dec:	4b42      	ldr	r3, [pc, #264]	@ (8003ef8 <sensor_fusion_thread+0x620>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	ee07 3a90 	vmov	s15, r3
 8003df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df8:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8003efc <sensor_fusion_thread+0x624>
 8003dfc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e00:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8003f00 <sensor_fusion_thread+0x628>
 8003e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e08:	4b3e      	ldr	r3, [pc, #248]	@ (8003f04 <sensor_fusion_thread+0x62c>)
 8003e0a:	edc3 7a00 	vstr	s15, [r3]
				dT = current_time - last_time;
 8003e0e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f04 <sensor_fusion_thread+0x62c>)
 8003e10:	ed93 7a00 	vldr	s14, [r3]
 8003e14:	4b3c      	ldr	r3, [pc, #240]	@ (8003f08 <sensor_fusion_thread+0x630>)
 8003e16:	edd3 7a00 	vldr	s15, [r3]
 8003e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f0c <sensor_fusion_thread+0x634>)
 8003e20:	edc3 7a00 	vstr	s15, [r3]
				last_time = current_time;
 8003e24:	4b37      	ldr	r3, [pc, #220]	@ (8003f04 <sensor_fusion_thread+0x62c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a37      	ldr	r2, [pc, #220]	@ (8003f08 <sensor_fusion_thread+0x630>)
 8003e2a:	6013      	str	r3, [r2, #0]

				// Kalman filter predict and update
				MotionFX_propagate(mfxstate, &data_out, &data_in, &dT);
 8003e2c:	4b37      	ldr	r3, [pc, #220]	@ (8003f0c <sensor_fusion_thread+0x634>)
 8003e2e:	4a2d      	ldr	r2, [pc, #180]	@ (8003ee4 <sensor_fusion_thread+0x60c>)
 8003e30:	4937      	ldr	r1, [pc, #220]	@ (8003f10 <sensor_fusion_thread+0x638>)
 8003e32:	4838      	ldr	r0, [pc, #224]	@ (8003f14 <sensor_fusion_thread+0x63c>)
 8003e34:	f018 fa48 	bl	801c2c8 <MotionFX_propagate>
				MotionFX_update(mfxstate, &data_out, &data_in, &dT, NULL);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	4b33      	ldr	r3, [pc, #204]	@ (8003f0c <sensor_fusion_thread+0x634>)
 8003e3e:	4a29      	ldr	r2, [pc, #164]	@ (8003ee4 <sensor_fusion_thread+0x60c>)
 8003e40:	4933      	ldr	r1, [pc, #204]	@ (8003f10 <sensor_fusion_thread+0x638>)
 8003e42:	4834      	ldr	r0, [pc, #208]	@ (8003f14 <sensor_fusion_thread+0x63c>)
 8003e44:	f018 fa30 	bl	801c2a8 <MotionFX_update>


				// Log sensor data
				char str[100];
				snprintf(str, 100, "%.2f %.2f %.2f", data_out.rotation[2], data_out.rotation[1], data_out.rotation[0]);
 8003e48:	4b31      	ldr	r3, [pc, #196]	@ (8003f10 <sensor_fusion_thread+0x638>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fc fba3 	bl	8000598 <__aeabi_f2d>
 8003e52:	4604      	mov	r4, r0
 8003e54:	460d      	mov	r5, r1
 8003e56:	4b2e      	ldr	r3, [pc, #184]	@ (8003f10 <sensor_fusion_thread+0x638>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fc fb9c 	bl	8000598 <__aeabi_f2d>
 8003e60:	4680      	mov	r8, r0
 8003e62:	4689      	mov	r9, r1
 8003e64:	4b2a      	ldr	r3, [pc, #168]	@ (8003f10 <sensor_fusion_thread+0x638>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fc fb95 	bl	8000598 <__aeabi_f2d>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4638      	mov	r0, r7
 8003e74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e78:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003e7c:	e9cd 4500 	strd	r4, r5, [sp]
 8003e80:	4a25      	ldr	r2, [pc, #148]	@ (8003f18 <sensor_fusion_thread+0x640>)
 8003e82:	2164      	movs	r1, #100	@ 0x64
 8003e84:	f01b fe48 	bl	801fb18 <sniprintf>
				USB_Log(str, STATE);
 8003e88:	463b      	mov	r3, r7
 8003e8a:	2104      	movs	r1, #4
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff fc19 	bl	80036c4 <_Z7USB_LogPKc9Log_Level>

				imu.log_data_to_gcs();
 8003e92:	480f      	ldr	r0, [pc, #60]	@ (8003ed0 <sensor_fusion_thread+0x5f8>)
 8003e94:	f7fd fd54 	bl	8001940 <_ZN6BMI08815log_data_to_gcsEv>
	//			osDelay(2);
				barometer.log_data_to_gcs();
 8003e98:	4820      	ldr	r0, [pc, #128]	@ (8003f1c <sensor_fusion_thread+0x644>)
 8003e9a:	f7fe fdad 	bl	80029f8 <_ZN6BMP38815log_data_to_gcsEv>
	//			osDelay(2);
				magnetometer.log_data_to_gcs();
 8003e9e:	480f      	ldr	r0, [pc, #60]	@ (8003edc <sensor_fusion_thread+0x604>)
 8003ea0:	f7ff fb08 	bl	80034b4 <_ZN7LIS3MDL15log_data_to_gcsEv>
//			int x = static_cast<int>(mag_data[0] * 1000.0);
//			int y = static_cast<int>(mag_data[1] * 1000.0);
//			int z = static_cast<int>(mag_data[2] * 1000.0);
//			snprintf(str, 256, "Raw:0,0,0,0,0,0,%d,%d,%d\r", x,y,z);
//			USB_Log(str, RAW);
		}
 8003ea4:	e5c2      	b.n	8003a2c <sensor_fusion_thread+0x154>
	}
	vTaskDelete( NULL );
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	f00c fd76 	bl	8010998 <vTaskDelete>
}
 8003eac:	bf00      	nop
 8003eae:	3768      	adds	r7, #104	@ 0x68
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	ecbd 8b02 	vpop	{d8}
 8003eb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003eba:	bf00      	nop
 8003ebc:	f3af 8000 	nop.w
 8003ec0:	3a92a305 	.word	0x3a92a305
 8003ec4:	40239d01 	.word	0x40239d01
 8003ec8:	54442d18 	.word	0x54442d18
 8003ecc:	400921fb 	.word	0x400921fb
 8003ed0:	20000be8 	.word	0x20000be8
 8003ed4:	20000cd4 	.word	0x20000cd4
 8003ed8:	20000ce0 	.word	0x20000ce0
 8003edc:	20000c9c 	.word	0x20000c9c
 8003ee0:	20000cec 	.word	0x20000cec
 8003ee4:	200016d8 	.word	0x200016d8
 8003ee8:	43340000 	.word	0x43340000
 8003eec:	42c80000 	.word	0x42c80000
 8003ef0:	42480000 	.word	0x42480000
 8003ef4:	20000d1c 	.word	0x20000d1c
 8003ef8:	20004c38 	.word	0x20004c38
 8003efc:	44d48000 	.word	0x44d48000
 8003f00:	4d221fe8 	.word	0x4d221fe8
 8003f04:	2000173c 	.word	0x2000173c
 8003f08:	20001738 	.word	0x20001738
 8003f0c:	20001740 	.word	0x20001740
 8003f10:	200016fc 	.word	0x200016fc
 8003f14:	20000d28 	.word	0x20000d28
 8003f18:	080222d8 	.word	0x080222d8
 8003f1c:	20000c44 	.word	0x20000c44

08003f20 <service_BMI088_Accel>:

/*
 * FUNCTIONS
 */
void service_BMI088_Accel(){ imu.service_irq_accelerometer(); imu.service_irq_temperature(); }
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	4803      	ldr	r0, [pc, #12]	@ (8003f34 <service_BMI088_Accel+0x14>)
 8003f26:	f7fd fb47 	bl	80015b8 <_ZN6BMI08825service_irq_accelerometerEv>
 8003f2a:	4802      	ldr	r0, [pc, #8]	@ (8003f34 <service_BMI088_Accel+0x14>)
 8003f2c:	f7fd fcb6 	bl	800189c <_ZN6BMI08823service_irq_temperatureEv>
 8003f30:	bf00      	nop
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20000be8 	.word	0x20000be8

08003f38 <service_BMI088_Gyro>:
void service_BMI088_Gyro() { imu.service_irq_gyroscope(); }
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	4802      	ldr	r0, [pc, #8]	@ (8003f48 <service_BMI088_Gyro+0x10>)
 8003f3e:	f7fd fbf9 	bl	8001734 <_ZN6BMI08821service_irq_gyroscopeEv>
 8003f42:	bf00      	nop
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000be8 	.word	0x20000be8

08003f4c <service_BMP388>:
void service_BMP388() { barometer.service_irq(); }
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	4802      	ldr	r0, [pc, #8]	@ (8003f5c <service_BMP388+0x10>)
 8003f52:	f7fe fbc3 	bl	80026dc <_ZN6BMP38811service_irqEv>
 8003f56:	bf00      	nop
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000c44 	.word	0x20000c44

08003f60 <service_LIS3MDL>:
void service_LIS3MDL() { magnetometer.service_irq(); }
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	4802      	ldr	r0, [pc, #8]	@ (8003f70 <service_LIS3MDL+0x10>)
 8003f66:	f7ff f9e1 	bl	800332c <_ZN7LIS3MDL11service_irqEv>
 8003f6a:	bf00      	nop
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000c9c 	.word	0x20000c9c

08003f74 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev>:
    struct array
 8003f74:	b590      	push	{r4, r7, lr}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev+0x24>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f103 040c 	add.w	r4, r3, #12
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	429c      	cmp	r4, r3
 8003f8c:	d004      	beq.n	8003f98 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev+0x24>
 8003f8e:	3c04      	subs	r4, #4
 8003f90:	4620      	mov	r0, r4
 8003f92:	f7fe f88b 	bl	80020ac <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev>
 8003f96:	e7f7      	b.n	8003f88 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev+0x14>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd90      	pop	{r4, r7, pc}

08003fa2 <_ZN7LIS3MDLD1Ev>:
	const float y_offset = -0.2715;
	const float z_offset = -0.0920;
};


class LIS3MDL
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	332c      	adds	r3, #44	@ 0x2c
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff ffe0 	bl	8003f74 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <_ZN6BMI088D1Ev>:
#define REG_GYRO_FIFO_CONFIG_0	0x3D
#define	REG_GYRO_FIFO_CONFIG_1  0x3E
#define	REG_GYRO_FIFO_DATA		0x3F


class BMI088
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3350      	adds	r3, #80	@ 0x50
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff ffd2 	bl	8003f74 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3344      	adds	r3, #68	@ 0x44
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff ffcd 	bl	8003f74 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <_Z41__static_initialization_and_destruction_0ii>:
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af06      	add	r7, sp, #24
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d122      	bne.n	800403a <_Z41__static_initialization_and_destruction_0ii+0x56>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d11d      	bne.n	800403a <_Z41__static_initialization_and_destruction_0ii+0x56>
		GYRO_CS_Pin, accelDataMutexHandle, gyroDataMutexHandle);
 8003ffe:	4b18      	ldr	r3, [pc, #96]	@ (8004060 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004000:	9304      	str	r3, [sp, #16]
 8004002:	4b18      	ldr	r3, [pc, #96]	@ (8004064 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004004:	9303      	str	r3, [sp, #12]
 8004006:	2301      	movs	r3, #1
 8004008:	9302      	str	r3, [sp, #8]
 800400a:	2310      	movs	r3, #16
 800400c:	9301      	str	r3, [sp, #4]
 800400e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004018:	4a13      	ldr	r2, [pc, #76]	@ (8004068 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800401a:	4914      	ldr	r1, [pc, #80]	@ (800406c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800401c:	4814      	ldr	r0, [pc, #80]	@ (8004070 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800401e:	f7fd f819 	bl	8001054 <_ZN6BMI088C1ER19__SPI_HandleTypeDefRPvP12GPIO_TypeDefS5_ttS3_S3_>
BMP388 barometer(hi2c2, i2c2MutexHandle, baroDataMutexHandle);
 8004022:	4b14      	ldr	r3, [pc, #80]	@ (8004074 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004024:	4a14      	ldr	r2, [pc, #80]	@ (8004078 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004026:	4915      	ldr	r1, [pc, #84]	@ (800407c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004028:	4815      	ldr	r0, [pc, #84]	@ (8004080 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800402a:	f7fe fa66 	bl	80024fa <_ZN6BMP388C1ER19__I2C_HandleTypeDefRPvS3_>
LIS3MDL magnetometer(hi2c2, i2c2MutexHandle, magDataMutexHandle);
 800402e:	4b15      	ldr	r3, [pc, #84]	@ (8004084 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004030:	4a11      	ldr	r2, [pc, #68]	@ (8004078 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004032:	4912      	ldr	r1, [pc, #72]	@ (800407c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004034:	4814      	ldr	r0, [pc, #80]	@ (8004088 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004036:	f7ff f85d 	bl	80030f4 <_ZN7LIS3MDLC1ER19__I2C_HandleTypeDefRPvS3_>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004046:	4293      	cmp	r3, r2
 8004048:	d105      	bne.n	8004056 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800404a:	480f      	ldr	r0, [pc, #60]	@ (8004088 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800404c:	f7ff ffa9 	bl	8003fa2 <_ZN7LIS3MDLD1Ev>
BMI088 imu(hspi1, spi1MutexHandle, ACCEL_CS_GPIO_Port, GYRO_CS_GPIO_Port, ACCEL_CS_Pin,
 8004050:	4807      	ldr	r0, [pc, #28]	@ (8004070 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004052:	f7ff ffb4 	bl	8003fbe <_ZN6BMI088D1Ev>
void service_LIS3MDL() { magnetometer.service_irq(); }
 8004056:	bf00      	nop
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20004ad8 	.word	0x20004ad8
 8004064:	20004ad4 	.word	0x20004ad4
 8004068:	20004ac8 	.word	0x20004ac8
 800406c:	20004c3c 	.word	0x20004c3c
 8004070:	20000be8 	.word	0x20000be8
 8004074:	20004adc 	.word	0x20004adc
 8004078:	20004ad0 	.word	0x20004ad0
 800407c:	20004be4 	.word	0x20004be4
 8004080:	20000c44 	.word	0x20000c44
 8004084:	20004ae0 	.word	0x20004ae0
 8004088:	20000c9c 	.word	0x20000c9c

0800408c <_GLOBAL__sub_I_imu>:
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
 8004090:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004094:	2001      	movs	r0, #1
 8004096:	f7ff ffa5 	bl	8003fe4 <_Z41__static_initialization_and_destruction_0ii>
 800409a:	bd80      	pop	{r7, pc}

0800409c <_GLOBAL__sub_D_imu>:
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
 80040a0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80040a4:	2000      	movs	r0, #0
 80040a6:	f7ff ff9d 	bl	8003fe4 <_Z41__static_initialization_and_destruction_0ii>
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	0000      	movs	r0, r0
	...

080040b0 <_ZN9IIRFilterC1Eff>:
 */
#include "Utility/IIRFilter.hpp"
#include <cmath>


IIRFilter::IIRFilter(float cutoff_frequency, float sampling_frequency)
 80040b0:	b590      	push	{r4, r7, lr}
 80040b2:	ed2d 8b02 	vpush	{d8}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80040c0:	edc7 0a01 	vstr	s1, [r7, #4]
	: cutoff_frequency{cutoff_frequency},
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	601a      	str	r2, [r3, #0]
	  sampling_frequency{sampling_frequency},
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	605a      	str	r2, [r3, #4]
	  K{tanf(M_PI * (cutoff_frequency / sampling_frequency))}
 80040d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80040d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80040d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80040dc:	ee16 0a90 	vmov	r0, s13
 80040e0:	f7fc fa5a 	bl	8000598 <__aeabi_f2d>
 80040e4:	a375      	add	r3, pc, #468	@ (adr r3, 80042bc <_ZN9IIRFilterC1Eff+0x20c>)
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	f7fc faad 	bl	8000648 <__aeabi_dmul>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4610      	mov	r0, r2
 80040f4:	4619      	mov	r1, r3
 80040f6:	f7fc fd7f 	bl	8000bf8 <__aeabi_d2f>
 80040fa:	4603      	mov	r3, r0
 80040fc:	ee00 3a10 	vmov	s0, r3
 8004100:	f018 fe76 	bl	801cdf0 <tanf>
 8004104:	eef0 7a40 	vmov.f32	s15, s0
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	edc3 7a02 	vstr	s15, [r3, #8]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4a69      	ldr	r2, [pc, #420]	@ (80042b8 <_ZN9IIRFilterC1Eff+0x208>)
 8004112:	60da      	str	r2, [r3, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	3310      	adds	r3, #16
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	605a      	str	r2, [r3, #4]
 800411e:	609a      	str	r2, [r3, #8]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	331c      	adds	r3, #28
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	605a      	str	r2, [r3, #4]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3324      	adds	r3, #36	@ 0x24
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	605a      	str	r2, [r3, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	332c      	adds	r3, #44	@ 0x2c
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	605a      	str	r2, [r3, #4]
{
	a[0] = (K * K) / (K * K + K / Q + 1);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	ed93 7a02 	vldr	s14, [r3, #8]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	edd3 7a02 	vldr	s15, [r3, #8]
 800414a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	edd3 6a02 	vldr	s13, [r3, #8]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	edd3 7a02 	vldr	s15, [r3, #8]
 800415a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	edd3 5a02 	vldr	s11, [r3, #8]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	ed93 6a03 	vldr	s12, [r3, #12]
 800416a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800416e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800417a:	ee87 8a27 	vdiv.f32	s16, s14, s15
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3310      	adds	r3, #16
 8004182:	2100      	movs	r1, #0
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe f81f 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 800418a:	4603      	mov	r3, r0
 800418c:	ed83 8a00 	vstr	s16, [r3]
	a[1] = 2 * a[0];
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3310      	adds	r3, #16
 8004194:	2100      	movs	r1, #0
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe f816 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 800419c:	4603      	mov	r3, r0
 800419e:	edd3 7a00 	vldr	s15, [r3]
 80041a2:	ee37 8aa7 	vadd.f32	s16, s15, s15
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3310      	adds	r3, #16
 80041aa:	2101      	movs	r1, #1
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fe f80b 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 80041b2:	4603      	mov	r3, r0
 80041b4:	ed83 8a00 	vstr	s16, [r3]
	a[2] = a[0];
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3310      	adds	r3, #16
 80041bc:	2100      	movs	r1, #0
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fe f802 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 80041c4:	4603      	mov	r3, r0
 80041c6:	681c      	ldr	r4, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3310      	adds	r3, #16
 80041cc:	2102      	movs	r1, #2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fd fffa 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 80041d4:	4603      	mov	r3, r0
 80041d6:	601c      	str	r4, [r3, #0]

	b[0] = (2 * (K * K - 1)) / (K * K + K / Q + 1);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	ed93 7a02 	vldr	s14, [r3, #8]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80041e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80041f0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	edd3 6a02 	vldr	s13, [r3, #8]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8004200:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	edd3 5a02 	vldr	s11, [r3, #8]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	ed93 6a03 	vldr	s12, [r3, #12]
 8004210:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004214:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004218:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800421c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004220:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	331c      	adds	r3, #28
 8004228:	2100      	movs	r1, #0
 800422a:	4618      	mov	r0, r3
 800422c:	f000 f8fd 	bl	800442a <_ZNSt5arrayIfLj2EEixEj>
 8004230:	4603      	mov	r3, r0
 8004232:	ed83 8a00 	vstr	s16, [r3]
	b[1] = (K * K - K / Q + 1) / (K * K + K / Q + 1);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	ed93 7a02 	vldr	s14, [r3, #8]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004242:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	ed93 6a02 	vldr	s12, [r3, #8]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	edd3 6a03 	vldr	s13, [r3, #12]
 8004252:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004256:	ee77 7a67 	vsub.f32	s15, s14, s15
 800425a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800425e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	edd3 6a02 	vldr	s13, [r3, #8]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	edd3 7a02 	vldr	s15, [r3, #8]
 800426e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	edd3 5a02 	vldr	s11, [r3, #8]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	ed93 6a03 	vldr	s12, [r3, #12]
 800427e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800428a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800428e:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	331c      	adds	r3, #28
 8004296:	2101      	movs	r1, #1
 8004298:	4618      	mov	r0, r3
 800429a:	f000 f8c6 	bl	800442a <_ZNSt5arrayIfLj2EEixEj>
 800429e:	4603      	mov	r3, r0
 80042a0:	ed83 8a00 	vstr	s16, [r3]
}
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	ecbd 8b02 	vpop	{d8}
 80042b0:	bd90      	pop	{r4, r7, pc}
 80042b2:	bf00      	nop
 80042b4:	f3af 8000 	nop.w
 80042b8:	3f350481 	.word	0x3f350481
 80042bc:	54442d18 	.word	0x54442d18
 80042c0:	400921fb 	.word	0x400921fb

080042c4 <_ZN9IIRFilter6updateEf>:

float IIRFilter::update(float input)
{
 80042c4:	b590      	push	{r4, r7, lr}
 80042c6:	ed2d 8b02 	vpush	{d8}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	ed87 0a00 	vstr	s0, [r7]
	float sum1 = a[0] * input + a[1] * prev_input[0] + a[2] * prev_input[1];
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3310      	adds	r3, #16
 80042d8:	2100      	movs	r1, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fd ff74 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 80042e0:	4603      	mov	r3, r0
 80042e2:	ed93 7a00 	vldr	s14, [r3]
 80042e6:	edd7 7a00 	vldr	s15, [r7]
 80042ea:	ee27 8a27 	vmul.f32	s16, s14, s15
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3310      	adds	r3, #16
 80042f2:	2101      	movs	r1, #1
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fd ff67 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 80042fa:	4603      	mov	r3, r0
 80042fc:	edd3 8a00 	vldr	s17, [r3]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3324      	adds	r3, #36	@ 0x24
 8004304:	2100      	movs	r1, #0
 8004306:	4618      	mov	r0, r3
 8004308:	f000 f88f 	bl	800442a <_ZNSt5arrayIfLj2EEixEj>
 800430c:	4603      	mov	r3, r0
 800430e:	edd3 7a00 	vldr	s15, [r3]
 8004312:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004316:	ee38 8a27 	vadd.f32	s16, s16, s15
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3310      	adds	r3, #16
 800431e:	2102      	movs	r1, #2
 8004320:	4618      	mov	r0, r3
 8004322:	f7fd ff51 	bl	80021c8 <_ZNSt5arrayIfLj3EEixEj>
 8004326:	4603      	mov	r3, r0
 8004328:	edd3 8a00 	vldr	s17, [r3]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3324      	adds	r3, #36	@ 0x24
 8004330:	2101      	movs	r1, #1
 8004332:	4618      	mov	r0, r3
 8004334:	f000 f879 	bl	800442a <_ZNSt5arrayIfLj2EEixEj>
 8004338:	4603      	mov	r3, r0
 800433a:	edd3 7a00 	vldr	s15, [r3]
 800433e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004342:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004346:	edc7 7a05 	vstr	s15, [r7, #20]
	float sum2 = b[0] * prev_output[0] + b[1] * prev_output[1];
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	331c      	adds	r3, #28
 800434e:	2100      	movs	r1, #0
 8004350:	4618      	mov	r0, r3
 8004352:	f000 f86a 	bl	800442a <_ZNSt5arrayIfLj2EEixEj>
 8004356:	4603      	mov	r3, r0
 8004358:	ed93 8a00 	vldr	s16, [r3]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	332c      	adds	r3, #44	@ 0x2c
 8004360:	2100      	movs	r1, #0
 8004362:	4618      	mov	r0, r3
 8004364:	f000 f861 	bl	800442a <_ZNSt5arrayIfLj2EEixEj>
 8004368:	4603      	mov	r3, r0
 800436a:	edd3 7a00 	vldr	s15, [r3]
 800436e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	331c      	adds	r3, #28
 8004376:	2101      	movs	r1, #1
 8004378:	4618      	mov	r0, r3
 800437a:	f000 f856 	bl	800442a <_ZNSt5arrayIfLj2EEixEj>
 800437e:	4603      	mov	r3, r0
 8004380:	edd3 8a00 	vldr	s17, [r3]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	332c      	adds	r3, #44	@ 0x2c
 8004388:	2101      	movs	r1, #1
 800438a:	4618      	mov	r0, r3
 800438c:	f000 f84d 	bl	800442a <_ZNSt5arrayIfLj2EEixEj>
 8004390:	4603      	mov	r3, r0
 8004392:	edd3 7a00 	vldr	s15, [r3]
 8004396:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800439a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800439e:	edc7 7a04 	vstr	s15, [r7, #16]
	float output = sum1 - sum2;
 80043a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80043a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80043aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043ae:	edc7 7a03 	vstr	s15, [r7, #12]

	prev_input[1] = prev_input[0];
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3324      	adds	r3, #36	@ 0x24
 80043b6:	2100      	movs	r1, #0
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f836 	bl	800442a <_ZNSt5arrayIfLj2EEixEj>
 80043be:	4603      	mov	r3, r0
 80043c0:	681c      	ldr	r4, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3324      	adds	r3, #36	@ 0x24
 80043c6:	2101      	movs	r1, #1
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 f82e 	bl	800442a <_ZNSt5arrayIfLj2EEixEj>
 80043ce:	4603      	mov	r3, r0
 80043d0:	601c      	str	r4, [r3, #0]
	prev_input[0] = input;
 80043d2:	683c      	ldr	r4, [r7, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3324      	adds	r3, #36	@ 0x24
 80043d8:	2100      	movs	r1, #0
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 f825 	bl	800442a <_ZNSt5arrayIfLj2EEixEj>
 80043e0:	4603      	mov	r3, r0
 80043e2:	601c      	str	r4, [r3, #0]
	prev_output[1] = prev_output[0];
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	332c      	adds	r3, #44	@ 0x2c
 80043e8:	2100      	movs	r1, #0
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 f81d 	bl	800442a <_ZNSt5arrayIfLj2EEixEj>
 80043f0:	4603      	mov	r3, r0
 80043f2:	681c      	ldr	r4, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	332c      	adds	r3, #44	@ 0x2c
 80043f8:	2101      	movs	r1, #1
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 f815 	bl	800442a <_ZNSt5arrayIfLj2EEixEj>
 8004400:	4603      	mov	r3, r0
 8004402:	601c      	str	r4, [r3, #0]
	prev_output[0] = output;
 8004404:	68fc      	ldr	r4, [r7, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	332c      	adds	r3, #44	@ 0x2c
 800440a:	2100      	movs	r1, #0
 800440c:	4618      	mov	r0, r3
 800440e:	f000 f80c 	bl	800442a <_ZNSt5arrayIfLj2EEixEj>
 8004412:	4603      	mov	r3, r0
 8004414:	601c      	str	r4, [r3, #0]
	return output;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	ee07 3a90 	vmov	s15, r3
}
 800441c:	eeb0 0a67 	vmov.f32	s0, s15
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	ecbd 8b02 	vpop	{d8}
 8004428:	bd90      	pop	{r4, r7, pc}

0800442a <_ZNSt5arrayIfLj2EEixEj>:
      operator[](size_type __n) noexcept
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6839      	ldr	r1, [r7, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f000 f805 	bl	8004448 <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>
 800443e:	4603      	mov	r3, r0
      }
 8004440:	4618      	mov	r0, r3
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	4413      	add	r3, r2
 800445a:	4618      	mov	r0, r3
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
	...

08004468 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of spi1Mutex */
  spi1MutexHandle = osMutexNew(&spi1Mutex_attributes);
 800446c:	4839      	ldr	r0, [pc, #228]	@ (8004554 <MX_FREERTOS_Init+0xec>)
 800446e:	f00a fcd9 	bl	800ee24 <osMutexNew>
 8004472:	4603      	mov	r3, r0
 8004474:	4a38      	ldr	r2, [pc, #224]	@ (8004558 <MX_FREERTOS_Init+0xf0>)
 8004476:	6013      	str	r3, [r2, #0]

  /* creation of usbMutex */
  usbMutexHandle = osMutexNew(&usbMutex_attributes);
 8004478:	4838      	ldr	r0, [pc, #224]	@ (800455c <MX_FREERTOS_Init+0xf4>)
 800447a:	f00a fcd3 	bl	800ee24 <osMutexNew>
 800447e:	4603      	mov	r3, r0
 8004480:	4a37      	ldr	r2, [pc, #220]	@ (8004560 <MX_FREERTOS_Init+0xf8>)
 8004482:	6013      	str	r3, [r2, #0]

  /* creation of i2c2Mutex */
  i2c2MutexHandle = osMutexNew(&i2c2Mutex_attributes);
 8004484:	4837      	ldr	r0, [pc, #220]	@ (8004564 <MX_FREERTOS_Init+0xfc>)
 8004486:	f00a fccd 	bl	800ee24 <osMutexNew>
 800448a:	4603      	mov	r3, r0
 800448c:	4a36      	ldr	r2, [pc, #216]	@ (8004568 <MX_FREERTOS_Init+0x100>)
 800448e:	6013      	str	r3, [r2, #0]

  /* creation of accelDataMutex */
  accelDataMutexHandle = osMutexNew(&accelDataMutex_attributes);
 8004490:	4836      	ldr	r0, [pc, #216]	@ (800456c <MX_FREERTOS_Init+0x104>)
 8004492:	f00a fcc7 	bl	800ee24 <osMutexNew>
 8004496:	4603      	mov	r3, r0
 8004498:	4a35      	ldr	r2, [pc, #212]	@ (8004570 <MX_FREERTOS_Init+0x108>)
 800449a:	6013      	str	r3, [r2, #0]

  /* creation of gyroDataMutex */
  gyroDataMutexHandle = osMutexNew(&gyroDataMutex_attributes);
 800449c:	4835      	ldr	r0, [pc, #212]	@ (8004574 <MX_FREERTOS_Init+0x10c>)
 800449e:	f00a fcc1 	bl	800ee24 <osMutexNew>
 80044a2:	4603      	mov	r3, r0
 80044a4:	4a34      	ldr	r2, [pc, #208]	@ (8004578 <MX_FREERTOS_Init+0x110>)
 80044a6:	6013      	str	r3, [r2, #0]

  /* creation of baroDataMutex */
  baroDataMutexHandle = osMutexNew(&baroDataMutex_attributes);
 80044a8:	4834      	ldr	r0, [pc, #208]	@ (800457c <MX_FREERTOS_Init+0x114>)
 80044aa:	f00a fcbb 	bl	800ee24 <osMutexNew>
 80044ae:	4603      	mov	r3, r0
 80044b0:	4a33      	ldr	r2, [pc, #204]	@ (8004580 <MX_FREERTOS_Init+0x118>)
 80044b2:	6013      	str	r3, [r2, #0]

  /* creation of magDataMutex */
  magDataMutexHandle = osMutexNew(&magDataMutex_attributes);
 80044b4:	4833      	ldr	r0, [pc, #204]	@ (8004584 <MX_FREERTOS_Init+0x11c>)
 80044b6:	f00a fcb5 	bl	800ee24 <osMutexNew>
 80044ba:	4603      	mov	r3, r0
 80044bc:	4a32      	ldr	r2, [pc, #200]	@ (8004588 <MX_FREERTOS_Init+0x120>)
 80044be:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of accIRQSemaphore */
  accIRQSemaphoreHandle = osSemaphoreNew(64, 0, &accIRQSemaphore_attributes);
 80044c0:	4a32      	ldr	r2, [pc, #200]	@ (800458c <MX_FREERTOS_Init+0x124>)
 80044c2:	2100      	movs	r1, #0
 80044c4:	2040      	movs	r0, #64	@ 0x40
 80044c6:	f00a fdbb 	bl	800f040 <osSemaphoreNew>
 80044ca:	4603      	mov	r3, r0
 80044cc:	4a30      	ldr	r2, [pc, #192]	@ (8004590 <MX_FREERTOS_Init+0x128>)
 80044ce:	6013      	str	r3, [r2, #0]

  /* creation of gyroIRQSemaphore */
  gyroIRQSemaphoreHandle = osSemaphoreNew(64, 0, &gyroIRQSemaphore_attributes);
 80044d0:	4a30      	ldr	r2, [pc, #192]	@ (8004594 <MX_FREERTOS_Init+0x12c>)
 80044d2:	2100      	movs	r1, #0
 80044d4:	2040      	movs	r0, #64	@ 0x40
 80044d6:	f00a fdb3 	bl	800f040 <osSemaphoreNew>
 80044da:	4603      	mov	r3, r0
 80044dc:	4a2e      	ldr	r2, [pc, #184]	@ (8004598 <MX_FREERTOS_Init+0x130>)
 80044de:	6013      	str	r3, [r2, #0]

  /* creation of baroIRQSemaphore */
  baroIRQSemaphoreHandle = osSemaphoreNew(64, 0, &baroIRQSemaphore_attributes);
 80044e0:	4a2e      	ldr	r2, [pc, #184]	@ (800459c <MX_FREERTOS_Init+0x134>)
 80044e2:	2100      	movs	r1, #0
 80044e4:	2040      	movs	r0, #64	@ 0x40
 80044e6:	f00a fdab 	bl	800f040 <osSemaphoreNew>
 80044ea:	4603      	mov	r3, r0
 80044ec:	4a2c      	ldr	r2, [pc, #176]	@ (80045a0 <MX_FREERTOS_Init+0x138>)
 80044ee:	6013      	str	r3, [r2, #0]

  /* creation of magIRQSemaphore */
  magIRQSemaphoreHandle = osSemaphoreNew(64, 0, &magIRQSemaphore_attributes);
 80044f0:	4a2c      	ldr	r2, [pc, #176]	@ (80045a4 <MX_FREERTOS_Init+0x13c>)
 80044f2:	2100      	movs	r1, #0
 80044f4:	2040      	movs	r0, #64	@ 0x40
 80044f6:	f00a fda3 	bl	800f040 <osSemaphoreNew>
 80044fa:	4603      	mov	r3, r0
 80044fc:	4a2a      	ldr	r2, [pc, #168]	@ (80045a8 <MX_FREERTOS_Init+0x140>)
 80044fe:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sensorFusionTask */
  sensorFusionTaskHandle = osThreadNew(start_sensor_fusion_task, NULL, &sensorFusionTask_attributes);
 8004500:	4a2a      	ldr	r2, [pc, #168]	@ (80045ac <MX_FREERTOS_Init+0x144>)
 8004502:	2100      	movs	r1, #0
 8004504:	482a      	ldr	r0, [pc, #168]	@ (80045b0 <MX_FREERTOS_Init+0x148>)
 8004506:	f00a fbdf 	bl	800ecc8 <osThreadNew>
 800450a:	4603      	mov	r3, r0
 800450c:	4a29      	ldr	r2, [pc, #164]	@ (80045b4 <MX_FREERTOS_Init+0x14c>)
 800450e:	6013      	str	r3, [r2, #0]

  /* creation of accIRQTask */
  accIRQTaskHandle = osThreadNew(start_acc_irq_task, NULL, &accIRQTask_attributes);
 8004510:	4a29      	ldr	r2, [pc, #164]	@ (80045b8 <MX_FREERTOS_Init+0x150>)
 8004512:	2100      	movs	r1, #0
 8004514:	4829      	ldr	r0, [pc, #164]	@ (80045bc <MX_FREERTOS_Init+0x154>)
 8004516:	f00a fbd7 	bl	800ecc8 <osThreadNew>
 800451a:	4603      	mov	r3, r0
 800451c:	4a28      	ldr	r2, [pc, #160]	@ (80045c0 <MX_FREERTOS_Init+0x158>)
 800451e:	6013      	str	r3, [r2, #0]

  /* creation of gyroIRQTask */
  gyroIRQTaskHandle = osThreadNew(start_gyro_irq_task, NULL, &gyroIRQTask_attributes);
 8004520:	4a28      	ldr	r2, [pc, #160]	@ (80045c4 <MX_FREERTOS_Init+0x15c>)
 8004522:	2100      	movs	r1, #0
 8004524:	4828      	ldr	r0, [pc, #160]	@ (80045c8 <MX_FREERTOS_Init+0x160>)
 8004526:	f00a fbcf 	bl	800ecc8 <osThreadNew>
 800452a:	4603      	mov	r3, r0
 800452c:	4a27      	ldr	r2, [pc, #156]	@ (80045cc <MX_FREERTOS_Init+0x164>)
 800452e:	6013      	str	r3, [r2, #0]

  /* creation of baroIRQTask */
  baroIRQTaskHandle = osThreadNew(start_baro_irq_task, NULL, &baroIRQTask_attributes);
 8004530:	4a27      	ldr	r2, [pc, #156]	@ (80045d0 <MX_FREERTOS_Init+0x168>)
 8004532:	2100      	movs	r1, #0
 8004534:	4827      	ldr	r0, [pc, #156]	@ (80045d4 <MX_FREERTOS_Init+0x16c>)
 8004536:	f00a fbc7 	bl	800ecc8 <osThreadNew>
 800453a:	4603      	mov	r3, r0
 800453c:	4a26      	ldr	r2, [pc, #152]	@ (80045d8 <MX_FREERTOS_Init+0x170>)
 800453e:	6013      	str	r3, [r2, #0]

  /* creation of magIRQTask */
  magIRQTaskHandle = osThreadNew(start_mag_irq_task, NULL, &magIRQTask_attributes);
 8004540:	4a26      	ldr	r2, [pc, #152]	@ (80045dc <MX_FREERTOS_Init+0x174>)
 8004542:	2100      	movs	r1, #0
 8004544:	4826      	ldr	r0, [pc, #152]	@ (80045e0 <MX_FREERTOS_Init+0x178>)
 8004546:	f00a fbbf 	bl	800ecc8 <osThreadNew>
 800454a:	4603      	mov	r3, r0
 800454c:	4a25      	ldr	r2, [pc, #148]	@ (80045e4 <MX_FREERTOS_Init+0x17c>)
 800454e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8004550:	bf00      	nop
 8004552:	bd80      	pop	{r7, pc}
 8004554:	08022578 	.word	0x08022578
 8004558:	20004ac8 	.word	0x20004ac8
 800455c:	08022588 	.word	0x08022588
 8004560:	20004acc 	.word	0x20004acc
 8004564:	08022598 	.word	0x08022598
 8004568:	20004ad0 	.word	0x20004ad0
 800456c:	080225a8 	.word	0x080225a8
 8004570:	20004ad4 	.word	0x20004ad4
 8004574:	080225b8 	.word	0x080225b8
 8004578:	20004ad8 	.word	0x20004ad8
 800457c:	080225c8 	.word	0x080225c8
 8004580:	20004adc 	.word	0x20004adc
 8004584:	080225d8 	.word	0x080225d8
 8004588:	20004ae0 	.word	0x20004ae0
 800458c:	080225e8 	.word	0x080225e8
 8004590:	20004ae4 	.word	0x20004ae4
 8004594:	080225f8 	.word	0x080225f8
 8004598:	20004ae8 	.word	0x20004ae8
 800459c:	08022608 	.word	0x08022608
 80045a0:	20004aec 	.word	0x20004aec
 80045a4:	08022618 	.word	0x08022618
 80045a8:	20004af0 	.word	0x20004af0
 80045ac:	080224c4 	.word	0x080224c4
 80045b0:	080045e9 	.word	0x080045e9
 80045b4:	20001744 	.word	0x20001744
 80045b8:	080224e8 	.word	0x080224e8
 80045bc:	08004601 	.word	0x08004601
 80045c0:	200037f8 	.word	0x200037f8
 80045c4:	0802250c 	.word	0x0802250c
 80045c8:	08004625 	.word	0x08004625
 80045cc:	20003cac 	.word	0x20003cac
 80045d0:	08022530 	.word	0x08022530
 80045d4:	08004649 	.word	0x08004649
 80045d8:	20004160 	.word	0x20004160
 80045dc:	08022554 	.word	0x08022554
 80045e0:	0800466d 	.word	0x0800466d
 80045e4:	20004614 	.word	0x20004614

080045e8 <start_sensor_fusion_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_sensor_fusion_task */
void start_sensor_fusion_task(void *argument)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 80045f0:	f00e f89a 	bl	8012728 <MX_USB_Device_Init>
  /* USER CODE BEGIN start_sensor_fusion_task */
  /* Infinite loop */
  sensor_fusion_thread();
 80045f4:	f7ff f970 	bl	80038d8 <sensor_fusion_thread>
  /* USER CODE END start_sensor_fusion_task */
}
 80045f8:	bf00      	nop
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <start_acc_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_acc_irq_task */
void start_acc_irq_task(void *argument)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_acc_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(accIRQSemaphoreHandle, osWaitForever);
 8004608:	4b05      	ldr	r3, [pc, #20]	@ (8004620 <start_acc_irq_task+0x20>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004610:	4618      	mov	r0, r3
 8004612:	f00a fd9f 	bl	800f154 <osSemaphoreAcquire>
		service_BMI088_Accel();
 8004616:	f7ff fc83 	bl	8003f20 <service_BMI088_Accel>
		osSemaphoreAcquire(accIRQSemaphoreHandle, osWaitForever);
 800461a:	bf00      	nop
 800461c:	e7f4      	b.n	8004608 <start_acc_irq_task+0x8>
 800461e:	bf00      	nop
 8004620:	20004ae4 	.word	0x20004ae4

08004624 <start_gyro_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_gyro_irq_task */
void start_gyro_irq_task(void *argument)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_gyro_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(gyroIRQSemaphoreHandle, osWaitForever);
 800462c:	4b05      	ldr	r3, [pc, #20]	@ (8004644 <start_gyro_irq_task+0x20>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004634:	4618      	mov	r0, r3
 8004636:	f00a fd8d 	bl	800f154 <osSemaphoreAcquire>
		service_BMI088_Gyro();
 800463a:	f7ff fc7d 	bl	8003f38 <service_BMI088_Gyro>
		osSemaphoreAcquire(gyroIRQSemaphoreHandle, osWaitForever);
 800463e:	bf00      	nop
 8004640:	e7f4      	b.n	800462c <start_gyro_irq_task+0x8>
 8004642:	bf00      	nop
 8004644:	20004ae8 	.word	0x20004ae8

08004648 <start_baro_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_baro_irq_task */
void start_baro_irq_task(void *argument)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_baro_irq_task */
  /* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(baroIRQSemaphoreHandle, osWaitForever);
 8004650:	4b05      	ldr	r3, [pc, #20]	@ (8004668 <start_baro_irq_task+0x20>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004658:	4618      	mov	r0, r3
 800465a:	f00a fd7b 	bl	800f154 <osSemaphoreAcquire>
		service_BMP388();
 800465e:	f7ff fc75 	bl	8003f4c <service_BMP388>
		osSemaphoreAcquire(baroIRQSemaphoreHandle, osWaitForever);
 8004662:	bf00      	nop
 8004664:	e7f4      	b.n	8004650 <start_baro_irq_task+0x8>
 8004666:	bf00      	nop
 8004668:	20004aec 	.word	0x20004aec

0800466c <start_mag_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_mag_irq_task */
void start_mag_irq_task(void *argument)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_mag_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(magIRQSemaphoreHandle, osWaitForever);
 8004674:	4b05      	ldr	r3, [pc, #20]	@ (800468c <start_mag_irq_task+0x20>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800467c:	4618      	mov	r0, r3
 800467e:	f00a fd69 	bl	800f154 <osSemaphoreAcquire>
		service_LIS3MDL();
 8004682:	f7ff fc6d 	bl	8003f60 <service_LIS3MDL>
		osSemaphoreAcquire(magIRQSemaphoreHandle, osWaitForever);
 8004686:	bf00      	nop
 8004688:	e7f4      	b.n	8004674 <start_mag_irq_task+0x8>
 800468a:	bf00      	nop
 800468c:	20004af0 	.word	0x20004af0

08004690 <HAL_GPIO_EXTI_Callback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ACCEL_INT_Pin)
 800469a:	88fb      	ldrh	r3, [r7, #6]
 800469c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046a0:	d105      	bne.n	80046ae <HAL_GPIO_EXTI_Callback+0x1e>
	{
		osSemaphoreRelease(accIRQSemaphoreHandle);
 80046a2:	4b13      	ldr	r3, [pc, #76]	@ (80046f0 <HAL_GPIO_EXTI_Callback+0x60>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f00a fda6 	bl	800f1f8 <osSemaphoreRelease>
	}
	else if (GPIO_Pin == MAG_DRDY_Pin)
	{
		osSemaphoreRelease(magIRQSemaphoreHandle);
	}
}
 80046ac:	e01b      	b.n	80046e6 <HAL_GPIO_EXTI_Callback+0x56>
	else if (GPIO_Pin == GYRO_INT_Pin)
 80046ae:	88fb      	ldrh	r3, [r7, #6]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d105      	bne.n	80046c0 <HAL_GPIO_EXTI_Callback+0x30>
		osSemaphoreRelease(gyroIRQSemaphoreHandle);
 80046b4:	4b0f      	ldr	r3, [pc, #60]	@ (80046f4 <HAL_GPIO_EXTI_Callback+0x64>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f00a fd9d 	bl	800f1f8 <osSemaphoreRelease>
}
 80046be:	e012      	b.n	80046e6 <HAL_GPIO_EXTI_Callback+0x56>
	else if (GPIO_Pin == BMP_INT_Pin)
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046c6:	d105      	bne.n	80046d4 <HAL_GPIO_EXTI_Callback+0x44>
		osSemaphoreRelease(baroIRQSemaphoreHandle);
 80046c8:	4b0b      	ldr	r3, [pc, #44]	@ (80046f8 <HAL_GPIO_EXTI_Callback+0x68>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f00a fd93 	bl	800f1f8 <osSemaphoreRelease>
}
 80046d2:	e008      	b.n	80046e6 <HAL_GPIO_EXTI_Callback+0x56>
	else if (GPIO_Pin == MAG_DRDY_Pin)
 80046d4:	88fb      	ldrh	r3, [r7, #6]
 80046d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046da:	d104      	bne.n	80046e6 <HAL_GPIO_EXTI_Callback+0x56>
		osSemaphoreRelease(magIRQSemaphoreHandle);
 80046dc:	4b07      	ldr	r3, [pc, #28]	@ (80046fc <HAL_GPIO_EXTI_Callback+0x6c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f00a fd89 	bl	800f1f8 <osSemaphoreRelease>
}
 80046e6:	bf00      	nop
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20004ae4 	.word	0x20004ae4
 80046f4:	20004ae8 	.word	0x20004ae8
 80046f8:	20004aec 	.word	0x20004aec
 80046fc:	20004af0 	.word	0x20004af0

08004700 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004704:	4b0d      	ldr	r3, [pc, #52]	@ (800473c <MX_CRC_Init+0x3c>)
 8004706:	4a0e      	ldr	r2, [pc, #56]	@ (8004740 <MX_CRC_Init+0x40>)
 8004708:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800470a:	4b0c      	ldr	r3, [pc, #48]	@ (800473c <MX_CRC_Init+0x3c>)
 800470c:	2200      	movs	r2, #0
 800470e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8004710:	4b0a      	ldr	r3, [pc, #40]	@ (800473c <MX_CRC_Init+0x3c>)
 8004712:	2200      	movs	r2, #0
 8004714:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8004716:	4b09      	ldr	r3, [pc, #36]	@ (800473c <MX_CRC_Init+0x3c>)
 8004718:	2200      	movs	r2, #0
 800471a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800471c:	4b07      	ldr	r3, [pc, #28]	@ (800473c <MX_CRC_Init+0x3c>)
 800471e:	2200      	movs	r2, #0
 8004720:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004722:	4b06      	ldr	r3, [pc, #24]	@ (800473c <MX_CRC_Init+0x3c>)
 8004724:	2201      	movs	r2, #1
 8004726:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004728:	4804      	ldr	r0, [pc, #16]	@ (800473c <MX_CRC_Init+0x3c>)
 800472a:	f001 f807 	bl	800573c <HAL_CRC_Init>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8004734:	f000 fb88 	bl	8004e48 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004738:	bf00      	nop
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20004af4 	.word	0x20004af4
 8004740:	40023000 	.word	0x40023000

08004744 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a0a      	ldr	r2, [pc, #40]	@ (800477c <HAL_CRC_MspInit+0x38>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d10b      	bne.n	800476e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004756:	4b0a      	ldr	r3, [pc, #40]	@ (8004780 <HAL_CRC_MspInit+0x3c>)
 8004758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800475a:	4a09      	ldr	r2, [pc, #36]	@ (8004780 <HAL_CRC_MspInit+0x3c>)
 800475c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004760:	6493      	str	r3, [r2, #72]	@ 0x48
 8004762:	4b07      	ldr	r3, [pc, #28]	@ (8004780 <HAL_CRC_MspInit+0x3c>)
 8004764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004766:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800476e:	bf00      	nop
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40023000 	.word	0x40023000
 8004780:	40021000 	.word	0x40021000

08004784 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8004788:	4b1f      	ldr	r3, [pc, #124]	@ (8004808 <MX_FDCAN1_Init+0x84>)
 800478a:	4a20      	ldr	r2, [pc, #128]	@ (800480c <MX_FDCAN1_Init+0x88>)
 800478c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800478e:	4b1e      	ldr	r3, [pc, #120]	@ (8004808 <MX_FDCAN1_Init+0x84>)
 8004790:	2200      	movs	r2, #0
 8004792:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004794:	4b1c      	ldr	r3, [pc, #112]	@ (8004808 <MX_FDCAN1_Init+0x84>)
 8004796:	2200      	movs	r2, #0
 8004798:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800479a:	4b1b      	ldr	r3, [pc, #108]	@ (8004808 <MX_FDCAN1_Init+0x84>)
 800479c:	2200      	movs	r2, #0
 800479e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80047a0:	4b19      	ldr	r3, [pc, #100]	@ (8004808 <MX_FDCAN1_Init+0x84>)
 80047a2:	2201      	movs	r2, #1
 80047a4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80047a6:	4b18      	ldr	r3, [pc, #96]	@ (8004808 <MX_FDCAN1_Init+0x84>)
 80047a8:	2201      	movs	r2, #1
 80047aa:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80047ac:	4b16      	ldr	r3, [pc, #88]	@ (8004808 <MX_FDCAN1_Init+0x84>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80047b2:	4b15      	ldr	r3, [pc, #84]	@ (8004808 <MX_FDCAN1_Init+0x84>)
 80047b4:	2210      	movs	r2, #16
 80047b6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80047b8:	4b13      	ldr	r3, [pc, #76]	@ (8004808 <MX_FDCAN1_Init+0x84>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 80047be:	4b12      	ldr	r3, [pc, #72]	@ (8004808 <MX_FDCAN1_Init+0x84>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 80047c4:	4b10      	ldr	r3, [pc, #64]	@ (8004808 <MX_FDCAN1_Init+0x84>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80047ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004808 <MX_FDCAN1_Init+0x84>)
 80047cc:	2201      	movs	r2, #1
 80047ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80047d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004808 <MX_FDCAN1_Init+0x84>)
 80047d2:	2201      	movs	r2, #1
 80047d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80047d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004808 <MX_FDCAN1_Init+0x84>)
 80047d8:	2201      	movs	r2, #1
 80047da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80047dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004808 <MX_FDCAN1_Init+0x84>)
 80047de:	2201      	movs	r2, #1
 80047e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80047e2:	4b09      	ldr	r3, [pc, #36]	@ (8004808 <MX_FDCAN1_Init+0x84>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80047e8:	4b07      	ldr	r3, [pc, #28]	@ (8004808 <MX_FDCAN1_Init+0x84>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80047ee:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <MX_FDCAN1_Init+0x84>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80047f4:	4804      	ldr	r0, [pc, #16]	@ (8004808 <MX_FDCAN1_Init+0x84>)
 80047f6:	f001 f893 	bl	8005920 <HAL_FDCAN_Init>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8004800:	f000 fb22 	bl	8004e48 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8004804:	bf00      	nop
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20004b18 	.word	0x20004b18
 800480c:	40006400 	.word	0x40006400

08004810 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8004814:	4b1f      	ldr	r3, [pc, #124]	@ (8004894 <MX_FDCAN2_Init+0x84>)
 8004816:	4a20      	ldr	r2, [pc, #128]	@ (8004898 <MX_FDCAN2_Init+0x88>)
 8004818:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800481a:	4b1e      	ldr	r3, [pc, #120]	@ (8004894 <MX_FDCAN2_Init+0x84>)
 800481c:	2200      	movs	r2, #0
 800481e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004820:	4b1c      	ldr	r3, [pc, #112]	@ (8004894 <MX_FDCAN2_Init+0x84>)
 8004822:	2200      	movs	r2, #0
 8004824:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8004826:	4b1b      	ldr	r3, [pc, #108]	@ (8004894 <MX_FDCAN2_Init+0x84>)
 8004828:	2200      	movs	r2, #0
 800482a:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 800482c:	4b19      	ldr	r3, [pc, #100]	@ (8004894 <MX_FDCAN2_Init+0x84>)
 800482e:	2201      	movs	r2, #1
 8004830:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = ENABLE;
 8004832:	4b18      	ldr	r3, [pc, #96]	@ (8004894 <MX_FDCAN2_Init+0x84>)
 8004834:	2201      	movs	r2, #1
 8004836:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8004838:	4b16      	ldr	r3, [pc, #88]	@ (8004894 <MX_FDCAN2_Init+0x84>)
 800483a:	2200      	movs	r2, #0
 800483c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800483e:	4b15      	ldr	r3, [pc, #84]	@ (8004894 <MX_FDCAN2_Init+0x84>)
 8004840:	2210      	movs	r2, #16
 8004842:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8004844:	4b13      	ldr	r3, [pc, #76]	@ (8004894 <MX_FDCAN2_Init+0x84>)
 8004846:	2201      	movs	r2, #1
 8004848:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 800484a:	4b12      	ldr	r3, [pc, #72]	@ (8004894 <MX_FDCAN2_Init+0x84>)
 800484c:	2201      	movs	r2, #1
 800484e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 8004850:	4b10      	ldr	r3, [pc, #64]	@ (8004894 <MX_FDCAN2_Init+0x84>)
 8004852:	2201      	movs	r2, #1
 8004854:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8004856:	4b0f      	ldr	r3, [pc, #60]	@ (8004894 <MX_FDCAN2_Init+0x84>)
 8004858:	2201      	movs	r2, #1
 800485a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800485c:	4b0d      	ldr	r3, [pc, #52]	@ (8004894 <MX_FDCAN2_Init+0x84>)
 800485e:	2201      	movs	r2, #1
 8004860:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8004862:	4b0c      	ldr	r3, [pc, #48]	@ (8004894 <MX_FDCAN2_Init+0x84>)
 8004864:	2201      	movs	r2, #1
 8004866:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8004868:	4b0a      	ldr	r3, [pc, #40]	@ (8004894 <MX_FDCAN2_Init+0x84>)
 800486a:	2201      	movs	r2, #1
 800486c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800486e:	4b09      	ldr	r3, [pc, #36]	@ (8004894 <MX_FDCAN2_Init+0x84>)
 8004870:	2200      	movs	r2, #0
 8004872:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8004874:	4b07      	ldr	r3, [pc, #28]	@ (8004894 <MX_FDCAN2_Init+0x84>)
 8004876:	2200      	movs	r2, #0
 8004878:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800487a:	4b06      	ldr	r3, [pc, #24]	@ (8004894 <MX_FDCAN2_Init+0x84>)
 800487c:	2200      	movs	r2, #0
 800487e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8004880:	4804      	ldr	r0, [pc, #16]	@ (8004894 <MX_FDCAN2_Init+0x84>)
 8004882:	f001 f84d 	bl	8005920 <HAL_FDCAN_Init>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 800488c:	f000 fadc 	bl	8004e48 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8004890:	bf00      	nop
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20004b7c 	.word	0x20004b7c
 8004898:	40006800 	.word	0x40006800

0800489c <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b0a0      	sub	sp, #128	@ 0x80
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	609a      	str	r2, [r3, #8]
 80048b0:	60da      	str	r2, [r3, #12]
 80048b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80048b4:	f107 0318 	add.w	r3, r7, #24
 80048b8:	2254      	movs	r2, #84	@ 0x54
 80048ba:	2100      	movs	r1, #0
 80048bc:	4618      	mov	r0, r3
 80048be:	f01b f9a2 	bl	801fc06 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a48      	ldr	r2, [pc, #288]	@ (80049e8 <HAL_FDCAN_MspInit+0x14c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d142      	bne.n	8004952 <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80048cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80048d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048d6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048d8:	f107 0318 	add.w	r3, r7, #24
 80048dc:	4618      	mov	r0, r3
 80048de:	f004 fccb 	bl	8009278 <HAL_RCCEx_PeriphCLKConfig>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80048e8:	f000 faae 	bl	8004e48 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80048ec:	4b3f      	ldr	r3, [pc, #252]	@ (80049ec <HAL_FDCAN_MspInit+0x150>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3301      	adds	r3, #1
 80048f2:	4a3e      	ldr	r2, [pc, #248]	@ (80049ec <HAL_FDCAN_MspInit+0x150>)
 80048f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80048f6:	4b3d      	ldr	r3, [pc, #244]	@ (80049ec <HAL_FDCAN_MspInit+0x150>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d10b      	bne.n	8004916 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80048fe:	4b3c      	ldr	r3, [pc, #240]	@ (80049f0 <HAL_FDCAN_MspInit+0x154>)
 8004900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004902:	4a3b      	ldr	r2, [pc, #236]	@ (80049f0 <HAL_FDCAN_MspInit+0x154>)
 8004904:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004908:	6593      	str	r3, [r2, #88]	@ 0x58
 800490a:	4b39      	ldr	r3, [pc, #228]	@ (80049f0 <HAL_FDCAN_MspInit+0x154>)
 800490c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004916:	4b36      	ldr	r3, [pc, #216]	@ (80049f0 <HAL_FDCAN_MspInit+0x154>)
 8004918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800491a:	4a35      	ldr	r2, [pc, #212]	@ (80049f0 <HAL_FDCAN_MspInit+0x154>)
 800491c:	f043 0302 	orr.w	r3, r3, #2
 8004920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004922:	4b33      	ldr	r3, [pc, #204]	@ (80049f0 <HAL_FDCAN_MspInit+0x154>)
 8004924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800492e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004932:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004934:	2302      	movs	r3, #2
 8004936:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004938:	2300      	movs	r3, #0
 800493a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800493c:	2300      	movs	r3, #0
 800493e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004940:	2309      	movs	r3, #9
 8004942:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004944:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004948:	4619      	mov	r1, r3
 800494a:	482a      	ldr	r0, [pc, #168]	@ (80049f4 <HAL_FDCAN_MspInit+0x158>)
 800494c:	f001 f9ae 	bl	8005cac <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8004950:	e045      	b.n	80049de <HAL_FDCAN_MspInit+0x142>
  else if(fdcanHandle->Instance==FDCAN2)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a28      	ldr	r2, [pc, #160]	@ (80049f8 <HAL_FDCAN_MspInit+0x15c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d140      	bne.n	80049de <HAL_FDCAN_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800495c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004960:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004962:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004966:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004968:	f107 0318 	add.w	r3, r7, #24
 800496c:	4618      	mov	r0, r3
 800496e:	f004 fc83 	bl	8009278 <HAL_RCCEx_PeriphCLKConfig>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <HAL_FDCAN_MspInit+0xe0>
      Error_Handler();
 8004978:	f000 fa66 	bl	8004e48 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800497c:	4b1b      	ldr	r3, [pc, #108]	@ (80049ec <HAL_FDCAN_MspInit+0x150>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3301      	adds	r3, #1
 8004982:	4a1a      	ldr	r2, [pc, #104]	@ (80049ec <HAL_FDCAN_MspInit+0x150>)
 8004984:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8004986:	4b19      	ldr	r3, [pc, #100]	@ (80049ec <HAL_FDCAN_MspInit+0x150>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d10b      	bne.n	80049a6 <HAL_FDCAN_MspInit+0x10a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800498e:	4b18      	ldr	r3, [pc, #96]	@ (80049f0 <HAL_FDCAN_MspInit+0x154>)
 8004990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004992:	4a17      	ldr	r2, [pc, #92]	@ (80049f0 <HAL_FDCAN_MspInit+0x154>)
 8004994:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004998:	6593      	str	r3, [r2, #88]	@ 0x58
 800499a:	4b15      	ldr	r3, [pc, #84]	@ (80049f0 <HAL_FDCAN_MspInit+0x154>)
 800499c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049a6:	4b12      	ldr	r3, [pc, #72]	@ (80049f0 <HAL_FDCAN_MspInit+0x154>)
 80049a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049aa:	4a11      	ldr	r2, [pc, #68]	@ (80049f0 <HAL_FDCAN_MspInit+0x154>)
 80049ac:	f043 0302 	orr.w	r3, r3, #2
 80049b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049b2:	4b0f      	ldr	r3, [pc, #60]	@ (80049f0 <HAL_FDCAN_MspInit+0x154>)
 80049b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	60bb      	str	r3, [r7, #8]
 80049bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80049be:	2360      	movs	r3, #96	@ 0x60
 80049c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049c2:	2302      	movs	r3, #2
 80049c4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ca:	2300      	movs	r3, #0
 80049cc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80049ce:	2309      	movs	r3, #9
 80049d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049d2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80049d6:	4619      	mov	r1, r3
 80049d8:	4806      	ldr	r0, [pc, #24]	@ (80049f4 <HAL_FDCAN_MspInit+0x158>)
 80049da:	f001 f967 	bl	8005cac <HAL_GPIO_Init>
}
 80049de:	bf00      	nop
 80049e0:	3780      	adds	r7, #128	@ 0x80
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40006400 	.word	0x40006400
 80049ec:	20004be0 	.word	0x20004be0
 80049f0:	40021000 	.word	0x40021000
 80049f4:	48000400 	.word	0x48000400
 80049f8:	40006800 	.word	0x40006800

080049fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b08a      	sub	sp, #40	@ 0x28
 8004a00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a02:	f107 0314 	add.w	r3, r7, #20
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	605a      	str	r2, [r3, #4]
 8004a0c:	609a      	str	r2, [r3, #8]
 8004a0e:	60da      	str	r2, [r3, #12]
 8004a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a12:	4b72      	ldr	r3, [pc, #456]	@ (8004bdc <MX_GPIO_Init+0x1e0>)
 8004a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a16:	4a71      	ldr	r2, [pc, #452]	@ (8004bdc <MX_GPIO_Init+0x1e0>)
 8004a18:	f043 0304 	orr.w	r3, r3, #4
 8004a1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a1e:	4b6f      	ldr	r3, [pc, #444]	@ (8004bdc <MX_GPIO_Init+0x1e0>)
 8004a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a2a:	4b6c      	ldr	r3, [pc, #432]	@ (8004bdc <MX_GPIO_Init+0x1e0>)
 8004a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a2e:	4a6b      	ldr	r2, [pc, #428]	@ (8004bdc <MX_GPIO_Init+0x1e0>)
 8004a30:	f043 0320 	orr.w	r3, r3, #32
 8004a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a36:	4b69      	ldr	r3, [pc, #420]	@ (8004bdc <MX_GPIO_Init+0x1e0>)
 8004a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a42:	4b66      	ldr	r3, [pc, #408]	@ (8004bdc <MX_GPIO_Init+0x1e0>)
 8004a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a46:	4a65      	ldr	r2, [pc, #404]	@ (8004bdc <MX_GPIO_Init+0x1e0>)
 8004a48:	f043 0301 	orr.w	r3, r3, #1
 8004a4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a4e:	4b63      	ldr	r3, [pc, #396]	@ (8004bdc <MX_GPIO_Init+0x1e0>)
 8004a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	60bb      	str	r3, [r7, #8]
 8004a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a5a:	4b60      	ldr	r3, [pc, #384]	@ (8004bdc <MX_GPIO_Init+0x1e0>)
 8004a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a5e:	4a5f      	ldr	r2, [pc, #380]	@ (8004bdc <MX_GPIO_Init+0x1e0>)
 8004a60:	f043 0302 	orr.w	r3, r3, #2
 8004a64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a66:	4b5d      	ldr	r3, [pc, #372]	@ (8004bdc <MX_GPIO_Init+0x1e0>)
 8004a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	607b      	str	r3, [r7, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO2_Pin|GPIO3_Pin, GPIO_PIN_RESET);
 8004a72:	2200      	movs	r2, #0
 8004a74:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8004a78:	4859      	ldr	r0, [pc, #356]	@ (8004be0 <MX_GPIO_Init+0x1e4>)
 8004a7a:	f001 fa99 	bl	8005fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GYRO_CS_Pin|ACCEL_CS_Pin, GPIO_PIN_SET);
 8004a7e:	2201      	movs	r2, #1
 8004a80:	2111      	movs	r1, #17
 8004a82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a86:	f001 fa93 	bl	8005fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CC2500_CS_GPIO_Port, CC2500_CS_Pin, GPIO_PIN_SET);
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	2102      	movs	r1, #2
 8004a8e:	4855      	ldr	r0, [pc, #340]	@ (8004be4 <MX_GPIO_Init+0x1e8>)
 8004a90:	f001 fa8e 	bl	8005fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO8_Pin|GPIO9_Pin|GPIO7_Pin|GPIO4_Pin
 8004a94:	2200      	movs	r2, #0
 8004a96:	f648 4190 	movw	r1, #35984	@ 0x8c90
 8004a9a:	4852      	ldr	r0, [pc, #328]	@ (8004be4 <MX_GPIO_Init+0x1e8>)
 8004a9c:	f001 fa88 	bl	8005fb0 <HAL_GPIO_WritePin>
                          |GPIO1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO6_Pin|GPIO5_Pin, GPIO_PIN_RESET);
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f44f 4104 	mov.w	r1, #33792	@ 0x8400
 8004aa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004aaa:	f001 fa81 	bl	8005fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO2_Pin GPIO3_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO3_Pin;
 8004aae:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8004ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004abc:	2300      	movs	r3, #0
 8004abe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ac0:	f107 0314 	add.w	r3, r7, #20
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4846      	ldr	r0, [pc, #280]	@ (8004be0 <MX_GPIO_Init+0x1e4>)
 8004ac8:	f001 f8f0 	bl	8005cac <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_INT_Pin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin;
 8004acc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ad2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004ad8:	2302      	movs	r3, #2
 8004ada:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_INT_GPIO_Port, &GPIO_InitStruct);
 8004adc:	f107 0314 	add.w	r3, r7, #20
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	483f      	ldr	r0, [pc, #252]	@ (8004be0 <MX_GPIO_Init+0x1e4>)
 8004ae4:	f001 f8e2 	bl	8005cac <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_CS_Pin ACCEL_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin|ACCEL_CS_Pin;
 8004ae8:	2311      	movs	r3, #17
 8004aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aec:	2301      	movs	r3, #1
 8004aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004af0:	2301      	movs	r3, #1
 8004af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af4:	2300      	movs	r3, #0
 8004af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004af8:	f107 0314 	add.w	r3, r7, #20
 8004afc:	4619      	mov	r1, r3
 8004afe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b02:	f001 f8d3 	bl	8005cac <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8004b06:	2302      	movs	r3, #2
 8004b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004b10:	2302      	movs	r3, #2
 8004b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8004b14:	f107 0314 	add.w	r3, r7, #20
 8004b18:	4619      	mov	r1, r3
 8004b1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b1e:	f001 f8c5 	bl	8005cac <HAL_GPIO_Init>

  /*Configure GPIO pins : CC2500_GDO0_Pin CC2500_GDO2_Pin MAG_INT_Pin */
  GPIO_InitStruct.Pin = CC2500_GDO0_Pin|CC2500_GDO2_Pin|MAG_INT_Pin;
 8004b22:	f242 0305 	movw	r3, #8197	@ 0x2005
 8004b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b30:	f107 0314 	add.w	r3, r7, #20
 8004b34:	4619      	mov	r1, r3
 8004b36:	482b      	ldr	r0, [pc, #172]	@ (8004be4 <MX_GPIO_Init+0x1e8>)
 8004b38:	f001 f8b8 	bl	8005cac <HAL_GPIO_Init>

  /*Configure GPIO pin : CC2500_CS_Pin */
  GPIO_InitStruct.Pin = CC2500_CS_Pin;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b40:	2301      	movs	r3, #1
 8004b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b44:	2301      	movs	r3, #1
 8004b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CC2500_CS_GPIO_Port, &GPIO_InitStruct);
 8004b4c:	f107 0314 	add.w	r3, r7, #20
 8004b50:	4619      	mov	r1, r3
 8004b52:	4824      	ldr	r0, [pc, #144]	@ (8004be4 <MX_GPIO_Init+0x1e8>)
 8004b54:	f001 f8aa 	bl	8005cac <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO8_Pin GPIO9_Pin GPIO7_Pin GPIO4_Pin
                           GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO8_Pin|GPIO9_Pin|GPIO7_Pin|GPIO4_Pin
 8004b58:	f648 4390 	movw	r3, #35984	@ 0x8c90
 8004b5c:	617b      	str	r3, [r7, #20]
                          |GPIO1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b66:	2300      	movs	r3, #0
 8004b68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b6a:	f107 0314 	add.w	r3, r7, #20
 8004b6e:	4619      	mov	r1, r3
 8004b70:	481c      	ldr	r0, [pc, #112]	@ (8004be4 <MX_GPIO_Init+0x1e8>)
 8004b72:	f001 f89b 	bl	8005cac <HAL_GPIO_Init>

  /*Configure GPIO pins : MAG_DRDY_Pin BMP_INT_Pin */
  GPIO_InitStruct.Pin = MAG_DRDY_Pin|BMP_INT_Pin;
 8004b76:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8004b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b7c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004b82:	2302      	movs	r3, #2
 8004b84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b86:	f107 0314 	add.w	r3, r7, #20
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4815      	ldr	r0, [pc, #84]	@ (8004be4 <MX_GPIO_Init+0x1e8>)
 8004b8e:	f001 f88d 	bl	8005cac <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO6_Pin GPIO5_Pin */
  GPIO_InitStruct.Pin = GPIO6_Pin|GPIO5_Pin;
 8004b92:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8004b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba4:	f107 0314 	add.w	r3, r7, #20
 8004ba8:	4619      	mov	r1, r3
 8004baa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004bae:	f001 f87d 	bl	8005cac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	2105      	movs	r1, #5
 8004bb6:	2007      	movs	r0, #7
 8004bb8:	f000 fd98 	bl	80056ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004bbc:	2007      	movs	r0, #7
 8004bbe:	f000 fdaf 	bl	8005720 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2105      	movs	r1, #5
 8004bc6:	2028      	movs	r0, #40	@ 0x28
 8004bc8:	f000 fd90 	bl	80056ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004bcc:	2028      	movs	r0, #40	@ 0x28
 8004bce:	f000 fda7 	bl	8005720 <HAL_NVIC_EnableIRQ>

}
 8004bd2:	bf00      	nop
 8004bd4:	3728      	adds	r7, #40	@ 0x28
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	48000800 	.word	0x48000800
 8004be4:	48000400 	.word	0x48000400

08004be8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004bec:	4b1b      	ldr	r3, [pc, #108]	@ (8004c5c <MX_I2C2_Init+0x74>)
 8004bee:	4a1c      	ldr	r2, [pc, #112]	@ (8004c60 <MX_I2C2_Init+0x78>)
 8004bf0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40621236;
 8004bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8004c5c <MX_I2C2_Init+0x74>)
 8004bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c64 <MX_I2C2_Init+0x7c>)
 8004bf6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004bf8:	4b18      	ldr	r3, [pc, #96]	@ (8004c5c <MX_I2C2_Init+0x74>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004bfe:	4b17      	ldr	r3, [pc, #92]	@ (8004c5c <MX_I2C2_Init+0x74>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c04:	4b15      	ldr	r3, [pc, #84]	@ (8004c5c <MX_I2C2_Init+0x74>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004c0a:	4b14      	ldr	r3, [pc, #80]	@ (8004c5c <MX_I2C2_Init+0x74>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004c10:	4b12      	ldr	r3, [pc, #72]	@ (8004c5c <MX_I2C2_Init+0x74>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c16:	4b11      	ldr	r3, [pc, #68]	@ (8004c5c <MX_I2C2_Init+0x74>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c5c <MX_I2C2_Init+0x74>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004c22:	480e      	ldr	r0, [pc, #56]	@ (8004c5c <MX_I2C2_Init+0x74>)
 8004c24:	f001 f9f4 	bl	8006010 <HAL_I2C_Init>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004c2e:	f000 f90b 	bl	8004e48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004c32:	2100      	movs	r1, #0
 8004c34:	4809      	ldr	r0, [pc, #36]	@ (8004c5c <MX_I2C2_Init+0x74>)
 8004c36:	f001 ff77 	bl	8006b28 <HAL_I2CEx_ConfigAnalogFilter>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004c40:	f000 f902 	bl	8004e48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004c44:	2100      	movs	r1, #0
 8004c46:	4805      	ldr	r0, [pc, #20]	@ (8004c5c <MX_I2C2_Init+0x74>)
 8004c48:	f001 ffb9 	bl	8006bbe <HAL_I2CEx_ConfigDigitalFilter>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004c52:	f000 f8f9 	bl	8004e48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004c56:	bf00      	nop
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20004be4 	.word	0x20004be4
 8004c60:	40005800 	.word	0x40005800
 8004c64:	40621236 	.word	0x40621236

08004c68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b09e      	sub	sp, #120	@ 0x78
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	605a      	str	r2, [r3, #4]
 8004c7a:	609a      	str	r2, [r3, #8]
 8004c7c:	60da      	str	r2, [r3, #12]
 8004c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c80:	f107 0310 	add.w	r3, r7, #16
 8004c84:	2254      	movs	r2, #84	@ 0x54
 8004c86:	2100      	movs	r1, #0
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f01a ffbc 	bl	801fc06 <memset>
  if(i2cHandle->Instance==I2C2)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a1f      	ldr	r2, [pc, #124]	@ (8004d10 <HAL_I2C_MspInit+0xa8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d137      	bne.n	8004d08 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004c98:	2380      	movs	r3, #128	@ 0x80
 8004c9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ca0:	f107 0310 	add.w	r3, r7, #16
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f004 fae7 	bl	8009278 <HAL_RCCEx_PeriphCLKConfig>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004cb0:	f000 f8ca 	bl	8004e48 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cb4:	4b17      	ldr	r3, [pc, #92]	@ (8004d14 <HAL_I2C_MspInit+0xac>)
 8004cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cb8:	4a16      	ldr	r2, [pc, #88]	@ (8004d14 <HAL_I2C_MspInit+0xac>)
 8004cba:	f043 0301 	orr.w	r3, r3, #1
 8004cbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cc0:	4b14      	ldr	r3, [pc, #80]	@ (8004d14 <HAL_I2C_MspInit+0xac>)
 8004cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004ccc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004cd0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cd2:	2312      	movs	r3, #18
 8004cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004cde:	2304      	movs	r3, #4
 8004ce0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ce2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004cec:	f000 ffde 	bl	8005cac <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004cf0:	4b08      	ldr	r3, [pc, #32]	@ (8004d14 <HAL_I2C_MspInit+0xac>)
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf4:	4a07      	ldr	r2, [pc, #28]	@ (8004d14 <HAL_I2C_MspInit+0xac>)
 8004cf6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004cfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cfc:	4b05      	ldr	r3, [pc, #20]	@ (8004d14 <HAL_I2C_MspInit+0xac>)
 8004cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d04:	60bb      	str	r3, [r7, #8]
 8004d06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004d08:	bf00      	nop
 8004d0a:	3778      	adds	r7, #120	@ 0x78
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40005800 	.word	0x40005800
 8004d14:	40021000 	.word	0x40021000

08004d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8004d1c:	f000 fbf7 	bl	800550e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d20:	f000 f81a 	bl	8004d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d24:	f7ff fe6a 	bl	80049fc <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8004d28:	f7ff fd2c 	bl	8004784 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8004d2c:	f7ff fd70 	bl	8004810 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8004d30:	f7ff ff5a 	bl	8004be8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8004d34:	f000 f88e 	bl	8004e54 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8004d38:	f000 fb1c 	bl	8005374 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8004d3c:	f000 face 	bl	80052dc <MX_TIM16_Init>
  MX_CRC_Init();
 8004d40:	f7ff fcde 	bl	8004700 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_Device_Init();
 8004d44:	f00d fcf0 	bl	8012728 <MX_USB_Device_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004d48:	f009 ff56 	bl	800ebf8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8004d4c:	f7ff fb8c 	bl	8004468 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004d50:	f009 ff76 	bl	800ec40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004d54:	bf00      	nop
 8004d56:	e7fd      	b.n	8004d54 <main+0x3c>

08004d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b094      	sub	sp, #80	@ 0x50
 8004d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d5e:	f107 0318 	add.w	r3, r7, #24
 8004d62:	2238      	movs	r2, #56	@ 0x38
 8004d64:	2100      	movs	r1, #0
 8004d66:	4618      	mov	r0, r3
 8004d68:	f01a ff4d 	bl	801fc06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d6c:	1d3b      	adds	r3, r7, #4
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	605a      	str	r2, [r3, #4]
 8004d74:	609a      	str	r2, [r3, #8]
 8004d76:	60da      	str	r2, [r3, #12]
 8004d78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	f003 fc6c 	bl	8008658 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8004d80:	2321      	movs	r3, #33	@ 0x21
 8004d82:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004d84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004d88:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d8e:	2302      	movs	r3, #2
 8004d90:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d92:	2303      	movs	r3, #3
 8004d94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004d96:	2304      	movs	r3, #4
 8004d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004d9a:	2355      	movs	r3, #85	@ 0x55
 8004d9c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8004da2:	2308      	movs	r3, #8
 8004da4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004da6:	2302      	movs	r3, #2
 8004da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004daa:	f107 0318 	add.w	r3, r7, #24
 8004dae:	4618      	mov	r0, r3
 8004db0:	f003 fd06 	bl	80087c0 <HAL_RCC_OscConfig>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004dba:	f000 f845 	bl	8004e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004dbe:	230f      	movs	r3, #15
 8004dc0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004dd2:	1d3b      	adds	r3, r7, #4
 8004dd4:	2104      	movs	r1, #4
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f004 f804 	bl	8008de4 <HAL_RCC_ClockConfig>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004de2:	f000 f831 	bl	8004e48 <Error_Handler>
  }
}
 8004de6:	bf00      	nop
 8004de8:	3750      	adds	r7, #80	@ 0x50
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */

void configureTimerForRunTimeStats(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerCounts = 0;
 8004df4:	4b03      	ldr	r3, [pc, #12]	@ (8004e04 <configureTimerForRunTimeStats+0x14>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim16);
 8004dfa:	4803      	ldr	r0, [pc, #12]	@ (8004e08 <configureTimerForRunTimeStats+0x18>)
 8004dfc:	f005 fa86 	bl	800a30c <HAL_TIM_Base_Start_IT>
}
 8004e00:	bf00      	nop
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20004c38 	.word	0x20004c38
 8004e08:	20004cf0 	.word	0x20004cf0

08004e0c <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerCounts;
 8004e10:	4b03      	ldr	r3, [pc, #12]	@ (8004e20 <getRunTimeCounterValue+0x14>)
 8004e12:	681b      	ldr	r3, [r3, #0]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	20004c38 	.word	0x20004c38

08004e24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a04      	ldr	r2, [pc, #16]	@ (8004e44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d101      	bne.n	8004e3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004e36:	f000 fb83 	bl	8005540 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004e3a:	bf00      	nop
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40001000 	.word	0x40001000

08004e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e4c:	b672      	cpsid	i
}
 8004e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e50:	bf00      	nop
 8004e52:	e7fd      	b.n	8004e50 <Error_Handler+0x8>

08004e54 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004e58:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec8 <MX_SPI1_Init+0x74>)
 8004e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004ecc <MX_SPI1_Init+0x78>)
 8004e5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec8 <MX_SPI1_Init+0x74>)
 8004e60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004e64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004e66:	4b18      	ldr	r3, [pc, #96]	@ (8004ec8 <MX_SPI1_Init+0x74>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e6c:	4b16      	ldr	r3, [pc, #88]	@ (8004ec8 <MX_SPI1_Init+0x74>)
 8004e6e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004e72:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e74:	4b14      	ldr	r3, [pc, #80]	@ (8004ec8 <MX_SPI1_Init+0x74>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004e7a:	4b13      	ldr	r3, [pc, #76]	@ (8004ec8 <MX_SPI1_Init+0x74>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004e80:	4b11      	ldr	r3, [pc, #68]	@ (8004ec8 <MX_SPI1_Init+0x74>)
 8004e82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e86:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004e88:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec8 <MX_SPI1_Init+0x74>)
 8004e8a:	2218      	movs	r2, #24
 8004e8c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec8 <MX_SPI1_Init+0x74>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004e94:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec8 <MX_SPI1_Init+0x74>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec8 <MX_SPI1_Init+0x74>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004ea0:	4b09      	ldr	r3, [pc, #36]	@ (8004ec8 <MX_SPI1_Init+0x74>)
 8004ea2:	2207      	movs	r2, #7
 8004ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004ea6:	4b08      	ldr	r3, [pc, #32]	@ (8004ec8 <MX_SPI1_Init+0x74>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004eac:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <MX_SPI1_Init+0x74>)
 8004eae:	2208      	movs	r2, #8
 8004eb0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004eb2:	4805      	ldr	r0, [pc, #20]	@ (8004ec8 <MX_SPI1_Init+0x74>)
 8004eb4:	f004 fc2e 	bl	8009714 <HAL_SPI_Init>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004ebe:	f7ff ffc3 	bl	8004e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004ec2:	bf00      	nop
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20004c3c 	.word	0x20004c3c
 8004ecc:	40013000 	.word	0x40013000

08004ed0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08a      	sub	sp, #40	@ 0x28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ed8:	f107 0314 	add.w	r3, r7, #20
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	605a      	str	r2, [r3, #4]
 8004ee2:	609a      	str	r2, [r3, #8]
 8004ee4:	60da      	str	r2, [r3, #12]
 8004ee6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a17      	ldr	r2, [pc, #92]	@ (8004f4c <HAL_SPI_MspInit+0x7c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d128      	bne.n	8004f44 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ef2:	4b17      	ldr	r3, [pc, #92]	@ (8004f50 <HAL_SPI_MspInit+0x80>)
 8004ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ef6:	4a16      	ldr	r2, [pc, #88]	@ (8004f50 <HAL_SPI_MspInit+0x80>)
 8004ef8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004efc:	6613      	str	r3, [r2, #96]	@ 0x60
 8004efe:	4b14      	ldr	r3, [pc, #80]	@ (8004f50 <HAL_SPI_MspInit+0x80>)
 8004f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f0a:	4b11      	ldr	r3, [pc, #68]	@ (8004f50 <HAL_SPI_MspInit+0x80>)
 8004f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f0e:	4a10      	ldr	r2, [pc, #64]	@ (8004f50 <HAL_SPI_MspInit+0x80>)
 8004f10:	f043 0301 	orr.w	r3, r3, #1
 8004f14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f16:	4b0e      	ldr	r3, [pc, #56]	@ (8004f50 <HAL_SPI_MspInit+0x80>)
 8004f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004f22:	23e0      	movs	r3, #224	@ 0xe0
 8004f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f26:	2302      	movs	r3, #2
 8004f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004f32:	2305      	movs	r3, #5
 8004f34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f36:	f107 0314 	add.w	r3, r7, #20
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f40:	f000 feb4 	bl	8005cac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004f44:	bf00      	nop
 8004f46:	3728      	adds	r7, #40	@ 0x28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40013000 	.word	0x40013000
 8004f50:	40021000 	.word	0x40021000

08004f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f5a:	4b12      	ldr	r3, [pc, #72]	@ (8004fa4 <HAL_MspInit+0x50>)
 8004f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f5e:	4a11      	ldr	r2, [pc, #68]	@ (8004fa4 <HAL_MspInit+0x50>)
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f66:	4b0f      	ldr	r3, [pc, #60]	@ (8004fa4 <HAL_MspInit+0x50>)
 8004f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	607b      	str	r3, [r7, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f72:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa4 <HAL_MspInit+0x50>)
 8004f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f76:	4a0b      	ldr	r2, [pc, #44]	@ (8004fa4 <HAL_MspInit+0x50>)
 8004f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f7e:	4b09      	ldr	r3, [pc, #36]	@ (8004fa4 <HAL_MspInit+0x50>)
 8004f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	210f      	movs	r1, #15
 8004f8e:	f06f 0001 	mvn.w	r0, #1
 8004f92:	f000 fbab 	bl	80056ec <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004f96:	f003 fc03 	bl	80087a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f9a:	bf00      	nop
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40021000 	.word	0x40021000

08004fa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08c      	sub	sp, #48	@ 0x30
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004fb8:	4b2c      	ldr	r3, [pc, #176]	@ (800506c <HAL_InitTick+0xc4>)
 8004fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fbc:	4a2b      	ldr	r2, [pc, #172]	@ (800506c <HAL_InitTick+0xc4>)
 8004fbe:	f043 0310 	orr.w	r3, r3, #16
 8004fc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fc4:	4b29      	ldr	r3, [pc, #164]	@ (800506c <HAL_InitTick+0xc4>)
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	60bb      	str	r3, [r7, #8]
 8004fce:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004fd0:	f107 020c 	add.w	r2, r7, #12
 8004fd4:	f107 0310 	add.w	r3, r7, #16
 8004fd8:	4611      	mov	r1, r2
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f004 f8d6 	bl	800918c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004fe0:	f004 f8a8 	bl	8009134 <HAL_RCC_GetPCLK1Freq>
 8004fe4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe8:	4a21      	ldr	r2, [pc, #132]	@ (8005070 <HAL_InitTick+0xc8>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	0c9b      	lsrs	r3, r3, #18
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8005074 <HAL_InitTick+0xcc>)
 8004ff6:	4a20      	ldr	r2, [pc, #128]	@ (8005078 <HAL_InitTick+0xd0>)
 8004ff8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8005074 <HAL_InitTick+0xcc>)
 8004ffc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005000:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005002:	4a1c      	ldr	r2, [pc, #112]	@ (8005074 <HAL_InitTick+0xcc>)
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005008:	4b1a      	ldr	r3, [pc, #104]	@ (8005074 <HAL_InitTick+0xcc>)
 800500a:	2200      	movs	r2, #0
 800500c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800500e:	4b19      	ldr	r3, [pc, #100]	@ (8005074 <HAL_InitTick+0xcc>)
 8005010:	2200      	movs	r2, #0
 8005012:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8005014:	4817      	ldr	r0, [pc, #92]	@ (8005074 <HAL_InitTick+0xcc>)
 8005016:	f005 f921 	bl	800a25c <HAL_TIM_Base_Init>
 800501a:	4603      	mov	r3, r0
 800501c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8005020:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005024:	2b00      	cmp	r3, #0
 8005026:	d11b      	bne.n	8005060 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005028:	4812      	ldr	r0, [pc, #72]	@ (8005074 <HAL_InitTick+0xcc>)
 800502a:	f005 f96f 	bl	800a30c <HAL_TIM_Base_Start_IT>
 800502e:	4603      	mov	r3, r0
 8005030:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8005034:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005038:	2b00      	cmp	r3, #0
 800503a:	d111      	bne.n	8005060 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800503c:	2036      	movs	r0, #54	@ 0x36
 800503e:	f000 fb6f 	bl	8005720 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b0f      	cmp	r3, #15
 8005046:	d808      	bhi.n	800505a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005048:	2200      	movs	r2, #0
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	2036      	movs	r0, #54	@ 0x36
 800504e:	f000 fb4d 	bl	80056ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005052:	4a0a      	ldr	r2, [pc, #40]	@ (800507c <HAL_InitTick+0xd4>)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	e002      	b.n	8005060 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005060:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005064:	4618      	mov	r0, r3
 8005066:	3730      	adds	r7, #48	@ 0x30
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	40021000 	.word	0x40021000
 8005070:	431bde83 	.word	0x431bde83
 8005074:	20004ca0 	.word	0x20004ca0
 8005078:	40001000 	.word	0x40001000
 800507c:	20000010 	.word	0x20000010

08005080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005084:	bf00      	nop
 8005086:	e7fd      	b.n	8005084 <NMI_Handler+0x4>

08005088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800508c:	bf00      	nop
 800508e:	e7fd      	b.n	800508c <HardFault_Handler+0x4>

08005090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005094:	bf00      	nop
 8005096:	e7fd      	b.n	8005094 <MemManage_Handler+0x4>

08005098 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800509c:	bf00      	nop
 800509e:	e7fd      	b.n	800509c <BusFault_Handler+0x4>

080050a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050a4:	bf00      	nop
 80050a6:	e7fd      	b.n	80050a4 <UsageFault_Handler+0x4>

080050a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050ac:	bf00      	nop
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT_Pin);
 80050ba:	2002      	movs	r0, #2
 80050bc:	f000 ff90 	bl	8005fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80050c0:	bf00      	nop
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80050c8:	4802      	ldr	r0, [pc, #8]	@ (80050d4 <USB_LP_IRQHandler+0x10>)
 80050ca:	f001 feb4 	bl	8006e36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80050ce:	bf00      	nop
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	200176a8 	.word	0x200176a8

080050d8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  ++ulHighFrequencyTimerCounts;		// Needed for FREERTOS stats
 80050dc:	4b04      	ldr	r3, [pc, #16]	@ (80050f0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3301      	adds	r3, #1
 80050e2:	4a03      	ldr	r2, [pc, #12]	@ (80050f0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80050e4:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80050e6:	4803      	ldr	r0, [pc, #12]	@ (80050f4 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 80050e8:	f005 f988 	bl	800a3fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80050ec:	bf00      	nop
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	20004c38 	.word	0x20004c38
 80050f4:	20004cf0 	.word	0x20004cf0

080050f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAG_DRDY_Pin);
 80050fc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005100:	f000 ff6e 	bl	8005fe0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BMP_INT_Pin);
 8005104:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005108:	f000 ff6a 	bl	8005fe0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INT_Pin);
 800510c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005110:	f000 ff66 	bl	8005fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005114:	bf00      	nop
 8005116:	bd80      	pop	{r7, pc}

08005118 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800511c:	4802      	ldr	r0, [pc, #8]	@ (8005128 <TIM6_DAC_IRQHandler+0x10>)
 800511e:	f005 f96d 	bl	800a3fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005122:	bf00      	nop
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20004ca0 	.word	0x20004ca0

0800512c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  return 1;
 8005130:	2301      	movs	r3, #1
}
 8005132:	4618      	mov	r0, r3
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <_kill>:

int _kill(int pid, int sig)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005146:	f01a fe5b 	bl	801fe00 <__errno>
 800514a:	4603      	mov	r3, r0
 800514c:	2216      	movs	r2, #22
 800514e:	601a      	str	r2, [r3, #0]
  return -1;
 8005150:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005154:	4618      	mov	r0, r3
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <_exit>:

void _exit (int status)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005164:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff ffe7 	bl	800513c <_kill>
  while (1) {}    /* Make sure we hang here */
 800516e:	bf00      	nop
 8005170:	e7fd      	b.n	800516e <_exit+0x12>

08005172 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b086      	sub	sp, #24
 8005176:	af00      	add	r7, sp, #0
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	e00a      	b.n	800519a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005184:	f3af 8000 	nop.w
 8005188:	4601      	mov	r1, r0
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	60ba      	str	r2, [r7, #8]
 8005190:	b2ca      	uxtb	r2, r1
 8005192:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	3301      	adds	r3, #1
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	429a      	cmp	r2, r3
 80051a0:	dbf0      	blt.n	8005184 <_read+0x12>
  }

  return len;
 80051a2:	687b      	ldr	r3, [r7, #4]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	e009      	b.n	80051d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	60ba      	str	r2, [r7, #8]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	3301      	adds	r3, #1
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	dbf1      	blt.n	80051be <_write+0x12>
  }
  return len;
 80051da:	687b      	ldr	r3, [r7, #4]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <_close>:

int _close(int file)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80051ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800520c:	605a      	str	r2, [r3, #4]
  return 0;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <_isatty>:

int _isatty(int file)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005224:	2301      	movs	r3, #1
}
 8005226:	4618      	mov	r0, r3
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005232:	b480      	push	{r7}
 8005234:	b085      	sub	sp, #20
 8005236:	af00      	add	r7, sp, #0
 8005238:	60f8      	str	r0, [r7, #12]
 800523a:	60b9      	str	r1, [r7, #8]
 800523c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005254:	4a14      	ldr	r2, [pc, #80]	@ (80052a8 <_sbrk+0x5c>)
 8005256:	4b15      	ldr	r3, [pc, #84]	@ (80052ac <_sbrk+0x60>)
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005260:	4b13      	ldr	r3, [pc, #76]	@ (80052b0 <_sbrk+0x64>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d102      	bne.n	800526e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005268:	4b11      	ldr	r3, [pc, #68]	@ (80052b0 <_sbrk+0x64>)
 800526a:	4a12      	ldr	r2, [pc, #72]	@ (80052b4 <_sbrk+0x68>)
 800526c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800526e:	4b10      	ldr	r3, [pc, #64]	@ (80052b0 <_sbrk+0x64>)
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4413      	add	r3, r2
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	429a      	cmp	r2, r3
 800527a:	d207      	bcs.n	800528c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800527c:	f01a fdc0 	bl	801fe00 <__errno>
 8005280:	4603      	mov	r3, r0
 8005282:	220c      	movs	r2, #12
 8005284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005286:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800528a:	e009      	b.n	80052a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800528c:	4b08      	ldr	r3, [pc, #32]	@ (80052b0 <_sbrk+0x64>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005292:	4b07      	ldr	r3, [pc, #28]	@ (80052b0 <_sbrk+0x64>)
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4413      	add	r3, r2
 800529a:	4a05      	ldr	r2, [pc, #20]	@ (80052b0 <_sbrk+0x64>)
 800529c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800529e:	68fb      	ldr	r3, [r7, #12]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	20020000 	.word	0x20020000
 80052ac:	00000400 	.word	0x00000400
 80052b0:	20004cec 	.word	0x20004cec
 80052b4:	20017cf8 	.word	0x20017cf8

080052b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80052bc:	4b06      	ldr	r3, [pc, #24]	@ (80052d8 <SystemInit+0x20>)
 80052be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c2:	4a05      	ldr	r2, [pc, #20]	@ (80052d8 <SystemInit+0x20>)
 80052c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052cc:	bf00      	nop
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	e000ed00 	.word	0xe000ed00

080052dc <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80052e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005320 <MX_TIM16_Init+0x44>)
 80052e2:	4a10      	ldr	r2, [pc, #64]	@ (8005324 <MX_TIM16_Init+0x48>)
 80052e4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80052e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005320 <MX_TIM16_Init+0x44>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005320 <MX_TIM16_Init+0x44>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1699;
 80052f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005320 <MX_TIM16_Init+0x44>)
 80052f4:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80052f8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052fa:	4b09      	ldr	r3, [pc, #36]	@ (8005320 <MX_TIM16_Init+0x44>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005300:	4b07      	ldr	r3, [pc, #28]	@ (8005320 <MX_TIM16_Init+0x44>)
 8005302:	2200      	movs	r2, #0
 8005304:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005306:	4b06      	ldr	r3, [pc, #24]	@ (8005320 <MX_TIM16_Init+0x44>)
 8005308:	2200      	movs	r2, #0
 800530a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800530c:	4804      	ldr	r0, [pc, #16]	@ (8005320 <MX_TIM16_Init+0x44>)
 800530e:	f004 ffa5 	bl	800a25c <HAL_TIM_Base_Init>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005318:	f7ff fd96 	bl	8004e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800531c:	bf00      	nop
 800531e:	bd80      	pop	{r7, pc}
 8005320:	20004cf0 	.word	0x20004cf0
 8005324:	40014400 	.word	0x40014400

08005328 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a0d      	ldr	r2, [pc, #52]	@ (800536c <HAL_TIM_Base_MspInit+0x44>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d113      	bne.n	8005362 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800533a:	4b0d      	ldr	r3, [pc, #52]	@ (8005370 <HAL_TIM_Base_MspInit+0x48>)
 800533c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800533e:	4a0c      	ldr	r2, [pc, #48]	@ (8005370 <HAL_TIM_Base_MspInit+0x48>)
 8005340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005344:	6613      	str	r3, [r2, #96]	@ 0x60
 8005346:	4b0a      	ldr	r3, [pc, #40]	@ (8005370 <HAL_TIM_Base_MspInit+0x48>)
 8005348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800534a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8005352:	2200      	movs	r2, #0
 8005354:	2105      	movs	r1, #5
 8005356:	2019      	movs	r0, #25
 8005358:	f000 f9c8 	bl	80056ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800535c:	2019      	movs	r0, #25
 800535e:	f000 f9df 	bl	8005720 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8005362:	bf00      	nop
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40014400 	.word	0x40014400
 8005370:	40021000 	.word	0x40021000

08005374 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005378:	4b22      	ldr	r3, [pc, #136]	@ (8005404 <MX_USART2_UART_Init+0x90>)
 800537a:	4a23      	ldr	r2, [pc, #140]	@ (8005408 <MX_USART2_UART_Init+0x94>)
 800537c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800537e:	4b21      	ldr	r3, [pc, #132]	@ (8005404 <MX_USART2_UART_Init+0x90>)
 8005380:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005386:	4b1f      	ldr	r3, [pc, #124]	@ (8005404 <MX_USART2_UART_Init+0x90>)
 8005388:	2200      	movs	r2, #0
 800538a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800538c:	4b1d      	ldr	r3, [pc, #116]	@ (8005404 <MX_USART2_UART_Init+0x90>)
 800538e:	2200      	movs	r2, #0
 8005390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005392:	4b1c      	ldr	r3, [pc, #112]	@ (8005404 <MX_USART2_UART_Init+0x90>)
 8005394:	2200      	movs	r2, #0
 8005396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005398:	4b1a      	ldr	r3, [pc, #104]	@ (8005404 <MX_USART2_UART_Init+0x90>)
 800539a:	220c      	movs	r2, #12
 800539c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800539e:	4b19      	ldr	r3, [pc, #100]	@ (8005404 <MX_USART2_UART_Init+0x90>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80053a4:	4b17      	ldr	r3, [pc, #92]	@ (8005404 <MX_USART2_UART_Init+0x90>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80053aa:	4b16      	ldr	r3, [pc, #88]	@ (8005404 <MX_USART2_UART_Init+0x90>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80053b0:	4b14      	ldr	r3, [pc, #80]	@ (8005404 <MX_USART2_UART_Init+0x90>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80053b6:	4b13      	ldr	r3, [pc, #76]	@ (8005404 <MX_USART2_UART_Init+0x90>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80053bc:	4811      	ldr	r0, [pc, #68]	@ (8005404 <MX_USART2_UART_Init+0x90>)
 80053be:	f005 fa8f 	bl	800a8e0 <HAL_UART_Init>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80053c8:	f7ff fd3e 	bl	8004e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053cc:	2100      	movs	r1, #0
 80053ce:	480d      	ldr	r0, [pc, #52]	@ (8005404 <MX_USART2_UART_Init+0x90>)
 80053d0:	f006 f82a 	bl	800b428 <HAL_UARTEx_SetTxFifoThreshold>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80053da:	f7ff fd35 	bl	8004e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053de:	2100      	movs	r1, #0
 80053e0:	4808      	ldr	r0, [pc, #32]	@ (8005404 <MX_USART2_UART_Init+0x90>)
 80053e2:	f006 f85f 	bl	800b4a4 <HAL_UARTEx_SetRxFifoThreshold>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80053ec:	f7ff fd2c 	bl	8004e48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80053f0:	4804      	ldr	r0, [pc, #16]	@ (8005404 <MX_USART2_UART_Init+0x90>)
 80053f2:	f005 ffe0 	bl	800b3b6 <HAL_UARTEx_DisableFifoMode>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80053fc:	f7ff fd24 	bl	8004e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005400:	bf00      	nop
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20004d3c 	.word	0x20004d3c
 8005408:	40004400 	.word	0x40004400

0800540c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b09e      	sub	sp, #120	@ 0x78
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005414:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	605a      	str	r2, [r3, #4]
 800541e:	609a      	str	r2, [r3, #8]
 8005420:	60da      	str	r2, [r3, #12]
 8005422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005424:	f107 0310 	add.w	r3, r7, #16
 8005428:	2254      	movs	r2, #84	@ 0x54
 800542a:	2100      	movs	r1, #0
 800542c:	4618      	mov	r0, r3
 800542e:	f01a fbea 	bl	801fc06 <memset>
  if(uartHandle->Instance==USART2)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1f      	ldr	r2, [pc, #124]	@ (80054b4 <HAL_UART_MspInit+0xa8>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d136      	bne.n	80054aa <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800543c:	2302      	movs	r3, #2
 800543e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005440:	2300      	movs	r3, #0
 8005442:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005444:	f107 0310 	add.w	r3, r7, #16
 8005448:	4618      	mov	r0, r3
 800544a:	f003 ff15 	bl	8009278 <HAL_RCCEx_PeriphCLKConfig>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005454:	f7ff fcf8 	bl	8004e48 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005458:	4b17      	ldr	r3, [pc, #92]	@ (80054b8 <HAL_UART_MspInit+0xac>)
 800545a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800545c:	4a16      	ldr	r2, [pc, #88]	@ (80054b8 <HAL_UART_MspInit+0xac>)
 800545e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005462:	6593      	str	r3, [r2, #88]	@ 0x58
 8005464:	4b14      	ldr	r3, [pc, #80]	@ (80054b8 <HAL_UART_MspInit+0xac>)
 8005466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005470:	4b11      	ldr	r3, [pc, #68]	@ (80054b8 <HAL_UART_MspInit+0xac>)
 8005472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005474:	4a10      	ldr	r2, [pc, #64]	@ (80054b8 <HAL_UART_MspInit+0xac>)
 8005476:	f043 0301 	orr.w	r3, r3, #1
 800547a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800547c:	4b0e      	ldr	r3, [pc, #56]	@ (80054b8 <HAL_UART_MspInit+0xac>)
 800547e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	60bb      	str	r3, [r7, #8]
 8005486:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005488:	230c      	movs	r3, #12
 800548a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800548c:	2302      	movs	r3, #2
 800548e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005490:	2300      	movs	r3, #0
 8005492:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005494:	2300      	movs	r3, #0
 8005496:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005498:	2307      	movs	r3, #7
 800549a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800549c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80054a0:	4619      	mov	r1, r3
 80054a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80054a6:	f000 fc01 	bl	8005cac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80054aa:	bf00      	nop
 80054ac:	3778      	adds	r7, #120	@ 0x78
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	40004400 	.word	0x40004400
 80054b8:	40021000 	.word	0x40021000

080054bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80054bc:	480d      	ldr	r0, [pc, #52]	@ (80054f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80054be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80054c0:	f7ff fefa 	bl	80052b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80054c4:	480c      	ldr	r0, [pc, #48]	@ (80054f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80054c6:	490d      	ldr	r1, [pc, #52]	@ (80054fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80054c8:	4a0d      	ldr	r2, [pc, #52]	@ (8005500 <LoopForever+0xe>)
  movs r3, #0
 80054ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80054cc:	e002      	b.n	80054d4 <LoopCopyDataInit>

080054ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054d2:	3304      	adds	r3, #4

080054d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054d8:	d3f9      	bcc.n	80054ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054da:	4a0a      	ldr	r2, [pc, #40]	@ (8005504 <LoopForever+0x12>)
  ldr r4, =_ebss
 80054dc:	4c0a      	ldr	r4, [pc, #40]	@ (8005508 <LoopForever+0x16>)
  movs r3, #0
 80054de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80054e0:	e001      	b.n	80054e6 <LoopFillZerobss>

080054e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80054e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80054e4:	3204      	adds	r2, #4

080054e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80054e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054e8:	d3fb      	bcc.n	80054e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80054ea:	f01a fc8f 	bl	801fe0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80054ee:	f7ff fc13 	bl	8004d18 <main>

080054f2 <LoopForever>:

LoopForever:
    b LoopForever
 80054f2:	e7fe      	b.n	80054f2 <LoopForever>
  ldr   r0, =_estack
 80054f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80054f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054fc:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 8005500:	08022e80 	.word	0x08022e80
  ldr r2, =_sbss
 8005504:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 8005508:	20017cf4 	.word	0x20017cf4

0800550c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800550c:	e7fe      	b.n	800550c <ADC1_2_IRQHandler>

0800550e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b082      	sub	sp, #8
 8005512:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005518:	2003      	movs	r0, #3
 800551a:	f000 f8dc 	bl	80056d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800551e:	200f      	movs	r0, #15
 8005520:	f7ff fd42 	bl	8004fa8 <HAL_InitTick>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	71fb      	strb	r3, [r7, #7]
 800552e:	e001      	b.n	8005534 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005530:	f7ff fd10 	bl	8004f54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005534:	79fb      	ldrb	r3, [r7, #7]

}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005544:	4b05      	ldr	r3, [pc, #20]	@ (800555c <HAL_IncTick+0x1c>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	4b05      	ldr	r3, [pc, #20]	@ (8005560 <HAL_IncTick+0x20>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4413      	add	r3, r2
 800554e:	4a03      	ldr	r2, [pc, #12]	@ (800555c <HAL_IncTick+0x1c>)
 8005550:	6013      	str	r3, [r2, #0]
}
 8005552:	bf00      	nop
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	20004dd0 	.word	0x20004dd0
 8005560:	20000014 	.word	0x20000014

08005564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  return uwTick;
 8005568:	4b03      	ldr	r3, [pc, #12]	@ (8005578 <HAL_GetTick+0x14>)
 800556a:	681b      	ldr	r3, [r3, #0]
}
 800556c:	4618      	mov	r0, r3
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20004dd0 	.word	0x20004dd0

0800557c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800558c:	4b0c      	ldr	r3, [pc, #48]	@ (80055c0 <__NVIC_SetPriorityGrouping+0x44>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005598:	4013      	ands	r3, r2
 800559a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80055a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055ae:	4a04      	ldr	r2, [pc, #16]	@ (80055c0 <__NVIC_SetPriorityGrouping+0x44>)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	60d3      	str	r3, [r2, #12]
}
 80055b4:	bf00      	nop
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	e000ed00 	.word	0xe000ed00

080055c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055c8:	4b04      	ldr	r3, [pc, #16]	@ (80055dc <__NVIC_GetPriorityGrouping+0x18>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	0a1b      	lsrs	r3, r3, #8
 80055ce:	f003 0307 	and.w	r3, r3, #7
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	e000ed00 	.word	0xe000ed00

080055e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	db0b      	blt.n	800560a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055f2:	79fb      	ldrb	r3, [r7, #7]
 80055f4:	f003 021f 	and.w	r2, r3, #31
 80055f8:	4907      	ldr	r1, [pc, #28]	@ (8005618 <__NVIC_EnableIRQ+0x38>)
 80055fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	2001      	movs	r0, #1
 8005602:	fa00 f202 	lsl.w	r2, r0, r2
 8005606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	e000e100 	.word	0xe000e100

0800561c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	4603      	mov	r3, r0
 8005624:	6039      	str	r1, [r7, #0]
 8005626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562c:	2b00      	cmp	r3, #0
 800562e:	db0a      	blt.n	8005646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	b2da      	uxtb	r2, r3
 8005634:	490c      	ldr	r1, [pc, #48]	@ (8005668 <__NVIC_SetPriority+0x4c>)
 8005636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800563a:	0112      	lsls	r2, r2, #4
 800563c:	b2d2      	uxtb	r2, r2
 800563e:	440b      	add	r3, r1
 8005640:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005644:	e00a      	b.n	800565c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	b2da      	uxtb	r2, r3
 800564a:	4908      	ldr	r1, [pc, #32]	@ (800566c <__NVIC_SetPriority+0x50>)
 800564c:	79fb      	ldrb	r3, [r7, #7]
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	3b04      	subs	r3, #4
 8005654:	0112      	lsls	r2, r2, #4
 8005656:	b2d2      	uxtb	r2, r2
 8005658:	440b      	add	r3, r1
 800565a:	761a      	strb	r2, [r3, #24]
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	e000e100 	.word	0xe000e100
 800566c:	e000ed00 	.word	0xe000ed00

08005670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005670:	b480      	push	{r7}
 8005672:	b089      	sub	sp, #36	@ 0x24
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	f1c3 0307 	rsb	r3, r3, #7
 800568a:	2b04      	cmp	r3, #4
 800568c:	bf28      	it	cs
 800568e:	2304      	movcs	r3, #4
 8005690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	3304      	adds	r3, #4
 8005696:	2b06      	cmp	r3, #6
 8005698:	d902      	bls.n	80056a0 <NVIC_EncodePriority+0x30>
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	3b03      	subs	r3, #3
 800569e:	e000      	b.n	80056a2 <NVIC_EncodePriority+0x32>
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	fa02 f303 	lsl.w	r3, r2, r3
 80056ae:	43da      	mvns	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	401a      	ands	r2, r3
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	fa01 f303 	lsl.w	r3, r1, r3
 80056c2:	43d9      	mvns	r1, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056c8:	4313      	orrs	r3, r2
         );
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3724      	adds	r7, #36	@ 0x24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7ff ff4c 	bl	800557c <__NVIC_SetPriorityGrouping>
}
 80056e4:	bf00      	nop
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
 80056f8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80056fa:	f7ff ff63 	bl	80055c4 <__NVIC_GetPriorityGrouping>
 80056fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	6978      	ldr	r0, [r7, #20]
 8005706:	f7ff ffb3 	bl	8005670 <NVIC_EncodePriority>
 800570a:	4602      	mov	r2, r0
 800570c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005710:	4611      	mov	r1, r2
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff ff82 	bl	800561c <__NVIC_SetPriority>
}
 8005718:	bf00      	nop
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800572a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff ff56 	bl	80055e0 <__NVIC_EnableIRQ>
}
 8005734:	bf00      	nop
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e054      	b.n	80057f8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	7f5b      	ldrb	r3, [r3, #29]
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b00      	cmp	r3, #0
 8005756:	d105      	bne.n	8005764 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7fe fff0 	bl	8004744 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	791b      	ldrb	r3, [r3, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10c      	bne.n	800578c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a22      	ldr	r2, [pc, #136]	@ (8005800 <HAL_CRC_Init+0xc4>)
 8005778:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0218 	bic.w	r2, r2, #24
 8005788:	609a      	str	r2, [r3, #8]
 800578a:	e00c      	b.n	80057a6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6899      	ldr	r1, [r3, #8]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	461a      	mov	r2, r3
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f834 	bl	8005804 <HAL_CRCEx_Polynomial_Set>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e028      	b.n	80057f8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	795b      	ldrb	r3, [r3, #5]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d105      	bne.n	80057ba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057b6:	611a      	str	r2, [r3, #16]
 80057b8:	e004      	b.n	80057c4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6912      	ldr	r2, [r2, #16]
 80057c2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695a      	ldr	r2, [r3, #20]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699a      	ldr	r2, [r3, #24]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	04c11db7 	.word	0x04c11db7

08005804 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005814:	231f      	movs	r3, #31
 8005816:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d102      	bne.n	8005828 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	75fb      	strb	r3, [r7, #23]
 8005826:	e063      	b.n	80058f0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005828:	bf00      	nop
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1e5a      	subs	r2, r3, #1
 800582e:	613a      	str	r2, [r7, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d009      	beq.n	8005848 <HAL_CRCEx_Polynomial_Set+0x44>
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	fa22 f303 	lsr.w	r3, r2, r3
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0f0      	beq.n	800582a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b18      	cmp	r3, #24
 800584c:	d846      	bhi.n	80058dc <HAL_CRCEx_Polynomial_Set+0xd8>
 800584e:	a201      	add	r2, pc, #4	@ (adr r2, 8005854 <HAL_CRCEx_Polynomial_Set+0x50>)
 8005850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005854:	080058e3 	.word	0x080058e3
 8005858:	080058dd 	.word	0x080058dd
 800585c:	080058dd 	.word	0x080058dd
 8005860:	080058dd 	.word	0x080058dd
 8005864:	080058dd 	.word	0x080058dd
 8005868:	080058dd 	.word	0x080058dd
 800586c:	080058dd 	.word	0x080058dd
 8005870:	080058dd 	.word	0x080058dd
 8005874:	080058d1 	.word	0x080058d1
 8005878:	080058dd 	.word	0x080058dd
 800587c:	080058dd 	.word	0x080058dd
 8005880:	080058dd 	.word	0x080058dd
 8005884:	080058dd 	.word	0x080058dd
 8005888:	080058dd 	.word	0x080058dd
 800588c:	080058dd 	.word	0x080058dd
 8005890:	080058dd 	.word	0x080058dd
 8005894:	080058c5 	.word	0x080058c5
 8005898:	080058dd 	.word	0x080058dd
 800589c:	080058dd 	.word	0x080058dd
 80058a0:	080058dd 	.word	0x080058dd
 80058a4:	080058dd 	.word	0x080058dd
 80058a8:	080058dd 	.word	0x080058dd
 80058ac:	080058dd 	.word	0x080058dd
 80058b0:	080058dd 	.word	0x080058dd
 80058b4:	080058b9 	.word	0x080058b9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	2b06      	cmp	r3, #6
 80058bc:	d913      	bls.n	80058e6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80058c2:	e010      	b.n	80058e6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	2b07      	cmp	r3, #7
 80058c8:	d90f      	bls.n	80058ea <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80058ce:	e00c      	b.n	80058ea <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b0f      	cmp	r3, #15
 80058d4:	d90b      	bls.n	80058ee <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80058da:	e008      	b.n	80058ee <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	75fb      	strb	r3, [r7, #23]
        break;
 80058e0:	e006      	b.n	80058f0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80058e2:	bf00      	nop
 80058e4:	e004      	b.n	80058f0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80058e6:	bf00      	nop
 80058e8:	e002      	b.n	80058f0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80058ea:	bf00      	nop
 80058ec:	e000      	b.n	80058f0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80058ee:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80058f0:	7dfb      	ldrb	r3, [r7, #23]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10d      	bne.n	8005912 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f023 0118 	bic.w	r1, r3, #24
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	430a      	orrs	r2, r1
 8005910:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005912:	7dfb      	ldrb	r3, [r7, #23]
}
 8005914:	4618      	mov	r0, r3
 8005916:	371c      	adds	r7, #28
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e147      	b.n	8005bc2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d106      	bne.n	800594c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7fe ffa8 	bl	800489c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0210 	bic.w	r2, r2, #16
 800595a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800595c:	f7ff fe02 	bl	8005564 <HAL_GetTick>
 8005960:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005962:	e012      	b.n	800598a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005964:	f7ff fdfe 	bl	8005564 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b0a      	cmp	r3, #10
 8005970:	d90b      	bls.n	800598a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005976:	f043 0201 	orr.w	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2203      	movs	r2, #3
 8005982:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e11b      	b.n	8005bc2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b08      	cmp	r3, #8
 8005996:	d0e5      	beq.n	8005964 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0201 	orr.w	r2, r2, #1
 80059a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059a8:	f7ff fddc 	bl	8005564 <HAL_GetTick>
 80059ac:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80059ae:	e012      	b.n	80059d6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80059b0:	f7ff fdd8 	bl	8005564 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b0a      	cmp	r3, #10
 80059bc:	d90b      	bls.n	80059d6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059c2:	f043 0201 	orr.w	r2, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2203      	movs	r2, #3
 80059ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e0f5      	b.n	8005bc2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0e5      	beq.n	80059b0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699a      	ldr	r2, [r3, #24]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0202 	orr.w	r2, r2, #2
 80059f2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a74      	ldr	r2, [pc, #464]	@ (8005bcc <HAL_FDCAN_Init+0x2ac>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d103      	bne.n	8005a06 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80059fe:	4a74      	ldr	r2, [pc, #464]	@ (8005bd0 <HAL_FDCAN_Init+0x2b0>)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	7c1b      	ldrb	r3, [r3, #16]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d108      	bne.n	8005a20 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	699a      	ldr	r2, [r3, #24]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a1c:	619a      	str	r2, [r3, #24]
 8005a1e:	e007      	b.n	8005a30 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699a      	ldr	r2, [r3, #24]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a2e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	7c5b      	ldrb	r3, [r3, #17]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d108      	bne.n	8005a4a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a46:	619a      	str	r2, [r3, #24]
 8005a48:	e007      	b.n	8005a5a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	699a      	ldr	r2, [r3, #24]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a58:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	7c9b      	ldrb	r3, [r3, #18]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d108      	bne.n	8005a74 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	699a      	ldr	r2, [r3, #24]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a70:	619a      	str	r2, [r3, #24]
 8005a72:	e007      	b.n	8005a84 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699a      	ldr	r2, [r3, #24]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a82:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	699a      	ldr	r2, [r3, #24]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005aa8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0210 	bic.w	r2, r2, #16
 8005ab8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d108      	bne.n	8005ad4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	699a      	ldr	r2, [r3, #24]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0204 	orr.w	r2, r2, #4
 8005ad0:	619a      	str	r2, [r3, #24]
 8005ad2:	e02c      	b.n	8005b2e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d028      	beq.n	8005b2e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d01c      	beq.n	8005b1e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005af2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0210 	orr.w	r2, r2, #16
 8005b02:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b03      	cmp	r3, #3
 8005b0a:	d110      	bne.n	8005b2e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0220 	orr.w	r2, r2, #32
 8005b1a:	619a      	str	r2, [r3, #24]
 8005b1c:	e007      	b.n	8005b2e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	699a      	ldr	r2, [r3, #24]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0220 	orr.w	r2, r2, #32
 8005b2c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b3e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005b46:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005b56:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b58:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b62:	d115      	bne.n	8005b90 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b68:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005b72:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005b7c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b84:	3b01      	subs	r3, #1
 8005b86:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005b8c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005b8e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f814 	bl	8005bd4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40006400 	.word	0x40006400
 8005bd0:	40006500 	.word	0x40006500

08005bd4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005bdc:	4b30      	ldr	r3, [pc, #192]	@ (8005ca0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005bde:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a2f      	ldr	r2, [pc, #188]	@ (8005ca4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d103      	bne.n	8005bf2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005bf0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8005ca8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d103      	bne.n	8005c04 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8005c02:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c12:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c1a:	041a      	lsls	r2, r3, #16
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c38:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c40:	061a      	lsls	r2, r3, #24
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	e005      	b.n	8005c86 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3304      	adds	r3, #4
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d3f3      	bcc.n	8005c7a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8005c92:	bf00      	nop
 8005c94:	bf00      	nop
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	4000a400 	.word	0x4000a400
 8005ca4:	40006800 	.word	0x40006800
 8005ca8:	40006c00 	.word	0x40006c00

08005cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005cba:	e15a      	b.n	8005f72 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc8:	4013      	ands	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 814c 	beq.w	8005f6c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d005      	beq.n	8005cec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d130      	bne.n	8005d4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	2203      	movs	r2, #3
 8005cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfc:	43db      	mvns	r3, r3
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	4013      	ands	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d22:	2201      	movs	r2, #1
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	43db      	mvns	r3, r3
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	091b      	lsrs	r3, r3, #4
 8005d38:	f003 0201 	and.w	r2, r3, #1
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	d017      	beq.n	8005d8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	2203      	movs	r2, #3
 8005d66:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6a:	43db      	mvns	r3, r3
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f003 0303 	and.w	r3, r3, #3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d123      	bne.n	8005dde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	08da      	lsrs	r2, r3, #3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3208      	adds	r2, #8
 8005d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	220f      	movs	r2, #15
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	43db      	mvns	r3, r3
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	4013      	ands	r3, r2
 8005db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	691a      	ldr	r2, [r3, #16]
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	08da      	lsrs	r2, r3, #3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3208      	adds	r2, #8
 8005dd8:	6939      	ldr	r1, [r7, #16]
 8005dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	005b      	lsls	r3, r3, #1
 8005de8:	2203      	movs	r2, #3
 8005dea:	fa02 f303 	lsl.w	r3, r2, r3
 8005dee:	43db      	mvns	r3, r3
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4013      	ands	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f003 0203 	and.w	r2, r3, #3
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	fa02 f303 	lsl.w	r3, r2, r3
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 80a6 	beq.w	8005f6c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e20:	4b5b      	ldr	r3, [pc, #364]	@ (8005f90 <HAL_GPIO_Init+0x2e4>)
 8005e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e24:	4a5a      	ldr	r2, [pc, #360]	@ (8005f90 <HAL_GPIO_Init+0x2e4>)
 8005e26:	f043 0301 	orr.w	r3, r3, #1
 8005e2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8005e2c:	4b58      	ldr	r3, [pc, #352]	@ (8005f90 <HAL_GPIO_Init+0x2e4>)
 8005e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	60bb      	str	r3, [r7, #8]
 8005e36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e38:	4a56      	ldr	r2, [pc, #344]	@ (8005f94 <HAL_GPIO_Init+0x2e8>)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	089b      	lsrs	r3, r3, #2
 8005e3e:	3302      	adds	r3, #2
 8005e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f003 0303 	and.w	r3, r3, #3
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	220f      	movs	r2, #15
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	43db      	mvns	r3, r3
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4013      	ands	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005e62:	d01f      	beq.n	8005ea4 <HAL_GPIO_Init+0x1f8>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a4c      	ldr	r2, [pc, #304]	@ (8005f98 <HAL_GPIO_Init+0x2ec>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d019      	beq.n	8005ea0 <HAL_GPIO_Init+0x1f4>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a4b      	ldr	r2, [pc, #300]	@ (8005f9c <HAL_GPIO_Init+0x2f0>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d013      	beq.n	8005e9c <HAL_GPIO_Init+0x1f0>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a4a      	ldr	r2, [pc, #296]	@ (8005fa0 <HAL_GPIO_Init+0x2f4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00d      	beq.n	8005e98 <HAL_GPIO_Init+0x1ec>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a49      	ldr	r2, [pc, #292]	@ (8005fa4 <HAL_GPIO_Init+0x2f8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d007      	beq.n	8005e94 <HAL_GPIO_Init+0x1e8>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a48      	ldr	r2, [pc, #288]	@ (8005fa8 <HAL_GPIO_Init+0x2fc>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d101      	bne.n	8005e90 <HAL_GPIO_Init+0x1e4>
 8005e8c:	2305      	movs	r3, #5
 8005e8e:	e00a      	b.n	8005ea6 <HAL_GPIO_Init+0x1fa>
 8005e90:	2306      	movs	r3, #6
 8005e92:	e008      	b.n	8005ea6 <HAL_GPIO_Init+0x1fa>
 8005e94:	2304      	movs	r3, #4
 8005e96:	e006      	b.n	8005ea6 <HAL_GPIO_Init+0x1fa>
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e004      	b.n	8005ea6 <HAL_GPIO_Init+0x1fa>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e002      	b.n	8005ea6 <HAL_GPIO_Init+0x1fa>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e000      	b.n	8005ea6 <HAL_GPIO_Init+0x1fa>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	f002 0203 	and.w	r2, r2, #3
 8005eac:	0092      	lsls	r2, r2, #2
 8005eae:	4093      	lsls	r3, r2
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005eb6:	4937      	ldr	r1, [pc, #220]	@ (8005f94 <HAL_GPIO_Init+0x2e8>)
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	089b      	lsrs	r3, r3, #2
 8005ebc:	3302      	adds	r3, #2
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ec4:	4b39      	ldr	r3, [pc, #228]	@ (8005fac <HAL_GPIO_Init+0x300>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ee8:	4a30      	ldr	r2, [pc, #192]	@ (8005fac <HAL_GPIO_Init+0x300>)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005eee:	4b2f      	ldr	r3, [pc, #188]	@ (8005fac <HAL_GPIO_Init+0x300>)
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	43db      	mvns	r3, r3
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	4013      	ands	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f12:	4a26      	ldr	r2, [pc, #152]	@ (8005fac <HAL_GPIO_Init+0x300>)
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005f18:	4b24      	ldr	r3, [pc, #144]	@ (8005fac <HAL_GPIO_Init+0x300>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	43db      	mvns	r3, r3
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4013      	ands	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005fac <HAL_GPIO_Init+0x300>)
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005f42:	4b1a      	ldr	r3, [pc, #104]	@ (8005fac <HAL_GPIO_Init+0x300>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	43db      	mvns	r3, r3
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f66:	4a11      	ldr	r2, [pc, #68]	@ (8005fac <HAL_GPIO_Init+0x300>)
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f47f ae9d 	bne.w	8005cbc <HAL_GPIO_Init+0x10>
  }
}
 8005f82:	bf00      	nop
 8005f84:	bf00      	nop
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	40021000 	.word	0x40021000
 8005f94:	40010000 	.word	0x40010000
 8005f98:	48000400 	.word	0x48000400
 8005f9c:	48000800 	.word	0x48000800
 8005fa0:	48000c00 	.word	0x48000c00
 8005fa4:	48001000 	.word	0x48001000
 8005fa8:	48001400 	.word	0x48001400
 8005fac:	40010400 	.word	0x40010400

08005fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	807b      	strh	r3, [r7, #2]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005fc0:	787b      	ldrb	r3, [r7, #1]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005fc6:	887a      	ldrh	r2, [r7, #2]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005fcc:	e002      	b.n	8005fd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005fce:	887a      	ldrh	r2, [r7, #2]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005fea:	4b08      	ldr	r3, [pc, #32]	@ (800600c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fec:	695a      	ldr	r2, [r3, #20]
 8005fee:	88fb      	ldrh	r3, [r7, #6]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d006      	beq.n	8006004 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ff6:	4a05      	ldr	r2, [pc, #20]	@ (800600c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ff8:	88fb      	ldrh	r3, [r7, #6]
 8005ffa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ffc:	88fb      	ldrh	r3, [r7, #6]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fe fb46 	bl	8004690 <HAL_GPIO_EXTI_Callback>
  }
}
 8006004:	bf00      	nop
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	40010400 	.word	0x40010400

08006010 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e08d      	b.n	800613e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fe fe16 	bl	8004c68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2224      	movs	r2, #36	@ 0x24
 8006040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 0201 	bic.w	r2, r2, #1
 8006052:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006060:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689a      	ldr	r2, [r3, #8]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006070:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d107      	bne.n	800608a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689a      	ldr	r2, [r3, #8]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006086:	609a      	str	r2, [r3, #8]
 8006088:	e006      	b.n	8006098 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006096:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d108      	bne.n	80060b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060ae:	605a      	str	r2, [r3, #4]
 80060b0:	e007      	b.n	80060c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6812      	ldr	r2, [r2, #0]
 80060cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80060d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691a      	ldr	r2, [r3, #16]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	69d9      	ldr	r1, [r3, #28]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a1a      	ldr	r2, [r3, #32]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0201 	orr.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2220      	movs	r2, #32
 800612a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af02      	add	r7, sp, #8
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	4608      	mov	r0, r1
 8006152:	4611      	mov	r1, r2
 8006154:	461a      	mov	r2, r3
 8006156:	4603      	mov	r3, r0
 8006158:	817b      	strh	r3, [r7, #10]
 800615a:	460b      	mov	r3, r1
 800615c:	813b      	strh	r3, [r7, #8]
 800615e:	4613      	mov	r3, r2
 8006160:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b20      	cmp	r3, #32
 800616c:	f040 80f9 	bne.w	8006362 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d002      	beq.n	800617c <HAL_I2C_Mem_Write+0x34>
 8006176:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006178:	2b00      	cmp	r3, #0
 800617a:	d105      	bne.n	8006188 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006182:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e0ed      	b.n	8006364 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800618e:	2b01      	cmp	r3, #1
 8006190:	d101      	bne.n	8006196 <HAL_I2C_Mem_Write+0x4e>
 8006192:	2302      	movs	r3, #2
 8006194:	e0e6      	b.n	8006364 <HAL_I2C_Mem_Write+0x21c>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800619e:	f7ff f9e1 	bl	8005564 <HAL_GetTick>
 80061a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	2319      	movs	r3, #25
 80061aa:	2201      	movs	r2, #1
 80061ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 fac3 	bl	800673c <I2C_WaitOnFlagUntilTimeout>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e0d1      	b.n	8006364 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2221      	movs	r2, #33	@ 0x21
 80061c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2240      	movs	r2, #64	@ 0x40
 80061cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6a3a      	ldr	r2, [r7, #32]
 80061da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80061e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80061e8:	88f8      	ldrh	r0, [r7, #6]
 80061ea:	893a      	ldrh	r2, [r7, #8]
 80061ec:	8979      	ldrh	r1, [r7, #10]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	9301      	str	r3, [sp, #4]
 80061f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	4603      	mov	r3, r0
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 f9d3 	bl	80065a4 <I2C_RequestMemoryWrite>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e0a9      	b.n	8006364 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006214:	b29b      	uxth	r3, r3
 8006216:	2bff      	cmp	r3, #255	@ 0xff
 8006218:	d90e      	bls.n	8006238 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	22ff      	movs	r2, #255	@ 0xff
 800621e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006224:	b2da      	uxtb	r2, r3
 8006226:	8979      	ldrh	r1, [r7, #10]
 8006228:	2300      	movs	r3, #0
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f000 fc47 	bl	8006ac4 <I2C_TransferConfig>
 8006236:	e00f      	b.n	8006258 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800623c:	b29a      	uxth	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006246:	b2da      	uxtb	r2, r3
 8006248:	8979      	ldrh	r1, [r7, #10]
 800624a:	2300      	movs	r3, #0
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fc36 	bl	8006ac4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 fac6 	bl	80067ee <I2C_WaitOnTXISFlagUntilTimeout>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e07b      	b.n	8006364 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006270:	781a      	ldrb	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627c:	1c5a      	adds	r2, r3, #1
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006286:	b29b      	uxth	r3, r3
 8006288:	3b01      	subs	r3, #1
 800628a:	b29a      	uxth	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006294:	3b01      	subs	r3, #1
 8006296:	b29a      	uxth	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d034      	beq.n	8006310 <HAL_I2C_Mem_Write+0x1c8>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d130      	bne.n	8006310 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b4:	2200      	movs	r2, #0
 80062b6:	2180      	movs	r1, #128	@ 0x80
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 fa3f 	bl	800673c <I2C_WaitOnFlagUntilTimeout>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e04d      	b.n	8006364 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	2bff      	cmp	r3, #255	@ 0xff
 80062d0:	d90e      	bls.n	80062f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	22ff      	movs	r2, #255	@ 0xff
 80062d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	8979      	ldrh	r1, [r7, #10]
 80062e0:	2300      	movs	r3, #0
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 fbeb 	bl	8006ac4 <I2C_TransferConfig>
 80062ee:	e00f      	b.n	8006310 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	8979      	ldrh	r1, [r7, #10]
 8006302:	2300      	movs	r3, #0
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f000 fbda 	bl	8006ac4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d19e      	bne.n	8006258 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 faac 	bl	800687c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e01a      	b.n	8006364 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2220      	movs	r2, #32
 8006334:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6859      	ldr	r1, [r3, #4]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	4b0a      	ldr	r3, [pc, #40]	@ (800636c <HAL_I2C_Mem_Write+0x224>)
 8006342:	400b      	ands	r3, r1
 8006344:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2220      	movs	r2, #32
 800634a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	e000      	b.n	8006364 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006362:	2302      	movs	r3, #2
  }
}
 8006364:	4618      	mov	r0, r3
 8006366:	3718      	adds	r7, #24
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	fe00e800 	.word	0xfe00e800

08006370 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b088      	sub	sp, #32
 8006374:	af02      	add	r7, sp, #8
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	4608      	mov	r0, r1
 800637a:	4611      	mov	r1, r2
 800637c:	461a      	mov	r2, r3
 800637e:	4603      	mov	r3, r0
 8006380:	817b      	strh	r3, [r7, #10]
 8006382:	460b      	mov	r3, r1
 8006384:	813b      	strh	r3, [r7, #8]
 8006386:	4613      	mov	r3, r2
 8006388:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b20      	cmp	r3, #32
 8006394:	f040 80fd 	bne.w	8006592 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d002      	beq.n	80063a4 <HAL_I2C_Mem_Read+0x34>
 800639e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d105      	bne.n	80063b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063aa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e0f1      	b.n	8006594 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_I2C_Mem_Read+0x4e>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e0ea      	b.n	8006594 <HAL_I2C_Mem_Read+0x224>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80063c6:	f7ff f8cd 	bl	8005564 <HAL_GetTick>
 80063ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	2319      	movs	r3, #25
 80063d2:	2201      	movs	r2, #1
 80063d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 f9af 	bl	800673c <I2C_WaitOnFlagUntilTimeout>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e0d5      	b.n	8006594 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2222      	movs	r2, #34	@ 0x22
 80063ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2240      	movs	r2, #64	@ 0x40
 80063f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6a3a      	ldr	r2, [r7, #32]
 8006402:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006408:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006410:	88f8      	ldrh	r0, [r7, #6]
 8006412:	893a      	ldrh	r2, [r7, #8]
 8006414:	8979      	ldrh	r1, [r7, #10]
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	9301      	str	r3, [sp, #4]
 800641a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	4603      	mov	r3, r0
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 f913 	bl	800664c <I2C_RequestMemoryRead>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d005      	beq.n	8006438 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e0ad      	b.n	8006594 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800643c:	b29b      	uxth	r3, r3
 800643e:	2bff      	cmp	r3, #255	@ 0xff
 8006440:	d90e      	bls.n	8006460 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	22ff      	movs	r2, #255	@ 0xff
 8006446:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800644c:	b2da      	uxtb	r2, r3
 800644e:	8979      	ldrh	r1, [r7, #10]
 8006450:	4b52      	ldr	r3, [pc, #328]	@ (800659c <HAL_I2C_Mem_Read+0x22c>)
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 fb33 	bl	8006ac4 <I2C_TransferConfig>
 800645e:	e00f      	b.n	8006480 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006464:	b29a      	uxth	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800646e:	b2da      	uxtb	r2, r3
 8006470:	8979      	ldrh	r1, [r7, #10]
 8006472:	4b4a      	ldr	r3, [pc, #296]	@ (800659c <HAL_I2C_Mem_Read+0x22c>)
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 fb22 	bl	8006ac4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006486:	2200      	movs	r2, #0
 8006488:	2104      	movs	r1, #4
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 f956 	bl	800673c <I2C_WaitOnFlagUntilTimeout>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e07c      	b.n	8006594 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	3b01      	subs	r3, #1
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d034      	beq.n	8006540 <HAL_I2C_Mem_Read+0x1d0>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d130      	bne.n	8006540 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e4:	2200      	movs	r2, #0
 80064e6:	2180      	movs	r1, #128	@ 0x80
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 f927 	bl	800673c <I2C_WaitOnFlagUntilTimeout>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e04d      	b.n	8006594 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2bff      	cmp	r3, #255	@ 0xff
 8006500:	d90e      	bls.n	8006520 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	22ff      	movs	r2, #255	@ 0xff
 8006506:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800650c:	b2da      	uxtb	r2, r3
 800650e:	8979      	ldrh	r1, [r7, #10]
 8006510:	2300      	movs	r3, #0
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 fad3 	bl	8006ac4 <I2C_TransferConfig>
 800651e:	e00f      	b.n	8006540 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006524:	b29a      	uxth	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800652e:	b2da      	uxtb	r2, r3
 8006530:	8979      	ldrh	r1, [r7, #10]
 8006532:	2300      	movs	r3, #0
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f000 fac2 	bl	8006ac4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006544:	b29b      	uxth	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d19a      	bne.n	8006480 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 f994 	bl	800687c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e01a      	b.n	8006594 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2220      	movs	r2, #32
 8006564:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6859      	ldr	r1, [r3, #4]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	4b0b      	ldr	r3, [pc, #44]	@ (80065a0 <HAL_I2C_Mem_Read+0x230>)
 8006572:	400b      	ands	r3, r1
 8006574:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2220      	movs	r2, #32
 800657a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	e000      	b.n	8006594 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006592:	2302      	movs	r3, #2
  }
}
 8006594:	4618      	mov	r0, r3
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	80002400 	.word	0x80002400
 80065a0:	fe00e800 	.word	0xfe00e800

080065a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af02      	add	r7, sp, #8
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	4608      	mov	r0, r1
 80065ae:	4611      	mov	r1, r2
 80065b0:	461a      	mov	r2, r3
 80065b2:	4603      	mov	r3, r0
 80065b4:	817b      	strh	r3, [r7, #10]
 80065b6:	460b      	mov	r3, r1
 80065b8:	813b      	strh	r3, [r7, #8]
 80065ba:	4613      	mov	r3, r2
 80065bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80065be:	88fb      	ldrh	r3, [r7, #6]
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	8979      	ldrh	r1, [r7, #10]
 80065c4:	4b20      	ldr	r3, [pc, #128]	@ (8006648 <I2C_RequestMemoryWrite+0xa4>)
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f000 fa79 	bl	8006ac4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065d2:	69fa      	ldr	r2, [r7, #28]
 80065d4:	69b9      	ldr	r1, [r7, #24]
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 f909 	bl	80067ee <I2C_WaitOnTXISFlagUntilTimeout>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e02c      	b.n	8006640 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d105      	bne.n	80065f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065ec:	893b      	ldrh	r3, [r7, #8]
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80065f6:	e015      	b.n	8006624 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80065f8:	893b      	ldrh	r3, [r7, #8]
 80065fa:	0a1b      	lsrs	r3, r3, #8
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006606:	69fa      	ldr	r2, [r7, #28]
 8006608:	69b9      	ldr	r1, [r7, #24]
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 f8ef 	bl	80067ee <I2C_WaitOnTXISFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e012      	b.n	8006640 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800661a:	893b      	ldrh	r3, [r7, #8]
 800661c:	b2da      	uxtb	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	2200      	movs	r2, #0
 800662c:	2180      	movs	r1, #128	@ 0x80
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 f884 	bl	800673c <I2C_WaitOnFlagUntilTimeout>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e000      	b.n	8006640 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	80002000 	.word	0x80002000

0800664c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af02      	add	r7, sp, #8
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	4608      	mov	r0, r1
 8006656:	4611      	mov	r1, r2
 8006658:	461a      	mov	r2, r3
 800665a:	4603      	mov	r3, r0
 800665c:	817b      	strh	r3, [r7, #10]
 800665e:	460b      	mov	r3, r1
 8006660:	813b      	strh	r3, [r7, #8]
 8006662:	4613      	mov	r3, r2
 8006664:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006666:	88fb      	ldrh	r3, [r7, #6]
 8006668:	b2da      	uxtb	r2, r3
 800666a:	8979      	ldrh	r1, [r7, #10]
 800666c:	4b20      	ldr	r3, [pc, #128]	@ (80066f0 <I2C_RequestMemoryRead+0xa4>)
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	2300      	movs	r3, #0
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 fa26 	bl	8006ac4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006678:	69fa      	ldr	r2, [r7, #28]
 800667a:	69b9      	ldr	r1, [r7, #24]
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 f8b6 	bl	80067ee <I2C_WaitOnTXISFlagUntilTimeout>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e02c      	b.n	80066e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800668c:	88fb      	ldrh	r3, [r7, #6]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d105      	bne.n	800669e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006692:	893b      	ldrh	r3, [r7, #8]
 8006694:	b2da      	uxtb	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	629a      	str	r2, [r3, #40]	@ 0x28
 800669c:	e015      	b.n	80066ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800669e:	893b      	ldrh	r3, [r7, #8]
 80066a0:	0a1b      	lsrs	r3, r3, #8
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ac:	69fa      	ldr	r2, [r7, #28]
 80066ae:	69b9      	ldr	r1, [r7, #24]
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 f89c 	bl	80067ee <I2C_WaitOnTXISFlagUntilTimeout>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e012      	b.n	80066e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066c0:	893b      	ldrh	r3, [r7, #8]
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	2200      	movs	r2, #0
 80066d2:	2140      	movs	r1, #64	@ 0x40
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 f831 	bl	800673c <I2C_WaitOnFlagUntilTimeout>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e000      	b.n	80066e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	80002000 	.word	0x80002000

080066f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b02      	cmp	r3, #2
 8006708:	d103      	bne.n	8006712 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2200      	movs	r2, #0
 8006710:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b01      	cmp	r3, #1
 800671e:	d007      	beq.n	8006730 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699a      	ldr	r2, [r3, #24]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0201 	orr.w	r2, r2, #1
 800672e:	619a      	str	r2, [r3, #24]
  }
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	4613      	mov	r3, r2
 800674a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800674c:	e03b      	b.n	80067c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800674e:	69ba      	ldr	r2, [r7, #24]
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 f8d6 	bl	8006904 <I2C_IsErrorOccurred>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e041      	b.n	80067e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006768:	d02d      	beq.n	80067c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800676a:	f7fe fefb 	bl	8005564 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d302      	bcc.n	8006780 <I2C_WaitOnFlagUntilTimeout+0x44>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d122      	bne.n	80067c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	4013      	ands	r3, r2
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	429a      	cmp	r2, r3
 800678e:	bf0c      	ite	eq
 8006790:	2301      	moveq	r3, #1
 8006792:	2300      	movne	r3, #0
 8006794:	b2db      	uxtb	r3, r3
 8006796:	461a      	mov	r2, r3
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	429a      	cmp	r2, r3
 800679c:	d113      	bne.n	80067c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a2:	f043 0220 	orr.w	r2, r3, #32
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e00f      	b.n	80067e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	699a      	ldr	r2, [r3, #24]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	4013      	ands	r3, r2
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	bf0c      	ite	eq
 80067d6:	2301      	moveq	r3, #1
 80067d8:	2300      	movne	r3, #0
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	461a      	mov	r2, r3
 80067de:	79fb      	ldrb	r3, [r7, #7]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d0b4      	beq.n	800674e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067fa:	e033      	b.n	8006864 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	68b9      	ldr	r1, [r7, #8]
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 f87f 	bl	8006904 <I2C_IsErrorOccurred>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e031      	b.n	8006874 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006816:	d025      	beq.n	8006864 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006818:	f7fe fea4 	bl	8005564 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	429a      	cmp	r2, r3
 8006826:	d302      	bcc.n	800682e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d11a      	bne.n	8006864 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b02      	cmp	r3, #2
 800683a:	d013      	beq.n	8006864 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006840:	f043 0220 	orr.w	r2, r3, #32
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2220      	movs	r2, #32
 800684c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e007      	b.n	8006874 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b02      	cmp	r3, #2
 8006870:	d1c4      	bne.n	80067fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006888:	e02f      	b.n	80068ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	68b9      	ldr	r1, [r7, #8]
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 f838 	bl	8006904 <I2C_IsErrorOccurred>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e02d      	b.n	80068fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800689e:	f7fe fe61 	bl	8005564 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d302      	bcc.n	80068b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d11a      	bne.n	80068ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	2b20      	cmp	r3, #32
 80068c0:	d013      	beq.n	80068ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c6:	f043 0220 	orr.w	r2, r3, #32
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e007      	b.n	80068fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b20      	cmp	r3, #32
 80068f6:	d1c8      	bne.n	800688a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
	...

08006904 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b08a      	sub	sp, #40	@ 0x28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006910:	2300      	movs	r3, #0
 8006912:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800691e:	2300      	movs	r3, #0
 8006920:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	f003 0310 	and.w	r3, r3, #16
 800692c:	2b00      	cmp	r3, #0
 800692e:	d068      	beq.n	8006a02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2210      	movs	r2, #16
 8006936:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006938:	e049      	b.n	80069ce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006940:	d045      	beq.n	80069ce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006942:	f7fe fe0f 	bl	8005564 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	429a      	cmp	r2, r3
 8006950:	d302      	bcc.n	8006958 <I2C_IsErrorOccurred+0x54>
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d13a      	bne.n	80069ce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006962:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800696a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006976:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800697a:	d121      	bne.n	80069c0 <I2C_IsErrorOccurred+0xbc>
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006982:	d01d      	beq.n	80069c0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006984:	7cfb      	ldrb	r3, [r7, #19]
 8006986:	2b20      	cmp	r3, #32
 8006988:	d01a      	beq.n	80069c0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006998:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800699a:	f7fe fde3 	bl	8005564 <HAL_GetTick>
 800699e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069a0:	e00e      	b.n	80069c0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80069a2:	f7fe fddf 	bl	8005564 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b19      	cmp	r3, #25
 80069ae:	d907      	bls.n	80069c0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	f043 0320 	orr.w	r3, r3, #32
 80069b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80069be:	e006      	b.n	80069ce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d1e9      	bne.n	80069a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	f003 0320 	and.w	r3, r3, #32
 80069d8:	2b20      	cmp	r3, #32
 80069da:	d003      	beq.n	80069e4 <I2C_IsErrorOccurred+0xe0>
 80069dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0aa      	beq.n	800693a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80069e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d103      	bne.n	80069f4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2220      	movs	r2, #32
 80069f2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	f043 0304 	orr.w	r3, r3, #4
 80069fa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00b      	beq.n	8006a2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	f043 0301 	orr.w	r3, r3, #1
 8006a1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00b      	beq.n	8006a4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	f043 0308 	orr.w	r3, r3, #8
 8006a3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006a46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00b      	beq.n	8006a70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	f043 0302 	orr.w	r3, r3, #2
 8006a5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006a70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01c      	beq.n	8006ab2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f7ff fe3b 	bl	80066f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6859      	ldr	r1, [r3, #4]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	4b0d      	ldr	r3, [pc, #52]	@ (8006ac0 <I2C_IsErrorOccurred+0x1bc>)
 8006a8a:	400b      	ands	r3, r1
 8006a8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	431a      	orrs	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3728      	adds	r7, #40	@ 0x28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	fe00e800 	.word	0xfe00e800

08006ac4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	607b      	str	r3, [r7, #4]
 8006ace:	460b      	mov	r3, r1
 8006ad0:	817b      	strh	r3, [r7, #10]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ad6:	897b      	ldrh	r3, [r7, #10]
 8006ad8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006adc:	7a7b      	ldrb	r3, [r7, #9]
 8006ade:	041b      	lsls	r3, r3, #16
 8006ae0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ae4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006aea:	6a3b      	ldr	r3, [r7, #32]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006af2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	0d5b      	lsrs	r3, r3, #21
 8006afe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006b02:	4b08      	ldr	r3, [pc, #32]	@ (8006b24 <I2C_TransferConfig+0x60>)
 8006b04:	430b      	orrs	r3, r1
 8006b06:	43db      	mvns	r3, r3
 8006b08:	ea02 0103 	and.w	r1, r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	430a      	orrs	r2, r1
 8006b14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b16:	bf00      	nop
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	03ff63ff 	.word	0x03ff63ff

08006b28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b20      	cmp	r3, #32
 8006b3c:	d138      	bne.n	8006bb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d101      	bne.n	8006b4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b48:	2302      	movs	r3, #2
 8006b4a:	e032      	b.n	8006bb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2224      	movs	r2, #36	@ 0x24
 8006b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0201 	bic.w	r2, r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6819      	ldr	r1, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f042 0201 	orr.w	r2, r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	e000      	b.n	8006bb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006bb0:	2302      	movs	r3, #2
  }
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b085      	sub	sp, #20
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b20      	cmp	r3, #32
 8006bd2:	d139      	bne.n	8006c48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d101      	bne.n	8006be2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006bde:	2302      	movs	r3, #2
 8006be0:	e033      	b.n	8006c4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2224      	movs	r2, #36	@ 0x24
 8006bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 0201 	bic.w	r2, r2, #1
 8006c00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	021b      	lsls	r3, r3, #8
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0201 	orr.w	r2, r2, #1
 8006c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	e000      	b.n	8006c4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c48:	2302      	movs	r3, #2
  }
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b084      	sub	sp, #16
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e0c0      	b.n	8006dea <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d106      	bne.n	8006c82 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f00b ff59 	bl	8012b34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2203      	movs	r2, #3
 8006c86:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f004 fcab 	bl	800b5ea <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c94:	2300      	movs	r3, #0
 8006c96:	73fb      	strb	r3, [r7, #15]
 8006c98:	e03e      	b.n	8006d18 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006c9a:	7bfa      	ldrb	r2, [r7, #15]
 8006c9c:	6879      	ldr	r1, [r7, #4]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	00db      	lsls	r3, r3, #3
 8006ca6:	440b      	add	r3, r1
 8006ca8:	3311      	adds	r3, #17
 8006caa:	2201      	movs	r2, #1
 8006cac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006cae:	7bfa      	ldrb	r2, [r7, #15]
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	00db      	lsls	r3, r3, #3
 8006cba:	440b      	add	r3, r1
 8006cbc:	3310      	adds	r3, #16
 8006cbe:	7bfa      	ldrb	r2, [r7, #15]
 8006cc0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006cc2:	7bfa      	ldrb	r2, [r7, #15]
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	440b      	add	r3, r1
 8006cd0:	3313      	adds	r3, #19
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006cd6:	7bfa      	ldrb	r2, [r7, #15]
 8006cd8:	6879      	ldr	r1, [r7, #4]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	440b      	add	r3, r1
 8006ce4:	3320      	adds	r3, #32
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006cea:	7bfa      	ldrb	r2, [r7, #15]
 8006cec:	6879      	ldr	r1, [r7, #4]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	00db      	lsls	r3, r3, #3
 8006cf6:	440b      	add	r3, r1
 8006cf8:	3324      	adds	r3, #36	@ 0x24
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	6879      	ldr	r1, [r7, #4]
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	4613      	mov	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	440b      	add	r3, r1
 8006d0e:	2200      	movs	r2, #0
 8006d10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
 8006d14:	3301      	adds	r3, #1
 8006d16:	73fb      	strb	r3, [r7, #15]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	791b      	ldrb	r3, [r3, #4]
 8006d1c:	7bfa      	ldrb	r2, [r7, #15]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d3bb      	bcc.n	8006c9a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d22:	2300      	movs	r3, #0
 8006d24:	73fb      	strb	r3, [r7, #15]
 8006d26:	e044      	b.n	8006db2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006d28:	7bfa      	ldrb	r2, [r7, #15]
 8006d2a:	6879      	ldr	r1, [r7, #4]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	440b      	add	r3, r1
 8006d36:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006d3e:	7bfa      	ldrb	r2, [r7, #15]
 8006d40:	6879      	ldr	r1, [r7, #4]
 8006d42:	4613      	mov	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	440b      	add	r3, r1
 8006d4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d50:	7bfa      	ldrb	r2, [r7, #15]
 8006d52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006d54:	7bfa      	ldrb	r2, [r7, #15]
 8006d56:	6879      	ldr	r1, [r7, #4]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	00db      	lsls	r3, r3, #3
 8006d60:	440b      	add	r3, r1
 8006d62:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006d66:	2200      	movs	r2, #0
 8006d68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006d6a:	7bfa      	ldrb	r2, [r7, #15]
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	440b      	add	r3, r1
 8006d78:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d80:	7bfa      	ldrb	r2, [r7, #15]
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	00db      	lsls	r3, r3, #3
 8006d8c:	440b      	add	r3, r1
 8006d8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d92:	2200      	movs	r2, #0
 8006d94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d96:	7bfa      	ldrb	r2, [r7, #15]
 8006d98:	6879      	ldr	r1, [r7, #4]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	00db      	lsls	r3, r3, #3
 8006da2:	440b      	add	r3, r1
 8006da4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006da8:	2200      	movs	r2, #0
 8006daa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
 8006dae:	3301      	adds	r3, #1
 8006db0:	73fb      	strb	r3, [r7, #15]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	791b      	ldrb	r3, [r3, #4]
 8006db6:	7bfa      	ldrb	r2, [r7, #15]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d3b5      	bcc.n	8006d28 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6818      	ldr	r0, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006dc8:	f004 fc2a 	bl	800b620 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	7a9b      	ldrb	r3, [r3, #10]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d102      	bne.n	8006de8 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 fc0e 	bl	8008604 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b082      	sub	sp, #8
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d101      	bne.n	8006e08 <HAL_PCD_Start+0x16>
 8006e04:	2302      	movs	r3, #2
 8006e06:	e012      	b.n	8006e2e <HAL_PCD_Start+0x3c>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f004 fbd1 	bl	800b5bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f006 f9ae 	bl	800d180 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f006 f9b3 	bl	800d1ae <USB_ReadInterrupts>
 8006e48:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fb06 	bl	8007466 <PCD_EP_ISR_Handler>

    return;
 8006e5a:	e110      	b.n	800707e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d013      	beq.n	8006e8e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e78:	b292      	uxth	r2, r2
 8006e7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f00b fee9 	bl	8012c56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006e84:	2100      	movs	r1, #0
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f8fc 	bl	8007084 <HAL_PCD_SetAddress>

    return;
 8006e8c:	e0f7      	b.n	800707e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00c      	beq.n	8006eb2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006eaa:	b292      	uxth	r2, r2
 8006eac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006eb0:	e0e5      	b.n	800707e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00c      	beq.n	8006ed6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ece:	b292      	uxth	r2, r2
 8006ed0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006ed4:	e0d3      	b.n	800707e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d034      	beq.n	8006f4a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 0204 	bic.w	r2, r2, #4
 8006ef2:	b292      	uxth	r2, r2
 8006ef4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 0208 	bic.w	r2, r2, #8
 8006f0a:	b292      	uxth	r2, r2
 8006f0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d107      	bne.n	8006f2a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006f22:	2100      	movs	r1, #0
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f00c f889 	bl	801303c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f00b fecc 	bl	8012cc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f42:	b292      	uxth	r2, r2
 8006f44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006f48:	e099      	b.n	800707e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d027      	beq.n	8006fa4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0208 	orr.w	r2, r2, #8
 8006f66:	b292      	uxth	r2, r2
 8006f68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f7e:	b292      	uxth	r2, r2
 8006f80:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f042 0204 	orr.w	r2, r2, #4
 8006f96:	b292      	uxth	r2, r2
 8006f98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f00b fe79 	bl	8012c94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006fa2:	e06c      	b.n	800707e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d040      	beq.n	8007030 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006fc0:	b292      	uxth	r2, r2
 8006fc2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d12b      	bne.n	8007028 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f042 0204 	orr.w	r2, r2, #4
 8006fe2:	b292      	uxth	r2, r2
 8006fe4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0208 	orr.w	r2, r2, #8
 8006ffa:	b292      	uxth	r2, r2
 8006ffc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007010:	b29b      	uxth	r3, r3
 8007012:	089b      	lsrs	r3, r3, #2
 8007014:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800701e:	2101      	movs	r1, #1
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f00c f80b 	bl	801303c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8007026:	e02a      	b.n	800707e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f00b fe33 	bl	8012c94 <HAL_PCD_SuspendCallback>
    return;
 800702e:	e026      	b.n	800707e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00f      	beq.n	800705a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007042:	b29a      	uxth	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800704c:	b292      	uxth	r2, r2
 800704e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f00b fdf1 	bl	8012c3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007058:	e011      	b.n	800707e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00c      	beq.n	800707e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800706c:	b29a      	uxth	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007076:	b292      	uxth	r2, r2
 8007078:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800707c:	bf00      	nop
  }
}
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	460b      	mov	r3, r1
 800708e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007096:	2b01      	cmp	r3, #1
 8007098:	d101      	bne.n	800709e <HAL_PCD_SetAddress+0x1a>
 800709a:	2302      	movs	r3, #2
 800709c:	e012      	b.n	80070c4 <HAL_PCD_SetAddress+0x40>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	78fa      	ldrb	r2, [r7, #3]
 80070aa:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	78fa      	ldrb	r2, [r7, #3]
 80070b2:	4611      	mov	r1, r2
 80070b4:	4618      	mov	r0, r3
 80070b6:	f006 f84f 	bl	800d158 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	4608      	mov	r0, r1
 80070d6:	4611      	mov	r1, r2
 80070d8:	461a      	mov	r2, r3
 80070da:	4603      	mov	r3, r0
 80070dc:	70fb      	strb	r3, [r7, #3]
 80070de:	460b      	mov	r3, r1
 80070e0:	803b      	strh	r3, [r7, #0]
 80070e2:	4613      	mov	r3, r2
 80070e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80070e6:	2300      	movs	r3, #0
 80070e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80070ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	da0e      	bge.n	8007110 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070f2:	78fb      	ldrb	r3, [r7, #3]
 80070f4:	f003 0207 	and.w	r2, r3, #7
 80070f8:	4613      	mov	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	3310      	adds	r3, #16
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	4413      	add	r3, r2
 8007106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2201      	movs	r2, #1
 800710c:	705a      	strb	r2, [r3, #1]
 800710e:	e00e      	b.n	800712e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007110:	78fb      	ldrb	r3, [r7, #3]
 8007112:	f003 0207 	and.w	r2, r3, #7
 8007116:	4613      	mov	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	00db      	lsls	r3, r3, #3
 800711e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	4413      	add	r3, r2
 8007126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800712e:	78fb      	ldrb	r3, [r7, #3]
 8007130:	f003 0307 	and.w	r3, r3, #7
 8007134:	b2da      	uxtb	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800713a:	883b      	ldrh	r3, [r7, #0]
 800713c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	78ba      	ldrb	r2, [r7, #2]
 8007148:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800714a:	78bb      	ldrb	r3, [r7, #2]
 800714c:	2b02      	cmp	r3, #2
 800714e:	d102      	bne.n	8007156 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800715c:	2b01      	cmp	r3, #1
 800715e:	d101      	bne.n	8007164 <HAL_PCD_EP_Open+0x98>
 8007160:	2302      	movs	r3, #2
 8007162:	e00e      	b.n	8007182 <HAL_PCD_EP_Open+0xb6>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68f9      	ldr	r1, [r7, #12]
 8007172:	4618      	mov	r0, r3
 8007174:	f004 fa72 	bl	800b65c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8007180:	7afb      	ldrb	r3, [r7, #11]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	460b      	mov	r3, r1
 8007194:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800719a:	2b00      	cmp	r3, #0
 800719c:	da0e      	bge.n	80071bc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800719e:	78fb      	ldrb	r3, [r7, #3]
 80071a0:	f003 0207 	and.w	r2, r3, #7
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	3310      	adds	r3, #16
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	4413      	add	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2201      	movs	r2, #1
 80071b8:	705a      	strb	r2, [r3, #1]
 80071ba:	e00e      	b.n	80071da <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071bc:	78fb      	ldrb	r3, [r7, #3]
 80071be:	f003 0207 	and.w	r2, r3, #7
 80071c2:	4613      	mov	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	00db      	lsls	r3, r3, #3
 80071ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	4413      	add	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80071da:	78fb      	ldrb	r3, [r7, #3]
 80071dc:	f003 0307 	and.w	r3, r3, #7
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d101      	bne.n	80071f4 <HAL_PCD_EP_Close+0x6a>
 80071f0:	2302      	movs	r3, #2
 80071f2:	e00e      	b.n	8007212 <HAL_PCD_EP_Close+0x88>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68f9      	ldr	r1, [r7, #12]
 8007202:	4618      	mov	r0, r3
 8007204:	f004 ff12 	bl	800c02c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b086      	sub	sp, #24
 800721e:	af00      	add	r7, sp, #0
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	607a      	str	r2, [r7, #4]
 8007224:	603b      	str	r3, [r7, #0]
 8007226:	460b      	mov	r3, r1
 8007228:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800722a:	7afb      	ldrb	r3, [r7, #11]
 800722c:	f003 0207 	and.w	r2, r3, #7
 8007230:	4613      	mov	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	4413      	add	r3, r2
 8007240:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2200      	movs	r2, #0
 8007252:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	2200      	movs	r2, #0
 8007258:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800725a:	7afb      	ldrb	r3, [r7, #11]
 800725c:	f003 0307 	and.w	r3, r3, #7
 8007260:	b2da      	uxtb	r2, r3
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6979      	ldr	r1, [r7, #20]
 800726c:	4618      	mov	r0, r3
 800726e:	f005 f8ca 	bl	800c406 <USB_EPStartXfer>

  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3718      	adds	r7, #24
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007288:	78fb      	ldrb	r3, [r7, #3]
 800728a:	f003 0207 	and.w	r2, r3, #7
 800728e:	6879      	ldr	r1, [r7, #4]
 8007290:	4613      	mov	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	440b      	add	r3, r1
 800729a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800729e:	681b      	ldr	r3, [r3, #0]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	607a      	str	r2, [r7, #4]
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	460b      	mov	r3, r1
 80072ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072bc:	7afb      	ldrb	r3, [r7, #11]
 80072be:	f003 0207 	and.w	r2, r3, #7
 80072c2:	4613      	mov	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	00db      	lsls	r3, r3, #3
 80072ca:	3310      	adds	r3, #16
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	2200      	movs	r2, #0
 80072f0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	2201      	movs	r2, #1
 80072f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072f8:	7afb      	ldrb	r3, [r7, #11]
 80072fa:	f003 0307 	and.w	r3, r3, #7
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6979      	ldr	r1, [r7, #20]
 800730a:	4618      	mov	r0, r3
 800730c:	f005 f87b 	bl	800c406 <USB_EPStartXfer>

  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3718      	adds	r7, #24
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	460b      	mov	r3, r1
 8007324:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007326:	78fb      	ldrb	r3, [r7, #3]
 8007328:	f003 0307 	and.w	r3, r3, #7
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	7912      	ldrb	r2, [r2, #4]
 8007330:	4293      	cmp	r3, r2
 8007332:	d901      	bls.n	8007338 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e03e      	b.n	80073b6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007338:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800733c:	2b00      	cmp	r3, #0
 800733e:	da0e      	bge.n	800735e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007340:	78fb      	ldrb	r3, [r7, #3]
 8007342:	f003 0207 	and.w	r2, r3, #7
 8007346:	4613      	mov	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	00db      	lsls	r3, r3, #3
 800734e:	3310      	adds	r3, #16
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	4413      	add	r3, r2
 8007354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	705a      	strb	r2, [r3, #1]
 800735c:	e00c      	b.n	8007378 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800735e:	78fa      	ldrb	r2, [r7, #3]
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	4413      	add	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2201      	movs	r2, #1
 800737c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800737e:	78fb      	ldrb	r3, [r7, #3]
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	b2da      	uxtb	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007390:	2b01      	cmp	r3, #1
 8007392:	d101      	bne.n	8007398 <HAL_PCD_EP_SetStall+0x7e>
 8007394:	2302      	movs	r3, #2
 8007396:	e00e      	b.n	80073b6 <HAL_PCD_EP_SetStall+0x9c>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68f9      	ldr	r1, [r7, #12]
 80073a6:	4618      	mov	r0, r3
 80073a8:	f005 fddc 	bl	800cf64 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b084      	sub	sp, #16
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	460b      	mov	r3, r1
 80073c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80073ca:	78fb      	ldrb	r3, [r7, #3]
 80073cc:	f003 030f 	and.w	r3, r3, #15
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	7912      	ldrb	r2, [r2, #4]
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d901      	bls.n	80073dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e040      	b.n	800745e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80073dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	da0e      	bge.n	8007402 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073e4:	78fb      	ldrb	r3, [r7, #3]
 80073e6:	f003 0207 	and.w	r2, r3, #7
 80073ea:	4613      	mov	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	00db      	lsls	r3, r3, #3
 80073f2:	3310      	adds	r3, #16
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	4413      	add	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2201      	movs	r2, #1
 80073fe:	705a      	strb	r2, [r3, #1]
 8007400:	e00e      	b.n	8007420 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007402:	78fb      	ldrb	r3, [r7, #3]
 8007404:	f003 0207 	and.w	r2, r3, #7
 8007408:	4613      	mov	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	00db      	lsls	r3, r3, #3
 8007410:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	4413      	add	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007426:	78fb      	ldrb	r3, [r7, #3]
 8007428:	f003 0307 	and.w	r3, r3, #7
 800742c:	b2da      	uxtb	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007438:	2b01      	cmp	r3, #1
 800743a:	d101      	bne.n	8007440 <HAL_PCD_EP_ClrStall+0x82>
 800743c:	2302      	movs	r3, #2
 800743e:	e00e      	b.n	800745e <HAL_PCD_EP_ClrStall+0xa0>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68f9      	ldr	r1, [r7, #12]
 800744e:	4618      	mov	r0, r3
 8007450:	f005 fdd9 	bl	800d006 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b092      	sub	sp, #72	@ 0x48
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800746e:	e333      	b.n	8007ad8 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007478:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800747a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800747c:	b2db      	uxtb	r3, r3
 800747e:	f003 030f 	and.w	r3, r3, #15
 8007482:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8007486:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800748a:	2b00      	cmp	r3, #0
 800748c:	f040 8108 	bne.w	80076a0 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007490:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007492:	f003 0310 	and.w	r3, r3, #16
 8007496:	2b00      	cmp	r3, #0
 8007498:	d14c      	bne.n	8007534 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80074a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074aa:	813b      	strh	r3, [r7, #8]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	893b      	ldrh	r3, [r7, #8]
 80074b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3310      	adds	r3, #16
 80074c2:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	461a      	mov	r2, r3
 80074d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	00db      	lsls	r3, r3, #3
 80074d6:	4413      	add	r3, r2
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	6812      	ldr	r2, [r2, #0]
 80074dc:	4413      	add	r3, r2
 80074de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074e2:	881b      	ldrh	r3, [r3, #0]
 80074e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80074e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074ea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80074ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074ee:	695a      	ldr	r2, [r3, #20]
 80074f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074f2:	69db      	ldr	r3, [r3, #28]
 80074f4:	441a      	add	r2, r3
 80074f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074f8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80074fa:	2100      	movs	r1, #0
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f00b fb82 	bl	8012c06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	7b1b      	ldrb	r3, [r3, #12]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 82e5 	beq.w	8007ad8 <PCD_EP_ISR_Handler+0x672>
 800750e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	2b00      	cmp	r3, #0
 8007514:	f040 82e0 	bne.w	8007ad8 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	7b1b      	ldrb	r3, [r3, #12]
 800751c:	b2db      	uxtb	r3, r3
 800751e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007522:	b2da      	uxtb	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	731a      	strb	r2, [r3, #12]
 8007532:	e2d1      	b.n	8007ad8 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800753a:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007544:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007546:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800754a:	2b00      	cmp	r3, #0
 800754c:	d032      	beq.n	80075b4 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007556:	b29b      	uxth	r3, r3
 8007558:	461a      	mov	r2, r3
 800755a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	4413      	add	r3, r2
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	6812      	ldr	r2, [r2, #0]
 8007566:	4413      	add	r3, r2
 8007568:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007574:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6818      	ldr	r0, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007582:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007586:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007588:	b29b      	uxth	r3, r3
 800758a:	f005 fe62 	bl	800d252 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	b29a      	uxth	r2, r3
 8007596:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800759a:	4013      	ands	r3, r2
 800759c:	817b      	strh	r3, [r7, #10]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	897a      	ldrh	r2, [r7, #10]
 80075a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80075a8:	b292      	uxth	r2, r2
 80075aa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f00b fafd 	bl	8012bac <HAL_PCD_SetupStageCallback>
 80075b2:	e291      	b.n	8007ad8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80075b4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f280 828d 	bge.w	8007ad8 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80075ca:	4013      	ands	r3, r2
 80075cc:	81fb      	strh	r3, [r7, #14]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	89fa      	ldrh	r2, [r7, #14]
 80075d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80075d8:	b292      	uxth	r2, r2
 80075da:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	461a      	mov	r2, r3
 80075e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	00db      	lsls	r3, r3, #3
 80075ee:	4413      	add	r3, r2
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	6812      	ldr	r2, [r2, #0]
 80075f4:	4413      	add	r3, r2
 80075f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007600:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007602:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007604:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d019      	beq.n	8007640 <PCD_EP_ISR_Handler+0x1da>
 800760c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d015      	beq.n	8007640 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6818      	ldr	r0, [r3, #0]
 8007618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800761a:	6959      	ldr	r1, [r3, #20]
 800761c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800761e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007622:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007624:	b29b      	uxth	r3, r3
 8007626:	f005 fe14 	bl	800d252 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800762a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800762c:	695a      	ldr	r2, [r3, #20]
 800762e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	441a      	add	r2, r3
 8007634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007636:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007638:	2100      	movs	r1, #0
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f00b fac8 	bl	8012bd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007648:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800764a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800764e:	2b00      	cmp	r3, #0
 8007650:	f040 8242 	bne.w	8007ad8 <PCD_EP_ISR_Handler+0x672>
 8007654:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007656:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800765a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800765e:	f000 823b 	beq.w	8007ad8 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	b29b      	uxth	r3, r3
 800766a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800766e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007672:	81bb      	strh	r3, [r7, #12]
 8007674:	89bb      	ldrh	r3, [r7, #12]
 8007676:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800767a:	81bb      	strh	r3, [r7, #12]
 800767c:	89bb      	ldrh	r3, [r7, #12]
 800767e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007682:	81bb      	strh	r3, [r7, #12]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	89bb      	ldrh	r3, [r7, #12]
 800768a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800768e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800769a:	b29b      	uxth	r3, r3
 800769c:	8013      	strh	r3, [r2, #0]
 800769e:	e21b      	b.n	8007ad8 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	461a      	mov	r2, r3
 80076a6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80076b2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f280 80f1 	bge.w	800789e <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80076d2:	4013      	ands	r3, r2
 80076d4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80076e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80076ea:	b292      	uxth	r2, r2
 80076ec:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80076ee:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80076f2:	4613      	mov	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	00db      	lsls	r3, r3, #3
 80076fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	4413      	add	r3, r2
 8007702:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007706:	7b1b      	ldrb	r3, [r3, #12]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d123      	bne.n	8007754 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007714:	b29b      	uxth	r3, r3
 8007716:	461a      	mov	r2, r3
 8007718:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	00db      	lsls	r3, r3, #3
 800771e:	4413      	add	r3, r2
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	6812      	ldr	r2, [r2, #0]
 8007724:	4413      	add	r3, r2
 8007726:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800772a:	881b      	ldrh	r3, [r3, #0]
 800772c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007730:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8007734:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 808b 	beq.w	8007854 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6818      	ldr	r0, [r3, #0]
 8007742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007744:	6959      	ldr	r1, [r3, #20]
 8007746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007748:	88da      	ldrh	r2, [r3, #6]
 800774a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800774e:	f005 fd80 	bl	800d252 <USB_ReadPMA>
 8007752:	e07f      	b.n	8007854 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007754:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007756:	78db      	ldrb	r3, [r3, #3]
 8007758:	2b02      	cmp	r3, #2
 800775a:	d109      	bne.n	8007770 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800775c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800775e:	461a      	mov	r2, r3
 8007760:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f9c6 	bl	8007af4 <HAL_PCD_EP_DB_Receive>
 8007768:	4603      	mov	r3, r0
 800776a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800776e:	e071      	b.n	8007854 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	461a      	mov	r2, r3
 8007776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	b29b      	uxth	r3, r3
 8007782:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800778a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	461a      	mov	r2, r3
 8007792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	441a      	add	r2, r3
 800779a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800779c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	461a      	mov	r2, r3
 80077b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	881b      	ldrh	r3, [r3, #0]
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d022      	beq.n	8007810 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	461a      	mov	r2, r3
 80077d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	4413      	add	r3, r2
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	6812      	ldr	r2, [r2, #0]
 80077e2:	4413      	add	r3, r2
 80077e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80077e8:	881b      	ldrh	r3, [r3, #0]
 80077ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077ee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80077f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d02c      	beq.n	8007854 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6818      	ldr	r0, [r3, #0]
 80077fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007800:	6959      	ldr	r1, [r3, #20]
 8007802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007804:	891a      	ldrh	r2, [r3, #8]
 8007806:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800780a:	f005 fd22 	bl	800d252 <USB_ReadPMA>
 800780e:	e021      	b.n	8007854 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007818:	b29b      	uxth	r3, r3
 800781a:	461a      	mov	r2, r3
 800781c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	00db      	lsls	r3, r3, #3
 8007822:	4413      	add	r3, r2
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	6812      	ldr	r2, [r2, #0]
 8007828:	4413      	add	r3, r2
 800782a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007834:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8007838:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800783c:	2b00      	cmp	r3, #0
 800783e:	d009      	beq.n	8007854 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6818      	ldr	r0, [r3, #0]
 8007844:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007846:	6959      	ldr	r1, [r3, #20]
 8007848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800784a:	895a      	ldrh	r2, [r3, #10]
 800784c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007850:	f005 fcff 	bl	800d252 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007856:	69da      	ldr	r2, [r3, #28]
 8007858:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800785c:	441a      	add	r2, r3
 800785e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007860:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007864:	695a      	ldr	r2, [r3, #20]
 8007866:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800786a:	441a      	add	r2, r3
 800786c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800786e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007870:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d005      	beq.n	8007884 <PCD_EP_ISR_Handler+0x41e>
 8007878:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800787c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	429a      	cmp	r2, r3
 8007882:	d206      	bcs.n	8007892 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007884:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f00b f9a0 	bl	8012bd0 <HAL_PCD_DataOutStageCallback>
 8007890:	e005      	b.n	800789e <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007898:	4618      	mov	r0, r3
 800789a:	f004 fdb4 	bl	800c406 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800789e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80078a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 8117 	beq.w	8007ad8 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 80078aa:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80078ae:	4613      	mov	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4413      	add	r3, r2
 80078b4:	00db      	lsls	r3, r3, #3
 80078b6:	3310      	adds	r3, #16
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	4413      	add	r3, r2
 80078bc:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	461a      	mov	r2, r3
 80078c4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	881b      	ldrh	r3, [r3, #0]
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80078d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	441a      	add	r2, r3
 80078e8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80078ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80078f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078f8:	78db      	ldrb	r3, [r3, #3]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	f040 80a1 	bne.w	8007a42 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8007900:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007902:	2200      	movs	r2, #0
 8007904:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007908:	7b1b      	ldrb	r3, [r3, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 8092 	beq.w	8007a34 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007910:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007916:	2b00      	cmp	r3, #0
 8007918:	d046      	beq.n	80079a8 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800791a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800791c:	785b      	ldrb	r3, [r3, #1]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d126      	bne.n	8007970 <PCD_EP_ISR_Handler+0x50a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	617b      	str	r3, [r7, #20]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007930:	b29b      	uxth	r3, r3
 8007932:	461a      	mov	r2, r3
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	4413      	add	r3, r2
 8007938:	617b      	str	r3, [r7, #20]
 800793a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	00da      	lsls	r2, r3, #3
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	4413      	add	r3, r2
 8007944:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007948:	613b      	str	r3, [r7, #16]
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	881b      	ldrh	r3, [r3, #0]
 800794e:	b29b      	uxth	r3, r3
 8007950:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007954:	b29a      	uxth	r2, r3
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	801a      	strh	r2, [r3, #0]
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	b29b      	uxth	r3, r3
 8007960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007968:	b29a      	uxth	r2, r3
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	801a      	strh	r2, [r3, #0]
 800796e:	e061      	b.n	8007a34 <PCD_EP_ISR_Handler+0x5ce>
 8007970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007972:	785b      	ldrb	r3, [r3, #1]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d15d      	bne.n	8007a34 <PCD_EP_ISR_Handler+0x5ce>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	61fb      	str	r3, [r7, #28]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007986:	b29b      	uxth	r3, r3
 8007988:	461a      	mov	r2, r3
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	4413      	add	r3, r2
 800798e:	61fb      	str	r3, [r7, #28]
 8007990:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	00da      	lsls	r2, r3, #3
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	4413      	add	r3, r2
 800799a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800799e:	61bb      	str	r3, [r7, #24]
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	2200      	movs	r2, #0
 80079a4:	801a      	strh	r2, [r3, #0]
 80079a6:	e045      	b.n	8007a34 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079b0:	785b      	ldrb	r3, [r3, #1]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d126      	bne.n	8007a04 <PCD_EP_ISR_Handler+0x59e>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	461a      	mov	r2, r3
 80079c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ca:	4413      	add	r3, r2
 80079cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80079ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	00da      	lsls	r2, r3, #3
 80079d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d6:	4413      	add	r3, r2
 80079d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80079dc:	623b      	str	r3, [r7, #32]
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	801a      	strh	r2, [r3, #0]
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	801a      	strh	r2, [r3, #0]
 8007a02:	e017      	b.n	8007a34 <PCD_EP_ISR_Handler+0x5ce>
 8007a04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a06:	785b      	ldrb	r3, [r3, #1]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d113      	bne.n	8007a34 <PCD_EP_ISR_Handler+0x5ce>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	461a      	mov	r2, r3
 8007a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a1a:	4413      	add	r3, r2
 8007a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	00da      	lsls	r2, r3, #3
 8007a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a26:	4413      	add	r3, r2
 8007a28:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a30:	2200      	movs	r2, #0
 8007a32:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f00b f8e3 	bl	8012c06 <HAL_PCD_DataInStageCallback>
 8007a40:	e04a      	b.n	8007ad8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007a42:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d13f      	bne.n	8007acc <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	461a      	mov	r2, r3
 8007a58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	00db      	lsls	r3, r3, #3
 8007a5e:	4413      	add	r3, r2
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	6812      	ldr	r2, [r2, #0]
 8007a64:	4413      	add	r3, r2
 8007a66:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a70:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8007a72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a74:	699a      	ldr	r2, [r3, #24]
 8007a76:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d906      	bls.n	8007a8a <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8007a7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a7e:	699a      	ldr	r2, [r3, #24]
 8007a80:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007a82:	1ad2      	subs	r2, r2, r3
 8007a84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a86:	619a      	str	r2, [r3, #24]
 8007a88:	e002      	b.n	8007a90 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8007a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007a90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d106      	bne.n	8007aa6 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007a98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f00b f8b1 	bl	8012c06 <HAL_PCD_DataInStageCallback>
 8007aa4:	e018      	b.n	8007ad8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007aa8:	695a      	ldr	r2, [r3, #20]
 8007aaa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007aac:	441a      	add	r2, r3
 8007aae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ab0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ab4:	69da      	ldr	r2, [r3, #28]
 8007ab6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007ab8:	441a      	add	r2, r3
 8007aba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007abc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f004 fc9e 	bl	800c406 <USB_EPStartXfer>
 8007aca:	e005      	b.n	8007ad8 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007acc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007ace:	461a      	mov	r2, r3
 8007ad0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f917 	bl	8007d06 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	b21b      	sxth	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f6ff acc3 	blt.w	8007470 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3748      	adds	r7, #72	@ 0x48
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	4613      	mov	r3, r2
 8007b00:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007b02:	88fb      	ldrh	r3, [r7, #6]
 8007b04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d07c      	beq.n	8007c06 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	461a      	mov	r2, r3
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	00db      	lsls	r3, r3, #3
 8007b1e:	4413      	add	r3, r2
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	6812      	ldr	r2, [r2, #0]
 8007b24:	4413      	add	r3, r2
 8007b26:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b2a:	881b      	ldrh	r3, [r3, #0]
 8007b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b30:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	699a      	ldr	r2, [r3, #24]
 8007b36:	8b7b      	ldrh	r3, [r7, #26]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d306      	bcc.n	8007b4a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	699a      	ldr	r2, [r3, #24]
 8007b40:	8b7b      	ldrh	r3, [r7, #26]
 8007b42:	1ad2      	subs	r2, r2, r3
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	619a      	str	r2, [r3, #24]
 8007b48:	e002      	b.n	8007b50 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d123      	bne.n	8007ba0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b72:	833b      	strh	r3, [r7, #24]
 8007b74:	8b3b      	ldrh	r3, [r7, #24]
 8007b76:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007b7a:	833b      	strh	r3, [r7, #24]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	461a      	mov	r2, r3
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	441a      	add	r2, r3
 8007b8a:	8b3b      	ldrh	r3, [r7, #24]
 8007b8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007ba0:	88fb      	ldrh	r3, [r7, #6]
 8007ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d01f      	beq.n	8007bea <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bc4:	82fb      	strh	r3, [r7, #22]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	441a      	add	r2, r3
 8007bd4:	8afb      	ldrh	r3, [r7, #22]
 8007bd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007be2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007bea:	8b7b      	ldrh	r3, [r7, #26]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 8085 	beq.w	8007cfc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6818      	ldr	r0, [r3, #0]
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	6959      	ldr	r1, [r3, #20]
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	891a      	ldrh	r2, [r3, #8]
 8007bfe:	8b7b      	ldrh	r3, [r7, #26]
 8007c00:	f005 fb27 	bl	800d252 <USB_ReadPMA>
 8007c04:	e07a      	b.n	8007cfc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	461a      	mov	r2, r3
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	4413      	add	r3, r2
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	6812      	ldr	r2, [r2, #0]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c24:	881b      	ldrh	r3, [r3, #0]
 8007c26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c2a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	699a      	ldr	r2, [r3, #24]
 8007c30:	8b7b      	ldrh	r3, [r7, #26]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d306      	bcc.n	8007c44 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	699a      	ldr	r2, [r3, #24]
 8007c3a:	8b7b      	ldrh	r3, [r7, #26]
 8007c3c:	1ad2      	subs	r2, r2, r3
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	619a      	str	r2, [r3, #24]
 8007c42:	e002      	b.n	8007c4a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2200      	movs	r2, #0
 8007c48:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d123      	bne.n	8007c9a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	461a      	mov	r2, r3
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	881b      	ldrh	r3, [r3, #0]
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c6c:	83fb      	strh	r3, [r7, #30]
 8007c6e:	8bfb      	ldrh	r3, [r7, #30]
 8007c70:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c74:	83fb      	strh	r3, [r7, #30]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	441a      	add	r2, r3
 8007c84:	8bfb      	ldrh	r3, [r7, #30]
 8007c86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007c9a:	88fb      	ldrh	r3, [r7, #6]
 8007c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d11f      	bne.n	8007ce4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cbe:	83bb      	strh	r3, [r7, #28]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	441a      	add	r2, r3
 8007cce:	8bbb      	ldrh	r3, [r7, #28]
 8007cd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cdc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007ce4:	8b7b      	ldrh	r3, [r7, #26]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d008      	beq.n	8007cfc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6818      	ldr	r0, [r3, #0]
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	6959      	ldr	r1, [r3, #20]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	895a      	ldrh	r2, [r3, #10]
 8007cf6:	8b7b      	ldrh	r3, [r7, #26]
 8007cf8:	f005 faab 	bl	800d252 <USB_ReadPMA>
    }
  }

  return count;
 8007cfc:	8b7b      	ldrh	r3, [r7, #26]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3720      	adds	r7, #32
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b0a6      	sub	sp, #152	@ 0x98
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	60f8      	str	r0, [r7, #12]
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	4613      	mov	r3, r2
 8007d12:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007d14:	88fb      	ldrh	r3, [r7, #6]
 8007d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 81f7 	beq.w	800810e <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	00db      	lsls	r3, r3, #3
 8007d32:	4413      	add	r3, r2
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	6812      	ldr	r2, [r2, #0]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d44:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	699a      	ldr	r2, [r3, #24]
 8007d4c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d907      	bls.n	8007d64 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	699a      	ldr	r2, [r3, #24]
 8007d58:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007d5c:	1ad2      	subs	r2, r2, r3
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	619a      	str	r2, [r3, #24]
 8007d62:	e002      	b.n	8007d6a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2200      	movs	r2, #0
 8007d68:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f040 80e1 	bne.w	8007f36 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	785b      	ldrb	r3, [r3, #1]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d126      	bne.n	8007dca <HAL_PCD_EP_DB_Transmit+0xc4>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d90:	4413      	add	r3, r2
 8007d92:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	00da      	lsls	r2, r3, #3
 8007d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da6:	881b      	ldrh	r3, [r3, #0]
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db2:	801a      	strh	r2, [r3, #0]
 8007db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc6:	801a      	strh	r2, [r3, #0]
 8007dc8:	e01a      	b.n	8007e00 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	785b      	ldrb	r3, [r3, #1]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d116      	bne.n	8007e00 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	461a      	mov	r2, r3
 8007de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de6:	4413      	add	r3, r2
 8007de8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	00da      	lsls	r2, r3, #3
 8007df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df2:	4413      	add	r3, r2
 8007df4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	785b      	ldrb	r3, [r3, #1]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d126      	bne.n	8007e5c <HAL_PCD_EP_DB_Transmit+0x156>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	623b      	str	r3, [r7, #32]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	461a      	mov	r2, r3
 8007e20:	6a3b      	ldr	r3, [r7, #32]
 8007e22:	4413      	add	r3, r2
 8007e24:	623b      	str	r3, [r7, #32]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	00da      	lsls	r2, r3, #3
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	4413      	add	r3, r2
 8007e30:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e34:	61fb      	str	r3, [r7, #28]
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	881b      	ldrh	r3, [r3, #0]
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	801a      	strh	r2, [r3, #0]
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	801a      	strh	r2, [r3, #0]
 8007e5a:	e017      	b.n	8007e8c <HAL_PCD_EP_DB_Transmit+0x186>
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	785b      	ldrb	r3, [r3, #1]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d113      	bne.n	8007e8c <HAL_PCD_EP_DB_Transmit+0x186>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	461a      	mov	r2, r3
 8007e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e72:	4413      	add	r3, r2
 8007e74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	00da      	lsls	r2, r3, #3
 8007e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7e:	4413      	add	r3, r2
 8007e80:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e88:	2200      	movs	r2, #0
 8007e8a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	78db      	ldrb	r3, [r3, #3]
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d123      	bne.n	8007edc <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007eae:	837b      	strh	r3, [r7, #26]
 8007eb0:	8b7b      	ldrh	r3, [r7, #26]
 8007eb2:	f083 0320 	eor.w	r3, r3, #32
 8007eb6:	837b      	strh	r3, [r7, #26]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	441a      	add	r2, r3
 8007ec6:	8b7b      	ldrh	r3, [r7, #26]
 8007ec8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ecc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ed0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ed4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f00a fe8f 	bl	8012c06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007ee8:	88fb      	ldrh	r3, [r7, #6]
 8007eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d01f      	beq.n	8007f32 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f0c:	833b      	strh	r3, [r7, #24]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	461a      	mov	r2, r3
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	441a      	add	r2, r3
 8007f1c:	8b3b      	ldrh	r3, [r7, #24]
 8007f1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	e31f      	b.n	8008576 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007f36:	88fb      	ldrh	r3, [r7, #6]
 8007f38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d021      	beq.n	8007f84 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	461a      	mov	r2, r3
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4413      	add	r3, r2
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f5a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	461a      	mov	r2, r3
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	441a      	add	r2, r3
 8007f6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007f70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	f040 82ca 	bne.w	8008524 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	695a      	ldr	r2, [r3, #20]
 8007f94:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007f98:	441a      	add	r2, r3
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	69da      	ldr	r2, [r3, #28]
 8007fa2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007fa6:	441a      	add	r2, r3
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	6a1a      	ldr	r2, [r3, #32]
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d309      	bcc.n	8007fcc <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	6a1a      	ldr	r2, [r3, #32]
 8007fc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007fc4:	1ad2      	subs	r2, r2, r3
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	621a      	str	r2, [r3, #32]
 8007fca:	e015      	b.n	8007ff8 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d107      	bne.n	8007fe4 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8007fd4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007fd8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007fe2:	e009      	b.n	8007ff8 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	6a1b      	ldr	r3, [r3, #32]
 8007ff0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	785b      	ldrb	r3, [r3, #1]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d15f      	bne.n	80080c0 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	643b      	str	r3, [r7, #64]	@ 0x40
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800800e:	b29b      	uxth	r3, r3
 8008010:	461a      	mov	r2, r3
 8008012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008014:	4413      	add	r3, r2
 8008016:	643b      	str	r3, [r7, #64]	@ 0x40
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	00da      	lsls	r2, r3, #3
 800801e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008020:	4413      	add	r3, r2
 8008022:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	b29b      	uxth	r3, r3
 800802e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008032:	b29a      	uxth	r2, r3
 8008034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008036:	801a      	strh	r2, [r3, #0]
 8008038:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10a      	bne.n	8008054 <HAL_PCD_EP_DB_Transmit+0x34e>
 800803e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	b29b      	uxth	r3, r3
 8008044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800804c:	b29a      	uxth	r2, r3
 800804e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008050:	801a      	strh	r2, [r3, #0]
 8008052:	e051      	b.n	80080f8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008054:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008056:	2b3e      	cmp	r3, #62	@ 0x3e
 8008058:	d816      	bhi.n	8008088 <HAL_PCD_EP_DB_Transmit+0x382>
 800805a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800805c:	085b      	lsrs	r3, r3, #1
 800805e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008060:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b00      	cmp	r3, #0
 8008068:	d002      	beq.n	8008070 <HAL_PCD_EP_DB_Transmit+0x36a>
 800806a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800806c:	3301      	adds	r3, #1
 800806e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008072:	881b      	ldrh	r3, [r3, #0]
 8008074:	b29a      	uxth	r2, r3
 8008076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008078:	b29b      	uxth	r3, r3
 800807a:	029b      	lsls	r3, r3, #10
 800807c:	b29b      	uxth	r3, r3
 800807e:	4313      	orrs	r3, r2
 8008080:	b29a      	uxth	r2, r3
 8008082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008084:	801a      	strh	r2, [r3, #0]
 8008086:	e037      	b.n	80080f8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008088:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800808a:	095b      	lsrs	r3, r3, #5
 800808c:	653b      	str	r3, [r7, #80]	@ 0x50
 800808e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008090:	f003 031f 	and.w	r3, r3, #31
 8008094:	2b00      	cmp	r3, #0
 8008096:	d102      	bne.n	800809e <HAL_PCD_EP_DB_Transmit+0x398>
 8008098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800809a:	3b01      	subs	r3, #1
 800809c:	653b      	str	r3, [r7, #80]	@ 0x50
 800809e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	029b      	lsls	r3, r3, #10
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	4313      	orrs	r3, r2
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080bc:	801a      	strh	r2, [r3, #0]
 80080be:	e01b      	b.n	80080f8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	785b      	ldrb	r3, [r3, #1]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d117      	bne.n	80080f8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	461a      	mov	r2, r3
 80080da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080dc:	4413      	add	r3, r2
 80080de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	00da      	lsls	r2, r3, #3
 80080e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080e8:	4413      	add	r3, r2
 80080ea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80080ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80080f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080f6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6818      	ldr	r0, [r3, #0]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	6959      	ldr	r1, [r3, #20]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	891a      	ldrh	r2, [r3, #8]
 8008104:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008106:	b29b      	uxth	r3, r3
 8008108:	f005 f861 	bl	800d1ce <USB_WritePMA>
 800810c:	e20a      	b.n	8008524 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008116:	b29b      	uxth	r3, r3
 8008118:	461a      	mov	r2, r3
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	00db      	lsls	r3, r3, #3
 8008120:	4413      	add	r3, r2
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	6812      	ldr	r2, [r2, #0]
 8008126:	4413      	add	r3, r2
 8008128:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800812c:	881b      	ldrh	r3, [r3, #0]
 800812e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008132:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	699a      	ldr	r2, [r3, #24]
 800813a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800813e:	429a      	cmp	r2, r3
 8008140:	d307      	bcc.n	8008152 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	699a      	ldr	r2, [r3, #24]
 8008146:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800814a:	1ad2      	subs	r2, r2, r3
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	619a      	str	r2, [r3, #24]
 8008150:	e002      	b.n	8008158 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	2200      	movs	r2, #0
 8008156:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	2b00      	cmp	r3, #0
 800815e:	f040 80f6 	bne.w	800834e <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	785b      	ldrb	r3, [r3, #1]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d126      	bne.n	80081b8 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008178:	b29b      	uxth	r3, r3
 800817a:	461a      	mov	r2, r3
 800817c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800817e:	4413      	add	r3, r2
 8008180:	677b      	str	r3, [r7, #116]	@ 0x74
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	00da      	lsls	r2, r3, #3
 8008188:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800818a:	4413      	add	r3, r2
 800818c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008190:	673b      	str	r3, [r7, #112]	@ 0x70
 8008192:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008194:	881b      	ldrh	r3, [r3, #0]
 8008196:	b29b      	uxth	r3, r3
 8008198:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800819c:	b29a      	uxth	r2, r3
 800819e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081a0:	801a      	strh	r2, [r3, #0]
 80081a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081b4:	801a      	strh	r2, [r3, #0]
 80081b6:	e01a      	b.n	80081ee <HAL_PCD_EP_DB_Transmit+0x4e8>
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	785b      	ldrb	r3, [r3, #1]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d116      	bne.n	80081ee <HAL_PCD_EP_DB_Transmit+0x4e8>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	461a      	mov	r2, r3
 80081d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081d4:	4413      	add	r3, r2
 80081d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	00da      	lsls	r2, r3, #3
 80081de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081e0:	4413      	add	r3, r2
 80081e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80081e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80081e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081ea:	2200      	movs	r2, #0
 80081ec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	785b      	ldrb	r3, [r3, #1]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d12f      	bne.n	800825e <HAL_PCD_EP_DB_Transmit+0x558>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800820e:	b29b      	uxth	r3, r3
 8008210:	461a      	mov	r2, r3
 8008212:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008216:	4413      	add	r3, r2
 8008218:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	00da      	lsls	r2, r3, #3
 8008222:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008226:	4413      	add	r3, r2
 8008228:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800822c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008230:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	b29b      	uxth	r3, r3
 8008238:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800823c:	b29a      	uxth	r2, r3
 800823e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008242:	801a      	strh	r2, [r3, #0]
 8008244:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008248:	881b      	ldrh	r3, [r3, #0]
 800824a:	b29b      	uxth	r3, r3
 800824c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008254:	b29a      	uxth	r2, r3
 8008256:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800825a:	801a      	strh	r2, [r3, #0]
 800825c:	e01c      	b.n	8008298 <HAL_PCD_EP_DB_Transmit+0x592>
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	785b      	ldrb	r3, [r3, #1]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d118      	bne.n	8008298 <HAL_PCD_EP_DB_Transmit+0x592>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800826e:	b29b      	uxth	r3, r3
 8008270:	461a      	mov	r2, r3
 8008272:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008276:	4413      	add	r3, r2
 8008278:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	00da      	lsls	r2, r3, #3
 8008282:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008286:	4413      	add	r3, r2
 8008288:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800828c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008290:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008294:	2200      	movs	r2, #0
 8008296:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	78db      	ldrb	r3, [r3, #3]
 800829c:	2b02      	cmp	r3, #2
 800829e:	d127      	bne.n	80082f0 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	461a      	mov	r2, r3
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4413      	add	r3, r2
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082ba:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80082be:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80082c2:	f083 0320 	eor.w	r3, r3, #32
 80082c6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	461a      	mov	r2, r3
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	441a      	add	r2, r3
 80082d8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80082dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	4619      	mov	r1, r3
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f00a fc85 	bl	8012c06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80082fc:	88fb      	ldrh	r3, [r7, #6]
 80082fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d121      	bne.n	800834a <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	461a      	mov	r2, r3
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	881b      	ldrh	r3, [r3, #0]
 8008316:	b29b      	uxth	r3, r3
 8008318:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800831c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008320:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	461a      	mov	r2, r3
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	441a      	add	r2, r3
 8008332:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008336:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800833a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800833e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008346:	b29b      	uxth	r3, r3
 8008348:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	e113      	b.n	8008576 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800834e:	88fb      	ldrh	r3, [r7, #6]
 8008350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d121      	bne.n	800839c <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	461a      	mov	r2, r3
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4413      	add	r3, r2
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	b29b      	uxth	r3, r3
 800836a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800836e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008372:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	461a      	mov	r2, r3
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	441a      	add	r2, r3
 8008384:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008388:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800838c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008390:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008398:	b29b      	uxth	r3, r3
 800839a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	f040 80be 	bne.w	8008524 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	695a      	ldr	r2, [r3, #20]
 80083ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083b0:	441a      	add	r2, r3
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	69da      	ldr	r2, [r3, #28]
 80083ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083be:	441a      	add	r2, r3
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	6a1a      	ldr	r2, [r3, #32]
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d309      	bcc.n	80083e4 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	6a1a      	ldr	r2, [r3, #32]
 80083da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083dc:	1ad2      	subs	r2, r2, r3
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	621a      	str	r2, [r3, #32]
 80083e2:	e015      	b.n	8008410 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	6a1b      	ldr	r3, [r3, #32]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d107      	bne.n	80083fc <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80083ec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083f0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80083fa:	e009      	b.n	8008410 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	6a1b      	ldr	r3, [r3, #32]
 8008400:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	2200      	movs	r2, #0
 8008406:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	785b      	ldrb	r3, [r3, #1]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d15f      	bne.n	80084de <HAL_PCD_EP_DB_Transmit+0x7d8>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800842c:	b29b      	uxth	r3, r3
 800842e:	461a      	mov	r2, r3
 8008430:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008432:	4413      	add	r3, r2
 8008434:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	00da      	lsls	r2, r3, #3
 800843c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800843e:	4413      	add	r3, r2
 8008440:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008444:	667b      	str	r3, [r7, #100]	@ 0x64
 8008446:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008448:	881b      	ldrh	r3, [r3, #0]
 800844a:	b29b      	uxth	r3, r3
 800844c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008450:	b29a      	uxth	r2, r3
 8008452:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008454:	801a      	strh	r2, [r3, #0]
 8008456:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10a      	bne.n	8008472 <HAL_PCD_EP_DB_Transmit+0x76c>
 800845c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	b29b      	uxth	r3, r3
 8008462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800846a:	b29a      	uxth	r2, r3
 800846c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800846e:	801a      	strh	r2, [r3, #0]
 8008470:	e04e      	b.n	8008510 <HAL_PCD_EP_DB_Transmit+0x80a>
 8008472:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008474:	2b3e      	cmp	r3, #62	@ 0x3e
 8008476:	d816      	bhi.n	80084a6 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8008478:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800847a:	085b      	lsrs	r3, r3, #1
 800847c:	663b      	str	r3, [r7, #96]	@ 0x60
 800847e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <HAL_PCD_EP_DB_Transmit+0x788>
 8008488:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800848a:	3301      	adds	r3, #1
 800848c:	663b      	str	r3, [r7, #96]	@ 0x60
 800848e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008490:	881b      	ldrh	r3, [r3, #0]
 8008492:	b29a      	uxth	r2, r3
 8008494:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008496:	b29b      	uxth	r3, r3
 8008498:	029b      	lsls	r3, r3, #10
 800849a:	b29b      	uxth	r3, r3
 800849c:	4313      	orrs	r3, r2
 800849e:	b29a      	uxth	r2, r3
 80084a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084a2:	801a      	strh	r2, [r3, #0]
 80084a4:	e034      	b.n	8008510 <HAL_PCD_EP_DB_Transmit+0x80a>
 80084a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084a8:	095b      	lsrs	r3, r3, #5
 80084aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80084ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084ae:	f003 031f 	and.w	r3, r3, #31
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d102      	bne.n	80084bc <HAL_PCD_EP_DB_Transmit+0x7b6>
 80084b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084b8:	3b01      	subs	r3, #1
 80084ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80084bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084be:	881b      	ldrh	r3, [r3, #0]
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	029b      	lsls	r3, r3, #10
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	4313      	orrs	r3, r2
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084da:	801a      	strh	r2, [r3, #0]
 80084dc:	e018      	b.n	8008510 <HAL_PCD_EP_DB_Transmit+0x80a>
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	785b      	ldrb	r3, [r3, #1]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d114      	bne.n	8008510 <HAL_PCD_EP_DB_Transmit+0x80a>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	461a      	mov	r2, r3
 80084f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084f4:	4413      	add	r3, r2
 80084f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	00da      	lsls	r2, r3, #3
 80084fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008500:	4413      	add	r3, r2
 8008502:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008506:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008508:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800850a:	b29a      	uxth	r2, r3
 800850c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800850e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6818      	ldr	r0, [r3, #0]
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	6959      	ldr	r1, [r3, #20]
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	895a      	ldrh	r2, [r3, #10]
 800851c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800851e:	b29b      	uxth	r3, r3
 8008520:	f004 fe55 	bl	800d1ce <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	461a      	mov	r2, r3
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	b29b      	uxth	r3, r3
 8008536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800853a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800853e:	82fb      	strh	r3, [r7, #22]
 8008540:	8afb      	ldrh	r3, [r7, #22]
 8008542:	f083 0310 	eor.w	r3, r3, #16
 8008546:	82fb      	strh	r3, [r7, #22]
 8008548:	8afb      	ldrh	r3, [r7, #22]
 800854a:	f083 0320 	eor.w	r3, r3, #32
 800854e:	82fb      	strh	r3, [r7, #22]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	461a      	mov	r2, r3
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	441a      	add	r2, r3
 800855e:	8afb      	ldrh	r3, [r7, #22]
 8008560:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008564:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008568:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800856c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008570:	b29b      	uxth	r3, r3
 8008572:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3798      	adds	r7, #152	@ 0x98
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800857e:	b480      	push	{r7}
 8008580:	b087      	sub	sp, #28
 8008582:	af00      	add	r7, sp, #0
 8008584:	60f8      	str	r0, [r7, #12]
 8008586:	607b      	str	r3, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	817b      	strh	r3, [r7, #10]
 800858c:	4613      	mov	r3, r2
 800858e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008590:	897b      	ldrh	r3, [r7, #10]
 8008592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008596:	b29b      	uxth	r3, r3
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00b      	beq.n	80085b4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800859c:	897b      	ldrh	r3, [r7, #10]
 800859e:	f003 0207 	and.w	r2, r3, #7
 80085a2:	4613      	mov	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	00db      	lsls	r3, r3, #3
 80085aa:	3310      	adds	r3, #16
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	4413      	add	r3, r2
 80085b0:	617b      	str	r3, [r7, #20]
 80085b2:	e009      	b.n	80085c8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80085b4:	897a      	ldrh	r2, [r7, #10]
 80085b6:	4613      	mov	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	00db      	lsls	r3, r3, #3
 80085be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	4413      	add	r3, r2
 80085c6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80085c8:	893b      	ldrh	r3, [r7, #8]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d107      	bne.n	80085de <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2200      	movs	r2, #0
 80085d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	80da      	strh	r2, [r3, #6]
 80085dc:	e00b      	b.n	80085f6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2201      	movs	r2, #1
 80085e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	0c1b      	lsrs	r3, r3, #16
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	371c      	adds	r7, #28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008628:	b29b      	uxth	r3, r3
 800862a:	f043 0301 	orr.w	r3, r3, #1
 800862e:	b29a      	uxth	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800863c:	b29b      	uxth	r3, r3
 800863e:	f043 0302 	orr.w	r3, r3, #2
 8008642:	b29a      	uxth	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d141      	bne.n	80086ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008666:	4b4b      	ldr	r3, [pc, #300]	@ (8008794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800866e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008672:	d131      	bne.n	80086d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008674:	4b47      	ldr	r3, [pc, #284]	@ (8008794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800867a:	4a46      	ldr	r2, [pc, #280]	@ (8008794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800867c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008680:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008684:	4b43      	ldr	r3, [pc, #268]	@ (8008794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800868c:	4a41      	ldr	r2, [pc, #260]	@ (8008794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800868e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008692:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008694:	4b40      	ldr	r3, [pc, #256]	@ (8008798 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2232      	movs	r2, #50	@ 0x32
 800869a:	fb02 f303 	mul.w	r3, r2, r3
 800869e:	4a3f      	ldr	r2, [pc, #252]	@ (800879c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80086a0:	fba2 2303 	umull	r2, r3, r2, r3
 80086a4:	0c9b      	lsrs	r3, r3, #18
 80086a6:	3301      	adds	r3, #1
 80086a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80086aa:	e002      	b.n	80086b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	3b01      	subs	r3, #1
 80086b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80086b2:	4b38      	ldr	r3, [pc, #224]	@ (8008794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086be:	d102      	bne.n	80086c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1f2      	bne.n	80086ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80086c6:	4b33      	ldr	r3, [pc, #204]	@ (8008794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086d2:	d158      	bne.n	8008786 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e057      	b.n	8008788 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80086d8:	4b2e      	ldr	r3, [pc, #184]	@ (8008794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086de:	4a2d      	ldr	r2, [pc, #180]	@ (8008794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80086e8:	e04d      	b.n	8008786 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086f0:	d141      	bne.n	8008776 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80086f2:	4b28      	ldr	r3, [pc, #160]	@ (8008794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80086fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086fe:	d131      	bne.n	8008764 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008700:	4b24      	ldr	r3, [pc, #144]	@ (8008794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008706:	4a23      	ldr	r2, [pc, #140]	@ (8008794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800870c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008710:	4b20      	ldr	r3, [pc, #128]	@ (8008794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008718:	4a1e      	ldr	r2, [pc, #120]	@ (8008794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800871a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800871e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008720:	4b1d      	ldr	r3, [pc, #116]	@ (8008798 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2232      	movs	r2, #50	@ 0x32
 8008726:	fb02 f303 	mul.w	r3, r2, r3
 800872a:	4a1c      	ldr	r2, [pc, #112]	@ (800879c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800872c:	fba2 2303 	umull	r2, r3, r2, r3
 8008730:	0c9b      	lsrs	r3, r3, #18
 8008732:	3301      	adds	r3, #1
 8008734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008736:	e002      	b.n	800873e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	3b01      	subs	r3, #1
 800873c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800873e:	4b15      	ldr	r3, [pc, #84]	@ (8008794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800874a:	d102      	bne.n	8008752 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1f2      	bne.n	8008738 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008752:	4b10      	ldr	r3, [pc, #64]	@ (8008794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800875a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800875e:	d112      	bne.n	8008786 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	e011      	b.n	8008788 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008764:	4b0b      	ldr	r3, [pc, #44]	@ (8008794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800876a:	4a0a      	ldr	r2, [pc, #40]	@ (8008794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800876c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008770:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008774:	e007      	b.n	8008786 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008776:	4b07      	ldr	r3, [pc, #28]	@ (8008794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800877e:	4a05      	ldr	r2, [pc, #20]	@ (8008794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008780:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008784:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	40007000 	.word	0x40007000
 8008798:	2000000c 	.word	0x2000000c
 800879c:	431bde83 	.word	0x431bde83

080087a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80087a0:	b480      	push	{r7}
 80087a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80087a4:	4b05      	ldr	r3, [pc, #20]	@ (80087bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	4a04      	ldr	r2, [pc, #16]	@ (80087bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80087aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80087ae:	6093      	str	r3, [r2, #8]
}
 80087b0:	bf00      	nop
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	40007000 	.word	0x40007000

080087c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e2fe      	b.n	8008dd0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d075      	beq.n	80088ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087de:	4b97      	ldr	r3, [pc, #604]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f003 030c 	and.w	r3, r3, #12
 80087e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80087e8:	4b94      	ldr	r3, [pc, #592]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	f003 0303 	and.w	r3, r3, #3
 80087f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	2b0c      	cmp	r3, #12
 80087f6:	d102      	bne.n	80087fe <HAL_RCC_OscConfig+0x3e>
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2b03      	cmp	r3, #3
 80087fc:	d002      	beq.n	8008804 <HAL_RCC_OscConfig+0x44>
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	2b08      	cmp	r3, #8
 8008802:	d10b      	bne.n	800881c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008804:	4b8d      	ldr	r3, [pc, #564]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d05b      	beq.n	80088c8 <HAL_RCC_OscConfig+0x108>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d157      	bne.n	80088c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e2d9      	b.n	8008dd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008824:	d106      	bne.n	8008834 <HAL_RCC_OscConfig+0x74>
 8008826:	4b85      	ldr	r3, [pc, #532]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a84      	ldr	r2, [pc, #528]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 800882c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	e01d      	b.n	8008870 <HAL_RCC_OscConfig+0xb0>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800883c:	d10c      	bne.n	8008858 <HAL_RCC_OscConfig+0x98>
 800883e:	4b7f      	ldr	r3, [pc, #508]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a7e      	ldr	r2, [pc, #504]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 8008844:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008848:	6013      	str	r3, [r2, #0]
 800884a:	4b7c      	ldr	r3, [pc, #496]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a7b      	ldr	r2, [pc, #492]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 8008850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008854:	6013      	str	r3, [r2, #0]
 8008856:	e00b      	b.n	8008870 <HAL_RCC_OscConfig+0xb0>
 8008858:	4b78      	ldr	r3, [pc, #480]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a77      	ldr	r2, [pc, #476]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 800885e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008862:	6013      	str	r3, [r2, #0]
 8008864:	4b75      	ldr	r3, [pc, #468]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a74      	ldr	r2, [pc, #464]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 800886a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800886e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d013      	beq.n	80088a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008878:	f7fc fe74 	bl	8005564 <HAL_GetTick>
 800887c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800887e:	e008      	b.n	8008892 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008880:	f7fc fe70 	bl	8005564 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	2b64      	cmp	r3, #100	@ 0x64
 800888c:	d901      	bls.n	8008892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e29e      	b.n	8008dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008892:	4b6a      	ldr	r3, [pc, #424]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d0f0      	beq.n	8008880 <HAL_RCC_OscConfig+0xc0>
 800889e:	e014      	b.n	80088ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088a0:	f7fc fe60 	bl	8005564 <HAL_GetTick>
 80088a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80088a6:	e008      	b.n	80088ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088a8:	f7fc fe5c 	bl	8005564 <HAL_GetTick>
 80088ac:	4602      	mov	r2, r0
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	2b64      	cmp	r3, #100	@ 0x64
 80088b4:	d901      	bls.n	80088ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80088b6:	2303      	movs	r3, #3
 80088b8:	e28a      	b.n	8008dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80088ba:	4b60      	ldr	r3, [pc, #384]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1f0      	bne.n	80088a8 <HAL_RCC_OscConfig+0xe8>
 80088c6:	e000      	b.n	80088ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 0302 	and.w	r3, r3, #2
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d075      	beq.n	80089c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088d6:	4b59      	ldr	r3, [pc, #356]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	f003 030c 	and.w	r3, r3, #12
 80088de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80088e0:	4b56      	ldr	r3, [pc, #344]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	f003 0303 	and.w	r3, r3, #3
 80088e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	2b0c      	cmp	r3, #12
 80088ee:	d102      	bne.n	80088f6 <HAL_RCC_OscConfig+0x136>
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d002      	beq.n	80088fc <HAL_RCC_OscConfig+0x13c>
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	2b04      	cmp	r3, #4
 80088fa:	d11f      	bne.n	800893c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088fc:	4b4f      	ldr	r3, [pc, #316]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008904:	2b00      	cmp	r3, #0
 8008906:	d005      	beq.n	8008914 <HAL_RCC_OscConfig+0x154>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e25d      	b.n	8008dd0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008914:	4b49      	ldr	r3, [pc, #292]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	061b      	lsls	r3, r3, #24
 8008922:	4946      	ldr	r1, [pc, #280]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 8008924:	4313      	orrs	r3, r2
 8008926:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008928:	4b45      	ldr	r3, [pc, #276]	@ (8008a40 <HAL_RCC_OscConfig+0x280>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4618      	mov	r0, r3
 800892e:	f7fc fb3b 	bl	8004fa8 <HAL_InitTick>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d043      	beq.n	80089c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e249      	b.n	8008dd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d023      	beq.n	800898c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008944:	4b3d      	ldr	r3, [pc, #244]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a3c      	ldr	r2, [pc, #240]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 800894a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800894e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008950:	f7fc fe08 	bl	8005564 <HAL_GetTick>
 8008954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008956:	e008      	b.n	800896a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008958:	f7fc fe04 	bl	8005564 <HAL_GetTick>
 800895c:	4602      	mov	r2, r0
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	2b02      	cmp	r3, #2
 8008964:	d901      	bls.n	800896a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008966:	2303      	movs	r3, #3
 8008968:	e232      	b.n	8008dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800896a:	4b34      	ldr	r3, [pc, #208]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008972:	2b00      	cmp	r3, #0
 8008974:	d0f0      	beq.n	8008958 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008976:	4b31      	ldr	r3, [pc, #196]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	061b      	lsls	r3, r3, #24
 8008984:	492d      	ldr	r1, [pc, #180]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 8008986:	4313      	orrs	r3, r2
 8008988:	604b      	str	r3, [r1, #4]
 800898a:	e01a      	b.n	80089c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800898c:	4b2b      	ldr	r3, [pc, #172]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a2a      	ldr	r2, [pc, #168]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 8008992:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008998:	f7fc fde4 	bl	8005564 <HAL_GetTick>
 800899c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800899e:	e008      	b.n	80089b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089a0:	f7fc fde0 	bl	8005564 <HAL_GetTick>
 80089a4:	4602      	mov	r2, r0
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d901      	bls.n	80089b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e20e      	b.n	8008dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80089b2:	4b22      	ldr	r3, [pc, #136]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1f0      	bne.n	80089a0 <HAL_RCC_OscConfig+0x1e0>
 80089be:	e000      	b.n	80089c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0308 	and.w	r3, r3, #8
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d041      	beq.n	8008a52 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d01c      	beq.n	8008a10 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089d6:	4b19      	ldr	r3, [pc, #100]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 80089d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089dc:	4a17      	ldr	r2, [pc, #92]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 80089de:	f043 0301 	orr.w	r3, r3, #1
 80089e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089e6:	f7fc fdbd 	bl	8005564 <HAL_GetTick>
 80089ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80089ec:	e008      	b.n	8008a00 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089ee:	f7fc fdb9 	bl	8005564 <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d901      	bls.n	8008a00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e1e7      	b.n	8008dd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a00:	4b0e      	ldr	r3, [pc, #56]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 8008a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a06:	f003 0302 	and.w	r3, r3, #2
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d0ef      	beq.n	80089ee <HAL_RCC_OscConfig+0x22e>
 8008a0e:	e020      	b.n	8008a52 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a10:	4b0a      	ldr	r3, [pc, #40]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 8008a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a16:	4a09      	ldr	r2, [pc, #36]	@ (8008a3c <HAL_RCC_OscConfig+0x27c>)
 8008a18:	f023 0301 	bic.w	r3, r3, #1
 8008a1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a20:	f7fc fda0 	bl	8005564 <HAL_GetTick>
 8008a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008a26:	e00d      	b.n	8008a44 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a28:	f7fc fd9c 	bl	8005564 <HAL_GetTick>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d906      	bls.n	8008a44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e1ca      	b.n	8008dd0 <HAL_RCC_OscConfig+0x610>
 8008a3a:	bf00      	nop
 8008a3c:	40021000 	.word	0x40021000
 8008a40:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008a44:	4b8c      	ldr	r3, [pc, #560]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1ea      	bne.n	8008a28 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0304 	and.w	r3, r3, #4
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f000 80a6 	beq.w	8008bac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a60:	2300      	movs	r3, #0
 8008a62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008a64:	4b84      	ldr	r3, [pc, #528]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <HAL_RCC_OscConfig+0x2b4>
 8008a70:	2301      	movs	r3, #1
 8008a72:	e000      	b.n	8008a76 <HAL_RCC_OscConfig+0x2b6>
 8008a74:	2300      	movs	r3, #0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00d      	beq.n	8008a96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a7a:	4b7f      	ldr	r3, [pc, #508]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a7e:	4a7e      	ldr	r2, [pc, #504]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a86:	4b7c      	ldr	r3, [pc, #496]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008a92:	2301      	movs	r3, #1
 8008a94:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a96:	4b79      	ldr	r3, [pc, #484]	@ (8008c7c <HAL_RCC_OscConfig+0x4bc>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d118      	bne.n	8008ad4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008aa2:	4b76      	ldr	r3, [pc, #472]	@ (8008c7c <HAL_RCC_OscConfig+0x4bc>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a75      	ldr	r2, [pc, #468]	@ (8008c7c <HAL_RCC_OscConfig+0x4bc>)
 8008aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008aae:	f7fc fd59 	bl	8005564 <HAL_GetTick>
 8008ab2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ab4:	e008      	b.n	8008ac8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ab6:	f7fc fd55 	bl	8005564 <HAL_GetTick>
 8008aba:	4602      	mov	r2, r0
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	1ad3      	subs	r3, r2, r3
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d901      	bls.n	8008ac8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e183      	b.n	8008dd0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ac8:	4b6c      	ldr	r3, [pc, #432]	@ (8008c7c <HAL_RCC_OscConfig+0x4bc>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d0f0      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d108      	bne.n	8008aee <HAL_RCC_OscConfig+0x32e>
 8008adc:	4b66      	ldr	r3, [pc, #408]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ae2:	4a65      	ldr	r2, [pc, #404]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008ae4:	f043 0301 	orr.w	r3, r3, #1
 8008ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008aec:	e024      	b.n	8008b38 <HAL_RCC_OscConfig+0x378>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	2b05      	cmp	r3, #5
 8008af4:	d110      	bne.n	8008b18 <HAL_RCC_OscConfig+0x358>
 8008af6:	4b60      	ldr	r3, [pc, #384]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008afc:	4a5e      	ldr	r2, [pc, #376]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008afe:	f043 0304 	orr.w	r3, r3, #4
 8008b02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008b06:	4b5c      	ldr	r3, [pc, #368]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b0c:	4a5a      	ldr	r2, [pc, #360]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008b0e:	f043 0301 	orr.w	r3, r3, #1
 8008b12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008b16:	e00f      	b.n	8008b38 <HAL_RCC_OscConfig+0x378>
 8008b18:	4b57      	ldr	r3, [pc, #348]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b1e:	4a56      	ldr	r2, [pc, #344]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008b20:	f023 0301 	bic.w	r3, r3, #1
 8008b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008b28:	4b53      	ldr	r3, [pc, #332]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b2e:	4a52      	ldr	r2, [pc, #328]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008b30:	f023 0304 	bic.w	r3, r3, #4
 8008b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d016      	beq.n	8008b6e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b40:	f7fc fd10 	bl	8005564 <HAL_GetTick>
 8008b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b46:	e00a      	b.n	8008b5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b48:	f7fc fd0c 	bl	8005564 <HAL_GetTick>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d901      	bls.n	8008b5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e138      	b.n	8008dd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b5e:	4b46      	ldr	r3, [pc, #280]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b64:	f003 0302 	and.w	r3, r3, #2
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d0ed      	beq.n	8008b48 <HAL_RCC_OscConfig+0x388>
 8008b6c:	e015      	b.n	8008b9a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b6e:	f7fc fcf9 	bl	8005564 <HAL_GetTick>
 8008b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008b74:	e00a      	b.n	8008b8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b76:	f7fc fcf5 	bl	8005564 <HAL_GetTick>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d901      	bls.n	8008b8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	e121      	b.n	8008dd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008b8c:	4b3a      	ldr	r3, [pc, #232]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b92:	f003 0302 	and.w	r3, r3, #2
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1ed      	bne.n	8008b76 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008b9a:	7ffb      	ldrb	r3, [r7, #31]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d105      	bne.n	8008bac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ba0:	4b35      	ldr	r3, [pc, #212]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ba4:	4a34      	ldr	r2, [pc, #208]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008ba6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008baa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0320 	and.w	r3, r3, #32
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d03c      	beq.n	8008c32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d01c      	beq.n	8008bfa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008bc6:	4a2c      	ldr	r2, [pc, #176]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008bc8:	f043 0301 	orr.w	r3, r3, #1
 8008bcc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bd0:	f7fc fcc8 	bl	8005564 <HAL_GetTick>
 8008bd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008bd6:	e008      	b.n	8008bea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008bd8:	f7fc fcc4 	bl	8005564 <HAL_GetTick>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d901      	bls.n	8008bea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e0f2      	b.n	8008dd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008bea:	4b23      	ldr	r3, [pc, #140]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008bec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008bf0:	f003 0302 	and.w	r3, r3, #2
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d0ef      	beq.n	8008bd8 <HAL_RCC_OscConfig+0x418>
 8008bf8:	e01b      	b.n	8008c32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c00:	4a1d      	ldr	r2, [pc, #116]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008c02:	f023 0301 	bic.w	r3, r3, #1
 8008c06:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c0a:	f7fc fcab 	bl	8005564 <HAL_GetTick>
 8008c0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008c10:	e008      	b.n	8008c24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c12:	f7fc fca7 	bl	8005564 <HAL_GetTick>
 8008c16:	4602      	mov	r2, r0
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d901      	bls.n	8008c24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e0d5      	b.n	8008dd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008c24:	4b14      	ldr	r3, [pc, #80]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c2a:	f003 0302 	and.w	r3, r3, #2
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1ef      	bne.n	8008c12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	69db      	ldr	r3, [r3, #28]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f000 80c9 	beq.w	8008dce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	f003 030c 	and.w	r3, r3, #12
 8008c44:	2b0c      	cmp	r3, #12
 8008c46:	f000 8083 	beq.w	8008d50 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d15e      	bne.n	8008d10 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c52:	4b09      	ldr	r3, [pc, #36]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a08      	ldr	r2, [pc, #32]	@ (8008c78 <HAL_RCC_OscConfig+0x4b8>)
 8008c58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c5e:	f7fc fc81 	bl	8005564 <HAL_GetTick>
 8008c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c64:	e00c      	b.n	8008c80 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c66:	f7fc fc7d 	bl	8005564 <HAL_GetTick>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d905      	bls.n	8008c80 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008c74:	2303      	movs	r3, #3
 8008c76:	e0ab      	b.n	8008dd0 <HAL_RCC_OscConfig+0x610>
 8008c78:	40021000 	.word	0x40021000
 8008c7c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c80:	4b55      	ldr	r3, [pc, #340]	@ (8008dd8 <HAL_RCC_OscConfig+0x618>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1ec      	bne.n	8008c66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c8c:	4b52      	ldr	r3, [pc, #328]	@ (8008dd8 <HAL_RCC_OscConfig+0x618>)
 8008c8e:	68da      	ldr	r2, [r3, #12]
 8008c90:	4b52      	ldr	r3, [pc, #328]	@ (8008ddc <HAL_RCC_OscConfig+0x61c>)
 8008c92:	4013      	ands	r3, r2
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	6a11      	ldr	r1, [r2, #32]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008c9c:	3a01      	subs	r2, #1
 8008c9e:	0112      	lsls	r2, r2, #4
 8008ca0:	4311      	orrs	r1, r2
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008ca6:	0212      	lsls	r2, r2, #8
 8008ca8:	4311      	orrs	r1, r2
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008cae:	0852      	lsrs	r2, r2, #1
 8008cb0:	3a01      	subs	r2, #1
 8008cb2:	0552      	lsls	r2, r2, #21
 8008cb4:	4311      	orrs	r1, r2
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008cba:	0852      	lsrs	r2, r2, #1
 8008cbc:	3a01      	subs	r2, #1
 8008cbe:	0652      	lsls	r2, r2, #25
 8008cc0:	4311      	orrs	r1, r2
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008cc6:	06d2      	lsls	r2, r2, #27
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	4943      	ldr	r1, [pc, #268]	@ (8008dd8 <HAL_RCC_OscConfig+0x618>)
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008cd0:	4b41      	ldr	r3, [pc, #260]	@ (8008dd8 <HAL_RCC_OscConfig+0x618>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a40      	ldr	r2, [pc, #256]	@ (8008dd8 <HAL_RCC_OscConfig+0x618>)
 8008cd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008cda:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008cdc:	4b3e      	ldr	r3, [pc, #248]	@ (8008dd8 <HAL_RCC_OscConfig+0x618>)
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	4a3d      	ldr	r2, [pc, #244]	@ (8008dd8 <HAL_RCC_OscConfig+0x618>)
 8008ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ce6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ce8:	f7fc fc3c 	bl	8005564 <HAL_GetTick>
 8008cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cee:	e008      	b.n	8008d02 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cf0:	f7fc fc38 	bl	8005564 <HAL_GetTick>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d901      	bls.n	8008d02 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e066      	b.n	8008dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d02:	4b35      	ldr	r3, [pc, #212]	@ (8008dd8 <HAL_RCC_OscConfig+0x618>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d0f0      	beq.n	8008cf0 <HAL_RCC_OscConfig+0x530>
 8008d0e:	e05e      	b.n	8008dce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d10:	4b31      	ldr	r3, [pc, #196]	@ (8008dd8 <HAL_RCC_OscConfig+0x618>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a30      	ldr	r2, [pc, #192]	@ (8008dd8 <HAL_RCC_OscConfig+0x618>)
 8008d16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d1c:	f7fc fc22 	bl	8005564 <HAL_GetTick>
 8008d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d22:	e008      	b.n	8008d36 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d24:	f7fc fc1e 	bl	8005564 <HAL_GetTick>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	1ad3      	subs	r3, r2, r3
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d901      	bls.n	8008d36 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008d32:	2303      	movs	r3, #3
 8008d34:	e04c      	b.n	8008dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d36:	4b28      	ldr	r3, [pc, #160]	@ (8008dd8 <HAL_RCC_OscConfig+0x618>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1f0      	bne.n	8008d24 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008d42:	4b25      	ldr	r3, [pc, #148]	@ (8008dd8 <HAL_RCC_OscConfig+0x618>)
 8008d44:	68da      	ldr	r2, [r3, #12]
 8008d46:	4924      	ldr	r1, [pc, #144]	@ (8008dd8 <HAL_RCC_OscConfig+0x618>)
 8008d48:	4b25      	ldr	r3, [pc, #148]	@ (8008de0 <HAL_RCC_OscConfig+0x620>)
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	60cb      	str	r3, [r1, #12]
 8008d4e:	e03e      	b.n	8008dce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d101      	bne.n	8008d5c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e039      	b.n	8008dd0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8008dd8 <HAL_RCC_OscConfig+0x618>)
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f003 0203 	and.w	r2, r3, #3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a1b      	ldr	r3, [r3, #32]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d12c      	bne.n	8008dca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d123      	bne.n	8008dca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d11b      	bne.n	8008dca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d9c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d113      	bne.n	8008dca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dac:	085b      	lsrs	r3, r3, #1
 8008dae:	3b01      	subs	r3, #1
 8008db0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d109      	bne.n	8008dca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dc0:	085b      	lsrs	r3, r3, #1
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d001      	beq.n	8008dce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e000      	b.n	8008dd0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3720      	adds	r7, #32
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	40021000 	.word	0x40021000
 8008ddc:	019f800c 	.word	0x019f800c
 8008de0:	feeefffc 	.word	0xfeeefffc

08008de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008dee:	2300      	movs	r3, #0
 8008df0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d101      	bne.n	8008dfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e11e      	b.n	800903a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008dfc:	4b91      	ldr	r3, [pc, #580]	@ (8009044 <HAL_RCC_ClockConfig+0x260>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 030f 	and.w	r3, r3, #15
 8008e04:	683a      	ldr	r2, [r7, #0]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d910      	bls.n	8008e2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e0a:	4b8e      	ldr	r3, [pc, #568]	@ (8009044 <HAL_RCC_ClockConfig+0x260>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f023 020f 	bic.w	r2, r3, #15
 8008e12:	498c      	ldr	r1, [pc, #560]	@ (8009044 <HAL_RCC_ClockConfig+0x260>)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e1a:	4b8a      	ldr	r3, [pc, #552]	@ (8009044 <HAL_RCC_ClockConfig+0x260>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 030f 	and.w	r3, r3, #15
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d001      	beq.n	8008e2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e106      	b.n	800903a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 0301 	and.w	r3, r3, #1
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d073      	beq.n	8008f20 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	2b03      	cmp	r3, #3
 8008e3e:	d129      	bne.n	8008e94 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e40:	4b81      	ldr	r3, [pc, #516]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e0f4      	b.n	800903a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008e50:	f000 f9ce 	bl	80091f0 <RCC_GetSysClockFreqFromPLLSource>
 8008e54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	4a7c      	ldr	r2, [pc, #496]	@ (800904c <HAL_RCC_ClockConfig+0x268>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d93f      	bls.n	8008ede <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008e5e:	4b7a      	ldr	r3, [pc, #488]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d009      	beq.n	8008e7e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d033      	beq.n	8008ede <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d12f      	bne.n	8008ede <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008e7e:	4b72      	ldr	r3, [pc, #456]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e86:	4a70      	ldr	r2, [pc, #448]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008e8e:	2380      	movs	r3, #128	@ 0x80
 8008e90:	617b      	str	r3, [r7, #20]
 8008e92:	e024      	b.n	8008ede <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d107      	bne.n	8008eac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e9c:	4b6a      	ldr	r3, [pc, #424]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d109      	bne.n	8008ebc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e0c6      	b.n	800903a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008eac:	4b66      	ldr	r3, [pc, #408]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e0be      	b.n	800903a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008ebc:	f000 f8ce 	bl	800905c <HAL_RCC_GetSysClockFreq>
 8008ec0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	4a61      	ldr	r2, [pc, #388]	@ (800904c <HAL_RCC_ClockConfig+0x268>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d909      	bls.n	8008ede <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008eca:	4b5f      	ldr	r3, [pc, #380]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ed2:	4a5d      	ldr	r2, [pc, #372]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008ed4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ed8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008eda:	2380      	movs	r3, #128	@ 0x80
 8008edc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008ede:	4b5a      	ldr	r3, [pc, #360]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f023 0203 	bic.w	r2, r3, #3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	4957      	ldr	r1, [pc, #348]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008eec:	4313      	orrs	r3, r2
 8008eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ef0:	f7fc fb38 	bl	8005564 <HAL_GetTick>
 8008ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ef6:	e00a      	b.n	8008f0e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ef8:	f7fc fb34 	bl	8005564 <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d901      	bls.n	8008f0e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	e095      	b.n	800903a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f0e:	4b4e      	ldr	r3, [pc, #312]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f003 020c 	and.w	r2, r3, #12
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d1eb      	bne.n	8008ef8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 0302 	and.w	r3, r3, #2
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d023      	beq.n	8008f74 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 0304 	and.w	r3, r3, #4
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d005      	beq.n	8008f44 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f38:	4b43      	ldr	r3, [pc, #268]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	4a42      	ldr	r2, [pc, #264]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008f3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008f42:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0308 	and.w	r3, r3, #8
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d007      	beq.n	8008f60 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008f50:	4b3d      	ldr	r3, [pc, #244]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008f58:	4a3b      	ldr	r2, [pc, #236]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008f5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008f5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f60:	4b39      	ldr	r3, [pc, #228]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	4936      	ldr	r1, [pc, #216]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	608b      	str	r3, [r1, #8]
 8008f72:	e008      	b.n	8008f86 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	2b80      	cmp	r3, #128	@ 0x80
 8008f78:	d105      	bne.n	8008f86 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008f7a:	4b33      	ldr	r3, [pc, #204]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	4a32      	ldr	r2, [pc, #200]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008f80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f84:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f86:	4b2f      	ldr	r3, [pc, #188]	@ (8009044 <HAL_RCC_ClockConfig+0x260>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 030f 	and.w	r3, r3, #15
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d21d      	bcs.n	8008fd0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f94:	4b2b      	ldr	r3, [pc, #172]	@ (8009044 <HAL_RCC_ClockConfig+0x260>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f023 020f 	bic.w	r2, r3, #15
 8008f9c:	4929      	ldr	r1, [pc, #164]	@ (8009044 <HAL_RCC_ClockConfig+0x260>)
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008fa4:	f7fc fade 	bl	8005564 <HAL_GetTick>
 8008fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008faa:	e00a      	b.n	8008fc2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fac:	f7fc fada 	bl	8005564 <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d901      	bls.n	8008fc2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	e03b      	b.n	800903a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fc2:	4b20      	ldr	r3, [pc, #128]	@ (8009044 <HAL_RCC_ClockConfig+0x260>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 030f 	and.w	r3, r3, #15
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d1ed      	bne.n	8008fac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 0304 	and.w	r3, r3, #4
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d008      	beq.n	8008fee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	4917      	ldr	r1, [pc, #92]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008fea:	4313      	orrs	r3, r2
 8008fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 0308 	and.w	r3, r3, #8
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d009      	beq.n	800900e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ffa:	4b13      	ldr	r3, [pc, #76]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	00db      	lsls	r3, r3, #3
 8009008:	490f      	ldr	r1, [pc, #60]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 800900a:	4313      	orrs	r3, r2
 800900c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800900e:	f000 f825 	bl	800905c <HAL_RCC_GetSysClockFreq>
 8009012:	4602      	mov	r2, r0
 8009014:	4b0c      	ldr	r3, [pc, #48]	@ (8009048 <HAL_RCC_ClockConfig+0x264>)
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	091b      	lsrs	r3, r3, #4
 800901a:	f003 030f 	and.w	r3, r3, #15
 800901e:	490c      	ldr	r1, [pc, #48]	@ (8009050 <HAL_RCC_ClockConfig+0x26c>)
 8009020:	5ccb      	ldrb	r3, [r1, r3]
 8009022:	f003 031f 	and.w	r3, r3, #31
 8009026:	fa22 f303 	lsr.w	r3, r2, r3
 800902a:	4a0a      	ldr	r2, [pc, #40]	@ (8009054 <HAL_RCC_ClockConfig+0x270>)
 800902c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800902e:	4b0a      	ldr	r3, [pc, #40]	@ (8009058 <HAL_RCC_ClockConfig+0x274>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4618      	mov	r0, r3
 8009034:	f7fb ffb8 	bl	8004fa8 <HAL_InitTick>
 8009038:	4603      	mov	r3, r0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	40022000 	.word	0x40022000
 8009048:	40021000 	.word	0x40021000
 800904c:	04c4b400 	.word	0x04c4b400
 8009050:	08022628 	.word	0x08022628
 8009054:	2000000c 	.word	0x2000000c
 8009058:	20000010 	.word	0x20000010

0800905c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800905c:	b480      	push	{r7}
 800905e:	b087      	sub	sp, #28
 8009060:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009062:	4b2c      	ldr	r3, [pc, #176]	@ (8009114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	f003 030c 	and.w	r3, r3, #12
 800906a:	2b04      	cmp	r3, #4
 800906c:	d102      	bne.n	8009074 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800906e:	4b2a      	ldr	r3, [pc, #168]	@ (8009118 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009070:	613b      	str	r3, [r7, #16]
 8009072:	e047      	b.n	8009104 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009074:	4b27      	ldr	r3, [pc, #156]	@ (8009114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	f003 030c 	and.w	r3, r3, #12
 800907c:	2b08      	cmp	r3, #8
 800907e:	d102      	bne.n	8009086 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009080:	4b25      	ldr	r3, [pc, #148]	@ (8009118 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009082:	613b      	str	r3, [r7, #16]
 8009084:	e03e      	b.n	8009104 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009086:	4b23      	ldr	r3, [pc, #140]	@ (8009114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	f003 030c 	and.w	r3, r3, #12
 800908e:	2b0c      	cmp	r3, #12
 8009090:	d136      	bne.n	8009100 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009092:	4b20      	ldr	r3, [pc, #128]	@ (8009114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	f003 0303 	and.w	r3, r3, #3
 800909a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800909c:	4b1d      	ldr	r3, [pc, #116]	@ (8009114 <HAL_RCC_GetSysClockFreq+0xb8>)
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	091b      	lsrs	r3, r3, #4
 80090a2:	f003 030f 	and.w	r3, r3, #15
 80090a6:	3301      	adds	r3, #1
 80090a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2b03      	cmp	r3, #3
 80090ae:	d10c      	bne.n	80090ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80090b0:	4a19      	ldr	r2, [pc, #100]	@ (8009118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80090b8:	4a16      	ldr	r2, [pc, #88]	@ (8009114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80090ba:	68d2      	ldr	r2, [r2, #12]
 80090bc:	0a12      	lsrs	r2, r2, #8
 80090be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80090c2:	fb02 f303 	mul.w	r3, r2, r3
 80090c6:	617b      	str	r3, [r7, #20]
      break;
 80090c8:	e00c      	b.n	80090e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80090ca:	4a13      	ldr	r2, [pc, #76]	@ (8009118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d2:	4a10      	ldr	r2, [pc, #64]	@ (8009114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80090d4:	68d2      	ldr	r2, [r2, #12]
 80090d6:	0a12      	lsrs	r2, r2, #8
 80090d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80090dc:	fb02 f303 	mul.w	r3, r2, r3
 80090e0:	617b      	str	r3, [r7, #20]
      break;
 80090e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80090e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	0e5b      	lsrs	r3, r3, #25
 80090ea:	f003 0303 	and.w	r3, r3, #3
 80090ee:	3301      	adds	r3, #1
 80090f0:	005b      	lsls	r3, r3, #1
 80090f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80090f4:	697a      	ldr	r2, [r7, #20]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090fc:	613b      	str	r3, [r7, #16]
 80090fe:	e001      	b.n	8009104 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009100:	2300      	movs	r3, #0
 8009102:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009104:	693b      	ldr	r3, [r7, #16]
}
 8009106:	4618      	mov	r0, r3
 8009108:	371c      	adds	r7, #28
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	40021000 	.word	0x40021000
 8009118:	00f42400 	.word	0x00f42400

0800911c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800911c:	b480      	push	{r7}
 800911e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009120:	4b03      	ldr	r3, [pc, #12]	@ (8009130 <HAL_RCC_GetHCLKFreq+0x14>)
 8009122:	681b      	ldr	r3, [r3, #0]
}
 8009124:	4618      	mov	r0, r3
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	2000000c 	.word	0x2000000c

08009134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009138:	f7ff fff0 	bl	800911c <HAL_RCC_GetHCLKFreq>
 800913c:	4602      	mov	r2, r0
 800913e:	4b06      	ldr	r3, [pc, #24]	@ (8009158 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	0a1b      	lsrs	r3, r3, #8
 8009144:	f003 0307 	and.w	r3, r3, #7
 8009148:	4904      	ldr	r1, [pc, #16]	@ (800915c <HAL_RCC_GetPCLK1Freq+0x28>)
 800914a:	5ccb      	ldrb	r3, [r1, r3]
 800914c:	f003 031f 	and.w	r3, r3, #31
 8009150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009154:	4618      	mov	r0, r3
 8009156:	bd80      	pop	{r7, pc}
 8009158:	40021000 	.word	0x40021000
 800915c:	08022638 	.word	0x08022638

08009160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009164:	f7ff ffda 	bl	800911c <HAL_RCC_GetHCLKFreq>
 8009168:	4602      	mov	r2, r0
 800916a:	4b06      	ldr	r3, [pc, #24]	@ (8009184 <HAL_RCC_GetPCLK2Freq+0x24>)
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	0adb      	lsrs	r3, r3, #11
 8009170:	f003 0307 	and.w	r3, r3, #7
 8009174:	4904      	ldr	r1, [pc, #16]	@ (8009188 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009176:	5ccb      	ldrb	r3, [r1, r3]
 8009178:	f003 031f 	and.w	r3, r3, #31
 800917c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009180:	4618      	mov	r0, r3
 8009182:	bd80      	pop	{r7, pc}
 8009184:	40021000 	.word	0x40021000
 8009188:	08022638 	.word	0x08022638

0800918c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	220f      	movs	r2, #15
 800919a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800919c:	4b12      	ldr	r3, [pc, #72]	@ (80091e8 <HAL_RCC_GetClockConfig+0x5c>)
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	f003 0203 	and.w	r2, r3, #3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80091a8:	4b0f      	ldr	r3, [pc, #60]	@ (80091e8 <HAL_RCC_GetClockConfig+0x5c>)
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80091b4:	4b0c      	ldr	r3, [pc, #48]	@ (80091e8 <HAL_RCC_GetClockConfig+0x5c>)
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80091c0:	4b09      	ldr	r3, [pc, #36]	@ (80091e8 <HAL_RCC_GetClockConfig+0x5c>)
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	08db      	lsrs	r3, r3, #3
 80091c6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80091ce:	4b07      	ldr	r3, [pc, #28]	@ (80091ec <HAL_RCC_GetClockConfig+0x60>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 020f 	and.w	r2, r3, #15
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	601a      	str	r2, [r3, #0]
}
 80091da:	bf00      	nop
 80091dc:	370c      	adds	r7, #12
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	40021000 	.word	0x40021000
 80091ec:	40022000 	.word	0x40022000

080091f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b087      	sub	sp, #28
 80091f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80091f6:	4b1e      	ldr	r3, [pc, #120]	@ (8009270 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	f003 0303 	and.w	r3, r3, #3
 80091fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009200:	4b1b      	ldr	r3, [pc, #108]	@ (8009270 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	091b      	lsrs	r3, r3, #4
 8009206:	f003 030f 	and.w	r3, r3, #15
 800920a:	3301      	adds	r3, #1
 800920c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	2b03      	cmp	r3, #3
 8009212:	d10c      	bne.n	800922e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009214:	4a17      	ldr	r2, [pc, #92]	@ (8009274 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	fbb2 f3f3 	udiv	r3, r2, r3
 800921c:	4a14      	ldr	r2, [pc, #80]	@ (8009270 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800921e:	68d2      	ldr	r2, [r2, #12]
 8009220:	0a12      	lsrs	r2, r2, #8
 8009222:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009226:	fb02 f303 	mul.w	r3, r2, r3
 800922a:	617b      	str	r3, [r7, #20]
    break;
 800922c:	e00c      	b.n	8009248 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800922e:	4a11      	ldr	r2, [pc, #68]	@ (8009274 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	fbb2 f3f3 	udiv	r3, r2, r3
 8009236:	4a0e      	ldr	r2, [pc, #56]	@ (8009270 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009238:	68d2      	ldr	r2, [r2, #12]
 800923a:	0a12      	lsrs	r2, r2, #8
 800923c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009240:	fb02 f303 	mul.w	r3, r2, r3
 8009244:	617b      	str	r3, [r7, #20]
    break;
 8009246:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009248:	4b09      	ldr	r3, [pc, #36]	@ (8009270 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	0e5b      	lsrs	r3, r3, #25
 800924e:	f003 0303 	and.w	r3, r3, #3
 8009252:	3301      	adds	r3, #1
 8009254:	005b      	lsls	r3, r3, #1
 8009256:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009258:	697a      	ldr	r2, [r7, #20]
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009260:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009262:	687b      	ldr	r3, [r7, #4]
}
 8009264:	4618      	mov	r0, r3
 8009266:	371c      	adds	r7, #28
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr
 8009270:	40021000 	.word	0x40021000
 8009274:	00f42400 	.word	0x00f42400

08009278 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009280:	2300      	movs	r3, #0
 8009282:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009284:	2300      	movs	r3, #0
 8009286:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 8098 	beq.w	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009296:	2300      	movs	r3, #0
 8009298:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800929a:	4b43      	ldr	r3, [pc, #268]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800929c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800929e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10d      	bne.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092a6:	4b40      	ldr	r3, [pc, #256]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092aa:	4a3f      	ldr	r2, [pc, #252]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80092b2:	4b3d      	ldr	r3, [pc, #244]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092ba:	60bb      	str	r3, [r7, #8]
 80092bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092be:	2301      	movs	r3, #1
 80092c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092c2:	4b3a      	ldr	r3, [pc, #232]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a39      	ldr	r2, [pc, #228]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80092c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092ce:	f7fc f949 	bl	8005564 <HAL_GetTick>
 80092d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092d4:	e009      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092d6:	f7fc f945 	bl	8005564 <HAL_GetTick>
 80092da:	4602      	mov	r2, r0
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d902      	bls.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	74fb      	strb	r3, [r7, #19]
        break;
 80092e8:	e005      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092ea:	4b30      	ldr	r3, [pc, #192]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d0ef      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80092f6:	7cfb      	ldrb	r3, [r7, #19]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d159      	bne.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80092fc:	4b2a      	ldr	r3, [pc, #168]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009306:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d01e      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	429a      	cmp	r2, r3
 8009316:	d019      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009318:	4b23      	ldr	r3, [pc, #140]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800931a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800931e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009322:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009324:	4b20      	ldr	r3, [pc, #128]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800932a:	4a1f      	ldr	r2, [pc, #124]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800932c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009330:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009334:	4b1c      	ldr	r3, [pc, #112]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800933a:	4a1b      	ldr	r2, [pc, #108]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800933c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009344:	4a18      	ldr	r2, [pc, #96]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d016      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009356:	f7fc f905 	bl	8005564 <HAL_GetTick>
 800935a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800935c:	e00b      	b.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800935e:	f7fc f901 	bl	8005564 <HAL_GetTick>
 8009362:	4602      	mov	r2, r0
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800936c:	4293      	cmp	r3, r2
 800936e:	d902      	bls.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009370:	2303      	movs	r3, #3
 8009372:	74fb      	strb	r3, [r7, #19]
            break;
 8009374:	e006      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009376:	4b0c      	ldr	r3, [pc, #48]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800937c:	f003 0302 	and.w	r3, r3, #2
 8009380:	2b00      	cmp	r3, #0
 8009382:	d0ec      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009384:	7cfb      	ldrb	r3, [r7, #19]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d10b      	bne.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800938a:	4b07      	ldr	r3, [pc, #28]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800938c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009390:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009398:	4903      	ldr	r1, [pc, #12]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800939a:	4313      	orrs	r3, r2
 800939c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80093a0:	e008      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80093a2:	7cfb      	ldrb	r3, [r7, #19]
 80093a4:	74bb      	strb	r3, [r7, #18]
 80093a6:	e005      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80093a8:	40021000 	.word	0x40021000
 80093ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b0:	7cfb      	ldrb	r3, [r7, #19]
 80093b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80093b4:	7c7b      	ldrb	r3, [r7, #17]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d105      	bne.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093ba:	4ba7      	ldr	r3, [pc, #668]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093be:	4aa6      	ldr	r2, [pc, #664]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 0301 	and.w	r3, r3, #1
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00a      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80093d2:	4ba1      	ldr	r3, [pc, #644]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093d8:	f023 0203 	bic.w	r2, r3, #3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	499d      	ldr	r1, [pc, #628]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0302 	and.w	r3, r3, #2
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00a      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80093f4:	4b98      	ldr	r3, [pc, #608]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093fa:	f023 020c 	bic.w	r2, r3, #12
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	4995      	ldr	r1, [pc, #596]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009404:	4313      	orrs	r3, r2
 8009406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 0304 	and.w	r3, r3, #4
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00a      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009416:	4b90      	ldr	r3, [pc, #576]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800941c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	498c      	ldr	r1, [pc, #560]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009426:	4313      	orrs	r3, r2
 8009428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0308 	and.w	r3, r3, #8
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00a      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009438:	4b87      	ldr	r3, [pc, #540]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800943a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800943e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	4984      	ldr	r1, [pc, #528]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009448:	4313      	orrs	r3, r2
 800944a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f003 0310 	and.w	r3, r3, #16
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00a      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800945a:	4b7f      	ldr	r3, [pc, #508]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800945c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009460:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	695b      	ldr	r3, [r3, #20]
 8009468:	497b      	ldr	r1, [pc, #492]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800946a:	4313      	orrs	r3, r2
 800946c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 0320 	and.w	r3, r3, #32
 8009478:	2b00      	cmp	r3, #0
 800947a:	d00a      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800947c:	4b76      	ldr	r3, [pc, #472]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800947e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009482:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	4973      	ldr	r1, [pc, #460]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800948c:	4313      	orrs	r3, r2
 800948e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00a      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800949e:	4b6e      	ldr	r3, [pc, #440]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	69db      	ldr	r3, [r3, #28]
 80094ac:	496a      	ldr	r1, [pc, #424]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ae:	4313      	orrs	r3, r2
 80094b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00a      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80094c0:	4b65      	ldr	r3, [pc, #404]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	4962      	ldr	r1, [pc, #392]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094d0:	4313      	orrs	r3, r2
 80094d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00a      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80094e2:	4b5d      	ldr	r3, [pc, #372]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f0:	4959      	ldr	r1, [pc, #356]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094f2:	4313      	orrs	r3, r2
 80094f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00a      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009504:	4b54      	ldr	r3, [pc, #336]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009506:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800950a:	f023 0203 	bic.w	r2, r3, #3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009512:	4951      	ldr	r1, [pc, #324]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009514:	4313      	orrs	r3, r2
 8009516:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00a      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009526:	4b4c      	ldr	r3, [pc, #304]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800952c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009534:	4948      	ldr	r1, [pc, #288]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009536:	4313      	orrs	r3, r2
 8009538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009544:	2b00      	cmp	r3, #0
 8009546:	d015      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009548:	4b43      	ldr	r3, [pc, #268]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800954a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800954e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009556:	4940      	ldr	r1, [pc, #256]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009558:	4313      	orrs	r3, r2
 800955a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009562:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009566:	d105      	bne.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009568:	4b3b      	ldr	r3, [pc, #236]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	4a3a      	ldr	r2, [pc, #232]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800956e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009572:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800957c:	2b00      	cmp	r3, #0
 800957e:	d015      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009580:	4b35      	ldr	r3, [pc, #212]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009586:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800958e:	4932      	ldr	r1, [pc, #200]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009590:	4313      	orrs	r3, r2
 8009592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800959a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800959e:	d105      	bne.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095a0:	4b2d      	ldr	r3, [pc, #180]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	4a2c      	ldr	r2, [pc, #176]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095aa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d015      	beq.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80095b8:	4b27      	ldr	r3, [pc, #156]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095c6:	4924      	ldr	r1, [pc, #144]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095c8:	4313      	orrs	r3, r2
 80095ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095d6:	d105      	bne.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095d8:	4b1f      	ldr	r3, [pc, #124]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	4a1e      	ldr	r2, [pc, #120]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d015      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80095f0:	4b19      	ldr	r3, [pc, #100]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095fe:	4916      	ldr	r1, [pc, #88]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009600:	4313      	orrs	r3, r2
 8009602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800960a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800960e:	d105      	bne.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009610:	4b11      	ldr	r3, [pc, #68]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	4a10      	ldr	r2, [pc, #64]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009616:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800961a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d019      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009628:	4b0b      	ldr	r3, [pc, #44]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800962a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800962e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009636:	4908      	ldr	r1, [pc, #32]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009638:	4313      	orrs	r3, r2
 800963a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009642:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009646:	d109      	bne.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009648:	4b03      	ldr	r3, [pc, #12]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	4a02      	ldr	r2, [pc, #8]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800964e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009652:	60d3      	str	r3, [r2, #12]
 8009654:	e002      	b.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009656:	bf00      	nop
 8009658:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009664:	2b00      	cmp	r3, #0
 8009666:	d015      	beq.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009668:	4b29      	ldr	r3, [pc, #164]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800966a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800966e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009676:	4926      	ldr	r1, [pc, #152]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009678:	4313      	orrs	r3, r2
 800967a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009682:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009686:	d105      	bne.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009688:	4b21      	ldr	r3, [pc, #132]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	4a20      	ldr	r2, [pc, #128]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800968e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009692:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d015      	beq.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80096a0:	4b1b      	ldr	r3, [pc, #108]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096a6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096ae:	4918      	ldr	r1, [pc, #96]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096b0:	4313      	orrs	r3, r2
 80096b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096be:	d105      	bne.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80096c0:	4b13      	ldr	r3, [pc, #76]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	4a12      	ldr	r2, [pc, #72]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096ca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d015      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80096d8:	4b0d      	ldr	r3, [pc, #52]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80096de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096e6:	490a      	ldr	r1, [pc, #40]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096e8:	4313      	orrs	r3, r2
 80096ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80096f6:	d105      	bne.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096f8:	4b05      	ldr	r3, [pc, #20]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	4a04      	ldr	r2, [pc, #16]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009702:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009704:	7cbb      	ldrb	r3, [r7, #18]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3718      	adds	r7, #24
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	40021000 	.word	0x40021000

08009714 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e09d      	b.n	8009862 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800972a:	2b00      	cmp	r3, #0
 800972c:	d108      	bne.n	8009740 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009736:	d009      	beq.n	800974c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	61da      	str	r2, [r3, #28]
 800973e:	e005      	b.n	800974c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009758:	b2db      	uxtb	r3, r3
 800975a:	2b00      	cmp	r3, #0
 800975c:	d106      	bne.n	800976c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7fb fbb2 	bl	8004ed0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2202      	movs	r2, #2
 8009770:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009782:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800978c:	d902      	bls.n	8009794 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800978e:	2300      	movs	r3, #0
 8009790:	60fb      	str	r3, [r7, #12]
 8009792:	e002      	b.n	800979a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009794:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009798:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80097a2:	d007      	beq.n	80097b4 <HAL_SPI_Init+0xa0>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80097ac:	d002      	beq.n	80097b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80097c4:	431a      	orrs	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	f003 0302 	and.w	r3, r3, #2
 80097ce:	431a      	orrs	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	431a      	orrs	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097e2:	431a      	orrs	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	69db      	ldr	r3, [r3, #28]
 80097e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097ec:	431a      	orrs	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097f6:	ea42 0103 	orr.w	r1, r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097fe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	430a      	orrs	r2, r1
 8009808:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	0c1b      	lsrs	r3, r3, #16
 8009810:	f003 0204 	and.w	r2, r3, #4
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009818:	f003 0310 	and.w	r3, r3, #16
 800981c:	431a      	orrs	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009822:	f003 0308 	and.w	r3, r3, #8
 8009826:	431a      	orrs	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009830:	ea42 0103 	orr.w	r1, r2, r3
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	430a      	orrs	r2, r1
 8009840:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	69da      	ldr	r2, [r3, #28]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009850:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b088      	sub	sp, #32
 800986e:	af00      	add	r7, sp, #0
 8009870:	60f8      	str	r0, [r7, #12]
 8009872:	60b9      	str	r1, [r7, #8]
 8009874:	603b      	str	r3, [r7, #0]
 8009876:	4613      	mov	r3, r2
 8009878:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800987a:	f7fb fe73 	bl	8005564 <HAL_GetTick>
 800987e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009880:	88fb      	ldrh	r3, [r7, #6]
 8009882:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b01      	cmp	r3, #1
 800988e:	d001      	beq.n	8009894 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009890:	2302      	movs	r3, #2
 8009892:	e15c      	b.n	8009b4e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d002      	beq.n	80098a0 <HAL_SPI_Transmit+0x36>
 800989a:	88fb      	ldrh	r3, [r7, #6]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e154      	b.n	8009b4e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d101      	bne.n	80098b2 <HAL_SPI_Transmit+0x48>
 80098ae:	2302      	movs	r3, #2
 80098b0:	e14d      	b.n	8009b4e <HAL_SPI_Transmit+0x2e4>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2203      	movs	r2, #3
 80098be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	88fa      	ldrh	r2, [r7, #6]
 80098d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	88fa      	ldrh	r2, [r7, #6]
 80098d8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2200      	movs	r2, #0
 80098de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2200      	movs	r2, #0
 80098fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009904:	d10f      	bne.n	8009926 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009914:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009924:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009930:	2b40      	cmp	r3, #64	@ 0x40
 8009932:	d007      	beq.n	8009944 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009942:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800994c:	d952      	bls.n	80099f4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d002      	beq.n	800995c <HAL_SPI_Transmit+0xf2>
 8009956:	8b7b      	ldrh	r3, [r7, #26]
 8009958:	2b01      	cmp	r3, #1
 800995a:	d145      	bne.n	80099e8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009960:	881a      	ldrh	r2, [r3, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800996c:	1c9a      	adds	r2, r3, #2
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009976:	b29b      	uxth	r3, r3
 8009978:	3b01      	subs	r3, #1
 800997a:	b29a      	uxth	r2, r3
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009980:	e032      	b.n	80099e8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	f003 0302 	and.w	r3, r3, #2
 800998c:	2b02      	cmp	r3, #2
 800998e:	d112      	bne.n	80099b6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009994:	881a      	ldrh	r2, [r3, #0]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099a0:	1c9a      	adds	r2, r3, #2
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	3b01      	subs	r3, #1
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80099b4:	e018      	b.n	80099e8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099b6:	f7fb fdd5 	bl	8005564 <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d803      	bhi.n	80099ce <HAL_SPI_Transmit+0x164>
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099cc:	d102      	bne.n	80099d4 <HAL_SPI_Transmit+0x16a>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d109      	bne.n	80099e8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80099e4:	2303      	movs	r3, #3
 80099e6:	e0b2      	b.n	8009b4e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d1c7      	bne.n	8009982 <HAL_SPI_Transmit+0x118>
 80099f2:	e083      	b.n	8009afc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d002      	beq.n	8009a02 <HAL_SPI_Transmit+0x198>
 80099fc:	8b7b      	ldrh	r3, [r7, #26]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d177      	bne.n	8009af2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d912      	bls.n	8009a32 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a10:	881a      	ldrh	r2, [r3, #0]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a1c:	1c9a      	adds	r2, r3, #2
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	3b02      	subs	r3, #2
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009a30:	e05f      	b.n	8009af2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	330c      	adds	r3, #12
 8009a3c:	7812      	ldrb	r2, [r2, #0]
 8009a3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a44:	1c5a      	adds	r2, r3, #1
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	3b01      	subs	r3, #1
 8009a52:	b29a      	uxth	r2, r3
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009a58:	e04b      	b.n	8009af2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	f003 0302 	and.w	r3, r3, #2
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d12b      	bne.n	8009ac0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d912      	bls.n	8009a98 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a76:	881a      	ldrh	r2, [r3, #0]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a82:	1c9a      	adds	r2, r3, #2
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	3b02      	subs	r3, #2
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009a96:	e02c      	b.n	8009af2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	330c      	adds	r3, #12
 8009aa2:	7812      	ldrb	r2, [r2, #0]
 8009aa4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aaa:	1c5a      	adds	r2, r3, #1
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009abe:	e018      	b.n	8009af2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ac0:	f7fb fd50 	bl	8005564 <HAL_GetTick>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d803      	bhi.n	8009ad8 <HAL_SPI_Transmit+0x26e>
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ad6:	d102      	bne.n	8009ade <HAL_SPI_Transmit+0x274>
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d109      	bne.n	8009af2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009aee:	2303      	movs	r3, #3
 8009af0:	e02d      	b.n	8009b4e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1ae      	bne.n	8009a5a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009afc:	69fa      	ldr	r2, [r7, #28]
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f000 fb65 	bl	800a1d0 <SPI_EndRxTxTransaction>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d002      	beq.n	8009b12 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2220      	movs	r2, #32
 8009b10:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10a      	bne.n	8009b30 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	617b      	str	r3, [r7, #20]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	617b      	str	r3, [r7, #20]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	617b      	str	r3, [r7, #20]
 8009b2e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d001      	beq.n	8009b4c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e000      	b.n	8009b4e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
  }
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3720      	adds	r7, #32
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b08a      	sub	sp, #40	@ 0x28
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	60f8      	str	r0, [r7, #12]
 8009b5e:	60b9      	str	r1, [r7, #8]
 8009b60:	607a      	str	r2, [r7, #4]
 8009b62:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009b64:	2301      	movs	r3, #1
 8009b66:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b68:	f7fb fcfc 	bl	8005564 <HAL_GetTick>
 8009b6c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009b74:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009b7c:	887b      	ldrh	r3, [r7, #2]
 8009b7e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8009b80:	887b      	ldrh	r3, [r7, #2]
 8009b82:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009b84:	7ffb      	ldrb	r3, [r7, #31]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d00c      	beq.n	8009ba4 <HAL_SPI_TransmitReceive+0x4e>
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b90:	d106      	bne.n	8009ba0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d102      	bne.n	8009ba0 <HAL_SPI_TransmitReceive+0x4a>
 8009b9a:	7ffb      	ldrb	r3, [r7, #31]
 8009b9c:	2b04      	cmp	r3, #4
 8009b9e:	d001      	beq.n	8009ba4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009ba0:	2302      	movs	r3, #2
 8009ba2:	e1f3      	b.n	8009f8c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d005      	beq.n	8009bb6 <HAL_SPI_TransmitReceive+0x60>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d002      	beq.n	8009bb6 <HAL_SPI_TransmitReceive+0x60>
 8009bb0:	887b      	ldrh	r3, [r7, #2]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e1e8      	b.n	8009f8c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d101      	bne.n	8009bc8 <HAL_SPI_TransmitReceive+0x72>
 8009bc4:	2302      	movs	r3, #2
 8009bc6:	e1e1      	b.n	8009f8c <HAL_SPI_TransmitReceive+0x436>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	2b04      	cmp	r3, #4
 8009bda:	d003      	beq.n	8009be4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2205      	movs	r2, #5
 8009be0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2200      	movs	r2, #0
 8009be8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	887a      	ldrh	r2, [r7, #2]
 8009bf4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	887a      	ldrh	r2, [r7, #2]
 8009bfc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	887a      	ldrh	r2, [r7, #2]
 8009c0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	887a      	ldrh	r2, [r7, #2]
 8009c10:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009c26:	d802      	bhi.n	8009c2e <HAL_SPI_TransmitReceive+0xd8>
 8009c28:	8abb      	ldrh	r3, [r7, #20]
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d908      	bls.n	8009c40 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009c3c:	605a      	str	r2, [r3, #4]
 8009c3e:	e007      	b.n	8009c50 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	685a      	ldr	r2, [r3, #4]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009c4e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c5a:	2b40      	cmp	r3, #64	@ 0x40
 8009c5c:	d007      	beq.n	8009c6e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009c76:	f240 8083 	bls.w	8009d80 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d002      	beq.n	8009c88 <HAL_SPI_TransmitReceive+0x132>
 8009c82:	8afb      	ldrh	r3, [r7, #22]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d16f      	bne.n	8009d68 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c8c:	881a      	ldrh	r2, [r3, #0]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c98:	1c9a      	adds	r2, r3, #2
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009cac:	e05c      	b.n	8009d68 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	f003 0302 	and.w	r3, r3, #2
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d11b      	bne.n	8009cf4 <HAL_SPI_TransmitReceive+0x19e>
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d016      	beq.n	8009cf4 <HAL_SPI_TransmitReceive+0x19e>
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d113      	bne.n	8009cf4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd0:	881a      	ldrh	r2, [r3, #0]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cdc:	1c9a      	adds	r2, r3, #2
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	f003 0301 	and.w	r3, r3, #1
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d11c      	bne.n	8009d3c <HAL_SPI_TransmitReceive+0x1e6>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d016      	beq.n	8009d3c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68da      	ldr	r2, [r3, #12]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d18:	b292      	uxth	r2, r2
 8009d1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d20:	1c9a      	adds	r2, r3, #2
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009d3c:	f7fb fc12 	bl	8005564 <HAL_GetTick>
 8009d40:	4602      	mov	r2, r0
 8009d42:	6a3b      	ldr	r3, [r7, #32]
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d80d      	bhi.n	8009d68 <HAL_SPI_TransmitReceive+0x212>
 8009d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d52:	d009      	beq.n	8009d68 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009d64:	2303      	movs	r3, #3
 8009d66:	e111      	b.n	8009f8c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d19d      	bne.n	8009cae <HAL_SPI_TransmitReceive+0x158>
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d197      	bne.n	8009cae <HAL_SPI_TransmitReceive+0x158>
 8009d7e:	e0e5      	b.n	8009f4c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d003      	beq.n	8009d90 <HAL_SPI_TransmitReceive+0x23a>
 8009d88:	8afb      	ldrh	r3, [r7, #22]
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	f040 80d1 	bne.w	8009f32 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d912      	bls.n	8009dc0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d9e:	881a      	ldrh	r2, [r3, #0]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009daa:	1c9a      	adds	r2, r3, #2
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	3b02      	subs	r3, #2
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009dbe:	e0b8      	b.n	8009f32 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	330c      	adds	r3, #12
 8009dca:	7812      	ldrb	r2, [r2, #0]
 8009dcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dd2:	1c5a      	adds	r2, r3, #1
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	3b01      	subs	r3, #1
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009de6:	e0a4      	b.n	8009f32 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	f003 0302 	and.w	r3, r3, #2
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d134      	bne.n	8009e60 <HAL_SPI_TransmitReceive+0x30a>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d02f      	beq.n	8009e60 <HAL_SPI_TransmitReceive+0x30a>
 8009e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d12c      	bne.n	8009e60 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d912      	bls.n	8009e36 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e14:	881a      	ldrh	r2, [r3, #0]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e20:	1c9a      	adds	r2, r3, #2
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	3b02      	subs	r3, #2
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e34:	e012      	b.n	8009e5c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	330c      	adds	r3, #12
 8009e40:	7812      	ldrb	r2, [r2, #0]
 8009e42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e48:	1c5a      	adds	r2, r3, #1
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	3b01      	subs	r3, #1
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	f003 0301 	and.w	r3, r3, #1
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d148      	bne.n	8009f00 <HAL_SPI_TransmitReceive+0x3aa>
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d042      	beq.n	8009f00 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d923      	bls.n	8009ece <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68da      	ldr	r2, [r3, #12]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e90:	b292      	uxth	r2, r2
 8009e92:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e98:	1c9a      	adds	r2, r3, #2
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	3b02      	subs	r3, #2
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d81f      	bhi.n	8009efc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	685a      	ldr	r2, [r3, #4]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009eca:	605a      	str	r2, [r3, #4]
 8009ecc:	e016      	b.n	8009efc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f103 020c 	add.w	r2, r3, #12
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eda:	7812      	ldrb	r2, [r2, #0]
 8009edc:	b2d2      	uxtb	r2, r2
 8009ede:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ee4:	1c5a      	adds	r2, r3, #1
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009efc:	2301      	movs	r3, #1
 8009efe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009f00:	f7fb fb30 	bl	8005564 <HAL_GetTick>
 8009f04:	4602      	mov	r2, r0
 8009f06:	6a3b      	ldr	r3, [r7, #32]
 8009f08:	1ad3      	subs	r3, r2, r3
 8009f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d803      	bhi.n	8009f18 <HAL_SPI_TransmitReceive+0x3c2>
 8009f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f16:	d102      	bne.n	8009f1e <HAL_SPI_TransmitReceive+0x3c8>
 8009f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d109      	bne.n	8009f32 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2201      	movs	r2, #1
 8009f22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	e02c      	b.n	8009f8c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f47f af55 	bne.w	8009de8 <HAL_SPI_TransmitReceive+0x292>
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f47f af4e 	bne.w	8009de8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f4c:	6a3a      	ldr	r2, [r7, #32]
 8009f4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f000 f93d 	bl	800a1d0 <SPI_EndRxTxTransaction>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d008      	beq.n	8009f6e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2220      	movs	r2, #32
 8009f60:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e00e      	b.n	8009f8c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d001      	beq.n	8009f8a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e000      	b.n	8009f8c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009f8a:	2300      	movs	r3, #0
  }
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3728      	adds	r7, #40	@ 0x28
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b088      	sub	sp, #32
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	603b      	str	r3, [r7, #0]
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009fa4:	f7fb fade 	bl	8005564 <HAL_GetTick>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fac:	1a9b      	subs	r3, r3, r2
 8009fae:	683a      	ldr	r2, [r7, #0]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009fb4:	f7fb fad6 	bl	8005564 <HAL_GetTick>
 8009fb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009fba:	4b39      	ldr	r3, [pc, #228]	@ (800a0a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	015b      	lsls	r3, r3, #5
 8009fc0:	0d1b      	lsrs	r3, r3, #20
 8009fc2:	69fa      	ldr	r2, [r7, #28]
 8009fc4:	fb02 f303 	mul.w	r3, r2, r3
 8009fc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009fca:	e054      	b.n	800a076 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fd2:	d050      	beq.n	800a076 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009fd4:	f7fb fac6 	bl	8005564 <HAL_GetTick>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	69fa      	ldr	r2, [r7, #28]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d902      	bls.n	8009fea <SPI_WaitFlagStateUntilTimeout+0x56>
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d13d      	bne.n	800a066 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	685a      	ldr	r2, [r3, #4]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009ff8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a002:	d111      	bne.n	800a028 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a00c:	d004      	beq.n	800a018 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a016:	d107      	bne.n	800a028 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a026:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a02c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a030:	d10f      	bne.n	800a052 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a040:	601a      	str	r2, [r3, #0]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a050:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2201      	movs	r2, #1
 800a056:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a062:	2303      	movs	r3, #3
 800a064:	e017      	b.n	800a096 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d101      	bne.n	800a070 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a06c:	2300      	movs	r3, #0
 800a06e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	3b01      	subs	r3, #1
 800a074:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	689a      	ldr	r2, [r3, #8]
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	4013      	ands	r3, r2
 800a080:	68ba      	ldr	r2, [r7, #8]
 800a082:	429a      	cmp	r2, r3
 800a084:	bf0c      	ite	eq
 800a086:	2301      	moveq	r3, #1
 800a088:	2300      	movne	r3, #0
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	461a      	mov	r2, r3
 800a08e:	79fb      	ldrb	r3, [r7, #7]
 800a090:	429a      	cmp	r2, r3
 800a092:	d19b      	bne.n	8009fcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3720      	adds	r7, #32
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	2000000c 	.word	0x2000000c

0800a0a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b08a      	sub	sp, #40	@ 0x28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
 800a0b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a0b6:	f7fb fa55 	bl	8005564 <HAL_GetTick>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0be:	1a9b      	subs	r3, r3, r2
 800a0c0:	683a      	ldr	r2, [r7, #0]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a0c6:	f7fb fa4d 	bl	8005564 <HAL_GetTick>
 800a0ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	330c      	adds	r3, #12
 800a0d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a0d4:	4b3d      	ldr	r3, [pc, #244]	@ (800a1cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4413      	add	r3, r2
 800a0de:	00da      	lsls	r2, r3, #3
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	0d1b      	lsrs	r3, r3, #20
 800a0e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0e6:	fb02 f303 	mul.w	r3, r2, r3
 800a0ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a0ec:	e060      	b.n	800a1b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a0f4:	d107      	bne.n	800a106 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d104      	bne.n	800a106 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	b2db      	uxtb	r3, r3
 800a102:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a104:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a10c:	d050      	beq.n	800a1b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a10e:	f7fb fa29 	bl	8005564 <HAL_GetTick>
 800a112:	4602      	mov	r2, r0
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d902      	bls.n	800a124 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a120:	2b00      	cmp	r3, #0
 800a122:	d13d      	bne.n	800a1a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	685a      	ldr	r2, [r3, #4]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a132:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a13c:	d111      	bne.n	800a162 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a146:	d004      	beq.n	800a152 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a150:	d107      	bne.n	800a162 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a160:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a16a:	d10f      	bne.n	800a18c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a17a:	601a      	str	r2, [r3, #0]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a18a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a19c:	2303      	movs	r3, #3
 800a19e:	e010      	b.n	800a1c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d101      	bne.n	800a1aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	689a      	ldr	r2, [r3, #8]
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	4013      	ands	r3, r2
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d196      	bne.n	800a0ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3728      	adds	r7, #40	@ 0x28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	2000000c 	.word	0x2000000c

0800a1d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af02      	add	r7, sp, #8
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f7ff ff5b 	bl	800a0a4 <SPI_WaitFifoStateUntilTimeout>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d007      	beq.n	800a204 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1f8:	f043 0220 	orr.w	r2, r3, #32
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a200:	2303      	movs	r3, #3
 800a202:	e027      	b.n	800a254 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	2200      	movs	r2, #0
 800a20c:	2180      	movs	r1, #128	@ 0x80
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f7ff fec0 	bl	8009f94 <SPI_WaitFlagStateUntilTimeout>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d007      	beq.n	800a22a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a21e:	f043 0220 	orr.w	r2, r3, #32
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	e014      	b.n	800a254 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	2200      	movs	r2, #0
 800a232:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f7ff ff34 	bl	800a0a4 <SPI_WaitFifoStateUntilTimeout>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d007      	beq.n	800a252 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a246:	f043 0220 	orr.w	r2, r3, #32
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a24e:	2303      	movs	r3, #3
 800a250:	e000      	b.n	800a254 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d101      	bne.n	800a26e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e049      	b.n	800a302 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b00      	cmp	r3, #0
 800a278:	d106      	bne.n	800a288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f7fb f850 	bl	8005328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2202      	movs	r2, #2
 800a28c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	3304      	adds	r3, #4
 800a298:	4619      	mov	r1, r3
 800a29a:	4610      	mov	r0, r2
 800a29c:	f000 fa26 	bl	800a6ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	3708      	adds	r7, #8
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
	...

0800a30c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d001      	beq.n	800a324 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e054      	b.n	800a3ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2202      	movs	r2, #2
 800a328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68da      	ldr	r2, [r3, #12]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f042 0201 	orr.w	r2, r2, #1
 800a33a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a26      	ldr	r2, [pc, #152]	@ (800a3dc <HAL_TIM_Base_Start_IT+0xd0>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d022      	beq.n	800a38c <HAL_TIM_Base_Start_IT+0x80>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a34e:	d01d      	beq.n	800a38c <HAL_TIM_Base_Start_IT+0x80>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a22      	ldr	r2, [pc, #136]	@ (800a3e0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d018      	beq.n	800a38c <HAL_TIM_Base_Start_IT+0x80>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a21      	ldr	r2, [pc, #132]	@ (800a3e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d013      	beq.n	800a38c <HAL_TIM_Base_Start_IT+0x80>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a1f      	ldr	r2, [pc, #124]	@ (800a3e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d00e      	beq.n	800a38c <HAL_TIM_Base_Start_IT+0x80>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a1e      	ldr	r2, [pc, #120]	@ (800a3ec <HAL_TIM_Base_Start_IT+0xe0>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d009      	beq.n	800a38c <HAL_TIM_Base_Start_IT+0x80>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a1c      	ldr	r2, [pc, #112]	@ (800a3f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d004      	beq.n	800a38c <HAL_TIM_Base_Start_IT+0x80>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a1b      	ldr	r2, [pc, #108]	@ (800a3f4 <HAL_TIM_Base_Start_IT+0xe8>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d115      	bne.n	800a3b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	689a      	ldr	r2, [r3, #8]
 800a392:	4b19      	ldr	r3, [pc, #100]	@ (800a3f8 <HAL_TIM_Base_Start_IT+0xec>)
 800a394:	4013      	ands	r3, r2
 800a396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2b06      	cmp	r3, #6
 800a39c:	d015      	beq.n	800a3ca <HAL_TIM_Base_Start_IT+0xbe>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3a4:	d011      	beq.n	800a3ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f042 0201 	orr.w	r2, r2, #1
 800a3b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3b6:	e008      	b.n	800a3ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f042 0201 	orr.w	r2, r2, #1
 800a3c6:	601a      	str	r2, [r3, #0]
 800a3c8:	e000      	b.n	800a3cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3cc:	2300      	movs	r3, #0
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3714      	adds	r7, #20
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	40012c00 	.word	0x40012c00
 800a3e0:	40000400 	.word	0x40000400
 800a3e4:	40000800 	.word	0x40000800
 800a3e8:	40000c00 	.word	0x40000c00
 800a3ec:	40013400 	.word	0x40013400
 800a3f0:	40014000 	.word	0x40014000
 800a3f4:	40015000 	.word	0x40015000
 800a3f8:	00010007 	.word	0x00010007

0800a3fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	f003 0302 	and.w	r3, r3, #2
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d020      	beq.n	800a460 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f003 0302 	and.w	r3, r3, #2
 800a424:	2b00      	cmp	r3, #0
 800a426:	d01b      	beq.n	800a460 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f06f 0202 	mvn.w	r2, #2
 800a430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2201      	movs	r2, #1
 800a436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	699b      	ldr	r3, [r3, #24]
 800a43e:	f003 0303 	and.w	r3, r3, #3
 800a442:	2b00      	cmp	r3, #0
 800a444:	d003      	beq.n	800a44e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 f931 	bl	800a6ae <HAL_TIM_IC_CaptureCallback>
 800a44c:	e005      	b.n	800a45a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 f923 	bl	800a69a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 f934 	bl	800a6c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	f003 0304 	and.w	r3, r3, #4
 800a466:	2b00      	cmp	r3, #0
 800a468:	d020      	beq.n	800a4ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f003 0304 	and.w	r3, r3, #4
 800a470:	2b00      	cmp	r3, #0
 800a472:	d01b      	beq.n	800a4ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f06f 0204 	mvn.w	r2, #4
 800a47c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2202      	movs	r2, #2
 800a482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	699b      	ldr	r3, [r3, #24]
 800a48a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d003      	beq.n	800a49a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 f90b 	bl	800a6ae <HAL_TIM_IC_CaptureCallback>
 800a498:	e005      	b.n	800a4a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f8fd 	bl	800a69a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 f90e 	bl	800a6c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	f003 0308 	and.w	r3, r3, #8
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d020      	beq.n	800a4f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f003 0308 	and.w	r3, r3, #8
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d01b      	beq.n	800a4f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f06f 0208 	mvn.w	r2, #8
 800a4c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2204      	movs	r2, #4
 800a4ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	69db      	ldr	r3, [r3, #28]
 800a4d6:	f003 0303 	and.w	r3, r3, #3
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d003      	beq.n	800a4e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f8e5 	bl	800a6ae <HAL_TIM_IC_CaptureCallback>
 800a4e4:	e005      	b.n	800a4f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f8d7 	bl	800a69a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 f8e8 	bl	800a6c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	f003 0310 	and.w	r3, r3, #16
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d020      	beq.n	800a544 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f003 0310 	and.w	r3, r3, #16
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d01b      	beq.n	800a544 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f06f 0210 	mvn.w	r2, #16
 800a514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2208      	movs	r2, #8
 800a51a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	69db      	ldr	r3, [r3, #28]
 800a522:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a526:	2b00      	cmp	r3, #0
 800a528:	d003      	beq.n	800a532 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 f8bf 	bl	800a6ae <HAL_TIM_IC_CaptureCallback>
 800a530:	e005      	b.n	800a53e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 f8b1 	bl	800a69a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 f8c2 	bl	800a6c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00c      	beq.n	800a568 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f003 0301 	and.w	r3, r3, #1
 800a554:	2b00      	cmp	r3, #0
 800a556:	d007      	beq.n	800a568 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f06f 0201 	mvn.w	r2, #1
 800a560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f7fa fc5e 	bl	8004e24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d104      	bne.n	800a57c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00c      	beq.n	800a596 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a582:	2b00      	cmp	r3, #0
 800a584:	d007      	beq.n	800a596 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a58e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 f969 	bl	800a868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d00c      	beq.n	800a5ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d007      	beq.n	800a5ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a5b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 f961 	bl	800a87c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d00c      	beq.n	800a5de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d007      	beq.n	800a5de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a5d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 f87c 	bl	800a6d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	f003 0320 	and.w	r3, r3, #32
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00c      	beq.n	800a602 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f003 0320 	and.w	r3, r3, #32
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d007      	beq.n	800a602 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f06f 0220 	mvn.w	r2, #32
 800a5fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 f929 	bl	800a854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00c      	beq.n	800a626 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a612:	2b00      	cmp	r3, #0
 800a614:	d007      	beq.n	800a626 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a61e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 f935 	bl	800a890 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d00c      	beq.n	800a64a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a636:	2b00      	cmp	r3, #0
 800a638:	d007      	beq.n	800a64a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f92d 	bl	800a8a4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00c      	beq.n	800a66e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d007      	beq.n	800a66e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f925 	bl	800a8b8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00c      	beq.n	800a692 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d007      	beq.n	800a692 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a68a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 f91d 	bl	800a8cc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a692:	bf00      	nop
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a69a:	b480      	push	{r7}
 800a69c:	b083      	sub	sp, #12
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a6a2:	bf00      	nop
 800a6a4:	370c      	adds	r7, #12
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b083      	sub	sp, #12
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a6b6:	bf00      	nop
 800a6b8:	370c      	adds	r7, #12
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr

0800a6c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a6c2:	b480      	push	{r7}
 800a6c4:	b083      	sub	sp, #12
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a6ca:	bf00      	nop
 800a6cc:	370c      	adds	r7, #12
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr

0800a6d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a6d6:	b480      	push	{r7}
 800a6d8:	b083      	sub	sp, #12
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a6de:	bf00      	nop
 800a6e0:	370c      	adds	r7, #12
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
	...

0800a6ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4a4c      	ldr	r2, [pc, #304]	@ (800a830 <TIM_Base_SetConfig+0x144>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d017      	beq.n	800a734 <TIM_Base_SetConfig+0x48>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a70a:	d013      	beq.n	800a734 <TIM_Base_SetConfig+0x48>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	4a49      	ldr	r2, [pc, #292]	@ (800a834 <TIM_Base_SetConfig+0x148>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d00f      	beq.n	800a734 <TIM_Base_SetConfig+0x48>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4a48      	ldr	r2, [pc, #288]	@ (800a838 <TIM_Base_SetConfig+0x14c>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d00b      	beq.n	800a734 <TIM_Base_SetConfig+0x48>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4a47      	ldr	r2, [pc, #284]	@ (800a83c <TIM_Base_SetConfig+0x150>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d007      	beq.n	800a734 <TIM_Base_SetConfig+0x48>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4a46      	ldr	r2, [pc, #280]	@ (800a840 <TIM_Base_SetConfig+0x154>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d003      	beq.n	800a734 <TIM_Base_SetConfig+0x48>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4a45      	ldr	r2, [pc, #276]	@ (800a844 <TIM_Base_SetConfig+0x158>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d108      	bne.n	800a746 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a73a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	4313      	orrs	r3, r2
 800a744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4a39      	ldr	r2, [pc, #228]	@ (800a830 <TIM_Base_SetConfig+0x144>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d023      	beq.n	800a796 <TIM_Base_SetConfig+0xaa>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a754:	d01f      	beq.n	800a796 <TIM_Base_SetConfig+0xaa>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4a36      	ldr	r2, [pc, #216]	@ (800a834 <TIM_Base_SetConfig+0x148>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d01b      	beq.n	800a796 <TIM_Base_SetConfig+0xaa>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4a35      	ldr	r2, [pc, #212]	@ (800a838 <TIM_Base_SetConfig+0x14c>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d017      	beq.n	800a796 <TIM_Base_SetConfig+0xaa>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4a34      	ldr	r2, [pc, #208]	@ (800a83c <TIM_Base_SetConfig+0x150>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d013      	beq.n	800a796 <TIM_Base_SetConfig+0xaa>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4a33      	ldr	r2, [pc, #204]	@ (800a840 <TIM_Base_SetConfig+0x154>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d00f      	beq.n	800a796 <TIM_Base_SetConfig+0xaa>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4a33      	ldr	r2, [pc, #204]	@ (800a848 <TIM_Base_SetConfig+0x15c>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d00b      	beq.n	800a796 <TIM_Base_SetConfig+0xaa>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	4a32      	ldr	r2, [pc, #200]	@ (800a84c <TIM_Base_SetConfig+0x160>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d007      	beq.n	800a796 <TIM_Base_SetConfig+0xaa>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	4a31      	ldr	r2, [pc, #196]	@ (800a850 <TIM_Base_SetConfig+0x164>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d003      	beq.n	800a796 <TIM_Base_SetConfig+0xaa>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	4a2c      	ldr	r2, [pc, #176]	@ (800a844 <TIM_Base_SetConfig+0x158>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d108      	bne.n	800a7a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a79c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	695b      	ldr	r3, [r3, #20]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	689a      	ldr	r2, [r3, #8]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a18      	ldr	r2, [pc, #96]	@ (800a830 <TIM_Base_SetConfig+0x144>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d013      	beq.n	800a7fc <TIM_Base_SetConfig+0x110>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4a1a      	ldr	r2, [pc, #104]	@ (800a840 <TIM_Base_SetConfig+0x154>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d00f      	beq.n	800a7fc <TIM_Base_SetConfig+0x110>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4a1a      	ldr	r2, [pc, #104]	@ (800a848 <TIM_Base_SetConfig+0x15c>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d00b      	beq.n	800a7fc <TIM_Base_SetConfig+0x110>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a19      	ldr	r2, [pc, #100]	@ (800a84c <TIM_Base_SetConfig+0x160>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d007      	beq.n	800a7fc <TIM_Base_SetConfig+0x110>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4a18      	ldr	r2, [pc, #96]	@ (800a850 <TIM_Base_SetConfig+0x164>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d003      	beq.n	800a7fc <TIM_Base_SetConfig+0x110>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4a13      	ldr	r2, [pc, #76]	@ (800a844 <TIM_Base_SetConfig+0x158>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d103      	bne.n	800a804 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	691a      	ldr	r2, [r3, #16]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	2b01      	cmp	r3, #1
 800a814:	d105      	bne.n	800a822 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	f023 0201 	bic.w	r2, r3, #1
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	611a      	str	r2, [r3, #16]
  }
}
 800a822:	bf00      	nop
 800a824:	3714      	adds	r7, #20
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	40012c00 	.word	0x40012c00
 800a834:	40000400 	.word	0x40000400
 800a838:	40000800 	.word	0x40000800
 800a83c:	40000c00 	.word	0x40000c00
 800a840:	40013400 	.word	0x40013400
 800a844:	40015000 	.word	0x40015000
 800a848:	40014000 	.word	0x40014000
 800a84c:	40014400 	.word	0x40014400
 800a850:	40014800 	.word	0x40014800

0800a854 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a85c:	bf00      	nop
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a884:	bf00      	nop
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a898:	bf00      	nop
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a8c0:	bf00      	nop
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d101      	bne.n	800a8f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e042      	b.n	800a978 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d106      	bne.n	800a90a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7fa fd81 	bl	800540c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2224      	movs	r2, #36	@ 0x24
 800a90e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f022 0201 	bic.w	r2, r2, #1
 800a920:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a926:	2b00      	cmp	r3, #0
 800a928:	d002      	beq.n	800a930 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 fb24 	bl	800af78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f825 	bl	800a980 <UART_SetConfig>
 800a936:	4603      	mov	r3, r0
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d101      	bne.n	800a940 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	e01b      	b.n	800a978 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	685a      	ldr	r2, [r3, #4]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a94e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	689a      	ldr	r2, [r3, #8]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a95e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f042 0201 	orr.w	r2, r2, #1
 800a96e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 fba3 	bl	800b0bc <UART_CheckIdleState>
 800a976:	4603      	mov	r3, r0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3708      	adds	r7, #8
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a984:	b08c      	sub	sp, #48	@ 0x30
 800a986:	af00      	add	r7, sp, #0
 800a988:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a98a:	2300      	movs	r3, #0
 800a98c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	689a      	ldr	r2, [r3, #8]
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	431a      	orrs	r2, r3
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	695b      	ldr	r3, [r3, #20]
 800a99e:	431a      	orrs	r2, r3
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	69db      	ldr	r3, [r3, #28]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	4baa      	ldr	r3, [pc, #680]	@ (800ac58 <UART_SetConfig+0x2d8>)
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	697a      	ldr	r2, [r7, #20]
 800a9b4:	6812      	ldr	r2, [r2, #0]
 800a9b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9b8:	430b      	orrs	r3, r1
 800a9ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	68da      	ldr	r2, [r3, #12]
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	430a      	orrs	r2, r1
 800a9d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	699b      	ldr	r3, [r3, #24]
 800a9d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a9f      	ldr	r2, [pc, #636]	@ (800ac5c <UART_SetConfig+0x2dc>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d004      	beq.n	800a9ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	6a1b      	ldr	r3, [r3, #32]
 800a9e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a9f6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a9fa:	697a      	ldr	r2, [r7, #20]
 800a9fc:	6812      	ldr	r2, [r2, #0]
 800a9fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa00:	430b      	orrs	r3, r1
 800aa02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa0a:	f023 010f 	bic.w	r1, r3, #15
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	430a      	orrs	r2, r1
 800aa18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a90      	ldr	r2, [pc, #576]	@ (800ac60 <UART_SetConfig+0x2e0>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d125      	bne.n	800aa70 <UART_SetConfig+0xf0>
 800aa24:	4b8f      	ldr	r3, [pc, #572]	@ (800ac64 <UART_SetConfig+0x2e4>)
 800aa26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa2a:	f003 0303 	and.w	r3, r3, #3
 800aa2e:	2b03      	cmp	r3, #3
 800aa30:	d81a      	bhi.n	800aa68 <UART_SetConfig+0xe8>
 800aa32:	a201      	add	r2, pc, #4	@ (adr r2, 800aa38 <UART_SetConfig+0xb8>)
 800aa34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa38:	0800aa49 	.word	0x0800aa49
 800aa3c:	0800aa59 	.word	0x0800aa59
 800aa40:	0800aa51 	.word	0x0800aa51
 800aa44:	0800aa61 	.word	0x0800aa61
 800aa48:	2301      	movs	r3, #1
 800aa4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa4e:	e116      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800aa50:	2302      	movs	r3, #2
 800aa52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa56:	e112      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800aa58:	2304      	movs	r3, #4
 800aa5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa5e:	e10e      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800aa60:	2308      	movs	r3, #8
 800aa62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa66:	e10a      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800aa68:	2310      	movs	r3, #16
 800aa6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa6e:	e106      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a7c      	ldr	r2, [pc, #496]	@ (800ac68 <UART_SetConfig+0x2e8>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d138      	bne.n	800aaec <UART_SetConfig+0x16c>
 800aa7a:	4b7a      	ldr	r3, [pc, #488]	@ (800ac64 <UART_SetConfig+0x2e4>)
 800aa7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa80:	f003 030c 	and.w	r3, r3, #12
 800aa84:	2b0c      	cmp	r3, #12
 800aa86:	d82d      	bhi.n	800aae4 <UART_SetConfig+0x164>
 800aa88:	a201      	add	r2, pc, #4	@ (adr r2, 800aa90 <UART_SetConfig+0x110>)
 800aa8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8e:	bf00      	nop
 800aa90:	0800aac5 	.word	0x0800aac5
 800aa94:	0800aae5 	.word	0x0800aae5
 800aa98:	0800aae5 	.word	0x0800aae5
 800aa9c:	0800aae5 	.word	0x0800aae5
 800aaa0:	0800aad5 	.word	0x0800aad5
 800aaa4:	0800aae5 	.word	0x0800aae5
 800aaa8:	0800aae5 	.word	0x0800aae5
 800aaac:	0800aae5 	.word	0x0800aae5
 800aab0:	0800aacd 	.word	0x0800aacd
 800aab4:	0800aae5 	.word	0x0800aae5
 800aab8:	0800aae5 	.word	0x0800aae5
 800aabc:	0800aae5 	.word	0x0800aae5
 800aac0:	0800aadd 	.word	0x0800aadd
 800aac4:	2300      	movs	r3, #0
 800aac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aaca:	e0d8      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800aacc:	2302      	movs	r3, #2
 800aace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aad2:	e0d4      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800aad4:	2304      	movs	r3, #4
 800aad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aada:	e0d0      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800aadc:	2308      	movs	r3, #8
 800aade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aae2:	e0cc      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800aae4:	2310      	movs	r3, #16
 800aae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aaea:	e0c8      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a5e      	ldr	r2, [pc, #376]	@ (800ac6c <UART_SetConfig+0x2ec>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d125      	bne.n	800ab42 <UART_SetConfig+0x1c2>
 800aaf6:	4b5b      	ldr	r3, [pc, #364]	@ (800ac64 <UART_SetConfig+0x2e4>)
 800aaf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aafc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ab00:	2b30      	cmp	r3, #48	@ 0x30
 800ab02:	d016      	beq.n	800ab32 <UART_SetConfig+0x1b2>
 800ab04:	2b30      	cmp	r3, #48	@ 0x30
 800ab06:	d818      	bhi.n	800ab3a <UART_SetConfig+0x1ba>
 800ab08:	2b20      	cmp	r3, #32
 800ab0a:	d00a      	beq.n	800ab22 <UART_SetConfig+0x1a2>
 800ab0c:	2b20      	cmp	r3, #32
 800ab0e:	d814      	bhi.n	800ab3a <UART_SetConfig+0x1ba>
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d002      	beq.n	800ab1a <UART_SetConfig+0x19a>
 800ab14:	2b10      	cmp	r3, #16
 800ab16:	d008      	beq.n	800ab2a <UART_SetConfig+0x1aa>
 800ab18:	e00f      	b.n	800ab3a <UART_SetConfig+0x1ba>
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab20:	e0ad      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800ab22:	2302      	movs	r3, #2
 800ab24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab28:	e0a9      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800ab2a:	2304      	movs	r3, #4
 800ab2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab30:	e0a5      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800ab32:	2308      	movs	r3, #8
 800ab34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab38:	e0a1      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800ab3a:	2310      	movs	r3, #16
 800ab3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab40:	e09d      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a4a      	ldr	r2, [pc, #296]	@ (800ac70 <UART_SetConfig+0x2f0>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d125      	bne.n	800ab98 <UART_SetConfig+0x218>
 800ab4c:	4b45      	ldr	r3, [pc, #276]	@ (800ac64 <UART_SetConfig+0x2e4>)
 800ab4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ab56:	2bc0      	cmp	r3, #192	@ 0xc0
 800ab58:	d016      	beq.n	800ab88 <UART_SetConfig+0x208>
 800ab5a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ab5c:	d818      	bhi.n	800ab90 <UART_SetConfig+0x210>
 800ab5e:	2b80      	cmp	r3, #128	@ 0x80
 800ab60:	d00a      	beq.n	800ab78 <UART_SetConfig+0x1f8>
 800ab62:	2b80      	cmp	r3, #128	@ 0x80
 800ab64:	d814      	bhi.n	800ab90 <UART_SetConfig+0x210>
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d002      	beq.n	800ab70 <UART_SetConfig+0x1f0>
 800ab6a:	2b40      	cmp	r3, #64	@ 0x40
 800ab6c:	d008      	beq.n	800ab80 <UART_SetConfig+0x200>
 800ab6e:	e00f      	b.n	800ab90 <UART_SetConfig+0x210>
 800ab70:	2300      	movs	r3, #0
 800ab72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab76:	e082      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800ab78:	2302      	movs	r3, #2
 800ab7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab7e:	e07e      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800ab80:	2304      	movs	r3, #4
 800ab82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab86:	e07a      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800ab88:	2308      	movs	r3, #8
 800ab8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab8e:	e076      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800ab90:	2310      	movs	r3, #16
 800ab92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab96:	e072      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a35      	ldr	r2, [pc, #212]	@ (800ac74 <UART_SetConfig+0x2f4>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d12a      	bne.n	800abf8 <UART_SetConfig+0x278>
 800aba2:	4b30      	ldr	r3, [pc, #192]	@ (800ac64 <UART_SetConfig+0x2e4>)
 800aba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aba8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800abac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800abb0:	d01a      	beq.n	800abe8 <UART_SetConfig+0x268>
 800abb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800abb6:	d81b      	bhi.n	800abf0 <UART_SetConfig+0x270>
 800abb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abbc:	d00c      	beq.n	800abd8 <UART_SetConfig+0x258>
 800abbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abc2:	d815      	bhi.n	800abf0 <UART_SetConfig+0x270>
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d003      	beq.n	800abd0 <UART_SetConfig+0x250>
 800abc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abcc:	d008      	beq.n	800abe0 <UART_SetConfig+0x260>
 800abce:	e00f      	b.n	800abf0 <UART_SetConfig+0x270>
 800abd0:	2300      	movs	r3, #0
 800abd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abd6:	e052      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800abd8:	2302      	movs	r3, #2
 800abda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abde:	e04e      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800abe0:	2304      	movs	r3, #4
 800abe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abe6:	e04a      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800abe8:	2308      	movs	r3, #8
 800abea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abee:	e046      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800abf0:	2310      	movs	r3, #16
 800abf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abf6:	e042      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a17      	ldr	r2, [pc, #92]	@ (800ac5c <UART_SetConfig+0x2dc>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d13a      	bne.n	800ac78 <UART_SetConfig+0x2f8>
 800ac02:	4b18      	ldr	r3, [pc, #96]	@ (800ac64 <UART_SetConfig+0x2e4>)
 800ac04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ac0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ac10:	d01a      	beq.n	800ac48 <UART_SetConfig+0x2c8>
 800ac12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ac16:	d81b      	bhi.n	800ac50 <UART_SetConfig+0x2d0>
 800ac18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac1c:	d00c      	beq.n	800ac38 <UART_SetConfig+0x2b8>
 800ac1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac22:	d815      	bhi.n	800ac50 <UART_SetConfig+0x2d0>
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d003      	beq.n	800ac30 <UART_SetConfig+0x2b0>
 800ac28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac2c:	d008      	beq.n	800ac40 <UART_SetConfig+0x2c0>
 800ac2e:	e00f      	b.n	800ac50 <UART_SetConfig+0x2d0>
 800ac30:	2300      	movs	r3, #0
 800ac32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac36:	e022      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800ac38:	2302      	movs	r3, #2
 800ac3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac3e:	e01e      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800ac40:	2304      	movs	r3, #4
 800ac42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac46:	e01a      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800ac48:	2308      	movs	r3, #8
 800ac4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac4e:	e016      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800ac50:	2310      	movs	r3, #16
 800ac52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac56:	e012      	b.n	800ac7e <UART_SetConfig+0x2fe>
 800ac58:	cfff69f3 	.word	0xcfff69f3
 800ac5c:	40008000 	.word	0x40008000
 800ac60:	40013800 	.word	0x40013800
 800ac64:	40021000 	.word	0x40021000
 800ac68:	40004400 	.word	0x40004400
 800ac6c:	40004800 	.word	0x40004800
 800ac70:	40004c00 	.word	0x40004c00
 800ac74:	40005000 	.word	0x40005000
 800ac78:	2310      	movs	r3, #16
 800ac7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4aae      	ldr	r2, [pc, #696]	@ (800af3c <UART_SetConfig+0x5bc>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	f040 8097 	bne.w	800adb8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ac8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ac8e:	2b08      	cmp	r3, #8
 800ac90:	d823      	bhi.n	800acda <UART_SetConfig+0x35a>
 800ac92:	a201      	add	r2, pc, #4	@ (adr r2, 800ac98 <UART_SetConfig+0x318>)
 800ac94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac98:	0800acbd 	.word	0x0800acbd
 800ac9c:	0800acdb 	.word	0x0800acdb
 800aca0:	0800acc5 	.word	0x0800acc5
 800aca4:	0800acdb 	.word	0x0800acdb
 800aca8:	0800accb 	.word	0x0800accb
 800acac:	0800acdb 	.word	0x0800acdb
 800acb0:	0800acdb 	.word	0x0800acdb
 800acb4:	0800acdb 	.word	0x0800acdb
 800acb8:	0800acd3 	.word	0x0800acd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acbc:	f7fe fa3a 	bl	8009134 <HAL_RCC_GetPCLK1Freq>
 800acc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800acc2:	e010      	b.n	800ace6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800acc4:	4b9e      	ldr	r3, [pc, #632]	@ (800af40 <UART_SetConfig+0x5c0>)
 800acc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800acc8:	e00d      	b.n	800ace6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acca:	f7fe f9c7 	bl	800905c <HAL_RCC_GetSysClockFreq>
 800acce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800acd0:	e009      	b.n	800ace6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800acd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800acd8:	e005      	b.n	800ace6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800acda:	2300      	movs	r3, #0
 800acdc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ace4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ace6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace8:	2b00      	cmp	r3, #0
 800acea:	f000 8130 	beq.w	800af4e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acf2:	4a94      	ldr	r2, [pc, #592]	@ (800af44 <UART_SetConfig+0x5c4>)
 800acf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acf8:	461a      	mov	r2, r3
 800acfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acfc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad00:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	685a      	ldr	r2, [r3, #4]
 800ad06:	4613      	mov	r3, r2
 800ad08:	005b      	lsls	r3, r3, #1
 800ad0a:	4413      	add	r3, r2
 800ad0c:	69ba      	ldr	r2, [r7, #24]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d305      	bcc.n	800ad1e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad18:	69ba      	ldr	r2, [r7, #24]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d903      	bls.n	800ad26 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ad24:	e113      	b.n	800af4e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad28:	2200      	movs	r2, #0
 800ad2a:	60bb      	str	r3, [r7, #8]
 800ad2c:	60fa      	str	r2, [r7, #12]
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad32:	4a84      	ldr	r2, [pc, #528]	@ (800af44 <UART_SetConfig+0x5c4>)
 800ad34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	603b      	str	r3, [r7, #0]
 800ad3e:	607a      	str	r2, [r7, #4]
 800ad40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad48:	f7f5 ffa6 	bl	8000c98 <__aeabi_uldivmod>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4610      	mov	r0, r2
 800ad52:	4619      	mov	r1, r3
 800ad54:	f04f 0200 	mov.w	r2, #0
 800ad58:	f04f 0300 	mov.w	r3, #0
 800ad5c:	020b      	lsls	r3, r1, #8
 800ad5e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad62:	0202      	lsls	r2, r0, #8
 800ad64:	6979      	ldr	r1, [r7, #20]
 800ad66:	6849      	ldr	r1, [r1, #4]
 800ad68:	0849      	lsrs	r1, r1, #1
 800ad6a:	2000      	movs	r0, #0
 800ad6c:	460c      	mov	r4, r1
 800ad6e:	4605      	mov	r5, r0
 800ad70:	eb12 0804 	adds.w	r8, r2, r4
 800ad74:	eb43 0905 	adc.w	r9, r3, r5
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	469a      	mov	sl, r3
 800ad80:	4693      	mov	fp, r2
 800ad82:	4652      	mov	r2, sl
 800ad84:	465b      	mov	r3, fp
 800ad86:	4640      	mov	r0, r8
 800ad88:	4649      	mov	r1, r9
 800ad8a:	f7f5 ff85 	bl	8000c98 <__aeabi_uldivmod>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	460b      	mov	r3, r1
 800ad92:	4613      	mov	r3, r2
 800ad94:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad96:	6a3b      	ldr	r3, [r7, #32]
 800ad98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad9c:	d308      	bcc.n	800adb0 <UART_SetConfig+0x430>
 800ad9e:	6a3b      	ldr	r3, [r7, #32]
 800ada0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ada4:	d204      	bcs.n	800adb0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	6a3a      	ldr	r2, [r7, #32]
 800adac:	60da      	str	r2, [r3, #12]
 800adae:	e0ce      	b.n	800af4e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800adb0:	2301      	movs	r3, #1
 800adb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800adb6:	e0ca      	b.n	800af4e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	69db      	ldr	r3, [r3, #28]
 800adbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800adc0:	d166      	bne.n	800ae90 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800adc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800adc6:	2b08      	cmp	r3, #8
 800adc8:	d827      	bhi.n	800ae1a <UART_SetConfig+0x49a>
 800adca:	a201      	add	r2, pc, #4	@ (adr r2, 800add0 <UART_SetConfig+0x450>)
 800adcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add0:	0800adf5 	.word	0x0800adf5
 800add4:	0800adfd 	.word	0x0800adfd
 800add8:	0800ae05 	.word	0x0800ae05
 800addc:	0800ae1b 	.word	0x0800ae1b
 800ade0:	0800ae0b 	.word	0x0800ae0b
 800ade4:	0800ae1b 	.word	0x0800ae1b
 800ade8:	0800ae1b 	.word	0x0800ae1b
 800adec:	0800ae1b 	.word	0x0800ae1b
 800adf0:	0800ae13 	.word	0x0800ae13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adf4:	f7fe f99e 	bl	8009134 <HAL_RCC_GetPCLK1Freq>
 800adf8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800adfa:	e014      	b.n	800ae26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adfc:	f7fe f9b0 	bl	8009160 <HAL_RCC_GetPCLK2Freq>
 800ae00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae02:	e010      	b.n	800ae26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae04:	4b4e      	ldr	r3, [pc, #312]	@ (800af40 <UART_SetConfig+0x5c0>)
 800ae06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae08:	e00d      	b.n	800ae26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae0a:	f7fe f927 	bl	800905c <HAL_RCC_GetSysClockFreq>
 800ae0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae10:	e009      	b.n	800ae26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae18:	e005      	b.n	800ae26 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ae24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f000 8090 	beq.w	800af4e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae32:	4a44      	ldr	r2, [pc, #272]	@ (800af44 <UART_SetConfig+0x5c4>)
 800ae34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae38:	461a      	mov	r2, r3
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae40:	005a      	lsls	r2, r3, #1
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	085b      	lsrs	r3, r3, #1
 800ae48:	441a      	add	r2, r3
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae54:	6a3b      	ldr	r3, [r7, #32]
 800ae56:	2b0f      	cmp	r3, #15
 800ae58:	d916      	bls.n	800ae88 <UART_SetConfig+0x508>
 800ae5a:	6a3b      	ldr	r3, [r7, #32]
 800ae5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae60:	d212      	bcs.n	800ae88 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae62:	6a3b      	ldr	r3, [r7, #32]
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	f023 030f 	bic.w	r3, r3, #15
 800ae6a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae6c:	6a3b      	ldr	r3, [r7, #32]
 800ae6e:	085b      	lsrs	r3, r3, #1
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	f003 0307 	and.w	r3, r3, #7
 800ae76:	b29a      	uxth	r2, r3
 800ae78:	8bfb      	ldrh	r3, [r7, #30]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	8bfa      	ldrh	r2, [r7, #30]
 800ae84:	60da      	str	r2, [r3, #12]
 800ae86:	e062      	b.n	800af4e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ae8e:	e05e      	b.n	800af4e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae94:	2b08      	cmp	r3, #8
 800ae96:	d828      	bhi.n	800aeea <UART_SetConfig+0x56a>
 800ae98:	a201      	add	r2, pc, #4	@ (adr r2, 800aea0 <UART_SetConfig+0x520>)
 800ae9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9e:	bf00      	nop
 800aea0:	0800aec5 	.word	0x0800aec5
 800aea4:	0800aecd 	.word	0x0800aecd
 800aea8:	0800aed5 	.word	0x0800aed5
 800aeac:	0800aeeb 	.word	0x0800aeeb
 800aeb0:	0800aedb 	.word	0x0800aedb
 800aeb4:	0800aeeb 	.word	0x0800aeeb
 800aeb8:	0800aeeb 	.word	0x0800aeeb
 800aebc:	0800aeeb 	.word	0x0800aeeb
 800aec0:	0800aee3 	.word	0x0800aee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aec4:	f7fe f936 	bl	8009134 <HAL_RCC_GetPCLK1Freq>
 800aec8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aeca:	e014      	b.n	800aef6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aecc:	f7fe f948 	bl	8009160 <HAL_RCC_GetPCLK2Freq>
 800aed0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aed2:	e010      	b.n	800aef6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aed4:	4b1a      	ldr	r3, [pc, #104]	@ (800af40 <UART_SetConfig+0x5c0>)
 800aed6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aed8:	e00d      	b.n	800aef6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aeda:	f7fe f8bf 	bl	800905c <HAL_RCC_GetSysClockFreq>
 800aede:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aee0:	e009      	b.n	800aef6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aee6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aee8:	e005      	b.n	800aef6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800aeea:	2300      	movs	r3, #0
 800aeec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aef4:	bf00      	nop
    }

    if (pclk != 0U)
 800aef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d028      	beq.n	800af4e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af00:	4a10      	ldr	r2, [pc, #64]	@ (800af44 <UART_SetConfig+0x5c4>)
 800af02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af06:	461a      	mov	r2, r3
 800af08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0a:	fbb3 f2f2 	udiv	r2, r3, r2
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	085b      	lsrs	r3, r3, #1
 800af14:	441a      	add	r2, r3
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af20:	6a3b      	ldr	r3, [r7, #32]
 800af22:	2b0f      	cmp	r3, #15
 800af24:	d910      	bls.n	800af48 <UART_SetConfig+0x5c8>
 800af26:	6a3b      	ldr	r3, [r7, #32]
 800af28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af2c:	d20c      	bcs.n	800af48 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af2e:	6a3b      	ldr	r3, [r7, #32]
 800af30:	b29a      	uxth	r2, r3
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	60da      	str	r2, [r3, #12]
 800af38:	e009      	b.n	800af4e <UART_SetConfig+0x5ce>
 800af3a:	bf00      	nop
 800af3c:	40008000 	.word	0x40008000
 800af40:	00f42400 	.word	0x00f42400
 800af44:	08022640 	.word	0x08022640
      }
      else
      {
        ret = HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2201      	movs	r2, #1
 800af52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	2201      	movs	r2, #1
 800af5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	2200      	movs	r2, #0
 800af62:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	2200      	movs	r2, #0
 800af68:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800af6a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3730      	adds	r7, #48	@ 0x30
 800af72:	46bd      	mov	sp, r7
 800af74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800af78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af84:	f003 0308 	and.w	r3, r3, #8
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d00a      	beq.n	800afa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	430a      	orrs	r2, r1
 800afa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afa6:	f003 0301 	and.w	r3, r3, #1
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00a      	beq.n	800afc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	430a      	orrs	r2, r1
 800afc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afc8:	f003 0302 	and.w	r3, r3, #2
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00a      	beq.n	800afe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	430a      	orrs	r2, r1
 800afe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afea:	f003 0304 	and.w	r3, r3, #4
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00a      	beq.n	800b008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	430a      	orrs	r2, r1
 800b006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b00c:	f003 0310 	and.w	r3, r3, #16
 800b010:	2b00      	cmp	r3, #0
 800b012:	d00a      	beq.n	800b02a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	430a      	orrs	r2, r1
 800b028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b02e:	f003 0320 	and.w	r3, r3, #32
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00a      	beq.n	800b04c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	430a      	orrs	r2, r1
 800b04a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b054:	2b00      	cmp	r3, #0
 800b056:	d01a      	beq.n	800b08e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	430a      	orrs	r2, r1
 800b06c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b072:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b076:	d10a      	bne.n	800b08e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	430a      	orrs	r2, r1
 800b08c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00a      	beq.n	800b0b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	430a      	orrs	r2, r1
 800b0ae:	605a      	str	r2, [r3, #4]
  }
}
 800b0b0:	bf00      	nop
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b098      	sub	sp, #96	@ 0x60
 800b0c0:	af02      	add	r7, sp, #8
 800b0c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b0cc:	f7fa fa4a 	bl	8005564 <HAL_GetTick>
 800b0d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f003 0308 	and.w	r3, r3, #8
 800b0dc:	2b08      	cmp	r3, #8
 800b0de:	d12f      	bne.n	800b140 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b0e4:	9300      	str	r3, [sp, #0]
 800b0e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 f88e 	bl	800b210 <UART_WaitOnFlagUntilTimeout>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d022      	beq.n	800b140 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b102:	e853 3f00 	ldrex	r3, [r3]
 800b106:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b10a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b10e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	461a      	mov	r2, r3
 800b116:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b118:	647b      	str	r3, [r7, #68]	@ 0x44
 800b11a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b11c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b11e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b120:	e841 2300 	strex	r3, r2, [r1]
 800b124:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1e6      	bne.n	800b0fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2220      	movs	r2, #32
 800b130:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b13c:	2303      	movs	r3, #3
 800b13e:	e063      	b.n	800b208 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f003 0304 	and.w	r3, r3, #4
 800b14a:	2b04      	cmp	r3, #4
 800b14c:	d149      	bne.n	800b1e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b14e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b152:	9300      	str	r3, [sp, #0]
 800b154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b156:	2200      	movs	r2, #0
 800b158:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 f857 	bl	800b210 <UART_WaitOnFlagUntilTimeout>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d03c      	beq.n	800b1e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b170:	e853 3f00 	ldrex	r3, [r3]
 800b174:	623b      	str	r3, [r7, #32]
   return(result);
 800b176:	6a3b      	ldr	r3, [r7, #32]
 800b178:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b17c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	461a      	mov	r2, r3
 800b184:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b186:	633b      	str	r3, [r7, #48]	@ 0x30
 800b188:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b18c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b18e:	e841 2300 	strex	r3, r2, [r1]
 800b192:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1e6      	bne.n	800b168 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	3308      	adds	r3, #8
 800b1a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	e853 3f00 	ldrex	r3, [r3]
 800b1a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f023 0301 	bic.w	r3, r3, #1
 800b1b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	3308      	adds	r3, #8
 800b1b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1ba:	61fa      	str	r2, [r7, #28]
 800b1bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1be:	69b9      	ldr	r1, [r7, #24]
 800b1c0:	69fa      	ldr	r2, [r7, #28]
 800b1c2:	e841 2300 	strex	r3, r2, [r1]
 800b1c6:	617b      	str	r3, [r7, #20]
   return(result);
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1e5      	bne.n	800b19a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2220      	movs	r2, #32
 800b1d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1de:	2303      	movs	r3, #3
 800b1e0:	e012      	b.n	800b208 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2220      	movs	r2, #32
 800b1e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2220      	movs	r2, #32
 800b1ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3758      	adds	r7, #88	@ 0x58
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	603b      	str	r3, [r7, #0]
 800b21c:	4613      	mov	r3, r2
 800b21e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b220:	e04f      	b.n	800b2c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b228:	d04b      	beq.n	800b2c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b22a:	f7fa f99b 	bl	8005564 <HAL_GetTick>
 800b22e:	4602      	mov	r2, r0
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	1ad3      	subs	r3, r2, r3
 800b234:	69ba      	ldr	r2, [r7, #24]
 800b236:	429a      	cmp	r2, r3
 800b238:	d302      	bcc.n	800b240 <UART_WaitOnFlagUntilTimeout+0x30>
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d101      	bne.n	800b244 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b240:	2303      	movs	r3, #3
 800b242:	e04e      	b.n	800b2e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f003 0304 	and.w	r3, r3, #4
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d037      	beq.n	800b2c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	2b80      	cmp	r3, #128	@ 0x80
 800b256:	d034      	beq.n	800b2c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	2b40      	cmp	r3, #64	@ 0x40
 800b25c:	d031      	beq.n	800b2c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	69db      	ldr	r3, [r3, #28]
 800b264:	f003 0308 	and.w	r3, r3, #8
 800b268:	2b08      	cmp	r3, #8
 800b26a:	d110      	bne.n	800b28e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2208      	movs	r2, #8
 800b272:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b274:	68f8      	ldr	r0, [r7, #12]
 800b276:	f000 f838 	bl	800b2ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2208      	movs	r2, #8
 800b27e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2200      	movs	r2, #0
 800b286:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b28a:	2301      	movs	r3, #1
 800b28c:	e029      	b.n	800b2e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	69db      	ldr	r3, [r3, #28]
 800b294:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b298:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b29c:	d111      	bne.n	800b2c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b2a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2a8:	68f8      	ldr	r0, [r7, #12]
 800b2aa:	f000 f81e 	bl	800b2ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2220      	movs	r2, #32
 800b2b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b2be:	2303      	movs	r3, #3
 800b2c0:	e00f      	b.n	800b2e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	69da      	ldr	r2, [r3, #28]
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	4013      	ands	r3, r2
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	bf0c      	ite	eq
 800b2d2:	2301      	moveq	r3, #1
 800b2d4:	2300      	movne	r3, #0
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	461a      	mov	r2, r3
 800b2da:	79fb      	ldrb	r3, [r7, #7]
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d0a0      	beq.n	800b222 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2ea:	b480      	push	{r7}
 800b2ec:	b095      	sub	sp, #84	@ 0x54
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2fa:	e853 3f00 	ldrex	r3, [r3]
 800b2fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b302:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b306:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	461a      	mov	r2, r3
 800b30e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b310:	643b      	str	r3, [r7, #64]	@ 0x40
 800b312:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b314:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b316:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b318:	e841 2300 	strex	r3, r2, [r1]
 800b31c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b320:	2b00      	cmp	r3, #0
 800b322:	d1e6      	bne.n	800b2f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	3308      	adds	r3, #8
 800b32a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32c:	6a3b      	ldr	r3, [r7, #32]
 800b32e:	e853 3f00 	ldrex	r3, [r3]
 800b332:	61fb      	str	r3, [r7, #28]
   return(result);
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b33a:	f023 0301 	bic.w	r3, r3, #1
 800b33e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	3308      	adds	r3, #8
 800b346:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b348:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b34a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b34c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b34e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b350:	e841 2300 	strex	r3, r2, [r1]
 800b354:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1e3      	bne.n	800b324 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b360:	2b01      	cmp	r3, #1
 800b362:	d118      	bne.n	800b396 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	e853 3f00 	ldrex	r3, [r3]
 800b370:	60bb      	str	r3, [r7, #8]
   return(result);
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	f023 0310 	bic.w	r3, r3, #16
 800b378:	647b      	str	r3, [r7, #68]	@ 0x44
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	461a      	mov	r2, r3
 800b380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b382:	61bb      	str	r3, [r7, #24]
 800b384:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b386:	6979      	ldr	r1, [r7, #20]
 800b388:	69ba      	ldr	r2, [r7, #24]
 800b38a:	e841 2300 	strex	r3, r2, [r1]
 800b38e:	613b      	str	r3, [r7, #16]
   return(result);
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1e6      	bne.n	800b364 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2220      	movs	r2, #32
 800b39a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b3aa:	bf00      	nop
 800b3ac:	3754      	adds	r7, #84	@ 0x54
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b085      	sub	sp, #20
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d101      	bne.n	800b3cc <HAL_UARTEx_DisableFifoMode+0x16>
 800b3c8:	2302      	movs	r3, #2
 800b3ca:	e027      	b.n	800b41c <HAL_UARTEx_DisableFifoMode+0x66>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2224      	movs	r2, #36	@ 0x24
 800b3d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f022 0201 	bic.w	r2, r2, #1
 800b3f2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b3fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2220      	movs	r2, #32
 800b40e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3714      	adds	r7, #20
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d101      	bne.n	800b440 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b43c:	2302      	movs	r3, #2
 800b43e:	e02d      	b.n	800b49c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2224      	movs	r2, #36	@ 0x24
 800b44c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f022 0201 	bic.w	r2, r2, #1
 800b466:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	430a      	orrs	r2, r1
 800b47a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 f84f 	bl	800b520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	68fa      	ldr	r2, [r7, #12]
 800b488:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2220      	movs	r2, #32
 800b48e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d101      	bne.n	800b4bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b4b8:	2302      	movs	r3, #2
 800b4ba:	e02d      	b.n	800b518 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2224      	movs	r2, #36	@ 0x24
 800b4c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f022 0201 	bic.w	r2, r2, #1
 800b4e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	683a      	ldr	r2, [r7, #0]
 800b4f4:	430a      	orrs	r2, r1
 800b4f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 f811 	bl	800b520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2220      	movs	r2, #32
 800b50a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b516:	2300      	movs	r3, #0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d108      	bne.n	800b542 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2201      	movs	r2, #1
 800b534:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b540:	e031      	b.n	800b5a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b542:	2308      	movs	r3, #8
 800b544:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b546:	2308      	movs	r3, #8
 800b548:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	0e5b      	lsrs	r3, r3, #25
 800b552:	b2db      	uxtb	r3, r3
 800b554:	f003 0307 	and.w	r3, r3, #7
 800b558:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	0f5b      	lsrs	r3, r3, #29
 800b562:	b2db      	uxtb	r3, r3
 800b564:	f003 0307 	and.w	r3, r3, #7
 800b568:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b56a:	7bbb      	ldrb	r3, [r7, #14]
 800b56c:	7b3a      	ldrb	r2, [r7, #12]
 800b56e:	4911      	ldr	r1, [pc, #68]	@ (800b5b4 <UARTEx_SetNbDataToProcess+0x94>)
 800b570:	5c8a      	ldrb	r2, [r1, r2]
 800b572:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b576:	7b3a      	ldrb	r2, [r7, #12]
 800b578:	490f      	ldr	r1, [pc, #60]	@ (800b5b8 <UARTEx_SetNbDataToProcess+0x98>)
 800b57a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b57c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b580:	b29a      	uxth	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b588:	7bfb      	ldrb	r3, [r7, #15]
 800b58a:	7b7a      	ldrb	r2, [r7, #13]
 800b58c:	4909      	ldr	r1, [pc, #36]	@ (800b5b4 <UARTEx_SetNbDataToProcess+0x94>)
 800b58e:	5c8a      	ldrb	r2, [r1, r2]
 800b590:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b594:	7b7a      	ldrb	r2, [r7, #13]
 800b596:	4908      	ldr	r1, [pc, #32]	@ (800b5b8 <UARTEx_SetNbDataToProcess+0x98>)
 800b598:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b59a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b5a6:	bf00      	nop
 800b5a8:	3714      	adds	r7, #20
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	08022658 	.word	0x08022658
 800b5b8:	08022660 	.word	0x08022660

0800b5bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b085      	sub	sp, #20
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b5cc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b5d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b5dc:	2300      	movs	r3, #0
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3714      	adds	r7, #20
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b5ea:	b480      	push	{r7}
 800b5ec:	b085      	sub	sp, #20
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b5f2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b5f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b5fe:	b29a      	uxth	r2, r3
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	b29b      	uxth	r3, r3
 800b604:	43db      	mvns	r3, r3
 800b606:	b29b      	uxth	r3, r3
 800b608:	4013      	ands	r3, r2
 800b60a:	b29a      	uxth	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b612:	2300      	movs	r3, #0
}
 800b614:	4618      	mov	r0, r3
 800b616:	3714      	adds	r7, #20
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b620:	b480      	push	{r7}
 800b622:	b085      	sub	sp, #20
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	1d3b      	adds	r3, r7, #4
 800b62a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2201      	movs	r2, #1
 800b632:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2200      	movs	r2, #0
 800b63a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2200      	movs	r2, #0
 800b642:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2200      	movs	r2, #0
 800b64a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b64e:	2300      	movs	r3, #0
}
 800b650:	4618      	mov	r0, r3
 800b652:	3714      	adds	r7, #20
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b0a7      	sub	sp, #156	@ 0x9c
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b666:	2300      	movs	r3, #0
 800b668:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	4413      	add	r3, r2
 800b676:	881b      	ldrh	r3, [r3, #0]
 800b678:	b29b      	uxth	r3, r3
 800b67a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800b67e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b682:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	78db      	ldrb	r3, [r3, #3]
 800b68a:	2b03      	cmp	r3, #3
 800b68c:	d81f      	bhi.n	800b6ce <USB_ActivateEndpoint+0x72>
 800b68e:	a201      	add	r2, pc, #4	@ (adr r2, 800b694 <USB_ActivateEndpoint+0x38>)
 800b690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b694:	0800b6a5 	.word	0x0800b6a5
 800b698:	0800b6c1 	.word	0x0800b6c1
 800b69c:	0800b6d7 	.word	0x0800b6d7
 800b6a0:	0800b6b3 	.word	0x0800b6b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b6a4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b6a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b6ac:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800b6b0:	e012      	b.n	800b6d8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b6b2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b6b6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800b6ba:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800b6be:	e00b      	b.n	800b6d8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b6c0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b6c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b6c8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800b6cc:	e004      	b.n	800b6d8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800b6d4:	e000      	b.n	800b6d8 <USB_ActivateEndpoint+0x7c>
      break;
 800b6d6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	441a      	add	r2, r3
 800b6e2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b6e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	4413      	add	r3, r2
 800b704:	881b      	ldrh	r3, [r3, #0]
 800b706:	b29b      	uxth	r3, r3
 800b708:	b21b      	sxth	r3, r3
 800b70a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b70e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b712:	b21a      	sxth	r2, r3
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	b21b      	sxth	r3, r3
 800b71a:	4313      	orrs	r3, r2
 800b71c:	b21b      	sxth	r3, r3
 800b71e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	441a      	add	r2, r3
 800b72c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b730:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b734:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b738:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b73c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b740:	b29b      	uxth	r3, r3
 800b742:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	7b1b      	ldrb	r3, [r3, #12]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	f040 8180 	bne.w	800ba4e <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	785b      	ldrb	r3, [r3, #1]
 800b752:	2b00      	cmp	r3, #0
 800b754:	f000 8084 	beq.w	800b860 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	61bb      	str	r3, [r7, #24]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b762:	b29b      	uxth	r3, r3
 800b764:	461a      	mov	r2, r3
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	4413      	add	r3, r2
 800b76a:	61bb      	str	r3, [r7, #24]
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	00da      	lsls	r2, r3, #3
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	4413      	add	r3, r2
 800b776:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b77a:	617b      	str	r3, [r7, #20]
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	88db      	ldrh	r3, [r3, #6]
 800b780:	085b      	lsrs	r3, r3, #1
 800b782:	b29b      	uxth	r3, r3
 800b784:	005b      	lsls	r3, r3, #1
 800b786:	b29a      	uxth	r2, r3
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	4413      	add	r3, r2
 800b796:	881b      	ldrh	r3, [r3, #0]
 800b798:	827b      	strh	r3, [r7, #18]
 800b79a:	8a7b      	ldrh	r3, [r7, #18]
 800b79c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d01b      	beq.n	800b7dc <USB_ActivateEndpoint+0x180>
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	4413      	add	r3, r2
 800b7ae:	881b      	ldrh	r3, [r3, #0]
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7ba:	823b      	strh	r3, [r7, #16]
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	441a      	add	r2, r3
 800b7c6:	8a3b      	ldrh	r3, [r7, #16]
 800b7c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b7d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	78db      	ldrb	r3, [r3, #3]
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d020      	beq.n	800b826 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	4413      	add	r3, r2
 800b7ee:	881b      	ldrh	r3, [r3, #0]
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7fa:	81bb      	strh	r3, [r7, #12]
 800b7fc:	89bb      	ldrh	r3, [r7, #12]
 800b7fe:	f083 0320 	eor.w	r3, r3, #32
 800b802:	81bb      	strh	r3, [r7, #12]
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	441a      	add	r2, r3
 800b80e:	89bb      	ldrh	r3, [r7, #12]
 800b810:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b814:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b818:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b81c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b820:	b29b      	uxth	r3, r3
 800b822:	8013      	strh	r3, [r2, #0]
 800b824:	e3f9      	b.n	800c01a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	009b      	lsls	r3, r3, #2
 800b82e:	4413      	add	r3, r2
 800b830:	881b      	ldrh	r3, [r3, #0]
 800b832:	b29b      	uxth	r3, r3
 800b834:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b838:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b83c:	81fb      	strh	r3, [r7, #14]
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	441a      	add	r2, r3
 800b848:	89fb      	ldrh	r3, [r7, #14]
 800b84a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b84e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	8013      	strh	r3, [r2, #0]
 800b85e:	e3dc      	b.n	800c01a <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	633b      	str	r3, [r7, #48]	@ 0x30
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	461a      	mov	r2, r3
 800b86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b870:	4413      	add	r3, r2
 800b872:	633b      	str	r3, [r7, #48]	@ 0x30
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	00da      	lsls	r2, r3, #3
 800b87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b87c:	4413      	add	r3, r2
 800b87e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b882:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	88db      	ldrh	r3, [r3, #6]
 800b888:	085b      	lsrs	r3, r3, #1
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	005b      	lsls	r3, r3, #1
 800b88e:	b29a      	uxth	r2, r3
 800b890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b892:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a4:	4413      	add	r3, r2
 800b8a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	00da      	lsls	r2, r3, #3
 800b8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8b0:	4413      	add	r3, r2
 800b8b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b8b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ba:	881b      	ldrh	r3, [r3, #0]
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8c2:	b29a      	uxth	r2, r3
 800b8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c6:	801a      	strh	r2, [r3, #0]
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	691b      	ldr	r3, [r3, #16]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d10a      	bne.n	800b8e6 <USB_ActivateEndpoint+0x28a>
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d2:	881b      	ldrh	r3, [r3, #0]
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8de:	b29a      	uxth	r2, r3
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e2:	801a      	strh	r2, [r3, #0]
 800b8e4:	e041      	b.n	800b96a <USB_ActivateEndpoint+0x30e>
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	691b      	ldr	r3, [r3, #16]
 800b8ea:	2b3e      	cmp	r3, #62	@ 0x3e
 800b8ec:	d81c      	bhi.n	800b928 <USB_ActivateEndpoint+0x2cc>
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	691b      	ldr	r3, [r3, #16]
 800b8f2:	085b      	lsrs	r3, r3, #1
 800b8f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	691b      	ldr	r3, [r3, #16]
 800b8fc:	f003 0301 	and.w	r3, r3, #1
 800b900:	2b00      	cmp	r3, #0
 800b902:	d004      	beq.n	800b90e <USB_ActivateEndpoint+0x2b2>
 800b904:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b908:	3301      	adds	r3, #1
 800b90a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b910:	881b      	ldrh	r3, [r3, #0]
 800b912:	b29a      	uxth	r2, r3
 800b914:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b918:	b29b      	uxth	r3, r3
 800b91a:	029b      	lsls	r3, r3, #10
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	4313      	orrs	r3, r2
 800b920:	b29a      	uxth	r2, r3
 800b922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b924:	801a      	strh	r2, [r3, #0]
 800b926:	e020      	b.n	800b96a <USB_ActivateEndpoint+0x30e>
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	691b      	ldr	r3, [r3, #16]
 800b92c:	095b      	lsrs	r3, r3, #5
 800b92e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	691b      	ldr	r3, [r3, #16]
 800b936:	f003 031f 	and.w	r3, r3, #31
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d104      	bne.n	800b948 <USB_ActivateEndpoint+0x2ec>
 800b93e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b942:	3b01      	subs	r3, #1
 800b944:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94a:	881b      	ldrh	r3, [r3, #0]
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b952:	b29b      	uxth	r3, r3
 800b954:	029b      	lsls	r3, r3, #10
 800b956:	b29b      	uxth	r3, r3
 800b958:	4313      	orrs	r3, r2
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b964:	b29a      	uxth	r2, r3
 800b966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b968:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	4413      	add	r3, r2
 800b974:	881b      	ldrh	r3, [r3, #0]
 800b976:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b978:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b97a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d01b      	beq.n	800b9ba <USB_ActivateEndpoint+0x35e>
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	4413      	add	r3, r2
 800b98c:	881b      	ldrh	r3, [r3, #0]
 800b98e:	b29b      	uxth	r3, r3
 800b990:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b998:	843b      	strh	r3, [r7, #32]
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	441a      	add	r2, r3
 800b9a4:	8c3b      	ldrh	r3, [r7, #32]
 800b9a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b9b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d124      	bne.n	800ba0c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	4413      	add	r3, r2
 800b9cc:	881b      	ldrh	r3, [r3, #0]
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b9d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9d8:	83bb      	strh	r3, [r7, #28]
 800b9da:	8bbb      	ldrh	r3, [r7, #28]
 800b9dc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b9e0:	83bb      	strh	r3, [r7, #28]
 800b9e2:	8bbb      	ldrh	r3, [r7, #28]
 800b9e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b9e8:	83bb      	strh	r3, [r7, #28]
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	441a      	add	r2, r3
 800b9f4:	8bbb      	ldrh	r3, [r7, #28]
 800b9f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	8013      	strh	r3, [r2, #0]
 800ba0a:	e306      	b.n	800c01a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	4413      	add	r3, r2
 800ba16:	881b      	ldrh	r3, [r3, #0]
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ba1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba22:	83fb      	strh	r3, [r7, #30]
 800ba24:	8bfb      	ldrh	r3, [r7, #30]
 800ba26:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ba2a:	83fb      	strh	r3, [r7, #30]
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	441a      	add	r2, r3
 800ba36:	8bfb      	ldrh	r3, [r7, #30]
 800ba38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	8013      	strh	r3, [r2, #0]
 800ba4c:	e2e5      	b.n	800c01a <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	78db      	ldrb	r3, [r3, #3]
 800ba52:	2b02      	cmp	r3, #2
 800ba54:	d11e      	bne.n	800ba94 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	4413      	add	r3, r2
 800ba60:	881b      	ldrh	r3, [r3, #0]
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba6c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	441a      	add	r2, r3
 800ba7a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800ba7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba86:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ba8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	8013      	strh	r3, [r2, #0]
 800ba92:	e01d      	b.n	800bad0 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	4413      	add	r3, r2
 800ba9e:	881b      	ldrh	r3, [r3, #0]
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800baa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800baaa:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	441a      	add	r2, r3
 800bab8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800babc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bac0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bac4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bacc:	b29b      	uxth	r3, r3
 800bace:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bada:	b29b      	uxth	r3, r3
 800badc:	461a      	mov	r2, r3
 800bade:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bae0:	4413      	add	r3, r2
 800bae2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	00da      	lsls	r2, r3, #3
 800baea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800baec:	4413      	add	r3, r2
 800baee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800baf2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	891b      	ldrh	r3, [r3, #8]
 800baf8:	085b      	lsrs	r3, r3, #1
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	005b      	lsls	r3, r3, #1
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb02:	801a      	strh	r2, [r3, #0]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	677b      	str	r3, [r7, #116]	@ 0x74
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	461a      	mov	r2, r3
 800bb12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb14:	4413      	add	r3, r2
 800bb16:	677b      	str	r3, [r7, #116]	@ 0x74
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	00da      	lsls	r2, r3, #3
 800bb1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb20:	4413      	add	r3, r2
 800bb22:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bb26:	673b      	str	r3, [r7, #112]	@ 0x70
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	895b      	ldrh	r3, [r3, #10]
 800bb2c:	085b      	lsrs	r3, r3, #1
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	005b      	lsls	r3, r3, #1
 800bb32:	b29a      	uxth	r2, r3
 800bb34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bb36:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	785b      	ldrb	r3, [r3, #1]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f040 81af 	bne.w	800bea0 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	4413      	add	r3, r2
 800bb4c:	881b      	ldrh	r3, [r3, #0]
 800bb4e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800bb52:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800bb56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d01d      	beq.n	800bb9a <USB_ActivateEndpoint+0x53e>
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	4413      	add	r3, r2
 800bb68:	881b      	ldrh	r3, [r3, #0]
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb74:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	009b      	lsls	r3, r3, #2
 800bb80:	441a      	add	r2, r3
 800bb82:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800bb86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bb92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	4413      	add	r3, r2
 800bba4:	881b      	ldrh	r3, [r3, #0]
 800bba6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800bbaa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800bbae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d01d      	beq.n	800bbf2 <USB_ActivateEndpoint+0x596>
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	4413      	add	r3, r2
 800bbc0:	881b      	ldrh	r3, [r3, #0]
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bbc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbcc:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	441a      	add	r2, r3
 800bbda:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800bbde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bbe2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bbe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bbea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	785b      	ldrb	r3, [r3, #1]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d16b      	bne.n	800bcd2 <USB_ActivateEndpoint+0x676>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	461a      	mov	r2, r3
 800bc08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc0a:	4413      	add	r3, r2
 800bc0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	00da      	lsls	r2, r3, #3
 800bc14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc16:	4413      	add	r3, r2
 800bc18:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bc1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc20:	881b      	ldrh	r3, [r3, #0]
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc28:	b29a      	uxth	r2, r3
 800bc2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc2c:	801a      	strh	r2, [r3, #0]
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d10a      	bne.n	800bc4c <USB_ActivateEndpoint+0x5f0>
 800bc36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc38:	881b      	ldrh	r3, [r3, #0]
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc48:	801a      	strh	r2, [r3, #0]
 800bc4a:	e05d      	b.n	800bd08 <USB_ActivateEndpoint+0x6ac>
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	691b      	ldr	r3, [r3, #16]
 800bc50:	2b3e      	cmp	r3, #62	@ 0x3e
 800bc52:	d81c      	bhi.n	800bc8e <USB_ActivateEndpoint+0x632>
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	691b      	ldr	r3, [r3, #16]
 800bc58:	085b      	lsrs	r3, r3, #1
 800bc5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	691b      	ldr	r3, [r3, #16]
 800bc62:	f003 0301 	and.w	r3, r3, #1
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d004      	beq.n	800bc74 <USB_ActivateEndpoint+0x618>
 800bc6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bc6e:	3301      	adds	r3, #1
 800bc70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bc74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc76:	881b      	ldrh	r3, [r3, #0]
 800bc78:	b29a      	uxth	r2, r3
 800bc7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	029b      	lsls	r3, r3, #10
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	4313      	orrs	r3, r2
 800bc86:	b29a      	uxth	r2, r3
 800bc88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc8a:	801a      	strh	r2, [r3, #0]
 800bc8c:	e03c      	b.n	800bd08 <USB_ActivateEndpoint+0x6ac>
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	691b      	ldr	r3, [r3, #16]
 800bc92:	095b      	lsrs	r3, r3, #5
 800bc94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	691b      	ldr	r3, [r3, #16]
 800bc9c:	f003 031f 	and.w	r3, r3, #31
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d104      	bne.n	800bcae <USB_ActivateEndpoint+0x652>
 800bca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bca8:	3b01      	subs	r3, #1
 800bcaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bcae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcb0:	881b      	ldrh	r3, [r3, #0]
 800bcb2:	b29a      	uxth	r2, r3
 800bcb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	029b      	lsls	r3, r3, #10
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcca:	b29a      	uxth	r2, r3
 800bccc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcce:	801a      	strh	r2, [r3, #0]
 800bcd0:	e01a      	b.n	800bd08 <USB_ActivateEndpoint+0x6ac>
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	785b      	ldrb	r3, [r3, #1]
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d116      	bne.n	800bd08 <USB_ActivateEndpoint+0x6ac>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	657b      	str	r3, [r7, #84]	@ 0x54
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	461a      	mov	r2, r3
 800bce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcea:	4413      	add	r3, r2
 800bcec:	657b      	str	r3, [r7, #84]	@ 0x54
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	00da      	lsls	r2, r3, #3
 800bcf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcf6:	4413      	add	r3, r2
 800bcf8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bcfc:	653b      	str	r3, [r7, #80]	@ 0x50
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	691b      	ldr	r3, [r3, #16]
 800bd02:	b29a      	uxth	r2, r3
 800bd04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd06:	801a      	strh	r2, [r3, #0]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	785b      	ldrb	r3, [r3, #1]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d16b      	bne.n	800bdec <USB_ActivateEndpoint+0x790>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	461a      	mov	r2, r3
 800bd22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd24:	4413      	add	r3, r2
 800bd26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	00da      	lsls	r2, r3, #3
 800bd2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd30:	4413      	add	r3, r2
 800bd32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bd36:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bd38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd3a:	881b      	ldrh	r3, [r3, #0]
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd42:	b29a      	uxth	r2, r3
 800bd44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd46:	801a      	strh	r2, [r3, #0]
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	691b      	ldr	r3, [r3, #16]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10a      	bne.n	800bd66 <USB_ActivateEndpoint+0x70a>
 800bd50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd52:	881b      	ldrh	r3, [r3, #0]
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd62:	801a      	strh	r2, [r3, #0]
 800bd64:	e05b      	b.n	800be1e <USB_ActivateEndpoint+0x7c2>
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	691b      	ldr	r3, [r3, #16]
 800bd6a:	2b3e      	cmp	r3, #62	@ 0x3e
 800bd6c:	d81c      	bhi.n	800bda8 <USB_ActivateEndpoint+0x74c>
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	691b      	ldr	r3, [r3, #16]
 800bd72:	085b      	lsrs	r3, r3, #1
 800bd74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	691b      	ldr	r3, [r3, #16]
 800bd7c:	f003 0301 	and.w	r3, r3, #1
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d004      	beq.n	800bd8e <USB_ActivateEndpoint+0x732>
 800bd84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bd88:	3301      	adds	r3, #1
 800bd8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bd8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd90:	881b      	ldrh	r3, [r3, #0]
 800bd92:	b29a      	uxth	r2, r3
 800bd94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bd98:	b29b      	uxth	r3, r3
 800bd9a:	029b      	lsls	r3, r3, #10
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	b29a      	uxth	r2, r3
 800bda2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bda4:	801a      	strh	r2, [r3, #0]
 800bda6:	e03a      	b.n	800be1e <USB_ActivateEndpoint+0x7c2>
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	691b      	ldr	r3, [r3, #16]
 800bdac:	095b      	lsrs	r3, r3, #5
 800bdae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	691b      	ldr	r3, [r3, #16]
 800bdb6:	f003 031f 	and.w	r3, r3, #31
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d104      	bne.n	800bdc8 <USB_ActivateEndpoint+0x76c>
 800bdbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bdc2:	3b01      	subs	r3, #1
 800bdc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bdc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdca:	881b      	ldrh	r3, [r3, #0]
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	029b      	lsls	r3, r3, #10
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bde0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bde8:	801a      	strh	r2, [r3, #0]
 800bdea:	e018      	b.n	800be1e <USB_ActivateEndpoint+0x7c2>
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	785b      	ldrb	r3, [r3, #1]
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d114      	bne.n	800be1e <USB_ActivateEndpoint+0x7c2>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be00:	4413      	add	r3, r2
 800be02:	647b      	str	r3, [r7, #68]	@ 0x44
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	00da      	lsls	r2, r3, #3
 800be0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be0c:	4413      	add	r3, r2
 800be0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800be12:	643b      	str	r3, [r7, #64]	@ 0x40
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	691b      	ldr	r3, [r3, #16]
 800be18:	b29a      	uxth	r2, r3
 800be1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be1c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	4413      	add	r3, r2
 800be28:	881b      	ldrh	r3, [r3, #0]
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be34:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800be36:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800be38:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800be3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800be3e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800be40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800be44:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	441a      	add	r2, r3
 800be50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800be52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be62:	b29b      	uxth	r3, r3
 800be64:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	4413      	add	r3, r2
 800be70:	881b      	ldrh	r3, [r3, #0]
 800be72:	b29b      	uxth	r3, r3
 800be74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be7c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	441a      	add	r2, r3
 800be88:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800be8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	8013      	strh	r3, [r2, #0]
 800be9e:	e0bc      	b.n	800c01a <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	4413      	add	r3, r2
 800beaa:	881b      	ldrh	r3, [r3, #0]
 800beac:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800beb0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800beb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d01d      	beq.n	800bef8 <USB_ActivateEndpoint+0x89c>
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	4413      	add	r3, r2
 800bec6:	881b      	ldrh	r3, [r3, #0]
 800bec8:	b29b      	uxth	r3, r3
 800beca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bed2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	441a      	add	r2, r3
 800bee0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bee4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bee8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800beec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bef0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	4413      	add	r3, r2
 800bf02:	881b      	ldrh	r3, [r3, #0]
 800bf04:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800bf08:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800bf0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d01d      	beq.n	800bf50 <USB_ActivateEndpoint+0x8f4>
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	4413      	add	r3, r2
 800bf1e:	881b      	ldrh	r3, [r3, #0]
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf2a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	009b      	lsls	r3, r3, #2
 800bf36:	441a      	add	r2, r3
 800bf38:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800bf3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf48:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bf4c:	b29b      	uxth	r3, r3
 800bf4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	78db      	ldrb	r3, [r3, #3]
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d024      	beq.n	800bfa2 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	4413      	add	r3, r2
 800bf62:	881b      	ldrh	r3, [r3, #0]
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf6e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800bf72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800bf76:	f083 0320 	eor.w	r3, r3, #32
 800bf7a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	441a      	add	r2, r3
 800bf88:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800bf8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	8013      	strh	r3, [r2, #0]
 800bfa0:	e01d      	b.n	800bfde <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	4413      	add	r3, r2
 800bfac:	881b      	ldrh	r3, [r3, #0]
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bfb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bfb8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	441a      	add	r2, r3
 800bfc6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800bfca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bfce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bfd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	4413      	add	r3, r2
 800bfe8:	881b      	ldrh	r3, [r3, #0]
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bff4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	441a      	add	r2, r3
 800c002:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c006:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c00a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c00e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c016:	b29b      	uxth	r3, r3
 800c018:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c01a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800c01e:	4618      	mov	r0, r3
 800c020:	379c      	adds	r7, #156	@ 0x9c
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr
 800c02a:	bf00      	nop

0800c02c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b08d      	sub	sp, #52	@ 0x34
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	7b1b      	ldrb	r3, [r3, #12]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f040 808e 	bne.w	800c15c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	785b      	ldrb	r3, [r3, #1]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d044      	beq.n	800c0d2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	4413      	add	r3, r2
 800c052:	881b      	ldrh	r3, [r3, #0]
 800c054:	81bb      	strh	r3, [r7, #12]
 800c056:	89bb      	ldrh	r3, [r7, #12]
 800c058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d01b      	beq.n	800c098 <USB_DeactivateEndpoint+0x6c>
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	4413      	add	r3, r2
 800c06a:	881b      	ldrh	r3, [r3, #0]
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c076:	817b      	strh	r3, [r7, #10]
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	441a      	add	r2, r3
 800c082:	897b      	ldrh	r3, [r7, #10]
 800c084:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c088:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c08c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c090:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c094:	b29b      	uxth	r3, r3
 800c096:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	4413      	add	r3, r2
 800c0a2:	881b      	ldrh	r3, [r3, #0]
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0ae:	813b      	strh	r3, [r7, #8]
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	441a      	add	r2, r3
 800c0ba:	893b      	ldrh	r3, [r7, #8]
 800c0bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	8013      	strh	r3, [r2, #0]
 800c0d0:	e192      	b.n	800c3f8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	4413      	add	r3, r2
 800c0dc:	881b      	ldrh	r3, [r3, #0]
 800c0de:	827b      	strh	r3, [r7, #18]
 800c0e0:	8a7b      	ldrh	r3, [r7, #18]
 800c0e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d01b      	beq.n	800c122 <USB_DeactivateEndpoint+0xf6>
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	4413      	add	r3, r2
 800c0f4:	881b      	ldrh	r3, [r3, #0]
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c100:	823b      	strh	r3, [r7, #16]
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	441a      	add	r2, r3
 800c10c:	8a3b      	ldrh	r3, [r7, #16]
 800c10e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c112:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c116:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c11a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c11e:	b29b      	uxth	r3, r3
 800c120:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	4413      	add	r3, r2
 800c12c:	881b      	ldrh	r3, [r3, #0]
 800c12e:	b29b      	uxth	r3, r3
 800c130:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c138:	81fb      	strh	r3, [r7, #14]
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	441a      	add	r2, r3
 800c144:	89fb      	ldrh	r3, [r7, #14]
 800c146:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c14a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c14e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c156:	b29b      	uxth	r3, r3
 800c158:	8013      	strh	r3, [r2, #0]
 800c15a:	e14d      	b.n	800c3f8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	785b      	ldrb	r3, [r3, #1]
 800c160:	2b00      	cmp	r3, #0
 800c162:	f040 80a5 	bne.w	800c2b0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	4413      	add	r3, r2
 800c170:	881b      	ldrh	r3, [r3, #0]
 800c172:	843b      	strh	r3, [r7, #32]
 800c174:	8c3b      	ldrh	r3, [r7, #32]
 800c176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d01b      	beq.n	800c1b6 <USB_DeactivateEndpoint+0x18a>
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	4413      	add	r3, r2
 800c188:	881b      	ldrh	r3, [r3, #0]
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c190:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c194:	83fb      	strh	r3, [r7, #30]
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	441a      	add	r2, r3
 800c1a0:	8bfb      	ldrh	r3, [r7, #30]
 800c1a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c1ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	4413      	add	r3, r2
 800c1c0:	881b      	ldrh	r3, [r3, #0]
 800c1c2:	83bb      	strh	r3, [r7, #28]
 800c1c4:	8bbb      	ldrh	r3, [r7, #28]
 800c1c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d01b      	beq.n	800c206 <USB_DeactivateEndpoint+0x1da>
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	4413      	add	r3, r2
 800c1d8:	881b      	ldrh	r3, [r3, #0]
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1e4:	837b      	strh	r3, [r7, #26]
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	441a      	add	r2, r3
 800c1f0:	8b7b      	ldrh	r3, [r7, #26]
 800c1f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c202:	b29b      	uxth	r3, r3
 800c204:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	4413      	add	r3, r2
 800c210:	881b      	ldrh	r3, [r3, #0]
 800c212:	b29b      	uxth	r3, r3
 800c214:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c21c:	833b      	strh	r3, [r7, #24]
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	441a      	add	r2, r3
 800c228:	8b3b      	ldrh	r3, [r7, #24]
 800c22a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c22e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c236:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	4413      	add	r3, r2
 800c248:	881b      	ldrh	r3, [r3, #0]
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c250:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c254:	82fb      	strh	r3, [r7, #22]
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	441a      	add	r2, r3
 800c260:	8afb      	ldrh	r3, [r7, #22]
 800c262:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c266:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c26a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c26e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c272:	b29b      	uxth	r3, r3
 800c274:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	4413      	add	r3, r2
 800c280:	881b      	ldrh	r3, [r3, #0]
 800c282:	b29b      	uxth	r3, r3
 800c284:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c288:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c28c:	82bb      	strh	r3, [r7, #20]
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	441a      	add	r2, r3
 800c298:	8abb      	ldrh	r3, [r7, #20]
 800c29a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c29e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	8013      	strh	r3, [r2, #0]
 800c2ae:	e0a3      	b.n	800c3f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	4413      	add	r3, r2
 800c2ba:	881b      	ldrh	r3, [r3, #0]
 800c2bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c2be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c2c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d01b      	beq.n	800c300 <USB_DeactivateEndpoint+0x2d4>
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	4413      	add	r3, r2
 800c2d2:	881b      	ldrh	r3, [r3, #0]
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2de:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	441a      	add	r2, r3
 800c2ea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c2ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c2f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	4413      	add	r3, r2
 800c30a:	881b      	ldrh	r3, [r3, #0]
 800c30c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800c30e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c314:	2b00      	cmp	r3, #0
 800c316:	d01b      	beq.n	800c350 <USB_DeactivateEndpoint+0x324>
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	009b      	lsls	r3, r3, #2
 800c320:	4413      	add	r3, r2
 800c322:	881b      	ldrh	r3, [r3, #0]
 800c324:	b29b      	uxth	r3, r3
 800c326:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c32a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c32e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	441a      	add	r2, r3
 800c33a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c33c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c340:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c344:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c348:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	4413      	add	r3, r2
 800c35a:	881b      	ldrh	r3, [r3, #0]
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c366:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	441a      	add	r2, r3
 800c372:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c374:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c378:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c37c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c384:	b29b      	uxth	r3, r3
 800c386:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	009b      	lsls	r3, r3, #2
 800c390:	4413      	add	r3, r2
 800c392:	881b      	ldrh	r3, [r3, #0]
 800c394:	b29b      	uxth	r3, r3
 800c396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c39a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c39e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	441a      	add	r2, r3
 800c3aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	4413      	add	r3, r2
 800c3ca:	881b      	ldrh	r3, [r3, #0]
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c3d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3d6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	009b      	lsls	r3, r3, #2
 800c3e0:	441a      	add	r2, r3
 800c3e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c3e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3f4:	b29b      	uxth	r3, r3
 800c3f6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c3f8:	2300      	movs	r3, #0
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3734      	adds	r7, #52	@ 0x34
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr

0800c406 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c406:	b580      	push	{r7, lr}
 800c408:	b0ac      	sub	sp, #176	@ 0xb0
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
 800c40e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	785b      	ldrb	r3, [r3, #1]
 800c414:	2b01      	cmp	r3, #1
 800c416:	f040 84ca 	bne.w	800cdae <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	699a      	ldr	r2, [r3, #24]
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	691b      	ldr	r3, [r3, #16]
 800c422:	429a      	cmp	r2, r3
 800c424:	d904      	bls.n	800c430 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	691b      	ldr	r3, [r3, #16]
 800c42a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c42e:	e003      	b.n	800c438 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	699b      	ldr	r3, [r3, #24]
 800c434:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	7b1b      	ldrb	r3, [r3, #12]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d122      	bne.n	800c486 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	6959      	ldr	r1, [r3, #20]
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	88da      	ldrh	r2, [r3, #6]
 800c448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 febd 	bl	800d1ce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	613b      	str	r3, [r7, #16]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c45e:	b29b      	uxth	r3, r3
 800c460:	461a      	mov	r2, r3
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	4413      	add	r3, r2
 800c466:	613b      	str	r3, [r7, #16]
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	00da      	lsls	r2, r3, #3
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	4413      	add	r3, r2
 800c472:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c476:	60fb      	str	r3, [r7, #12]
 800c478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c47c:	b29a      	uxth	r2, r3
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	801a      	strh	r2, [r3, #0]
 800c482:	f000 bc6f 	b.w	800cd64 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	78db      	ldrb	r3, [r3, #3]
 800c48a:	2b02      	cmp	r3, #2
 800c48c:	f040 831e 	bne.w	800cacc <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	6a1a      	ldr	r2, [r3, #32]
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	691b      	ldr	r3, [r3, #16]
 800c498:	429a      	cmp	r2, r3
 800c49a:	f240 82cf 	bls.w	800ca3c <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	4413      	add	r3, r2
 800c4a8:	881b      	ldrh	r3, [r3, #0]
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4b4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	441a      	add	r2, r3
 800c4c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c4c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4ce:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c4d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	6a1a      	ldr	r2, [r3, #32]
 800c4de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4e2:	1ad2      	subs	r2, r2, r3
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	4413      	add	r3, r2
 800c4f2:	881b      	ldrh	r3, [r3, #0]
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f000 814f 	beq.w	800c79e <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	633b      	str	r3, [r7, #48]	@ 0x30
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	785b      	ldrb	r3, [r3, #1]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d16b      	bne.n	800c5e4 <USB_EPStartXfer+0x1de>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c516:	b29b      	uxth	r3, r3
 800c518:	461a      	mov	r2, r3
 800c51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c51c:	4413      	add	r3, r2
 800c51e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	00da      	lsls	r2, r3, #3
 800c526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c528:	4413      	add	r3, r2
 800c52a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c52e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c532:	881b      	ldrh	r3, [r3, #0]
 800c534:	b29b      	uxth	r3, r3
 800c536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c53a:	b29a      	uxth	r2, r3
 800c53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c53e:	801a      	strh	r2, [r3, #0]
 800c540:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c544:	2b00      	cmp	r3, #0
 800c546:	d10a      	bne.n	800c55e <USB_EPStartXfer+0x158>
 800c548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c54a:	881b      	ldrh	r3, [r3, #0]
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c556:	b29a      	uxth	r2, r3
 800c558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c55a:	801a      	strh	r2, [r3, #0]
 800c55c:	e05b      	b.n	800c616 <USB_EPStartXfer+0x210>
 800c55e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c562:	2b3e      	cmp	r3, #62	@ 0x3e
 800c564:	d81c      	bhi.n	800c5a0 <USB_EPStartXfer+0x19a>
 800c566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c56a:	085b      	lsrs	r3, r3, #1
 800c56c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c574:	f003 0301 	and.w	r3, r3, #1
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d004      	beq.n	800c586 <USB_EPStartXfer+0x180>
 800c57c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c580:	3301      	adds	r3, #1
 800c582:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c588:	881b      	ldrh	r3, [r3, #0]
 800c58a:	b29a      	uxth	r2, r3
 800c58c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c590:	b29b      	uxth	r3, r3
 800c592:	029b      	lsls	r3, r3, #10
 800c594:	b29b      	uxth	r3, r3
 800c596:	4313      	orrs	r3, r2
 800c598:	b29a      	uxth	r2, r3
 800c59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59c:	801a      	strh	r2, [r3, #0]
 800c59e:	e03a      	b.n	800c616 <USB_EPStartXfer+0x210>
 800c5a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5a4:	095b      	lsrs	r3, r3, #5
 800c5a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c5aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5ae:	f003 031f 	and.w	r3, r3, #31
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d104      	bne.n	800c5c0 <USB_EPStartXfer+0x1ba>
 800c5b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c5ba:	3b01      	subs	r3, #1
 800c5bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c2:	881b      	ldrh	r3, [r3, #0]
 800c5c4:	b29a      	uxth	r2, r3
 800c5c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	029b      	lsls	r3, r3, #10
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5dc:	b29a      	uxth	r2, r3
 800c5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e0:	801a      	strh	r2, [r3, #0]
 800c5e2:	e018      	b.n	800c616 <USB_EPStartXfer+0x210>
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	785b      	ldrb	r3, [r3, #1]
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	d114      	bne.n	800c616 <USB_EPStartXfer+0x210>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5f8:	4413      	add	r3, r2
 800c5fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	00da      	lsls	r2, r3, #3
 800c602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c604:	4413      	add	r3, r2
 800c606:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c60a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c60c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c610:	b29a      	uxth	r2, r3
 800c612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c614:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	895b      	ldrh	r3, [r3, #10]
 800c61a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	6959      	ldr	r1, [r3, #20]
 800c622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c626:	b29b      	uxth	r3, r3
 800c628:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 fdce 	bl	800d1ce <USB_WritePMA>
            ep->xfer_buff += len;
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	695a      	ldr	r2, [r3, #20]
 800c636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c63a:	441a      	add	r2, r3
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	6a1a      	ldr	r2, [r3, #32]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	691b      	ldr	r3, [r3, #16]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d907      	bls.n	800c65c <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	6a1a      	ldr	r2, [r3, #32]
 800c650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c654:	1ad2      	subs	r2, r2, r3
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	621a      	str	r2, [r3, #32]
 800c65a:	e006      	b.n	800c66a <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	6a1b      	ldr	r3, [r3, #32]
 800c660:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	2200      	movs	r2, #0
 800c668:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	785b      	ldrb	r3, [r3, #1]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d16b      	bne.n	800c74a <USB_EPStartXfer+0x344>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	61bb      	str	r3, [r7, #24]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	461a      	mov	r2, r3
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	4413      	add	r3, r2
 800c684:	61bb      	str	r3, [r7, #24]
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	00da      	lsls	r2, r3, #3
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	4413      	add	r3, r2
 800c690:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c694:	617b      	str	r3, [r7, #20]
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	881b      	ldrh	r3, [r3, #0]
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c6a0:	b29a      	uxth	r2, r3
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	801a      	strh	r2, [r3, #0]
 800c6a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d10a      	bne.n	800c6c4 <USB_EPStartXfer+0x2be>
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	881b      	ldrh	r3, [r3, #0]
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6bc:	b29a      	uxth	r2, r3
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	801a      	strh	r2, [r3, #0]
 800c6c2:	e05d      	b.n	800c780 <USB_EPStartXfer+0x37a>
 800c6c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c6c8:	2b3e      	cmp	r3, #62	@ 0x3e
 800c6ca:	d81c      	bhi.n	800c706 <USB_EPStartXfer+0x300>
 800c6cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c6d0:	085b      	lsrs	r3, r3, #1
 800c6d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c6d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c6da:	f003 0301 	and.w	r3, r3, #1
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d004      	beq.n	800c6ec <USB_EPStartXfer+0x2e6>
 800c6e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	881b      	ldrh	r3, [r3, #0]
 800c6f0:	b29a      	uxth	r2, r3
 800c6f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c6f6:	b29b      	uxth	r3, r3
 800c6f8:	029b      	lsls	r3, r3, #10
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	801a      	strh	r2, [r3, #0]
 800c704:	e03c      	b.n	800c780 <USB_EPStartXfer+0x37a>
 800c706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c70a:	095b      	lsrs	r3, r3, #5
 800c70c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c710:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c714:	f003 031f 	and.w	r3, r3, #31
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d104      	bne.n	800c726 <USB_EPStartXfer+0x320>
 800c71c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c720:	3b01      	subs	r3, #1
 800c722:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	881b      	ldrh	r3, [r3, #0]
 800c72a:	b29a      	uxth	r2, r3
 800c72c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c730:	b29b      	uxth	r3, r3
 800c732:	029b      	lsls	r3, r3, #10
 800c734:	b29b      	uxth	r3, r3
 800c736:	4313      	orrs	r3, r2
 800c738:	b29b      	uxth	r3, r3
 800c73a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c73e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c742:	b29a      	uxth	r2, r3
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	801a      	strh	r2, [r3, #0]
 800c748:	e01a      	b.n	800c780 <USB_EPStartXfer+0x37a>
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	785b      	ldrb	r3, [r3, #1]
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d116      	bne.n	800c780 <USB_EPStartXfer+0x37a>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	623b      	str	r3, [r7, #32]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	461a      	mov	r2, r3
 800c760:	6a3b      	ldr	r3, [r7, #32]
 800c762:	4413      	add	r3, r2
 800c764:	623b      	str	r3, [r7, #32]
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	00da      	lsls	r2, r3, #3
 800c76c:	6a3b      	ldr	r3, [r7, #32]
 800c76e:	4413      	add	r3, r2
 800c770:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c774:	61fb      	str	r3, [r7, #28]
 800c776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	69fb      	ldr	r3, [r7, #28]
 800c77e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	891b      	ldrh	r3, [r3, #8]
 800c784:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	6959      	ldr	r1, [r3, #20]
 800c78c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c790:	b29b      	uxth	r3, r3
 800c792:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 fd19 	bl	800d1ce <USB_WritePMA>
 800c79c:	e2e2      	b.n	800cd64 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	785b      	ldrb	r3, [r3, #1]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d16b      	bne.n	800c87e <USB_EPStartXfer+0x478>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7b6:	4413      	add	r3, r2
 800c7b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	00da      	lsls	r2, r3, #3
 800c7c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7c2:	4413      	add	r3, r2
 800c7c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c7c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7cc:	881b      	ldrh	r3, [r3, #0]
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7d8:	801a      	strh	r2, [r3, #0]
 800c7da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d10a      	bne.n	800c7f8 <USB_EPStartXfer+0x3f2>
 800c7e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7e4:	881b      	ldrh	r3, [r3, #0]
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7f0:	b29a      	uxth	r2, r3
 800c7f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7f4:	801a      	strh	r2, [r3, #0]
 800c7f6:	e05d      	b.n	800c8b4 <USB_EPStartXfer+0x4ae>
 800c7f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7fc:	2b3e      	cmp	r3, #62	@ 0x3e
 800c7fe:	d81c      	bhi.n	800c83a <USB_EPStartXfer+0x434>
 800c800:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c804:	085b      	lsrs	r3, r3, #1
 800c806:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c80a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c80e:	f003 0301 	and.w	r3, r3, #1
 800c812:	2b00      	cmp	r3, #0
 800c814:	d004      	beq.n	800c820 <USB_EPStartXfer+0x41a>
 800c816:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c81a:	3301      	adds	r3, #1
 800c81c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c822:	881b      	ldrh	r3, [r3, #0]
 800c824:	b29a      	uxth	r2, r3
 800c826:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	029b      	lsls	r3, r3, #10
 800c82e:	b29b      	uxth	r3, r3
 800c830:	4313      	orrs	r3, r2
 800c832:	b29a      	uxth	r2, r3
 800c834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c836:	801a      	strh	r2, [r3, #0]
 800c838:	e03c      	b.n	800c8b4 <USB_EPStartXfer+0x4ae>
 800c83a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c83e:	095b      	lsrs	r3, r3, #5
 800c840:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c844:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c848:	f003 031f 	and.w	r3, r3, #31
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d104      	bne.n	800c85a <USB_EPStartXfer+0x454>
 800c850:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c854:	3b01      	subs	r3, #1
 800c856:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c85a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c85c:	881b      	ldrh	r3, [r3, #0]
 800c85e:	b29a      	uxth	r2, r3
 800c860:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c864:	b29b      	uxth	r3, r3
 800c866:	029b      	lsls	r3, r3, #10
 800c868:	b29b      	uxth	r3, r3
 800c86a:	4313      	orrs	r3, r2
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c876:	b29a      	uxth	r2, r3
 800c878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c87a:	801a      	strh	r2, [r3, #0]
 800c87c:	e01a      	b.n	800c8b4 <USB_EPStartXfer+0x4ae>
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	785b      	ldrb	r3, [r3, #1]
 800c882:	2b01      	cmp	r3, #1
 800c884:	d116      	bne.n	800c8b4 <USB_EPStartXfer+0x4ae>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	653b      	str	r3, [r7, #80]	@ 0x50
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c890:	b29b      	uxth	r3, r3
 800c892:	461a      	mov	r2, r3
 800c894:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c896:	4413      	add	r3, r2
 800c898:	653b      	str	r3, [r7, #80]	@ 0x50
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	00da      	lsls	r2, r3, #3
 800c8a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8a2:	4413      	add	r3, r2
 800c8a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c8a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c8aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8ae:	b29a      	uxth	r2, r3
 800c8b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	891b      	ldrh	r3, [r3, #8]
 800c8b8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	6959      	ldr	r1, [r3, #20]
 800c8c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f000 fc7f 	bl	800d1ce <USB_WritePMA>
            ep->xfer_buff += len;
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	695a      	ldr	r2, [r3, #20]
 800c8d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8d8:	441a      	add	r2, r3
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	6a1a      	ldr	r2, [r3, #32]
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	691b      	ldr	r3, [r3, #16]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d907      	bls.n	800c8fa <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	6a1a      	ldr	r2, [r3, #32]
 800c8ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8f2:	1ad2      	subs	r2, r2, r3
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	621a      	str	r2, [r3, #32]
 800c8f8:	e006      	b.n	800c908 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	6a1b      	ldr	r3, [r3, #32]
 800c8fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	2200      	movs	r2, #0
 800c906:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	785b      	ldrb	r3, [r3, #1]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d16b      	bne.n	800c9ec <USB_EPStartXfer+0x5e6>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c91e:	b29b      	uxth	r3, r3
 800c920:	461a      	mov	r2, r3
 800c922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c924:	4413      	add	r3, r2
 800c926:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	00da      	lsls	r2, r3, #3
 800c92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c930:	4413      	add	r3, r2
 800c932:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c936:	637b      	str	r3, [r7, #52]	@ 0x34
 800c938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c93a:	881b      	ldrh	r3, [r3, #0]
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c942:	b29a      	uxth	r2, r3
 800c944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c946:	801a      	strh	r2, [r3, #0]
 800c948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d10a      	bne.n	800c966 <USB_EPStartXfer+0x560>
 800c950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c952:	881b      	ldrh	r3, [r3, #0]
 800c954:	b29b      	uxth	r3, r3
 800c956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c95a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c95e:	b29a      	uxth	r2, r3
 800c960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c962:	801a      	strh	r2, [r3, #0]
 800c964:	e05b      	b.n	800ca1e <USB_EPStartXfer+0x618>
 800c966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c96a:	2b3e      	cmp	r3, #62	@ 0x3e
 800c96c:	d81c      	bhi.n	800c9a8 <USB_EPStartXfer+0x5a2>
 800c96e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c972:	085b      	lsrs	r3, r3, #1
 800c974:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c97c:	f003 0301 	and.w	r3, r3, #1
 800c980:	2b00      	cmp	r3, #0
 800c982:	d004      	beq.n	800c98e <USB_EPStartXfer+0x588>
 800c984:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c988:	3301      	adds	r3, #1
 800c98a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c98e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c990:	881b      	ldrh	r3, [r3, #0]
 800c992:	b29a      	uxth	r2, r3
 800c994:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c998:	b29b      	uxth	r3, r3
 800c99a:	029b      	lsls	r3, r3, #10
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	b29a      	uxth	r2, r3
 800c9a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9a4:	801a      	strh	r2, [r3, #0]
 800c9a6:	e03a      	b.n	800ca1e <USB_EPStartXfer+0x618>
 800c9a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9ac:	095b      	lsrs	r3, r3, #5
 800c9ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c9b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9b6:	f003 031f 	and.w	r3, r3, #31
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d104      	bne.n	800c9c8 <USB_EPStartXfer+0x5c2>
 800c9be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c9c2:	3b01      	subs	r3, #1
 800c9c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c9c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9ca:	881b      	ldrh	r3, [r3, #0]
 800c9cc:	b29a      	uxth	r2, r3
 800c9ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	029b      	lsls	r3, r3, #10
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	b29b      	uxth	r3, r3
 800c9dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9e8:	801a      	strh	r2, [r3, #0]
 800c9ea:	e018      	b.n	800ca1e <USB_EPStartXfer+0x618>
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	785b      	ldrb	r3, [r3, #1]
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d114      	bne.n	800ca1e <USB_EPStartXfer+0x618>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca00:	4413      	add	r3, r2
 800ca02:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	00da      	lsls	r2, r3, #3
 800ca0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca0c:	4413      	add	r3, r2
 800ca0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ca12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca18:	b29a      	uxth	r2, r3
 800ca1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	895b      	ldrh	r3, [r3, #10]
 800ca22:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	6959      	ldr	r1, [r3, #20]
 800ca2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 fbca 	bl	800d1ce <USB_WritePMA>
 800ca3a:	e193      	b.n	800cd64 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	6a1b      	ldr	r3, [r3, #32]
 800ca40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	4413      	add	r3, r2
 800ca4e:	881b      	ldrh	r3, [r3, #0]
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ca56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca5a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	441a      	add	r2, r3
 800ca68:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800ca6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca90:	4413      	add	r3, r2
 800ca92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	00da      	lsls	r2, r3, #3
 800ca9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca9c:	4413      	add	r3, r2
 800ca9e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800caa2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800caa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800caa8:	b29a      	uxth	r2, r3
 800caaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800caac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	891b      	ldrh	r3, [r3, #8]
 800cab2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	6959      	ldr	r1, [r3, #20]
 800caba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 fb82 	bl	800d1ce <USB_WritePMA>
 800caca:	e14b      	b.n	800cd64 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	6a1a      	ldr	r2, [r3, #32]
 800cad0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cad4:	1ad2      	subs	r2, r2, r3
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	4413      	add	r3, r2
 800cae4:	881b      	ldrh	r3, [r3, #0]
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800caec:	2b00      	cmp	r3, #0
 800caee:	f000 809a 	beq.w	800cc26 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	673b      	str	r3, [r7, #112]	@ 0x70
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	785b      	ldrb	r3, [r3, #1]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d16b      	bne.n	800cbd6 <USB_EPStartXfer+0x7d0>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb0e:	4413      	add	r3, r2
 800cb10:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	00da      	lsls	r2, r3, #3
 800cb18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb1a:	4413      	add	r3, r2
 800cb1c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cb20:	667b      	str	r3, [r7, #100]	@ 0x64
 800cb22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb24:	881b      	ldrh	r3, [r3, #0]
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb2c:	b29a      	uxth	r2, r3
 800cb2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb30:	801a      	strh	r2, [r3, #0]
 800cb32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d10a      	bne.n	800cb50 <USB_EPStartXfer+0x74a>
 800cb3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb3c:	881b      	ldrh	r3, [r3, #0]
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb48:	b29a      	uxth	r2, r3
 800cb4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb4c:	801a      	strh	r2, [r3, #0]
 800cb4e:	e05b      	b.n	800cc08 <USB_EPStartXfer+0x802>
 800cb50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb54:	2b3e      	cmp	r3, #62	@ 0x3e
 800cb56:	d81c      	bhi.n	800cb92 <USB_EPStartXfer+0x78c>
 800cb58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb5c:	085b      	lsrs	r3, r3, #1
 800cb5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cb62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb66:	f003 0301 	and.w	r3, r3, #1
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d004      	beq.n	800cb78 <USB_EPStartXfer+0x772>
 800cb6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cb72:	3301      	adds	r3, #1
 800cb74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cb78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb7a:	881b      	ldrh	r3, [r3, #0]
 800cb7c:	b29a      	uxth	r2, r3
 800cb7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	029b      	lsls	r3, r3, #10
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	b29a      	uxth	r2, r3
 800cb8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb8e:	801a      	strh	r2, [r3, #0]
 800cb90:	e03a      	b.n	800cc08 <USB_EPStartXfer+0x802>
 800cb92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb96:	095b      	lsrs	r3, r3, #5
 800cb98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cb9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cba0:	f003 031f 	and.w	r3, r3, #31
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d104      	bne.n	800cbb2 <USB_EPStartXfer+0x7ac>
 800cba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cbac:	3b01      	subs	r3, #1
 800cbae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cbb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cbb4:	881b      	ldrh	r3, [r3, #0]
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	029b      	lsls	r3, r3, #10
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	b29b      	uxth	r3, r3
 800cbc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbce:	b29a      	uxth	r2, r3
 800cbd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cbd2:	801a      	strh	r2, [r3, #0]
 800cbd4:	e018      	b.n	800cc08 <USB_EPStartXfer+0x802>
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	785b      	ldrb	r3, [r3, #1]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d114      	bne.n	800cc08 <USB_EPStartXfer+0x802>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cbe4:	b29b      	uxth	r3, r3
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cbea:	4413      	add	r3, r2
 800cbec:	673b      	str	r3, [r7, #112]	@ 0x70
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	00da      	lsls	r2, r3, #3
 800cbf4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cbf6:	4413      	add	r3, r2
 800cbf8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cbfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cbfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc02:	b29a      	uxth	r2, r3
 800cc04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	895b      	ldrh	r3, [r3, #10]
 800cc0c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	6959      	ldr	r1, [r3, #20]
 800cc14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 fad5 	bl	800d1ce <USB_WritePMA>
 800cc24:	e09e      	b.n	800cd64 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	785b      	ldrb	r3, [r3, #1]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d16b      	bne.n	800cd06 <USB_EPStartXfer+0x900>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cc3e:	4413      	add	r3, r2
 800cc40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	00da      	lsls	r2, r3, #3
 800cc48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cc4a:	4413      	add	r3, r2
 800cc4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cc50:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cc52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cc54:	881b      	ldrh	r3, [r3, #0]
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cc60:	801a      	strh	r2, [r3, #0]
 800cc62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d10a      	bne.n	800cc80 <USB_EPStartXfer+0x87a>
 800cc6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cc6c:	881b      	ldrh	r3, [r3, #0]
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc78:	b29a      	uxth	r2, r3
 800cc7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cc7c:	801a      	strh	r2, [r3, #0]
 800cc7e:	e063      	b.n	800cd48 <USB_EPStartXfer+0x942>
 800cc80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc84:	2b3e      	cmp	r3, #62	@ 0x3e
 800cc86:	d81c      	bhi.n	800ccc2 <USB_EPStartXfer+0x8bc>
 800cc88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc8c:	085b      	lsrs	r3, r3, #1
 800cc8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cc92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc96:	f003 0301 	and.w	r3, r3, #1
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d004      	beq.n	800cca8 <USB_EPStartXfer+0x8a2>
 800cc9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cca2:	3301      	adds	r3, #1
 800cca4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cca8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ccaa:	881b      	ldrh	r3, [r3, #0]
 800ccac:	b29a      	uxth	r2, r3
 800ccae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	029b      	lsls	r3, r3, #10
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	b29a      	uxth	r2, r3
 800ccbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ccbe:	801a      	strh	r2, [r3, #0]
 800ccc0:	e042      	b.n	800cd48 <USB_EPStartXfer+0x942>
 800ccc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccc6:	095b      	lsrs	r3, r3, #5
 800ccc8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cccc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccd0:	f003 031f 	and.w	r3, r3, #31
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d104      	bne.n	800cce2 <USB_EPStartXfer+0x8dc>
 800ccd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ccdc:	3b01      	subs	r3, #1
 800ccde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cce2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cce4:	881b      	ldrh	r3, [r3, #0]
 800cce6:	b29a      	uxth	r2, r3
 800cce8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	029b      	lsls	r3, r3, #10
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccfe:	b29a      	uxth	r2, r3
 800cd00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd02:	801a      	strh	r2, [r3, #0]
 800cd04:	e020      	b.n	800cd48 <USB_EPStartXfer+0x942>
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	785b      	ldrb	r3, [r3, #1]
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d11c      	bne.n	800cd48 <USB_EPStartXfer+0x942>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cd22:	4413      	add	r3, r2
 800cd24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	00da      	lsls	r2, r3, #3
 800cd2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cd32:	4413      	add	r3, r2
 800cd34:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cd3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd40:	b29a      	uxth	r2, r3
 800cd42:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cd46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	891b      	ldrh	r3, [r3, #8]
 800cd4c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	6959      	ldr	r1, [r3, #20]
 800cd54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 fa35 	bl	800d1ce <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	009b      	lsls	r3, r3, #2
 800cd6c:	4413      	add	r3, r2
 800cd6e:	881b      	ldrh	r3, [r3, #0]
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd7a:	817b      	strh	r3, [r7, #10]
 800cd7c:	897b      	ldrh	r3, [r7, #10]
 800cd7e:	f083 0310 	eor.w	r3, r3, #16
 800cd82:	817b      	strh	r3, [r7, #10]
 800cd84:	897b      	ldrh	r3, [r7, #10]
 800cd86:	f083 0320 	eor.w	r3, r3, #32
 800cd8a:	817b      	strh	r3, [r7, #10]
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	441a      	add	r2, r3
 800cd96:	897b      	ldrh	r3, [r7, #10]
 800cd98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cda0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cda4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	8013      	strh	r3, [r2, #0]
 800cdac:	e0d5      	b.n	800cf5a <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	7b1b      	ldrb	r3, [r3, #12]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d156      	bne.n	800ce64 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	699b      	ldr	r3, [r3, #24]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d122      	bne.n	800ce04 <USB_EPStartXfer+0x9fe>
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	78db      	ldrb	r3, [r3, #3]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d11e      	bne.n	800ce04 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	4413      	add	r3, r2
 800cdd0:	881b      	ldrh	r3, [r3, #0]
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cdd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cddc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	441a      	add	r2, r3
 800cdea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800cdee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cdf6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800cdfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	8013      	strh	r3, [r2, #0]
 800ce02:	e01d      	b.n	800ce40 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	781b      	ldrb	r3, [r3, #0]
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	4413      	add	r3, r2
 800ce0e:	881b      	ldrh	r3, [r3, #0]
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ce16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce1a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	441a      	add	r2, r3
 800ce28:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800ce2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	699a      	ldr	r2, [r3, #24]
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	691b      	ldr	r3, [r3, #16]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d907      	bls.n	800ce5c <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	699a      	ldr	r2, [r3, #24]
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	691b      	ldr	r3, [r3, #16]
 800ce54:	1ad2      	subs	r2, r2, r3
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	619a      	str	r2, [r3, #24]
 800ce5a:	e054      	b.n	800cf06 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	619a      	str	r2, [r3, #24]
 800ce62:	e050      	b.n	800cf06 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	78db      	ldrb	r3, [r3, #3]
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	d142      	bne.n	800cef2 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	69db      	ldr	r3, [r3, #28]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d048      	beq.n	800cf06 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	781b      	ldrb	r3, [r3, #0]
 800ce7a:	009b      	lsls	r3, r3, #2
 800ce7c:	4413      	add	r3, r2
 800ce7e:	881b      	ldrh	r3, [r3, #0]
 800ce80:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ce84:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ce88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d005      	beq.n	800ce9c <USB_EPStartXfer+0xa96>
 800ce90:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ce94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d10b      	bne.n	800ceb4 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ce9c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800cea0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d12e      	bne.n	800cf06 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cea8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ceac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d128      	bne.n	800cf06 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	4413      	add	r3, r2
 800cebe:	881b      	ldrh	r3, [r3, #0]
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ceca:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	009b      	lsls	r3, r3, #2
 800ced6:	441a      	add	r2, r3
 800ced8:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800cedc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cee0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cee8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	8013      	strh	r3, [r2, #0]
 800cef0:	e009      	b.n	800cf06 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	78db      	ldrb	r3, [r3, #3]
 800cef6:	2b01      	cmp	r3, #1
 800cef8:	d103      	bne.n	800cf02 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	2200      	movs	r2, #0
 800cefe:	619a      	str	r2, [r3, #24]
 800cf00:	e001      	b.n	800cf06 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	e02a      	b.n	800cf5c <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	4413      	add	r3, r2
 800cf10:	881b      	ldrh	r3, [r3, #0]
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cf18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf1c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cf20:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cf24:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cf28:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cf2c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cf30:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cf34:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	441a      	add	r2, r3
 800cf42:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cf46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cf5a:	2300      	movs	r3, #0
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	37b0      	adds	r7, #176	@ 0xb0
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b085      	sub	sp, #20
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	785b      	ldrb	r3, [r3, #1]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d020      	beq.n	800cfb8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	009b      	lsls	r3, r3, #2
 800cf7e:	4413      	add	r3, r2
 800cf80:	881b      	ldrh	r3, [r3, #0]
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf8c:	81bb      	strh	r3, [r7, #12]
 800cf8e:	89bb      	ldrh	r3, [r7, #12]
 800cf90:	f083 0310 	eor.w	r3, r3, #16
 800cf94:	81bb      	strh	r3, [r7, #12]
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	009b      	lsls	r3, r3, #2
 800cf9e:	441a      	add	r2, r3
 800cfa0:	89bb      	ldrh	r3, [r7, #12]
 800cfa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cfa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cfaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	8013      	strh	r3, [r2, #0]
 800cfb6:	e01f      	b.n	800cff8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	4413      	add	r3, r2
 800cfc2:	881b      	ldrh	r3, [r3, #0]
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cfca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfce:	81fb      	strh	r3, [r7, #14]
 800cfd0:	89fb      	ldrh	r3, [r7, #14]
 800cfd2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cfd6:	81fb      	strh	r3, [r7, #14]
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	781b      	ldrb	r3, [r3, #0]
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	441a      	add	r2, r3
 800cfe2:	89fb      	ldrh	r3, [r7, #14]
 800cfe4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cfe8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cfec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cff4:	b29b      	uxth	r3, r3
 800cff6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cff8:	2300      	movs	r3, #0
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3714      	adds	r7, #20
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr

0800d006 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d006:	b480      	push	{r7}
 800d008:	b087      	sub	sp, #28
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
 800d00e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	785b      	ldrb	r3, [r3, #1]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d04c      	beq.n	800d0b2 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	4413      	add	r3, r2
 800d022:	881b      	ldrh	r3, [r3, #0]
 800d024:	823b      	strh	r3, [r7, #16]
 800d026:	8a3b      	ldrh	r3, [r7, #16]
 800d028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d01b      	beq.n	800d068 <USB_EPClearStall+0x62>
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	009b      	lsls	r3, r3, #2
 800d038:	4413      	add	r3, r2
 800d03a:	881b      	ldrh	r3, [r3, #0]
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d046:	81fb      	strh	r3, [r7, #14]
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	009b      	lsls	r3, r3, #2
 800d050:	441a      	add	r2, r3
 800d052:	89fb      	ldrh	r3, [r7, #14]
 800d054:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d058:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d05c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d060:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d064:	b29b      	uxth	r3, r3
 800d066:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	78db      	ldrb	r3, [r3, #3]
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d06c      	beq.n	800d14a <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	4413      	add	r3, r2
 800d07a:	881b      	ldrh	r3, [r3, #0]
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d082:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d086:	81bb      	strh	r3, [r7, #12]
 800d088:	89bb      	ldrh	r3, [r7, #12]
 800d08a:	f083 0320 	eor.w	r3, r3, #32
 800d08e:	81bb      	strh	r3, [r7, #12]
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	009b      	lsls	r3, r3, #2
 800d098:	441a      	add	r2, r3
 800d09a:	89bb      	ldrh	r3, [r7, #12]
 800d09c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	8013      	strh	r3, [r2, #0]
 800d0b0:	e04b      	b.n	800d14a <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d0b2:	687a      	ldr	r2, [r7, #4]
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	4413      	add	r3, r2
 800d0bc:	881b      	ldrh	r3, [r3, #0]
 800d0be:	82fb      	strh	r3, [r7, #22]
 800d0c0:	8afb      	ldrh	r3, [r7, #22]
 800d0c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d01b      	beq.n	800d102 <USB_EPClearStall+0xfc>
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	009b      	lsls	r3, r3, #2
 800d0d2:	4413      	add	r3, r2
 800d0d4:	881b      	ldrh	r3, [r3, #0]
 800d0d6:	b29b      	uxth	r3, r3
 800d0d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d0dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0e0:	82bb      	strh	r3, [r7, #20]
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	441a      	add	r2, r3
 800d0ec:	8abb      	ldrh	r3, [r7, #20]
 800d0ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d0fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	4413      	add	r3, r2
 800d10c:	881b      	ldrh	r3, [r3, #0]
 800d10e:	b29b      	uxth	r3, r3
 800d110:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d114:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d118:	827b      	strh	r3, [r7, #18]
 800d11a:	8a7b      	ldrh	r3, [r7, #18]
 800d11c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d120:	827b      	strh	r3, [r7, #18]
 800d122:	8a7b      	ldrh	r3, [r7, #18]
 800d124:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d128:	827b      	strh	r3, [r7, #18]
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	009b      	lsls	r3, r3, #2
 800d132:	441a      	add	r2, r3
 800d134:	8a7b      	ldrh	r3, [r7, #18]
 800d136:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d13a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d13e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d146:	b29b      	uxth	r3, r3
 800d148:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	371c      	adds	r7, #28
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr

0800d158 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d158:	b480      	push	{r7}
 800d15a:	b083      	sub	sp, #12
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	460b      	mov	r3, r1
 800d162:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d164:	78fb      	ldrb	r3, [r7, #3]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d103      	bne.n	800d172 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2280      	movs	r2, #128	@ 0x80
 800d16e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d172:	2300      	movs	r3, #0
}
 800d174:	4618      	mov	r0, r3
 800d176:	370c      	adds	r7, #12
 800d178:	46bd      	mov	sp, r7
 800d17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17e:	4770      	bx	lr

0800d180 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d180:	b480      	push	{r7}
 800d182:	b083      	sub	sp, #12
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d18e:	b29b      	uxth	r3, r3
 800d190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d198:	b29a      	uxth	r2, r3
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d1a0:	2300      	movs	r3, #0
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	370c      	adds	r7, #12
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr

0800d1ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800d1ae:	b480      	push	{r7}
 800d1b0:	b085      	sub	sp, #20
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3714      	adds	r7, #20
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr

0800d1ce <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d1ce:	b480      	push	{r7}
 800d1d0:	b08b      	sub	sp, #44	@ 0x2c
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	60f8      	str	r0, [r7, #12]
 800d1d6:	60b9      	str	r1, [r7, #8]
 800d1d8:	4611      	mov	r1, r2
 800d1da:	461a      	mov	r2, r3
 800d1dc:	460b      	mov	r3, r1
 800d1de:	80fb      	strh	r3, [r7, #6]
 800d1e0:	4613      	mov	r3, r2
 800d1e2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d1e4:	88bb      	ldrh	r3, [r7, #4]
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	085b      	lsrs	r3, r3, #1
 800d1ea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d1f4:	88fa      	ldrh	r2, [r7, #6]
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	4413      	add	r3, r2
 800d1fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d1fe:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d200:	69bb      	ldr	r3, [r7, #24]
 800d202:	627b      	str	r3, [r7, #36]	@ 0x24
 800d204:	e01b      	b.n	800d23e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800d206:	69fb      	ldr	r3, [r7, #28]
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	3301      	adds	r3, #1
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	021b      	lsls	r3, r3, #8
 800d214:	b21a      	sxth	r2, r3
 800d216:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d21a:	4313      	orrs	r3, r2
 800d21c:	b21b      	sxth	r3, r3
 800d21e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d220:	6a3b      	ldr	r3, [r7, #32]
 800d222:	8a7a      	ldrh	r2, [r7, #18]
 800d224:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d226:	6a3b      	ldr	r3, [r7, #32]
 800d228:	3302      	adds	r3, #2
 800d22a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d22c:	69fb      	ldr	r3, [r7, #28]
 800d22e:	3301      	adds	r3, #1
 800d230:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d232:	69fb      	ldr	r3, [r7, #28]
 800d234:	3301      	adds	r3, #1
 800d236:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d23a:	3b01      	subs	r3, #1
 800d23c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d240:	2b00      	cmp	r3, #0
 800d242:	d1e0      	bne.n	800d206 <USB_WritePMA+0x38>
  }
}
 800d244:	bf00      	nop
 800d246:	bf00      	nop
 800d248:	372c      	adds	r7, #44	@ 0x2c
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr

0800d252 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d252:	b480      	push	{r7}
 800d254:	b08b      	sub	sp, #44	@ 0x2c
 800d256:	af00      	add	r7, sp, #0
 800d258:	60f8      	str	r0, [r7, #12]
 800d25a:	60b9      	str	r1, [r7, #8]
 800d25c:	4611      	mov	r1, r2
 800d25e:	461a      	mov	r2, r3
 800d260:	460b      	mov	r3, r1
 800d262:	80fb      	strh	r3, [r7, #6]
 800d264:	4613      	mov	r3, r2
 800d266:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d268:	88bb      	ldrh	r3, [r7, #4]
 800d26a:	085b      	lsrs	r3, r3, #1
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d278:	88fa      	ldrh	r2, [r7, #6]
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	4413      	add	r3, r2
 800d27e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d282:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d284:	69bb      	ldr	r3, [r7, #24]
 800d286:	627b      	str	r3, [r7, #36]	@ 0x24
 800d288:	e018      	b.n	800d2bc <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d28a:	6a3b      	ldr	r3, [r7, #32]
 800d28c:	881b      	ldrh	r3, [r3, #0]
 800d28e:	b29b      	uxth	r3, r3
 800d290:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d292:	6a3b      	ldr	r3, [r7, #32]
 800d294:	3302      	adds	r3, #2
 800d296:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	b2da      	uxtb	r2, r3
 800d29c:	69fb      	ldr	r3, [r7, #28]
 800d29e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	0a1b      	lsrs	r3, r3, #8
 800d2aa:	b2da      	uxtb	r2, r3
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b8:	3b01      	subs	r3, #1
 800d2ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800d2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d1e3      	bne.n	800d28a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d2c2:	88bb      	ldrh	r3, [r7, #4]
 800d2c4:	f003 0301 	and.w	r3, r3, #1
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d007      	beq.n	800d2de <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800d2ce:	6a3b      	ldr	r3, [r7, #32]
 800d2d0:	881b      	ldrh	r3, [r3, #0]
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	b2da      	uxtb	r2, r3
 800d2da:	69fb      	ldr	r3, [r7, #28]
 800d2dc:	701a      	strb	r2, [r3, #0]
  }
}
 800d2de:	bf00      	nop
 800d2e0:	372c      	adds	r7, #44	@ 0x2c
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr

0800d2ea <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b084      	sub	sp, #16
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d2f6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d2fa:	f005 fed5 	bl	80130a8 <USBD_static_malloc>
 800d2fe:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d105      	bne.n	800d312 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2200      	movs	r2, #0
 800d30a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800d30e:	2302      	movs	r3, #2
 800d310:	e066      	b.n	800d3e0 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	7c1b      	ldrb	r3, [r3, #16]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d119      	bne.n	800d356 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d322:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d326:	2202      	movs	r2, #2
 800d328:	2181      	movs	r1, #129	@ 0x81
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f005 fd63 	bl	8012df6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2201      	movs	r2, #1
 800d334:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d336:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d33a:	2202      	movs	r2, #2
 800d33c:	2101      	movs	r1, #1
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f005 fd59 	bl	8012df6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2201      	movs	r2, #1
 800d348:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2210      	movs	r2, #16
 800d350:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800d354:	e016      	b.n	800d384 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d356:	2340      	movs	r3, #64	@ 0x40
 800d358:	2202      	movs	r2, #2
 800d35a:	2181      	movs	r1, #129	@ 0x81
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f005 fd4a 	bl	8012df6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2201      	movs	r2, #1
 800d366:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d368:	2340      	movs	r3, #64	@ 0x40
 800d36a:	2202      	movs	r2, #2
 800d36c:	2101      	movs	r1, #1
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f005 fd41 	bl	8012df6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2201      	movs	r2, #1
 800d378:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2210      	movs	r2, #16
 800d380:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d384:	2308      	movs	r3, #8
 800d386:	2203      	movs	r2, #3
 800d388:	2182      	movs	r1, #130	@ 0x82
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f005 fd33 	bl	8012df6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2201      	movs	r2, #1
 800d394:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	7c1b      	ldrb	r3, [r3, #16]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d109      	bne.n	800d3ce <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d3c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d3c4:	2101      	movs	r1, #1
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f005 fe04 	bl	8012fd4 <USBD_LL_PrepareReceive>
 800d3cc:	e007      	b.n	800d3de <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d3d4:	2340      	movs	r3, #64	@ 0x40
 800d3d6:	2101      	movs	r1, #1
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f005 fdfb 	bl	8012fd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d3de:	2300      	movs	r3, #0
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3710      	adds	r7, #16
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d3f4:	2181      	movs	r1, #129	@ 0x81
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f005 fd23 	bl	8012e42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2200      	movs	r2, #0
 800d400:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d402:	2101      	movs	r1, #1
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f005 fd1c 	bl	8012e42 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2200      	movs	r2, #0
 800d40e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d412:	2182      	movs	r1, #130	@ 0x82
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f005 fd14 	bl	8012e42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2200      	movs	r2, #0
 800d41e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2200      	movs	r2, #0
 800d426:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d430:	2b00      	cmp	r3, #0
 800d432:	d00e      	beq.n	800d452 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d444:	4618      	mov	r0, r3
 800d446:	f005 fe3d 	bl	80130c4 <USBD_static_free>
    pdev->pClassData = NULL;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2200      	movs	r2, #0
 800d44e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d452:	2300      	movs	r3, #0
}
 800d454:	4618      	mov	r0, r3
 800d456:	3708      	adds	r7, #8
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b086      	sub	sp, #24
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d46c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d46e:	2300      	movs	r3, #0
 800d470:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d472:	2300      	movs	r3, #0
 800d474:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d476:	2300      	movs	r3, #0
 800d478:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d101      	bne.n	800d484 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d480:	2303      	movs	r3, #3
 800d482:	e0af      	b.n	800d5e4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d03f      	beq.n	800d510 <USBD_CDC_Setup+0xb4>
 800d490:	2b20      	cmp	r3, #32
 800d492:	f040 809f 	bne.w	800d5d4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	88db      	ldrh	r3, [r3, #6]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d02e      	beq.n	800d4fc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	b25b      	sxtb	r3, r3
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	da16      	bge.n	800d4d6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d4ae:	689b      	ldr	r3, [r3, #8]
 800d4b0:	683a      	ldr	r2, [r7, #0]
 800d4b2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d4b4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d4b6:	683a      	ldr	r2, [r7, #0]
 800d4b8:	88d2      	ldrh	r2, [r2, #6]
 800d4ba:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	88db      	ldrh	r3, [r3, #6]
 800d4c0:	2b07      	cmp	r3, #7
 800d4c2:	bf28      	it	cs
 800d4c4:	2307      	movcs	r3, #7
 800d4c6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	89fa      	ldrh	r2, [r7, #14]
 800d4cc:	4619      	mov	r1, r3
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f001 facd 	bl	800ea6e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d4d4:	e085      	b.n	800d5e2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	785a      	ldrb	r2, [r3, #1]
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	88db      	ldrh	r3, [r3, #6]
 800d4e4:	b2da      	uxtb	r2, r3
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d4ec:	6939      	ldr	r1, [r7, #16]
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	88db      	ldrh	r3, [r3, #6]
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f001 fae6 	bl	800eac6 <USBD_CtlPrepareRx>
      break;
 800d4fa:	e072      	b.n	800d5e2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d502:	689b      	ldr	r3, [r3, #8]
 800d504:	683a      	ldr	r2, [r7, #0]
 800d506:	7850      	ldrb	r0, [r2, #1]
 800d508:	2200      	movs	r2, #0
 800d50a:	6839      	ldr	r1, [r7, #0]
 800d50c:	4798      	blx	r3
      break;
 800d50e:	e068      	b.n	800d5e2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	785b      	ldrb	r3, [r3, #1]
 800d514:	2b0b      	cmp	r3, #11
 800d516:	d852      	bhi.n	800d5be <USBD_CDC_Setup+0x162>
 800d518:	a201      	add	r2, pc, #4	@ (adr r2, 800d520 <USBD_CDC_Setup+0xc4>)
 800d51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d51e:	bf00      	nop
 800d520:	0800d551 	.word	0x0800d551
 800d524:	0800d5cd 	.word	0x0800d5cd
 800d528:	0800d5bf 	.word	0x0800d5bf
 800d52c:	0800d5bf 	.word	0x0800d5bf
 800d530:	0800d5bf 	.word	0x0800d5bf
 800d534:	0800d5bf 	.word	0x0800d5bf
 800d538:	0800d5bf 	.word	0x0800d5bf
 800d53c:	0800d5bf 	.word	0x0800d5bf
 800d540:	0800d5bf 	.word	0x0800d5bf
 800d544:	0800d5bf 	.word	0x0800d5bf
 800d548:	0800d57b 	.word	0x0800d57b
 800d54c:	0800d5a5 	.word	0x0800d5a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d556:	b2db      	uxtb	r3, r3
 800d558:	2b03      	cmp	r3, #3
 800d55a:	d107      	bne.n	800d56c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d55c:	f107 030a 	add.w	r3, r7, #10
 800d560:	2202      	movs	r2, #2
 800d562:	4619      	mov	r1, r3
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f001 fa82 	bl	800ea6e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d56a:	e032      	b.n	800d5d2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d56c:	6839      	ldr	r1, [r7, #0]
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f001 fa0c 	bl	800e98c <USBD_CtlError>
            ret = USBD_FAIL;
 800d574:	2303      	movs	r3, #3
 800d576:	75fb      	strb	r3, [r7, #23]
          break;
 800d578:	e02b      	b.n	800d5d2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d580:	b2db      	uxtb	r3, r3
 800d582:	2b03      	cmp	r3, #3
 800d584:	d107      	bne.n	800d596 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d586:	f107 030d 	add.w	r3, r7, #13
 800d58a:	2201      	movs	r2, #1
 800d58c:	4619      	mov	r1, r3
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f001 fa6d 	bl	800ea6e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d594:	e01d      	b.n	800d5d2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d596:	6839      	ldr	r1, [r7, #0]
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f001 f9f7 	bl	800e98c <USBD_CtlError>
            ret = USBD_FAIL;
 800d59e:	2303      	movs	r3, #3
 800d5a0:	75fb      	strb	r3, [r7, #23]
          break;
 800d5a2:	e016      	b.n	800d5d2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	2b03      	cmp	r3, #3
 800d5ae:	d00f      	beq.n	800d5d0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d5b0:	6839      	ldr	r1, [r7, #0]
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f001 f9ea 	bl	800e98c <USBD_CtlError>
            ret = USBD_FAIL;
 800d5b8:	2303      	movs	r3, #3
 800d5ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d5bc:	e008      	b.n	800d5d0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d5be:	6839      	ldr	r1, [r7, #0]
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f001 f9e3 	bl	800e98c <USBD_CtlError>
          ret = USBD_FAIL;
 800d5c6:	2303      	movs	r3, #3
 800d5c8:	75fb      	strb	r3, [r7, #23]
          break;
 800d5ca:	e002      	b.n	800d5d2 <USBD_CDC_Setup+0x176>
          break;
 800d5cc:	bf00      	nop
 800d5ce:	e008      	b.n	800d5e2 <USBD_CDC_Setup+0x186>
          break;
 800d5d0:	bf00      	nop
      }
      break;
 800d5d2:	e006      	b.n	800d5e2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d5d4:	6839      	ldr	r1, [r7, #0]
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f001 f9d8 	bl	800e98c <USBD_CtlError>
      ret = USBD_FAIL;
 800d5dc:	2303      	movs	r3, #3
 800d5de:	75fb      	strb	r3, [r7, #23]
      break;
 800d5e0:	bf00      	nop
  }

  return (uint8_t)ret;
 800d5e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3718      	adds	r7, #24
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b084      	sub	sp, #16
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d5fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d606:	2b00      	cmp	r3, #0
 800d608:	d101      	bne.n	800d60e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d60a:	2303      	movs	r3, #3
 800d60c:	e04f      	b.n	800d6ae <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d614:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d616:	78fa      	ldrb	r2, [r7, #3]
 800d618:	6879      	ldr	r1, [r7, #4]
 800d61a:	4613      	mov	r3, r2
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	4413      	add	r3, r2
 800d620:	009b      	lsls	r3, r3, #2
 800d622:	440b      	add	r3, r1
 800d624:	3318      	adds	r3, #24
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d029      	beq.n	800d680 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d62c:	78fa      	ldrb	r2, [r7, #3]
 800d62e:	6879      	ldr	r1, [r7, #4]
 800d630:	4613      	mov	r3, r2
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	4413      	add	r3, r2
 800d636:	009b      	lsls	r3, r3, #2
 800d638:	440b      	add	r3, r1
 800d63a:	3318      	adds	r3, #24
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	78f9      	ldrb	r1, [r7, #3]
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	460b      	mov	r3, r1
 800d644:	009b      	lsls	r3, r3, #2
 800d646:	440b      	add	r3, r1
 800d648:	00db      	lsls	r3, r3, #3
 800d64a:	4403      	add	r3, r0
 800d64c:	3320      	adds	r3, #32
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	fbb2 f1f3 	udiv	r1, r2, r3
 800d654:	fb01 f303 	mul.w	r3, r1, r3
 800d658:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d110      	bne.n	800d680 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d65e:	78fa      	ldrb	r2, [r7, #3]
 800d660:	6879      	ldr	r1, [r7, #4]
 800d662:	4613      	mov	r3, r2
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	4413      	add	r3, r2
 800d668:	009b      	lsls	r3, r3, #2
 800d66a:	440b      	add	r3, r1
 800d66c:	3318      	adds	r3, #24
 800d66e:	2200      	movs	r2, #0
 800d670:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d672:	78f9      	ldrb	r1, [r7, #3]
 800d674:	2300      	movs	r3, #0
 800d676:	2200      	movs	r2, #0
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f005 fc8a 	bl	8012f92 <USBD_LL_Transmit>
 800d67e:	e015      	b.n	800d6ac <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	2200      	movs	r2, #0
 800d684:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d68e:	691b      	ldr	r3, [r3, #16]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d00b      	beq.n	800d6ac <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d69a:	691b      	ldr	r3, [r3, #16]
 800d69c:	68ba      	ldr	r2, [r7, #8]
 800d69e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d6a2:	68ba      	ldr	r2, [r7, #8]
 800d6a4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d6a8:	78fa      	ldrb	r2, [r7, #3]
 800d6aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d6ac:	2300      	movs	r3, #0
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3710      	adds	r7, #16
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}

0800d6b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b084      	sub	sp, #16
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	6078      	str	r0, [r7, #4]
 800d6be:	460b      	mov	r3, r1
 800d6c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d6c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d101      	bne.n	800d6d8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d6d4:	2303      	movs	r3, #3
 800d6d6:	e015      	b.n	800d704 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d6d8:	78fb      	ldrb	r3, [r7, #3]
 800d6da:	4619      	mov	r1, r3
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f005 fc9a 	bl	8013016 <USBD_LL_GetRxDataSize>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	68fa      	ldr	r2, [r7, #12]
 800d6f4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d6f8:	68fa      	ldr	r2, [r7, #12]
 800d6fa:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d6fe:	4611      	mov	r1, r2
 800d700:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d702:	2300      	movs	r3, #0
}
 800d704:	4618      	mov	r0, r3
 800d706:	3710      	adds	r7, #16
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d71a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d101      	bne.n	800d726 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d722:	2303      	movs	r3, #3
 800d724:	e01a      	b.n	800d75c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d014      	beq.n	800d75a <USBD_CDC_EP0_RxReady+0x4e>
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d736:	2bff      	cmp	r3, #255	@ 0xff
 800d738:	d00f      	beq.n	800d75a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d740:	689b      	ldr	r3, [r3, #8]
 800d742:	68fa      	ldr	r2, [r7, #12]
 800d744:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800d748:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d74a:	68fa      	ldr	r2, [r7, #12]
 800d74c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d750:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	22ff      	movs	r2, #255	@ 0xff
 800d756:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d75a:	2300      	movs	r3, #0
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3710      	adds	r7, #16
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2243      	movs	r2, #67	@ 0x43
 800d770:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d772:	4b03      	ldr	r3, [pc, #12]	@ (800d780 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d774:	4618      	mov	r0, r3
 800d776:	370c      	adds	r7, #12
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr
 800d780:	200000a0 	.word	0x200000a0

0800d784 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2243      	movs	r2, #67	@ 0x43
 800d790:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d792:	4b03      	ldr	r3, [pc, #12]	@ (800d7a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d794:	4618      	mov	r0, r3
 800d796:	370c      	adds	r7, #12
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr
 800d7a0:	2000005c 	.word	0x2000005c

0800d7a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2243      	movs	r2, #67	@ 0x43
 800d7b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d7b2:	4b03      	ldr	r3, [pc, #12]	@ (800d7c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	370c      	adds	r7, #12
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr
 800d7c0:	200000e4 	.word	0x200000e4

0800d7c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b083      	sub	sp, #12
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	220a      	movs	r2, #10
 800d7d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d7d2:	4b03      	ldr	r3, [pc, #12]	@ (800d7e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	370c      	adds	r7, #12
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr
 800d7e0:	20000018 	.word	0x20000018

0800d7e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d101      	bne.n	800d7f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d7f4:	2303      	movs	r3, #3
 800d7f6:	e004      	b.n	800d802 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	683a      	ldr	r2, [r7, #0]
 800d7fc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800d800:	2300      	movs	r3, #0
}
 800d802:	4618      	mov	r0, r3
 800d804:	370c      	adds	r7, #12
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr

0800d80e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d80e:	b480      	push	{r7}
 800d810:	b087      	sub	sp, #28
 800d812:	af00      	add	r7, sp, #0
 800d814:	60f8      	str	r0, [r7, #12]
 800d816:	60b9      	str	r1, [r7, #8]
 800d818:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d820:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d101      	bne.n	800d82c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d828:	2303      	movs	r3, #3
 800d82a:	e008      	b.n	800d83e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	68ba      	ldr	r2, [r7, #8]
 800d830:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d83c:	2300      	movs	r3, #0
}
 800d83e:	4618      	mov	r0, r3
 800d840:	371c      	adds	r7, #28
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr

0800d84a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d84a:	b480      	push	{r7}
 800d84c:	b085      	sub	sp, #20
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
 800d852:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d85a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d101      	bne.n	800d866 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d862:	2303      	movs	r3, #3
 800d864:	e004      	b.n	800d870 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	683a      	ldr	r2, [r7, #0]
 800d86a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d86e:	2300      	movs	r3, #0
}
 800d870:	4618      	mov	r0, r3
 800d872:	3714      	adds	r7, #20
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr

0800d87c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b084      	sub	sp, #16
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d88a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d88c:	2301      	movs	r3, #1
 800d88e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d896:	2b00      	cmp	r3, #0
 800d898:	d101      	bne.n	800d89e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d89a:	2303      	movs	r3, #3
 800d89c:	e01a      	b.n	800d8d4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d114      	bne.n	800d8d2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d8c6:	2181      	movs	r1, #129	@ 0x81
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f005 fb62 	bl	8012f92 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3710      	adds	r7, #16
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b084      	sub	sp, #16
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d8ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d101      	bne.n	800d8fa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d8f6:	2303      	movs	r3, #3
 800d8f8:	e016      	b.n	800d928 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	7c1b      	ldrb	r3, [r3, #16]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d109      	bne.n	800d916 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d908:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d90c:	2101      	movs	r1, #1
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f005 fb60 	bl	8012fd4 <USBD_LL_PrepareReceive>
 800d914:	e007      	b.n	800d926 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d91c:	2340      	movs	r3, #64	@ 0x40
 800d91e:	2101      	movs	r1, #1
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f005 fb57 	bl	8012fd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d926:	2300      	movs	r3, #0
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3710      	adds	r7, #16
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b086      	sub	sp, #24
 800d934:	af00      	add	r7, sp, #0
 800d936:	60f8      	str	r0, [r7, #12]
 800d938:	60b9      	str	r1, [r7, #8]
 800d93a:	4613      	mov	r3, r2
 800d93c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d101      	bne.n	800d948 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d944:	2303      	movs	r3, #3
 800d946:	e01f      	b.n	800d988 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	2200      	movs	r2, #0
 800d94c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	2200      	movs	r2, #0
 800d954:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2200      	movs	r2, #0
 800d95c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d003      	beq.n	800d96e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	68ba      	ldr	r2, [r7, #8]
 800d96a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2201      	movs	r2, #1
 800d972:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	79fa      	ldrb	r2, [r7, #7]
 800d97a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	f005 f9bf 	bl	8012d00 <USBD_LL_Init>
 800d982:	4603      	mov	r3, r0
 800d984:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d986:	7dfb      	ldrb	r3, [r7, #23]
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3718      	adds	r7, #24
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d99a:	2300      	movs	r3, #0
 800d99c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d101      	bne.n	800d9a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d9a4:	2303      	movs	r3, #3
 800d9a6:	e016      	b.n	800d9d6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	683a      	ldr	r2, [r7, #0]
 800d9ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d00b      	beq.n	800d9d4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9c4:	f107 020e 	add.w	r2, r7, #14
 800d9c8:	4610      	mov	r0, r2
 800d9ca:	4798      	blx	r3
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d9d4:	2300      	movs	r3, #0
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3710      	adds	r7, #16
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}

0800d9de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d9de:	b580      	push	{r7, lr}
 800d9e0:	b082      	sub	sp, #8
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f005 f9ea 	bl	8012dc0 <USBD_LL_Start>
 800d9ec:	4603      	mov	r3, r0
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3708      	adds	r7, #8
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d9f6:	b480      	push	{r7}
 800d9f8:	b083      	sub	sp, #12
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d9fe:	2300      	movs	r3, #0
}
 800da00:	4618      	mov	r0, r3
 800da02:	370c      	adds	r7, #12
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr

0800da0c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b084      	sub	sp, #16
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	460b      	mov	r3, r1
 800da16:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800da18:	2303      	movs	r3, #3
 800da1a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da22:	2b00      	cmp	r3, #0
 800da24:	d009      	beq.n	800da3a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	78fa      	ldrb	r2, [r7, #3]
 800da30:	4611      	mov	r1, r2
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	4798      	blx	r3
 800da36:	4603      	mov	r3, r0
 800da38:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800da3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3710      	adds	r7, #16
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b082      	sub	sp, #8
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	460b      	mov	r3, r1
 800da4e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da56:	2b00      	cmp	r3, #0
 800da58:	d007      	beq.n	800da6a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da60:	685b      	ldr	r3, [r3, #4]
 800da62:	78fa      	ldrb	r2, [r7, #3]
 800da64:	4611      	mov	r1, r2
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	4798      	blx	r3
  }

  return USBD_OK;
 800da6a:	2300      	movs	r3, #0
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3708      	adds	r7, #8
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800da84:	6839      	ldr	r1, [r7, #0]
 800da86:	4618      	mov	r0, r3
 800da88:	f000 ff46 	bl	800e918 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2201      	movs	r2, #1
 800da90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800da9a:	461a      	mov	r2, r3
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800daa8:	f003 031f 	and.w	r3, r3, #31
 800daac:	2b02      	cmp	r3, #2
 800daae:	d01a      	beq.n	800dae6 <USBD_LL_SetupStage+0x72>
 800dab0:	2b02      	cmp	r3, #2
 800dab2:	d822      	bhi.n	800dafa <USBD_LL_SetupStage+0x86>
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d002      	beq.n	800dabe <USBD_LL_SetupStage+0x4a>
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d00a      	beq.n	800dad2 <USBD_LL_SetupStage+0x5e>
 800dabc:	e01d      	b.n	800dafa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dac4:	4619      	mov	r1, r3
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f000 f9ee 	bl	800dea8 <USBD_StdDevReq>
 800dacc:	4603      	mov	r3, r0
 800dace:	73fb      	strb	r3, [r7, #15]
      break;
 800dad0:	e020      	b.n	800db14 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dad8:	4619      	mov	r1, r3
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f000 fa52 	bl	800df84 <USBD_StdItfReq>
 800dae0:	4603      	mov	r3, r0
 800dae2:	73fb      	strb	r3, [r7, #15]
      break;
 800dae4:	e016      	b.n	800db14 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800daec:	4619      	mov	r1, r3
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f000 fa91 	bl	800e016 <USBD_StdEPReq>
 800daf4:	4603      	mov	r3, r0
 800daf6:	73fb      	strb	r3, [r7, #15]
      break;
 800daf8:	e00c      	b.n	800db14 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800db00:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800db04:	b2db      	uxtb	r3, r3
 800db06:	4619      	mov	r1, r3
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f005 f9b9 	bl	8012e80 <USBD_LL_StallEP>
 800db0e:	4603      	mov	r3, r0
 800db10:	73fb      	strb	r3, [r7, #15]
      break;
 800db12:	bf00      	nop
  }

  return ret;
 800db14:	7bfb      	ldrb	r3, [r7, #15]
}
 800db16:	4618      	mov	r0, r3
 800db18:	3710      	adds	r7, #16
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b086      	sub	sp, #24
 800db22:	af00      	add	r7, sp, #0
 800db24:	60f8      	str	r0, [r7, #12]
 800db26:	460b      	mov	r3, r1
 800db28:	607a      	str	r2, [r7, #4]
 800db2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800db2c:	7afb      	ldrb	r3, [r7, #11]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d138      	bne.n	800dba4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800db38:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800db40:	2b03      	cmp	r3, #3
 800db42:	d14a      	bne.n	800dbda <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	689a      	ldr	r2, [r3, #8]
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	68db      	ldr	r3, [r3, #12]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d913      	bls.n	800db78 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	689a      	ldr	r2, [r3, #8]
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	68db      	ldr	r3, [r3, #12]
 800db58:	1ad2      	subs	r2, r2, r3
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	68da      	ldr	r2, [r3, #12]
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	689b      	ldr	r3, [r3, #8]
 800db66:	4293      	cmp	r3, r2
 800db68:	bf28      	it	cs
 800db6a:	4613      	movcs	r3, r2
 800db6c:	461a      	mov	r2, r3
 800db6e:	6879      	ldr	r1, [r7, #4]
 800db70:	68f8      	ldr	r0, [r7, #12]
 800db72:	f000 ffc5 	bl	800eb00 <USBD_CtlContinueRx>
 800db76:	e030      	b.n	800dbda <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db7e:	b2db      	uxtb	r3, r3
 800db80:	2b03      	cmp	r3, #3
 800db82:	d10b      	bne.n	800db9c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db8a:	691b      	ldr	r3, [r3, #16]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d005      	beq.n	800db9c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db96:	691b      	ldr	r3, [r3, #16]
 800db98:	68f8      	ldr	r0, [r7, #12]
 800db9a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800db9c:	68f8      	ldr	r0, [r7, #12]
 800db9e:	f000 ffc0 	bl	800eb22 <USBD_CtlSendStatus>
 800dba2:	e01a      	b.n	800dbda <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbaa:	b2db      	uxtb	r3, r3
 800dbac:	2b03      	cmp	r3, #3
 800dbae:	d114      	bne.n	800dbda <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbb6:	699b      	ldr	r3, [r3, #24]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00e      	beq.n	800dbda <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbc2:	699b      	ldr	r3, [r3, #24]
 800dbc4:	7afa      	ldrb	r2, [r7, #11]
 800dbc6:	4611      	mov	r1, r2
 800dbc8:	68f8      	ldr	r0, [r7, #12]
 800dbca:	4798      	blx	r3
 800dbcc:	4603      	mov	r3, r0
 800dbce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800dbd0:	7dfb      	ldrb	r3, [r7, #23]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d001      	beq.n	800dbda <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800dbd6:	7dfb      	ldrb	r3, [r7, #23]
 800dbd8:	e000      	b.n	800dbdc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800dbda:	2300      	movs	r3, #0
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3718      	adds	r7, #24
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}

0800dbe4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b086      	sub	sp, #24
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	460b      	mov	r3, r1
 800dbee:	607a      	str	r2, [r7, #4]
 800dbf0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dbf2:	7afb      	ldrb	r3, [r7, #11]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d16b      	bne.n	800dcd0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	3314      	adds	r3, #20
 800dbfc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800dc04:	2b02      	cmp	r3, #2
 800dc06:	d156      	bne.n	800dcb6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	689a      	ldr	r2, [r3, #8]
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d914      	bls.n	800dc3e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	689a      	ldr	r2, [r3, #8]
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	68db      	ldr	r3, [r3, #12]
 800dc1c:	1ad2      	subs	r2, r2, r3
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	689b      	ldr	r3, [r3, #8]
 800dc26:	461a      	mov	r2, r3
 800dc28:	6879      	ldr	r1, [r7, #4]
 800dc2a:	68f8      	ldr	r0, [r7, #12]
 800dc2c:	f000 ff3a 	bl	800eaa4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc30:	2300      	movs	r3, #0
 800dc32:	2200      	movs	r2, #0
 800dc34:	2100      	movs	r1, #0
 800dc36:	68f8      	ldr	r0, [r7, #12]
 800dc38:	f005 f9cc 	bl	8012fd4 <USBD_LL_PrepareReceive>
 800dc3c:	e03b      	b.n	800dcb6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	68da      	ldr	r2, [r3, #12]
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	689b      	ldr	r3, [r3, #8]
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d11c      	bne.n	800dc84 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	685a      	ldr	r2, [r3, #4]
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d316      	bcc.n	800dc84 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	685a      	ldr	r2, [r3, #4]
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d20f      	bcs.n	800dc84 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dc64:	2200      	movs	r2, #0
 800dc66:	2100      	movs	r1, #0
 800dc68:	68f8      	ldr	r0, [r7, #12]
 800dc6a:	f000 ff1b 	bl	800eaa4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2200      	movs	r2, #0
 800dc72:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc76:	2300      	movs	r3, #0
 800dc78:	2200      	movs	r2, #0
 800dc7a:	2100      	movs	r1, #0
 800dc7c:	68f8      	ldr	r0, [r7, #12]
 800dc7e:	f005 f9a9 	bl	8012fd4 <USBD_LL_PrepareReceive>
 800dc82:	e018      	b.n	800dcb6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc8a:	b2db      	uxtb	r3, r3
 800dc8c:	2b03      	cmp	r3, #3
 800dc8e:	d10b      	bne.n	800dca8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc96:	68db      	ldr	r3, [r3, #12]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d005      	beq.n	800dca8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dca2:	68db      	ldr	r3, [r3, #12]
 800dca4:	68f8      	ldr	r0, [r7, #12]
 800dca6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dca8:	2180      	movs	r1, #128	@ 0x80
 800dcaa:	68f8      	ldr	r0, [r7, #12]
 800dcac:	f005 f8e8 	bl	8012e80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dcb0:	68f8      	ldr	r0, [r7, #12]
 800dcb2:	f000 ff49 	bl	800eb48 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d122      	bne.n	800dd06 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f7ff fe98 	bl	800d9f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800dcce:	e01a      	b.n	800dd06 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	2b03      	cmp	r3, #3
 800dcda:	d114      	bne.n	800dd06 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dce2:	695b      	ldr	r3, [r3, #20]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d00e      	beq.n	800dd06 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcee:	695b      	ldr	r3, [r3, #20]
 800dcf0:	7afa      	ldrb	r2, [r7, #11]
 800dcf2:	4611      	mov	r1, r2
 800dcf4:	68f8      	ldr	r0, [r7, #12]
 800dcf6:	4798      	blx	r3
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800dcfc:	7dfb      	ldrb	r3, [r7, #23]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d001      	beq.n	800dd06 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800dd02:	7dfb      	ldrb	r3, [r7, #23]
 800dd04:	e000      	b.n	800dd08 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800dd06:	2300      	movs	r3, #0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3718      	adds	r7, #24
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2200      	movs	r2, #0
 800dd24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2200      	movs	r2, #0
 800dd32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d101      	bne.n	800dd44 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800dd40:	2303      	movs	r3, #3
 800dd42:	e02f      	b.n	800dda4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d00f      	beq.n	800dd6e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d009      	beq.n	800dd6e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	687a      	ldr	r2, [r7, #4]
 800dd64:	6852      	ldr	r2, [r2, #4]
 800dd66:	b2d2      	uxtb	r2, r2
 800dd68:	4611      	mov	r1, r2
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dd6e:	2340      	movs	r3, #64	@ 0x40
 800dd70:	2200      	movs	r2, #0
 800dd72:	2100      	movs	r1, #0
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f005 f83e 	bl	8012df6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2240      	movs	r2, #64	@ 0x40
 800dd86:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dd8a:	2340      	movs	r3, #64	@ 0x40
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	2180      	movs	r1, #128	@ 0x80
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f005 f830 	bl	8012df6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2201      	movs	r2, #1
 800dd9a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2240      	movs	r2, #64	@ 0x40
 800dda0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800dda2:	2300      	movs	r3, #0
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3708      	adds	r7, #8
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	78fa      	ldrb	r2, [r7, #3]
 800ddbc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ddbe:	2300      	movs	r3, #0
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	370c      	adds	r7, #12
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr

0800ddcc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b083      	sub	sp, #12
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ddda:	b2da      	uxtb	r2, r3
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2204      	movs	r2, #4
 800dde6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ddea:	2300      	movs	r3, #0
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	370c      	adds	r7, #12
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr

0800ddf8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b083      	sub	sp, #12
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de06:	b2db      	uxtb	r3, r3
 800de08:	2b04      	cmp	r3, #4
 800de0a:	d106      	bne.n	800de1a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800de12:	b2da      	uxtb	r2, r3
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800de1a:	2300      	movs	r3, #0
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	370c      	adds	r7, #12
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr

0800de28 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de36:	2b00      	cmp	r3, #0
 800de38:	d101      	bne.n	800de3e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800de3a:	2303      	movs	r3, #3
 800de3c:	e012      	b.n	800de64 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de44:	b2db      	uxtb	r3, r3
 800de46:	2b03      	cmp	r3, #3
 800de48:	d10b      	bne.n	800de62 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de50:	69db      	ldr	r3, [r3, #28]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d005      	beq.n	800de62 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de5c:	69db      	ldr	r3, [r3, #28]
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800de62:	2300      	movs	r3, #0
}
 800de64:	4618      	mov	r0, r3
 800de66:	3708      	adds	r7, #8
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b087      	sub	sp, #28
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	3301      	adds	r3, #1
 800de82:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800de8a:	8a3b      	ldrh	r3, [r7, #16]
 800de8c:	021b      	lsls	r3, r3, #8
 800de8e:	b21a      	sxth	r2, r3
 800de90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800de94:	4313      	orrs	r3, r2
 800de96:	b21b      	sxth	r3, r3
 800de98:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800de9a:	89fb      	ldrh	r3, [r7, #14]
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	371c      	adds	r7, #28
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr

0800dea8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b084      	sub	sp, #16
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800deb2:	2300      	movs	r3, #0
 800deb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	781b      	ldrb	r3, [r3, #0]
 800deba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800debe:	2b40      	cmp	r3, #64	@ 0x40
 800dec0:	d005      	beq.n	800dece <USBD_StdDevReq+0x26>
 800dec2:	2b40      	cmp	r3, #64	@ 0x40
 800dec4:	d853      	bhi.n	800df6e <USBD_StdDevReq+0xc6>
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d00b      	beq.n	800dee2 <USBD_StdDevReq+0x3a>
 800deca:	2b20      	cmp	r3, #32
 800decc:	d14f      	bne.n	800df6e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ded4:	689b      	ldr	r3, [r3, #8]
 800ded6:	6839      	ldr	r1, [r7, #0]
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	4798      	blx	r3
 800dedc:	4603      	mov	r3, r0
 800dede:	73fb      	strb	r3, [r7, #15]
      break;
 800dee0:	e04a      	b.n	800df78 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	785b      	ldrb	r3, [r3, #1]
 800dee6:	2b09      	cmp	r3, #9
 800dee8:	d83b      	bhi.n	800df62 <USBD_StdDevReq+0xba>
 800deea:	a201      	add	r2, pc, #4	@ (adr r2, 800def0 <USBD_StdDevReq+0x48>)
 800deec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800def0:	0800df45 	.word	0x0800df45
 800def4:	0800df59 	.word	0x0800df59
 800def8:	0800df63 	.word	0x0800df63
 800defc:	0800df4f 	.word	0x0800df4f
 800df00:	0800df63 	.word	0x0800df63
 800df04:	0800df23 	.word	0x0800df23
 800df08:	0800df19 	.word	0x0800df19
 800df0c:	0800df63 	.word	0x0800df63
 800df10:	0800df3b 	.word	0x0800df3b
 800df14:	0800df2d 	.word	0x0800df2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800df18:	6839      	ldr	r1, [r7, #0]
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f000 f9de 	bl	800e2dc <USBD_GetDescriptor>
          break;
 800df20:	e024      	b.n	800df6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800df22:	6839      	ldr	r1, [r7, #0]
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 fb6d 	bl	800e604 <USBD_SetAddress>
          break;
 800df2a:	e01f      	b.n	800df6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800df2c:	6839      	ldr	r1, [r7, #0]
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f000 fbac 	bl	800e68c <USBD_SetConfig>
 800df34:	4603      	mov	r3, r0
 800df36:	73fb      	strb	r3, [r7, #15]
          break;
 800df38:	e018      	b.n	800df6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800df3a:	6839      	ldr	r1, [r7, #0]
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f000 fc4b 	bl	800e7d8 <USBD_GetConfig>
          break;
 800df42:	e013      	b.n	800df6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800df44:	6839      	ldr	r1, [r7, #0]
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f000 fc7c 	bl	800e844 <USBD_GetStatus>
          break;
 800df4c:	e00e      	b.n	800df6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800df4e:	6839      	ldr	r1, [r7, #0]
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f000 fcab 	bl	800e8ac <USBD_SetFeature>
          break;
 800df56:	e009      	b.n	800df6c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800df58:	6839      	ldr	r1, [r7, #0]
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f000 fcba 	bl	800e8d4 <USBD_ClrFeature>
          break;
 800df60:	e004      	b.n	800df6c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800df62:	6839      	ldr	r1, [r7, #0]
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f000 fd11 	bl	800e98c <USBD_CtlError>
          break;
 800df6a:	bf00      	nop
      }
      break;
 800df6c:	e004      	b.n	800df78 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800df6e:	6839      	ldr	r1, [r7, #0]
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f000 fd0b 	bl	800e98c <USBD_CtlError>
      break;
 800df76:	bf00      	nop
  }

  return ret;
 800df78:	7bfb      	ldrb	r3, [r7, #15]
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3710      	adds	r7, #16
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
 800df82:	bf00      	nop

0800df84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df8e:	2300      	movs	r3, #0
 800df90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800df9a:	2b40      	cmp	r3, #64	@ 0x40
 800df9c:	d005      	beq.n	800dfaa <USBD_StdItfReq+0x26>
 800df9e:	2b40      	cmp	r3, #64	@ 0x40
 800dfa0:	d82f      	bhi.n	800e002 <USBD_StdItfReq+0x7e>
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d001      	beq.n	800dfaa <USBD_StdItfReq+0x26>
 800dfa6:	2b20      	cmp	r3, #32
 800dfa8:	d12b      	bne.n	800e002 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	2b02      	cmp	r3, #2
 800dfb6:	d81d      	bhi.n	800dff4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	889b      	ldrh	r3, [r3, #4]
 800dfbc:	b2db      	uxtb	r3, r3
 800dfbe:	2b01      	cmp	r3, #1
 800dfc0:	d813      	bhi.n	800dfea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dfc8:	689b      	ldr	r3, [r3, #8]
 800dfca:	6839      	ldr	r1, [r7, #0]
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	4798      	blx	r3
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	88db      	ldrh	r3, [r3, #6]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d110      	bne.n	800dffe <USBD_StdItfReq+0x7a>
 800dfdc:	7bfb      	ldrb	r3, [r7, #15]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d10d      	bne.n	800dffe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 fd9d 	bl	800eb22 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dfe8:	e009      	b.n	800dffe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800dfea:	6839      	ldr	r1, [r7, #0]
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f000 fccd 	bl	800e98c <USBD_CtlError>
          break;
 800dff2:	e004      	b.n	800dffe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800dff4:	6839      	ldr	r1, [r7, #0]
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f000 fcc8 	bl	800e98c <USBD_CtlError>
          break;
 800dffc:	e000      	b.n	800e000 <USBD_StdItfReq+0x7c>
          break;
 800dffe:	bf00      	nop
      }
      break;
 800e000:	e004      	b.n	800e00c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e002:	6839      	ldr	r1, [r7, #0]
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f000 fcc1 	bl	800e98c <USBD_CtlError>
      break;
 800e00a:	bf00      	nop
  }

  return ret;
 800e00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3710      	adds	r7, #16
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}

0800e016 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e016:	b580      	push	{r7, lr}
 800e018:	b084      	sub	sp, #16
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
 800e01e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e020:	2300      	movs	r3, #0
 800e022:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	889b      	ldrh	r3, [r3, #4]
 800e028:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e032:	2b40      	cmp	r3, #64	@ 0x40
 800e034:	d007      	beq.n	800e046 <USBD_StdEPReq+0x30>
 800e036:	2b40      	cmp	r3, #64	@ 0x40
 800e038:	f200 8145 	bhi.w	800e2c6 <USBD_StdEPReq+0x2b0>
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d00c      	beq.n	800e05a <USBD_StdEPReq+0x44>
 800e040:	2b20      	cmp	r3, #32
 800e042:	f040 8140 	bne.w	800e2c6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	6839      	ldr	r1, [r7, #0]
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	4798      	blx	r3
 800e054:	4603      	mov	r3, r0
 800e056:	73fb      	strb	r3, [r7, #15]
      break;
 800e058:	e13a      	b.n	800e2d0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	785b      	ldrb	r3, [r3, #1]
 800e05e:	2b03      	cmp	r3, #3
 800e060:	d007      	beq.n	800e072 <USBD_StdEPReq+0x5c>
 800e062:	2b03      	cmp	r3, #3
 800e064:	f300 8129 	bgt.w	800e2ba <USBD_StdEPReq+0x2a4>
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d07f      	beq.n	800e16c <USBD_StdEPReq+0x156>
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d03c      	beq.n	800e0ea <USBD_StdEPReq+0xd4>
 800e070:	e123      	b.n	800e2ba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e078:	b2db      	uxtb	r3, r3
 800e07a:	2b02      	cmp	r3, #2
 800e07c:	d002      	beq.n	800e084 <USBD_StdEPReq+0x6e>
 800e07e:	2b03      	cmp	r3, #3
 800e080:	d016      	beq.n	800e0b0 <USBD_StdEPReq+0x9a>
 800e082:	e02c      	b.n	800e0de <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e084:	7bbb      	ldrb	r3, [r7, #14]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d00d      	beq.n	800e0a6 <USBD_StdEPReq+0x90>
 800e08a:	7bbb      	ldrb	r3, [r7, #14]
 800e08c:	2b80      	cmp	r3, #128	@ 0x80
 800e08e:	d00a      	beq.n	800e0a6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e090:	7bbb      	ldrb	r3, [r7, #14]
 800e092:	4619      	mov	r1, r3
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f004 fef3 	bl	8012e80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e09a:	2180      	movs	r1, #128	@ 0x80
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f004 feef 	bl	8012e80 <USBD_LL_StallEP>
 800e0a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e0a4:	e020      	b.n	800e0e8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e0a6:	6839      	ldr	r1, [r7, #0]
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 fc6f 	bl	800e98c <USBD_CtlError>
              break;
 800e0ae:	e01b      	b.n	800e0e8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	885b      	ldrh	r3, [r3, #2]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d10e      	bne.n	800e0d6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e0b8:	7bbb      	ldrb	r3, [r7, #14]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d00b      	beq.n	800e0d6 <USBD_StdEPReq+0xc0>
 800e0be:	7bbb      	ldrb	r3, [r7, #14]
 800e0c0:	2b80      	cmp	r3, #128	@ 0x80
 800e0c2:	d008      	beq.n	800e0d6 <USBD_StdEPReq+0xc0>
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	88db      	ldrh	r3, [r3, #6]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d104      	bne.n	800e0d6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e0cc:	7bbb      	ldrb	r3, [r7, #14]
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f004 fed5 	bl	8012e80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f000 fd23 	bl	800eb22 <USBD_CtlSendStatus>

              break;
 800e0dc:	e004      	b.n	800e0e8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e0de:	6839      	ldr	r1, [r7, #0]
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f000 fc53 	bl	800e98c <USBD_CtlError>
              break;
 800e0e6:	bf00      	nop
          }
          break;
 800e0e8:	e0ec      	b.n	800e2c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	2b02      	cmp	r3, #2
 800e0f4:	d002      	beq.n	800e0fc <USBD_StdEPReq+0xe6>
 800e0f6:	2b03      	cmp	r3, #3
 800e0f8:	d016      	beq.n	800e128 <USBD_StdEPReq+0x112>
 800e0fa:	e030      	b.n	800e15e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e0fc:	7bbb      	ldrb	r3, [r7, #14]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d00d      	beq.n	800e11e <USBD_StdEPReq+0x108>
 800e102:	7bbb      	ldrb	r3, [r7, #14]
 800e104:	2b80      	cmp	r3, #128	@ 0x80
 800e106:	d00a      	beq.n	800e11e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e108:	7bbb      	ldrb	r3, [r7, #14]
 800e10a:	4619      	mov	r1, r3
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f004 feb7 	bl	8012e80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e112:	2180      	movs	r1, #128	@ 0x80
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f004 feb3 	bl	8012e80 <USBD_LL_StallEP>
 800e11a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e11c:	e025      	b.n	800e16a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e11e:	6839      	ldr	r1, [r7, #0]
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f000 fc33 	bl	800e98c <USBD_CtlError>
              break;
 800e126:	e020      	b.n	800e16a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	885b      	ldrh	r3, [r3, #2]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d11b      	bne.n	800e168 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e130:	7bbb      	ldrb	r3, [r7, #14]
 800e132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e136:	2b00      	cmp	r3, #0
 800e138:	d004      	beq.n	800e144 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e13a:	7bbb      	ldrb	r3, [r7, #14]
 800e13c:	4619      	mov	r1, r3
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f004 febd 	bl	8012ebe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f000 fcec 	bl	800eb22 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e150:	689b      	ldr	r3, [r3, #8]
 800e152:	6839      	ldr	r1, [r7, #0]
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	4798      	blx	r3
 800e158:	4603      	mov	r3, r0
 800e15a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e15c:	e004      	b.n	800e168 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e15e:	6839      	ldr	r1, [r7, #0]
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f000 fc13 	bl	800e98c <USBD_CtlError>
              break;
 800e166:	e000      	b.n	800e16a <USBD_StdEPReq+0x154>
              break;
 800e168:	bf00      	nop
          }
          break;
 800e16a:	e0ab      	b.n	800e2c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e172:	b2db      	uxtb	r3, r3
 800e174:	2b02      	cmp	r3, #2
 800e176:	d002      	beq.n	800e17e <USBD_StdEPReq+0x168>
 800e178:	2b03      	cmp	r3, #3
 800e17a:	d032      	beq.n	800e1e2 <USBD_StdEPReq+0x1cc>
 800e17c:	e097      	b.n	800e2ae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e17e:	7bbb      	ldrb	r3, [r7, #14]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d007      	beq.n	800e194 <USBD_StdEPReq+0x17e>
 800e184:	7bbb      	ldrb	r3, [r7, #14]
 800e186:	2b80      	cmp	r3, #128	@ 0x80
 800e188:	d004      	beq.n	800e194 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e18a:	6839      	ldr	r1, [r7, #0]
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f000 fbfd 	bl	800e98c <USBD_CtlError>
                break;
 800e192:	e091      	b.n	800e2b8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e194:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	da0b      	bge.n	800e1b4 <USBD_StdEPReq+0x19e>
 800e19c:	7bbb      	ldrb	r3, [r7, #14]
 800e19e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	4413      	add	r3, r2
 800e1a8:	009b      	lsls	r3, r3, #2
 800e1aa:	3310      	adds	r3, #16
 800e1ac:	687a      	ldr	r2, [r7, #4]
 800e1ae:	4413      	add	r3, r2
 800e1b0:	3304      	adds	r3, #4
 800e1b2:	e00b      	b.n	800e1cc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e1b4:	7bbb      	ldrb	r3, [r7, #14]
 800e1b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1ba:	4613      	mov	r3, r2
 800e1bc:	009b      	lsls	r3, r3, #2
 800e1be:	4413      	add	r3, r2
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	4413      	add	r3, r2
 800e1ca:	3304      	adds	r3, #4
 800e1cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	2202      	movs	r2, #2
 800e1d8:	4619      	mov	r1, r3
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f000 fc47 	bl	800ea6e <USBD_CtlSendData>
              break;
 800e1e0:	e06a      	b.n	800e2b8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e1e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	da11      	bge.n	800e20e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e1ea:	7bbb      	ldrb	r3, [r7, #14]
 800e1ec:	f003 020f 	and.w	r2, r3, #15
 800e1f0:	6879      	ldr	r1, [r7, #4]
 800e1f2:	4613      	mov	r3, r2
 800e1f4:	009b      	lsls	r3, r3, #2
 800e1f6:	4413      	add	r3, r2
 800e1f8:	009b      	lsls	r3, r3, #2
 800e1fa:	440b      	add	r3, r1
 800e1fc:	3324      	adds	r3, #36	@ 0x24
 800e1fe:	881b      	ldrh	r3, [r3, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d117      	bne.n	800e234 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e204:	6839      	ldr	r1, [r7, #0]
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 fbc0 	bl	800e98c <USBD_CtlError>
                  break;
 800e20c:	e054      	b.n	800e2b8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e20e:	7bbb      	ldrb	r3, [r7, #14]
 800e210:	f003 020f 	and.w	r2, r3, #15
 800e214:	6879      	ldr	r1, [r7, #4]
 800e216:	4613      	mov	r3, r2
 800e218:	009b      	lsls	r3, r3, #2
 800e21a:	4413      	add	r3, r2
 800e21c:	009b      	lsls	r3, r3, #2
 800e21e:	440b      	add	r3, r1
 800e220:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e224:	881b      	ldrh	r3, [r3, #0]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d104      	bne.n	800e234 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e22a:	6839      	ldr	r1, [r7, #0]
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f000 fbad 	bl	800e98c <USBD_CtlError>
                  break;
 800e232:	e041      	b.n	800e2b8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e234:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	da0b      	bge.n	800e254 <USBD_StdEPReq+0x23e>
 800e23c:	7bbb      	ldrb	r3, [r7, #14]
 800e23e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e242:	4613      	mov	r3, r2
 800e244:	009b      	lsls	r3, r3, #2
 800e246:	4413      	add	r3, r2
 800e248:	009b      	lsls	r3, r3, #2
 800e24a:	3310      	adds	r3, #16
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	4413      	add	r3, r2
 800e250:	3304      	adds	r3, #4
 800e252:	e00b      	b.n	800e26c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e254:	7bbb      	ldrb	r3, [r7, #14]
 800e256:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e25a:	4613      	mov	r3, r2
 800e25c:	009b      	lsls	r3, r3, #2
 800e25e:	4413      	add	r3, r2
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e266:	687a      	ldr	r2, [r7, #4]
 800e268:	4413      	add	r3, r2
 800e26a:	3304      	adds	r3, #4
 800e26c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e26e:	7bbb      	ldrb	r3, [r7, #14]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d002      	beq.n	800e27a <USBD_StdEPReq+0x264>
 800e274:	7bbb      	ldrb	r3, [r7, #14]
 800e276:	2b80      	cmp	r3, #128	@ 0x80
 800e278:	d103      	bne.n	800e282 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	2200      	movs	r2, #0
 800e27e:	601a      	str	r2, [r3, #0]
 800e280:	e00e      	b.n	800e2a0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e282:	7bbb      	ldrb	r3, [r7, #14]
 800e284:	4619      	mov	r1, r3
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f004 fe38 	bl	8012efc <USBD_LL_IsStallEP>
 800e28c:	4603      	mov	r3, r0
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d003      	beq.n	800e29a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	2201      	movs	r2, #1
 800e296:	601a      	str	r2, [r3, #0]
 800e298:	e002      	b.n	800e2a0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	2200      	movs	r2, #0
 800e29e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	2202      	movs	r2, #2
 800e2a4:	4619      	mov	r1, r3
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f000 fbe1 	bl	800ea6e <USBD_CtlSendData>
              break;
 800e2ac:	e004      	b.n	800e2b8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e2ae:	6839      	ldr	r1, [r7, #0]
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f000 fb6b 	bl	800e98c <USBD_CtlError>
              break;
 800e2b6:	bf00      	nop
          }
          break;
 800e2b8:	e004      	b.n	800e2c4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e2ba:	6839      	ldr	r1, [r7, #0]
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 fb65 	bl	800e98c <USBD_CtlError>
          break;
 800e2c2:	bf00      	nop
      }
      break;
 800e2c4:	e004      	b.n	800e2d0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e2c6:	6839      	ldr	r1, [r7, #0]
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f000 fb5f 	bl	800e98c <USBD_CtlError>
      break;
 800e2ce:	bf00      	nop
  }

  return ret;
 800e2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3710      	adds	r7, #16
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
	...

0800e2dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	885b      	ldrh	r3, [r3, #2]
 800e2f6:	0a1b      	lsrs	r3, r3, #8
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	2b0e      	cmp	r3, #14
 800e2fe:	f200 8152 	bhi.w	800e5a6 <USBD_GetDescriptor+0x2ca>
 800e302:	a201      	add	r2, pc, #4	@ (adr r2, 800e308 <USBD_GetDescriptor+0x2c>)
 800e304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e308:	0800e379 	.word	0x0800e379
 800e30c:	0800e391 	.word	0x0800e391
 800e310:	0800e3d1 	.word	0x0800e3d1
 800e314:	0800e5a7 	.word	0x0800e5a7
 800e318:	0800e5a7 	.word	0x0800e5a7
 800e31c:	0800e547 	.word	0x0800e547
 800e320:	0800e573 	.word	0x0800e573
 800e324:	0800e5a7 	.word	0x0800e5a7
 800e328:	0800e5a7 	.word	0x0800e5a7
 800e32c:	0800e5a7 	.word	0x0800e5a7
 800e330:	0800e5a7 	.word	0x0800e5a7
 800e334:	0800e5a7 	.word	0x0800e5a7
 800e338:	0800e5a7 	.word	0x0800e5a7
 800e33c:	0800e5a7 	.word	0x0800e5a7
 800e340:	0800e345 	.word	0x0800e345
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e34a:	69db      	ldr	r3, [r3, #28]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d00b      	beq.n	800e368 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e356:	69db      	ldr	r3, [r3, #28]
 800e358:	687a      	ldr	r2, [r7, #4]
 800e35a:	7c12      	ldrb	r2, [r2, #16]
 800e35c:	f107 0108 	add.w	r1, r7, #8
 800e360:	4610      	mov	r0, r2
 800e362:	4798      	blx	r3
 800e364:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e366:	e126      	b.n	800e5b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e368:	6839      	ldr	r1, [r7, #0]
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 fb0e 	bl	800e98c <USBD_CtlError>
        err++;
 800e370:	7afb      	ldrb	r3, [r7, #11]
 800e372:	3301      	adds	r3, #1
 800e374:	72fb      	strb	r3, [r7, #11]
      break;
 800e376:	e11e      	b.n	800e5b6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	687a      	ldr	r2, [r7, #4]
 800e382:	7c12      	ldrb	r2, [r2, #16]
 800e384:	f107 0108 	add.w	r1, r7, #8
 800e388:	4610      	mov	r0, r2
 800e38a:	4798      	blx	r3
 800e38c:	60f8      	str	r0, [r7, #12]
      break;
 800e38e:	e112      	b.n	800e5b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	7c1b      	ldrb	r3, [r3, #16]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d10d      	bne.n	800e3b4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e39e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3a0:	f107 0208 	add.w	r2, r7, #8
 800e3a4:	4610      	mov	r0, r2
 800e3a6:	4798      	blx	r3
 800e3a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	2202      	movs	r2, #2
 800e3b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e3b2:	e100      	b.n	800e5b6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3bc:	f107 0208 	add.w	r2, r7, #8
 800e3c0:	4610      	mov	r0, r2
 800e3c2:	4798      	blx	r3
 800e3c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	2202      	movs	r2, #2
 800e3cc:	701a      	strb	r2, [r3, #0]
      break;
 800e3ce:	e0f2      	b.n	800e5b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	885b      	ldrh	r3, [r3, #2]
 800e3d4:	b2db      	uxtb	r3, r3
 800e3d6:	2b05      	cmp	r3, #5
 800e3d8:	f200 80ac 	bhi.w	800e534 <USBD_GetDescriptor+0x258>
 800e3dc:	a201      	add	r2, pc, #4	@ (adr r2, 800e3e4 <USBD_GetDescriptor+0x108>)
 800e3de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3e2:	bf00      	nop
 800e3e4:	0800e3fd 	.word	0x0800e3fd
 800e3e8:	0800e431 	.word	0x0800e431
 800e3ec:	0800e465 	.word	0x0800e465
 800e3f0:	0800e499 	.word	0x0800e499
 800e3f4:	0800e4cd 	.word	0x0800e4cd
 800e3f8:	0800e501 	.word	0x0800e501
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d00b      	beq.n	800e420 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	7c12      	ldrb	r2, [r2, #16]
 800e414:	f107 0108 	add.w	r1, r7, #8
 800e418:	4610      	mov	r0, r2
 800e41a:	4798      	blx	r3
 800e41c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e41e:	e091      	b.n	800e544 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e420:	6839      	ldr	r1, [r7, #0]
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f000 fab2 	bl	800e98c <USBD_CtlError>
            err++;
 800e428:	7afb      	ldrb	r3, [r7, #11]
 800e42a:	3301      	adds	r3, #1
 800e42c:	72fb      	strb	r3, [r7, #11]
          break;
 800e42e:	e089      	b.n	800e544 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e436:	689b      	ldr	r3, [r3, #8]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d00b      	beq.n	800e454 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e442:	689b      	ldr	r3, [r3, #8]
 800e444:	687a      	ldr	r2, [r7, #4]
 800e446:	7c12      	ldrb	r2, [r2, #16]
 800e448:	f107 0108 	add.w	r1, r7, #8
 800e44c:	4610      	mov	r0, r2
 800e44e:	4798      	blx	r3
 800e450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e452:	e077      	b.n	800e544 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e454:	6839      	ldr	r1, [r7, #0]
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f000 fa98 	bl	800e98c <USBD_CtlError>
            err++;
 800e45c:	7afb      	ldrb	r3, [r7, #11]
 800e45e:	3301      	adds	r3, #1
 800e460:	72fb      	strb	r3, [r7, #11]
          break;
 800e462:	e06f      	b.n	800e544 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e46a:	68db      	ldr	r3, [r3, #12]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d00b      	beq.n	800e488 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	7c12      	ldrb	r2, [r2, #16]
 800e47c:	f107 0108 	add.w	r1, r7, #8
 800e480:	4610      	mov	r0, r2
 800e482:	4798      	blx	r3
 800e484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e486:	e05d      	b.n	800e544 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e488:	6839      	ldr	r1, [r7, #0]
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f000 fa7e 	bl	800e98c <USBD_CtlError>
            err++;
 800e490:	7afb      	ldrb	r3, [r7, #11]
 800e492:	3301      	adds	r3, #1
 800e494:	72fb      	strb	r3, [r7, #11]
          break;
 800e496:	e055      	b.n	800e544 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e49e:	691b      	ldr	r3, [r3, #16]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d00b      	beq.n	800e4bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4aa:	691b      	ldr	r3, [r3, #16]
 800e4ac:	687a      	ldr	r2, [r7, #4]
 800e4ae:	7c12      	ldrb	r2, [r2, #16]
 800e4b0:	f107 0108 	add.w	r1, r7, #8
 800e4b4:	4610      	mov	r0, r2
 800e4b6:	4798      	blx	r3
 800e4b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4ba:	e043      	b.n	800e544 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e4bc:	6839      	ldr	r1, [r7, #0]
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 fa64 	bl	800e98c <USBD_CtlError>
            err++;
 800e4c4:	7afb      	ldrb	r3, [r7, #11]
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	72fb      	strb	r3, [r7, #11]
          break;
 800e4ca:	e03b      	b.n	800e544 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4d2:	695b      	ldr	r3, [r3, #20]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d00b      	beq.n	800e4f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4de:	695b      	ldr	r3, [r3, #20]
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	7c12      	ldrb	r2, [r2, #16]
 800e4e4:	f107 0108 	add.w	r1, r7, #8
 800e4e8:	4610      	mov	r0, r2
 800e4ea:	4798      	blx	r3
 800e4ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4ee:	e029      	b.n	800e544 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e4f0:	6839      	ldr	r1, [r7, #0]
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f000 fa4a 	bl	800e98c <USBD_CtlError>
            err++;
 800e4f8:	7afb      	ldrb	r3, [r7, #11]
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	72fb      	strb	r3, [r7, #11]
          break;
 800e4fe:	e021      	b.n	800e544 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e506:	699b      	ldr	r3, [r3, #24]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d00b      	beq.n	800e524 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e512:	699b      	ldr	r3, [r3, #24]
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	7c12      	ldrb	r2, [r2, #16]
 800e518:	f107 0108 	add.w	r1, r7, #8
 800e51c:	4610      	mov	r0, r2
 800e51e:	4798      	blx	r3
 800e520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e522:	e00f      	b.n	800e544 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e524:	6839      	ldr	r1, [r7, #0]
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f000 fa30 	bl	800e98c <USBD_CtlError>
            err++;
 800e52c:	7afb      	ldrb	r3, [r7, #11]
 800e52e:	3301      	adds	r3, #1
 800e530:	72fb      	strb	r3, [r7, #11]
          break;
 800e532:	e007      	b.n	800e544 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e534:	6839      	ldr	r1, [r7, #0]
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f000 fa28 	bl	800e98c <USBD_CtlError>
          err++;
 800e53c:	7afb      	ldrb	r3, [r7, #11]
 800e53e:	3301      	adds	r3, #1
 800e540:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e542:	bf00      	nop
      }
      break;
 800e544:	e037      	b.n	800e5b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	7c1b      	ldrb	r3, [r3, #16]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d109      	bne.n	800e562 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e556:	f107 0208 	add.w	r2, r7, #8
 800e55a:	4610      	mov	r0, r2
 800e55c:	4798      	blx	r3
 800e55e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e560:	e029      	b.n	800e5b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e562:	6839      	ldr	r1, [r7, #0]
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f000 fa11 	bl	800e98c <USBD_CtlError>
        err++;
 800e56a:	7afb      	ldrb	r3, [r7, #11]
 800e56c:	3301      	adds	r3, #1
 800e56e:	72fb      	strb	r3, [r7, #11]
      break;
 800e570:	e021      	b.n	800e5b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	7c1b      	ldrb	r3, [r3, #16]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d10d      	bne.n	800e596 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e582:	f107 0208 	add.w	r2, r7, #8
 800e586:	4610      	mov	r0, r2
 800e588:	4798      	blx	r3
 800e58a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	3301      	adds	r3, #1
 800e590:	2207      	movs	r2, #7
 800e592:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e594:	e00f      	b.n	800e5b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e596:	6839      	ldr	r1, [r7, #0]
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f000 f9f7 	bl	800e98c <USBD_CtlError>
        err++;
 800e59e:	7afb      	ldrb	r3, [r7, #11]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	72fb      	strb	r3, [r7, #11]
      break;
 800e5a4:	e007      	b.n	800e5b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e5a6:	6839      	ldr	r1, [r7, #0]
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f000 f9ef 	bl	800e98c <USBD_CtlError>
      err++;
 800e5ae:	7afb      	ldrb	r3, [r7, #11]
 800e5b0:	3301      	adds	r3, #1
 800e5b2:	72fb      	strb	r3, [r7, #11]
      break;
 800e5b4:	bf00      	nop
  }

  if (err != 0U)
 800e5b6:	7afb      	ldrb	r3, [r7, #11]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d11e      	bne.n	800e5fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	88db      	ldrh	r3, [r3, #6]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d016      	beq.n	800e5f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e5c4:	893b      	ldrh	r3, [r7, #8]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d00e      	beq.n	800e5e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	88da      	ldrh	r2, [r3, #6]
 800e5ce:	893b      	ldrh	r3, [r7, #8]
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	bf28      	it	cs
 800e5d4:	4613      	movcs	r3, r2
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e5da:	893b      	ldrh	r3, [r7, #8]
 800e5dc:	461a      	mov	r2, r3
 800e5de:	68f9      	ldr	r1, [r7, #12]
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f000 fa44 	bl	800ea6e <USBD_CtlSendData>
 800e5e6:	e009      	b.n	800e5fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e5e8:	6839      	ldr	r1, [r7, #0]
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f000 f9ce 	bl	800e98c <USBD_CtlError>
 800e5f0:	e004      	b.n	800e5fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f000 fa95 	bl	800eb22 <USBD_CtlSendStatus>
 800e5f8:	e000      	b.n	800e5fc <USBD_GetDescriptor+0x320>
    return;
 800e5fa:	bf00      	nop
  }
}
 800e5fc:	3710      	adds	r7, #16
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop

0800e604 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	889b      	ldrh	r3, [r3, #4]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d131      	bne.n	800e67a <USBD_SetAddress+0x76>
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	88db      	ldrh	r3, [r3, #6]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d12d      	bne.n	800e67a <USBD_SetAddress+0x76>
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	885b      	ldrh	r3, [r3, #2]
 800e622:	2b7f      	cmp	r3, #127	@ 0x7f
 800e624:	d829      	bhi.n	800e67a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	885b      	ldrh	r3, [r3, #2]
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e630:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e638:	b2db      	uxtb	r3, r3
 800e63a:	2b03      	cmp	r3, #3
 800e63c:	d104      	bne.n	800e648 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e63e:	6839      	ldr	r1, [r7, #0]
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f000 f9a3 	bl	800e98c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e646:	e01d      	b.n	800e684 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	7bfa      	ldrb	r2, [r7, #15]
 800e64c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e650:	7bfb      	ldrb	r3, [r7, #15]
 800e652:	4619      	mov	r1, r3
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f004 fc7d 	bl	8012f54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e65a:	6878      	ldr	r0, [r7, #4]
 800e65c:	f000 fa61 	bl	800eb22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e660:	7bfb      	ldrb	r3, [r7, #15]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d004      	beq.n	800e670 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2202      	movs	r2, #2
 800e66a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e66e:	e009      	b.n	800e684 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2201      	movs	r2, #1
 800e674:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e678:	e004      	b.n	800e684 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e67a:	6839      	ldr	r1, [r7, #0]
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f000 f985 	bl	800e98c <USBD_CtlError>
  }
}
 800e682:	bf00      	nop
 800e684:	bf00      	nop
 800e686:	3710      	adds	r7, #16
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b084      	sub	sp, #16
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e696:	2300      	movs	r3, #0
 800e698:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	885b      	ldrh	r3, [r3, #2]
 800e69e:	b2da      	uxtb	r2, r3
 800e6a0:	4b4c      	ldr	r3, [pc, #304]	@ (800e7d4 <USBD_SetConfig+0x148>)
 800e6a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e6a4:	4b4b      	ldr	r3, [pc, #300]	@ (800e7d4 <USBD_SetConfig+0x148>)
 800e6a6:	781b      	ldrb	r3, [r3, #0]
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	d905      	bls.n	800e6b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e6ac:	6839      	ldr	r1, [r7, #0]
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f000 f96c 	bl	800e98c <USBD_CtlError>
    return USBD_FAIL;
 800e6b4:	2303      	movs	r3, #3
 800e6b6:	e088      	b.n	800e7ca <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6be:	b2db      	uxtb	r3, r3
 800e6c0:	2b02      	cmp	r3, #2
 800e6c2:	d002      	beq.n	800e6ca <USBD_SetConfig+0x3e>
 800e6c4:	2b03      	cmp	r3, #3
 800e6c6:	d025      	beq.n	800e714 <USBD_SetConfig+0x88>
 800e6c8:	e071      	b.n	800e7ae <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e6ca:	4b42      	ldr	r3, [pc, #264]	@ (800e7d4 <USBD_SetConfig+0x148>)
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d01c      	beq.n	800e70c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e6d2:	4b40      	ldr	r3, [pc, #256]	@ (800e7d4 <USBD_SetConfig+0x148>)
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e6dc:	4b3d      	ldr	r3, [pc, #244]	@ (800e7d4 <USBD_SetConfig+0x148>)
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f7ff f992 	bl	800da0c <USBD_SetClassConfig>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e6ec:	7bfb      	ldrb	r3, [r7, #15]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d004      	beq.n	800e6fc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e6f2:	6839      	ldr	r1, [r7, #0]
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f000 f949 	bl	800e98c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e6fa:	e065      	b.n	800e7c8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f000 fa10 	bl	800eb22 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2203      	movs	r2, #3
 800e706:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e70a:	e05d      	b.n	800e7c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f000 fa08 	bl	800eb22 <USBD_CtlSendStatus>
      break;
 800e712:	e059      	b.n	800e7c8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e714:	4b2f      	ldr	r3, [pc, #188]	@ (800e7d4 <USBD_SetConfig+0x148>)
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d112      	bne.n	800e742 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2202      	movs	r2, #2
 800e720:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e724:	4b2b      	ldr	r3, [pc, #172]	@ (800e7d4 <USBD_SetConfig+0x148>)
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	461a      	mov	r2, r3
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e72e:	4b29      	ldr	r3, [pc, #164]	@ (800e7d4 <USBD_SetConfig+0x148>)
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	4619      	mov	r1, r3
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f7ff f985 	bl	800da44 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f000 f9f1 	bl	800eb22 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e740:	e042      	b.n	800e7c8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e742:	4b24      	ldr	r3, [pc, #144]	@ (800e7d4 <USBD_SetConfig+0x148>)
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	461a      	mov	r2, r3
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d02a      	beq.n	800e7a6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	b2db      	uxtb	r3, r3
 800e756:	4619      	mov	r1, r3
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f7ff f973 	bl	800da44 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e75e:	4b1d      	ldr	r3, [pc, #116]	@ (800e7d4 <USBD_SetConfig+0x148>)
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	461a      	mov	r2, r3
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e768:	4b1a      	ldr	r3, [pc, #104]	@ (800e7d4 <USBD_SetConfig+0x148>)
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	4619      	mov	r1, r3
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f7ff f94c 	bl	800da0c <USBD_SetClassConfig>
 800e774:	4603      	mov	r3, r0
 800e776:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e778:	7bfb      	ldrb	r3, [r7, #15]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d00f      	beq.n	800e79e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e77e:	6839      	ldr	r1, [r7, #0]
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f000 f903 	bl	800e98c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	b2db      	uxtb	r3, r3
 800e78c:	4619      	mov	r1, r3
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f7ff f958 	bl	800da44 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2202      	movs	r2, #2
 800e798:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e79c:	e014      	b.n	800e7c8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f000 f9bf 	bl	800eb22 <USBD_CtlSendStatus>
      break;
 800e7a4:	e010      	b.n	800e7c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 f9bb 	bl	800eb22 <USBD_CtlSendStatus>
      break;
 800e7ac:	e00c      	b.n	800e7c8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e7ae:	6839      	ldr	r1, [r7, #0]
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 f8eb 	bl	800e98c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e7b6:	4b07      	ldr	r3, [pc, #28]	@ (800e7d4 <USBD_SetConfig+0x148>)
 800e7b8:	781b      	ldrb	r3, [r3, #0]
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f7ff f941 	bl	800da44 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e7c2:	2303      	movs	r3, #3
 800e7c4:	73fb      	strb	r3, [r7, #15]
      break;
 800e7c6:	bf00      	nop
  }

  return ret;
 800e7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3710      	adds	r7, #16
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	20004dd4 	.word	0x20004dd4

0800e7d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	88db      	ldrh	r3, [r3, #6]
 800e7e6:	2b01      	cmp	r3, #1
 800e7e8:	d004      	beq.n	800e7f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e7ea:	6839      	ldr	r1, [r7, #0]
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f000 f8cd 	bl	800e98c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e7f2:	e023      	b.n	800e83c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	2b02      	cmp	r3, #2
 800e7fe:	dc02      	bgt.n	800e806 <USBD_GetConfig+0x2e>
 800e800:	2b00      	cmp	r3, #0
 800e802:	dc03      	bgt.n	800e80c <USBD_GetConfig+0x34>
 800e804:	e015      	b.n	800e832 <USBD_GetConfig+0x5a>
 800e806:	2b03      	cmp	r3, #3
 800e808:	d00b      	beq.n	800e822 <USBD_GetConfig+0x4a>
 800e80a:	e012      	b.n	800e832 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2200      	movs	r2, #0
 800e810:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	3308      	adds	r3, #8
 800e816:	2201      	movs	r2, #1
 800e818:	4619      	mov	r1, r3
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 f927 	bl	800ea6e <USBD_CtlSendData>
        break;
 800e820:	e00c      	b.n	800e83c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	3304      	adds	r3, #4
 800e826:	2201      	movs	r2, #1
 800e828:	4619      	mov	r1, r3
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f000 f91f 	bl	800ea6e <USBD_CtlSendData>
        break;
 800e830:	e004      	b.n	800e83c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e832:	6839      	ldr	r1, [r7, #0]
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f000 f8a9 	bl	800e98c <USBD_CtlError>
        break;
 800e83a:	bf00      	nop
}
 800e83c:	bf00      	nop
 800e83e:	3708      	adds	r7, #8
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b082      	sub	sp, #8
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e854:	b2db      	uxtb	r3, r3
 800e856:	3b01      	subs	r3, #1
 800e858:	2b02      	cmp	r3, #2
 800e85a:	d81e      	bhi.n	800e89a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	88db      	ldrh	r3, [r3, #6]
 800e860:	2b02      	cmp	r3, #2
 800e862:	d004      	beq.n	800e86e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e864:	6839      	ldr	r1, [r7, #0]
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f000 f890 	bl	800e98c <USBD_CtlError>
        break;
 800e86c:	e01a      	b.n	800e8a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2201      	movs	r2, #1
 800e872:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d005      	beq.n	800e88a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	68db      	ldr	r3, [r3, #12]
 800e882:	f043 0202 	orr.w	r2, r3, #2
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	330c      	adds	r3, #12
 800e88e:	2202      	movs	r2, #2
 800e890:	4619      	mov	r1, r3
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f000 f8eb 	bl	800ea6e <USBD_CtlSendData>
      break;
 800e898:	e004      	b.n	800e8a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e89a:	6839      	ldr	r1, [r7, #0]
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f000 f875 	bl	800e98c <USBD_CtlError>
      break;
 800e8a2:	bf00      	nop
  }
}
 800e8a4:	bf00      	nop
 800e8a6:	3708      	adds	r7, #8
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b082      	sub	sp, #8
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	885b      	ldrh	r3, [r3, #2]
 800e8ba:	2b01      	cmp	r3, #1
 800e8bc:	d106      	bne.n	800e8cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 f92b 	bl	800eb22 <USBD_CtlSendStatus>
  }
}
 800e8cc:	bf00      	nop
 800e8ce:	3708      	adds	r7, #8
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}

0800e8d4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b082      	sub	sp, #8
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8e4:	b2db      	uxtb	r3, r3
 800e8e6:	3b01      	subs	r3, #1
 800e8e8:	2b02      	cmp	r3, #2
 800e8ea:	d80b      	bhi.n	800e904 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	885b      	ldrh	r3, [r3, #2]
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	d10c      	bne.n	800e90e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f000 f910 	bl	800eb22 <USBD_CtlSendStatus>
      }
      break;
 800e902:	e004      	b.n	800e90e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e904:	6839      	ldr	r1, [r7, #0]
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f000 f840 	bl	800e98c <USBD_CtlError>
      break;
 800e90c:	e000      	b.n	800e910 <USBD_ClrFeature+0x3c>
      break;
 800e90e:	bf00      	nop
  }
}
 800e910:	bf00      	nop
 800e912:	3708      	adds	r7, #8
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b084      	sub	sp, #16
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	781a      	ldrb	r2, [r3, #0]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	3301      	adds	r3, #1
 800e932:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	781a      	ldrb	r2, [r3, #0]
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	3301      	adds	r3, #1
 800e940:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e942:	68f8      	ldr	r0, [r7, #12]
 800e944:	f7ff fa92 	bl	800de6c <SWAPBYTE>
 800e948:	4603      	mov	r3, r0
 800e94a:	461a      	mov	r2, r3
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	3301      	adds	r3, #1
 800e954:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	3301      	adds	r3, #1
 800e95a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f7ff fa85 	bl	800de6c <SWAPBYTE>
 800e962:	4603      	mov	r3, r0
 800e964:	461a      	mov	r2, r3
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	3301      	adds	r3, #1
 800e96e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	3301      	adds	r3, #1
 800e974:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e976:	68f8      	ldr	r0, [r7, #12]
 800e978:	f7ff fa78 	bl	800de6c <SWAPBYTE>
 800e97c:	4603      	mov	r3, r0
 800e97e:	461a      	mov	r2, r3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	80da      	strh	r2, [r3, #6]
}
 800e984:	bf00      	nop
 800e986:	3710      	adds	r7, #16
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e996:	2180      	movs	r1, #128	@ 0x80
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f004 fa71 	bl	8012e80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e99e:	2100      	movs	r1, #0
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f004 fa6d 	bl	8012e80 <USBD_LL_StallEP>
}
 800e9a6:	bf00      	nop
 800e9a8:	3708      	adds	r7, #8
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}

0800e9ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e9ae:	b580      	push	{r7, lr}
 800e9b0:	b086      	sub	sp, #24
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	60f8      	str	r0, [r7, #12]
 800e9b6:	60b9      	str	r1, [r7, #8]
 800e9b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d036      	beq.n	800ea32 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e9c8:	6938      	ldr	r0, [r7, #16]
 800e9ca:	f000 f836 	bl	800ea3a <USBD_GetLen>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	005b      	lsls	r3, r3, #1
 800e9d6:	b29a      	uxth	r2, r3
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e9dc:	7dfb      	ldrb	r3, [r7, #23]
 800e9de:	68ba      	ldr	r2, [r7, #8]
 800e9e0:	4413      	add	r3, r2
 800e9e2:	687a      	ldr	r2, [r7, #4]
 800e9e4:	7812      	ldrb	r2, [r2, #0]
 800e9e6:	701a      	strb	r2, [r3, #0]
  idx++;
 800e9e8:	7dfb      	ldrb	r3, [r7, #23]
 800e9ea:	3301      	adds	r3, #1
 800e9ec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e9ee:	7dfb      	ldrb	r3, [r7, #23]
 800e9f0:	68ba      	ldr	r2, [r7, #8]
 800e9f2:	4413      	add	r3, r2
 800e9f4:	2203      	movs	r2, #3
 800e9f6:	701a      	strb	r2, [r3, #0]
  idx++;
 800e9f8:	7dfb      	ldrb	r3, [r7, #23]
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e9fe:	e013      	b.n	800ea28 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ea00:	7dfb      	ldrb	r3, [r7, #23]
 800ea02:	68ba      	ldr	r2, [r7, #8]
 800ea04:	4413      	add	r3, r2
 800ea06:	693a      	ldr	r2, [r7, #16]
 800ea08:	7812      	ldrb	r2, [r2, #0]
 800ea0a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	3301      	adds	r3, #1
 800ea10:	613b      	str	r3, [r7, #16]
    idx++;
 800ea12:	7dfb      	ldrb	r3, [r7, #23]
 800ea14:	3301      	adds	r3, #1
 800ea16:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ea18:	7dfb      	ldrb	r3, [r7, #23]
 800ea1a:	68ba      	ldr	r2, [r7, #8]
 800ea1c:	4413      	add	r3, r2
 800ea1e:	2200      	movs	r2, #0
 800ea20:	701a      	strb	r2, [r3, #0]
    idx++;
 800ea22:	7dfb      	ldrb	r3, [r7, #23]
 800ea24:	3301      	adds	r3, #1
 800ea26:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	781b      	ldrb	r3, [r3, #0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d1e7      	bne.n	800ea00 <USBD_GetString+0x52>
 800ea30:	e000      	b.n	800ea34 <USBD_GetString+0x86>
    return;
 800ea32:	bf00      	nop
  }
}
 800ea34:	3718      	adds	r7, #24
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}

0800ea3a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ea3a:	b480      	push	{r7}
 800ea3c:	b085      	sub	sp, #20
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ea42:	2300      	movs	r3, #0
 800ea44:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ea4a:	e005      	b.n	800ea58 <USBD_GetLen+0x1e>
  {
    len++;
 800ea4c:	7bfb      	ldrb	r3, [r7, #15]
 800ea4e:	3301      	adds	r3, #1
 800ea50:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	3301      	adds	r3, #1
 800ea56:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	781b      	ldrb	r3, [r3, #0]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d1f5      	bne.n	800ea4c <USBD_GetLen+0x12>
  }

  return len;
 800ea60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3714      	adds	r7, #20
 800ea66:	46bd      	mov	sp, r7
 800ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6c:	4770      	bx	lr

0800ea6e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ea6e:	b580      	push	{r7, lr}
 800ea70:	b084      	sub	sp, #16
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	60f8      	str	r0, [r7, #12]
 800ea76:	60b9      	str	r1, [r7, #8]
 800ea78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	2202      	movs	r2, #2
 800ea7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	687a      	ldr	r2, [r7, #4]
 800ea86:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	687a      	ldr	r2, [r7, #4]
 800ea8c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	68ba      	ldr	r2, [r7, #8]
 800ea92:	2100      	movs	r1, #0
 800ea94:	68f8      	ldr	r0, [r7, #12]
 800ea96:	f004 fa7c 	bl	8012f92 <USBD_LL_Transmit>

  return USBD_OK;
 800ea9a:	2300      	movs	r3, #0
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3710      	adds	r7, #16
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	60b9      	str	r1, [r7, #8]
 800eaae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	68ba      	ldr	r2, [r7, #8]
 800eab4:	2100      	movs	r1, #0
 800eab6:	68f8      	ldr	r0, [r7, #12]
 800eab8:	f004 fa6b 	bl	8012f92 <USBD_LL_Transmit>

  return USBD_OK;
 800eabc:	2300      	movs	r3, #0
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3710      	adds	r7, #16
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}

0800eac6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eac6:	b580      	push	{r7, lr}
 800eac8:	b084      	sub	sp, #16
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	60f8      	str	r0, [r7, #12]
 800eace:	60b9      	str	r1, [r7, #8]
 800ead0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2203      	movs	r2, #3
 800ead6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	687a      	ldr	r2, [r7, #4]
 800eade:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	687a      	ldr	r2, [r7, #4]
 800eae6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	68ba      	ldr	r2, [r7, #8]
 800eaee:	2100      	movs	r1, #0
 800eaf0:	68f8      	ldr	r0, [r7, #12]
 800eaf2:	f004 fa6f 	bl	8012fd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eaf6:	2300      	movs	r3, #0
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3710      	adds	r7, #16
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b084      	sub	sp, #16
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	60f8      	str	r0, [r7, #12]
 800eb08:	60b9      	str	r1, [r7, #8]
 800eb0a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	68ba      	ldr	r2, [r7, #8]
 800eb10:	2100      	movs	r1, #0
 800eb12:	68f8      	ldr	r0, [r7, #12]
 800eb14:	f004 fa5e 	bl	8012fd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eb18:	2300      	movs	r3, #0
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3710      	adds	r7, #16
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800eb22:	b580      	push	{r7, lr}
 800eb24:	b082      	sub	sp, #8
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2204      	movs	r2, #4
 800eb2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800eb32:	2300      	movs	r3, #0
 800eb34:	2200      	movs	r2, #0
 800eb36:	2100      	movs	r1, #0
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f004 fa2a 	bl	8012f92 <USBD_LL_Transmit>

  return USBD_OK;
 800eb3e:	2300      	movs	r3, #0
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3708      	adds	r7, #8
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2205      	movs	r2, #5
 800eb54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb58:	2300      	movs	r3, #0
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	2100      	movs	r1, #0
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f004 fa38 	bl	8012fd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eb64:	2300      	movs	r3, #0
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3708      	adds	r7, #8
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
	...

0800eb70 <__NVIC_SetPriority>:
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	4603      	mov	r3, r0
 800eb78:	6039      	str	r1, [r7, #0]
 800eb7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800eb7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	db0a      	blt.n	800eb9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	b2da      	uxtb	r2, r3
 800eb88:	490c      	ldr	r1, [pc, #48]	@ (800ebbc <__NVIC_SetPriority+0x4c>)
 800eb8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb8e:	0112      	lsls	r2, r2, #4
 800eb90:	b2d2      	uxtb	r2, r2
 800eb92:	440b      	add	r3, r1
 800eb94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800eb98:	e00a      	b.n	800ebb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	b2da      	uxtb	r2, r3
 800eb9e:	4908      	ldr	r1, [pc, #32]	@ (800ebc0 <__NVIC_SetPriority+0x50>)
 800eba0:	79fb      	ldrb	r3, [r7, #7]
 800eba2:	f003 030f 	and.w	r3, r3, #15
 800eba6:	3b04      	subs	r3, #4
 800eba8:	0112      	lsls	r2, r2, #4
 800ebaa:	b2d2      	uxtb	r2, r2
 800ebac:	440b      	add	r3, r1
 800ebae:	761a      	strb	r2, [r3, #24]
}
 800ebb0:	bf00      	nop
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr
 800ebbc:	e000e100 	.word	0xe000e100
 800ebc0:	e000ed00 	.word	0xe000ed00

0800ebc4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ebc8:	4b05      	ldr	r3, [pc, #20]	@ (800ebe0 <SysTick_Handler+0x1c>)
 800ebca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ebcc:	f002 fc30 	bl	8011430 <xTaskGetSchedulerState>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b01      	cmp	r3, #1
 800ebd4:	d001      	beq.n	800ebda <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ebd6:	f003 fb27 	bl	8012228 <xPortSysTickHandler>
  }
}
 800ebda:	bf00      	nop
 800ebdc:	bd80      	pop	{r7, pc}
 800ebde:	bf00      	nop
 800ebe0:	e000e010 	.word	0xe000e010

0800ebe4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ebe8:	2100      	movs	r1, #0
 800ebea:	f06f 0004 	mvn.w	r0, #4
 800ebee:	f7ff ffbf 	bl	800eb70 <__NVIC_SetPriority>
#endif
}
 800ebf2:	bf00      	nop
 800ebf4:	bd80      	pop	{r7, pc}
	...

0800ebf8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ebf8:	b480      	push	{r7}
 800ebfa:	b083      	sub	sp, #12
 800ebfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebfe:	f3ef 8305 	mrs	r3, IPSR
 800ec02:	603b      	str	r3, [r7, #0]
  return(result);
 800ec04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d003      	beq.n	800ec12 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ec0a:	f06f 0305 	mvn.w	r3, #5
 800ec0e:	607b      	str	r3, [r7, #4]
 800ec10:	e00c      	b.n	800ec2c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ec12:	4b0a      	ldr	r3, [pc, #40]	@ (800ec3c <osKernelInitialize+0x44>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d105      	bne.n	800ec26 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ec1a:	4b08      	ldr	r3, [pc, #32]	@ (800ec3c <osKernelInitialize+0x44>)
 800ec1c:	2201      	movs	r2, #1
 800ec1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ec20:	2300      	movs	r3, #0
 800ec22:	607b      	str	r3, [r7, #4]
 800ec24:	e002      	b.n	800ec2c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ec26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ec2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ec2c:	687b      	ldr	r3, [r7, #4]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	370c      	adds	r7, #12
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
 800ec3a:	bf00      	nop
 800ec3c:	20004dd8 	.word	0x20004dd8

0800ec40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec46:	f3ef 8305 	mrs	r3, IPSR
 800ec4a:	603b      	str	r3, [r7, #0]
  return(result);
 800ec4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d003      	beq.n	800ec5a <osKernelStart+0x1a>
    stat = osErrorISR;
 800ec52:	f06f 0305 	mvn.w	r3, #5
 800ec56:	607b      	str	r3, [r7, #4]
 800ec58:	e010      	b.n	800ec7c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ec5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ec88 <osKernelStart+0x48>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d109      	bne.n	800ec76 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ec62:	f7ff ffbf 	bl	800ebe4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ec66:	4b08      	ldr	r3, [pc, #32]	@ (800ec88 <osKernelStart+0x48>)
 800ec68:	2202      	movs	r2, #2
 800ec6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ec6c:	f001 ff3e 	bl	8010aec <vTaskStartScheduler>
      stat = osOK;
 800ec70:	2300      	movs	r3, #0
 800ec72:	607b      	str	r3, [r7, #4]
 800ec74:	e002      	b.n	800ec7c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ec76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ec7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ec7c:	687b      	ldr	r3, [r7, #4]
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3708      	adds	r7, #8
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	20004dd8 	.word	0x20004dd8

0800ec8c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec92:	f3ef 8305 	mrs	r3, IPSR
 800ec96:	603b      	str	r3, [r7, #0]
  return(result);
 800ec98:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d003      	beq.n	800eca6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800ec9e:	f002 f853 	bl	8010d48 <xTaskGetTickCountFromISR>
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	e002      	b.n	800ecac <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800eca6:	f002 f83f 	bl	8010d28 <xTaskGetTickCount>
 800ecaa:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800ecac:	687b      	ldr	r3, [r7, #4]
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3708      	adds	r7, #8
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}

0800ecb6 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800ecb6:	b480      	push	{r7}
 800ecb8:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800ecba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b08e      	sub	sp, #56	@ 0x38
 800eccc:	af04      	add	r7, sp, #16
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	60b9      	str	r1, [r7, #8]
 800ecd2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ecd8:	f3ef 8305 	mrs	r3, IPSR
 800ecdc:	617b      	str	r3, [r7, #20]
  return(result);
 800ecde:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d17f      	bne.n	800ede4 <osThreadNew+0x11c>
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d07c      	beq.n	800ede4 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800ecea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ecee:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ecf0:	2318      	movs	r3, #24
 800ecf2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ecf8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ecfc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d045      	beq.n	800ed90 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d002      	beq.n	800ed12 <osThreadNew+0x4a>
        name = attr->name;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	699b      	ldr	r3, [r3, #24]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d002      	beq.n	800ed20 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	699b      	ldr	r3, [r3, #24]
 800ed1e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ed20:	69fb      	ldr	r3, [r7, #28]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d008      	beq.n	800ed38 <osThreadNew+0x70>
 800ed26:	69fb      	ldr	r3, [r7, #28]
 800ed28:	2b38      	cmp	r3, #56	@ 0x38
 800ed2a:	d805      	bhi.n	800ed38 <osThreadNew+0x70>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	f003 0301 	and.w	r3, r3, #1
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d001      	beq.n	800ed3c <osThreadNew+0x74>
        return (NULL);
 800ed38:	2300      	movs	r3, #0
 800ed3a:	e054      	b.n	800ede6 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	695b      	ldr	r3, [r3, #20]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d003      	beq.n	800ed4c <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	695b      	ldr	r3, [r3, #20]
 800ed48:	089b      	lsrs	r3, r3, #2
 800ed4a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	689b      	ldr	r3, [r3, #8]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d00e      	beq.n	800ed72 <osThreadNew+0xaa>
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	68db      	ldr	r3, [r3, #12]
 800ed58:	2baf      	cmp	r3, #175	@ 0xaf
 800ed5a:	d90a      	bls.n	800ed72 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d006      	beq.n	800ed72 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	695b      	ldr	r3, [r3, #20]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d002      	beq.n	800ed72 <osThreadNew+0xaa>
        mem = 1;
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	61bb      	str	r3, [r7, #24]
 800ed70:	e010      	b.n	800ed94 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	689b      	ldr	r3, [r3, #8]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d10c      	bne.n	800ed94 <osThreadNew+0xcc>
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	68db      	ldr	r3, [r3, #12]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d108      	bne.n	800ed94 <osThreadNew+0xcc>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	691b      	ldr	r3, [r3, #16]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d104      	bne.n	800ed94 <osThreadNew+0xcc>
          mem = 0;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	61bb      	str	r3, [r7, #24]
 800ed8e:	e001      	b.n	800ed94 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800ed90:	2300      	movs	r3, #0
 800ed92:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ed94:	69bb      	ldr	r3, [r7, #24]
 800ed96:	2b01      	cmp	r3, #1
 800ed98:	d110      	bne.n	800edbc <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ed9e:	687a      	ldr	r2, [r7, #4]
 800eda0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eda2:	9202      	str	r2, [sp, #8]
 800eda4:	9301      	str	r3, [sp, #4]
 800eda6:	69fb      	ldr	r3, [r7, #28]
 800eda8:	9300      	str	r3, [sp, #0]
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	6a3a      	ldr	r2, [r7, #32]
 800edae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800edb0:	68f8      	ldr	r0, [r7, #12]
 800edb2:	f001 fc31 	bl	8010618 <xTaskCreateStatic>
 800edb6:	4603      	mov	r3, r0
 800edb8:	613b      	str	r3, [r7, #16]
 800edba:	e013      	b.n	800ede4 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800edbc:	69bb      	ldr	r3, [r7, #24]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d110      	bne.n	800ede4 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800edc2:	6a3b      	ldr	r3, [r7, #32]
 800edc4:	b29a      	uxth	r2, r3
 800edc6:	f107 0310 	add.w	r3, r7, #16
 800edca:	9301      	str	r3, [sp, #4]
 800edcc:	69fb      	ldr	r3, [r7, #28]
 800edce:	9300      	str	r3, [sp, #0]
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800edd4:	68f8      	ldr	r0, [r7, #12]
 800edd6:	f001 fc7f 	bl	80106d8 <xTaskCreate>
 800edda:	4603      	mov	r3, r0
 800eddc:	2b01      	cmp	r3, #1
 800edde:	d001      	beq.n	800ede4 <osThreadNew+0x11c>
            hTask = NULL;
 800ede0:	2300      	movs	r3, #0
 800ede2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ede4:	693b      	ldr	r3, [r7, #16]
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3728      	adds	r7, #40	@ 0x28
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}

0800edee <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800edee:	b580      	push	{r7, lr}
 800edf0:	b084      	sub	sp, #16
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800edf6:	f3ef 8305 	mrs	r3, IPSR
 800edfa:	60bb      	str	r3, [r7, #8]
  return(result);
 800edfc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d003      	beq.n	800ee0a <osDelay+0x1c>
    stat = osErrorISR;
 800ee02:	f06f 0305 	mvn.w	r3, #5
 800ee06:	60fb      	str	r3, [r7, #12]
 800ee08:	e007      	b.n	800ee1a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d002      	beq.n	800ee1a <osDelay+0x2c>
      vTaskDelay(ticks);
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f001 fe33 	bl	8010a80 <vTaskDelay>
    }
  }

  return (stat);
 800ee1a:	68fb      	ldr	r3, [r7, #12]
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3710      	adds	r7, #16
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b088      	sub	sp, #32
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee30:	f3ef 8305 	mrs	r3, IPSR
 800ee34:	60bb      	str	r3, [r7, #8]
  return(result);
 800ee36:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d174      	bne.n	800ef26 <osMutexNew+0x102>
    if (attr != NULL) {
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d003      	beq.n	800ee4a <osMutexNew+0x26>
      type = attr->attr_bits;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	685b      	ldr	r3, [r3, #4]
 800ee46:	61bb      	str	r3, [r7, #24]
 800ee48:	e001      	b.n	800ee4e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	f003 0301 	and.w	r3, r3, #1
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d002      	beq.n	800ee5e <osMutexNew+0x3a>
      rmtx = 1U;
 800ee58:	2301      	movs	r3, #1
 800ee5a:	617b      	str	r3, [r7, #20]
 800ee5c:	e001      	b.n	800ee62 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	f003 0308 	and.w	r3, r3, #8
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d15c      	bne.n	800ef26 <osMutexNew+0x102>
      mem = -1;
 800ee6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ee70:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d015      	beq.n	800eea4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	689b      	ldr	r3, [r3, #8]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d006      	beq.n	800ee8e <osMutexNew+0x6a>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	68db      	ldr	r3, [r3, #12]
 800ee84:	2b4f      	cmp	r3, #79	@ 0x4f
 800ee86:	d902      	bls.n	800ee8e <osMutexNew+0x6a>
          mem = 1;
 800ee88:	2301      	movs	r3, #1
 800ee8a:	613b      	str	r3, [r7, #16]
 800ee8c:	e00c      	b.n	800eea8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	689b      	ldr	r3, [r3, #8]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d108      	bne.n	800eea8 <osMutexNew+0x84>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	68db      	ldr	r3, [r3, #12]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d104      	bne.n	800eea8 <osMutexNew+0x84>
            mem = 0;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	613b      	str	r3, [r7, #16]
 800eea2:	e001      	b.n	800eea8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800eea4:	2300      	movs	r3, #0
 800eea6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	2b01      	cmp	r3, #1
 800eeac:	d112      	bne.n	800eed4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d007      	beq.n	800eec4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	689b      	ldr	r3, [r3, #8]
 800eeb8:	4619      	mov	r1, r3
 800eeba:	2004      	movs	r0, #4
 800eebc:	f000 fc3f 	bl	800f73e <xQueueCreateMutexStatic>
 800eec0:	61f8      	str	r0, [r7, #28]
 800eec2:	e016      	b.n	800eef2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	689b      	ldr	r3, [r3, #8]
 800eec8:	4619      	mov	r1, r3
 800eeca:	2001      	movs	r0, #1
 800eecc:	f000 fc37 	bl	800f73e <xQueueCreateMutexStatic>
 800eed0:	61f8      	str	r0, [r7, #28]
 800eed2:	e00e      	b.n	800eef2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d10b      	bne.n	800eef2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d004      	beq.n	800eeea <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800eee0:	2004      	movs	r0, #4
 800eee2:	f000 fc14 	bl	800f70e <xQueueCreateMutex>
 800eee6:	61f8      	str	r0, [r7, #28]
 800eee8:	e003      	b.n	800eef2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800eeea:	2001      	movs	r0, #1
 800eeec:	f000 fc0f 	bl	800f70e <xQueueCreateMutex>
 800eef0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800eef2:	69fb      	ldr	r3, [r7, #28]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d00c      	beq.n	800ef12 <osMutexNew+0xee>
        if (attr != NULL) {
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d003      	beq.n	800ef06 <osMutexNew+0xe2>
          name = attr->name;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	60fb      	str	r3, [r7, #12]
 800ef04:	e001      	b.n	800ef0a <osMutexNew+0xe6>
        } else {
          name = NULL;
 800ef06:	2300      	movs	r3, #0
 800ef08:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800ef0a:	68f9      	ldr	r1, [r7, #12]
 800ef0c:	69f8      	ldr	r0, [r7, #28]
 800ef0e:	f001 fafb 	bl	8010508 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ef12:	69fb      	ldr	r3, [r7, #28]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d006      	beq.n	800ef26 <osMutexNew+0x102>
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d003      	beq.n	800ef26 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ef1e:	69fb      	ldr	r3, [r7, #28]
 800ef20:	f043 0301 	orr.w	r3, r3, #1
 800ef24:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ef26:	69fb      	ldr	r3, [r7, #28]
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3720      	adds	r7, #32
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}

0800ef30 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b086      	sub	sp, #24
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f023 0301 	bic.w	r3, r3, #1
 800ef40:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f003 0301 	and.w	r3, r3, #1
 800ef48:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef4e:	f3ef 8305 	mrs	r3, IPSR
 800ef52:	60bb      	str	r3, [r7, #8]
  return(result);
 800ef54:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d003      	beq.n	800ef62 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800ef5a:	f06f 0305 	mvn.w	r3, #5
 800ef5e:	617b      	str	r3, [r7, #20]
 800ef60:	e02c      	b.n	800efbc <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d103      	bne.n	800ef70 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800ef68:	f06f 0303 	mvn.w	r3, #3
 800ef6c:	617b      	str	r3, [r7, #20]
 800ef6e:	e025      	b.n	800efbc <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d011      	beq.n	800ef9a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ef76:	6839      	ldr	r1, [r7, #0]
 800ef78:	6938      	ldr	r0, [r7, #16]
 800ef7a:	f000 fc30 	bl	800f7de <xQueueTakeMutexRecursive>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	2b01      	cmp	r3, #1
 800ef82:	d01b      	beq.n	800efbc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d003      	beq.n	800ef92 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800ef8a:	f06f 0301 	mvn.w	r3, #1
 800ef8e:	617b      	str	r3, [r7, #20]
 800ef90:	e014      	b.n	800efbc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ef92:	f06f 0302 	mvn.w	r3, #2
 800ef96:	617b      	str	r3, [r7, #20]
 800ef98:	e010      	b.n	800efbc <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ef9a:	6839      	ldr	r1, [r7, #0]
 800ef9c:	6938      	ldr	r0, [r7, #16]
 800ef9e:	f000 ffd5 	bl	800ff4c <xQueueSemaphoreTake>
 800efa2:	4603      	mov	r3, r0
 800efa4:	2b01      	cmp	r3, #1
 800efa6:	d009      	beq.n	800efbc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d003      	beq.n	800efb6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800efae:	f06f 0301 	mvn.w	r3, #1
 800efb2:	617b      	str	r3, [r7, #20]
 800efb4:	e002      	b.n	800efbc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800efb6:	f06f 0302 	mvn.w	r3, #2
 800efba:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800efbc:	697b      	ldr	r3, [r7, #20]
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3718      	adds	r7, #24
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}

0800efc6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800efc6:	b580      	push	{r7, lr}
 800efc8:	b086      	sub	sp, #24
 800efca:	af00      	add	r7, sp, #0
 800efcc:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f023 0301 	bic.w	r3, r3, #1
 800efd4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f003 0301 	and.w	r3, r3, #1
 800efdc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800efde:	2300      	movs	r3, #0
 800efe0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efe2:	f3ef 8305 	mrs	r3, IPSR
 800efe6:	60bb      	str	r3, [r7, #8]
  return(result);
 800efe8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800efea:	2b00      	cmp	r3, #0
 800efec:	d003      	beq.n	800eff6 <osMutexRelease+0x30>
    stat = osErrorISR;
 800efee:	f06f 0305 	mvn.w	r3, #5
 800eff2:	617b      	str	r3, [r7, #20]
 800eff4:	e01f      	b.n	800f036 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d103      	bne.n	800f004 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800effc:	f06f 0303 	mvn.w	r3, #3
 800f000:	617b      	str	r3, [r7, #20]
 800f002:	e018      	b.n	800f036 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d009      	beq.n	800f01e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f00a:	6938      	ldr	r0, [r7, #16]
 800f00c:	f000 fbb2 	bl	800f774 <xQueueGiveMutexRecursive>
 800f010:	4603      	mov	r3, r0
 800f012:	2b01      	cmp	r3, #1
 800f014:	d00f      	beq.n	800f036 <osMutexRelease+0x70>
        stat = osErrorResource;
 800f016:	f06f 0302 	mvn.w	r3, #2
 800f01a:	617b      	str	r3, [r7, #20]
 800f01c:	e00b      	b.n	800f036 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f01e:	2300      	movs	r3, #0
 800f020:	2200      	movs	r2, #0
 800f022:	2100      	movs	r1, #0
 800f024:	6938      	ldr	r0, [r7, #16]
 800f026:	f000 fc7f 	bl	800f928 <xQueueGenericSend>
 800f02a:	4603      	mov	r3, r0
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	d002      	beq.n	800f036 <osMutexRelease+0x70>
        stat = osErrorResource;
 800f030:	f06f 0302 	mvn.w	r3, #2
 800f034:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f036:	697b      	ldr	r3, [r7, #20]
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3718      	adds	r7, #24
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f040:	b580      	push	{r7, lr}
 800f042:	b08a      	sub	sp, #40	@ 0x28
 800f044:	af02      	add	r7, sp, #8
 800f046:	60f8      	str	r0, [r7, #12]
 800f048:	60b9      	str	r1, [r7, #8]
 800f04a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f04c:	2300      	movs	r3, #0
 800f04e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f050:	f3ef 8305 	mrs	r3, IPSR
 800f054:	613b      	str	r3, [r7, #16]
  return(result);
 800f056:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d175      	bne.n	800f148 <osSemaphoreNew+0x108>
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d072      	beq.n	800f148 <osSemaphoreNew+0x108>
 800f062:	68ba      	ldr	r2, [r7, #8]
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	429a      	cmp	r2, r3
 800f068:	d86e      	bhi.n	800f148 <osSemaphoreNew+0x108>
    mem = -1;
 800f06a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f06e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d015      	beq.n	800f0a2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	689b      	ldr	r3, [r3, #8]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d006      	beq.n	800f08c <osSemaphoreNew+0x4c>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	68db      	ldr	r3, [r3, #12]
 800f082:	2b4f      	cmp	r3, #79	@ 0x4f
 800f084:	d902      	bls.n	800f08c <osSemaphoreNew+0x4c>
        mem = 1;
 800f086:	2301      	movs	r3, #1
 800f088:	61bb      	str	r3, [r7, #24]
 800f08a:	e00c      	b.n	800f0a6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	689b      	ldr	r3, [r3, #8]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d108      	bne.n	800f0a6 <osSemaphoreNew+0x66>
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	68db      	ldr	r3, [r3, #12]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d104      	bne.n	800f0a6 <osSemaphoreNew+0x66>
          mem = 0;
 800f09c:	2300      	movs	r3, #0
 800f09e:	61bb      	str	r3, [r7, #24]
 800f0a0:	e001      	b.n	800f0a6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800f0a6:	69bb      	ldr	r3, [r7, #24]
 800f0a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f0ac:	d04c      	beq.n	800f148 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	d128      	bne.n	800f106 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800f0b4:	69bb      	ldr	r3, [r7, #24]
 800f0b6:	2b01      	cmp	r3, #1
 800f0b8:	d10a      	bne.n	800f0d0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	689b      	ldr	r3, [r3, #8]
 800f0be:	2203      	movs	r2, #3
 800f0c0:	9200      	str	r2, [sp, #0]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	2001      	movs	r0, #1
 800f0c8:	f000 fa2c 	bl	800f524 <xQueueGenericCreateStatic>
 800f0cc:	61f8      	str	r0, [r7, #28]
 800f0ce:	e005      	b.n	800f0dc <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800f0d0:	2203      	movs	r2, #3
 800f0d2:	2100      	movs	r1, #0
 800f0d4:	2001      	movs	r0, #1
 800f0d6:	f000 faa2 	bl	800f61e <xQueueGenericCreate>
 800f0da:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f0dc:	69fb      	ldr	r3, [r7, #28]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d022      	beq.n	800f128 <osSemaphoreNew+0xe8>
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d01f      	beq.n	800f128 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	2100      	movs	r1, #0
 800f0ee:	69f8      	ldr	r0, [r7, #28]
 800f0f0:	f000 fc1a 	bl	800f928 <xQueueGenericSend>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	d016      	beq.n	800f128 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800f0fa:	69f8      	ldr	r0, [r7, #28]
 800f0fc:	f001 f8b8 	bl	8010270 <vQueueDelete>
            hSemaphore = NULL;
 800f100:	2300      	movs	r3, #0
 800f102:	61fb      	str	r3, [r7, #28]
 800f104:	e010      	b.n	800f128 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800f106:	69bb      	ldr	r3, [r7, #24]
 800f108:	2b01      	cmp	r3, #1
 800f10a:	d108      	bne.n	800f11e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	689b      	ldr	r3, [r3, #8]
 800f110:	461a      	mov	r2, r3
 800f112:	68b9      	ldr	r1, [r7, #8]
 800f114:	68f8      	ldr	r0, [r7, #12]
 800f116:	f000 fb99 	bl	800f84c <xQueueCreateCountingSemaphoreStatic>
 800f11a:	61f8      	str	r0, [r7, #28]
 800f11c:	e004      	b.n	800f128 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f11e:	68b9      	ldr	r1, [r7, #8]
 800f120:	68f8      	ldr	r0, [r7, #12]
 800f122:	f000 fbcc 	bl	800f8be <xQueueCreateCountingSemaphore>
 800f126:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f128:	69fb      	ldr	r3, [r7, #28]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d00c      	beq.n	800f148 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d003      	beq.n	800f13c <osSemaphoreNew+0xfc>
          name = attr->name;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	617b      	str	r3, [r7, #20]
 800f13a:	e001      	b.n	800f140 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800f13c:	2300      	movs	r3, #0
 800f13e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f140:	6979      	ldr	r1, [r7, #20]
 800f142:	69f8      	ldr	r0, [r7, #28]
 800f144:	f001 f9e0 	bl	8010508 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f148:	69fb      	ldr	r3, [r7, #28]
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3720      	adds	r7, #32
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}
	...

0800f154 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f154:	b580      	push	{r7, lr}
 800f156:	b086      	sub	sp, #24
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f162:	2300      	movs	r3, #0
 800f164:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d103      	bne.n	800f174 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f16c:	f06f 0303 	mvn.w	r3, #3
 800f170:	617b      	str	r3, [r7, #20]
 800f172:	e039      	b.n	800f1e8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f174:	f3ef 8305 	mrs	r3, IPSR
 800f178:	60fb      	str	r3, [r7, #12]
  return(result);
 800f17a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d022      	beq.n	800f1c6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d003      	beq.n	800f18e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800f186:	f06f 0303 	mvn.w	r3, #3
 800f18a:	617b      	str	r3, [r7, #20]
 800f18c:	e02c      	b.n	800f1e8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800f18e:	2300      	movs	r3, #0
 800f190:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f192:	f107 0308 	add.w	r3, r7, #8
 800f196:	461a      	mov	r2, r3
 800f198:	2100      	movs	r1, #0
 800f19a:	6938      	ldr	r0, [r7, #16]
 800f19c:	f000 ffe6 	bl	801016c <xQueueReceiveFromISR>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	2b01      	cmp	r3, #1
 800f1a4:	d003      	beq.n	800f1ae <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800f1a6:	f06f 0302 	mvn.w	r3, #2
 800f1aa:	617b      	str	r3, [r7, #20]
 800f1ac:	e01c      	b.n	800f1e8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d019      	beq.n	800f1e8 <osSemaphoreAcquire+0x94>
 800f1b4:	4b0f      	ldr	r3, [pc, #60]	@ (800f1f4 <osSemaphoreAcquire+0xa0>)
 800f1b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1ba:	601a      	str	r2, [r3, #0]
 800f1bc:	f3bf 8f4f 	dsb	sy
 800f1c0:	f3bf 8f6f 	isb	sy
 800f1c4:	e010      	b.n	800f1e8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f1c6:	6839      	ldr	r1, [r7, #0]
 800f1c8:	6938      	ldr	r0, [r7, #16]
 800f1ca:	f000 febf 	bl	800ff4c <xQueueSemaphoreTake>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	2b01      	cmp	r3, #1
 800f1d2:	d009      	beq.n	800f1e8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d003      	beq.n	800f1e2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800f1da:	f06f 0301 	mvn.w	r3, #1
 800f1de:	617b      	str	r3, [r7, #20]
 800f1e0:	e002      	b.n	800f1e8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800f1e2:	f06f 0302 	mvn.w	r3, #2
 800f1e6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f1e8:	697b      	ldr	r3, [r7, #20]
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3718      	adds	r7, #24
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}
 800f1f2:	bf00      	nop
 800f1f4:	e000ed04 	.word	0xe000ed04

0800f1f8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b086      	sub	sp, #24
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f204:	2300      	movs	r3, #0
 800f206:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f208:	693b      	ldr	r3, [r7, #16]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d103      	bne.n	800f216 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f20e:	f06f 0303 	mvn.w	r3, #3
 800f212:	617b      	str	r3, [r7, #20]
 800f214:	e02c      	b.n	800f270 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f216:	f3ef 8305 	mrs	r3, IPSR
 800f21a:	60fb      	str	r3, [r7, #12]
  return(result);
 800f21c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d01a      	beq.n	800f258 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800f222:	2300      	movs	r3, #0
 800f224:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f226:	f107 0308 	add.w	r3, r7, #8
 800f22a:	4619      	mov	r1, r3
 800f22c:	6938      	ldr	r0, [r7, #16]
 800f22e:	f000 fd1b 	bl	800fc68 <xQueueGiveFromISR>
 800f232:	4603      	mov	r3, r0
 800f234:	2b01      	cmp	r3, #1
 800f236:	d003      	beq.n	800f240 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800f238:	f06f 0302 	mvn.w	r3, #2
 800f23c:	617b      	str	r3, [r7, #20]
 800f23e:	e017      	b.n	800f270 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d014      	beq.n	800f270 <osSemaphoreRelease+0x78>
 800f246:	4b0d      	ldr	r3, [pc, #52]	@ (800f27c <osSemaphoreRelease+0x84>)
 800f248:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f24c:	601a      	str	r2, [r3, #0]
 800f24e:	f3bf 8f4f 	dsb	sy
 800f252:	f3bf 8f6f 	isb	sy
 800f256:	e00b      	b.n	800f270 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f258:	2300      	movs	r3, #0
 800f25a:	2200      	movs	r2, #0
 800f25c:	2100      	movs	r1, #0
 800f25e:	6938      	ldr	r0, [r7, #16]
 800f260:	f000 fb62 	bl	800f928 <xQueueGenericSend>
 800f264:	4603      	mov	r3, r0
 800f266:	2b01      	cmp	r3, #1
 800f268:	d002      	beq.n	800f270 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800f26a:	f06f 0302 	mvn.w	r3, #2
 800f26e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f270:	697b      	ldr	r3, [r7, #20]
}
 800f272:	4618      	mov	r0, r3
 800f274:	3718      	adds	r7, #24
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
 800f27a:	bf00      	nop
 800f27c:	e000ed04 	.word	0xe000ed04

0800f280 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f280:	b480      	push	{r7}
 800f282:	b085      	sub	sp, #20
 800f284:	af00      	add	r7, sp, #0
 800f286:	60f8      	str	r0, [r7, #12]
 800f288:	60b9      	str	r1, [r7, #8]
 800f28a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	4a07      	ldr	r2, [pc, #28]	@ (800f2ac <vApplicationGetIdleTaskMemory+0x2c>)
 800f290:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	4a06      	ldr	r2, [pc, #24]	@ (800f2b0 <vApplicationGetIdleTaskMemory+0x30>)
 800f296:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f29e:	601a      	str	r2, [r3, #0]
}
 800f2a0:	bf00      	nop
 800f2a2:	3714      	adds	r7, #20
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr
 800f2ac:	20004ddc 	.word	0x20004ddc
 800f2b0:	20004e8c 	.word	0x20004e8c

0800f2b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f2b4:	b480      	push	{r7}
 800f2b6:	b085      	sub	sp, #20
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	60f8      	str	r0, [r7, #12]
 800f2bc:	60b9      	str	r1, [r7, #8]
 800f2be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	4a07      	ldr	r2, [pc, #28]	@ (800f2e0 <vApplicationGetTimerTaskMemory+0x2c>)
 800f2c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	4a06      	ldr	r2, [pc, #24]	@ (800f2e4 <vApplicationGetTimerTaskMemory+0x30>)
 800f2ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f2d2:	601a      	str	r2, [r3, #0]
}
 800f2d4:	bf00      	nop
 800f2d6:	3714      	adds	r7, #20
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2de:	4770      	bx	lr
 800f2e0:	2000528c 	.word	0x2000528c
 800f2e4:	2000533c 	.word	0x2000533c

0800f2e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b083      	sub	sp, #12
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f103 0208 	add.w	r2, r3, #8
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f300:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	f103 0208 	add.w	r2, r3, #8
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	f103 0208 	add.w	r2, r3, #8
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2200      	movs	r2, #0
 800f31a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f31c:	bf00      	nop
 800f31e:	370c      	adds	r7, #12
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr

0800f328 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f328:	b480      	push	{r7}
 800f32a:	b083      	sub	sp, #12
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2200      	movs	r2, #0
 800f334:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f336:	bf00      	nop
 800f338:	370c      	adds	r7, #12
 800f33a:	46bd      	mov	sp, r7
 800f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f340:	4770      	bx	lr

0800f342 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f342:	b480      	push	{r7}
 800f344:	b085      	sub	sp, #20
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
 800f34a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	68fa      	ldr	r2, [r7, #12]
 800f356:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	689a      	ldr	r2, [r3, #8]
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	689b      	ldr	r3, [r3, #8]
 800f364:	683a      	ldr	r2, [r7, #0]
 800f366:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	683a      	ldr	r2, [r7, #0]
 800f36c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	687a      	ldr	r2, [r7, #4]
 800f372:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	1c5a      	adds	r2, r3, #1
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	601a      	str	r2, [r3, #0]
}
 800f37e:	bf00      	nop
 800f380:	3714      	adds	r7, #20
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr

0800f38a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f38a:	b480      	push	{r7}
 800f38c:	b085      	sub	sp, #20
 800f38e:	af00      	add	r7, sp, #0
 800f390:	6078      	str	r0, [r7, #4]
 800f392:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f3a0:	d103      	bne.n	800f3aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	691b      	ldr	r3, [r3, #16]
 800f3a6:	60fb      	str	r3, [r7, #12]
 800f3a8:	e00c      	b.n	800f3c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	3308      	adds	r3, #8
 800f3ae:	60fb      	str	r3, [r7, #12]
 800f3b0:	e002      	b.n	800f3b8 <vListInsert+0x2e>
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	685b      	ldr	r3, [r3, #4]
 800f3b6:	60fb      	str	r3, [r7, #12]
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	68ba      	ldr	r2, [r7, #8]
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d2f6      	bcs.n	800f3b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	685a      	ldr	r2, [r3, #4]
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	683a      	ldr	r2, [r7, #0]
 800f3d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	68fa      	ldr	r2, [r7, #12]
 800f3d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	683a      	ldr	r2, [r7, #0]
 800f3de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	1c5a      	adds	r2, r3, #1
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	601a      	str	r2, [r3, #0]
}
 800f3f0:	bf00      	nop
 800f3f2:	3714      	adds	r7, #20
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fa:	4770      	bx	lr

0800f3fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b085      	sub	sp, #20
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	691b      	ldr	r3, [r3, #16]
 800f408:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	687a      	ldr	r2, [r7, #4]
 800f410:	6892      	ldr	r2, [r2, #8]
 800f412:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	689b      	ldr	r3, [r3, #8]
 800f418:	687a      	ldr	r2, [r7, #4]
 800f41a:	6852      	ldr	r2, [r2, #4]
 800f41c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	687a      	ldr	r2, [r7, #4]
 800f424:	429a      	cmp	r2, r3
 800f426:	d103      	bne.n	800f430 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	689a      	ldr	r2, [r3, #8]
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2200      	movs	r2, #0
 800f434:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	1e5a      	subs	r2, r3, #1
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
}
 800f444:	4618      	mov	r0, r3
 800f446:	3714      	adds	r7, #20
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	4770      	bx	lr

0800f450 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b084      	sub	sp, #16
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d10b      	bne.n	800f47c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f468:	f383 8811 	msr	BASEPRI, r3
 800f46c:	f3bf 8f6f 	isb	sy
 800f470:	f3bf 8f4f 	dsb	sy
 800f474:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f476:	bf00      	nop
 800f478:	bf00      	nop
 800f47a:	e7fd      	b.n	800f478 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f47c:	f002 fe44 	bl	8012108 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	681a      	ldr	r2, [r3, #0]
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f488:	68f9      	ldr	r1, [r7, #12]
 800f48a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f48c:	fb01 f303 	mul.w	r3, r1, r3
 800f490:	441a      	add	r2, r3
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	2200      	movs	r2, #0
 800f49a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681a      	ldr	r2, [r3, #0]
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	681a      	ldr	r2, [r3, #0]
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4ac:	3b01      	subs	r3, #1
 800f4ae:	68f9      	ldr	r1, [r7, #12]
 800f4b0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f4b2:	fb01 f303 	mul.w	r3, r1, r3
 800f4b6:	441a      	add	r2, r3
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	22ff      	movs	r2, #255	@ 0xff
 800f4c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	22ff      	movs	r2, #255	@ 0xff
 800f4c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d114      	bne.n	800f4fc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	691b      	ldr	r3, [r3, #16]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d01a      	beq.n	800f510 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	3310      	adds	r3, #16
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f001 fdd0 	bl	8011084 <xTaskRemoveFromEventList>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d012      	beq.n	800f510 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f4ea:	4b0d      	ldr	r3, [pc, #52]	@ (800f520 <xQueueGenericReset+0xd0>)
 800f4ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4f0:	601a      	str	r2, [r3, #0]
 800f4f2:	f3bf 8f4f 	dsb	sy
 800f4f6:	f3bf 8f6f 	isb	sy
 800f4fa:	e009      	b.n	800f510 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	3310      	adds	r3, #16
 800f500:	4618      	mov	r0, r3
 800f502:	f7ff fef1 	bl	800f2e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	3324      	adds	r3, #36	@ 0x24
 800f50a:	4618      	mov	r0, r3
 800f50c:	f7ff feec 	bl	800f2e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f510:	f002 fe2c 	bl	801216c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f514:	2301      	movs	r3, #1
}
 800f516:	4618      	mov	r0, r3
 800f518:	3710      	adds	r7, #16
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	e000ed04 	.word	0xe000ed04

0800f524 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f524:	b580      	push	{r7, lr}
 800f526:	b08e      	sub	sp, #56	@ 0x38
 800f528:	af02      	add	r7, sp, #8
 800f52a:	60f8      	str	r0, [r7, #12]
 800f52c:	60b9      	str	r1, [r7, #8]
 800f52e:	607a      	str	r2, [r7, #4]
 800f530:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d10b      	bne.n	800f550 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800f538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f53c:	f383 8811 	msr	BASEPRI, r3
 800f540:	f3bf 8f6f 	isb	sy
 800f544:	f3bf 8f4f 	dsb	sy
 800f548:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f54a:	bf00      	nop
 800f54c:	bf00      	nop
 800f54e:	e7fd      	b.n	800f54c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d10b      	bne.n	800f56e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800f556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f55a:	f383 8811 	msr	BASEPRI, r3
 800f55e:	f3bf 8f6f 	isb	sy
 800f562:	f3bf 8f4f 	dsb	sy
 800f566:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f568:	bf00      	nop
 800f56a:	bf00      	nop
 800f56c:	e7fd      	b.n	800f56a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d002      	beq.n	800f57a <xQueueGenericCreateStatic+0x56>
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d001      	beq.n	800f57e <xQueueGenericCreateStatic+0x5a>
 800f57a:	2301      	movs	r3, #1
 800f57c:	e000      	b.n	800f580 <xQueueGenericCreateStatic+0x5c>
 800f57e:	2300      	movs	r3, #0
 800f580:	2b00      	cmp	r3, #0
 800f582:	d10b      	bne.n	800f59c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800f584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f588:	f383 8811 	msr	BASEPRI, r3
 800f58c:	f3bf 8f6f 	isb	sy
 800f590:	f3bf 8f4f 	dsb	sy
 800f594:	623b      	str	r3, [r7, #32]
}
 800f596:	bf00      	nop
 800f598:	bf00      	nop
 800f59a:	e7fd      	b.n	800f598 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d102      	bne.n	800f5a8 <xQueueGenericCreateStatic+0x84>
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d101      	bne.n	800f5ac <xQueueGenericCreateStatic+0x88>
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	e000      	b.n	800f5ae <xQueueGenericCreateStatic+0x8a>
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d10b      	bne.n	800f5ca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800f5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5b6:	f383 8811 	msr	BASEPRI, r3
 800f5ba:	f3bf 8f6f 	isb	sy
 800f5be:	f3bf 8f4f 	dsb	sy
 800f5c2:	61fb      	str	r3, [r7, #28]
}
 800f5c4:	bf00      	nop
 800f5c6:	bf00      	nop
 800f5c8:	e7fd      	b.n	800f5c6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f5ca:	2350      	movs	r3, #80	@ 0x50
 800f5cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	2b50      	cmp	r3, #80	@ 0x50
 800f5d2:	d00b      	beq.n	800f5ec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800f5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5d8:	f383 8811 	msr	BASEPRI, r3
 800f5dc:	f3bf 8f6f 	isb	sy
 800f5e0:	f3bf 8f4f 	dsb	sy
 800f5e4:	61bb      	str	r3, [r7, #24]
}
 800f5e6:	bf00      	nop
 800f5e8:	bf00      	nop
 800f5ea:	e7fd      	b.n	800f5e8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f5ec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f5f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d00d      	beq.n	800f614 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5fa:	2201      	movs	r2, #1
 800f5fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f600:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f606:	9300      	str	r3, [sp, #0]
 800f608:	4613      	mov	r3, r2
 800f60a:	687a      	ldr	r2, [r7, #4]
 800f60c:	68b9      	ldr	r1, [r7, #8]
 800f60e:	68f8      	ldr	r0, [r7, #12]
 800f610:	f000 f840 	bl	800f694 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f616:	4618      	mov	r0, r3
 800f618:	3730      	adds	r7, #48	@ 0x30
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}

0800f61e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f61e:	b580      	push	{r7, lr}
 800f620:	b08a      	sub	sp, #40	@ 0x28
 800f622:	af02      	add	r7, sp, #8
 800f624:	60f8      	str	r0, [r7, #12]
 800f626:	60b9      	str	r1, [r7, #8]
 800f628:	4613      	mov	r3, r2
 800f62a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d10b      	bne.n	800f64a <xQueueGenericCreate+0x2c>
	__asm volatile
 800f632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f636:	f383 8811 	msr	BASEPRI, r3
 800f63a:	f3bf 8f6f 	isb	sy
 800f63e:	f3bf 8f4f 	dsb	sy
 800f642:	613b      	str	r3, [r7, #16]
}
 800f644:	bf00      	nop
 800f646:	bf00      	nop
 800f648:	e7fd      	b.n	800f646 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	68ba      	ldr	r2, [r7, #8]
 800f64e:	fb02 f303 	mul.w	r3, r2, r3
 800f652:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f654:	69fb      	ldr	r3, [r7, #28]
 800f656:	3350      	adds	r3, #80	@ 0x50
 800f658:	4618      	mov	r0, r3
 800f65a:	f002 fe77 	bl	801234c <pvPortMalloc>
 800f65e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f660:	69bb      	ldr	r3, [r7, #24]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d011      	beq.n	800f68a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f666:	69bb      	ldr	r3, [r7, #24]
 800f668:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	3350      	adds	r3, #80	@ 0x50
 800f66e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f670:	69bb      	ldr	r3, [r7, #24]
 800f672:	2200      	movs	r2, #0
 800f674:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f678:	79fa      	ldrb	r2, [r7, #7]
 800f67a:	69bb      	ldr	r3, [r7, #24]
 800f67c:	9300      	str	r3, [sp, #0]
 800f67e:	4613      	mov	r3, r2
 800f680:	697a      	ldr	r2, [r7, #20]
 800f682:	68b9      	ldr	r1, [r7, #8]
 800f684:	68f8      	ldr	r0, [r7, #12]
 800f686:	f000 f805 	bl	800f694 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f68a:	69bb      	ldr	r3, [r7, #24]
	}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3720      	adds	r7, #32
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b084      	sub	sp, #16
 800f698:	af00      	add	r7, sp, #0
 800f69a:	60f8      	str	r0, [r7, #12]
 800f69c:	60b9      	str	r1, [r7, #8]
 800f69e:	607a      	str	r2, [r7, #4]
 800f6a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d103      	bne.n	800f6b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f6a8:	69bb      	ldr	r3, [r7, #24]
 800f6aa:	69ba      	ldr	r2, [r7, #24]
 800f6ac:	601a      	str	r2, [r3, #0]
 800f6ae:	e002      	b.n	800f6b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f6b0:	69bb      	ldr	r3, [r7, #24]
 800f6b2:	687a      	ldr	r2, [r7, #4]
 800f6b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	68fa      	ldr	r2, [r7, #12]
 800f6ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f6bc:	69bb      	ldr	r3, [r7, #24]
 800f6be:	68ba      	ldr	r2, [r7, #8]
 800f6c0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f6c2:	2101      	movs	r1, #1
 800f6c4:	69b8      	ldr	r0, [r7, #24]
 800f6c6:	f7ff fec3 	bl	800f450 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f6ca:	69bb      	ldr	r3, [r7, #24]
 800f6cc:	78fa      	ldrb	r2, [r7, #3]
 800f6ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f6d2:	bf00      	nop
 800f6d4:	3710      	adds	r7, #16
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}

0800f6da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f6da:	b580      	push	{r7, lr}
 800f6dc:	b082      	sub	sp, #8
 800f6de:	af00      	add	r7, sp, #0
 800f6e0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d00e      	beq.n	800f706 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	2100      	movs	r1, #0
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f000 f911 	bl	800f928 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f706:	bf00      	nop
 800f708:	3708      	adds	r7, #8
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}

0800f70e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f70e:	b580      	push	{r7, lr}
 800f710:	b086      	sub	sp, #24
 800f712:	af00      	add	r7, sp, #0
 800f714:	4603      	mov	r3, r0
 800f716:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f718:	2301      	movs	r3, #1
 800f71a:	617b      	str	r3, [r7, #20]
 800f71c:	2300      	movs	r3, #0
 800f71e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f720:	79fb      	ldrb	r3, [r7, #7]
 800f722:	461a      	mov	r2, r3
 800f724:	6939      	ldr	r1, [r7, #16]
 800f726:	6978      	ldr	r0, [r7, #20]
 800f728:	f7ff ff79 	bl	800f61e <xQueueGenericCreate>
 800f72c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f72e:	68f8      	ldr	r0, [r7, #12]
 800f730:	f7ff ffd3 	bl	800f6da <prvInitialiseMutex>

		return xNewQueue;
 800f734:	68fb      	ldr	r3, [r7, #12]
	}
 800f736:	4618      	mov	r0, r3
 800f738:	3718      	adds	r7, #24
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}

0800f73e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f73e:	b580      	push	{r7, lr}
 800f740:	b088      	sub	sp, #32
 800f742:	af02      	add	r7, sp, #8
 800f744:	4603      	mov	r3, r0
 800f746:	6039      	str	r1, [r7, #0]
 800f748:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f74a:	2301      	movs	r3, #1
 800f74c:	617b      	str	r3, [r7, #20]
 800f74e:	2300      	movs	r3, #0
 800f750:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f752:	79fb      	ldrb	r3, [r7, #7]
 800f754:	9300      	str	r3, [sp, #0]
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	2200      	movs	r2, #0
 800f75a:	6939      	ldr	r1, [r7, #16]
 800f75c:	6978      	ldr	r0, [r7, #20]
 800f75e:	f7ff fee1 	bl	800f524 <xQueueGenericCreateStatic>
 800f762:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f764:	68f8      	ldr	r0, [r7, #12]
 800f766:	f7ff ffb8 	bl	800f6da <prvInitialiseMutex>

		return xNewQueue;
 800f76a:	68fb      	ldr	r3, [r7, #12]
	}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3718      	adds	r7, #24
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}

0800f774 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800f774:	b590      	push	{r4, r7, lr}
 800f776:	b087      	sub	sp, #28
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f780:	693b      	ldr	r3, [r7, #16]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d10b      	bne.n	800f79e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800f786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f78a:	f383 8811 	msr	BASEPRI, r3
 800f78e:	f3bf 8f6f 	isb	sy
 800f792:	f3bf 8f4f 	dsb	sy
 800f796:	60fb      	str	r3, [r7, #12]
}
 800f798:	bf00      	nop
 800f79a:	bf00      	nop
 800f79c:	e7fd      	b.n	800f79a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f79e:	693b      	ldr	r3, [r7, #16]
 800f7a0:	689c      	ldr	r4, [r3, #8]
 800f7a2:	f001 fe35 	bl	8011410 <xTaskGetCurrentTaskHandle>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	429c      	cmp	r4, r3
 800f7aa:	d111      	bne.n	800f7d0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800f7ac:	693b      	ldr	r3, [r7, #16]
 800f7ae:	68db      	ldr	r3, [r3, #12]
 800f7b0:	1e5a      	subs	r2, r3, #1
 800f7b2:	693b      	ldr	r3, [r7, #16]
 800f7b4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f7b6:	693b      	ldr	r3, [r7, #16]
 800f7b8:	68db      	ldr	r3, [r3, #12]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d105      	bne.n	800f7ca <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f7be:	2300      	movs	r3, #0
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	2100      	movs	r1, #0
 800f7c4:	6938      	ldr	r0, [r7, #16]
 800f7c6:	f000 f8af 	bl	800f928 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	617b      	str	r3, [r7, #20]
 800f7ce:	e001      	b.n	800f7d4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800f7d4:	697b      	ldr	r3, [r7, #20]
	}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	371c      	adds	r7, #28
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd90      	pop	{r4, r7, pc}

0800f7de <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800f7de:	b590      	push	{r4, r7, lr}
 800f7e0:	b087      	sub	sp, #28
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	6078      	str	r0, [r7, #4]
 800f7e6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d10b      	bne.n	800f80a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800f7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7f6:	f383 8811 	msr	BASEPRI, r3
 800f7fa:	f3bf 8f6f 	isb	sy
 800f7fe:	f3bf 8f4f 	dsb	sy
 800f802:	60fb      	str	r3, [r7, #12]
}
 800f804:	bf00      	nop
 800f806:	bf00      	nop
 800f808:	e7fd      	b.n	800f806 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	689c      	ldr	r4, [r3, #8]
 800f80e:	f001 fdff 	bl	8011410 <xTaskGetCurrentTaskHandle>
 800f812:	4603      	mov	r3, r0
 800f814:	429c      	cmp	r4, r3
 800f816:	d107      	bne.n	800f828 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	68db      	ldr	r3, [r3, #12]
 800f81c:	1c5a      	adds	r2, r3, #1
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800f822:	2301      	movs	r3, #1
 800f824:	617b      	str	r3, [r7, #20]
 800f826:	e00c      	b.n	800f842 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f828:	6839      	ldr	r1, [r7, #0]
 800f82a:	6938      	ldr	r0, [r7, #16]
 800f82c:	f000 fb8e 	bl	800ff4c <xQueueSemaphoreTake>
 800f830:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d004      	beq.n	800f842 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	68db      	ldr	r3, [r3, #12]
 800f83c:	1c5a      	adds	r2, r3, #1
 800f83e:	693b      	ldr	r3, [r7, #16]
 800f840:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800f842:	697b      	ldr	r3, [r7, #20]
	}
 800f844:	4618      	mov	r0, r3
 800f846:	371c      	adds	r7, #28
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd90      	pop	{r4, r7, pc}

0800f84c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b08a      	sub	sp, #40	@ 0x28
 800f850:	af02      	add	r7, sp, #8
 800f852:	60f8      	str	r0, [r7, #12]
 800f854:	60b9      	str	r1, [r7, #8]
 800f856:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d10b      	bne.n	800f876 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800f85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f862:	f383 8811 	msr	BASEPRI, r3
 800f866:	f3bf 8f6f 	isb	sy
 800f86a:	f3bf 8f4f 	dsb	sy
 800f86e:	61bb      	str	r3, [r7, #24]
}
 800f870:	bf00      	nop
 800f872:	bf00      	nop
 800f874:	e7fd      	b.n	800f872 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f876:	68ba      	ldr	r2, [r7, #8]
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	429a      	cmp	r2, r3
 800f87c:	d90b      	bls.n	800f896 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800f87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f882:	f383 8811 	msr	BASEPRI, r3
 800f886:	f3bf 8f6f 	isb	sy
 800f88a:	f3bf 8f4f 	dsb	sy
 800f88e:	617b      	str	r3, [r7, #20]
}
 800f890:	bf00      	nop
 800f892:	bf00      	nop
 800f894:	e7fd      	b.n	800f892 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f896:	2302      	movs	r3, #2
 800f898:	9300      	str	r3, [sp, #0]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2200      	movs	r2, #0
 800f89e:	2100      	movs	r1, #0
 800f8a0:	68f8      	ldr	r0, [r7, #12]
 800f8a2:	f7ff fe3f 	bl	800f524 <xQueueGenericCreateStatic>
 800f8a6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f8a8:	69fb      	ldr	r3, [r7, #28]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d002      	beq.n	800f8b4 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f8ae:	69fb      	ldr	r3, [r7, #28]
 800f8b0:	68ba      	ldr	r2, [r7, #8]
 800f8b2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f8b4:	69fb      	ldr	r3, [r7, #28]
	}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3720      	adds	r7, #32
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}

0800f8be <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f8be:	b580      	push	{r7, lr}
 800f8c0:	b086      	sub	sp, #24
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	6078      	str	r0, [r7, #4]
 800f8c6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d10b      	bne.n	800f8e6 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800f8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8d2:	f383 8811 	msr	BASEPRI, r3
 800f8d6:	f3bf 8f6f 	isb	sy
 800f8da:	f3bf 8f4f 	dsb	sy
 800f8de:	613b      	str	r3, [r7, #16]
}
 800f8e0:	bf00      	nop
 800f8e2:	bf00      	nop
 800f8e4:	e7fd      	b.n	800f8e2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f8e6:	683a      	ldr	r2, [r7, #0]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d90b      	bls.n	800f906 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800f8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8f2:	f383 8811 	msr	BASEPRI, r3
 800f8f6:	f3bf 8f6f 	isb	sy
 800f8fa:	f3bf 8f4f 	dsb	sy
 800f8fe:	60fb      	str	r3, [r7, #12]
}
 800f900:	bf00      	nop
 800f902:	bf00      	nop
 800f904:	e7fd      	b.n	800f902 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f906:	2202      	movs	r2, #2
 800f908:	2100      	movs	r1, #0
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f7ff fe87 	bl	800f61e <xQueueGenericCreate>
 800f910:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d002      	beq.n	800f91e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f918:	697b      	ldr	r3, [r7, #20]
 800f91a:	683a      	ldr	r2, [r7, #0]
 800f91c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f91e:	697b      	ldr	r3, [r7, #20]
	}
 800f920:	4618      	mov	r0, r3
 800f922:	3718      	adds	r7, #24
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b08e      	sub	sp, #56	@ 0x38
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	60f8      	str	r0, [r7, #12]
 800f930:	60b9      	str	r1, [r7, #8]
 800f932:	607a      	str	r2, [r7, #4]
 800f934:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f936:	2300      	movs	r3, #0
 800f938:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f940:	2b00      	cmp	r3, #0
 800f942:	d10b      	bne.n	800f95c <xQueueGenericSend+0x34>
	__asm volatile
 800f944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f948:	f383 8811 	msr	BASEPRI, r3
 800f94c:	f3bf 8f6f 	isb	sy
 800f950:	f3bf 8f4f 	dsb	sy
 800f954:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f956:	bf00      	nop
 800f958:	bf00      	nop
 800f95a:	e7fd      	b.n	800f958 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d103      	bne.n	800f96a <xQueueGenericSend+0x42>
 800f962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f966:	2b00      	cmp	r3, #0
 800f968:	d101      	bne.n	800f96e <xQueueGenericSend+0x46>
 800f96a:	2301      	movs	r3, #1
 800f96c:	e000      	b.n	800f970 <xQueueGenericSend+0x48>
 800f96e:	2300      	movs	r3, #0
 800f970:	2b00      	cmp	r3, #0
 800f972:	d10b      	bne.n	800f98c <xQueueGenericSend+0x64>
	__asm volatile
 800f974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f978:	f383 8811 	msr	BASEPRI, r3
 800f97c:	f3bf 8f6f 	isb	sy
 800f980:	f3bf 8f4f 	dsb	sy
 800f984:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f986:	bf00      	nop
 800f988:	bf00      	nop
 800f98a:	e7fd      	b.n	800f988 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	2b02      	cmp	r3, #2
 800f990:	d103      	bne.n	800f99a <xQueueGenericSend+0x72>
 800f992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f996:	2b01      	cmp	r3, #1
 800f998:	d101      	bne.n	800f99e <xQueueGenericSend+0x76>
 800f99a:	2301      	movs	r3, #1
 800f99c:	e000      	b.n	800f9a0 <xQueueGenericSend+0x78>
 800f99e:	2300      	movs	r3, #0
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d10b      	bne.n	800f9bc <xQueueGenericSend+0x94>
	__asm volatile
 800f9a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9a8:	f383 8811 	msr	BASEPRI, r3
 800f9ac:	f3bf 8f6f 	isb	sy
 800f9b0:	f3bf 8f4f 	dsb	sy
 800f9b4:	623b      	str	r3, [r7, #32]
}
 800f9b6:	bf00      	nop
 800f9b8:	bf00      	nop
 800f9ba:	e7fd      	b.n	800f9b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f9bc:	f001 fd38 	bl	8011430 <xTaskGetSchedulerState>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d102      	bne.n	800f9cc <xQueueGenericSend+0xa4>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d101      	bne.n	800f9d0 <xQueueGenericSend+0xa8>
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	e000      	b.n	800f9d2 <xQueueGenericSend+0xaa>
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d10b      	bne.n	800f9ee <xQueueGenericSend+0xc6>
	__asm volatile
 800f9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9da:	f383 8811 	msr	BASEPRI, r3
 800f9de:	f3bf 8f6f 	isb	sy
 800f9e2:	f3bf 8f4f 	dsb	sy
 800f9e6:	61fb      	str	r3, [r7, #28]
}
 800f9e8:	bf00      	nop
 800f9ea:	bf00      	nop
 800f9ec:	e7fd      	b.n	800f9ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f9ee:	f002 fb8b 	bl	8012108 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d302      	bcc.n	800fa04 <xQueueGenericSend+0xdc>
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	2b02      	cmp	r3, #2
 800fa02:	d129      	bne.n	800fa58 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fa04:	683a      	ldr	r2, [r7, #0]
 800fa06:	68b9      	ldr	r1, [r7, #8]
 800fa08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fa0a:	f000 fc6d 	bl	80102e8 <prvCopyDataToQueue>
 800fa0e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fa10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d010      	beq.n	800fa3a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fa18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa1a:	3324      	adds	r3, #36	@ 0x24
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f001 fb31 	bl	8011084 <xTaskRemoveFromEventList>
 800fa22:	4603      	mov	r3, r0
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d013      	beq.n	800fa50 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fa28:	4b3f      	ldr	r3, [pc, #252]	@ (800fb28 <xQueueGenericSend+0x200>)
 800fa2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa2e:	601a      	str	r2, [r3, #0]
 800fa30:	f3bf 8f4f 	dsb	sy
 800fa34:	f3bf 8f6f 	isb	sy
 800fa38:	e00a      	b.n	800fa50 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fa3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d007      	beq.n	800fa50 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fa40:	4b39      	ldr	r3, [pc, #228]	@ (800fb28 <xQueueGenericSend+0x200>)
 800fa42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa46:	601a      	str	r2, [r3, #0]
 800fa48:	f3bf 8f4f 	dsb	sy
 800fa4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fa50:	f002 fb8c 	bl	801216c <vPortExitCritical>
				return pdPASS;
 800fa54:	2301      	movs	r3, #1
 800fa56:	e063      	b.n	800fb20 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d103      	bne.n	800fa66 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fa5e:	f002 fb85 	bl	801216c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fa62:	2300      	movs	r3, #0
 800fa64:	e05c      	b.n	800fb20 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fa66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d106      	bne.n	800fa7a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fa6c:	f107 0314 	add.w	r3, r7, #20
 800fa70:	4618      	mov	r0, r3
 800fa72:	f001 fb6b 	bl	801114c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fa76:	2301      	movs	r3, #1
 800fa78:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fa7a:	f002 fb77 	bl	801216c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fa7e:	f001 f8a7 	bl	8010bd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fa82:	f002 fb41 	bl	8012108 <vPortEnterCritical>
 800fa86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fa8c:	b25b      	sxtb	r3, r3
 800fa8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fa92:	d103      	bne.n	800fa9c <xQueueGenericSend+0x174>
 800fa94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa96:	2200      	movs	r2, #0
 800fa98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fa9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800faa2:	b25b      	sxtb	r3, r3
 800faa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800faa8:	d103      	bne.n	800fab2 <xQueueGenericSend+0x18a>
 800faaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faac:	2200      	movs	r2, #0
 800faae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fab2:	f002 fb5b 	bl	801216c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fab6:	1d3a      	adds	r2, r7, #4
 800fab8:	f107 0314 	add.w	r3, r7, #20
 800fabc:	4611      	mov	r1, r2
 800fabe:	4618      	mov	r0, r3
 800fac0:	f001 fb5a 	bl	8011178 <xTaskCheckForTimeOut>
 800fac4:	4603      	mov	r3, r0
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d124      	bne.n	800fb14 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800faca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800facc:	f000 fd04 	bl	80104d8 <prvIsQueueFull>
 800fad0:	4603      	mov	r3, r0
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d018      	beq.n	800fb08 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fad8:	3310      	adds	r3, #16
 800fada:	687a      	ldr	r2, [r7, #4]
 800fadc:	4611      	mov	r1, r2
 800fade:	4618      	mov	r0, r3
 800fae0:	f001 fa7e 	bl	8010fe0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fae4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fae6:	f000 fc8f 	bl	8010408 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800faea:	f001 f87f 	bl	8010bec <xTaskResumeAll>
 800faee:	4603      	mov	r3, r0
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	f47f af7c 	bne.w	800f9ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800faf6:	4b0c      	ldr	r3, [pc, #48]	@ (800fb28 <xQueueGenericSend+0x200>)
 800faf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fafc:	601a      	str	r2, [r3, #0]
 800fafe:	f3bf 8f4f 	dsb	sy
 800fb02:	f3bf 8f6f 	isb	sy
 800fb06:	e772      	b.n	800f9ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fb08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fb0a:	f000 fc7d 	bl	8010408 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fb0e:	f001 f86d 	bl	8010bec <xTaskResumeAll>
 800fb12:	e76c      	b.n	800f9ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fb14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fb16:	f000 fc77 	bl	8010408 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fb1a:	f001 f867 	bl	8010bec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fb1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3738      	adds	r7, #56	@ 0x38
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}
 800fb28:	e000ed04 	.word	0xe000ed04

0800fb2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b090      	sub	sp, #64	@ 0x40
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	607a      	str	r2, [r7, #4]
 800fb38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800fb3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d10b      	bne.n	800fb5c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800fb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb48:	f383 8811 	msr	BASEPRI, r3
 800fb4c:	f3bf 8f6f 	isb	sy
 800fb50:	f3bf 8f4f 	dsb	sy
 800fb54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fb56:	bf00      	nop
 800fb58:	bf00      	nop
 800fb5a:	e7fd      	b.n	800fb58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d103      	bne.n	800fb6a <xQueueGenericSendFromISR+0x3e>
 800fb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d101      	bne.n	800fb6e <xQueueGenericSendFromISR+0x42>
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	e000      	b.n	800fb70 <xQueueGenericSendFromISR+0x44>
 800fb6e:	2300      	movs	r3, #0
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d10b      	bne.n	800fb8c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800fb74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb78:	f383 8811 	msr	BASEPRI, r3
 800fb7c:	f3bf 8f6f 	isb	sy
 800fb80:	f3bf 8f4f 	dsb	sy
 800fb84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fb86:	bf00      	nop
 800fb88:	bf00      	nop
 800fb8a:	e7fd      	b.n	800fb88 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	2b02      	cmp	r3, #2
 800fb90:	d103      	bne.n	800fb9a <xQueueGenericSendFromISR+0x6e>
 800fb92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb96:	2b01      	cmp	r3, #1
 800fb98:	d101      	bne.n	800fb9e <xQueueGenericSendFromISR+0x72>
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	e000      	b.n	800fba0 <xQueueGenericSendFromISR+0x74>
 800fb9e:	2300      	movs	r3, #0
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d10b      	bne.n	800fbbc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800fba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fba8:	f383 8811 	msr	BASEPRI, r3
 800fbac:	f3bf 8f6f 	isb	sy
 800fbb0:	f3bf 8f4f 	dsb	sy
 800fbb4:	623b      	str	r3, [r7, #32]
}
 800fbb6:	bf00      	nop
 800fbb8:	bf00      	nop
 800fbba:	e7fd      	b.n	800fbb8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fbbc:	f002 fb84 	bl	80122c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fbc0:	f3ef 8211 	mrs	r2, BASEPRI
 800fbc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbc8:	f383 8811 	msr	BASEPRI, r3
 800fbcc:	f3bf 8f6f 	isb	sy
 800fbd0:	f3bf 8f4f 	dsb	sy
 800fbd4:	61fa      	str	r2, [r7, #28]
 800fbd6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fbd8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fbda:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fbdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fbe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d302      	bcc.n	800fbee <xQueueGenericSendFromISR+0xc2>
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	2b02      	cmp	r3, #2
 800fbec:	d12f      	bne.n	800fc4e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fbee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbf0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fbf4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fbf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fbfe:	683a      	ldr	r2, [r7, #0]
 800fc00:	68b9      	ldr	r1, [r7, #8]
 800fc02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fc04:	f000 fb70 	bl	80102e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fc08:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800fc0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fc10:	d112      	bne.n	800fc38 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fc12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d016      	beq.n	800fc48 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fc1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc1c:	3324      	adds	r3, #36	@ 0x24
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f001 fa30 	bl	8011084 <xTaskRemoveFromEventList>
 800fc24:	4603      	mov	r3, r0
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d00e      	beq.n	800fc48 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d00b      	beq.n	800fc48 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2201      	movs	r2, #1
 800fc34:	601a      	str	r2, [r3, #0]
 800fc36:	e007      	b.n	800fc48 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fc38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	b2db      	uxtb	r3, r3
 800fc40:	b25a      	sxtb	r2, r3
 800fc42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fc48:	2301      	movs	r3, #1
 800fc4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800fc4c:	e001      	b.n	800fc52 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fc52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc54:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fc5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	3740      	adds	r7, #64	@ 0x40
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}

0800fc68 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b08e      	sub	sp, #56	@ 0x38
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fc76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d10b      	bne.n	800fc94 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800fc7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc80:	f383 8811 	msr	BASEPRI, r3
 800fc84:	f3bf 8f6f 	isb	sy
 800fc88:	f3bf 8f4f 	dsb	sy
 800fc8c:	623b      	str	r3, [r7, #32]
}
 800fc8e:	bf00      	nop
 800fc90:	bf00      	nop
 800fc92:	e7fd      	b.n	800fc90 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fc94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d00b      	beq.n	800fcb4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800fc9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fca0:	f383 8811 	msr	BASEPRI, r3
 800fca4:	f3bf 8f6f 	isb	sy
 800fca8:	f3bf 8f4f 	dsb	sy
 800fcac:	61fb      	str	r3, [r7, #28]
}
 800fcae:	bf00      	nop
 800fcb0:	bf00      	nop
 800fcb2:	e7fd      	b.n	800fcb0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fcb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d103      	bne.n	800fcc4 <xQueueGiveFromISR+0x5c>
 800fcbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcbe:	689b      	ldr	r3, [r3, #8]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d101      	bne.n	800fcc8 <xQueueGiveFromISR+0x60>
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	e000      	b.n	800fcca <xQueueGiveFromISR+0x62>
 800fcc8:	2300      	movs	r3, #0
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d10b      	bne.n	800fce6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800fcce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcd2:	f383 8811 	msr	BASEPRI, r3
 800fcd6:	f3bf 8f6f 	isb	sy
 800fcda:	f3bf 8f4f 	dsb	sy
 800fcde:	61bb      	str	r3, [r7, #24]
}
 800fce0:	bf00      	nop
 800fce2:	bf00      	nop
 800fce4:	e7fd      	b.n	800fce2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fce6:	f002 faef 	bl	80122c8 <vPortValidateInterruptPriority>
	__asm volatile
 800fcea:	f3ef 8211 	mrs	r2, BASEPRI
 800fcee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcf2:	f383 8811 	msr	BASEPRI, r3
 800fcf6:	f3bf 8f6f 	isb	sy
 800fcfa:	f3bf 8f4f 	dsb	sy
 800fcfe:	617a      	str	r2, [r7, #20]
 800fd00:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fd02:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fd04:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd0a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fd0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d22b      	bcs.n	800fd6e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fd16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fd1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fd20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd22:	1c5a      	adds	r2, r3, #1
 800fd24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd26:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fd28:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fd2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fd30:	d112      	bne.n	800fd58 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d016      	beq.n	800fd68 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fd3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd3c:	3324      	adds	r3, #36	@ 0x24
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f001 f9a0 	bl	8011084 <xTaskRemoveFromEventList>
 800fd44:	4603      	mov	r3, r0
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d00e      	beq.n	800fd68 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d00b      	beq.n	800fd68 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	2201      	movs	r2, #1
 800fd54:	601a      	str	r2, [r3, #0]
 800fd56:	e007      	b.n	800fd68 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fd58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd5c:	3301      	adds	r3, #1
 800fd5e:	b2db      	uxtb	r3, r3
 800fd60:	b25a      	sxtb	r2, r3
 800fd62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fd68:	2301      	movs	r3, #1
 800fd6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd6c:	e001      	b.n	800fd72 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd74:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	f383 8811 	msr	BASEPRI, r3
}
 800fd7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fd7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3738      	adds	r7, #56	@ 0x38
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b08c      	sub	sp, #48	@ 0x30
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	60f8      	str	r0, [r7, #12]
 800fd90:	60b9      	str	r1, [r7, #8]
 800fd92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fd94:	2300      	movs	r3, #0
 800fd96:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fd9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d10b      	bne.n	800fdba <xQueueReceive+0x32>
	__asm volatile
 800fda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fda6:	f383 8811 	msr	BASEPRI, r3
 800fdaa:	f3bf 8f6f 	isb	sy
 800fdae:	f3bf 8f4f 	dsb	sy
 800fdb2:	623b      	str	r3, [r7, #32]
}
 800fdb4:	bf00      	nop
 800fdb6:	bf00      	nop
 800fdb8:	e7fd      	b.n	800fdb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d103      	bne.n	800fdc8 <xQueueReceive+0x40>
 800fdc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d101      	bne.n	800fdcc <xQueueReceive+0x44>
 800fdc8:	2301      	movs	r3, #1
 800fdca:	e000      	b.n	800fdce <xQueueReceive+0x46>
 800fdcc:	2300      	movs	r3, #0
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d10b      	bne.n	800fdea <xQueueReceive+0x62>
	__asm volatile
 800fdd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdd6:	f383 8811 	msr	BASEPRI, r3
 800fdda:	f3bf 8f6f 	isb	sy
 800fdde:	f3bf 8f4f 	dsb	sy
 800fde2:	61fb      	str	r3, [r7, #28]
}
 800fde4:	bf00      	nop
 800fde6:	bf00      	nop
 800fde8:	e7fd      	b.n	800fde6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fdea:	f001 fb21 	bl	8011430 <xTaskGetSchedulerState>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d102      	bne.n	800fdfa <xQueueReceive+0x72>
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d101      	bne.n	800fdfe <xQueueReceive+0x76>
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	e000      	b.n	800fe00 <xQueueReceive+0x78>
 800fdfe:	2300      	movs	r3, #0
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d10b      	bne.n	800fe1c <xQueueReceive+0x94>
	__asm volatile
 800fe04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe08:	f383 8811 	msr	BASEPRI, r3
 800fe0c:	f3bf 8f6f 	isb	sy
 800fe10:	f3bf 8f4f 	dsb	sy
 800fe14:	61bb      	str	r3, [r7, #24]
}
 800fe16:	bf00      	nop
 800fe18:	bf00      	nop
 800fe1a:	e7fd      	b.n	800fe18 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fe1c:	f002 f974 	bl	8012108 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe24:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d01f      	beq.n	800fe6c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fe2c:	68b9      	ldr	r1, [r7, #8]
 800fe2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe30:	f000 fac4 	bl	80103bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fe34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe36:	1e5a      	subs	r2, r3, #1
 800fe38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe3a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe3e:	691b      	ldr	r3, [r3, #16]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d00f      	beq.n	800fe64 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe46:	3310      	adds	r3, #16
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f001 f91b 	bl	8011084 <xTaskRemoveFromEventList>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d007      	beq.n	800fe64 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fe54:	4b3c      	ldr	r3, [pc, #240]	@ (800ff48 <xQueueReceive+0x1c0>)
 800fe56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe5a:	601a      	str	r2, [r3, #0]
 800fe5c:	f3bf 8f4f 	dsb	sy
 800fe60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fe64:	f002 f982 	bl	801216c <vPortExitCritical>
				return pdPASS;
 800fe68:	2301      	movs	r3, #1
 800fe6a:	e069      	b.n	800ff40 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d103      	bne.n	800fe7a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fe72:	f002 f97b 	bl	801216c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fe76:	2300      	movs	r3, #0
 800fe78:	e062      	b.n	800ff40 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fe7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d106      	bne.n	800fe8e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fe80:	f107 0310 	add.w	r3, r7, #16
 800fe84:	4618      	mov	r0, r3
 800fe86:	f001 f961 	bl	801114c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fe8e:	f002 f96d 	bl	801216c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fe92:	f000 fe9d 	bl	8010bd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fe96:	f002 f937 	bl	8012108 <vPortEnterCritical>
 800fe9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fea0:	b25b      	sxtb	r3, r3
 800fea2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fea6:	d103      	bne.n	800feb0 <xQueueReceive+0x128>
 800fea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feaa:	2200      	movs	r2, #0
 800feac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800feb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800feb6:	b25b      	sxtb	r3, r3
 800feb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800febc:	d103      	bne.n	800fec6 <xQueueReceive+0x13e>
 800febe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fec0:	2200      	movs	r2, #0
 800fec2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fec6:	f002 f951 	bl	801216c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800feca:	1d3a      	adds	r2, r7, #4
 800fecc:	f107 0310 	add.w	r3, r7, #16
 800fed0:	4611      	mov	r1, r2
 800fed2:	4618      	mov	r0, r3
 800fed4:	f001 f950 	bl	8011178 <xTaskCheckForTimeOut>
 800fed8:	4603      	mov	r3, r0
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d123      	bne.n	800ff26 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fede:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fee0:	f000 fae4 	bl	80104ac <prvIsQueueEmpty>
 800fee4:	4603      	mov	r3, r0
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d017      	beq.n	800ff1a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800feea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feec:	3324      	adds	r3, #36	@ 0x24
 800feee:	687a      	ldr	r2, [r7, #4]
 800fef0:	4611      	mov	r1, r2
 800fef2:	4618      	mov	r0, r3
 800fef4:	f001 f874 	bl	8010fe0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fef8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fefa:	f000 fa85 	bl	8010408 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fefe:	f000 fe75 	bl	8010bec <xTaskResumeAll>
 800ff02:	4603      	mov	r3, r0
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d189      	bne.n	800fe1c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ff08:	4b0f      	ldr	r3, [pc, #60]	@ (800ff48 <xQueueReceive+0x1c0>)
 800ff0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff0e:	601a      	str	r2, [r3, #0]
 800ff10:	f3bf 8f4f 	dsb	sy
 800ff14:	f3bf 8f6f 	isb	sy
 800ff18:	e780      	b.n	800fe1c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ff1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ff1c:	f000 fa74 	bl	8010408 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ff20:	f000 fe64 	bl	8010bec <xTaskResumeAll>
 800ff24:	e77a      	b.n	800fe1c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ff26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ff28:	f000 fa6e 	bl	8010408 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ff2c:	f000 fe5e 	bl	8010bec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ff30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ff32:	f000 fabb 	bl	80104ac <prvIsQueueEmpty>
 800ff36:	4603      	mov	r3, r0
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	f43f af6f 	beq.w	800fe1c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ff3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	3730      	adds	r7, #48	@ 0x30
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}
 800ff48:	e000ed04 	.word	0xe000ed04

0800ff4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b08e      	sub	sp, #56	@ 0x38
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ff56:	2300      	movs	r3, #0
 800ff58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ff62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d10b      	bne.n	800ff80 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800ff68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff6c:	f383 8811 	msr	BASEPRI, r3
 800ff70:	f3bf 8f6f 	isb	sy
 800ff74:	f3bf 8f4f 	dsb	sy
 800ff78:	623b      	str	r3, [r7, #32]
}
 800ff7a:	bf00      	nop
 800ff7c:	bf00      	nop
 800ff7e:	e7fd      	b.n	800ff7c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ff80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d00b      	beq.n	800ffa0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800ff88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff8c:	f383 8811 	msr	BASEPRI, r3
 800ff90:	f3bf 8f6f 	isb	sy
 800ff94:	f3bf 8f4f 	dsb	sy
 800ff98:	61fb      	str	r3, [r7, #28]
}
 800ff9a:	bf00      	nop
 800ff9c:	bf00      	nop
 800ff9e:	e7fd      	b.n	800ff9c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ffa0:	f001 fa46 	bl	8011430 <xTaskGetSchedulerState>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d102      	bne.n	800ffb0 <xQueueSemaphoreTake+0x64>
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d101      	bne.n	800ffb4 <xQueueSemaphoreTake+0x68>
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	e000      	b.n	800ffb6 <xQueueSemaphoreTake+0x6a>
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d10b      	bne.n	800ffd2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800ffba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffbe:	f383 8811 	msr	BASEPRI, r3
 800ffc2:	f3bf 8f6f 	isb	sy
 800ffc6:	f3bf 8f4f 	dsb	sy
 800ffca:	61bb      	str	r3, [r7, #24]
}
 800ffcc:	bf00      	nop
 800ffce:	bf00      	nop
 800ffd0:	e7fd      	b.n	800ffce <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ffd2:	f002 f899 	bl	8012108 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ffd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffda:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ffdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d024      	beq.n	801002c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ffe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffe4:	1e5a      	subs	r2, r3, #1
 800ffe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffe8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ffea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d104      	bne.n	800fffc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fff2:	f001 fb97 	bl	8011724 <pvTaskIncrementMutexHeldCount>
 800fff6:	4602      	mov	r2, r0
 800fff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fffa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fffe:	691b      	ldr	r3, [r3, #16]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d00f      	beq.n	8010024 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010006:	3310      	adds	r3, #16
 8010008:	4618      	mov	r0, r3
 801000a:	f001 f83b 	bl	8011084 <xTaskRemoveFromEventList>
 801000e:	4603      	mov	r3, r0
 8010010:	2b00      	cmp	r3, #0
 8010012:	d007      	beq.n	8010024 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010014:	4b54      	ldr	r3, [pc, #336]	@ (8010168 <xQueueSemaphoreTake+0x21c>)
 8010016:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801001a:	601a      	str	r2, [r3, #0]
 801001c:	f3bf 8f4f 	dsb	sy
 8010020:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010024:	f002 f8a2 	bl	801216c <vPortExitCritical>
				return pdPASS;
 8010028:	2301      	movs	r3, #1
 801002a:	e098      	b.n	801015e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d112      	bne.n	8010058 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010034:	2b00      	cmp	r3, #0
 8010036:	d00b      	beq.n	8010050 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8010038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801003c:	f383 8811 	msr	BASEPRI, r3
 8010040:	f3bf 8f6f 	isb	sy
 8010044:	f3bf 8f4f 	dsb	sy
 8010048:	617b      	str	r3, [r7, #20]
}
 801004a:	bf00      	nop
 801004c:	bf00      	nop
 801004e:	e7fd      	b.n	801004c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010050:	f002 f88c 	bl	801216c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010054:	2300      	movs	r3, #0
 8010056:	e082      	b.n	801015e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801005a:	2b00      	cmp	r3, #0
 801005c:	d106      	bne.n	801006c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801005e:	f107 030c 	add.w	r3, r7, #12
 8010062:	4618      	mov	r0, r3
 8010064:	f001 f872 	bl	801114c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010068:	2301      	movs	r3, #1
 801006a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801006c:	f002 f87e 	bl	801216c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010070:	f000 fdae 	bl	8010bd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010074:	f002 f848 	bl	8012108 <vPortEnterCritical>
 8010078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801007a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801007e:	b25b      	sxtb	r3, r3
 8010080:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010084:	d103      	bne.n	801008e <xQueueSemaphoreTake+0x142>
 8010086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010088:	2200      	movs	r2, #0
 801008a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801008e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010090:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010094:	b25b      	sxtb	r3, r3
 8010096:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801009a:	d103      	bne.n	80100a4 <xQueueSemaphoreTake+0x158>
 801009c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801009e:	2200      	movs	r2, #0
 80100a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80100a4:	f002 f862 	bl	801216c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80100a8:	463a      	mov	r2, r7
 80100aa:	f107 030c 	add.w	r3, r7, #12
 80100ae:	4611      	mov	r1, r2
 80100b0:	4618      	mov	r0, r3
 80100b2:	f001 f861 	bl	8011178 <xTaskCheckForTimeOut>
 80100b6:	4603      	mov	r3, r0
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d132      	bne.n	8010122 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80100bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80100be:	f000 f9f5 	bl	80104ac <prvIsQueueEmpty>
 80100c2:	4603      	mov	r3, r0
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d026      	beq.n	8010116 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80100c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d109      	bne.n	80100e4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80100d0:	f002 f81a 	bl	8012108 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80100d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100d6:	689b      	ldr	r3, [r3, #8]
 80100d8:	4618      	mov	r0, r3
 80100da:	f001 f9c7 	bl	801146c <xTaskPriorityInherit>
 80100de:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80100e0:	f002 f844 	bl	801216c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80100e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100e6:	3324      	adds	r3, #36	@ 0x24
 80100e8:	683a      	ldr	r2, [r7, #0]
 80100ea:	4611      	mov	r1, r2
 80100ec:	4618      	mov	r0, r3
 80100ee:	f000 ff77 	bl	8010fe0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80100f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80100f4:	f000 f988 	bl	8010408 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80100f8:	f000 fd78 	bl	8010bec <xTaskResumeAll>
 80100fc:	4603      	mov	r3, r0
 80100fe:	2b00      	cmp	r3, #0
 8010100:	f47f af67 	bne.w	800ffd2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8010104:	4b18      	ldr	r3, [pc, #96]	@ (8010168 <xQueueSemaphoreTake+0x21c>)
 8010106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801010a:	601a      	str	r2, [r3, #0]
 801010c:	f3bf 8f4f 	dsb	sy
 8010110:	f3bf 8f6f 	isb	sy
 8010114:	e75d      	b.n	800ffd2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010116:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010118:	f000 f976 	bl	8010408 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801011c:	f000 fd66 	bl	8010bec <xTaskResumeAll>
 8010120:	e757      	b.n	800ffd2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010122:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010124:	f000 f970 	bl	8010408 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010128:	f000 fd60 	bl	8010bec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801012c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801012e:	f000 f9bd 	bl	80104ac <prvIsQueueEmpty>
 8010132:	4603      	mov	r3, r0
 8010134:	2b00      	cmp	r3, #0
 8010136:	f43f af4c 	beq.w	800ffd2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801013a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801013c:	2b00      	cmp	r3, #0
 801013e:	d00d      	beq.n	801015c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8010140:	f001 ffe2 	bl	8012108 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010144:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010146:	f000 f8b7 	bl	80102b8 <prvGetDisinheritPriorityAfterTimeout>
 801014a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801014c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801014e:	689b      	ldr	r3, [r3, #8]
 8010150:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010152:	4618      	mov	r0, r3
 8010154:	f001 fa62 	bl	801161c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010158:	f002 f808 	bl	801216c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801015c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801015e:	4618      	mov	r0, r3
 8010160:	3738      	adds	r7, #56	@ 0x38
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}
 8010166:	bf00      	nop
 8010168:	e000ed04 	.word	0xe000ed04

0801016c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b08e      	sub	sp, #56	@ 0x38
 8010170:	af00      	add	r7, sp, #0
 8010172:	60f8      	str	r0, [r7, #12]
 8010174:	60b9      	str	r1, [r7, #8]
 8010176:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801017c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801017e:	2b00      	cmp	r3, #0
 8010180:	d10b      	bne.n	801019a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8010182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010186:	f383 8811 	msr	BASEPRI, r3
 801018a:	f3bf 8f6f 	isb	sy
 801018e:	f3bf 8f4f 	dsb	sy
 8010192:	623b      	str	r3, [r7, #32]
}
 8010194:	bf00      	nop
 8010196:	bf00      	nop
 8010198:	e7fd      	b.n	8010196 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d103      	bne.n	80101a8 <xQueueReceiveFromISR+0x3c>
 80101a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d101      	bne.n	80101ac <xQueueReceiveFromISR+0x40>
 80101a8:	2301      	movs	r3, #1
 80101aa:	e000      	b.n	80101ae <xQueueReceiveFromISR+0x42>
 80101ac:	2300      	movs	r3, #0
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d10b      	bne.n	80101ca <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80101b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101b6:	f383 8811 	msr	BASEPRI, r3
 80101ba:	f3bf 8f6f 	isb	sy
 80101be:	f3bf 8f4f 	dsb	sy
 80101c2:	61fb      	str	r3, [r7, #28]
}
 80101c4:	bf00      	nop
 80101c6:	bf00      	nop
 80101c8:	e7fd      	b.n	80101c6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80101ca:	f002 f87d 	bl	80122c8 <vPortValidateInterruptPriority>
	__asm volatile
 80101ce:	f3ef 8211 	mrs	r2, BASEPRI
 80101d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101d6:	f383 8811 	msr	BASEPRI, r3
 80101da:	f3bf 8f6f 	isb	sy
 80101de:	f3bf 8f4f 	dsb	sy
 80101e2:	61ba      	str	r2, [r7, #24]
 80101e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80101e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80101e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80101ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101ee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80101f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d02f      	beq.n	8010256 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80101f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80101fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010200:	68b9      	ldr	r1, [r7, #8]
 8010202:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010204:	f000 f8da 	bl	80103bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801020a:	1e5a      	subs	r2, r3, #1
 801020c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801020e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010210:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010214:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010218:	d112      	bne.n	8010240 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801021a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801021c:	691b      	ldr	r3, [r3, #16]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d016      	beq.n	8010250 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010224:	3310      	adds	r3, #16
 8010226:	4618      	mov	r0, r3
 8010228:	f000 ff2c 	bl	8011084 <xTaskRemoveFromEventList>
 801022c:	4603      	mov	r3, r0
 801022e:	2b00      	cmp	r3, #0
 8010230:	d00e      	beq.n	8010250 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d00b      	beq.n	8010250 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2201      	movs	r2, #1
 801023c:	601a      	str	r2, [r3, #0]
 801023e:	e007      	b.n	8010250 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010244:	3301      	adds	r3, #1
 8010246:	b2db      	uxtb	r3, r3
 8010248:	b25a      	sxtb	r2, r3
 801024a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801024c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8010250:	2301      	movs	r3, #1
 8010252:	637b      	str	r3, [r7, #52]	@ 0x34
 8010254:	e001      	b.n	801025a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8010256:	2300      	movs	r3, #0
 8010258:	637b      	str	r3, [r7, #52]	@ 0x34
 801025a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801025c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	f383 8811 	msr	BASEPRI, r3
}
 8010264:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010268:	4618      	mov	r0, r3
 801026a:	3738      	adds	r7, #56	@ 0x38
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}

08010270 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b084      	sub	sp, #16
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d10b      	bne.n	801029a <vQueueDelete+0x2a>
	__asm volatile
 8010282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010286:	f383 8811 	msr	BASEPRI, r3
 801028a:	f3bf 8f6f 	isb	sy
 801028e:	f3bf 8f4f 	dsb	sy
 8010292:	60bb      	str	r3, [r7, #8]
}
 8010294:	bf00      	nop
 8010296:	bf00      	nop
 8010298:	e7fd      	b.n	8010296 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801029a:	68f8      	ldr	r0, [r7, #12]
 801029c:	f000 f95e 	bl	801055c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d102      	bne.n	80102b0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80102aa:	68f8      	ldr	r0, [r7, #12]
 80102ac:	f002 f91c 	bl	80124e8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80102b0:	bf00      	nop
 80102b2:	3710      	adds	r7, #16
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}

080102b8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80102b8:	b480      	push	{r7}
 80102ba:	b085      	sub	sp, #20
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d006      	beq.n	80102d6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80102d2:	60fb      	str	r3, [r7, #12]
 80102d4:	e001      	b.n	80102da <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80102d6:	2300      	movs	r3, #0
 80102d8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80102da:	68fb      	ldr	r3, [r7, #12]
	}
 80102dc:	4618      	mov	r0, r3
 80102de:	3714      	adds	r7, #20
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr

080102e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b086      	sub	sp, #24
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	60f8      	str	r0, [r7, #12]
 80102f0:	60b9      	str	r1, [r7, #8]
 80102f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80102f4:	2300      	movs	r3, #0
 80102f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010302:	2b00      	cmp	r3, #0
 8010304:	d10d      	bne.n	8010322 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d14d      	bne.n	80103aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	689b      	ldr	r3, [r3, #8]
 8010312:	4618      	mov	r0, r3
 8010314:	f001 f912 	bl	801153c <xTaskPriorityDisinherit>
 8010318:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	2200      	movs	r2, #0
 801031e:	609a      	str	r2, [r3, #8]
 8010320:	e043      	b.n	80103aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d119      	bne.n	801035c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	6858      	ldr	r0, [r3, #4]
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010330:	461a      	mov	r2, r3
 8010332:	68b9      	ldr	r1, [r7, #8]
 8010334:	f00f fd91 	bl	801fe5a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	685a      	ldr	r2, [r3, #4]
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010340:	441a      	add	r2, r3
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	685a      	ldr	r2, [r3, #4]
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	689b      	ldr	r3, [r3, #8]
 801034e:	429a      	cmp	r2, r3
 8010350:	d32b      	bcc.n	80103aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	681a      	ldr	r2, [r3, #0]
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	605a      	str	r2, [r3, #4]
 801035a:	e026      	b.n	80103aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	68d8      	ldr	r0, [r3, #12]
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010364:	461a      	mov	r2, r3
 8010366:	68b9      	ldr	r1, [r7, #8]
 8010368:	f00f fd77 	bl	801fe5a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	68da      	ldr	r2, [r3, #12]
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010374:	425b      	negs	r3, r3
 8010376:	441a      	add	r2, r3
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	68da      	ldr	r2, [r3, #12]
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	429a      	cmp	r2, r3
 8010386:	d207      	bcs.n	8010398 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	689a      	ldr	r2, [r3, #8]
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010390:	425b      	negs	r3, r3
 8010392:	441a      	add	r2, r3
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2b02      	cmp	r3, #2
 801039c:	d105      	bne.n	80103aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801039e:	693b      	ldr	r3, [r7, #16]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d002      	beq.n	80103aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	3b01      	subs	r3, #1
 80103a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	1c5a      	adds	r2, r3, #1
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80103b2:	697b      	ldr	r3, [r7, #20]
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3718      	adds	r7, #24
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
 80103c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d018      	beq.n	8010400 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	68da      	ldr	r2, [r3, #12]
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80103d6:	441a      	add	r2, r3
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	68da      	ldr	r2, [r3, #12]
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	689b      	ldr	r3, [r3, #8]
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d303      	bcc.n	80103f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681a      	ldr	r2, [r3, #0]
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	68d9      	ldr	r1, [r3, #12]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80103f8:	461a      	mov	r2, r3
 80103fa:	6838      	ldr	r0, [r7, #0]
 80103fc:	f00f fd2d 	bl	801fe5a <memcpy>
	}
}
 8010400:	bf00      	nop
 8010402:	3708      	adds	r7, #8
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}

08010408 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b084      	sub	sp, #16
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010410:	f001 fe7a 	bl	8012108 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801041a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801041c:	e011      	b.n	8010442 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010422:	2b00      	cmp	r3, #0
 8010424:	d012      	beq.n	801044c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	3324      	adds	r3, #36	@ 0x24
 801042a:	4618      	mov	r0, r3
 801042c:	f000 fe2a 	bl	8011084 <xTaskRemoveFromEventList>
 8010430:	4603      	mov	r3, r0
 8010432:	2b00      	cmp	r3, #0
 8010434:	d001      	beq.n	801043a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010436:	f000 ff03 	bl	8011240 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801043a:	7bfb      	ldrb	r3, [r7, #15]
 801043c:	3b01      	subs	r3, #1
 801043e:	b2db      	uxtb	r3, r3
 8010440:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010446:	2b00      	cmp	r3, #0
 8010448:	dce9      	bgt.n	801041e <prvUnlockQueue+0x16>
 801044a:	e000      	b.n	801044e <prvUnlockQueue+0x46>
					break;
 801044c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	22ff      	movs	r2, #255	@ 0xff
 8010452:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8010456:	f001 fe89 	bl	801216c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801045a:	f001 fe55 	bl	8012108 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010464:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010466:	e011      	b.n	801048c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	691b      	ldr	r3, [r3, #16]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d012      	beq.n	8010496 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	3310      	adds	r3, #16
 8010474:	4618      	mov	r0, r3
 8010476:	f000 fe05 	bl	8011084 <xTaskRemoveFromEventList>
 801047a:	4603      	mov	r3, r0
 801047c:	2b00      	cmp	r3, #0
 801047e:	d001      	beq.n	8010484 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010480:	f000 fede 	bl	8011240 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010484:	7bbb      	ldrb	r3, [r7, #14]
 8010486:	3b01      	subs	r3, #1
 8010488:	b2db      	uxtb	r3, r3
 801048a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801048c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010490:	2b00      	cmp	r3, #0
 8010492:	dce9      	bgt.n	8010468 <prvUnlockQueue+0x60>
 8010494:	e000      	b.n	8010498 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010496:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	22ff      	movs	r2, #255	@ 0xff
 801049c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80104a0:	f001 fe64 	bl	801216c <vPortExitCritical>
}
 80104a4:	bf00      	nop
 80104a6:	3710      	adds	r7, #16
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b084      	sub	sp, #16
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80104b4:	f001 fe28 	bl	8012108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d102      	bne.n	80104c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80104c0:	2301      	movs	r3, #1
 80104c2:	60fb      	str	r3, [r7, #12]
 80104c4:	e001      	b.n	80104ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80104c6:	2300      	movs	r3, #0
 80104c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80104ca:	f001 fe4f 	bl	801216c <vPortExitCritical>

	return xReturn;
 80104ce:	68fb      	ldr	r3, [r7, #12]
}
 80104d0:	4618      	mov	r0, r3
 80104d2:	3710      	adds	r7, #16
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}

080104d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b084      	sub	sp, #16
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80104e0:	f001 fe12 	bl	8012108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104ec:	429a      	cmp	r2, r3
 80104ee:	d102      	bne.n	80104f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80104f0:	2301      	movs	r3, #1
 80104f2:	60fb      	str	r3, [r7, #12]
 80104f4:	e001      	b.n	80104fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80104f6:	2300      	movs	r3, #0
 80104f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80104fa:	f001 fe37 	bl	801216c <vPortExitCritical>

	return xReturn;
 80104fe:	68fb      	ldr	r3, [r7, #12]
}
 8010500:	4618      	mov	r0, r3
 8010502:	3710      	adds	r7, #16
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}

08010508 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010508:	b480      	push	{r7}
 801050a:	b085      	sub	sp, #20
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010512:	2300      	movs	r3, #0
 8010514:	60fb      	str	r3, [r7, #12]
 8010516:	e014      	b.n	8010542 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010518:	4a0f      	ldr	r2, [pc, #60]	@ (8010558 <vQueueAddToRegistry+0x50>)
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d10b      	bne.n	801053c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010524:	490c      	ldr	r1, [pc, #48]	@ (8010558 <vQueueAddToRegistry+0x50>)
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	683a      	ldr	r2, [r7, #0]
 801052a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801052e:	4a0a      	ldr	r2, [pc, #40]	@ (8010558 <vQueueAddToRegistry+0x50>)
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	00db      	lsls	r3, r3, #3
 8010534:	4413      	add	r3, r2
 8010536:	687a      	ldr	r2, [r7, #4]
 8010538:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801053a:	e006      	b.n	801054a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	3301      	adds	r3, #1
 8010540:	60fb      	str	r3, [r7, #12]
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	2b07      	cmp	r3, #7
 8010546:	d9e7      	bls.n	8010518 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010548:	bf00      	nop
 801054a:	bf00      	nop
 801054c:	3714      	adds	r7, #20
 801054e:	46bd      	mov	sp, r7
 8010550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010554:	4770      	bx	lr
 8010556:	bf00      	nop
 8010558:	20005b3c 	.word	0x20005b3c

0801055c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801055c:	b480      	push	{r7}
 801055e:	b085      	sub	sp, #20
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010564:	2300      	movs	r3, #0
 8010566:	60fb      	str	r3, [r7, #12]
 8010568:	e016      	b.n	8010598 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801056a:	4a10      	ldr	r2, [pc, #64]	@ (80105ac <vQueueUnregisterQueue+0x50>)
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	00db      	lsls	r3, r3, #3
 8010570:	4413      	add	r3, r2
 8010572:	685b      	ldr	r3, [r3, #4]
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	429a      	cmp	r2, r3
 8010578:	d10b      	bne.n	8010592 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801057a:	4a0c      	ldr	r2, [pc, #48]	@ (80105ac <vQueueUnregisterQueue+0x50>)
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	2100      	movs	r1, #0
 8010580:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010584:	4a09      	ldr	r2, [pc, #36]	@ (80105ac <vQueueUnregisterQueue+0x50>)
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	00db      	lsls	r3, r3, #3
 801058a:	4413      	add	r3, r2
 801058c:	2200      	movs	r2, #0
 801058e:	605a      	str	r2, [r3, #4]
				break;
 8010590:	e006      	b.n	80105a0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	3301      	adds	r3, #1
 8010596:	60fb      	str	r3, [r7, #12]
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	2b07      	cmp	r3, #7
 801059c:	d9e5      	bls.n	801056a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801059e:	bf00      	nop
 80105a0:	bf00      	nop
 80105a2:	3714      	adds	r7, #20
 80105a4:	46bd      	mov	sp, r7
 80105a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105aa:	4770      	bx	lr
 80105ac:	20005b3c 	.word	0x20005b3c

080105b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b086      	sub	sp, #24
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	60f8      	str	r0, [r7, #12]
 80105b8:	60b9      	str	r1, [r7, #8]
 80105ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80105c0:	f001 fda2 	bl	8012108 <vPortEnterCritical>
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80105ca:	b25b      	sxtb	r3, r3
 80105cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80105d0:	d103      	bne.n	80105da <vQueueWaitForMessageRestricted+0x2a>
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	2200      	movs	r2, #0
 80105d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80105da:	697b      	ldr	r3, [r7, #20]
 80105dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80105e0:	b25b      	sxtb	r3, r3
 80105e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80105e6:	d103      	bne.n	80105f0 <vQueueWaitForMessageRestricted+0x40>
 80105e8:	697b      	ldr	r3, [r7, #20]
 80105ea:	2200      	movs	r2, #0
 80105ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80105f0:	f001 fdbc 	bl	801216c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d106      	bne.n	801060a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80105fc:	697b      	ldr	r3, [r7, #20]
 80105fe:	3324      	adds	r3, #36	@ 0x24
 8010600:	687a      	ldr	r2, [r7, #4]
 8010602:	68b9      	ldr	r1, [r7, #8]
 8010604:	4618      	mov	r0, r3
 8010606:	f000 fd11 	bl	801102c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801060a:	6978      	ldr	r0, [r7, #20]
 801060c:	f7ff fefc 	bl	8010408 <prvUnlockQueue>
	}
 8010610:	bf00      	nop
 8010612:	3718      	adds	r7, #24
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010618:	b580      	push	{r7, lr}
 801061a:	b08e      	sub	sp, #56	@ 0x38
 801061c:	af04      	add	r7, sp, #16
 801061e:	60f8      	str	r0, [r7, #12]
 8010620:	60b9      	str	r1, [r7, #8]
 8010622:	607a      	str	r2, [r7, #4]
 8010624:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010628:	2b00      	cmp	r3, #0
 801062a:	d10b      	bne.n	8010644 <xTaskCreateStatic+0x2c>
	__asm volatile
 801062c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010630:	f383 8811 	msr	BASEPRI, r3
 8010634:	f3bf 8f6f 	isb	sy
 8010638:	f3bf 8f4f 	dsb	sy
 801063c:	623b      	str	r3, [r7, #32]
}
 801063e:	bf00      	nop
 8010640:	bf00      	nop
 8010642:	e7fd      	b.n	8010640 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010646:	2b00      	cmp	r3, #0
 8010648:	d10b      	bne.n	8010662 <xTaskCreateStatic+0x4a>
	__asm volatile
 801064a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801064e:	f383 8811 	msr	BASEPRI, r3
 8010652:	f3bf 8f6f 	isb	sy
 8010656:	f3bf 8f4f 	dsb	sy
 801065a:	61fb      	str	r3, [r7, #28]
}
 801065c:	bf00      	nop
 801065e:	bf00      	nop
 8010660:	e7fd      	b.n	801065e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010662:	23b0      	movs	r3, #176	@ 0xb0
 8010664:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	2bb0      	cmp	r3, #176	@ 0xb0
 801066a:	d00b      	beq.n	8010684 <xTaskCreateStatic+0x6c>
	__asm volatile
 801066c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010670:	f383 8811 	msr	BASEPRI, r3
 8010674:	f3bf 8f6f 	isb	sy
 8010678:	f3bf 8f4f 	dsb	sy
 801067c:	61bb      	str	r3, [r7, #24]
}
 801067e:	bf00      	nop
 8010680:	bf00      	nop
 8010682:	e7fd      	b.n	8010680 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010684:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010688:	2b00      	cmp	r3, #0
 801068a:	d01e      	beq.n	80106ca <xTaskCreateStatic+0xb2>
 801068c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801068e:	2b00      	cmp	r3, #0
 8010690:	d01b      	beq.n	80106ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010694:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010698:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801069a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801069c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801069e:	2202      	movs	r2, #2
 80106a0:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80106a4:	2300      	movs	r3, #0
 80106a6:	9303      	str	r3, [sp, #12]
 80106a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106aa:	9302      	str	r3, [sp, #8]
 80106ac:	f107 0314 	add.w	r3, r7, #20
 80106b0:	9301      	str	r3, [sp, #4]
 80106b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106b4:	9300      	str	r3, [sp, #0]
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	687a      	ldr	r2, [r7, #4]
 80106ba:	68b9      	ldr	r1, [r7, #8]
 80106bc:	68f8      	ldr	r0, [r7, #12]
 80106be:	f000 f851 	bl	8010764 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80106c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80106c4:	f000 f8f8 	bl	80108b8 <prvAddNewTaskToReadyList>
 80106c8:	e001      	b.n	80106ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80106ca:	2300      	movs	r3, #0
 80106cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80106ce:	697b      	ldr	r3, [r7, #20]
	}
 80106d0:	4618      	mov	r0, r3
 80106d2:	3728      	adds	r7, #40	@ 0x28
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}

080106d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b08c      	sub	sp, #48	@ 0x30
 80106dc:	af04      	add	r7, sp, #16
 80106de:	60f8      	str	r0, [r7, #12]
 80106e0:	60b9      	str	r1, [r7, #8]
 80106e2:	603b      	str	r3, [r7, #0]
 80106e4:	4613      	mov	r3, r2
 80106e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80106e8:	88fb      	ldrh	r3, [r7, #6]
 80106ea:	009b      	lsls	r3, r3, #2
 80106ec:	4618      	mov	r0, r3
 80106ee:	f001 fe2d 	bl	801234c <pvPortMalloc>
 80106f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d00e      	beq.n	8010718 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80106fa:	20b0      	movs	r0, #176	@ 0xb0
 80106fc:	f001 fe26 	bl	801234c <pvPortMalloc>
 8010700:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010702:	69fb      	ldr	r3, [r7, #28]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d003      	beq.n	8010710 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010708:	69fb      	ldr	r3, [r7, #28]
 801070a:	697a      	ldr	r2, [r7, #20]
 801070c:	631a      	str	r2, [r3, #48]	@ 0x30
 801070e:	e005      	b.n	801071c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010710:	6978      	ldr	r0, [r7, #20]
 8010712:	f001 fee9 	bl	80124e8 <vPortFree>
 8010716:	e001      	b.n	801071c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010718:	2300      	movs	r3, #0
 801071a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801071c:	69fb      	ldr	r3, [r7, #28]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d017      	beq.n	8010752 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010722:	69fb      	ldr	r3, [r7, #28]
 8010724:	2200      	movs	r2, #0
 8010726:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801072a:	88fa      	ldrh	r2, [r7, #6]
 801072c:	2300      	movs	r3, #0
 801072e:	9303      	str	r3, [sp, #12]
 8010730:	69fb      	ldr	r3, [r7, #28]
 8010732:	9302      	str	r3, [sp, #8]
 8010734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010736:	9301      	str	r3, [sp, #4]
 8010738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801073a:	9300      	str	r3, [sp, #0]
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	68b9      	ldr	r1, [r7, #8]
 8010740:	68f8      	ldr	r0, [r7, #12]
 8010742:	f000 f80f 	bl	8010764 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010746:	69f8      	ldr	r0, [r7, #28]
 8010748:	f000 f8b6 	bl	80108b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801074c:	2301      	movs	r3, #1
 801074e:	61bb      	str	r3, [r7, #24]
 8010750:	e002      	b.n	8010758 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010752:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010756:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010758:	69bb      	ldr	r3, [r7, #24]
	}
 801075a:	4618      	mov	r0, r3
 801075c:	3720      	adds	r7, #32
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}
	...

08010764 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b088      	sub	sp, #32
 8010768:	af00      	add	r7, sp, #0
 801076a:	60f8      	str	r0, [r7, #12]
 801076c:	60b9      	str	r1, [r7, #8]
 801076e:	607a      	str	r2, [r7, #4]
 8010770:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010774:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	009b      	lsls	r3, r3, #2
 801077a:	461a      	mov	r2, r3
 801077c:	21a5      	movs	r1, #165	@ 0xa5
 801077e:	f00f fa42 	bl	801fc06 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010784:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801078c:	3b01      	subs	r3, #1
 801078e:	009b      	lsls	r3, r3, #2
 8010790:	4413      	add	r3, r2
 8010792:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010794:	69bb      	ldr	r3, [r7, #24]
 8010796:	f023 0307 	bic.w	r3, r3, #7
 801079a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801079c:	69bb      	ldr	r3, [r7, #24]
 801079e:	f003 0307 	and.w	r3, r3, #7
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d00b      	beq.n	80107be <prvInitialiseNewTask+0x5a>
	__asm volatile
 80107a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107aa:	f383 8811 	msr	BASEPRI, r3
 80107ae:	f3bf 8f6f 	isb	sy
 80107b2:	f3bf 8f4f 	dsb	sy
 80107b6:	617b      	str	r3, [r7, #20]
}
 80107b8:	bf00      	nop
 80107ba:	bf00      	nop
 80107bc:	e7fd      	b.n	80107ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d01f      	beq.n	8010804 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80107c4:	2300      	movs	r3, #0
 80107c6:	61fb      	str	r3, [r7, #28]
 80107c8:	e012      	b.n	80107f0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80107ca:	68ba      	ldr	r2, [r7, #8]
 80107cc:	69fb      	ldr	r3, [r7, #28]
 80107ce:	4413      	add	r3, r2
 80107d0:	7819      	ldrb	r1, [r3, #0]
 80107d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107d4:	69fb      	ldr	r3, [r7, #28]
 80107d6:	4413      	add	r3, r2
 80107d8:	3334      	adds	r3, #52	@ 0x34
 80107da:	460a      	mov	r2, r1
 80107dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80107de:	68ba      	ldr	r2, [r7, #8]
 80107e0:	69fb      	ldr	r3, [r7, #28]
 80107e2:	4413      	add	r3, r2
 80107e4:	781b      	ldrb	r3, [r3, #0]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d006      	beq.n	80107f8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80107ea:	69fb      	ldr	r3, [r7, #28]
 80107ec:	3301      	adds	r3, #1
 80107ee:	61fb      	str	r3, [r7, #28]
 80107f0:	69fb      	ldr	r3, [r7, #28]
 80107f2:	2b13      	cmp	r3, #19
 80107f4:	d9e9      	bls.n	80107ca <prvInitialiseNewTask+0x66>
 80107f6:	e000      	b.n	80107fa <prvInitialiseNewTask+0x96>
			{
				break;
 80107f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80107fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107fc:	2200      	movs	r2, #0
 80107fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8010802:	e003      	b.n	801080c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010806:	2200      	movs	r2, #0
 8010808:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801080c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801080e:	2b37      	cmp	r3, #55	@ 0x37
 8010810:	d901      	bls.n	8010816 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010812:	2337      	movs	r3, #55	@ 0x37
 8010814:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010818:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801081a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801081c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801081e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010820:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8010822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010824:	2200      	movs	r2, #0
 8010826:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801082a:	3304      	adds	r3, #4
 801082c:	4618      	mov	r0, r3
 801082e:	f7fe fd7b 	bl	800f328 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010834:	3318      	adds	r3, #24
 8010836:	4618      	mov	r0, r3
 8010838:	f7fe fd76 	bl	800f328 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801083c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801083e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010840:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010844:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801084a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801084c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801084e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010850:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8010852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010854:	2200      	movs	r2, #0
 8010856:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801085a:	2200      	movs	r2, #0
 801085c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010862:	2200      	movs	r2, #0
 8010864:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801086a:	335c      	adds	r3, #92	@ 0x5c
 801086c:	224c      	movs	r2, #76	@ 0x4c
 801086e:	2100      	movs	r1, #0
 8010870:	4618      	mov	r0, r3
 8010872:	f00f f9c8 	bl	801fc06 <memset>
 8010876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010878:	4a0c      	ldr	r2, [pc, #48]	@ (80108ac <prvInitialiseNewTask+0x148>)
 801087a:	661a      	str	r2, [r3, #96]	@ 0x60
 801087c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801087e:	4a0c      	ldr	r2, [pc, #48]	@ (80108b0 <prvInitialiseNewTask+0x14c>)
 8010880:	665a      	str	r2, [r3, #100]	@ 0x64
 8010882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010884:	4a0b      	ldr	r2, [pc, #44]	@ (80108b4 <prvInitialiseNewTask+0x150>)
 8010886:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010888:	683a      	ldr	r2, [r7, #0]
 801088a:	68f9      	ldr	r1, [r7, #12]
 801088c:	69b8      	ldr	r0, [r7, #24]
 801088e:	f001 fb0b 	bl	8011ea8 <pxPortInitialiseStack>
 8010892:	4602      	mov	r2, r0
 8010894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010896:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801089a:	2b00      	cmp	r3, #0
 801089c:	d002      	beq.n	80108a4 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801089e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80108a4:	bf00      	nop
 80108a6:	3720      	adds	r7, #32
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}
 80108ac:	20017bb0 	.word	0x20017bb0
 80108b0:	20017c18 	.word	0x20017c18
 80108b4:	20017c80 	.word	0x20017c80

080108b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b082      	sub	sp, #8
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80108c0:	f001 fc22 	bl	8012108 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80108c4:	4b2d      	ldr	r3, [pc, #180]	@ (801097c <prvAddNewTaskToReadyList+0xc4>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	3301      	adds	r3, #1
 80108ca:	4a2c      	ldr	r2, [pc, #176]	@ (801097c <prvAddNewTaskToReadyList+0xc4>)
 80108cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80108ce:	4b2c      	ldr	r3, [pc, #176]	@ (8010980 <prvAddNewTaskToReadyList+0xc8>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d109      	bne.n	80108ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80108d6:	4a2a      	ldr	r2, [pc, #168]	@ (8010980 <prvAddNewTaskToReadyList+0xc8>)
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80108dc:	4b27      	ldr	r3, [pc, #156]	@ (801097c <prvAddNewTaskToReadyList+0xc4>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	2b01      	cmp	r3, #1
 80108e2:	d110      	bne.n	8010906 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80108e4:	f000 fcd0 	bl	8011288 <prvInitialiseTaskLists>
 80108e8:	e00d      	b.n	8010906 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80108ea:	4b26      	ldr	r3, [pc, #152]	@ (8010984 <prvAddNewTaskToReadyList+0xcc>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d109      	bne.n	8010906 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80108f2:	4b23      	ldr	r3, [pc, #140]	@ (8010980 <prvAddNewTaskToReadyList+0xc8>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d802      	bhi.n	8010906 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010900:	4a1f      	ldr	r2, [pc, #124]	@ (8010980 <prvAddNewTaskToReadyList+0xc8>)
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010906:	4b20      	ldr	r3, [pc, #128]	@ (8010988 <prvAddNewTaskToReadyList+0xd0>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	3301      	adds	r3, #1
 801090c:	4a1e      	ldr	r2, [pc, #120]	@ (8010988 <prvAddNewTaskToReadyList+0xd0>)
 801090e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010910:	4b1d      	ldr	r3, [pc, #116]	@ (8010988 <prvAddNewTaskToReadyList+0xd0>)
 8010912:	681a      	ldr	r2, [r3, #0]
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801091c:	4b1b      	ldr	r3, [pc, #108]	@ (801098c <prvAddNewTaskToReadyList+0xd4>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	429a      	cmp	r2, r3
 8010922:	d903      	bls.n	801092c <prvAddNewTaskToReadyList+0x74>
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010928:	4a18      	ldr	r2, [pc, #96]	@ (801098c <prvAddNewTaskToReadyList+0xd4>)
 801092a:	6013      	str	r3, [r2, #0]
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010930:	4613      	mov	r3, r2
 8010932:	009b      	lsls	r3, r3, #2
 8010934:	4413      	add	r3, r2
 8010936:	009b      	lsls	r3, r3, #2
 8010938:	4a15      	ldr	r2, [pc, #84]	@ (8010990 <prvAddNewTaskToReadyList+0xd8>)
 801093a:	441a      	add	r2, r3
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	3304      	adds	r3, #4
 8010940:	4619      	mov	r1, r3
 8010942:	4610      	mov	r0, r2
 8010944:	f7fe fcfd 	bl	800f342 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010948:	f001 fc10 	bl	801216c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801094c:	4b0d      	ldr	r3, [pc, #52]	@ (8010984 <prvAddNewTaskToReadyList+0xcc>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d00e      	beq.n	8010972 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010954:	4b0a      	ldr	r3, [pc, #40]	@ (8010980 <prvAddNewTaskToReadyList+0xc8>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801095e:	429a      	cmp	r2, r3
 8010960:	d207      	bcs.n	8010972 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010962:	4b0c      	ldr	r3, [pc, #48]	@ (8010994 <prvAddNewTaskToReadyList+0xdc>)
 8010964:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010968:	601a      	str	r2, [r3, #0]
 801096a:	f3bf 8f4f 	dsb	sy
 801096e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010972:	bf00      	nop
 8010974:	3708      	adds	r7, #8
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}
 801097a:	bf00      	nop
 801097c:	20006050 	.word	0x20006050
 8010980:	20005b7c 	.word	0x20005b7c
 8010984:	2000605c 	.word	0x2000605c
 8010988:	2000606c 	.word	0x2000606c
 801098c:	20006058 	.word	0x20006058
 8010990:	20005b80 	.word	0x20005b80
 8010994:	e000ed04 	.word	0xe000ed04

08010998 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8010998:	b580      	push	{r7, lr}
 801099a:	b084      	sub	sp, #16
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80109a0:	f001 fbb2 	bl	8012108 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d102      	bne.n	80109b0 <vTaskDelete+0x18>
 80109aa:	4b2d      	ldr	r3, [pc, #180]	@ (8010a60 <vTaskDelete+0xc8>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	e000      	b.n	80109b2 <vTaskDelete+0x1a>
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	3304      	adds	r3, #4
 80109b8:	4618      	mov	r0, r3
 80109ba:	f7fe fd1f 	bl	800f3fc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d004      	beq.n	80109d0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	3318      	adds	r3, #24
 80109ca:	4618      	mov	r0, r3
 80109cc:	f7fe fd16 	bl	800f3fc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80109d0:	4b24      	ldr	r3, [pc, #144]	@ (8010a64 <vTaskDelete+0xcc>)
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	3301      	adds	r3, #1
 80109d6:	4a23      	ldr	r2, [pc, #140]	@ (8010a64 <vTaskDelete+0xcc>)
 80109d8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80109da:	4b21      	ldr	r3, [pc, #132]	@ (8010a60 <vTaskDelete+0xc8>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	68fa      	ldr	r2, [r7, #12]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d10b      	bne.n	80109fc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	3304      	adds	r3, #4
 80109e8:	4619      	mov	r1, r3
 80109ea:	481f      	ldr	r0, [pc, #124]	@ (8010a68 <vTaskDelete+0xd0>)
 80109ec:	f7fe fca9 	bl	800f342 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80109f0:	4b1e      	ldr	r3, [pc, #120]	@ (8010a6c <vTaskDelete+0xd4>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	3301      	adds	r3, #1
 80109f6:	4a1d      	ldr	r2, [pc, #116]	@ (8010a6c <vTaskDelete+0xd4>)
 80109f8:	6013      	str	r3, [r2, #0]
 80109fa:	e009      	b.n	8010a10 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80109fc:	4b1c      	ldr	r3, [pc, #112]	@ (8010a70 <vTaskDelete+0xd8>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	3b01      	subs	r3, #1
 8010a02:	4a1b      	ldr	r2, [pc, #108]	@ (8010a70 <vTaskDelete+0xd8>)
 8010a04:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8010a06:	68f8      	ldr	r0, [r7, #12]
 8010a08:	f000 fcac 	bl	8011364 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8010a0c:	f000 fce0 	bl	80113d0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8010a10:	f001 fbac 	bl	801216c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8010a14:	4b17      	ldr	r3, [pc, #92]	@ (8010a74 <vTaskDelete+0xdc>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d01c      	beq.n	8010a56 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8010a1c:	4b10      	ldr	r3, [pc, #64]	@ (8010a60 <vTaskDelete+0xc8>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	68fa      	ldr	r2, [r7, #12]
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d117      	bne.n	8010a56 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8010a26:	4b14      	ldr	r3, [pc, #80]	@ (8010a78 <vTaskDelete+0xe0>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d00b      	beq.n	8010a46 <vTaskDelete+0xae>
	__asm volatile
 8010a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a32:	f383 8811 	msr	BASEPRI, r3
 8010a36:	f3bf 8f6f 	isb	sy
 8010a3a:	f3bf 8f4f 	dsb	sy
 8010a3e:	60bb      	str	r3, [r7, #8]
}
 8010a40:	bf00      	nop
 8010a42:	bf00      	nop
 8010a44:	e7fd      	b.n	8010a42 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8010a46:	4b0d      	ldr	r3, [pc, #52]	@ (8010a7c <vTaskDelete+0xe4>)
 8010a48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a4c:	601a      	str	r2, [r3, #0]
 8010a4e:	f3bf 8f4f 	dsb	sy
 8010a52:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010a56:	bf00      	nop
 8010a58:	3710      	adds	r7, #16
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}
 8010a5e:	bf00      	nop
 8010a60:	20005b7c 	.word	0x20005b7c
 8010a64:	2000606c 	.word	0x2000606c
 8010a68:	20006024 	.word	0x20006024
 8010a6c:	20006038 	.word	0x20006038
 8010a70:	20006050 	.word	0x20006050
 8010a74:	2000605c 	.word	0x2000605c
 8010a78:	20006078 	.word	0x20006078
 8010a7c:	e000ed04 	.word	0xe000ed04

08010a80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b084      	sub	sp, #16
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d018      	beq.n	8010ac4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010a92:	4b14      	ldr	r3, [pc, #80]	@ (8010ae4 <vTaskDelay+0x64>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d00b      	beq.n	8010ab2 <vTaskDelay+0x32>
	__asm volatile
 8010a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a9e:	f383 8811 	msr	BASEPRI, r3
 8010aa2:	f3bf 8f6f 	isb	sy
 8010aa6:	f3bf 8f4f 	dsb	sy
 8010aaa:	60bb      	str	r3, [r7, #8]
}
 8010aac:	bf00      	nop
 8010aae:	bf00      	nop
 8010ab0:	e7fd      	b.n	8010aae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010ab2:	f000 f88d 	bl	8010bd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010ab6:	2100      	movs	r1, #0
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f000 fe47 	bl	801174c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010abe:	f000 f895 	bl	8010bec <xTaskResumeAll>
 8010ac2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d107      	bne.n	8010ada <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8010aca:	4b07      	ldr	r3, [pc, #28]	@ (8010ae8 <vTaskDelay+0x68>)
 8010acc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ad0:	601a      	str	r2, [r3, #0]
 8010ad2:	f3bf 8f4f 	dsb	sy
 8010ad6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010ada:	bf00      	nop
 8010adc:	3710      	adds	r7, #16
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}
 8010ae2:	bf00      	nop
 8010ae4:	20006078 	.word	0x20006078
 8010ae8:	e000ed04 	.word	0xe000ed04

08010aec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b08a      	sub	sp, #40	@ 0x28
 8010af0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010af2:	2300      	movs	r3, #0
 8010af4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010af6:	2300      	movs	r3, #0
 8010af8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010afa:	463a      	mov	r2, r7
 8010afc:	1d39      	adds	r1, r7, #4
 8010afe:	f107 0308 	add.w	r3, r7, #8
 8010b02:	4618      	mov	r0, r3
 8010b04:	f7fe fbbc 	bl	800f280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010b08:	6839      	ldr	r1, [r7, #0]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	68ba      	ldr	r2, [r7, #8]
 8010b0e:	9202      	str	r2, [sp, #8]
 8010b10:	9301      	str	r3, [sp, #4]
 8010b12:	2300      	movs	r3, #0
 8010b14:	9300      	str	r3, [sp, #0]
 8010b16:	2300      	movs	r3, #0
 8010b18:	460a      	mov	r2, r1
 8010b1a:	4925      	ldr	r1, [pc, #148]	@ (8010bb0 <vTaskStartScheduler+0xc4>)
 8010b1c:	4825      	ldr	r0, [pc, #148]	@ (8010bb4 <vTaskStartScheduler+0xc8>)
 8010b1e:	f7ff fd7b 	bl	8010618 <xTaskCreateStatic>
 8010b22:	4603      	mov	r3, r0
 8010b24:	4a24      	ldr	r2, [pc, #144]	@ (8010bb8 <vTaskStartScheduler+0xcc>)
 8010b26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010b28:	4b23      	ldr	r3, [pc, #140]	@ (8010bb8 <vTaskStartScheduler+0xcc>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d002      	beq.n	8010b36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010b30:	2301      	movs	r3, #1
 8010b32:	617b      	str	r3, [r7, #20]
 8010b34:	e001      	b.n	8010b3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010b36:	2300      	movs	r3, #0
 8010b38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	2b01      	cmp	r3, #1
 8010b3e:	d102      	bne.n	8010b46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010b40:	f000 fe58 	bl	80117f4 <xTimerCreateTimerTask>
 8010b44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	2b01      	cmp	r3, #1
 8010b4a:	d11d      	bne.n	8010b88 <vTaskStartScheduler+0x9c>
	__asm volatile
 8010b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b50:	f383 8811 	msr	BASEPRI, r3
 8010b54:	f3bf 8f6f 	isb	sy
 8010b58:	f3bf 8f4f 	dsb	sy
 8010b5c:	613b      	str	r3, [r7, #16]
}
 8010b5e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010b60:	4b16      	ldr	r3, [pc, #88]	@ (8010bbc <vTaskStartScheduler+0xd0>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	335c      	adds	r3, #92	@ 0x5c
 8010b66:	4a16      	ldr	r2, [pc, #88]	@ (8010bc0 <vTaskStartScheduler+0xd4>)
 8010b68:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010b6a:	4b16      	ldr	r3, [pc, #88]	@ (8010bc4 <vTaskStartScheduler+0xd8>)
 8010b6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010b70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010b72:	4b15      	ldr	r3, [pc, #84]	@ (8010bc8 <vTaskStartScheduler+0xdc>)
 8010b74:	2201      	movs	r2, #1
 8010b76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010b78:	4b14      	ldr	r3, [pc, #80]	@ (8010bcc <vTaskStartScheduler+0xe0>)
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8010b7e:	f7f4 f937 	bl	8004df0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010b82:	f001 fa1d 	bl	8011fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010b86:	e00f      	b.n	8010ba8 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010b8e:	d10b      	bne.n	8010ba8 <vTaskStartScheduler+0xbc>
	__asm volatile
 8010b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b94:	f383 8811 	msr	BASEPRI, r3
 8010b98:	f3bf 8f6f 	isb	sy
 8010b9c:	f3bf 8f4f 	dsb	sy
 8010ba0:	60fb      	str	r3, [r7, #12]
}
 8010ba2:	bf00      	nop
 8010ba4:	bf00      	nop
 8010ba6:	e7fd      	b.n	8010ba4 <vTaskStartScheduler+0xb8>
}
 8010ba8:	bf00      	nop
 8010baa:	3718      	adds	r7, #24
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}
 8010bb0:	080223d8 	.word	0x080223d8
 8010bb4:	08011259 	.word	0x08011259
 8010bb8:	20006074 	.word	0x20006074
 8010bbc:	20005b7c 	.word	0x20005b7c
 8010bc0:	200001b4 	.word	0x200001b4
 8010bc4:	20006070 	.word	0x20006070
 8010bc8:	2000605c 	.word	0x2000605c
 8010bcc:	20006054 	.word	0x20006054

08010bd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010bd4:	4b04      	ldr	r3, [pc, #16]	@ (8010be8 <vTaskSuspendAll+0x18>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	3301      	adds	r3, #1
 8010bda:	4a03      	ldr	r2, [pc, #12]	@ (8010be8 <vTaskSuspendAll+0x18>)
 8010bdc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010bde:	bf00      	nop
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr
 8010be8:	20006078 	.word	0x20006078

08010bec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b084      	sub	sp, #16
 8010bf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010bfa:	4b42      	ldr	r3, [pc, #264]	@ (8010d04 <xTaskResumeAll+0x118>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d10b      	bne.n	8010c1a <xTaskResumeAll+0x2e>
	__asm volatile
 8010c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c06:	f383 8811 	msr	BASEPRI, r3
 8010c0a:	f3bf 8f6f 	isb	sy
 8010c0e:	f3bf 8f4f 	dsb	sy
 8010c12:	603b      	str	r3, [r7, #0]
}
 8010c14:	bf00      	nop
 8010c16:	bf00      	nop
 8010c18:	e7fd      	b.n	8010c16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010c1a:	f001 fa75 	bl	8012108 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010c1e:	4b39      	ldr	r3, [pc, #228]	@ (8010d04 <xTaskResumeAll+0x118>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	3b01      	subs	r3, #1
 8010c24:	4a37      	ldr	r2, [pc, #220]	@ (8010d04 <xTaskResumeAll+0x118>)
 8010c26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c28:	4b36      	ldr	r3, [pc, #216]	@ (8010d04 <xTaskResumeAll+0x118>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d162      	bne.n	8010cf6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010c30:	4b35      	ldr	r3, [pc, #212]	@ (8010d08 <xTaskResumeAll+0x11c>)
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d05e      	beq.n	8010cf6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010c38:	e02f      	b.n	8010c9a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c3a:	4b34      	ldr	r3, [pc, #208]	@ (8010d0c <xTaskResumeAll+0x120>)
 8010c3c:	68db      	ldr	r3, [r3, #12]
 8010c3e:	68db      	ldr	r3, [r3, #12]
 8010c40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	3318      	adds	r3, #24
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7fe fbd8 	bl	800f3fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	3304      	adds	r3, #4
 8010c50:	4618      	mov	r0, r3
 8010c52:	f7fe fbd3 	bl	800f3fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8010d10 <xTaskResumeAll+0x124>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d903      	bls.n	8010c6a <xTaskResumeAll+0x7e>
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c66:	4a2a      	ldr	r2, [pc, #168]	@ (8010d10 <xTaskResumeAll+0x124>)
 8010c68:	6013      	str	r3, [r2, #0]
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c6e:	4613      	mov	r3, r2
 8010c70:	009b      	lsls	r3, r3, #2
 8010c72:	4413      	add	r3, r2
 8010c74:	009b      	lsls	r3, r3, #2
 8010c76:	4a27      	ldr	r2, [pc, #156]	@ (8010d14 <xTaskResumeAll+0x128>)
 8010c78:	441a      	add	r2, r3
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	3304      	adds	r3, #4
 8010c7e:	4619      	mov	r1, r3
 8010c80:	4610      	mov	r0, r2
 8010c82:	f7fe fb5e 	bl	800f342 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c8a:	4b23      	ldr	r3, [pc, #140]	@ (8010d18 <xTaskResumeAll+0x12c>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c90:	429a      	cmp	r2, r3
 8010c92:	d302      	bcc.n	8010c9a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8010c94:	4b21      	ldr	r3, [pc, #132]	@ (8010d1c <xTaskResumeAll+0x130>)
 8010c96:	2201      	movs	r2, #1
 8010c98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8010d0c <xTaskResumeAll+0x120>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d1cb      	bne.n	8010c3a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d001      	beq.n	8010cac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010ca8:	f000 fb92 	bl	80113d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010cac:	4b1c      	ldr	r3, [pc, #112]	@ (8010d20 <xTaskResumeAll+0x134>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d010      	beq.n	8010cda <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010cb8:	f000 f858 	bl	8010d6c <xTaskIncrementTick>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d002      	beq.n	8010cc8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8010cc2:	4b16      	ldr	r3, [pc, #88]	@ (8010d1c <xTaskResumeAll+0x130>)
 8010cc4:	2201      	movs	r2, #1
 8010cc6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	3b01      	subs	r3, #1
 8010ccc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d1f1      	bne.n	8010cb8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8010cd4:	4b12      	ldr	r3, [pc, #72]	@ (8010d20 <xTaskResumeAll+0x134>)
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010cda:	4b10      	ldr	r3, [pc, #64]	@ (8010d1c <xTaskResumeAll+0x130>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d009      	beq.n	8010cf6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8010d24 <xTaskResumeAll+0x138>)
 8010ce8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010cec:	601a      	str	r2, [r3, #0]
 8010cee:	f3bf 8f4f 	dsb	sy
 8010cf2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010cf6:	f001 fa39 	bl	801216c <vPortExitCritical>

	return xAlreadyYielded;
 8010cfa:	68bb      	ldr	r3, [r7, #8]
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3710      	adds	r7, #16
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}
 8010d04:	20006078 	.word	0x20006078
 8010d08:	20006050 	.word	0x20006050
 8010d0c:	20006010 	.word	0x20006010
 8010d10:	20006058 	.word	0x20006058
 8010d14:	20005b80 	.word	0x20005b80
 8010d18:	20005b7c 	.word	0x20005b7c
 8010d1c:	20006064 	.word	0x20006064
 8010d20:	20006060 	.word	0x20006060
 8010d24:	e000ed04 	.word	0xe000ed04

08010d28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b083      	sub	sp, #12
 8010d2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010d2e:	4b05      	ldr	r3, [pc, #20]	@ (8010d44 <xTaskGetTickCount+0x1c>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010d34:	687b      	ldr	r3, [r7, #4]
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	370c      	adds	r7, #12
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d40:	4770      	bx	lr
 8010d42:	bf00      	nop
 8010d44:	20006054 	.word	0x20006054

08010d48 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b082      	sub	sp, #8
 8010d4c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010d4e:	f001 fabb 	bl	80122c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010d52:	2300      	movs	r3, #0
 8010d54:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010d56:	4b04      	ldr	r3, [pc, #16]	@ (8010d68 <xTaskGetTickCountFromISR+0x20>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d5c:	683b      	ldr	r3, [r7, #0]
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3708      	adds	r7, #8
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop
 8010d68:	20006054 	.word	0x20006054

08010d6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b086      	sub	sp, #24
 8010d70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010d72:	2300      	movs	r3, #0
 8010d74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d76:	4b4f      	ldr	r3, [pc, #316]	@ (8010eb4 <xTaskIncrementTick+0x148>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	f040 8090 	bne.w	8010ea0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010d80:	4b4d      	ldr	r3, [pc, #308]	@ (8010eb8 <xTaskIncrementTick+0x14c>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	3301      	adds	r3, #1
 8010d86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010d88:	4a4b      	ldr	r2, [pc, #300]	@ (8010eb8 <xTaskIncrementTick+0x14c>)
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010d8e:	693b      	ldr	r3, [r7, #16]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d121      	bne.n	8010dd8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010d94:	4b49      	ldr	r3, [pc, #292]	@ (8010ebc <xTaskIncrementTick+0x150>)
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d00b      	beq.n	8010db6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8010d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010da2:	f383 8811 	msr	BASEPRI, r3
 8010da6:	f3bf 8f6f 	isb	sy
 8010daa:	f3bf 8f4f 	dsb	sy
 8010dae:	603b      	str	r3, [r7, #0]
}
 8010db0:	bf00      	nop
 8010db2:	bf00      	nop
 8010db4:	e7fd      	b.n	8010db2 <xTaskIncrementTick+0x46>
 8010db6:	4b41      	ldr	r3, [pc, #260]	@ (8010ebc <xTaskIncrementTick+0x150>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	60fb      	str	r3, [r7, #12]
 8010dbc:	4b40      	ldr	r3, [pc, #256]	@ (8010ec0 <xTaskIncrementTick+0x154>)
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	4a3e      	ldr	r2, [pc, #248]	@ (8010ebc <xTaskIncrementTick+0x150>)
 8010dc2:	6013      	str	r3, [r2, #0]
 8010dc4:	4a3e      	ldr	r2, [pc, #248]	@ (8010ec0 <xTaskIncrementTick+0x154>)
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	6013      	str	r3, [r2, #0]
 8010dca:	4b3e      	ldr	r3, [pc, #248]	@ (8010ec4 <xTaskIncrementTick+0x158>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	3301      	adds	r3, #1
 8010dd0:	4a3c      	ldr	r2, [pc, #240]	@ (8010ec4 <xTaskIncrementTick+0x158>)
 8010dd2:	6013      	str	r3, [r2, #0]
 8010dd4:	f000 fafc 	bl	80113d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010dd8:	4b3b      	ldr	r3, [pc, #236]	@ (8010ec8 <xTaskIncrementTick+0x15c>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	693a      	ldr	r2, [r7, #16]
 8010dde:	429a      	cmp	r2, r3
 8010de0:	d349      	bcc.n	8010e76 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010de2:	4b36      	ldr	r3, [pc, #216]	@ (8010ebc <xTaskIncrementTick+0x150>)
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d104      	bne.n	8010df6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010dec:	4b36      	ldr	r3, [pc, #216]	@ (8010ec8 <xTaskIncrementTick+0x15c>)
 8010dee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010df2:	601a      	str	r2, [r3, #0]
					break;
 8010df4:	e03f      	b.n	8010e76 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010df6:	4b31      	ldr	r3, [pc, #196]	@ (8010ebc <xTaskIncrementTick+0x150>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	68db      	ldr	r3, [r3, #12]
 8010dfc:	68db      	ldr	r3, [r3, #12]
 8010dfe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	685b      	ldr	r3, [r3, #4]
 8010e04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010e06:	693a      	ldr	r2, [r7, #16]
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	d203      	bcs.n	8010e16 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010e0e:	4a2e      	ldr	r2, [pc, #184]	@ (8010ec8 <xTaskIncrementTick+0x15c>)
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010e14:	e02f      	b.n	8010e76 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e16:	68bb      	ldr	r3, [r7, #8]
 8010e18:	3304      	adds	r3, #4
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7fe faee 	bl	800f3fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d004      	beq.n	8010e32 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	3318      	adds	r3, #24
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7fe fae5 	bl	800f3fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e36:	4b25      	ldr	r3, [pc, #148]	@ (8010ecc <xTaskIncrementTick+0x160>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d903      	bls.n	8010e46 <xTaskIncrementTick+0xda>
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e42:	4a22      	ldr	r2, [pc, #136]	@ (8010ecc <xTaskIncrementTick+0x160>)
 8010e44:	6013      	str	r3, [r2, #0]
 8010e46:	68bb      	ldr	r3, [r7, #8]
 8010e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e4a:	4613      	mov	r3, r2
 8010e4c:	009b      	lsls	r3, r3, #2
 8010e4e:	4413      	add	r3, r2
 8010e50:	009b      	lsls	r3, r3, #2
 8010e52:	4a1f      	ldr	r2, [pc, #124]	@ (8010ed0 <xTaskIncrementTick+0x164>)
 8010e54:	441a      	add	r2, r3
 8010e56:	68bb      	ldr	r3, [r7, #8]
 8010e58:	3304      	adds	r3, #4
 8010e5a:	4619      	mov	r1, r3
 8010e5c:	4610      	mov	r0, r2
 8010e5e:	f7fe fa70 	bl	800f342 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e66:	4b1b      	ldr	r3, [pc, #108]	@ (8010ed4 <xTaskIncrementTick+0x168>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e6c:	429a      	cmp	r2, r3
 8010e6e:	d3b8      	bcc.n	8010de2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010e70:	2301      	movs	r3, #1
 8010e72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e74:	e7b5      	b.n	8010de2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010e76:	4b17      	ldr	r3, [pc, #92]	@ (8010ed4 <xTaskIncrementTick+0x168>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e7c:	4914      	ldr	r1, [pc, #80]	@ (8010ed0 <xTaskIncrementTick+0x164>)
 8010e7e:	4613      	mov	r3, r2
 8010e80:	009b      	lsls	r3, r3, #2
 8010e82:	4413      	add	r3, r2
 8010e84:	009b      	lsls	r3, r3, #2
 8010e86:	440b      	add	r3, r1
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	2b01      	cmp	r3, #1
 8010e8c:	d901      	bls.n	8010e92 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8010e8e:	2301      	movs	r3, #1
 8010e90:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010e92:	4b11      	ldr	r3, [pc, #68]	@ (8010ed8 <xTaskIncrementTick+0x16c>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d007      	beq.n	8010eaa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	617b      	str	r3, [r7, #20]
 8010e9e:	e004      	b.n	8010eaa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8010edc <xTaskIncrementTick+0x170>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	3301      	adds	r3, #1
 8010ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8010edc <xTaskIncrementTick+0x170>)
 8010ea8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010eaa:	697b      	ldr	r3, [r7, #20]
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	3718      	adds	r7, #24
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}
 8010eb4:	20006078 	.word	0x20006078
 8010eb8:	20006054 	.word	0x20006054
 8010ebc:	20006008 	.word	0x20006008
 8010ec0:	2000600c 	.word	0x2000600c
 8010ec4:	20006068 	.word	0x20006068
 8010ec8:	20006070 	.word	0x20006070
 8010ecc:	20006058 	.word	0x20006058
 8010ed0:	20005b80 	.word	0x20005b80
 8010ed4:	20005b7c 	.word	0x20005b7c
 8010ed8:	20006064 	.word	0x20006064
 8010edc:	20006060 	.word	0x20006060

08010ee0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b084      	sub	sp, #16
 8010ee4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010ee6:	4b36      	ldr	r3, [pc, #216]	@ (8010fc0 <vTaskSwitchContext+0xe0>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d003      	beq.n	8010ef6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010eee:	4b35      	ldr	r3, [pc, #212]	@ (8010fc4 <vTaskSwitchContext+0xe4>)
 8010ef0:	2201      	movs	r2, #1
 8010ef2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010ef4:	e060      	b.n	8010fb8 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 8010ef6:	4b33      	ldr	r3, [pc, #204]	@ (8010fc4 <vTaskSwitchContext+0xe4>)
 8010ef8:	2200      	movs	r2, #0
 8010efa:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010efc:	f7f3 ff86 	bl	8004e0c <getRunTimeCounterValue>
 8010f00:	4603      	mov	r3, r0
 8010f02:	4a31      	ldr	r2, [pc, #196]	@ (8010fc8 <vTaskSwitchContext+0xe8>)
 8010f04:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8010f06:	4b30      	ldr	r3, [pc, #192]	@ (8010fc8 <vTaskSwitchContext+0xe8>)
 8010f08:	681a      	ldr	r2, [r3, #0]
 8010f0a:	4b30      	ldr	r3, [pc, #192]	@ (8010fcc <vTaskSwitchContext+0xec>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	d909      	bls.n	8010f26 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8010f12:	4b2f      	ldr	r3, [pc, #188]	@ (8010fd0 <vTaskSwitchContext+0xf0>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8010f18:	4a2b      	ldr	r2, [pc, #172]	@ (8010fc8 <vTaskSwitchContext+0xe8>)
 8010f1a:	6810      	ldr	r0, [r2, #0]
 8010f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8010fcc <vTaskSwitchContext+0xec>)
 8010f1e:	6812      	ldr	r2, [r2, #0]
 8010f20:	1a82      	subs	r2, r0, r2
 8010f22:	440a      	add	r2, r1
 8010f24:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8010f26:	4b28      	ldr	r3, [pc, #160]	@ (8010fc8 <vTaskSwitchContext+0xe8>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	4a28      	ldr	r2, [pc, #160]	@ (8010fcc <vTaskSwitchContext+0xec>)
 8010f2c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f2e:	4b29      	ldr	r3, [pc, #164]	@ (8010fd4 <vTaskSwitchContext+0xf4>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	60fb      	str	r3, [r7, #12]
 8010f34:	e011      	b.n	8010f5a <vTaskSwitchContext+0x7a>
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d10b      	bne.n	8010f54 <vTaskSwitchContext+0x74>
	__asm volatile
 8010f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f40:	f383 8811 	msr	BASEPRI, r3
 8010f44:	f3bf 8f6f 	isb	sy
 8010f48:	f3bf 8f4f 	dsb	sy
 8010f4c:	607b      	str	r3, [r7, #4]
}
 8010f4e:	bf00      	nop
 8010f50:	bf00      	nop
 8010f52:	e7fd      	b.n	8010f50 <vTaskSwitchContext+0x70>
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	3b01      	subs	r3, #1
 8010f58:	60fb      	str	r3, [r7, #12]
 8010f5a:	491f      	ldr	r1, [pc, #124]	@ (8010fd8 <vTaskSwitchContext+0xf8>)
 8010f5c:	68fa      	ldr	r2, [r7, #12]
 8010f5e:	4613      	mov	r3, r2
 8010f60:	009b      	lsls	r3, r3, #2
 8010f62:	4413      	add	r3, r2
 8010f64:	009b      	lsls	r3, r3, #2
 8010f66:	440b      	add	r3, r1
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d0e3      	beq.n	8010f36 <vTaskSwitchContext+0x56>
 8010f6e:	68fa      	ldr	r2, [r7, #12]
 8010f70:	4613      	mov	r3, r2
 8010f72:	009b      	lsls	r3, r3, #2
 8010f74:	4413      	add	r3, r2
 8010f76:	009b      	lsls	r3, r3, #2
 8010f78:	4a17      	ldr	r2, [pc, #92]	@ (8010fd8 <vTaskSwitchContext+0xf8>)
 8010f7a:	4413      	add	r3, r2
 8010f7c:	60bb      	str	r3, [r7, #8]
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	685b      	ldr	r3, [r3, #4]
 8010f82:	685a      	ldr	r2, [r3, #4]
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	605a      	str	r2, [r3, #4]
 8010f88:	68bb      	ldr	r3, [r7, #8]
 8010f8a:	685a      	ldr	r2, [r3, #4]
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	3308      	adds	r3, #8
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d104      	bne.n	8010f9e <vTaskSwitchContext+0xbe>
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	685b      	ldr	r3, [r3, #4]
 8010f98:	685a      	ldr	r2, [r3, #4]
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	605a      	str	r2, [r3, #4]
 8010f9e:	68bb      	ldr	r3, [r7, #8]
 8010fa0:	685b      	ldr	r3, [r3, #4]
 8010fa2:	68db      	ldr	r3, [r3, #12]
 8010fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8010fd0 <vTaskSwitchContext+0xf0>)
 8010fa6:	6013      	str	r3, [r2, #0]
 8010fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8010fd4 <vTaskSwitchContext+0xf4>)
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010fae:	4b08      	ldr	r3, [pc, #32]	@ (8010fd0 <vTaskSwitchContext+0xf0>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	335c      	adds	r3, #92	@ 0x5c
 8010fb4:	4a09      	ldr	r2, [pc, #36]	@ (8010fdc <vTaskSwitchContext+0xfc>)
 8010fb6:	6013      	str	r3, [r2, #0]
}
 8010fb8:	bf00      	nop
 8010fba:	3710      	adds	r7, #16
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}
 8010fc0:	20006078 	.word	0x20006078
 8010fc4:	20006064 	.word	0x20006064
 8010fc8:	20006080 	.word	0x20006080
 8010fcc:	2000607c 	.word	0x2000607c
 8010fd0:	20005b7c 	.word	0x20005b7c
 8010fd4:	20006058 	.word	0x20006058
 8010fd8:	20005b80 	.word	0x20005b80
 8010fdc:	200001b4 	.word	0x200001b4

08010fe0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b084      	sub	sp, #16
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
 8010fe8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d10b      	bne.n	8011008 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ff4:	f383 8811 	msr	BASEPRI, r3
 8010ff8:	f3bf 8f6f 	isb	sy
 8010ffc:	f3bf 8f4f 	dsb	sy
 8011000:	60fb      	str	r3, [r7, #12]
}
 8011002:	bf00      	nop
 8011004:	bf00      	nop
 8011006:	e7fd      	b.n	8011004 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011008:	4b07      	ldr	r3, [pc, #28]	@ (8011028 <vTaskPlaceOnEventList+0x48>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	3318      	adds	r3, #24
 801100e:	4619      	mov	r1, r3
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f7fe f9ba 	bl	800f38a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011016:	2101      	movs	r1, #1
 8011018:	6838      	ldr	r0, [r7, #0]
 801101a:	f000 fb97 	bl	801174c <prvAddCurrentTaskToDelayedList>
}
 801101e:	bf00      	nop
 8011020:	3710      	adds	r7, #16
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}
 8011026:	bf00      	nop
 8011028:	20005b7c 	.word	0x20005b7c

0801102c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801102c:	b580      	push	{r7, lr}
 801102e:	b086      	sub	sp, #24
 8011030:	af00      	add	r7, sp, #0
 8011032:	60f8      	str	r0, [r7, #12]
 8011034:	60b9      	str	r1, [r7, #8]
 8011036:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d10b      	bne.n	8011056 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801103e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011042:	f383 8811 	msr	BASEPRI, r3
 8011046:	f3bf 8f6f 	isb	sy
 801104a:	f3bf 8f4f 	dsb	sy
 801104e:	617b      	str	r3, [r7, #20]
}
 8011050:	bf00      	nop
 8011052:	bf00      	nop
 8011054:	e7fd      	b.n	8011052 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011056:	4b0a      	ldr	r3, [pc, #40]	@ (8011080 <vTaskPlaceOnEventListRestricted+0x54>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	3318      	adds	r3, #24
 801105c:	4619      	mov	r1, r3
 801105e:	68f8      	ldr	r0, [r7, #12]
 8011060:	f7fe f96f 	bl	800f342 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d002      	beq.n	8011070 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801106a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801106e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011070:	6879      	ldr	r1, [r7, #4]
 8011072:	68b8      	ldr	r0, [r7, #8]
 8011074:	f000 fb6a 	bl	801174c <prvAddCurrentTaskToDelayedList>
	}
 8011078:	bf00      	nop
 801107a:	3718      	adds	r7, #24
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}
 8011080:	20005b7c 	.word	0x20005b7c

08011084 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b086      	sub	sp, #24
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	68db      	ldr	r3, [r3, #12]
 8011090:	68db      	ldr	r3, [r3, #12]
 8011092:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011094:	693b      	ldr	r3, [r7, #16]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d10b      	bne.n	80110b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801109a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801109e:	f383 8811 	msr	BASEPRI, r3
 80110a2:	f3bf 8f6f 	isb	sy
 80110a6:	f3bf 8f4f 	dsb	sy
 80110aa:	60fb      	str	r3, [r7, #12]
}
 80110ac:	bf00      	nop
 80110ae:	bf00      	nop
 80110b0:	e7fd      	b.n	80110ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	3318      	adds	r3, #24
 80110b6:	4618      	mov	r0, r3
 80110b8:	f7fe f9a0 	bl	800f3fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80110bc:	4b1d      	ldr	r3, [pc, #116]	@ (8011134 <xTaskRemoveFromEventList+0xb0>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d11d      	bne.n	8011100 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	3304      	adds	r3, #4
 80110c8:	4618      	mov	r0, r3
 80110ca:	f7fe f997 	bl	800f3fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80110ce:	693b      	ldr	r3, [r7, #16]
 80110d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80110d2:	4b19      	ldr	r3, [pc, #100]	@ (8011138 <xTaskRemoveFromEventList+0xb4>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d903      	bls.n	80110e2 <xTaskRemoveFromEventList+0x5e>
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110de:	4a16      	ldr	r2, [pc, #88]	@ (8011138 <xTaskRemoveFromEventList+0xb4>)
 80110e0:	6013      	str	r3, [r2, #0]
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80110e6:	4613      	mov	r3, r2
 80110e8:	009b      	lsls	r3, r3, #2
 80110ea:	4413      	add	r3, r2
 80110ec:	009b      	lsls	r3, r3, #2
 80110ee:	4a13      	ldr	r2, [pc, #76]	@ (801113c <xTaskRemoveFromEventList+0xb8>)
 80110f0:	441a      	add	r2, r3
 80110f2:	693b      	ldr	r3, [r7, #16]
 80110f4:	3304      	adds	r3, #4
 80110f6:	4619      	mov	r1, r3
 80110f8:	4610      	mov	r0, r2
 80110fa:	f7fe f922 	bl	800f342 <vListInsertEnd>
 80110fe:	e005      	b.n	801110c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011100:	693b      	ldr	r3, [r7, #16]
 8011102:	3318      	adds	r3, #24
 8011104:	4619      	mov	r1, r3
 8011106:	480e      	ldr	r0, [pc, #56]	@ (8011140 <xTaskRemoveFromEventList+0xbc>)
 8011108:	f7fe f91b 	bl	800f342 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011110:	4b0c      	ldr	r3, [pc, #48]	@ (8011144 <xTaskRemoveFromEventList+0xc0>)
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011116:	429a      	cmp	r2, r3
 8011118:	d905      	bls.n	8011126 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801111a:	2301      	movs	r3, #1
 801111c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801111e:	4b0a      	ldr	r3, [pc, #40]	@ (8011148 <xTaskRemoveFromEventList+0xc4>)
 8011120:	2201      	movs	r2, #1
 8011122:	601a      	str	r2, [r3, #0]
 8011124:	e001      	b.n	801112a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8011126:	2300      	movs	r3, #0
 8011128:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801112a:	697b      	ldr	r3, [r7, #20]
}
 801112c:	4618      	mov	r0, r3
 801112e:	3718      	adds	r7, #24
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}
 8011134:	20006078 	.word	0x20006078
 8011138:	20006058 	.word	0x20006058
 801113c:	20005b80 	.word	0x20005b80
 8011140:	20006010 	.word	0x20006010
 8011144:	20005b7c 	.word	0x20005b7c
 8011148:	20006064 	.word	0x20006064

0801114c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801114c:	b480      	push	{r7}
 801114e:	b083      	sub	sp, #12
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011154:	4b06      	ldr	r3, [pc, #24]	@ (8011170 <vTaskInternalSetTimeOutState+0x24>)
 8011156:	681a      	ldr	r2, [r3, #0]
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801115c:	4b05      	ldr	r3, [pc, #20]	@ (8011174 <vTaskInternalSetTimeOutState+0x28>)
 801115e:	681a      	ldr	r2, [r3, #0]
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	605a      	str	r2, [r3, #4]
}
 8011164:	bf00      	nop
 8011166:	370c      	adds	r7, #12
 8011168:	46bd      	mov	sp, r7
 801116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116e:	4770      	bx	lr
 8011170:	20006068 	.word	0x20006068
 8011174:	20006054 	.word	0x20006054

08011178 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b088      	sub	sp, #32
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
 8011180:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d10b      	bne.n	80111a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801118c:	f383 8811 	msr	BASEPRI, r3
 8011190:	f3bf 8f6f 	isb	sy
 8011194:	f3bf 8f4f 	dsb	sy
 8011198:	613b      	str	r3, [r7, #16]
}
 801119a:	bf00      	nop
 801119c:	bf00      	nop
 801119e:	e7fd      	b.n	801119c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d10b      	bne.n	80111be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80111a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111aa:	f383 8811 	msr	BASEPRI, r3
 80111ae:	f3bf 8f6f 	isb	sy
 80111b2:	f3bf 8f4f 	dsb	sy
 80111b6:	60fb      	str	r3, [r7, #12]
}
 80111b8:	bf00      	nop
 80111ba:	bf00      	nop
 80111bc:	e7fd      	b.n	80111ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80111be:	f000 ffa3 	bl	8012108 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80111c2:	4b1d      	ldr	r3, [pc, #116]	@ (8011238 <xTaskCheckForTimeOut+0xc0>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	685b      	ldr	r3, [r3, #4]
 80111cc:	69ba      	ldr	r2, [r7, #24]
 80111ce:	1ad3      	subs	r3, r2, r3
 80111d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80111da:	d102      	bne.n	80111e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80111dc:	2300      	movs	r3, #0
 80111de:	61fb      	str	r3, [r7, #28]
 80111e0:	e023      	b.n	801122a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681a      	ldr	r2, [r3, #0]
 80111e6:	4b15      	ldr	r3, [pc, #84]	@ (801123c <xTaskCheckForTimeOut+0xc4>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d007      	beq.n	80111fe <xTaskCheckForTimeOut+0x86>
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	685b      	ldr	r3, [r3, #4]
 80111f2:	69ba      	ldr	r2, [r7, #24]
 80111f4:	429a      	cmp	r2, r3
 80111f6:	d302      	bcc.n	80111fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80111f8:	2301      	movs	r3, #1
 80111fa:	61fb      	str	r3, [r7, #28]
 80111fc:	e015      	b.n	801122a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	697a      	ldr	r2, [r7, #20]
 8011204:	429a      	cmp	r2, r3
 8011206:	d20b      	bcs.n	8011220 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	681a      	ldr	r2, [r3, #0]
 801120c:	697b      	ldr	r3, [r7, #20]
 801120e:	1ad2      	subs	r2, r2, r3
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011214:	6878      	ldr	r0, [r7, #4]
 8011216:	f7ff ff99 	bl	801114c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801121a:	2300      	movs	r3, #0
 801121c:	61fb      	str	r3, [r7, #28]
 801121e:	e004      	b.n	801122a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	2200      	movs	r2, #0
 8011224:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011226:	2301      	movs	r3, #1
 8011228:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801122a:	f000 ff9f 	bl	801216c <vPortExitCritical>

	return xReturn;
 801122e:	69fb      	ldr	r3, [r7, #28]
}
 8011230:	4618      	mov	r0, r3
 8011232:	3720      	adds	r7, #32
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}
 8011238:	20006054 	.word	0x20006054
 801123c:	20006068 	.word	0x20006068

08011240 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011240:	b480      	push	{r7}
 8011242:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011244:	4b03      	ldr	r3, [pc, #12]	@ (8011254 <vTaskMissedYield+0x14>)
 8011246:	2201      	movs	r2, #1
 8011248:	601a      	str	r2, [r3, #0]
}
 801124a:	bf00      	nop
 801124c:	46bd      	mov	sp, r7
 801124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011252:	4770      	bx	lr
 8011254:	20006064 	.word	0x20006064

08011258 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b082      	sub	sp, #8
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011260:	f000 f852 	bl	8011308 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011264:	4b06      	ldr	r3, [pc, #24]	@ (8011280 <prvIdleTask+0x28>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	2b01      	cmp	r3, #1
 801126a:	d9f9      	bls.n	8011260 <prvIdleTask+0x8>
			{
				taskYIELD();
 801126c:	4b05      	ldr	r3, [pc, #20]	@ (8011284 <prvIdleTask+0x2c>)
 801126e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011272:	601a      	str	r2, [r3, #0]
 8011274:	f3bf 8f4f 	dsb	sy
 8011278:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801127c:	e7f0      	b.n	8011260 <prvIdleTask+0x8>
 801127e:	bf00      	nop
 8011280:	20005b80 	.word	0x20005b80
 8011284:	e000ed04 	.word	0xe000ed04

08011288 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b082      	sub	sp, #8
 801128c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801128e:	2300      	movs	r3, #0
 8011290:	607b      	str	r3, [r7, #4]
 8011292:	e00c      	b.n	80112ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011294:	687a      	ldr	r2, [r7, #4]
 8011296:	4613      	mov	r3, r2
 8011298:	009b      	lsls	r3, r3, #2
 801129a:	4413      	add	r3, r2
 801129c:	009b      	lsls	r3, r3, #2
 801129e:	4a12      	ldr	r2, [pc, #72]	@ (80112e8 <prvInitialiseTaskLists+0x60>)
 80112a0:	4413      	add	r3, r2
 80112a2:	4618      	mov	r0, r3
 80112a4:	f7fe f820 	bl	800f2e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	3301      	adds	r3, #1
 80112ac:	607b      	str	r3, [r7, #4]
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	2b37      	cmp	r3, #55	@ 0x37
 80112b2:	d9ef      	bls.n	8011294 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80112b4:	480d      	ldr	r0, [pc, #52]	@ (80112ec <prvInitialiseTaskLists+0x64>)
 80112b6:	f7fe f817 	bl	800f2e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80112ba:	480d      	ldr	r0, [pc, #52]	@ (80112f0 <prvInitialiseTaskLists+0x68>)
 80112bc:	f7fe f814 	bl	800f2e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80112c0:	480c      	ldr	r0, [pc, #48]	@ (80112f4 <prvInitialiseTaskLists+0x6c>)
 80112c2:	f7fe f811 	bl	800f2e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80112c6:	480c      	ldr	r0, [pc, #48]	@ (80112f8 <prvInitialiseTaskLists+0x70>)
 80112c8:	f7fe f80e 	bl	800f2e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80112cc:	480b      	ldr	r0, [pc, #44]	@ (80112fc <prvInitialiseTaskLists+0x74>)
 80112ce:	f7fe f80b 	bl	800f2e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80112d2:	4b0b      	ldr	r3, [pc, #44]	@ (8011300 <prvInitialiseTaskLists+0x78>)
 80112d4:	4a05      	ldr	r2, [pc, #20]	@ (80112ec <prvInitialiseTaskLists+0x64>)
 80112d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80112d8:	4b0a      	ldr	r3, [pc, #40]	@ (8011304 <prvInitialiseTaskLists+0x7c>)
 80112da:	4a05      	ldr	r2, [pc, #20]	@ (80112f0 <prvInitialiseTaskLists+0x68>)
 80112dc:	601a      	str	r2, [r3, #0]
}
 80112de:	bf00      	nop
 80112e0:	3708      	adds	r7, #8
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}
 80112e6:	bf00      	nop
 80112e8:	20005b80 	.word	0x20005b80
 80112ec:	20005fe0 	.word	0x20005fe0
 80112f0:	20005ff4 	.word	0x20005ff4
 80112f4:	20006010 	.word	0x20006010
 80112f8:	20006024 	.word	0x20006024
 80112fc:	2000603c 	.word	0x2000603c
 8011300:	20006008 	.word	0x20006008
 8011304:	2000600c 	.word	0x2000600c

08011308 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b082      	sub	sp, #8
 801130c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801130e:	e019      	b.n	8011344 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011310:	f000 fefa 	bl	8012108 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011314:	4b10      	ldr	r3, [pc, #64]	@ (8011358 <prvCheckTasksWaitingTermination+0x50>)
 8011316:	68db      	ldr	r3, [r3, #12]
 8011318:	68db      	ldr	r3, [r3, #12]
 801131a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	3304      	adds	r3, #4
 8011320:	4618      	mov	r0, r3
 8011322:	f7fe f86b 	bl	800f3fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011326:	4b0d      	ldr	r3, [pc, #52]	@ (801135c <prvCheckTasksWaitingTermination+0x54>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	3b01      	subs	r3, #1
 801132c:	4a0b      	ldr	r2, [pc, #44]	@ (801135c <prvCheckTasksWaitingTermination+0x54>)
 801132e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011330:	4b0b      	ldr	r3, [pc, #44]	@ (8011360 <prvCheckTasksWaitingTermination+0x58>)
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	3b01      	subs	r3, #1
 8011336:	4a0a      	ldr	r2, [pc, #40]	@ (8011360 <prvCheckTasksWaitingTermination+0x58>)
 8011338:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801133a:	f000 ff17 	bl	801216c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f000 f810 	bl	8011364 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011344:	4b06      	ldr	r3, [pc, #24]	@ (8011360 <prvCheckTasksWaitingTermination+0x58>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d1e1      	bne.n	8011310 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801134c:	bf00      	nop
 801134e:	bf00      	nop
 8011350:	3708      	adds	r7, #8
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}
 8011356:	bf00      	nop
 8011358:	20006024 	.word	0x20006024
 801135c:	20006050 	.word	0x20006050
 8011360:	20006038 	.word	0x20006038

08011364 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011364:	b580      	push	{r7, lr}
 8011366:	b084      	sub	sp, #16
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	335c      	adds	r3, #92	@ 0x5c
 8011370:	4618      	mov	r0, r3
 8011372:	f00e fc95 	bl	801fca0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801137c:	2b00      	cmp	r3, #0
 801137e:	d108      	bne.n	8011392 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011384:	4618      	mov	r0, r3
 8011386:	f001 f8af 	bl	80124e8 <vPortFree>
				vPortFree( pxTCB );
 801138a:	6878      	ldr	r0, [r7, #4]
 801138c:	f001 f8ac 	bl	80124e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011390:	e019      	b.n	80113c6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8011398:	2b01      	cmp	r3, #1
 801139a:	d103      	bne.n	80113a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801139c:	6878      	ldr	r0, [r7, #4]
 801139e:	f001 f8a3 	bl	80124e8 <vPortFree>
	}
 80113a2:	e010      	b.n	80113c6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80113aa:	2b02      	cmp	r3, #2
 80113ac:	d00b      	beq.n	80113c6 <prvDeleteTCB+0x62>
	__asm volatile
 80113ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113b2:	f383 8811 	msr	BASEPRI, r3
 80113b6:	f3bf 8f6f 	isb	sy
 80113ba:	f3bf 8f4f 	dsb	sy
 80113be:	60fb      	str	r3, [r7, #12]
}
 80113c0:	bf00      	nop
 80113c2:	bf00      	nop
 80113c4:	e7fd      	b.n	80113c2 <prvDeleteTCB+0x5e>
	}
 80113c6:	bf00      	nop
 80113c8:	3710      	adds	r7, #16
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bd80      	pop	{r7, pc}
	...

080113d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80113d0:	b480      	push	{r7}
 80113d2:	b083      	sub	sp, #12
 80113d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80113d6:	4b0c      	ldr	r3, [pc, #48]	@ (8011408 <prvResetNextTaskUnblockTime+0x38>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d104      	bne.n	80113ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80113e0:	4b0a      	ldr	r3, [pc, #40]	@ (801140c <prvResetNextTaskUnblockTime+0x3c>)
 80113e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80113e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80113e8:	e008      	b.n	80113fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113ea:	4b07      	ldr	r3, [pc, #28]	@ (8011408 <prvResetNextTaskUnblockTime+0x38>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	68db      	ldr	r3, [r3, #12]
 80113f0:	68db      	ldr	r3, [r3, #12]
 80113f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	685b      	ldr	r3, [r3, #4]
 80113f8:	4a04      	ldr	r2, [pc, #16]	@ (801140c <prvResetNextTaskUnblockTime+0x3c>)
 80113fa:	6013      	str	r3, [r2, #0]
}
 80113fc:	bf00      	nop
 80113fe:	370c      	adds	r7, #12
 8011400:	46bd      	mov	sp, r7
 8011402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011406:	4770      	bx	lr
 8011408:	20006008 	.word	0x20006008
 801140c:	20006070 	.word	0x20006070

08011410 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8011410:	b480      	push	{r7}
 8011412:	b083      	sub	sp, #12
 8011414:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8011416:	4b05      	ldr	r3, [pc, #20]	@ (801142c <xTaskGetCurrentTaskHandle+0x1c>)
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	607b      	str	r3, [r7, #4]

		return xReturn;
 801141c:	687b      	ldr	r3, [r7, #4]
	}
 801141e:	4618      	mov	r0, r3
 8011420:	370c      	adds	r7, #12
 8011422:	46bd      	mov	sp, r7
 8011424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011428:	4770      	bx	lr
 801142a:	bf00      	nop
 801142c:	20005b7c 	.word	0x20005b7c

08011430 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011430:	b480      	push	{r7}
 8011432:	b083      	sub	sp, #12
 8011434:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011436:	4b0b      	ldr	r3, [pc, #44]	@ (8011464 <xTaskGetSchedulerState+0x34>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d102      	bne.n	8011444 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801143e:	2301      	movs	r3, #1
 8011440:	607b      	str	r3, [r7, #4]
 8011442:	e008      	b.n	8011456 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011444:	4b08      	ldr	r3, [pc, #32]	@ (8011468 <xTaskGetSchedulerState+0x38>)
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d102      	bne.n	8011452 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801144c:	2302      	movs	r3, #2
 801144e:	607b      	str	r3, [r7, #4]
 8011450:	e001      	b.n	8011456 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011452:	2300      	movs	r3, #0
 8011454:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011456:	687b      	ldr	r3, [r7, #4]
	}
 8011458:	4618      	mov	r0, r3
 801145a:	370c      	adds	r7, #12
 801145c:	46bd      	mov	sp, r7
 801145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011462:	4770      	bx	lr
 8011464:	2000605c 	.word	0x2000605c
 8011468:	20006078 	.word	0x20006078

0801146c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801146c:	b580      	push	{r7, lr}
 801146e:	b084      	sub	sp, #16
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011478:	2300      	movs	r3, #0
 801147a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d051      	beq.n	8011526 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011482:	68bb      	ldr	r3, [r7, #8]
 8011484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011486:	4b2a      	ldr	r3, [pc, #168]	@ (8011530 <xTaskPriorityInherit+0xc4>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801148c:	429a      	cmp	r2, r3
 801148e:	d241      	bcs.n	8011514 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	699b      	ldr	r3, [r3, #24]
 8011494:	2b00      	cmp	r3, #0
 8011496:	db06      	blt.n	80114a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011498:	4b25      	ldr	r3, [pc, #148]	@ (8011530 <xTaskPriorityInherit+0xc4>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801149e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80114a2:	68bb      	ldr	r3, [r7, #8]
 80114a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	6959      	ldr	r1, [r3, #20]
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114ae:	4613      	mov	r3, r2
 80114b0:	009b      	lsls	r3, r3, #2
 80114b2:	4413      	add	r3, r2
 80114b4:	009b      	lsls	r3, r3, #2
 80114b6:	4a1f      	ldr	r2, [pc, #124]	@ (8011534 <xTaskPriorityInherit+0xc8>)
 80114b8:	4413      	add	r3, r2
 80114ba:	4299      	cmp	r1, r3
 80114bc:	d122      	bne.n	8011504 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80114be:	68bb      	ldr	r3, [r7, #8]
 80114c0:	3304      	adds	r3, #4
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7fd ff9a 	bl	800f3fc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80114c8:	4b19      	ldr	r3, [pc, #100]	@ (8011530 <xTaskPriorityInherit+0xc4>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114d6:	4b18      	ldr	r3, [pc, #96]	@ (8011538 <xTaskPriorityInherit+0xcc>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	429a      	cmp	r2, r3
 80114dc:	d903      	bls.n	80114e6 <xTaskPriorityInherit+0x7a>
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114e2:	4a15      	ldr	r2, [pc, #84]	@ (8011538 <xTaskPriorityInherit+0xcc>)
 80114e4:	6013      	str	r3, [r2, #0]
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114ea:	4613      	mov	r3, r2
 80114ec:	009b      	lsls	r3, r3, #2
 80114ee:	4413      	add	r3, r2
 80114f0:	009b      	lsls	r3, r3, #2
 80114f2:	4a10      	ldr	r2, [pc, #64]	@ (8011534 <xTaskPriorityInherit+0xc8>)
 80114f4:	441a      	add	r2, r3
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	3304      	adds	r3, #4
 80114fa:	4619      	mov	r1, r3
 80114fc:	4610      	mov	r0, r2
 80114fe:	f7fd ff20 	bl	800f342 <vListInsertEnd>
 8011502:	e004      	b.n	801150e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011504:	4b0a      	ldr	r3, [pc, #40]	@ (8011530 <xTaskPriorityInherit+0xc4>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801150e:	2301      	movs	r3, #1
 8011510:	60fb      	str	r3, [r7, #12]
 8011512:	e008      	b.n	8011526 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011518:	4b05      	ldr	r3, [pc, #20]	@ (8011530 <xTaskPriorityInherit+0xc4>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801151e:	429a      	cmp	r2, r3
 8011520:	d201      	bcs.n	8011526 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011522:	2301      	movs	r3, #1
 8011524:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011526:	68fb      	ldr	r3, [r7, #12]
	}
 8011528:	4618      	mov	r0, r3
 801152a:	3710      	adds	r7, #16
 801152c:	46bd      	mov	sp, r7
 801152e:	bd80      	pop	{r7, pc}
 8011530:	20005b7c 	.word	0x20005b7c
 8011534:	20005b80 	.word	0x20005b80
 8011538:	20006058 	.word	0x20006058

0801153c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801153c:	b580      	push	{r7, lr}
 801153e:	b086      	sub	sp, #24
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011548:	2300      	movs	r3, #0
 801154a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d058      	beq.n	8011604 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011552:	4b2f      	ldr	r3, [pc, #188]	@ (8011610 <xTaskPriorityDisinherit+0xd4>)
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	693a      	ldr	r2, [r7, #16]
 8011558:	429a      	cmp	r2, r3
 801155a:	d00b      	beq.n	8011574 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 801155c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011560:	f383 8811 	msr	BASEPRI, r3
 8011564:	f3bf 8f6f 	isb	sy
 8011568:	f3bf 8f4f 	dsb	sy
 801156c:	60fb      	str	r3, [r7, #12]
}
 801156e:	bf00      	nop
 8011570:	bf00      	nop
 8011572:	e7fd      	b.n	8011570 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011574:	693b      	ldr	r3, [r7, #16]
 8011576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011578:	2b00      	cmp	r3, #0
 801157a:	d10b      	bne.n	8011594 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 801157c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011580:	f383 8811 	msr	BASEPRI, r3
 8011584:	f3bf 8f6f 	isb	sy
 8011588:	f3bf 8f4f 	dsb	sy
 801158c:	60bb      	str	r3, [r7, #8]
}
 801158e:	bf00      	nop
 8011590:	bf00      	nop
 8011592:	e7fd      	b.n	8011590 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8011594:	693b      	ldr	r3, [r7, #16]
 8011596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011598:	1e5a      	subs	r2, r3, #1
 801159a:	693b      	ldr	r3, [r7, #16]
 801159c:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801159e:	693b      	ldr	r3, [r7, #16]
 80115a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80115a6:	429a      	cmp	r2, r3
 80115a8:	d02c      	beq.n	8011604 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80115aa:	693b      	ldr	r3, [r7, #16]
 80115ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d128      	bne.n	8011604 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80115b2:	693b      	ldr	r3, [r7, #16]
 80115b4:	3304      	adds	r3, #4
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7fd ff20 	bl	800f3fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80115c0:	693b      	ldr	r3, [r7, #16]
 80115c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80115cc:	693b      	ldr	r3, [r7, #16]
 80115ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80115d0:	693b      	ldr	r3, [r7, #16]
 80115d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115d4:	4b0f      	ldr	r3, [pc, #60]	@ (8011614 <xTaskPriorityDisinherit+0xd8>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	429a      	cmp	r2, r3
 80115da:	d903      	bls.n	80115e4 <xTaskPriorityDisinherit+0xa8>
 80115dc:	693b      	ldr	r3, [r7, #16]
 80115de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115e0:	4a0c      	ldr	r2, [pc, #48]	@ (8011614 <xTaskPriorityDisinherit+0xd8>)
 80115e2:	6013      	str	r3, [r2, #0]
 80115e4:	693b      	ldr	r3, [r7, #16]
 80115e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115e8:	4613      	mov	r3, r2
 80115ea:	009b      	lsls	r3, r3, #2
 80115ec:	4413      	add	r3, r2
 80115ee:	009b      	lsls	r3, r3, #2
 80115f0:	4a09      	ldr	r2, [pc, #36]	@ (8011618 <xTaskPriorityDisinherit+0xdc>)
 80115f2:	441a      	add	r2, r3
 80115f4:	693b      	ldr	r3, [r7, #16]
 80115f6:	3304      	adds	r3, #4
 80115f8:	4619      	mov	r1, r3
 80115fa:	4610      	mov	r0, r2
 80115fc:	f7fd fea1 	bl	800f342 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011600:	2301      	movs	r3, #1
 8011602:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011604:	697b      	ldr	r3, [r7, #20]
	}
 8011606:	4618      	mov	r0, r3
 8011608:	3718      	adds	r7, #24
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}
 801160e:	bf00      	nop
 8011610:	20005b7c 	.word	0x20005b7c
 8011614:	20006058 	.word	0x20006058
 8011618:	20005b80 	.word	0x20005b80

0801161c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801161c:	b580      	push	{r7, lr}
 801161e:	b088      	sub	sp, #32
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
 8011624:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801162a:	2301      	movs	r3, #1
 801162c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d06c      	beq.n	801170e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011634:	69bb      	ldr	r3, [r7, #24]
 8011636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011638:	2b00      	cmp	r3, #0
 801163a:	d10b      	bne.n	8011654 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 801163c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011640:	f383 8811 	msr	BASEPRI, r3
 8011644:	f3bf 8f6f 	isb	sy
 8011648:	f3bf 8f4f 	dsb	sy
 801164c:	60fb      	str	r3, [r7, #12]
}
 801164e:	bf00      	nop
 8011650:	bf00      	nop
 8011652:	e7fd      	b.n	8011650 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011654:	69bb      	ldr	r3, [r7, #24]
 8011656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011658:	683a      	ldr	r2, [r7, #0]
 801165a:	429a      	cmp	r2, r3
 801165c:	d902      	bls.n	8011664 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	61fb      	str	r3, [r7, #28]
 8011662:	e002      	b.n	801166a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011664:	69bb      	ldr	r3, [r7, #24]
 8011666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011668:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801166a:	69bb      	ldr	r3, [r7, #24]
 801166c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801166e:	69fa      	ldr	r2, [r7, #28]
 8011670:	429a      	cmp	r2, r3
 8011672:	d04c      	beq.n	801170e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011674:	69bb      	ldr	r3, [r7, #24]
 8011676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011678:	697a      	ldr	r2, [r7, #20]
 801167a:	429a      	cmp	r2, r3
 801167c:	d147      	bne.n	801170e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801167e:	4b26      	ldr	r3, [pc, #152]	@ (8011718 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	69ba      	ldr	r2, [r7, #24]
 8011684:	429a      	cmp	r2, r3
 8011686:	d10b      	bne.n	80116a0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8011688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801168c:	f383 8811 	msr	BASEPRI, r3
 8011690:	f3bf 8f6f 	isb	sy
 8011694:	f3bf 8f4f 	dsb	sy
 8011698:	60bb      	str	r3, [r7, #8]
}
 801169a:	bf00      	nop
 801169c:	bf00      	nop
 801169e:	e7fd      	b.n	801169c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80116a0:	69bb      	ldr	r3, [r7, #24]
 80116a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80116a6:	69bb      	ldr	r3, [r7, #24]
 80116a8:	69fa      	ldr	r2, [r7, #28]
 80116aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80116ac:	69bb      	ldr	r3, [r7, #24]
 80116ae:	699b      	ldr	r3, [r3, #24]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	db04      	blt.n	80116be <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80116b4:	69fb      	ldr	r3, [r7, #28]
 80116b6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80116ba:	69bb      	ldr	r3, [r7, #24]
 80116bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80116be:	69bb      	ldr	r3, [r7, #24]
 80116c0:	6959      	ldr	r1, [r3, #20]
 80116c2:	693a      	ldr	r2, [r7, #16]
 80116c4:	4613      	mov	r3, r2
 80116c6:	009b      	lsls	r3, r3, #2
 80116c8:	4413      	add	r3, r2
 80116ca:	009b      	lsls	r3, r3, #2
 80116cc:	4a13      	ldr	r2, [pc, #76]	@ (801171c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80116ce:	4413      	add	r3, r2
 80116d0:	4299      	cmp	r1, r3
 80116d2:	d11c      	bne.n	801170e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80116d4:	69bb      	ldr	r3, [r7, #24]
 80116d6:	3304      	adds	r3, #4
 80116d8:	4618      	mov	r0, r3
 80116da:	f7fd fe8f 	bl	800f3fc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80116de:	69bb      	ldr	r3, [r7, #24]
 80116e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116e2:	4b0f      	ldr	r3, [pc, #60]	@ (8011720 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d903      	bls.n	80116f2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80116ea:	69bb      	ldr	r3, [r7, #24]
 80116ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116ee:	4a0c      	ldr	r2, [pc, #48]	@ (8011720 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80116f0:	6013      	str	r3, [r2, #0]
 80116f2:	69bb      	ldr	r3, [r7, #24]
 80116f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116f6:	4613      	mov	r3, r2
 80116f8:	009b      	lsls	r3, r3, #2
 80116fa:	4413      	add	r3, r2
 80116fc:	009b      	lsls	r3, r3, #2
 80116fe:	4a07      	ldr	r2, [pc, #28]	@ (801171c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011700:	441a      	add	r2, r3
 8011702:	69bb      	ldr	r3, [r7, #24]
 8011704:	3304      	adds	r3, #4
 8011706:	4619      	mov	r1, r3
 8011708:	4610      	mov	r0, r2
 801170a:	f7fd fe1a 	bl	800f342 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801170e:	bf00      	nop
 8011710:	3720      	adds	r7, #32
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}
 8011716:	bf00      	nop
 8011718:	20005b7c 	.word	0x20005b7c
 801171c:	20005b80 	.word	0x20005b80
 8011720:	20006058 	.word	0x20006058

08011724 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011724:	b480      	push	{r7}
 8011726:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011728:	4b07      	ldr	r3, [pc, #28]	@ (8011748 <pvTaskIncrementMutexHeldCount+0x24>)
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d004      	beq.n	801173a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011730:	4b05      	ldr	r3, [pc, #20]	@ (8011748 <pvTaskIncrementMutexHeldCount+0x24>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011736:	3201      	adds	r2, #1
 8011738:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 801173a:	4b03      	ldr	r3, [pc, #12]	@ (8011748 <pvTaskIncrementMutexHeldCount+0x24>)
 801173c:	681b      	ldr	r3, [r3, #0]
	}
 801173e:	4618      	mov	r0, r3
 8011740:	46bd      	mov	sp, r7
 8011742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011746:	4770      	bx	lr
 8011748:	20005b7c 	.word	0x20005b7c

0801174c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b084      	sub	sp, #16
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
 8011754:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011756:	4b21      	ldr	r3, [pc, #132]	@ (80117dc <prvAddCurrentTaskToDelayedList+0x90>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801175c:	4b20      	ldr	r3, [pc, #128]	@ (80117e0 <prvAddCurrentTaskToDelayedList+0x94>)
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	3304      	adds	r3, #4
 8011762:	4618      	mov	r0, r3
 8011764:	f7fd fe4a 	bl	800f3fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801176e:	d10a      	bne.n	8011786 <prvAddCurrentTaskToDelayedList+0x3a>
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d007      	beq.n	8011786 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011776:	4b1a      	ldr	r3, [pc, #104]	@ (80117e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	3304      	adds	r3, #4
 801177c:	4619      	mov	r1, r3
 801177e:	4819      	ldr	r0, [pc, #100]	@ (80117e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8011780:	f7fd fddf 	bl	800f342 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011784:	e026      	b.n	80117d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011786:	68fa      	ldr	r2, [r7, #12]
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	4413      	add	r3, r2
 801178c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801178e:	4b14      	ldr	r3, [pc, #80]	@ (80117e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	68ba      	ldr	r2, [r7, #8]
 8011794:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011796:	68ba      	ldr	r2, [r7, #8]
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	429a      	cmp	r2, r3
 801179c:	d209      	bcs.n	80117b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801179e:	4b12      	ldr	r3, [pc, #72]	@ (80117e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80117a0:	681a      	ldr	r2, [r3, #0]
 80117a2:	4b0f      	ldr	r3, [pc, #60]	@ (80117e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	3304      	adds	r3, #4
 80117a8:	4619      	mov	r1, r3
 80117aa:	4610      	mov	r0, r2
 80117ac:	f7fd fded 	bl	800f38a <vListInsert>
}
 80117b0:	e010      	b.n	80117d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80117b2:	4b0e      	ldr	r3, [pc, #56]	@ (80117ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80117b4:	681a      	ldr	r2, [r3, #0]
 80117b6:	4b0a      	ldr	r3, [pc, #40]	@ (80117e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	3304      	adds	r3, #4
 80117bc:	4619      	mov	r1, r3
 80117be:	4610      	mov	r0, r2
 80117c0:	f7fd fde3 	bl	800f38a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80117c4:	4b0a      	ldr	r3, [pc, #40]	@ (80117f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	68ba      	ldr	r2, [r7, #8]
 80117ca:	429a      	cmp	r2, r3
 80117cc:	d202      	bcs.n	80117d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80117ce:	4a08      	ldr	r2, [pc, #32]	@ (80117f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	6013      	str	r3, [r2, #0]
}
 80117d4:	bf00      	nop
 80117d6:	3710      	adds	r7, #16
 80117d8:	46bd      	mov	sp, r7
 80117da:	bd80      	pop	{r7, pc}
 80117dc:	20006054 	.word	0x20006054
 80117e0:	20005b7c 	.word	0x20005b7c
 80117e4:	2000603c 	.word	0x2000603c
 80117e8:	2000600c 	.word	0x2000600c
 80117ec:	20006008 	.word	0x20006008
 80117f0:	20006070 	.word	0x20006070

080117f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b08a      	sub	sp, #40	@ 0x28
 80117f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80117fa:	2300      	movs	r3, #0
 80117fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80117fe:	f000 fb13 	bl	8011e28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011802:	4b1d      	ldr	r3, [pc, #116]	@ (8011878 <xTimerCreateTimerTask+0x84>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d021      	beq.n	801184e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801180a:	2300      	movs	r3, #0
 801180c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801180e:	2300      	movs	r3, #0
 8011810:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011812:	1d3a      	adds	r2, r7, #4
 8011814:	f107 0108 	add.w	r1, r7, #8
 8011818:	f107 030c 	add.w	r3, r7, #12
 801181c:	4618      	mov	r0, r3
 801181e:	f7fd fd49 	bl	800f2b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011822:	6879      	ldr	r1, [r7, #4]
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	68fa      	ldr	r2, [r7, #12]
 8011828:	9202      	str	r2, [sp, #8]
 801182a:	9301      	str	r3, [sp, #4]
 801182c:	2302      	movs	r3, #2
 801182e:	9300      	str	r3, [sp, #0]
 8011830:	2300      	movs	r3, #0
 8011832:	460a      	mov	r2, r1
 8011834:	4911      	ldr	r1, [pc, #68]	@ (801187c <xTimerCreateTimerTask+0x88>)
 8011836:	4812      	ldr	r0, [pc, #72]	@ (8011880 <xTimerCreateTimerTask+0x8c>)
 8011838:	f7fe feee 	bl	8010618 <xTaskCreateStatic>
 801183c:	4603      	mov	r3, r0
 801183e:	4a11      	ldr	r2, [pc, #68]	@ (8011884 <xTimerCreateTimerTask+0x90>)
 8011840:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011842:	4b10      	ldr	r3, [pc, #64]	@ (8011884 <xTimerCreateTimerTask+0x90>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d001      	beq.n	801184e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801184a:	2301      	movs	r3, #1
 801184c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d10b      	bne.n	801186c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8011854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011858:	f383 8811 	msr	BASEPRI, r3
 801185c:	f3bf 8f6f 	isb	sy
 8011860:	f3bf 8f4f 	dsb	sy
 8011864:	613b      	str	r3, [r7, #16]
}
 8011866:	bf00      	nop
 8011868:	bf00      	nop
 801186a:	e7fd      	b.n	8011868 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801186c:	697b      	ldr	r3, [r7, #20]
}
 801186e:	4618      	mov	r0, r3
 8011870:	3718      	adds	r7, #24
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}
 8011876:	bf00      	nop
 8011878:	200060b4 	.word	0x200060b4
 801187c:	08022408 	.word	0x08022408
 8011880:	080119c1 	.word	0x080119c1
 8011884:	200060b8 	.word	0x200060b8

08011888 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b08a      	sub	sp, #40	@ 0x28
 801188c:	af00      	add	r7, sp, #0
 801188e:	60f8      	str	r0, [r7, #12]
 8011890:	60b9      	str	r1, [r7, #8]
 8011892:	607a      	str	r2, [r7, #4]
 8011894:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011896:	2300      	movs	r3, #0
 8011898:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d10b      	bne.n	80118b8 <xTimerGenericCommand+0x30>
	__asm volatile
 80118a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118a4:	f383 8811 	msr	BASEPRI, r3
 80118a8:	f3bf 8f6f 	isb	sy
 80118ac:	f3bf 8f4f 	dsb	sy
 80118b0:	623b      	str	r3, [r7, #32]
}
 80118b2:	bf00      	nop
 80118b4:	bf00      	nop
 80118b6:	e7fd      	b.n	80118b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80118b8:	4b19      	ldr	r3, [pc, #100]	@ (8011920 <xTimerGenericCommand+0x98>)
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d02a      	beq.n	8011916 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80118cc:	68bb      	ldr	r3, [r7, #8]
 80118ce:	2b05      	cmp	r3, #5
 80118d0:	dc18      	bgt.n	8011904 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80118d2:	f7ff fdad 	bl	8011430 <xTaskGetSchedulerState>
 80118d6:	4603      	mov	r3, r0
 80118d8:	2b02      	cmp	r3, #2
 80118da:	d109      	bne.n	80118f0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80118dc:	4b10      	ldr	r3, [pc, #64]	@ (8011920 <xTimerGenericCommand+0x98>)
 80118de:	6818      	ldr	r0, [r3, #0]
 80118e0:	f107 0110 	add.w	r1, r7, #16
 80118e4:	2300      	movs	r3, #0
 80118e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80118e8:	f7fe f81e 	bl	800f928 <xQueueGenericSend>
 80118ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80118ee:	e012      	b.n	8011916 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80118f0:	4b0b      	ldr	r3, [pc, #44]	@ (8011920 <xTimerGenericCommand+0x98>)
 80118f2:	6818      	ldr	r0, [r3, #0]
 80118f4:	f107 0110 	add.w	r1, r7, #16
 80118f8:	2300      	movs	r3, #0
 80118fa:	2200      	movs	r2, #0
 80118fc:	f7fe f814 	bl	800f928 <xQueueGenericSend>
 8011900:	6278      	str	r0, [r7, #36]	@ 0x24
 8011902:	e008      	b.n	8011916 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011904:	4b06      	ldr	r3, [pc, #24]	@ (8011920 <xTimerGenericCommand+0x98>)
 8011906:	6818      	ldr	r0, [r3, #0]
 8011908:	f107 0110 	add.w	r1, r7, #16
 801190c:	2300      	movs	r3, #0
 801190e:	683a      	ldr	r2, [r7, #0]
 8011910:	f7fe f90c 	bl	800fb2c <xQueueGenericSendFromISR>
 8011914:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011918:	4618      	mov	r0, r3
 801191a:	3728      	adds	r7, #40	@ 0x28
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}
 8011920:	200060b4 	.word	0x200060b4

08011924 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b088      	sub	sp, #32
 8011928:	af02      	add	r7, sp, #8
 801192a:	6078      	str	r0, [r7, #4]
 801192c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801192e:	4b23      	ldr	r3, [pc, #140]	@ (80119bc <prvProcessExpiredTimer+0x98>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	68db      	ldr	r3, [r3, #12]
 8011934:	68db      	ldr	r3, [r3, #12]
 8011936:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011938:	697b      	ldr	r3, [r7, #20]
 801193a:	3304      	adds	r3, #4
 801193c:	4618      	mov	r0, r3
 801193e:	f7fd fd5d 	bl	800f3fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011942:	697b      	ldr	r3, [r7, #20]
 8011944:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011948:	f003 0304 	and.w	r3, r3, #4
 801194c:	2b00      	cmp	r3, #0
 801194e:	d023      	beq.n	8011998 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	699a      	ldr	r2, [r3, #24]
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	18d1      	adds	r1, r2, r3
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	683a      	ldr	r2, [r7, #0]
 801195c:	6978      	ldr	r0, [r7, #20]
 801195e:	f000 f8d5 	bl	8011b0c <prvInsertTimerInActiveList>
 8011962:	4603      	mov	r3, r0
 8011964:	2b00      	cmp	r3, #0
 8011966:	d020      	beq.n	80119aa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011968:	2300      	movs	r3, #0
 801196a:	9300      	str	r3, [sp, #0]
 801196c:	2300      	movs	r3, #0
 801196e:	687a      	ldr	r2, [r7, #4]
 8011970:	2100      	movs	r1, #0
 8011972:	6978      	ldr	r0, [r7, #20]
 8011974:	f7ff ff88 	bl	8011888 <xTimerGenericCommand>
 8011978:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801197a:	693b      	ldr	r3, [r7, #16]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d114      	bne.n	80119aa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8011980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011984:	f383 8811 	msr	BASEPRI, r3
 8011988:	f3bf 8f6f 	isb	sy
 801198c:	f3bf 8f4f 	dsb	sy
 8011990:	60fb      	str	r3, [r7, #12]
}
 8011992:	bf00      	nop
 8011994:	bf00      	nop
 8011996:	e7fd      	b.n	8011994 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011998:	697b      	ldr	r3, [r7, #20]
 801199a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801199e:	f023 0301 	bic.w	r3, r3, #1
 80119a2:	b2da      	uxtb	r2, r3
 80119a4:	697b      	ldr	r3, [r7, #20]
 80119a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	6a1b      	ldr	r3, [r3, #32]
 80119ae:	6978      	ldr	r0, [r7, #20]
 80119b0:	4798      	blx	r3
}
 80119b2:	bf00      	nop
 80119b4:	3718      	adds	r7, #24
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}
 80119ba:	bf00      	nop
 80119bc:	200060ac 	.word	0x200060ac

080119c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b084      	sub	sp, #16
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80119c8:	f107 0308 	add.w	r3, r7, #8
 80119cc:	4618      	mov	r0, r3
 80119ce:	f000 f859 	bl	8011a84 <prvGetNextExpireTime>
 80119d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	4619      	mov	r1, r3
 80119d8:	68f8      	ldr	r0, [r7, #12]
 80119da:	f000 f805 	bl	80119e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80119de:	f000 f8d7 	bl	8011b90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80119e2:	bf00      	nop
 80119e4:	e7f0      	b.n	80119c8 <prvTimerTask+0x8>
	...

080119e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b084      	sub	sp, #16
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
 80119f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80119f2:	f7ff f8ed 	bl	8010bd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80119f6:	f107 0308 	add.w	r3, r7, #8
 80119fa:	4618      	mov	r0, r3
 80119fc:	f000 f866 	bl	8011acc <prvSampleTimeNow>
 8011a00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d130      	bne.n	8011a6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d10a      	bne.n	8011a24 <prvProcessTimerOrBlockTask+0x3c>
 8011a0e:	687a      	ldr	r2, [r7, #4]
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	429a      	cmp	r2, r3
 8011a14:	d806      	bhi.n	8011a24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011a16:	f7ff f8e9 	bl	8010bec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011a1a:	68f9      	ldr	r1, [r7, #12]
 8011a1c:	6878      	ldr	r0, [r7, #4]
 8011a1e:	f7ff ff81 	bl	8011924 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011a22:	e024      	b.n	8011a6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d008      	beq.n	8011a3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011a2a:	4b13      	ldr	r3, [pc, #76]	@ (8011a78 <prvProcessTimerOrBlockTask+0x90>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d101      	bne.n	8011a38 <prvProcessTimerOrBlockTask+0x50>
 8011a34:	2301      	movs	r3, #1
 8011a36:	e000      	b.n	8011a3a <prvProcessTimerOrBlockTask+0x52>
 8011a38:	2300      	movs	r3, #0
 8011a3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8011a7c <prvProcessTimerOrBlockTask+0x94>)
 8011a3e:	6818      	ldr	r0, [r3, #0]
 8011a40:	687a      	ldr	r2, [r7, #4]
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	1ad3      	subs	r3, r2, r3
 8011a46:	683a      	ldr	r2, [r7, #0]
 8011a48:	4619      	mov	r1, r3
 8011a4a:	f7fe fdb1 	bl	80105b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011a4e:	f7ff f8cd 	bl	8010bec <xTaskResumeAll>
 8011a52:	4603      	mov	r3, r0
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d10a      	bne.n	8011a6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011a58:	4b09      	ldr	r3, [pc, #36]	@ (8011a80 <prvProcessTimerOrBlockTask+0x98>)
 8011a5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a5e:	601a      	str	r2, [r3, #0]
 8011a60:	f3bf 8f4f 	dsb	sy
 8011a64:	f3bf 8f6f 	isb	sy
}
 8011a68:	e001      	b.n	8011a6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011a6a:	f7ff f8bf 	bl	8010bec <xTaskResumeAll>
}
 8011a6e:	bf00      	nop
 8011a70:	3710      	adds	r7, #16
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}
 8011a76:	bf00      	nop
 8011a78:	200060b0 	.word	0x200060b0
 8011a7c:	200060b4 	.word	0x200060b4
 8011a80:	e000ed04 	.word	0xe000ed04

08011a84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011a84:	b480      	push	{r7}
 8011a86:	b085      	sub	sp, #20
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8011ac8 <prvGetNextExpireTime+0x44>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d101      	bne.n	8011a9a <prvGetNextExpireTime+0x16>
 8011a96:	2201      	movs	r2, #1
 8011a98:	e000      	b.n	8011a9c <prvGetNextExpireTime+0x18>
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d105      	bne.n	8011ab4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011aa8:	4b07      	ldr	r3, [pc, #28]	@ (8011ac8 <prvGetNextExpireTime+0x44>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	68db      	ldr	r3, [r3, #12]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	60fb      	str	r3, [r7, #12]
 8011ab2:	e001      	b.n	8011ab8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
}
 8011aba:	4618      	mov	r0, r3
 8011abc:	3714      	adds	r7, #20
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac4:	4770      	bx	lr
 8011ac6:	bf00      	nop
 8011ac8:	200060ac 	.word	0x200060ac

08011acc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b084      	sub	sp, #16
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011ad4:	f7ff f928 	bl	8010d28 <xTaskGetTickCount>
 8011ad8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011ada:	4b0b      	ldr	r3, [pc, #44]	@ (8011b08 <prvSampleTimeNow+0x3c>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	68fa      	ldr	r2, [r7, #12]
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	d205      	bcs.n	8011af0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011ae4:	f000 f93a 	bl	8011d5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2201      	movs	r2, #1
 8011aec:	601a      	str	r2, [r3, #0]
 8011aee:	e002      	b.n	8011af6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2200      	movs	r2, #0
 8011af4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011af6:	4a04      	ldr	r2, [pc, #16]	@ (8011b08 <prvSampleTimeNow+0x3c>)
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011afc:	68fb      	ldr	r3, [r7, #12]
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3710      	adds	r7, #16
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}
 8011b06:	bf00      	nop
 8011b08:	200060bc 	.word	0x200060bc

08011b0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b086      	sub	sp, #24
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	60f8      	str	r0, [r7, #12]
 8011b14:	60b9      	str	r1, [r7, #8]
 8011b16:	607a      	str	r2, [r7, #4]
 8011b18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	68ba      	ldr	r2, [r7, #8]
 8011b22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	68fa      	ldr	r2, [r7, #12]
 8011b28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011b2a:	68ba      	ldr	r2, [r7, #8]
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d812      	bhi.n	8011b58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b32:	687a      	ldr	r2, [r7, #4]
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	1ad2      	subs	r2, r2, r3
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	699b      	ldr	r3, [r3, #24]
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	d302      	bcc.n	8011b46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011b40:	2301      	movs	r3, #1
 8011b42:	617b      	str	r3, [r7, #20]
 8011b44:	e01b      	b.n	8011b7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011b46:	4b10      	ldr	r3, [pc, #64]	@ (8011b88 <prvInsertTimerInActiveList+0x7c>)
 8011b48:	681a      	ldr	r2, [r3, #0]
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	3304      	adds	r3, #4
 8011b4e:	4619      	mov	r1, r3
 8011b50:	4610      	mov	r0, r2
 8011b52:	f7fd fc1a 	bl	800f38a <vListInsert>
 8011b56:	e012      	b.n	8011b7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011b58:	687a      	ldr	r2, [r7, #4]
 8011b5a:	683b      	ldr	r3, [r7, #0]
 8011b5c:	429a      	cmp	r2, r3
 8011b5e:	d206      	bcs.n	8011b6e <prvInsertTimerInActiveList+0x62>
 8011b60:	68ba      	ldr	r2, [r7, #8]
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	429a      	cmp	r2, r3
 8011b66:	d302      	bcc.n	8011b6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011b68:	2301      	movs	r3, #1
 8011b6a:	617b      	str	r3, [r7, #20]
 8011b6c:	e007      	b.n	8011b7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011b6e:	4b07      	ldr	r3, [pc, #28]	@ (8011b8c <prvInsertTimerInActiveList+0x80>)
 8011b70:	681a      	ldr	r2, [r3, #0]
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	3304      	adds	r3, #4
 8011b76:	4619      	mov	r1, r3
 8011b78:	4610      	mov	r0, r2
 8011b7a:	f7fd fc06 	bl	800f38a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011b7e:	697b      	ldr	r3, [r7, #20]
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	3718      	adds	r7, #24
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}
 8011b88:	200060b0 	.word	0x200060b0
 8011b8c:	200060ac 	.word	0x200060ac

08011b90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b08e      	sub	sp, #56	@ 0x38
 8011b94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011b96:	e0ce      	b.n	8011d36 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	da19      	bge.n	8011bd2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011b9e:	1d3b      	adds	r3, r7, #4
 8011ba0:	3304      	adds	r3, #4
 8011ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d10b      	bne.n	8011bc2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8011baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bae:	f383 8811 	msr	BASEPRI, r3
 8011bb2:	f3bf 8f6f 	isb	sy
 8011bb6:	f3bf 8f4f 	dsb	sy
 8011bba:	61fb      	str	r3, [r7, #28]
}
 8011bbc:	bf00      	nop
 8011bbe:	bf00      	nop
 8011bc0:	e7fd      	b.n	8011bbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011bc8:	6850      	ldr	r0, [r2, #4]
 8011bca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011bcc:	6892      	ldr	r2, [r2, #8]
 8011bce:	4611      	mov	r1, r2
 8011bd0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	f2c0 80ae 	blt.w	8011d36 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011be0:	695b      	ldr	r3, [r3, #20]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d004      	beq.n	8011bf0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011be8:	3304      	adds	r3, #4
 8011bea:	4618      	mov	r0, r3
 8011bec:	f7fd fc06 	bl	800f3fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011bf0:	463b      	mov	r3, r7
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7ff ff6a 	bl	8011acc <prvSampleTimeNow>
 8011bf8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	2b09      	cmp	r3, #9
 8011bfe:	f200 8097 	bhi.w	8011d30 <prvProcessReceivedCommands+0x1a0>
 8011c02:	a201      	add	r2, pc, #4	@ (adr r2, 8011c08 <prvProcessReceivedCommands+0x78>)
 8011c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c08:	08011c31 	.word	0x08011c31
 8011c0c:	08011c31 	.word	0x08011c31
 8011c10:	08011c31 	.word	0x08011c31
 8011c14:	08011ca7 	.word	0x08011ca7
 8011c18:	08011cbb 	.word	0x08011cbb
 8011c1c:	08011d07 	.word	0x08011d07
 8011c20:	08011c31 	.word	0x08011c31
 8011c24:	08011c31 	.word	0x08011c31
 8011c28:	08011ca7 	.word	0x08011ca7
 8011c2c:	08011cbb 	.word	0x08011cbb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011c36:	f043 0301 	orr.w	r3, r3, #1
 8011c3a:	b2da      	uxtb	r2, r3
 8011c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011c42:	68ba      	ldr	r2, [r7, #8]
 8011c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c46:	699b      	ldr	r3, [r3, #24]
 8011c48:	18d1      	adds	r1, r2, r3
 8011c4a:	68bb      	ldr	r3, [r7, #8]
 8011c4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011c4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011c50:	f7ff ff5c 	bl	8011b0c <prvInsertTimerInActiveList>
 8011c54:	4603      	mov	r3, r0
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d06c      	beq.n	8011d34 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c5c:	6a1b      	ldr	r3, [r3, #32]
 8011c5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011c60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011c68:	f003 0304 	and.w	r3, r3, #4
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d061      	beq.n	8011d34 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011c70:	68ba      	ldr	r2, [r7, #8]
 8011c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c74:	699b      	ldr	r3, [r3, #24]
 8011c76:	441a      	add	r2, r3
 8011c78:	2300      	movs	r3, #0
 8011c7a:	9300      	str	r3, [sp, #0]
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	2100      	movs	r1, #0
 8011c80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011c82:	f7ff fe01 	bl	8011888 <xTimerGenericCommand>
 8011c86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011c88:	6a3b      	ldr	r3, [r7, #32]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d152      	bne.n	8011d34 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8011c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c92:	f383 8811 	msr	BASEPRI, r3
 8011c96:	f3bf 8f6f 	isb	sy
 8011c9a:	f3bf 8f4f 	dsb	sy
 8011c9e:	61bb      	str	r3, [r7, #24]
}
 8011ca0:	bf00      	nop
 8011ca2:	bf00      	nop
 8011ca4:	e7fd      	b.n	8011ca2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011cac:	f023 0301 	bic.w	r3, r3, #1
 8011cb0:	b2da      	uxtb	r2, r3
 8011cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011cb8:	e03d      	b.n	8011d36 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011cc0:	f043 0301 	orr.w	r3, r3, #1
 8011cc4:	b2da      	uxtb	r2, r3
 8011cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011ccc:	68ba      	ldr	r2, [r7, #8]
 8011cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cd0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cd4:	699b      	ldr	r3, [r3, #24]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d10b      	bne.n	8011cf2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8011cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cde:	f383 8811 	msr	BASEPRI, r3
 8011ce2:	f3bf 8f6f 	isb	sy
 8011ce6:	f3bf 8f4f 	dsb	sy
 8011cea:	617b      	str	r3, [r7, #20]
}
 8011cec:	bf00      	nop
 8011cee:	bf00      	nop
 8011cf0:	e7fd      	b.n	8011cee <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cf4:	699a      	ldr	r2, [r3, #24]
 8011cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cf8:	18d1      	adds	r1, r2, r3
 8011cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011cfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011d00:	f7ff ff04 	bl	8011b0c <prvInsertTimerInActiveList>
					break;
 8011d04:	e017      	b.n	8011d36 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011d0c:	f003 0302 	and.w	r3, r3, #2
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d103      	bne.n	8011d1c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8011d14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011d16:	f000 fbe7 	bl	80124e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011d1a:	e00c      	b.n	8011d36 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011d22:	f023 0301 	bic.w	r3, r3, #1
 8011d26:	b2da      	uxtb	r2, r3
 8011d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011d2e:	e002      	b.n	8011d36 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8011d30:	bf00      	nop
 8011d32:	e000      	b.n	8011d36 <prvProcessReceivedCommands+0x1a6>
					break;
 8011d34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011d36:	4b08      	ldr	r3, [pc, #32]	@ (8011d58 <prvProcessReceivedCommands+0x1c8>)
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	1d39      	adds	r1, r7, #4
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	4618      	mov	r0, r3
 8011d40:	f7fe f822 	bl	800fd88 <xQueueReceive>
 8011d44:	4603      	mov	r3, r0
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	f47f af26 	bne.w	8011b98 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011d4c:	bf00      	nop
 8011d4e:	bf00      	nop
 8011d50:	3730      	adds	r7, #48	@ 0x30
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}
 8011d56:	bf00      	nop
 8011d58:	200060b4 	.word	0x200060b4

08011d5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b088      	sub	sp, #32
 8011d60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011d62:	e049      	b.n	8011df8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011d64:	4b2e      	ldr	r3, [pc, #184]	@ (8011e20 <prvSwitchTimerLists+0xc4>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	68db      	ldr	r3, [r3, #12]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8011e20 <prvSwitchTimerLists+0xc4>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	68db      	ldr	r3, [r3, #12]
 8011d74:	68db      	ldr	r3, [r3, #12]
 8011d76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	3304      	adds	r3, #4
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7fd fb3d 	bl	800f3fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	6a1b      	ldr	r3, [r3, #32]
 8011d86:	68f8      	ldr	r0, [r7, #12]
 8011d88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011d90:	f003 0304 	and.w	r3, r3, #4
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d02f      	beq.n	8011df8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	699b      	ldr	r3, [r3, #24]
 8011d9c:	693a      	ldr	r2, [r7, #16]
 8011d9e:	4413      	add	r3, r2
 8011da0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011da2:	68ba      	ldr	r2, [r7, #8]
 8011da4:	693b      	ldr	r3, [r7, #16]
 8011da6:	429a      	cmp	r2, r3
 8011da8:	d90e      	bls.n	8011dc8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	68ba      	ldr	r2, [r7, #8]
 8011dae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	68fa      	ldr	r2, [r7, #12]
 8011db4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011db6:	4b1a      	ldr	r3, [pc, #104]	@ (8011e20 <prvSwitchTimerLists+0xc4>)
 8011db8:	681a      	ldr	r2, [r3, #0]
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	3304      	adds	r3, #4
 8011dbe:	4619      	mov	r1, r3
 8011dc0:	4610      	mov	r0, r2
 8011dc2:	f7fd fae2 	bl	800f38a <vListInsert>
 8011dc6:	e017      	b.n	8011df8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011dc8:	2300      	movs	r3, #0
 8011dca:	9300      	str	r3, [sp, #0]
 8011dcc:	2300      	movs	r3, #0
 8011dce:	693a      	ldr	r2, [r7, #16]
 8011dd0:	2100      	movs	r1, #0
 8011dd2:	68f8      	ldr	r0, [r7, #12]
 8011dd4:	f7ff fd58 	bl	8011888 <xTimerGenericCommand>
 8011dd8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d10b      	bne.n	8011df8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8011de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011de4:	f383 8811 	msr	BASEPRI, r3
 8011de8:	f3bf 8f6f 	isb	sy
 8011dec:	f3bf 8f4f 	dsb	sy
 8011df0:	603b      	str	r3, [r7, #0]
}
 8011df2:	bf00      	nop
 8011df4:	bf00      	nop
 8011df6:	e7fd      	b.n	8011df4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011df8:	4b09      	ldr	r3, [pc, #36]	@ (8011e20 <prvSwitchTimerLists+0xc4>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d1b0      	bne.n	8011d64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011e02:	4b07      	ldr	r3, [pc, #28]	@ (8011e20 <prvSwitchTimerLists+0xc4>)
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011e08:	4b06      	ldr	r3, [pc, #24]	@ (8011e24 <prvSwitchTimerLists+0xc8>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	4a04      	ldr	r2, [pc, #16]	@ (8011e20 <prvSwitchTimerLists+0xc4>)
 8011e0e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011e10:	4a04      	ldr	r2, [pc, #16]	@ (8011e24 <prvSwitchTimerLists+0xc8>)
 8011e12:	697b      	ldr	r3, [r7, #20]
 8011e14:	6013      	str	r3, [r2, #0]
}
 8011e16:	bf00      	nop
 8011e18:	3718      	adds	r7, #24
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	bd80      	pop	{r7, pc}
 8011e1e:	bf00      	nop
 8011e20:	200060ac 	.word	0x200060ac
 8011e24:	200060b0 	.word	0x200060b0

08011e28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b082      	sub	sp, #8
 8011e2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011e2e:	f000 f96b 	bl	8012108 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011e32:	4b15      	ldr	r3, [pc, #84]	@ (8011e88 <prvCheckForValidListAndQueue+0x60>)
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d120      	bne.n	8011e7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011e3a:	4814      	ldr	r0, [pc, #80]	@ (8011e8c <prvCheckForValidListAndQueue+0x64>)
 8011e3c:	f7fd fa54 	bl	800f2e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011e40:	4813      	ldr	r0, [pc, #76]	@ (8011e90 <prvCheckForValidListAndQueue+0x68>)
 8011e42:	f7fd fa51 	bl	800f2e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011e46:	4b13      	ldr	r3, [pc, #76]	@ (8011e94 <prvCheckForValidListAndQueue+0x6c>)
 8011e48:	4a10      	ldr	r2, [pc, #64]	@ (8011e8c <prvCheckForValidListAndQueue+0x64>)
 8011e4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011e4c:	4b12      	ldr	r3, [pc, #72]	@ (8011e98 <prvCheckForValidListAndQueue+0x70>)
 8011e4e:	4a10      	ldr	r2, [pc, #64]	@ (8011e90 <prvCheckForValidListAndQueue+0x68>)
 8011e50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011e52:	2300      	movs	r3, #0
 8011e54:	9300      	str	r3, [sp, #0]
 8011e56:	4b11      	ldr	r3, [pc, #68]	@ (8011e9c <prvCheckForValidListAndQueue+0x74>)
 8011e58:	4a11      	ldr	r2, [pc, #68]	@ (8011ea0 <prvCheckForValidListAndQueue+0x78>)
 8011e5a:	2110      	movs	r1, #16
 8011e5c:	200a      	movs	r0, #10
 8011e5e:	f7fd fb61 	bl	800f524 <xQueueGenericCreateStatic>
 8011e62:	4603      	mov	r3, r0
 8011e64:	4a08      	ldr	r2, [pc, #32]	@ (8011e88 <prvCheckForValidListAndQueue+0x60>)
 8011e66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011e68:	4b07      	ldr	r3, [pc, #28]	@ (8011e88 <prvCheckForValidListAndQueue+0x60>)
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d005      	beq.n	8011e7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011e70:	4b05      	ldr	r3, [pc, #20]	@ (8011e88 <prvCheckForValidListAndQueue+0x60>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	490b      	ldr	r1, [pc, #44]	@ (8011ea4 <prvCheckForValidListAndQueue+0x7c>)
 8011e76:	4618      	mov	r0, r3
 8011e78:	f7fe fb46 	bl	8010508 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011e7c:	f000 f976 	bl	801216c <vPortExitCritical>
}
 8011e80:	bf00      	nop
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd80      	pop	{r7, pc}
 8011e86:	bf00      	nop
 8011e88:	200060b4 	.word	0x200060b4
 8011e8c:	20006084 	.word	0x20006084
 8011e90:	20006098 	.word	0x20006098
 8011e94:	200060ac 	.word	0x200060ac
 8011e98:	200060b0 	.word	0x200060b0
 8011e9c:	20006160 	.word	0x20006160
 8011ea0:	200060c0 	.word	0x200060c0
 8011ea4:	08022410 	.word	0x08022410

08011ea8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011ea8:	b480      	push	{r7}
 8011eaa:	b085      	sub	sp, #20
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	60f8      	str	r0, [r7, #12]
 8011eb0:	60b9      	str	r1, [r7, #8]
 8011eb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	3b04      	subs	r3, #4
 8011eb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011ec0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	3b04      	subs	r3, #4
 8011ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011ec8:	68bb      	ldr	r3, [r7, #8]
 8011eca:	f023 0201 	bic.w	r2, r3, #1
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	3b04      	subs	r3, #4
 8011ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011ed8:	4a0c      	ldr	r2, [pc, #48]	@ (8011f0c <pxPortInitialiseStack+0x64>)
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	3b14      	subs	r3, #20
 8011ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011ee4:	687a      	ldr	r2, [r7, #4]
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	3b04      	subs	r3, #4
 8011eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	f06f 0202 	mvn.w	r2, #2
 8011ef6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	3b20      	subs	r3, #32
 8011efc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011efe:	68fb      	ldr	r3, [r7, #12]
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	3714      	adds	r7, #20
 8011f04:	46bd      	mov	sp, r7
 8011f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0a:	4770      	bx	lr
 8011f0c:	08011f11 	.word	0x08011f11

08011f10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011f10:	b480      	push	{r7}
 8011f12:	b085      	sub	sp, #20
 8011f14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011f16:	2300      	movs	r3, #0
 8011f18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011f1a:	4b13      	ldr	r3, [pc, #76]	@ (8011f68 <prvTaskExitError+0x58>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011f22:	d00b      	beq.n	8011f3c <prvTaskExitError+0x2c>
	__asm volatile
 8011f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f28:	f383 8811 	msr	BASEPRI, r3
 8011f2c:	f3bf 8f6f 	isb	sy
 8011f30:	f3bf 8f4f 	dsb	sy
 8011f34:	60fb      	str	r3, [r7, #12]
}
 8011f36:	bf00      	nop
 8011f38:	bf00      	nop
 8011f3a:	e7fd      	b.n	8011f38 <prvTaskExitError+0x28>
	__asm volatile
 8011f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f40:	f383 8811 	msr	BASEPRI, r3
 8011f44:	f3bf 8f6f 	isb	sy
 8011f48:	f3bf 8f4f 	dsb	sy
 8011f4c:	60bb      	str	r3, [r7, #8]
}
 8011f4e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011f50:	bf00      	nop
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d0fc      	beq.n	8011f52 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011f58:	bf00      	nop
 8011f5a:	bf00      	nop
 8011f5c:	3714      	adds	r7, #20
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f64:	4770      	bx	lr
 8011f66:	bf00      	nop
 8011f68:	20000128 	.word	0x20000128
 8011f6c:	00000000 	.word	0x00000000

08011f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011f70:	4b07      	ldr	r3, [pc, #28]	@ (8011f90 <pxCurrentTCBConst2>)
 8011f72:	6819      	ldr	r1, [r3, #0]
 8011f74:	6808      	ldr	r0, [r1, #0]
 8011f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f7a:	f380 8809 	msr	PSP, r0
 8011f7e:	f3bf 8f6f 	isb	sy
 8011f82:	f04f 0000 	mov.w	r0, #0
 8011f86:	f380 8811 	msr	BASEPRI, r0
 8011f8a:	4770      	bx	lr
 8011f8c:	f3af 8000 	nop.w

08011f90 <pxCurrentTCBConst2>:
 8011f90:	20005b7c 	.word	0x20005b7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011f94:	bf00      	nop
 8011f96:	bf00      	nop

08011f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011f98:	4808      	ldr	r0, [pc, #32]	@ (8011fbc <prvPortStartFirstTask+0x24>)
 8011f9a:	6800      	ldr	r0, [r0, #0]
 8011f9c:	6800      	ldr	r0, [r0, #0]
 8011f9e:	f380 8808 	msr	MSP, r0
 8011fa2:	f04f 0000 	mov.w	r0, #0
 8011fa6:	f380 8814 	msr	CONTROL, r0
 8011faa:	b662      	cpsie	i
 8011fac:	b661      	cpsie	f
 8011fae:	f3bf 8f4f 	dsb	sy
 8011fb2:	f3bf 8f6f 	isb	sy
 8011fb6:	df00      	svc	0
 8011fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011fba:	bf00      	nop
 8011fbc:	e000ed08 	.word	0xe000ed08

08011fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b086      	sub	sp, #24
 8011fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011fc6:	4b47      	ldr	r3, [pc, #284]	@ (80120e4 <xPortStartScheduler+0x124>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	4a47      	ldr	r2, [pc, #284]	@ (80120e8 <xPortStartScheduler+0x128>)
 8011fcc:	4293      	cmp	r3, r2
 8011fce:	d10b      	bne.n	8011fe8 <xPortStartScheduler+0x28>
	__asm volatile
 8011fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fd4:	f383 8811 	msr	BASEPRI, r3
 8011fd8:	f3bf 8f6f 	isb	sy
 8011fdc:	f3bf 8f4f 	dsb	sy
 8011fe0:	613b      	str	r3, [r7, #16]
}
 8011fe2:	bf00      	nop
 8011fe4:	bf00      	nop
 8011fe6:	e7fd      	b.n	8011fe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80120e4 <xPortStartScheduler+0x124>)
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	4a3f      	ldr	r2, [pc, #252]	@ (80120ec <xPortStartScheduler+0x12c>)
 8011fee:	4293      	cmp	r3, r2
 8011ff0:	d10b      	bne.n	801200a <xPortStartScheduler+0x4a>
	__asm volatile
 8011ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ff6:	f383 8811 	msr	BASEPRI, r3
 8011ffa:	f3bf 8f6f 	isb	sy
 8011ffe:	f3bf 8f4f 	dsb	sy
 8012002:	60fb      	str	r3, [r7, #12]
}
 8012004:	bf00      	nop
 8012006:	bf00      	nop
 8012008:	e7fd      	b.n	8012006 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801200a:	4b39      	ldr	r3, [pc, #228]	@ (80120f0 <xPortStartScheduler+0x130>)
 801200c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801200e:	697b      	ldr	r3, [r7, #20]
 8012010:	781b      	ldrb	r3, [r3, #0]
 8012012:	b2db      	uxtb	r3, r3
 8012014:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012016:	697b      	ldr	r3, [r7, #20]
 8012018:	22ff      	movs	r2, #255	@ 0xff
 801201a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	781b      	ldrb	r3, [r3, #0]
 8012020:	b2db      	uxtb	r3, r3
 8012022:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012024:	78fb      	ldrb	r3, [r7, #3]
 8012026:	b2db      	uxtb	r3, r3
 8012028:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801202c:	b2da      	uxtb	r2, r3
 801202e:	4b31      	ldr	r3, [pc, #196]	@ (80120f4 <xPortStartScheduler+0x134>)
 8012030:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012032:	4b31      	ldr	r3, [pc, #196]	@ (80120f8 <xPortStartScheduler+0x138>)
 8012034:	2207      	movs	r2, #7
 8012036:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012038:	e009      	b.n	801204e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801203a:	4b2f      	ldr	r3, [pc, #188]	@ (80120f8 <xPortStartScheduler+0x138>)
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	3b01      	subs	r3, #1
 8012040:	4a2d      	ldr	r2, [pc, #180]	@ (80120f8 <xPortStartScheduler+0x138>)
 8012042:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012044:	78fb      	ldrb	r3, [r7, #3]
 8012046:	b2db      	uxtb	r3, r3
 8012048:	005b      	lsls	r3, r3, #1
 801204a:	b2db      	uxtb	r3, r3
 801204c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801204e:	78fb      	ldrb	r3, [r7, #3]
 8012050:	b2db      	uxtb	r3, r3
 8012052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012056:	2b80      	cmp	r3, #128	@ 0x80
 8012058:	d0ef      	beq.n	801203a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801205a:	4b27      	ldr	r3, [pc, #156]	@ (80120f8 <xPortStartScheduler+0x138>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	f1c3 0307 	rsb	r3, r3, #7
 8012062:	2b04      	cmp	r3, #4
 8012064:	d00b      	beq.n	801207e <xPortStartScheduler+0xbe>
	__asm volatile
 8012066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801206a:	f383 8811 	msr	BASEPRI, r3
 801206e:	f3bf 8f6f 	isb	sy
 8012072:	f3bf 8f4f 	dsb	sy
 8012076:	60bb      	str	r3, [r7, #8]
}
 8012078:	bf00      	nop
 801207a:	bf00      	nop
 801207c:	e7fd      	b.n	801207a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801207e:	4b1e      	ldr	r3, [pc, #120]	@ (80120f8 <xPortStartScheduler+0x138>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	021b      	lsls	r3, r3, #8
 8012084:	4a1c      	ldr	r2, [pc, #112]	@ (80120f8 <xPortStartScheduler+0x138>)
 8012086:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012088:	4b1b      	ldr	r3, [pc, #108]	@ (80120f8 <xPortStartScheduler+0x138>)
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012090:	4a19      	ldr	r2, [pc, #100]	@ (80120f8 <xPortStartScheduler+0x138>)
 8012092:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	b2da      	uxtb	r2, r3
 8012098:	697b      	ldr	r3, [r7, #20]
 801209a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801209c:	4b17      	ldr	r3, [pc, #92]	@ (80120fc <xPortStartScheduler+0x13c>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	4a16      	ldr	r2, [pc, #88]	@ (80120fc <xPortStartScheduler+0x13c>)
 80120a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80120a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80120a8:	4b14      	ldr	r3, [pc, #80]	@ (80120fc <xPortStartScheduler+0x13c>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	4a13      	ldr	r2, [pc, #76]	@ (80120fc <xPortStartScheduler+0x13c>)
 80120ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80120b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80120b4:	f000 f8da 	bl	801226c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80120b8:	4b11      	ldr	r3, [pc, #68]	@ (8012100 <xPortStartScheduler+0x140>)
 80120ba:	2200      	movs	r2, #0
 80120bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80120be:	f000 f8f9 	bl	80122b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80120c2:	4b10      	ldr	r3, [pc, #64]	@ (8012104 <xPortStartScheduler+0x144>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	4a0f      	ldr	r2, [pc, #60]	@ (8012104 <xPortStartScheduler+0x144>)
 80120c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80120cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80120ce:	f7ff ff63 	bl	8011f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80120d2:	f7fe ff05 	bl	8010ee0 <vTaskSwitchContext>
	prvTaskExitError();
 80120d6:	f7ff ff1b 	bl	8011f10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80120da:	2300      	movs	r3, #0
}
 80120dc:	4618      	mov	r0, r3
 80120de:	3718      	adds	r7, #24
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bd80      	pop	{r7, pc}
 80120e4:	e000ed00 	.word	0xe000ed00
 80120e8:	410fc271 	.word	0x410fc271
 80120ec:	410fc270 	.word	0x410fc270
 80120f0:	e000e400 	.word	0xe000e400
 80120f4:	200061b0 	.word	0x200061b0
 80120f8:	200061b4 	.word	0x200061b4
 80120fc:	e000ed20 	.word	0xe000ed20
 8012100:	20000128 	.word	0x20000128
 8012104:	e000ef34 	.word	0xe000ef34

08012108 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012108:	b480      	push	{r7}
 801210a:	b083      	sub	sp, #12
 801210c:	af00      	add	r7, sp, #0
	__asm volatile
 801210e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012112:	f383 8811 	msr	BASEPRI, r3
 8012116:	f3bf 8f6f 	isb	sy
 801211a:	f3bf 8f4f 	dsb	sy
 801211e:	607b      	str	r3, [r7, #4]
}
 8012120:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012122:	4b10      	ldr	r3, [pc, #64]	@ (8012164 <vPortEnterCritical+0x5c>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	3301      	adds	r3, #1
 8012128:	4a0e      	ldr	r2, [pc, #56]	@ (8012164 <vPortEnterCritical+0x5c>)
 801212a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801212c:	4b0d      	ldr	r3, [pc, #52]	@ (8012164 <vPortEnterCritical+0x5c>)
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	2b01      	cmp	r3, #1
 8012132:	d110      	bne.n	8012156 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012134:	4b0c      	ldr	r3, [pc, #48]	@ (8012168 <vPortEnterCritical+0x60>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	b2db      	uxtb	r3, r3
 801213a:	2b00      	cmp	r3, #0
 801213c:	d00b      	beq.n	8012156 <vPortEnterCritical+0x4e>
	__asm volatile
 801213e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012142:	f383 8811 	msr	BASEPRI, r3
 8012146:	f3bf 8f6f 	isb	sy
 801214a:	f3bf 8f4f 	dsb	sy
 801214e:	603b      	str	r3, [r7, #0]
}
 8012150:	bf00      	nop
 8012152:	bf00      	nop
 8012154:	e7fd      	b.n	8012152 <vPortEnterCritical+0x4a>
	}
}
 8012156:	bf00      	nop
 8012158:	370c      	adds	r7, #12
 801215a:	46bd      	mov	sp, r7
 801215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012160:	4770      	bx	lr
 8012162:	bf00      	nop
 8012164:	20000128 	.word	0x20000128
 8012168:	e000ed04 	.word	0xe000ed04

0801216c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801216c:	b480      	push	{r7}
 801216e:	b083      	sub	sp, #12
 8012170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012172:	4b12      	ldr	r3, [pc, #72]	@ (80121bc <vPortExitCritical+0x50>)
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d10b      	bne.n	8012192 <vPortExitCritical+0x26>
	__asm volatile
 801217a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801217e:	f383 8811 	msr	BASEPRI, r3
 8012182:	f3bf 8f6f 	isb	sy
 8012186:	f3bf 8f4f 	dsb	sy
 801218a:	607b      	str	r3, [r7, #4]
}
 801218c:	bf00      	nop
 801218e:	bf00      	nop
 8012190:	e7fd      	b.n	801218e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012192:	4b0a      	ldr	r3, [pc, #40]	@ (80121bc <vPortExitCritical+0x50>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	3b01      	subs	r3, #1
 8012198:	4a08      	ldr	r2, [pc, #32]	@ (80121bc <vPortExitCritical+0x50>)
 801219a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801219c:	4b07      	ldr	r3, [pc, #28]	@ (80121bc <vPortExitCritical+0x50>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d105      	bne.n	80121b0 <vPortExitCritical+0x44>
 80121a4:	2300      	movs	r3, #0
 80121a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	f383 8811 	msr	BASEPRI, r3
}
 80121ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80121b0:	bf00      	nop
 80121b2:	370c      	adds	r7, #12
 80121b4:	46bd      	mov	sp, r7
 80121b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ba:	4770      	bx	lr
 80121bc:	20000128 	.word	0x20000128

080121c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80121c0:	f3ef 8009 	mrs	r0, PSP
 80121c4:	f3bf 8f6f 	isb	sy
 80121c8:	4b15      	ldr	r3, [pc, #84]	@ (8012220 <pxCurrentTCBConst>)
 80121ca:	681a      	ldr	r2, [r3, #0]
 80121cc:	f01e 0f10 	tst.w	lr, #16
 80121d0:	bf08      	it	eq
 80121d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80121d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121da:	6010      	str	r0, [r2, #0]
 80121dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80121e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80121e4:	f380 8811 	msr	BASEPRI, r0
 80121e8:	f3bf 8f4f 	dsb	sy
 80121ec:	f3bf 8f6f 	isb	sy
 80121f0:	f7fe fe76 	bl	8010ee0 <vTaskSwitchContext>
 80121f4:	f04f 0000 	mov.w	r0, #0
 80121f8:	f380 8811 	msr	BASEPRI, r0
 80121fc:	bc09      	pop	{r0, r3}
 80121fe:	6819      	ldr	r1, [r3, #0]
 8012200:	6808      	ldr	r0, [r1, #0]
 8012202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012206:	f01e 0f10 	tst.w	lr, #16
 801220a:	bf08      	it	eq
 801220c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012210:	f380 8809 	msr	PSP, r0
 8012214:	f3bf 8f6f 	isb	sy
 8012218:	4770      	bx	lr
 801221a:	bf00      	nop
 801221c:	f3af 8000 	nop.w

08012220 <pxCurrentTCBConst>:
 8012220:	20005b7c 	.word	0x20005b7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012224:	bf00      	nop
 8012226:	bf00      	nop

08012228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b082      	sub	sp, #8
 801222c:	af00      	add	r7, sp, #0
	__asm volatile
 801222e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012232:	f383 8811 	msr	BASEPRI, r3
 8012236:	f3bf 8f6f 	isb	sy
 801223a:	f3bf 8f4f 	dsb	sy
 801223e:	607b      	str	r3, [r7, #4]
}
 8012240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012242:	f7fe fd93 	bl	8010d6c <xTaskIncrementTick>
 8012246:	4603      	mov	r3, r0
 8012248:	2b00      	cmp	r3, #0
 801224a:	d003      	beq.n	8012254 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801224c:	4b06      	ldr	r3, [pc, #24]	@ (8012268 <xPortSysTickHandler+0x40>)
 801224e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012252:	601a      	str	r2, [r3, #0]
 8012254:	2300      	movs	r3, #0
 8012256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	f383 8811 	msr	BASEPRI, r3
}
 801225e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012260:	bf00      	nop
 8012262:	3708      	adds	r7, #8
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}
 8012268:	e000ed04 	.word	0xe000ed04

0801226c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801226c:	b480      	push	{r7}
 801226e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012270:	4b0b      	ldr	r3, [pc, #44]	@ (80122a0 <vPortSetupTimerInterrupt+0x34>)
 8012272:	2200      	movs	r2, #0
 8012274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012276:	4b0b      	ldr	r3, [pc, #44]	@ (80122a4 <vPortSetupTimerInterrupt+0x38>)
 8012278:	2200      	movs	r2, #0
 801227a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801227c:	4b0a      	ldr	r3, [pc, #40]	@ (80122a8 <vPortSetupTimerInterrupt+0x3c>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	4a0a      	ldr	r2, [pc, #40]	@ (80122ac <vPortSetupTimerInterrupt+0x40>)
 8012282:	fba2 2303 	umull	r2, r3, r2, r3
 8012286:	099b      	lsrs	r3, r3, #6
 8012288:	4a09      	ldr	r2, [pc, #36]	@ (80122b0 <vPortSetupTimerInterrupt+0x44>)
 801228a:	3b01      	subs	r3, #1
 801228c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801228e:	4b04      	ldr	r3, [pc, #16]	@ (80122a0 <vPortSetupTimerInterrupt+0x34>)
 8012290:	2207      	movs	r2, #7
 8012292:	601a      	str	r2, [r3, #0]
}
 8012294:	bf00      	nop
 8012296:	46bd      	mov	sp, r7
 8012298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229c:	4770      	bx	lr
 801229e:	bf00      	nop
 80122a0:	e000e010 	.word	0xe000e010
 80122a4:	e000e018 	.word	0xe000e018
 80122a8:	2000000c 	.word	0x2000000c
 80122ac:	10624dd3 	.word	0x10624dd3
 80122b0:	e000e014 	.word	0xe000e014

080122b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80122b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80122c4 <vPortEnableVFP+0x10>
 80122b8:	6801      	ldr	r1, [r0, #0]
 80122ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80122be:	6001      	str	r1, [r0, #0]
 80122c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80122c2:	bf00      	nop
 80122c4:	e000ed88 	.word	0xe000ed88

080122c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80122c8:	b480      	push	{r7}
 80122ca:	b085      	sub	sp, #20
 80122cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80122ce:	f3ef 8305 	mrs	r3, IPSR
 80122d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	2b0f      	cmp	r3, #15
 80122d8:	d915      	bls.n	8012306 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80122da:	4a18      	ldr	r2, [pc, #96]	@ (801233c <vPortValidateInterruptPriority+0x74>)
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	4413      	add	r3, r2
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80122e4:	4b16      	ldr	r3, [pc, #88]	@ (8012340 <vPortValidateInterruptPriority+0x78>)
 80122e6:	781b      	ldrb	r3, [r3, #0]
 80122e8:	7afa      	ldrb	r2, [r7, #11]
 80122ea:	429a      	cmp	r2, r3
 80122ec:	d20b      	bcs.n	8012306 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80122ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122f2:	f383 8811 	msr	BASEPRI, r3
 80122f6:	f3bf 8f6f 	isb	sy
 80122fa:	f3bf 8f4f 	dsb	sy
 80122fe:	607b      	str	r3, [r7, #4]
}
 8012300:	bf00      	nop
 8012302:	bf00      	nop
 8012304:	e7fd      	b.n	8012302 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012306:	4b0f      	ldr	r3, [pc, #60]	@ (8012344 <vPortValidateInterruptPriority+0x7c>)
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801230e:	4b0e      	ldr	r3, [pc, #56]	@ (8012348 <vPortValidateInterruptPriority+0x80>)
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	429a      	cmp	r2, r3
 8012314:	d90b      	bls.n	801232e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801231a:	f383 8811 	msr	BASEPRI, r3
 801231e:	f3bf 8f6f 	isb	sy
 8012322:	f3bf 8f4f 	dsb	sy
 8012326:	603b      	str	r3, [r7, #0]
}
 8012328:	bf00      	nop
 801232a:	bf00      	nop
 801232c:	e7fd      	b.n	801232a <vPortValidateInterruptPriority+0x62>
	}
 801232e:	bf00      	nop
 8012330:	3714      	adds	r7, #20
 8012332:	46bd      	mov	sp, r7
 8012334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012338:	4770      	bx	lr
 801233a:	bf00      	nop
 801233c:	e000e3f0 	.word	0xe000e3f0
 8012340:	200061b0 	.word	0x200061b0
 8012344:	e000ed0c 	.word	0xe000ed0c
 8012348:	200061b4 	.word	0x200061b4

0801234c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b08a      	sub	sp, #40	@ 0x28
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012354:	2300      	movs	r3, #0
 8012356:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012358:	f7fe fc3a 	bl	8010bd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801235c:	4b5c      	ldr	r3, [pc, #368]	@ (80124d0 <pvPortMalloc+0x184>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d101      	bne.n	8012368 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012364:	f000 f924 	bl	80125b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012368:	4b5a      	ldr	r3, [pc, #360]	@ (80124d4 <pvPortMalloc+0x188>)
 801236a:	681a      	ldr	r2, [r3, #0]
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	4013      	ands	r3, r2
 8012370:	2b00      	cmp	r3, #0
 8012372:	f040 8095 	bne.w	80124a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d01e      	beq.n	80123ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801237c:	2208      	movs	r2, #8
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	4413      	add	r3, r2
 8012382:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f003 0307 	and.w	r3, r3, #7
 801238a:	2b00      	cmp	r3, #0
 801238c:	d015      	beq.n	80123ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f023 0307 	bic.w	r3, r3, #7
 8012394:	3308      	adds	r3, #8
 8012396:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f003 0307 	and.w	r3, r3, #7
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d00b      	beq.n	80123ba <pvPortMalloc+0x6e>
	__asm volatile
 80123a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123a6:	f383 8811 	msr	BASEPRI, r3
 80123aa:	f3bf 8f6f 	isb	sy
 80123ae:	f3bf 8f4f 	dsb	sy
 80123b2:	617b      	str	r3, [r7, #20]
}
 80123b4:	bf00      	nop
 80123b6:	bf00      	nop
 80123b8:	e7fd      	b.n	80123b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d06f      	beq.n	80124a0 <pvPortMalloc+0x154>
 80123c0:	4b45      	ldr	r3, [pc, #276]	@ (80124d8 <pvPortMalloc+0x18c>)
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	687a      	ldr	r2, [r7, #4]
 80123c6:	429a      	cmp	r2, r3
 80123c8:	d86a      	bhi.n	80124a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80123ca:	4b44      	ldr	r3, [pc, #272]	@ (80124dc <pvPortMalloc+0x190>)
 80123cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80123ce:	4b43      	ldr	r3, [pc, #268]	@ (80124dc <pvPortMalloc+0x190>)
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80123d4:	e004      	b.n	80123e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80123d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80123da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80123e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123e2:	685b      	ldr	r3, [r3, #4]
 80123e4:	687a      	ldr	r2, [r7, #4]
 80123e6:	429a      	cmp	r2, r3
 80123e8:	d903      	bls.n	80123f2 <pvPortMalloc+0xa6>
 80123ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d1f1      	bne.n	80123d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80123f2:	4b37      	ldr	r3, [pc, #220]	@ (80124d0 <pvPortMalloc+0x184>)
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80123f8:	429a      	cmp	r2, r3
 80123fa:	d051      	beq.n	80124a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80123fc:	6a3b      	ldr	r3, [r7, #32]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	2208      	movs	r2, #8
 8012402:	4413      	add	r3, r2
 8012404:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012408:	681a      	ldr	r2, [r3, #0]
 801240a:	6a3b      	ldr	r3, [r7, #32]
 801240c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012410:	685a      	ldr	r2, [r3, #4]
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	1ad2      	subs	r2, r2, r3
 8012416:	2308      	movs	r3, #8
 8012418:	005b      	lsls	r3, r3, #1
 801241a:	429a      	cmp	r2, r3
 801241c:	d920      	bls.n	8012460 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801241e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	4413      	add	r3, r2
 8012424:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012426:	69bb      	ldr	r3, [r7, #24]
 8012428:	f003 0307 	and.w	r3, r3, #7
 801242c:	2b00      	cmp	r3, #0
 801242e:	d00b      	beq.n	8012448 <pvPortMalloc+0xfc>
	__asm volatile
 8012430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012434:	f383 8811 	msr	BASEPRI, r3
 8012438:	f3bf 8f6f 	isb	sy
 801243c:	f3bf 8f4f 	dsb	sy
 8012440:	613b      	str	r3, [r7, #16]
}
 8012442:	bf00      	nop
 8012444:	bf00      	nop
 8012446:	e7fd      	b.n	8012444 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801244a:	685a      	ldr	r2, [r3, #4]
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	1ad2      	subs	r2, r2, r3
 8012450:	69bb      	ldr	r3, [r7, #24]
 8012452:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012456:	687a      	ldr	r2, [r7, #4]
 8012458:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801245a:	69b8      	ldr	r0, [r7, #24]
 801245c:	f000 f90a 	bl	8012674 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012460:	4b1d      	ldr	r3, [pc, #116]	@ (80124d8 <pvPortMalloc+0x18c>)
 8012462:	681a      	ldr	r2, [r3, #0]
 8012464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012466:	685b      	ldr	r3, [r3, #4]
 8012468:	1ad3      	subs	r3, r2, r3
 801246a:	4a1b      	ldr	r2, [pc, #108]	@ (80124d8 <pvPortMalloc+0x18c>)
 801246c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801246e:	4b1a      	ldr	r3, [pc, #104]	@ (80124d8 <pvPortMalloc+0x18c>)
 8012470:	681a      	ldr	r2, [r3, #0]
 8012472:	4b1b      	ldr	r3, [pc, #108]	@ (80124e0 <pvPortMalloc+0x194>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	429a      	cmp	r2, r3
 8012478:	d203      	bcs.n	8012482 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801247a:	4b17      	ldr	r3, [pc, #92]	@ (80124d8 <pvPortMalloc+0x18c>)
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	4a18      	ldr	r2, [pc, #96]	@ (80124e0 <pvPortMalloc+0x194>)
 8012480:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012484:	685a      	ldr	r2, [r3, #4]
 8012486:	4b13      	ldr	r3, [pc, #76]	@ (80124d4 <pvPortMalloc+0x188>)
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	431a      	orrs	r2, r3
 801248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801248e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012492:	2200      	movs	r2, #0
 8012494:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012496:	4b13      	ldr	r3, [pc, #76]	@ (80124e4 <pvPortMalloc+0x198>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	3301      	adds	r3, #1
 801249c:	4a11      	ldr	r2, [pc, #68]	@ (80124e4 <pvPortMalloc+0x198>)
 801249e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80124a0:	f7fe fba4 	bl	8010bec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80124a4:	69fb      	ldr	r3, [r7, #28]
 80124a6:	f003 0307 	and.w	r3, r3, #7
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d00b      	beq.n	80124c6 <pvPortMalloc+0x17a>
	__asm volatile
 80124ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124b2:	f383 8811 	msr	BASEPRI, r3
 80124b6:	f3bf 8f6f 	isb	sy
 80124ba:	f3bf 8f4f 	dsb	sy
 80124be:	60fb      	str	r3, [r7, #12]
}
 80124c0:	bf00      	nop
 80124c2:	bf00      	nop
 80124c4:	e7fd      	b.n	80124c2 <pvPortMalloc+0x176>
	return pvReturn;
 80124c6:	69fb      	ldr	r3, [r7, #28]
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3728      	adds	r7, #40	@ 0x28
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	200161c0 	.word	0x200161c0
 80124d4:	200161d4 	.word	0x200161d4
 80124d8:	200161c4 	.word	0x200161c4
 80124dc:	200161b8 	.word	0x200161b8
 80124e0:	200161c8 	.word	0x200161c8
 80124e4:	200161cc 	.word	0x200161cc

080124e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b086      	sub	sp, #24
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d04f      	beq.n	801259a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80124fa:	2308      	movs	r3, #8
 80124fc:	425b      	negs	r3, r3
 80124fe:	697a      	ldr	r2, [r7, #20]
 8012500:	4413      	add	r3, r2
 8012502:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012504:	697b      	ldr	r3, [r7, #20]
 8012506:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	685a      	ldr	r2, [r3, #4]
 801250c:	4b25      	ldr	r3, [pc, #148]	@ (80125a4 <vPortFree+0xbc>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	4013      	ands	r3, r2
 8012512:	2b00      	cmp	r3, #0
 8012514:	d10b      	bne.n	801252e <vPortFree+0x46>
	__asm volatile
 8012516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801251a:	f383 8811 	msr	BASEPRI, r3
 801251e:	f3bf 8f6f 	isb	sy
 8012522:	f3bf 8f4f 	dsb	sy
 8012526:	60fb      	str	r3, [r7, #12]
}
 8012528:	bf00      	nop
 801252a:	bf00      	nop
 801252c:	e7fd      	b.n	801252a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801252e:	693b      	ldr	r3, [r7, #16]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d00b      	beq.n	801254e <vPortFree+0x66>
	__asm volatile
 8012536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801253a:	f383 8811 	msr	BASEPRI, r3
 801253e:	f3bf 8f6f 	isb	sy
 8012542:	f3bf 8f4f 	dsb	sy
 8012546:	60bb      	str	r3, [r7, #8]
}
 8012548:	bf00      	nop
 801254a:	bf00      	nop
 801254c:	e7fd      	b.n	801254a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801254e:	693b      	ldr	r3, [r7, #16]
 8012550:	685a      	ldr	r2, [r3, #4]
 8012552:	4b14      	ldr	r3, [pc, #80]	@ (80125a4 <vPortFree+0xbc>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	4013      	ands	r3, r2
 8012558:	2b00      	cmp	r3, #0
 801255a:	d01e      	beq.n	801259a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801255c:	693b      	ldr	r3, [r7, #16]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d11a      	bne.n	801259a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012564:	693b      	ldr	r3, [r7, #16]
 8012566:	685a      	ldr	r2, [r3, #4]
 8012568:	4b0e      	ldr	r3, [pc, #56]	@ (80125a4 <vPortFree+0xbc>)
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	43db      	mvns	r3, r3
 801256e:	401a      	ands	r2, r3
 8012570:	693b      	ldr	r3, [r7, #16]
 8012572:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012574:	f7fe fb2c 	bl	8010bd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012578:	693b      	ldr	r3, [r7, #16]
 801257a:	685a      	ldr	r2, [r3, #4]
 801257c:	4b0a      	ldr	r3, [pc, #40]	@ (80125a8 <vPortFree+0xc0>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	4413      	add	r3, r2
 8012582:	4a09      	ldr	r2, [pc, #36]	@ (80125a8 <vPortFree+0xc0>)
 8012584:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012586:	6938      	ldr	r0, [r7, #16]
 8012588:	f000 f874 	bl	8012674 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801258c:	4b07      	ldr	r3, [pc, #28]	@ (80125ac <vPortFree+0xc4>)
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	3301      	adds	r3, #1
 8012592:	4a06      	ldr	r2, [pc, #24]	@ (80125ac <vPortFree+0xc4>)
 8012594:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012596:	f7fe fb29 	bl	8010bec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801259a:	bf00      	nop
 801259c:	3718      	adds	r7, #24
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}
 80125a2:	bf00      	nop
 80125a4:	200161d4 	.word	0x200161d4
 80125a8:	200161c4 	.word	0x200161c4
 80125ac:	200161d0 	.word	0x200161d0

080125b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80125b0:	b480      	push	{r7}
 80125b2:	b085      	sub	sp, #20
 80125b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80125b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80125ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80125bc:	4b27      	ldr	r3, [pc, #156]	@ (801265c <prvHeapInit+0xac>)
 80125be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	f003 0307 	and.w	r3, r3, #7
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d00c      	beq.n	80125e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	3307      	adds	r3, #7
 80125ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	f023 0307 	bic.w	r3, r3, #7
 80125d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80125d8:	68ba      	ldr	r2, [r7, #8]
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	1ad3      	subs	r3, r2, r3
 80125de:	4a1f      	ldr	r2, [pc, #124]	@ (801265c <prvHeapInit+0xac>)
 80125e0:	4413      	add	r3, r2
 80125e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80125e8:	4a1d      	ldr	r2, [pc, #116]	@ (8012660 <prvHeapInit+0xb0>)
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80125ee:	4b1c      	ldr	r3, [pc, #112]	@ (8012660 <prvHeapInit+0xb0>)
 80125f0:	2200      	movs	r2, #0
 80125f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	68ba      	ldr	r2, [r7, #8]
 80125f8:	4413      	add	r3, r2
 80125fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80125fc:	2208      	movs	r2, #8
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	1a9b      	subs	r3, r3, r2
 8012602:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	f023 0307 	bic.w	r3, r3, #7
 801260a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	4a15      	ldr	r2, [pc, #84]	@ (8012664 <prvHeapInit+0xb4>)
 8012610:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012612:	4b14      	ldr	r3, [pc, #80]	@ (8012664 <prvHeapInit+0xb4>)
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	2200      	movs	r2, #0
 8012618:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801261a:	4b12      	ldr	r3, [pc, #72]	@ (8012664 <prvHeapInit+0xb4>)
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	2200      	movs	r2, #0
 8012620:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	68fa      	ldr	r2, [r7, #12]
 801262a:	1ad2      	subs	r2, r2, r3
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012630:	4b0c      	ldr	r3, [pc, #48]	@ (8012664 <prvHeapInit+0xb4>)
 8012632:	681a      	ldr	r2, [r3, #0]
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	685b      	ldr	r3, [r3, #4]
 801263c:	4a0a      	ldr	r2, [pc, #40]	@ (8012668 <prvHeapInit+0xb8>)
 801263e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	685b      	ldr	r3, [r3, #4]
 8012644:	4a09      	ldr	r2, [pc, #36]	@ (801266c <prvHeapInit+0xbc>)
 8012646:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012648:	4b09      	ldr	r3, [pc, #36]	@ (8012670 <prvHeapInit+0xc0>)
 801264a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801264e:	601a      	str	r2, [r3, #0]
}
 8012650:	bf00      	nop
 8012652:	3714      	adds	r7, #20
 8012654:	46bd      	mov	sp, r7
 8012656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265a:	4770      	bx	lr
 801265c:	200061b8 	.word	0x200061b8
 8012660:	200161b8 	.word	0x200161b8
 8012664:	200161c0 	.word	0x200161c0
 8012668:	200161c8 	.word	0x200161c8
 801266c:	200161c4 	.word	0x200161c4
 8012670:	200161d4 	.word	0x200161d4

08012674 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012674:	b480      	push	{r7}
 8012676:	b085      	sub	sp, #20
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801267c:	4b28      	ldr	r3, [pc, #160]	@ (8012720 <prvInsertBlockIntoFreeList+0xac>)
 801267e:	60fb      	str	r3, [r7, #12]
 8012680:	e002      	b.n	8012688 <prvInsertBlockIntoFreeList+0x14>
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	60fb      	str	r3, [r7, #12]
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	687a      	ldr	r2, [r7, #4]
 801268e:	429a      	cmp	r2, r3
 8012690:	d8f7      	bhi.n	8012682 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	685b      	ldr	r3, [r3, #4]
 801269a:	68ba      	ldr	r2, [r7, #8]
 801269c:	4413      	add	r3, r2
 801269e:	687a      	ldr	r2, [r7, #4]
 80126a0:	429a      	cmp	r2, r3
 80126a2:	d108      	bne.n	80126b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	685a      	ldr	r2, [r3, #4]
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	685b      	ldr	r3, [r3, #4]
 80126ac:	441a      	add	r2, r3
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	685b      	ldr	r3, [r3, #4]
 80126be:	68ba      	ldr	r2, [r7, #8]
 80126c0:	441a      	add	r2, r3
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	429a      	cmp	r2, r3
 80126c8:	d118      	bne.n	80126fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	681a      	ldr	r2, [r3, #0]
 80126ce:	4b15      	ldr	r3, [pc, #84]	@ (8012724 <prvInsertBlockIntoFreeList+0xb0>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	429a      	cmp	r2, r3
 80126d4:	d00d      	beq.n	80126f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	685a      	ldr	r2, [r3, #4]
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	685b      	ldr	r3, [r3, #4]
 80126e0:	441a      	add	r2, r3
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	681a      	ldr	r2, [r3, #0]
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	601a      	str	r2, [r3, #0]
 80126f0:	e008      	b.n	8012704 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80126f2:	4b0c      	ldr	r3, [pc, #48]	@ (8012724 <prvInsertBlockIntoFreeList+0xb0>)
 80126f4:	681a      	ldr	r2, [r3, #0]
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	601a      	str	r2, [r3, #0]
 80126fa:	e003      	b.n	8012704 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	681a      	ldr	r2, [r3, #0]
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012704:	68fa      	ldr	r2, [r7, #12]
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	429a      	cmp	r2, r3
 801270a:	d002      	beq.n	8012712 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	687a      	ldr	r2, [r7, #4]
 8012710:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012712:	bf00      	nop
 8012714:	3714      	adds	r7, #20
 8012716:	46bd      	mov	sp, r7
 8012718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271c:	4770      	bx	lr
 801271e:	bf00      	nop
 8012720:	200161b8 	.word	0x200161b8
 8012724:	200161c0 	.word	0x200161c0

08012728 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801272c:	2200      	movs	r2, #0
 801272e:	4912      	ldr	r1, [pc, #72]	@ (8012778 <MX_USB_Device_Init+0x50>)
 8012730:	4812      	ldr	r0, [pc, #72]	@ (801277c <MX_USB_Device_Init+0x54>)
 8012732:	f7fb f8fd 	bl	800d930 <USBD_Init>
 8012736:	4603      	mov	r3, r0
 8012738:	2b00      	cmp	r3, #0
 801273a:	d001      	beq.n	8012740 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801273c:	f7f2 fb84 	bl	8004e48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8012740:	490f      	ldr	r1, [pc, #60]	@ (8012780 <MX_USB_Device_Init+0x58>)
 8012742:	480e      	ldr	r0, [pc, #56]	@ (801277c <MX_USB_Device_Init+0x54>)
 8012744:	f7fb f924 	bl	800d990 <USBD_RegisterClass>
 8012748:	4603      	mov	r3, r0
 801274a:	2b00      	cmp	r3, #0
 801274c:	d001      	beq.n	8012752 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801274e:	f7f2 fb7b 	bl	8004e48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8012752:	490c      	ldr	r1, [pc, #48]	@ (8012784 <MX_USB_Device_Init+0x5c>)
 8012754:	4809      	ldr	r0, [pc, #36]	@ (801277c <MX_USB_Device_Init+0x54>)
 8012756:	f7fb f845 	bl	800d7e4 <USBD_CDC_RegisterInterface>
 801275a:	4603      	mov	r3, r0
 801275c:	2b00      	cmp	r3, #0
 801275e:	d001      	beq.n	8012764 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8012760:	f7f2 fb72 	bl	8004e48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8012764:	4805      	ldr	r0, [pc, #20]	@ (801277c <MX_USB_Device_Init+0x54>)
 8012766:	f7fb f93a 	bl	800d9de <USBD_Start>
 801276a:	4603      	mov	r3, r0
 801276c:	2b00      	cmp	r3, #0
 801276e:	d001      	beq.n	8012774 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8012770:	f7f2 fb6a 	bl	8004e48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8012774:	bf00      	nop
 8012776:	bd80      	pop	{r7, pc}
 8012778:	20000140 	.word	0x20000140
 801277c:	200161d8 	.word	0x200161d8
 8012780:	20000024 	.word	0x20000024
 8012784:	2000012c 	.word	0x2000012c

08012788 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801278c:	2200      	movs	r2, #0
 801278e:	4905      	ldr	r1, [pc, #20]	@ (80127a4 <CDC_Init_FS+0x1c>)
 8012790:	4805      	ldr	r0, [pc, #20]	@ (80127a8 <CDC_Init_FS+0x20>)
 8012792:	f7fb f83c 	bl	800d80e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012796:	4905      	ldr	r1, [pc, #20]	@ (80127ac <CDC_Init_FS+0x24>)
 8012798:	4803      	ldr	r0, [pc, #12]	@ (80127a8 <CDC_Init_FS+0x20>)
 801279a:	f7fb f856 	bl	800d84a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801279e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80127a0:	4618      	mov	r0, r3
 80127a2:	bd80      	pop	{r7, pc}
 80127a4:	20016ca8 	.word	0x20016ca8
 80127a8:	200161d8 	.word	0x200161d8
 80127ac:	200164a8 	.word	0x200164a8

080127b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80127b0:	b480      	push	{r7}
 80127b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80127b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80127b6:	4618      	mov	r0, r3
 80127b8:	46bd      	mov	sp, r7
 80127ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127be:	4770      	bx	lr

080127c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80127c0:	b480      	push	{r7}
 80127c2:	b083      	sub	sp, #12
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	4603      	mov	r3, r0
 80127c8:	6039      	str	r1, [r7, #0]
 80127ca:	71fb      	strb	r3, [r7, #7]
 80127cc:	4613      	mov	r3, r2
 80127ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80127d0:	79fb      	ldrb	r3, [r7, #7]
 80127d2:	2b23      	cmp	r3, #35	@ 0x23
 80127d4:	d84a      	bhi.n	801286c <CDC_Control_FS+0xac>
 80127d6:	a201      	add	r2, pc, #4	@ (adr r2, 80127dc <CDC_Control_FS+0x1c>)
 80127d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127dc:	0801286d 	.word	0x0801286d
 80127e0:	0801286d 	.word	0x0801286d
 80127e4:	0801286d 	.word	0x0801286d
 80127e8:	0801286d 	.word	0x0801286d
 80127ec:	0801286d 	.word	0x0801286d
 80127f0:	0801286d 	.word	0x0801286d
 80127f4:	0801286d 	.word	0x0801286d
 80127f8:	0801286d 	.word	0x0801286d
 80127fc:	0801286d 	.word	0x0801286d
 8012800:	0801286d 	.word	0x0801286d
 8012804:	0801286d 	.word	0x0801286d
 8012808:	0801286d 	.word	0x0801286d
 801280c:	0801286d 	.word	0x0801286d
 8012810:	0801286d 	.word	0x0801286d
 8012814:	0801286d 	.word	0x0801286d
 8012818:	0801286d 	.word	0x0801286d
 801281c:	0801286d 	.word	0x0801286d
 8012820:	0801286d 	.word	0x0801286d
 8012824:	0801286d 	.word	0x0801286d
 8012828:	0801286d 	.word	0x0801286d
 801282c:	0801286d 	.word	0x0801286d
 8012830:	0801286d 	.word	0x0801286d
 8012834:	0801286d 	.word	0x0801286d
 8012838:	0801286d 	.word	0x0801286d
 801283c:	0801286d 	.word	0x0801286d
 8012840:	0801286d 	.word	0x0801286d
 8012844:	0801286d 	.word	0x0801286d
 8012848:	0801286d 	.word	0x0801286d
 801284c:	0801286d 	.word	0x0801286d
 8012850:	0801286d 	.word	0x0801286d
 8012854:	0801286d 	.word	0x0801286d
 8012858:	0801286d 	.word	0x0801286d
 801285c:	0801286d 	.word	0x0801286d
 8012860:	0801286d 	.word	0x0801286d
 8012864:	0801286d 	.word	0x0801286d
 8012868:	0801286d 	.word	0x0801286d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801286c:	bf00      	nop
  }

  return (USBD_OK);
 801286e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012870:	4618      	mov	r0, r3
 8012872:	370c      	adds	r7, #12
 8012874:	46bd      	mov	sp, r7
 8012876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287a:	4770      	bx	lr

0801287c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b082      	sub	sp, #8
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012886:	6879      	ldr	r1, [r7, #4]
 8012888:	4805      	ldr	r0, [pc, #20]	@ (80128a0 <CDC_Receive_FS+0x24>)
 801288a:	f7fa ffde 	bl	800d84a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801288e:	4804      	ldr	r0, [pc, #16]	@ (80128a0 <CDC_Receive_FS+0x24>)
 8012890:	f7fb f824 	bl	800d8dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012894:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012896:	4618      	mov	r0, r3
 8012898:	3708      	adds	r7, #8
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}
 801289e:	bf00      	nop
 80128a0:	200161d8 	.word	0x200161d8

080128a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b084      	sub	sp, #16
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
 80128ac:	460b      	mov	r3, r1
 80128ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80128b0:	2300      	movs	r3, #0
 80128b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80128b4:	4b0d      	ldr	r3, [pc, #52]	@ (80128ec <CDC_Transmit_FS+0x48>)
 80128b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80128ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80128bc:	68bb      	ldr	r3, [r7, #8]
 80128be:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d001      	beq.n	80128ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80128c6:	2301      	movs	r3, #1
 80128c8:	e00b      	b.n	80128e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80128ca:	887b      	ldrh	r3, [r7, #2]
 80128cc:	461a      	mov	r2, r3
 80128ce:	6879      	ldr	r1, [r7, #4]
 80128d0:	4806      	ldr	r0, [pc, #24]	@ (80128ec <CDC_Transmit_FS+0x48>)
 80128d2:	f7fa ff9c 	bl	800d80e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80128d6:	4805      	ldr	r0, [pc, #20]	@ (80128ec <CDC_Transmit_FS+0x48>)
 80128d8:	f7fa ffd0 	bl	800d87c <USBD_CDC_TransmitPacket>
 80128dc:	4603      	mov	r3, r0
 80128de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80128e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80128e2:	4618      	mov	r0, r3
 80128e4:	3710      	adds	r7, #16
 80128e6:	46bd      	mov	sp, r7
 80128e8:	bd80      	pop	{r7, pc}
 80128ea:	bf00      	nop
 80128ec:	200161d8 	.word	0x200161d8

080128f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80128f0:	b480      	push	{r7}
 80128f2:	b087      	sub	sp, #28
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	60f8      	str	r0, [r7, #12]
 80128f8:	60b9      	str	r1, [r7, #8]
 80128fa:	4613      	mov	r3, r2
 80128fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80128fe:	2300      	movs	r3, #0
 8012900:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012902:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012906:	4618      	mov	r0, r3
 8012908:	371c      	adds	r7, #28
 801290a:	46bd      	mov	sp, r7
 801290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012910:	4770      	bx	lr
	...

08012914 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012914:	b480      	push	{r7}
 8012916:	b083      	sub	sp, #12
 8012918:	af00      	add	r7, sp, #0
 801291a:	4603      	mov	r3, r0
 801291c:	6039      	str	r1, [r7, #0]
 801291e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	2212      	movs	r2, #18
 8012924:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8012926:	4b03      	ldr	r3, [pc, #12]	@ (8012934 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8012928:	4618      	mov	r0, r3
 801292a:	370c      	adds	r7, #12
 801292c:	46bd      	mov	sp, r7
 801292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012932:	4770      	bx	lr
 8012934:	20000160 	.word	0x20000160

08012938 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012938:	b480      	push	{r7}
 801293a:	b083      	sub	sp, #12
 801293c:	af00      	add	r7, sp, #0
 801293e:	4603      	mov	r3, r0
 8012940:	6039      	str	r1, [r7, #0]
 8012942:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	2204      	movs	r2, #4
 8012948:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801294a:	4b03      	ldr	r3, [pc, #12]	@ (8012958 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801294c:	4618      	mov	r0, r3
 801294e:	370c      	adds	r7, #12
 8012950:	46bd      	mov	sp, r7
 8012952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012956:	4770      	bx	lr
 8012958:	20000174 	.word	0x20000174

0801295c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801295c:	b580      	push	{r7, lr}
 801295e:	b082      	sub	sp, #8
 8012960:	af00      	add	r7, sp, #0
 8012962:	4603      	mov	r3, r0
 8012964:	6039      	str	r1, [r7, #0]
 8012966:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012968:	79fb      	ldrb	r3, [r7, #7]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d105      	bne.n	801297a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801296e:	683a      	ldr	r2, [r7, #0]
 8012970:	4907      	ldr	r1, [pc, #28]	@ (8012990 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012972:	4808      	ldr	r0, [pc, #32]	@ (8012994 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012974:	f7fc f81b 	bl	800e9ae <USBD_GetString>
 8012978:	e004      	b.n	8012984 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801297a:	683a      	ldr	r2, [r7, #0]
 801297c:	4904      	ldr	r1, [pc, #16]	@ (8012990 <USBD_CDC_ProductStrDescriptor+0x34>)
 801297e:	4805      	ldr	r0, [pc, #20]	@ (8012994 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012980:	f7fc f815 	bl	800e9ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8012984:	4b02      	ldr	r3, [pc, #8]	@ (8012990 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8012986:	4618      	mov	r0, r3
 8012988:	3708      	adds	r7, #8
 801298a:	46bd      	mov	sp, r7
 801298c:	bd80      	pop	{r7, pc}
 801298e:	bf00      	nop
 8012990:	200174a8 	.word	0x200174a8
 8012994:	08022418 	.word	0x08022418

08012998 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b082      	sub	sp, #8
 801299c:	af00      	add	r7, sp, #0
 801299e:	4603      	mov	r3, r0
 80129a0:	6039      	str	r1, [r7, #0]
 80129a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80129a4:	683a      	ldr	r2, [r7, #0]
 80129a6:	4904      	ldr	r1, [pc, #16]	@ (80129b8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80129a8:	4804      	ldr	r0, [pc, #16]	@ (80129bc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80129aa:	f7fc f800 	bl	800e9ae <USBD_GetString>
  return USBD_StrDesc;
 80129ae:	4b02      	ldr	r3, [pc, #8]	@ (80129b8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80129b0:	4618      	mov	r0, r3
 80129b2:	3708      	adds	r7, #8
 80129b4:	46bd      	mov	sp, r7
 80129b6:	bd80      	pop	{r7, pc}
 80129b8:	200174a8 	.word	0x200174a8
 80129bc:	08022434 	.word	0x08022434

080129c0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b082      	sub	sp, #8
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	4603      	mov	r3, r0
 80129c8:	6039      	str	r1, [r7, #0]
 80129ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	221a      	movs	r2, #26
 80129d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80129d2:	f000 f843 	bl	8012a5c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80129d6:	4b02      	ldr	r3, [pc, #8]	@ (80129e0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80129d8:	4618      	mov	r0, r3
 80129da:	3708      	adds	r7, #8
 80129dc:	46bd      	mov	sp, r7
 80129de:	bd80      	pop	{r7, pc}
 80129e0:	20000178 	.word	0x20000178

080129e4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80129e4:	b580      	push	{r7, lr}
 80129e6:	b082      	sub	sp, #8
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	4603      	mov	r3, r0
 80129ec:	6039      	str	r1, [r7, #0]
 80129ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80129f0:	79fb      	ldrb	r3, [r7, #7]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d105      	bne.n	8012a02 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80129f6:	683a      	ldr	r2, [r7, #0]
 80129f8:	4907      	ldr	r1, [pc, #28]	@ (8012a18 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80129fa:	4808      	ldr	r0, [pc, #32]	@ (8012a1c <USBD_CDC_ConfigStrDescriptor+0x38>)
 80129fc:	f7fb ffd7 	bl	800e9ae <USBD_GetString>
 8012a00:	e004      	b.n	8012a0c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012a02:	683a      	ldr	r2, [r7, #0]
 8012a04:	4904      	ldr	r1, [pc, #16]	@ (8012a18 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012a06:	4805      	ldr	r0, [pc, #20]	@ (8012a1c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012a08:	f7fb ffd1 	bl	800e9ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8012a0c:	4b02      	ldr	r3, [pc, #8]	@ (8012a18 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8012a0e:	4618      	mov	r0, r3
 8012a10:	3708      	adds	r7, #8
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd80      	pop	{r7, pc}
 8012a16:	bf00      	nop
 8012a18:	200174a8 	.word	0x200174a8
 8012a1c:	08022448 	.word	0x08022448

08012a20 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b082      	sub	sp, #8
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	4603      	mov	r3, r0
 8012a28:	6039      	str	r1, [r7, #0]
 8012a2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012a2c:	79fb      	ldrb	r3, [r7, #7]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d105      	bne.n	8012a3e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012a32:	683a      	ldr	r2, [r7, #0]
 8012a34:	4907      	ldr	r1, [pc, #28]	@ (8012a54 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012a36:	4808      	ldr	r0, [pc, #32]	@ (8012a58 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012a38:	f7fb ffb9 	bl	800e9ae <USBD_GetString>
 8012a3c:	e004      	b.n	8012a48 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012a3e:	683a      	ldr	r2, [r7, #0]
 8012a40:	4904      	ldr	r1, [pc, #16]	@ (8012a54 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012a42:	4805      	ldr	r0, [pc, #20]	@ (8012a58 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012a44:	f7fb ffb3 	bl	800e9ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8012a48:	4b02      	ldr	r3, [pc, #8]	@ (8012a54 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	3708      	adds	r7, #8
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd80      	pop	{r7, pc}
 8012a52:	bf00      	nop
 8012a54:	200174a8 	.word	0x200174a8
 8012a58:	08022454 	.word	0x08022454

08012a5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b084      	sub	sp, #16
 8012a60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012a62:	4b0f      	ldr	r3, [pc, #60]	@ (8012aa0 <Get_SerialNum+0x44>)
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012a68:	4b0e      	ldr	r3, [pc, #56]	@ (8012aa4 <Get_SerialNum+0x48>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8012aa8 <Get_SerialNum+0x4c>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012a74:	68fa      	ldr	r2, [r7, #12]
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	4413      	add	r3, r2
 8012a7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d009      	beq.n	8012a96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012a82:	2208      	movs	r2, #8
 8012a84:	4909      	ldr	r1, [pc, #36]	@ (8012aac <Get_SerialNum+0x50>)
 8012a86:	68f8      	ldr	r0, [r7, #12]
 8012a88:	f000 f814 	bl	8012ab4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012a8c:	2204      	movs	r2, #4
 8012a8e:	4908      	ldr	r1, [pc, #32]	@ (8012ab0 <Get_SerialNum+0x54>)
 8012a90:	68b8      	ldr	r0, [r7, #8]
 8012a92:	f000 f80f 	bl	8012ab4 <IntToUnicode>
  }
}
 8012a96:	bf00      	nop
 8012a98:	3710      	adds	r7, #16
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}
 8012a9e:	bf00      	nop
 8012aa0:	1fff7590 	.word	0x1fff7590
 8012aa4:	1fff7594 	.word	0x1fff7594
 8012aa8:	1fff7598 	.word	0x1fff7598
 8012aac:	2000017a 	.word	0x2000017a
 8012ab0:	2000018a 	.word	0x2000018a

08012ab4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012ab4:	b480      	push	{r7}
 8012ab6:	b087      	sub	sp, #28
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	60f8      	str	r0, [r7, #12]
 8012abc:	60b9      	str	r1, [r7, #8]
 8012abe:	4613      	mov	r3, r2
 8012ac0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	75fb      	strb	r3, [r7, #23]
 8012aca:	e027      	b.n	8012b1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	0f1b      	lsrs	r3, r3, #28
 8012ad0:	2b09      	cmp	r3, #9
 8012ad2:	d80b      	bhi.n	8012aec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	0f1b      	lsrs	r3, r3, #28
 8012ad8:	b2da      	uxtb	r2, r3
 8012ada:	7dfb      	ldrb	r3, [r7, #23]
 8012adc:	005b      	lsls	r3, r3, #1
 8012ade:	4619      	mov	r1, r3
 8012ae0:	68bb      	ldr	r3, [r7, #8]
 8012ae2:	440b      	add	r3, r1
 8012ae4:	3230      	adds	r2, #48	@ 0x30
 8012ae6:	b2d2      	uxtb	r2, r2
 8012ae8:	701a      	strb	r2, [r3, #0]
 8012aea:	e00a      	b.n	8012b02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	0f1b      	lsrs	r3, r3, #28
 8012af0:	b2da      	uxtb	r2, r3
 8012af2:	7dfb      	ldrb	r3, [r7, #23]
 8012af4:	005b      	lsls	r3, r3, #1
 8012af6:	4619      	mov	r1, r3
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	440b      	add	r3, r1
 8012afc:	3237      	adds	r2, #55	@ 0x37
 8012afe:	b2d2      	uxtb	r2, r2
 8012b00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	011b      	lsls	r3, r3, #4
 8012b06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012b08:	7dfb      	ldrb	r3, [r7, #23]
 8012b0a:	005b      	lsls	r3, r3, #1
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	68ba      	ldr	r2, [r7, #8]
 8012b10:	4413      	add	r3, r2
 8012b12:	2200      	movs	r2, #0
 8012b14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012b16:	7dfb      	ldrb	r3, [r7, #23]
 8012b18:	3301      	adds	r3, #1
 8012b1a:	75fb      	strb	r3, [r7, #23]
 8012b1c:	7dfa      	ldrb	r2, [r7, #23]
 8012b1e:	79fb      	ldrb	r3, [r7, #7]
 8012b20:	429a      	cmp	r2, r3
 8012b22:	d3d3      	bcc.n	8012acc <IntToUnicode+0x18>
  }
}
 8012b24:	bf00      	nop
 8012b26:	bf00      	nop
 8012b28:	371c      	adds	r7, #28
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b30:	4770      	bx	lr
	...

08012b34 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b098      	sub	sp, #96	@ 0x60
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012b3c:	f107 030c 	add.w	r3, r7, #12
 8012b40:	2254      	movs	r2, #84	@ 0x54
 8012b42:	2100      	movs	r1, #0
 8012b44:	4618      	mov	r0, r3
 8012b46:	f00d f85e 	bl	801fc06 <memset>
  if(pcdHandle->Instance==USB)
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	4a15      	ldr	r2, [pc, #84]	@ (8012ba4 <HAL_PCD_MspInit+0x70>)
 8012b50:	4293      	cmp	r3, r2
 8012b52:	d122      	bne.n	8012b9a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012b54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012b58:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012b5e:	f107 030c 	add.w	r3, r7, #12
 8012b62:	4618      	mov	r0, r3
 8012b64:	f7f6 fb88 	bl	8009278 <HAL_RCCEx_PeriphCLKConfig>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d001      	beq.n	8012b72 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8012b6e:	f7f2 f96b 	bl	8004e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012b72:	4b0d      	ldr	r3, [pc, #52]	@ (8012ba8 <HAL_PCD_MspInit+0x74>)
 8012b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b76:	4a0c      	ldr	r2, [pc, #48]	@ (8012ba8 <HAL_PCD_MspInit+0x74>)
 8012b78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8012b7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8012b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8012ba8 <HAL_PCD_MspInit+0x74>)
 8012b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012b86:	60bb      	str	r3, [r7, #8]
 8012b88:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	2105      	movs	r1, #5
 8012b8e:	2014      	movs	r0, #20
 8012b90:	f7f2 fdac 	bl	80056ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8012b94:	2014      	movs	r0, #20
 8012b96:	f7f2 fdc3 	bl	8005720 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8012b9a:	bf00      	nop
 8012b9c:	3760      	adds	r7, #96	@ 0x60
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bd80      	pop	{r7, pc}
 8012ba2:	bf00      	nop
 8012ba4:	40005c00 	.word	0x40005c00
 8012ba8:	40021000 	.word	0x40021000

08012bac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b082      	sub	sp, #8
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8012bc0:	4619      	mov	r1, r3
 8012bc2:	4610      	mov	r0, r2
 8012bc4:	f7fa ff56 	bl	800da74 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8012bc8:	bf00      	nop
 8012bca:	3708      	adds	r7, #8
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd80      	pop	{r7, pc}

08012bd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b082      	sub	sp, #8
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
 8012bd8:	460b      	mov	r3, r1
 8012bda:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8012be2:	78fa      	ldrb	r2, [r7, #3]
 8012be4:	6879      	ldr	r1, [r7, #4]
 8012be6:	4613      	mov	r3, r2
 8012be8:	009b      	lsls	r3, r3, #2
 8012bea:	4413      	add	r3, r2
 8012bec:	00db      	lsls	r3, r3, #3
 8012bee:	440b      	add	r3, r1
 8012bf0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012bf4:	681a      	ldr	r2, [r3, #0]
 8012bf6:	78fb      	ldrb	r3, [r7, #3]
 8012bf8:	4619      	mov	r1, r3
 8012bfa:	f7fa ff90 	bl	800db1e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8012bfe:	bf00      	nop
 8012c00:	3708      	adds	r7, #8
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}

08012c06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c06:	b580      	push	{r7, lr}
 8012c08:	b082      	sub	sp, #8
 8012c0a:	af00      	add	r7, sp, #0
 8012c0c:	6078      	str	r0, [r7, #4]
 8012c0e:	460b      	mov	r3, r1
 8012c10:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8012c18:	78fa      	ldrb	r2, [r7, #3]
 8012c1a:	6879      	ldr	r1, [r7, #4]
 8012c1c:	4613      	mov	r3, r2
 8012c1e:	009b      	lsls	r3, r3, #2
 8012c20:	4413      	add	r3, r2
 8012c22:	00db      	lsls	r3, r3, #3
 8012c24:	440b      	add	r3, r1
 8012c26:	3324      	adds	r3, #36	@ 0x24
 8012c28:	681a      	ldr	r2, [r3, #0]
 8012c2a:	78fb      	ldrb	r3, [r7, #3]
 8012c2c:	4619      	mov	r1, r3
 8012c2e:	f7fa ffd9 	bl	800dbe4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8012c32:	bf00      	nop
 8012c34:	3708      	adds	r7, #8
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}

08012c3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c3a:	b580      	push	{r7, lr}
 8012c3c:	b082      	sub	sp, #8
 8012c3e:	af00      	add	r7, sp, #0
 8012c40:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f7fb f8ed 	bl	800de28 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8012c4e:	bf00      	nop
 8012c50:	3708      	adds	r7, #8
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}

08012c56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c56:	b580      	push	{r7, lr}
 8012c58:	b084      	sub	sp, #16
 8012c5a:	af00      	add	r7, sp, #0
 8012c5c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012c5e:	2301      	movs	r3, #1
 8012c60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	795b      	ldrb	r3, [r3, #5]
 8012c66:	2b02      	cmp	r3, #2
 8012c68:	d001      	beq.n	8012c6e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012c6a:	f7f2 f8ed 	bl	8004e48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012c74:	7bfa      	ldrb	r2, [r7, #15]
 8012c76:	4611      	mov	r1, r2
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f7fb f897 	bl	800ddac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012c84:	4618      	mov	r0, r3
 8012c86:	f7fb f843 	bl	800dd10 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8012c8a:	bf00      	nop
 8012c8c:	3710      	adds	r7, #16
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	bd80      	pop	{r7, pc}
	...

08012c94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b082      	sub	sp, #8
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f7fb f892 	bl	800ddcc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	7a5b      	ldrb	r3, [r3, #9]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d005      	beq.n	8012cbc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012cb0:	4b04      	ldr	r3, [pc, #16]	@ (8012cc4 <HAL_PCD_SuspendCallback+0x30>)
 8012cb2:	691b      	ldr	r3, [r3, #16]
 8012cb4:	4a03      	ldr	r2, [pc, #12]	@ (8012cc4 <HAL_PCD_SuspendCallback+0x30>)
 8012cb6:	f043 0306 	orr.w	r3, r3, #6
 8012cba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8012cbc:	bf00      	nop
 8012cbe:	3708      	adds	r7, #8
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	bd80      	pop	{r7, pc}
 8012cc4:	e000ed00 	.word	0xe000ed00

08012cc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b082      	sub	sp, #8
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	7a5b      	ldrb	r3, [r3, #9]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d007      	beq.n	8012ce8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012cd8:	4b08      	ldr	r3, [pc, #32]	@ (8012cfc <HAL_PCD_ResumeCallback+0x34>)
 8012cda:	691b      	ldr	r3, [r3, #16]
 8012cdc:	4a07      	ldr	r2, [pc, #28]	@ (8012cfc <HAL_PCD_ResumeCallback+0x34>)
 8012cde:	f023 0306 	bic.w	r3, r3, #6
 8012ce2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8012ce4:	f000 f9f8 	bl	80130d8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012cee:	4618      	mov	r0, r3
 8012cf0:	f7fb f882 	bl	800ddf8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8012cf4:	bf00      	nop
 8012cf6:	3708      	adds	r7, #8
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	e000ed00 	.word	0xe000ed00

08012d00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8012d08:	4a2b      	ldr	r2, [pc, #172]	@ (8012db8 <USBD_LL_Init+0xb8>)
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	4a29      	ldr	r2, [pc, #164]	@ (8012db8 <USBD_LL_Init+0xb8>)
 8012d14:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8012d18:	4b27      	ldr	r3, [pc, #156]	@ (8012db8 <USBD_LL_Init+0xb8>)
 8012d1a:	4a28      	ldr	r2, [pc, #160]	@ (8012dbc <USBD_LL_Init+0xbc>)
 8012d1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8012d1e:	4b26      	ldr	r3, [pc, #152]	@ (8012db8 <USBD_LL_Init+0xb8>)
 8012d20:	2208      	movs	r2, #8
 8012d22:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8012d24:	4b24      	ldr	r3, [pc, #144]	@ (8012db8 <USBD_LL_Init+0xb8>)
 8012d26:	2202      	movs	r2, #2
 8012d28:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012d2a:	4b23      	ldr	r3, [pc, #140]	@ (8012db8 <USBD_LL_Init+0xb8>)
 8012d2c:	2202      	movs	r2, #2
 8012d2e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8012d30:	4b21      	ldr	r3, [pc, #132]	@ (8012db8 <USBD_LL_Init+0xb8>)
 8012d32:	2200      	movs	r2, #0
 8012d34:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8012d36:	4b20      	ldr	r3, [pc, #128]	@ (8012db8 <USBD_LL_Init+0xb8>)
 8012d38:	2200      	movs	r2, #0
 8012d3a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8012d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8012db8 <USBD_LL_Init+0xb8>)
 8012d3e:	2200      	movs	r2, #0
 8012d40:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8012d42:	4b1d      	ldr	r3, [pc, #116]	@ (8012db8 <USBD_LL_Init+0xb8>)
 8012d44:	2200      	movs	r2, #0
 8012d46:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012d48:	481b      	ldr	r0, [pc, #108]	@ (8012db8 <USBD_LL_Init+0xb8>)
 8012d4a:	f7f3 ff84 	bl	8006c56 <HAL_PCD_Init>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d001      	beq.n	8012d58 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8012d54:	f7f2 f878 	bl	8004e48 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012d5e:	2318      	movs	r3, #24
 8012d60:	2200      	movs	r2, #0
 8012d62:	2100      	movs	r1, #0
 8012d64:	f7f5 fc0b 	bl	800857e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012d6e:	2358      	movs	r3, #88	@ 0x58
 8012d70:	2200      	movs	r2, #0
 8012d72:	2180      	movs	r1, #128	@ 0x80
 8012d74:	f7f5 fc03 	bl	800857e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012d7e:	23c0      	movs	r3, #192	@ 0xc0
 8012d80:	2200      	movs	r2, #0
 8012d82:	2181      	movs	r1, #129	@ 0x81
 8012d84:	f7f5 fbfb 	bl	800857e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012d8e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8012d92:	2200      	movs	r2, #0
 8012d94:	2101      	movs	r1, #1
 8012d96:	f7f5 fbf2 	bl	800857e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012da0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012da4:	2200      	movs	r2, #0
 8012da6:	2182      	movs	r1, #130	@ 0x82
 8012da8:	f7f5 fbe9 	bl	800857e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8012dac:	2300      	movs	r3, #0
}
 8012dae:	4618      	mov	r0, r3
 8012db0:	3708      	adds	r7, #8
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd80      	pop	{r7, pc}
 8012db6:	bf00      	nop
 8012db8:	200176a8 	.word	0x200176a8
 8012dbc:	40005c00 	.word	0x40005c00

08012dc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b084      	sub	sp, #16
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012dc8:	2300      	movs	r3, #0
 8012dca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	f7f4 f80b 	bl	8006df2 <HAL_PCD_Start>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012de0:	7bfb      	ldrb	r3, [r7, #15]
 8012de2:	4618      	mov	r0, r3
 8012de4:	f000 f97e 	bl	80130e4 <USBD_Get_USB_Status>
 8012de8:	4603      	mov	r3, r0
 8012dea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012dec:	7bbb      	ldrb	r3, [r7, #14]
}
 8012dee:	4618      	mov	r0, r3
 8012df0:	3710      	adds	r7, #16
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}

08012df6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012df6:	b580      	push	{r7, lr}
 8012df8:	b084      	sub	sp, #16
 8012dfa:	af00      	add	r7, sp, #0
 8012dfc:	6078      	str	r0, [r7, #4]
 8012dfe:	4608      	mov	r0, r1
 8012e00:	4611      	mov	r1, r2
 8012e02:	461a      	mov	r2, r3
 8012e04:	4603      	mov	r3, r0
 8012e06:	70fb      	strb	r3, [r7, #3]
 8012e08:	460b      	mov	r3, r1
 8012e0a:	70bb      	strb	r3, [r7, #2]
 8012e0c:	4613      	mov	r3, r2
 8012e0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e10:	2300      	movs	r3, #0
 8012e12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e14:	2300      	movs	r3, #0
 8012e16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012e1e:	78bb      	ldrb	r3, [r7, #2]
 8012e20:	883a      	ldrh	r2, [r7, #0]
 8012e22:	78f9      	ldrb	r1, [r7, #3]
 8012e24:	f7f4 f952 	bl	80070cc <HAL_PCD_EP_Open>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e2c:	7bfb      	ldrb	r3, [r7, #15]
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f000 f958 	bl	80130e4 <USBD_Get_USB_Status>
 8012e34:	4603      	mov	r3, r0
 8012e36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012e38:	7bbb      	ldrb	r3, [r7, #14]
}
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	3710      	adds	r7, #16
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}

08012e42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012e42:	b580      	push	{r7, lr}
 8012e44:	b084      	sub	sp, #16
 8012e46:	af00      	add	r7, sp, #0
 8012e48:	6078      	str	r0, [r7, #4]
 8012e4a:	460b      	mov	r3, r1
 8012e4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e4e:	2300      	movs	r3, #0
 8012e50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e52:	2300      	movs	r3, #0
 8012e54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012e5c:	78fa      	ldrb	r2, [r7, #3]
 8012e5e:	4611      	mov	r1, r2
 8012e60:	4618      	mov	r0, r3
 8012e62:	f7f4 f992 	bl	800718a <HAL_PCD_EP_Close>
 8012e66:	4603      	mov	r3, r0
 8012e68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e6a:	7bfb      	ldrb	r3, [r7, #15]
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f000 f939 	bl	80130e4 <USBD_Get_USB_Status>
 8012e72:	4603      	mov	r3, r0
 8012e74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012e76:	7bbb      	ldrb	r3, [r7, #14]
}
 8012e78:	4618      	mov	r0, r3
 8012e7a:	3710      	adds	r7, #16
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	bd80      	pop	{r7, pc}

08012e80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b084      	sub	sp, #16
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
 8012e88:	460b      	mov	r3, r1
 8012e8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e90:	2300      	movs	r3, #0
 8012e92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012e9a:	78fa      	ldrb	r2, [r7, #3]
 8012e9c:	4611      	mov	r1, r2
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f7f4 fa3b 	bl	800731a <HAL_PCD_EP_SetStall>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ea8:	7bfb      	ldrb	r3, [r7, #15]
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f000 f91a 	bl	80130e4 <USBD_Get_USB_Status>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	3710      	adds	r7, #16
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}

08012ebe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ebe:	b580      	push	{r7, lr}
 8012ec0:	b084      	sub	sp, #16
 8012ec2:	af00      	add	r7, sp, #0
 8012ec4:	6078      	str	r0, [r7, #4]
 8012ec6:	460b      	mov	r3, r1
 8012ec8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012eca:	2300      	movs	r3, #0
 8012ecc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012ed8:	78fa      	ldrb	r2, [r7, #3]
 8012eda:	4611      	mov	r1, r2
 8012edc:	4618      	mov	r0, r3
 8012ede:	f7f4 fa6e 	bl	80073be <HAL_PCD_EP_ClrStall>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ee6:	7bfb      	ldrb	r3, [r7, #15]
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f000 f8fb 	bl	80130e4 <USBD_Get_USB_Status>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012ef2:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	3710      	adds	r7, #16
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bd80      	pop	{r7, pc}

08012efc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012efc:	b480      	push	{r7}
 8012efe:	b085      	sub	sp, #20
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
 8012f04:	460b      	mov	r3, r1
 8012f06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012f0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012f10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	da0b      	bge.n	8012f30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012f18:	78fb      	ldrb	r3, [r7, #3]
 8012f1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012f1e:	68f9      	ldr	r1, [r7, #12]
 8012f20:	4613      	mov	r3, r2
 8012f22:	009b      	lsls	r3, r3, #2
 8012f24:	4413      	add	r3, r2
 8012f26:	00db      	lsls	r3, r3, #3
 8012f28:	440b      	add	r3, r1
 8012f2a:	3312      	adds	r3, #18
 8012f2c:	781b      	ldrb	r3, [r3, #0]
 8012f2e:	e00b      	b.n	8012f48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012f30:	78fb      	ldrb	r3, [r7, #3]
 8012f32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012f36:	68f9      	ldr	r1, [r7, #12]
 8012f38:	4613      	mov	r3, r2
 8012f3a:	009b      	lsls	r3, r3, #2
 8012f3c:	4413      	add	r3, r2
 8012f3e:	00db      	lsls	r3, r3, #3
 8012f40:	440b      	add	r3, r1
 8012f42:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8012f46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012f48:	4618      	mov	r0, r3
 8012f4a:	3714      	adds	r7, #20
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f52:	4770      	bx	lr

08012f54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b084      	sub	sp, #16
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
 8012f5c:	460b      	mov	r3, r1
 8012f5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f60:	2300      	movs	r3, #0
 8012f62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f64:	2300      	movs	r3, #0
 8012f66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012f6e:	78fa      	ldrb	r2, [r7, #3]
 8012f70:	4611      	mov	r1, r2
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7f4 f886 	bl	8007084 <HAL_PCD_SetAddress>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012f7c:	7bfb      	ldrb	r3, [r7, #15]
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f000 f8b0 	bl	80130e4 <USBD_Get_USB_Status>
 8012f84:	4603      	mov	r3, r0
 8012f86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012f88:	7bbb      	ldrb	r3, [r7, #14]
}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	3710      	adds	r7, #16
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}

08012f92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012f92:	b580      	push	{r7, lr}
 8012f94:	b086      	sub	sp, #24
 8012f96:	af00      	add	r7, sp, #0
 8012f98:	60f8      	str	r0, [r7, #12]
 8012f9a:	607a      	str	r2, [r7, #4]
 8012f9c:	603b      	str	r3, [r7, #0]
 8012f9e:	460b      	mov	r3, r1
 8012fa0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012fb0:	7af9      	ldrb	r1, [r7, #11]
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	687a      	ldr	r2, [r7, #4]
 8012fb6:	f7f4 f979 	bl	80072ac <HAL_PCD_EP_Transmit>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012fbe:	7dfb      	ldrb	r3, [r7, #23]
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f000 f88f 	bl	80130e4 <USBD_Get_USB_Status>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012fca:	7dbb      	ldrb	r3, [r7, #22]
}
 8012fcc:	4618      	mov	r0, r3
 8012fce:	3718      	adds	r7, #24
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bd80      	pop	{r7, pc}

08012fd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b086      	sub	sp, #24
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	60f8      	str	r0, [r7, #12]
 8012fdc:	607a      	str	r2, [r7, #4]
 8012fde:	603b      	str	r3, [r7, #0]
 8012fe0:	460b      	mov	r3, r1
 8012fe2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012fe8:	2300      	movs	r3, #0
 8012fea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012ff2:	7af9      	ldrb	r1, [r7, #11]
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	687a      	ldr	r2, [r7, #4]
 8012ff8:	f7f4 f90f 	bl	800721a <HAL_PCD_EP_Receive>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013000:	7dfb      	ldrb	r3, [r7, #23]
 8013002:	4618      	mov	r0, r3
 8013004:	f000 f86e 	bl	80130e4 <USBD_Get_USB_Status>
 8013008:	4603      	mov	r3, r0
 801300a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801300c:	7dbb      	ldrb	r3, [r7, #22]
}
 801300e:	4618      	mov	r0, r3
 8013010:	3718      	adds	r7, #24
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}

08013016 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013016:	b580      	push	{r7, lr}
 8013018:	b082      	sub	sp, #8
 801301a:	af00      	add	r7, sp, #0
 801301c:	6078      	str	r0, [r7, #4]
 801301e:	460b      	mov	r3, r1
 8013020:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8013028:	78fa      	ldrb	r2, [r7, #3]
 801302a:	4611      	mov	r1, r2
 801302c:	4618      	mov	r0, r3
 801302e:	f7f4 f925 	bl	800727c <HAL_PCD_EP_GetRxCount>
 8013032:	4603      	mov	r3, r0
}
 8013034:	4618      	mov	r0, r3
 8013036:	3708      	adds	r7, #8
 8013038:	46bd      	mov	sp, r7
 801303a:	bd80      	pop	{r7, pc}

0801303c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b082      	sub	sp, #8
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
 8013044:	460b      	mov	r3, r1
 8013046:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8013048:	78fb      	ldrb	r3, [r7, #3]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d002      	beq.n	8013054 <HAL_PCDEx_LPM_Callback+0x18>
 801304e:	2b01      	cmp	r3, #1
 8013050:	d013      	beq.n	801307a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8013052:	e023      	b.n	801309c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	7a5b      	ldrb	r3, [r3, #9]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d007      	beq.n	801306c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801305c:	f000 f83c 	bl	80130d8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013060:	4b10      	ldr	r3, [pc, #64]	@ (80130a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8013062:	691b      	ldr	r3, [r3, #16]
 8013064:	4a0f      	ldr	r2, [pc, #60]	@ (80130a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8013066:	f023 0306 	bic.w	r3, r3, #6
 801306a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013072:	4618      	mov	r0, r3
 8013074:	f7fa fec0 	bl	800ddf8 <USBD_LL_Resume>
    break;
 8013078:	e010      	b.n	801309c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013080:	4618      	mov	r0, r3
 8013082:	f7fa fea3 	bl	800ddcc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	7a5b      	ldrb	r3, [r3, #9]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d005      	beq.n	801309a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801308e:	4b05      	ldr	r3, [pc, #20]	@ (80130a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8013090:	691b      	ldr	r3, [r3, #16]
 8013092:	4a04      	ldr	r2, [pc, #16]	@ (80130a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8013094:	f043 0306 	orr.w	r3, r3, #6
 8013098:	6113      	str	r3, [r2, #16]
    break;
 801309a:	bf00      	nop
}
 801309c:	bf00      	nop
 801309e:	3708      	adds	r7, #8
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}
 80130a4:	e000ed00 	.word	0xe000ed00

080130a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80130a8:	b480      	push	{r7}
 80130aa:	b083      	sub	sp, #12
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80130b0:	4b03      	ldr	r3, [pc, #12]	@ (80130c0 <USBD_static_malloc+0x18>)
}
 80130b2:	4618      	mov	r0, r3
 80130b4:	370c      	adds	r7, #12
 80130b6:	46bd      	mov	sp, r7
 80130b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130bc:	4770      	bx	lr
 80130be:	bf00      	nop
 80130c0:	20017984 	.word	0x20017984

080130c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80130c4:	b480      	push	{r7}
 80130c6:	b083      	sub	sp, #12
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]

}
 80130cc:	bf00      	nop
 80130ce:	370c      	adds	r7, #12
 80130d0:	46bd      	mov	sp, r7
 80130d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d6:	4770      	bx	lr

080130d8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80130dc:	f7f1 fe3c 	bl	8004d58 <SystemClock_Config>
}
 80130e0:	bf00      	nop
 80130e2:	bd80      	pop	{r7, pc}

080130e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80130e4:	b480      	push	{r7}
 80130e6:	b085      	sub	sp, #20
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	4603      	mov	r3, r0
 80130ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80130ee:	2300      	movs	r3, #0
 80130f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80130f2:	79fb      	ldrb	r3, [r7, #7]
 80130f4:	2b03      	cmp	r3, #3
 80130f6:	d817      	bhi.n	8013128 <USBD_Get_USB_Status+0x44>
 80130f8:	a201      	add	r2, pc, #4	@ (adr r2, 8013100 <USBD_Get_USB_Status+0x1c>)
 80130fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130fe:	bf00      	nop
 8013100:	08013111 	.word	0x08013111
 8013104:	08013117 	.word	0x08013117
 8013108:	0801311d 	.word	0x0801311d
 801310c:	08013123 	.word	0x08013123
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013110:	2300      	movs	r3, #0
 8013112:	73fb      	strb	r3, [r7, #15]
    break;
 8013114:	e00b      	b.n	801312e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013116:	2303      	movs	r3, #3
 8013118:	73fb      	strb	r3, [r7, #15]
    break;
 801311a:	e008      	b.n	801312e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801311c:	2301      	movs	r3, #1
 801311e:	73fb      	strb	r3, [r7, #15]
    break;
 8013120:	e005      	b.n	801312e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013122:	2303      	movs	r3, #3
 8013124:	73fb      	strb	r3, [r7, #15]
    break;
 8013126:	e002      	b.n	801312e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013128:	2303      	movs	r3, #3
 801312a:	73fb      	strb	r3, [r7, #15]
    break;
 801312c:	bf00      	nop
  }
  return usb_status;
 801312e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013130:	4618      	mov	r0, r3
 8013132:	3714      	adds	r7, #20
 8013134:	46bd      	mov	sp, r7
 8013136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313a:	4770      	bx	lr

0801313c <DataHist_parameters>:
 801313c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013140:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8013142:	9f06      	ldr	r7, [sp, #24]
 8013144:	7020      	strb	r0, [r4, #0]
 8013146:	6808      	ldr	r0, [r1, #0]
 8013148:	6060      	str	r0, [r4, #4]
 801314a:	6848      	ldr	r0, [r1, #4]
 801314c:	60a0      	str	r0, [r4, #8]
 801314e:	6888      	ldr	r0, [r1, #8]
 8013150:	60e0      	str	r0, [r4, #12]
 8013152:	68c8      	ldr	r0, [r1, #12]
 8013154:	6120      	str	r0, [r4, #16]
 8013156:	6908      	ldr	r0, [r1, #16]
 8013158:	6160      	str	r0, [r4, #20]
 801315a:	6948      	ldr	r0, [r1, #20]
 801315c:	61a0      	str	r0, [r4, #24]
 801315e:	6988      	ldr	r0, [r1, #24]
 8013160:	61e0      	str	r0, [r4, #28]
 8013162:	69c8      	ldr	r0, [r1, #28]
 8013164:	6220      	str	r0, [r4, #32]
 8013166:	6a09      	ldr	r1, [r1, #32]
 8013168:	6261      	str	r1, [r4, #36]	@ 0x24
 801316a:	e9dd 6507 	ldrd	r6, r5, [sp, #28]
 801316e:	8811      	ldrh	r1, [r2, #0]
 8013170:	edd2 7a01 	vldr	s15, [r2, #4]
 8013174:	8521      	strh	r1, [r4, #40]	@ 0x28
 8013176:	3280      	adds	r2, #128	@ 0x80
 8013178:	f104 0830 	add.w	r8, r4, #48	@ 0x30
 801317c:	f04f 0e00 	mov.w	lr, #0
 8013180:	f1a2 0178 	sub.w	r1, r2, #120	@ 0x78
 8013184:	4640      	mov	r0, r8
 8013186:	f851 cb04 	ldr.w	ip, [r1], #4
 801318a:	f840 cb04 	str.w	ip, [r0], #4
 801318e:	4291      	cmp	r1, r2
 8013190:	d1f9      	bne.n	8013186 <DataHist_parameters+0x4a>
 8013192:	f10e 0e1e 	add.w	lr, lr, #30
 8013196:	f1be 0f5a 	cmp.w	lr, #90	@ 0x5a
 801319a:	f108 0878 	add.w	r8, r8, #120	@ 0x78
 801319e:	f101 0278 	add.w	r2, r1, #120	@ 0x78
 80131a2:	d1ed      	bne.n	8013180 <DataHist_parameters+0x44>
 80131a4:	edc4 7a0b 	vstr	s15, [r4, #44]	@ 0x2c
 80131a8:	881a      	ldrh	r2, [r3, #0]
 80131aa:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80131ae:	f8a4 2198 	strh.w	r2, [r4, #408]	@ 0x198
 80131b2:	3380      	adds	r3, #128	@ 0x80
 80131b4:	f504 7ed0 	add.w	lr, r4, #416	@ 0x1a0
 80131b8:	f04f 0c00 	mov.w	ip, #0
 80131bc:	f1a3 0278 	sub.w	r2, r3, #120	@ 0x78
 80131c0:	4671      	mov	r1, lr
 80131c2:	f852 0b04 	ldr.w	r0, [r2], #4
 80131c6:	f841 0b04 	str.w	r0, [r1], #4
 80131ca:	429a      	cmp	r2, r3
 80131cc:	d1f9      	bne.n	80131c2 <DataHist_parameters+0x86>
 80131ce:	f10c 0c1e 	add.w	ip, ip, #30
 80131d2:	f1bc 0f5a 	cmp.w	ip, #90	@ 0x5a
 80131d6:	f10e 0e78 	add.w	lr, lr, #120	@ 0x78
 80131da:	f102 0378 	add.w	r3, r2, #120	@ 0x78
 80131de:	d1ed      	bne.n	80131bc <DataHist_parameters+0x80>
 80131e0:	f8c4 819c 	str.w	r8, [r4, #412]	@ 0x19c
 80131e4:	883b      	ldrh	r3, [r7, #0]
 80131e6:	f8d7 e004 	ldr.w	lr, [r7, #4]
 80131ea:	f8a4 3308 	strh.w	r3, [r4, #776]	@ 0x308
 80131ee:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 80131f2:	f504 7c44 	add.w	ip, r4, #784	@ 0x310
 80131f6:	2700      	movs	r7, #0
 80131f8:	f1a0 0378 	sub.w	r3, r0, #120	@ 0x78
 80131fc:	4662      	mov	r2, ip
 80131fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8013202:	f842 1b04 	str.w	r1, [r2], #4
 8013206:	4298      	cmp	r0, r3
 8013208:	d1f9      	bne.n	80131fe <DataHist_parameters+0xc2>
 801320a:	371e      	adds	r7, #30
 801320c:	2f5a      	cmp	r7, #90	@ 0x5a
 801320e:	f10c 0c78 	add.w	ip, ip, #120	@ 0x78
 8013212:	f100 0078 	add.w	r0, r0, #120	@ 0x78
 8013216:	d1ef      	bne.n	80131f8 <DataHist_parameters+0xbc>
 8013218:	f8c4 e30c 	str.w	lr, [r4, #780]	@ 0x30c
 801321c:	8833      	ldrh	r3, [r6, #0]
 801321e:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8013222:	f8a4 3478 	strh.w	r3, [r4, #1144]	@ 0x478
 8013226:	f106 0080 	add.w	r0, r6, #128	@ 0x80
 801322a:	f504 6790 	add.w	r7, r4, #1152	@ 0x480
 801322e:	2600      	movs	r6, #0
 8013230:	f1a0 0378 	sub.w	r3, r0, #120	@ 0x78
 8013234:	463a      	mov	r2, r7
 8013236:	f853 1b04 	ldr.w	r1, [r3], #4
 801323a:	f842 1b04 	str.w	r1, [r2], #4
 801323e:	4298      	cmp	r0, r3
 8013240:	d1f9      	bne.n	8013236 <DataHist_parameters+0xfa>
 8013242:	361e      	adds	r6, #30
 8013244:	2e5a      	cmp	r6, #90	@ 0x5a
 8013246:	f107 0778 	add.w	r7, r7, #120	@ 0x78
 801324a:	f100 0078 	add.w	r0, r0, #120	@ 0x78
 801324e:	d1ef      	bne.n	8013230 <DataHist_parameters+0xf4>
 8013250:	f504 638f 	add.w	r3, r4, #1144	@ 0x478
 8013254:	69aa      	ldr	r2, [r5, #24]
 8013256:	f8c3 c004 	str.w	ip, [r3, #4]
 801325a:	f504 63bd 	add.w	r3, r4, #1512	@ 0x5e8
 801325e:	7829      	ldrb	r1, [r5, #0]
 8013260:	f884 15e8 	strb.w	r1, [r4, #1512]	@ 0x5e8
 8013264:	619a      	str	r2, [r3, #24]
 8013266:	686a      	ldr	r2, [r5, #4]
 8013268:	605a      	str	r2, [r3, #4]
 801326a:	68aa      	ldr	r2, [r5, #8]
 801326c:	609a      	str	r2, [r3, #8]
 801326e:	68ea      	ldr	r2, [r5, #12]
 8013270:	60da      	str	r2, [r3, #12]
 8013272:	692a      	ldr	r2, [r5, #16]
 8013274:	611a      	str	r2, [r3, #16]
 8013276:	696a      	ldr	r2, [r5, #20]
 8013278:	615a      	str	r2, [r3, #20]
 801327a:	69ea      	ldr	r2, [r5, #28]
 801327c:	61da      	str	r2, [r3, #28]
 801327e:	6a2a      	ldr	r2, [r5, #32]
 8013280:	621a      	str	r2, [r3, #32]
 8013282:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8013284:	625a      	str	r2, [r3, #36]	@ 0x24
 8013286:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8013288:	629a      	str	r2, [r3, #40]	@ 0x28
 801328a:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 801328c:	62da      	str	r2, [r3, #44]	@ 0x2c
 801328e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013292:	bf00      	nop

08013294 <rotVect>:
 8013294:	f991 3001 	ldrsb.w	r3, [r1, #1]
 8013298:	ed92 7a01 	vldr	s14, [r2, #4]
 801329c:	ed92 6a00 	vldr	s12, [r2]
 80132a0:	ee07 3a90 	vmov	s15, r3
 80132a4:	f991 3000 	ldrsb.w	r3, [r1]
 80132a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80132ac:	ee06 3a90 	vmov	s13, r3
 80132b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80132b4:	f991 3002 	ldrsb.w	r3, [r1, #2]
 80132b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80132bc:	ee07 3a10 	vmov	s14, r3
 80132c0:	eee6 7a86 	vfma.f32	s15, s13, s12
 80132c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80132c8:	edd2 6a02 	vldr	s13, [r2, #8]
 80132cc:	eee7 7a26 	vfma.f32	s15, s14, s13
 80132d0:	edc0 7a00 	vstr	s15, [r0]
 80132d4:	f991 3004 	ldrsb.w	r3, [r1, #4]
 80132d8:	ed92 7a01 	vldr	s14, [r2, #4]
 80132dc:	ed92 6a00 	vldr	s12, [r2]
 80132e0:	ee07 3a90 	vmov	s15, r3
 80132e4:	f991 3003 	ldrsb.w	r3, [r1, #3]
 80132e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80132ec:	ee06 3a90 	vmov	s13, r3
 80132f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80132f4:	f991 3005 	ldrsb.w	r3, [r1, #5]
 80132f8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80132fc:	ee07 3a10 	vmov	s14, r3
 8013300:	eee6 7a86 	vfma.f32	s15, s13, s12
 8013304:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013308:	edd2 6a02 	vldr	s13, [r2, #8]
 801330c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8013310:	edc0 7a01 	vstr	s15, [r0, #4]
 8013314:	f991 3007 	ldrsb.w	r3, [r1, #7]
 8013318:	ed92 7a01 	vldr	s14, [r2, #4]
 801331c:	ed92 6a00 	vldr	s12, [r2]
 8013320:	ee07 3a90 	vmov	s15, r3
 8013324:	f991 3006 	ldrsb.w	r3, [r1, #6]
 8013328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801332c:	ee06 3a90 	vmov	s13, r3
 8013330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013334:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013338:	f991 3008 	ldrsb.w	r3, [r1, #8]
 801333c:	eee6 7a86 	vfma.f32	s15, s13, s12
 8013340:	ee07 3a10 	vmov	s14, r3
 8013344:	edd2 6a02 	vldr	s13, [r2, #8]
 8013348:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801334c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8013350:	edc0 7a02 	vstr	s15, [r0, #8]
 8013354:	4770      	bx	lr
 8013356:	bf00      	nop

08013358 <findAxis>:
 8013358:	f990 3000 	ldrsb.w	r3, [r0]
 801335c:	2b01      	cmp	r3, #1
 801335e:	d027      	beq.n	80133b0 <findAxis+0x58>
 8013360:	3301      	adds	r3, #1
 8013362:	d00e      	beq.n	8013382 <findAxis+0x2a>
 8013364:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8013368:	2b01      	cmp	r3, #1
 801336a:	d053      	beq.n	8013414 <findAxis+0xbc>
 801336c:	3301      	adds	r3, #1
 801336e:	d048      	beq.n	8013402 <findAxis+0xaa>
 8013370:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8013374:	2b01      	cmp	r3, #1
 8013376:	d053      	beq.n	8013420 <findAxis+0xc8>
 8013378:	3301      	adds	r3, #1
 801337a:	d104      	bne.n	8013386 <findAxis+0x2e>
 801337c:	2364      	movs	r3, #100	@ 0x64
 801337e:	700b      	strb	r3, [r1, #0]
 8013380:	e001      	b.n	8013386 <findAxis+0x2e>
 8013382:	2377      	movs	r3, #119	@ 0x77
 8013384:	700b      	strb	r3, [r1, #0]
 8013386:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801338a:	2b01      	cmp	r3, #1
 801338c:	d016      	beq.n	80133bc <findAxis+0x64>
 801338e:	3301      	adds	r3, #1
 8013390:	d02e      	beq.n	80133f0 <findAxis+0x98>
 8013392:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8013396:	2b01      	cmp	r3, #1
 8013398:	d039      	beq.n	801340e <findAxis+0xb6>
 801339a:	3301      	adds	r3, #1
 801339c:	d034      	beq.n	8013408 <findAxis+0xb0>
 801339e:	f990 3007 	ldrsb.w	r3, [r0, #7]
 80133a2:	2b01      	cmp	r3, #1
 80133a4:	d03f      	beq.n	8013426 <findAxis+0xce>
 80133a6:	3301      	adds	r3, #1
 80133a8:	d10a      	bne.n	80133c0 <findAxis+0x68>
 80133aa:	2364      	movs	r3, #100	@ 0x64
 80133ac:	704b      	strb	r3, [r1, #1]
 80133ae:	e007      	b.n	80133c0 <findAxis+0x68>
 80133b0:	2365      	movs	r3, #101	@ 0x65
 80133b2:	700b      	strb	r3, [r1, #0]
 80133b4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80133b8:	2b01      	cmp	r3, #1
 80133ba:	d1e8      	bne.n	801338e <findAxis+0x36>
 80133bc:	2365      	movs	r3, #101	@ 0x65
 80133be:	704b      	strb	r3, [r1, #1]
 80133c0:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80133c4:	2b01      	cmp	r3, #1
 80133c6:	d010      	beq.n	80133ea <findAxis+0x92>
 80133c8:	3301      	adds	r3, #1
 80133ca:	d014      	beq.n	80133f6 <findAxis+0x9e>
 80133cc:	f990 3005 	ldrsb.w	r3, [r0, #5]
 80133d0:	2b01      	cmp	r3, #1
 80133d2:	d022      	beq.n	801341a <findAxis+0xc2>
 80133d4:	3301      	adds	r3, #1
 80133d6:	d011      	beq.n	80133fc <findAxis+0xa4>
 80133d8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80133dc:	2b01      	cmp	r3, #1
 80133de:	d025      	beq.n	801342c <findAxis+0xd4>
 80133e0:	3301      	adds	r3, #1
 80133e2:	bf04      	itt	eq
 80133e4:	2364      	moveq	r3, #100	@ 0x64
 80133e6:	708b      	strbeq	r3, [r1, #2]
 80133e8:	4770      	bx	lr
 80133ea:	2365      	movs	r3, #101	@ 0x65
 80133ec:	708b      	strb	r3, [r1, #2]
 80133ee:	4770      	bx	lr
 80133f0:	2377      	movs	r3, #119	@ 0x77
 80133f2:	704b      	strb	r3, [r1, #1]
 80133f4:	e7e4      	b.n	80133c0 <findAxis+0x68>
 80133f6:	2377      	movs	r3, #119	@ 0x77
 80133f8:	708b      	strb	r3, [r1, #2]
 80133fa:	4770      	bx	lr
 80133fc:	2373      	movs	r3, #115	@ 0x73
 80133fe:	708b      	strb	r3, [r1, #2]
 8013400:	4770      	bx	lr
 8013402:	2373      	movs	r3, #115	@ 0x73
 8013404:	700b      	strb	r3, [r1, #0]
 8013406:	e7be      	b.n	8013386 <findAxis+0x2e>
 8013408:	2373      	movs	r3, #115	@ 0x73
 801340a:	704b      	strb	r3, [r1, #1]
 801340c:	e7d8      	b.n	80133c0 <findAxis+0x68>
 801340e:	236e      	movs	r3, #110	@ 0x6e
 8013410:	704b      	strb	r3, [r1, #1]
 8013412:	e7d5      	b.n	80133c0 <findAxis+0x68>
 8013414:	236e      	movs	r3, #110	@ 0x6e
 8013416:	700b      	strb	r3, [r1, #0]
 8013418:	e7b5      	b.n	8013386 <findAxis+0x2e>
 801341a:	236e      	movs	r3, #110	@ 0x6e
 801341c:	708b      	strb	r3, [r1, #2]
 801341e:	4770      	bx	lr
 8013420:	2375      	movs	r3, #117	@ 0x75
 8013422:	700b      	strb	r3, [r1, #0]
 8013424:	e7af      	b.n	8013386 <findAxis+0x2e>
 8013426:	2375      	movs	r3, #117	@ 0x75
 8013428:	704b      	strb	r3, [r1, #1]
 801342a:	e7c9      	b.n	80133c0 <findAxis+0x68>
 801342c:	2375      	movs	r3, #117	@ 0x75
 801342e:	708b      	strb	r3, [r1, #2]
 8013430:	4770      	bx	lr
 8013432:	bf00      	nop
 8013434:	0000      	movs	r0, r0
	...

08013438 <findDirection>:
 8013438:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 801343c:	ed2d 8b06 	vpush	{d8-d10}
 8013440:	eef0 9ae0 	vabs.f32	s19, s1
 8013444:	eeb0 9a40 	vmov.f32	s18, s0
 8013448:	4604      	mov	r4, r0
 801344a:	ee19 0a90 	vmov	r0, s19
 801344e:	eeb0 8a41 	vmov.f32	s16, s2
 8013452:	eef0 8a60 	vmov.f32	s17, s1
 8013456:	eeb0 aac9 	vabs.f32	s20, s18
 801345a:	f7ed f89d 	bl	8000598 <__aeabi_f2d>
 801345e:	eeb4 aae9 	vcmpe.f32	s20, s19
 8013462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013466:	4606      	mov	r6, r0
 8013468:	460f      	mov	r7, r1
 801346a:	eef0 aac8 	vabs.f32	s21, s16
 801346e:	dd32      	ble.n	80134d6 <findDirection+0x9e>
 8013470:	eeb4 aaea 	vcmpe.f32	s20, s21
 8013474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013478:	dd2d      	ble.n	80134d6 <findDirection+0x9e>
 801347a:	a36b      	add	r3, pc, #428	@ (adr r3, 8013628 <findDirection+0x1f0>)
 801347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013480:	f7ed f8e2 	bl	8000648 <__aeabi_dmul>
 8013484:	4680      	mov	r8, r0
 8013486:	ee1a 0a10 	vmov	r0, s20
 801348a:	4689      	mov	r9, r1
 801348c:	f7ed f884 	bl	8000598 <__aeabi_f2d>
 8013490:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8013494:	4606      	mov	r6, r0
 8013496:	460f      	mov	r7, r1
 8013498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801349c:	4640      	mov	r0, r8
 801349e:	4649      	mov	r1, r9
 80134a0:	4632      	mov	r2, r6
 80134a2:	463b      	mov	r3, r7
 80134a4:	dd76      	ble.n	8013594 <findDirection+0x15c>
 80134a6:	f7ed fb41 	bl	8000b2c <__aeabi_dcmplt>
 80134aa:	b178      	cbz	r0, 80134cc <findDirection+0x94>
 80134ac:	ee1a 0a90 	vmov	r0, s21
 80134b0:	f7ed f872 	bl	8000598 <__aeabi_f2d>
 80134b4:	a35c      	add	r3, pc, #368	@ (adr r3, 8013628 <findDirection+0x1f0>)
 80134b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ba:	f7ed f8c5 	bl	8000648 <__aeabi_dmul>
 80134be:	4632      	mov	r2, r6
 80134c0:	463b      	mov	r3, r7
 80134c2:	f7ed fb33 	bl	8000b2c <__aeabi_dcmplt>
 80134c6:	2800      	cmp	r0, #0
 80134c8:	bf18      	it	ne
 80134ca:	2404      	movne	r4, #4
 80134cc:	ecbd 8b06 	vpop	{d8-d10}
 80134d0:	4620      	mov	r0, r4
 80134d2:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 80134d6:	eef4 9aea 	vcmpe.f32	s19, s21
 80134da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134de:	dd28      	ble.n	8013532 <findDirection+0xfa>
 80134e0:	ee1a 0a10 	vmov	r0, s20
 80134e4:	f7ed f858 	bl	8000598 <__aeabi_f2d>
 80134e8:	a34f      	add	r3, pc, #316	@ (adr r3, 8013628 <findDirection+0x1f0>)
 80134ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ee:	f7ed f8ab 	bl	8000648 <__aeabi_dmul>
 80134f2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80134f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134fa:	4632      	mov	r2, r6
 80134fc:	463b      	mov	r3, r7
 80134fe:	dd5e      	ble.n	80135be <findDirection+0x186>
 8013500:	f7ed fb14 	bl	8000b2c <__aeabi_dcmplt>
 8013504:	2800      	cmp	r0, #0
 8013506:	d0e1      	beq.n	80134cc <findDirection+0x94>
 8013508:	ee1a 0a90 	vmov	r0, s21
 801350c:	f7ed f844 	bl	8000598 <__aeabi_f2d>
 8013510:	a345      	add	r3, pc, #276	@ (adr r3, 8013628 <findDirection+0x1f0>)
 8013512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013516:	f7ed f897 	bl	8000648 <__aeabi_dmul>
 801351a:	4632      	mov	r2, r6
 801351c:	463b      	mov	r3, r7
 801351e:	f7ed fb05 	bl	8000b2c <__aeabi_dcmplt>
 8013522:	ecbd 8b06 	vpop	{d8-d10}
 8013526:	2800      	cmp	r0, #0
 8013528:	bf18      	it	ne
 801352a:	2401      	movne	r4, #1
 801352c:	4620      	mov	r0, r4
 801352e:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8013532:	ee1a 0a90 	vmov	r0, s21
 8013536:	f7ed f82f 	bl	8000598 <__aeabi_f2d>
 801353a:	4602      	mov	r2, r0
 801353c:	460b      	mov	r3, r1
 801353e:	4630      	mov	r0, r6
 8013540:	4639      	mov	r1, r7
 8013542:	4616      	mov	r6, r2
 8013544:	461f      	mov	r7, r3
 8013546:	a338      	add	r3, pc, #224	@ (adr r3, 8013628 <findDirection+0x1f0>)
 8013548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801354c:	f7ed f87c 	bl	8000648 <__aeabi_dmul>
 8013550:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013558:	4602      	mov	r2, r0
 801355a:	460b      	mov	r3, r1
 801355c:	4630      	mov	r0, r6
 801355e:	4639      	mov	r1, r7
 8013560:	dd46      	ble.n	80135f0 <findDirection+0x1b8>
 8013562:	f7ed fb01 	bl	8000b68 <__aeabi_dcmpgt>
 8013566:	2800      	cmp	r0, #0
 8013568:	d0b0      	beq.n	80134cc <findDirection+0x94>
 801356a:	ee1a 0a10 	vmov	r0, s20
 801356e:	f7ed f813 	bl	8000598 <__aeabi_f2d>
 8013572:	a32d      	add	r3, pc, #180	@ (adr r3, 8013628 <findDirection+0x1f0>)
 8013574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013578:	f7ed f866 	bl	8000648 <__aeabi_dmul>
 801357c:	4632      	mov	r2, r6
 801357e:	463b      	mov	r3, r7
 8013580:	f7ed fad4 	bl	8000b2c <__aeabi_dcmplt>
 8013584:	ecbd 8b06 	vpop	{d8-d10}
 8013588:	2800      	cmp	r0, #0
 801358a:	bf18      	it	ne
 801358c:	2400      	movne	r4, #0
 801358e:	4620      	mov	r0, r4
 8013590:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8013594:	f7ed faca 	bl	8000b2c <__aeabi_dcmplt>
 8013598:	2800      	cmp	r0, #0
 801359a:	d097      	beq.n	80134cc <findDirection+0x94>
 801359c:	ee1a 0a90 	vmov	r0, s21
 80135a0:	f7ec fffa 	bl	8000598 <__aeabi_f2d>
 80135a4:	a320      	add	r3, pc, #128	@ (adr r3, 8013628 <findDirection+0x1f0>)
 80135a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135aa:	f7ed f84d 	bl	8000648 <__aeabi_dmul>
 80135ae:	4632      	mov	r2, r6
 80135b0:	463b      	mov	r3, r7
 80135b2:	f7ed fabb 	bl	8000b2c <__aeabi_dcmplt>
 80135b6:	2800      	cmp	r0, #0
 80135b8:	bf18      	it	ne
 80135ba:	2405      	movne	r4, #5
 80135bc:	e786      	b.n	80134cc <findDirection+0x94>
 80135be:	f7ed fab5 	bl	8000b2c <__aeabi_dcmplt>
 80135c2:	2800      	cmp	r0, #0
 80135c4:	d082      	beq.n	80134cc <findDirection+0x94>
 80135c6:	ee1a 0a90 	vmov	r0, s21
 80135ca:	f7ec ffe5 	bl	8000598 <__aeabi_f2d>
 80135ce:	a316      	add	r3, pc, #88	@ (adr r3, 8013628 <findDirection+0x1f0>)
 80135d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135d4:	f7ed f838 	bl	8000648 <__aeabi_dmul>
 80135d8:	4632      	mov	r2, r6
 80135da:	463b      	mov	r3, r7
 80135dc:	f7ed faa6 	bl	8000b2c <__aeabi_dcmplt>
 80135e0:	ecbd 8b06 	vpop	{d8-d10}
 80135e4:	2800      	cmp	r0, #0
 80135e6:	bf18      	it	ne
 80135e8:	2403      	movne	r4, #3
 80135ea:	4620      	mov	r0, r4
 80135ec:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 80135f0:	f7ed faba 	bl	8000b68 <__aeabi_dcmpgt>
 80135f4:	2800      	cmp	r0, #0
 80135f6:	f43f af69 	beq.w	80134cc <findDirection+0x94>
 80135fa:	ee1a 0a10 	vmov	r0, s20
 80135fe:	f7ec ffcb 	bl	8000598 <__aeabi_f2d>
 8013602:	a309      	add	r3, pc, #36	@ (adr r3, 8013628 <findDirection+0x1f0>)
 8013604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013608:	f7ed f81e 	bl	8000648 <__aeabi_dmul>
 801360c:	4632      	mov	r2, r6
 801360e:	463b      	mov	r3, r7
 8013610:	f7ed fa8c 	bl	8000b2c <__aeabi_dcmplt>
 8013614:	ecbd 8b06 	vpop	{d8-d10}
 8013618:	2800      	cmp	r0, #0
 801361a:	bf18      	it	ne
 801361c:	2402      	movne	r4, #2
 801361e:	4620      	mov	r0, r4
 8013620:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8013624:	f3af 8000 	nop.w
 8013628:	e0000000 	.word	0xe0000000
 801362c:	3ff6b851 	.word	0x3ff6b851

08013630 <updateOrientation>:
 8013630:	2300      	movs	r3, #0
 8013632:	6003      	str	r3, [r0, #0]
 8013634:	6043      	str	r3, [r0, #4]
 8013636:	7203      	strb	r3, [r0, #8]
 8013638:	780b      	ldrb	r3, [r1, #0]
 801363a:	f891 c001 	ldrb.w	ip, [r1, #1]
 801363e:	f1a3 0242 	sub.w	r2, r3, #66	@ 0x42
 8013642:	2a17      	cmp	r2, #23
 8013644:	bf98      	it	ls
 8013646:	3320      	addls	r3, #32
 8013648:	f1ac 0242 	sub.w	r2, ip, #66	@ 0x42
 801364c:	bf98      	it	ls
 801364e:	b2db      	uxtbls	r3, r3
 8013650:	2a17      	cmp	r2, #23
 8013652:	788a      	ldrb	r2, [r1, #2]
 8013654:	bf98      	it	ls
 8013656:	f10c 0c20 	addls.w	ip, ip, #32
 801365a:	f1a2 0142 	sub.w	r1, r2, #66	@ 0x42
 801365e:	bf98      	it	ls
 8013660:	fa5f fc8c 	uxtbls.w	ip, ip
 8013664:	2917      	cmp	r1, #23
 8013666:	bf98      	it	ls
 8013668:	3220      	addls	r2, #32
 801366a:	f1a3 0364 	sub.w	r3, r3, #100	@ 0x64
 801366e:	bf98      	it	ls
 8013670:	b2d2      	uxtbls	r2, r2
 8013672:	2b13      	cmp	r3, #19
 8013674:	d80d      	bhi.n	8013692 <updateOrientation+0x62>
 8013676:	e8df f003 	tbb	[pc, r3]
 801367a:	3734      	.short	0x3734
 801367c:	0c0c0c0c 	.word	0x0c0c0c0c
 8013680:	0c0c0c0c 	.word	0x0c0c0c0c
 8013684:	0c0c0c0a 	.word	0x0c0c0c0a
 8013688:	3d0c3a0c 	.word	0x3d0c3a0c
 801368c:	310c      	.short	0x310c
 801368e:	2301      	movs	r3, #1
 8013690:	70c3      	strb	r3, [r0, #3]
 8013692:	f1ac 0c64 	sub.w	ip, ip, #100	@ 0x64
 8013696:	f1bc 0f13 	cmp.w	ip, #19
 801369a:	d80d      	bhi.n	80136b8 <updateOrientation+0x88>
 801369c:	e8df f00c 	tbb	[pc, ip]
 80136a0:	0c0c392d 	.word	0x0c0c392d
 80136a4:	0c0c0c0c 	.word	0x0c0c0c0c
 80136a8:	0c0a0c0c 	.word	0x0c0a0c0c
 80136ac:	3c0c0c0c 	.word	0x3c0c0c0c
 80136b0:	420c3f0c 	.word	0x420c3f0c
 80136b4:	2301      	movs	r3, #1
 80136b6:	7103      	strb	r3, [r0, #4]
 80136b8:	3a64      	subs	r2, #100	@ 0x64
 80136ba:	2a13      	cmp	r2, #19
 80136bc:	d80d      	bhi.n	80136da <updateOrientation+0xaa>
 80136be:	e8df f002 	tbb	[pc, r2]
 80136c2:	340a      	.short	0x340a
 80136c4:	0c0c0c0c 	.word	0x0c0c0c0c
 80136c8:	0c0c0c0c 	.word	0x0c0c0c0c
 80136cc:	0c0c0c37 	.word	0x0c0c0c37
 80136d0:	250c220c 	.word	0x250c220c
 80136d4:	1f0c      	.short	0x1f0c
 80136d6:	23ff      	movs	r3, #255	@ 0xff
 80136d8:	7203      	strb	r3, [r0, #8]
 80136da:	4770      	bx	lr
 80136dc:	23ff      	movs	r3, #255	@ 0xff
 80136de:	7003      	strb	r3, [r0, #0]
 80136e0:	e7d7      	b.n	8013692 <updateOrientation+0x62>
 80136e2:	23ff      	movs	r3, #255	@ 0xff
 80136e4:	7183      	strb	r3, [r0, #6]
 80136e6:	e7d4      	b.n	8013692 <updateOrientation+0x62>
 80136e8:	2301      	movs	r3, #1
 80136ea:	7003      	strb	r3, [r0, #0]
 80136ec:	e7d1      	b.n	8013692 <updateOrientation+0x62>
 80136ee:	23ff      	movs	r3, #255	@ 0xff
 80136f0:	70c3      	strb	r3, [r0, #3]
 80136f2:	e7ce      	b.n	8013692 <updateOrientation+0x62>
 80136f4:	2301      	movs	r3, #1
 80136f6:	7183      	strb	r3, [r0, #6]
 80136f8:	e7cb      	b.n	8013692 <updateOrientation+0x62>
 80136fa:	23ff      	movs	r3, #255	@ 0xff
 80136fc:	71c3      	strb	r3, [r0, #7]
 80136fe:	e7db      	b.n	80136b8 <updateOrientation+0x88>
 8013700:	23ff      	movs	r3, #255	@ 0xff
 8013702:	7083      	strb	r3, [r0, #2]
 8013704:	4770      	bx	lr
 8013706:	23ff      	movs	r3, #255	@ 0xff
 8013708:	7143      	strb	r3, [r0, #5]
 801370a:	4770      	bx	lr
 801370c:	2301      	movs	r3, #1
 801370e:	7203      	strb	r3, [r0, #8]
 8013710:	4770      	bx	lr
 8013712:	2301      	movs	r3, #1
 8013714:	7043      	strb	r3, [r0, #1]
 8013716:	e7cf      	b.n	80136b8 <updateOrientation+0x88>
 8013718:	23ff      	movs	r3, #255	@ 0xff
 801371a:	7103      	strb	r3, [r0, #4]
 801371c:	e7cc      	b.n	80136b8 <updateOrientation+0x88>
 801371e:	2301      	movs	r3, #1
 8013720:	71c3      	strb	r3, [r0, #7]
 8013722:	e7c9      	b.n	80136b8 <updateOrientation+0x88>
 8013724:	23ff      	movs	r3, #255	@ 0xff
 8013726:	7043      	strb	r3, [r0, #1]
 8013728:	e7c6      	b.n	80136b8 <updateOrientation+0x88>
 801372a:	2301      	movs	r3, #1
 801372c:	7083      	strb	r3, [r0, #2]
 801372e:	4770      	bx	lr
 8013730:	2301      	movs	r3, #1
 8013732:	7143      	strb	r3, [r0, #5]
 8013734:	4770      	bx	lr
 8013736:	bf00      	nop

08013738 <qmult>:
 8013738:	ed91 2a03 	vldr	s4, [r1, #12]
 801373c:	ed90 3a01 	vldr	s6, [r0, #4]
 8013740:	edd0 5a02 	vldr	s11, [r0, #8]
 8013744:	edd1 4a01 	vldr	s9, [r1, #4]
 8013748:	ed90 4a00 	vldr	s8, [r0]
 801374c:	ed91 5a02 	vldr	s10, [r1, #8]
 8013750:	edd1 3a00 	vldr	s7, [r1]
 8013754:	edd0 2a03 	vldr	s5, [r0, #12]
 8013758:	ee25 6aa4 	vmul.f32	s12, s11, s9
 801375c:	ee62 6a03 	vmul.f32	s13, s4, s6
 8013760:	ee22 7a25 	vmul.f32	s14, s4, s11
 8013764:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 8013768:	eea4 6a02 	vfma.f32	s12, s8, s4
 801376c:	eee4 6a05 	vfma.f32	s13, s8, s10
 8013770:	eea3 7a23 	vfma.f32	s14, s6, s7
 8013774:	eee4 7a63 	vfms.f32	s15, s8, s7
 8013778:	eea2 6aa3 	vfma.f32	s12, s5, s7
 801377c:	eee4 6aa2 	vfma.f32	s13, s9, s5
 8013780:	eea5 7a22 	vfma.f32	s14, s10, s5
 8013784:	eee2 7a22 	vfma.f32	s15, s4, s5
 8013788:	eea3 6a45 	vfms.f32	s12, s6, s10
 801378c:	eee5 6ae3 	vfms.f32	s13, s11, s7
 8013790:	eea4 7a64 	vfms.f32	s14, s8, s9
 8013794:	eee5 7a65 	vfms.f32	s15, s10, s11
 8013798:	ed82 6a00 	vstr	s12, [r2]
 801379c:	edc2 6a01 	vstr	s13, [r2, #4]
 80137a0:	ed82 7a02 	vstr	s14, [r2, #8]
 80137a4:	edc2 7a03 	vstr	s15, [r2, #12]
 80137a8:	4770      	bx	lr
 80137aa:	bf00      	nop

080137ac <dataDerivative5>:
 80137ac:	ed90 7a02 	vldr	s14, [r0, #8]
 80137b0:	edd0 7a05 	vldr	s15, [r0, #20]
 80137b4:	ed90 5a04 	vldr	s10, [r0, #16]
 80137b8:	edd0 3a00 	vldr	s7, [r0]
 80137bc:	edd0 6a09 	vldr	s13, [r0, #36]	@ 0x24
 80137c0:	ed90 6a0b 	vldr	s12, [r0, #44]	@ 0x2c
 80137c4:	ed90 4a0e 	vldr	s8, [r0, #56]	@ 0x38
 80137c8:	eef8 4a00 	vmov.f32	s9, #128	@ 0xc0000000 -2.0
 80137cc:	eed7 7a24 	vfnms.f32	s15, s14, s9
 80137d0:	ed90 7a01 	vldr	s14, [r0, #4]
 80137d4:	eee3 6aa4 	vfma.f32	s13, s7, s9
 80137d8:	ee97 5a24 	vfnms.f32	s10, s14, s9
 80137dc:	ee77 7a86 	vadd.f32	s15, s15, s12
 80137e0:	ed90 7a0a 	vldr	s14, [r0, #40]	@ 0x28
 80137e4:	eddf 4a13 	vldr	s9, [pc, #76]	@ 8013834 <dataDerivative5+0x88>
 80137e8:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 80137ec:	eee4 7a25 	vfma.f32	s15, s8, s11
 80137f0:	eeb0 6a66 	vmov.f32	s12, s13
 80137f4:	ee77 6a05 	vadd.f32	s13, s14, s10
 80137f8:	ed90 5a0d 	vldr	s10, [r0, #52]	@ 0x34
 80137fc:	ee20 7a24 	vmul.f32	s14, s0, s9
 8013800:	eee5 6a25 	vfma.f32	s13, s10, s11
 8013804:	edd0 4a03 	vldr	s9, [r0, #12]
 8013808:	ed90 5a0c 	vldr	s10, [r0, #48]	@ 0x30
 801380c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013810:	ee36 6a64 	vsub.f32	s12, s12, s9
 8013814:	ee66 6a87 	vmul.f32	s13, s13, s14
 8013818:	eea5 6a25 	vfma.f32	s12, s10, s11
 801381c:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8013820:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013824:	eea6 0aa6 	vfma.f32	s0, s13, s13
 8013828:	eea7 0a07 	vfma.f32	s0, s14, s14
 801382c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013830:	4770      	bx	lr
 8013832:	bf00      	nop
 8013834:	3dcccccd 	.word	0x3dcccccd

08013838 <b_dcm2q>:
 8013838:	ed90 5a08 	vldr	s10, [r0, #32]
 801383c:	edd0 7a00 	vldr	s15, [r0]
 8013840:	edd0 6a04 	vldr	s13, [r0, #16]
 8013844:	ee37 7a85 	vadd.f32	s14, s15, s10
 8013848:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 801384c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8013850:	eeff 4a00 	vmov.f32	s9, #240	@ 0xbf800000 -1.0
 8013854:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801385c:	bfc5      	ittet	gt
 801385e:	eeb7 6a00 	vmovgt.f32	s12, #112	@ 0x3f800000  1.0
 8013862:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 8013866:	eddf 5a43 	vldrle	s11, [pc, #268]	@ 8013974 <b_dcm2q+0x13c>
 801386a:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 801386e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8013872:	ee35 6a47 	vsub.f32	s12, s10, s14
 8013876:	ee35 7a07 	vadd.f32	s14, s10, s14
 801387a:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801387e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013882:	bfc5      	ittet	gt
 8013884:	eef7 4a00 	vmovgt.f32	s9, #112	@ 0x3f800000  1.0
 8013888:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 801388c:	ed9f 6a39 	vldrle	s12, [pc, #228]	@ 8013974 <b_dcm2q+0x13c>
 8013890:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 8013894:	eeff 4a00 	vmov.f32	s9, #240	@ 0xbf800000 -1.0
 8013898:	eeb4 7ae4 	vcmpe.f32	s14, s9
 801389c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138a0:	dd5b      	ble.n	801395a <b_dcm2q+0x122>
 80138a2:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 80138a6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80138aa:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 80138ae:	eef1 4ac7 	vsqrt.f32	s9, s14
 80138b2:	ee64 4a84 	vmul.f32	s9, s9, s8
 80138b6:	ee76 6a85 	vadd.f32	s13, s13, s10
 80138ba:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80138be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80138c2:	edd0 6a07 	vldr	s13, [r0, #28]
 80138c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80138ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ce:	bf85      	ittet	hi
 80138d0:	eeb7 7a00 	vmovhi.f32	s14, #112	@ 0x3f800000  1.0
 80138d4:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 80138d8:	ed9f 7a26 	vldrls	s14, [pc, #152]	@ 8013974 <b_dcm2q+0x13c>
 80138dc:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 80138e0:	edd0 7a05 	vldr	s15, [r0, #20]
 80138e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80138e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80138ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138f0:	d43c      	bmi.n	801396c <b_dcm2q+0x134>
 80138f2:	bfd8      	it	le
 80138f4:	ee27 7a27 	vmulle.f32	s14, s14, s15
 80138f8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80138fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013900:	ed81 7a00 	vstr	s14, [r1]
 8013904:	edd0 7a06 	vldr	s15, [r0, #24]
 8013908:	ed90 7a02 	vldr	s14, [r0, #8]
 801390c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013910:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013918:	d425      	bmi.n	8013966 <b_dcm2q+0x12e>
 801391a:	bfd8      	it	le
 801391c:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 8013920:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013924:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8013928:	edc1 5a01 	vstr	s11, [r1, #4]
 801392c:	edd0 7a01 	vldr	s15, [r0, #4]
 8013930:	ed90 7a03 	vldr	s14, [r0, #12]
 8013934:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013938:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801393c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013940:	d40e      	bmi.n	8013960 <b_dcm2q+0x128>
 8013942:	bfd8      	it	le
 8013944:	ee26 6a27 	vmulle.f32	s12, s12, s15
 8013948:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801394c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013950:	edc1 4a03 	vstr	s9, [r1, #12]
 8013954:	ed81 6a02 	vstr	s12, [r1, #8]
 8013958:	4770      	bx	lr
 801395a:	eddf 4a06 	vldr	s9, [pc, #24]	@ 8013974 <b_dcm2q+0x13c>
 801395e:	e7aa      	b.n	80138b6 <b_dcm2q+0x7e>
 8013960:	eeb1 6a46 	vneg.f32	s12, s12
 8013964:	e7f0      	b.n	8013948 <b_dcm2q+0x110>
 8013966:	eef1 5a65 	vneg.f32	s11, s11
 801396a:	e7d9      	b.n	8013920 <b_dcm2q+0xe8>
 801396c:	eeb1 7a47 	vneg.f32	s14, s14
 8013970:	e7c2      	b.n	80138f8 <b_dcm2q+0xc0>
 8013972:	bf00      	nop
 8013974:	00000000 	.word	0x00000000

08013978 <getRotationMatrix>:
 8013978:	b538      	push	{r3, r4, r5, lr}
 801397a:	4613      	mov	r3, r2
 801397c:	4605      	mov	r5, r0
 801397e:	460c      	mov	r4, r1
 8013980:	4618      	mov	r0, r3
 8013982:	2224      	movs	r2, #36	@ 0x24
 8013984:	2100      	movs	r1, #0
 8013986:	f00c f93e 	bl	801fc06 <memset>
 801398a:	edd5 5a00 	vldr	s11, [r5]
 801398e:	ed9f 3a49 	vldr	s6, [pc, #292]	@ 8013ab4 <getRotationMatrix+0x13c>
 8013992:	edc0 5a02 	vstr	s11, [r0, #8]
 8013996:	edd5 4a01 	vldr	s9, [r5, #4]
 801399a:	edc0 4a05 	vstr	s9, [r0, #20]
 801399e:	ed95 5a02 	vldr	s10, [r5, #8]
 80139a2:	ed80 5a08 	vstr	s10, [r0, #32]
 80139a6:	ed94 4a02 	vldr	s8, [r4, #8]
 80139aa:	edd4 3a01 	vldr	s7, [r4, #4]
 80139ae:	ed94 6a00 	vldr	s12, [r4]
 80139b2:	ee64 6ac4 	vnmul.f32	s13, s9, s8
 80139b6:	ee65 7ae3 	vnmul.f32	s15, s11, s7
 80139ba:	eee3 6a85 	vfma.f32	s13, s7, s10
 80139be:	4603      	mov	r3, r0
 80139c0:	eee6 7a24 	vfma.f32	s15, s12, s9
 80139c4:	ee25 7a46 	vnmul.f32	s14, s10, s12
 80139c8:	eeb0 6ae6 	vabs.f32	s12, s13
 80139cc:	eeb4 6ac3 	vcmpe.f32	s12, s6
 80139d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139d4:	eea4 7a25 	vfma.f32	s14, s8, s11
 80139d8:	bfdc      	itt	le
 80139da:	ee86 4a83 	vdivle.f32	s8, s13, s6
 80139de:	eeb0 6a43 	vmovle.f32	s12, s6
 80139e2:	eef0 3ac7 	vabs.f32	s7, s14
 80139e6:	eef4 3ac6 	vcmpe.f32	s7, s12
 80139ea:	bfd4      	ite	le
 80139ec:	ee24 4a04 	vmulle.f32	s8, s8, s8
 80139f0:	eeb7 4a00 	vmovgt.f32	s8, #112	@ 0x3f800000  1.0
 80139f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139f8:	ed80 7a03 	vstr	s14, [r0, #12]
 80139fc:	edc0 7a06 	vstr	s15, [r0, #24]
 8013a00:	dc3f      	bgt.n	8013a82 <getRotationMatrix+0x10a>
 8013a02:	eec7 3a06 	vdiv.f32	s7, s14, s12
 8013a06:	eea3 4aa3 	vfma.f32	s8, s7, s7
 8013a0a:	eeb0 3a44 	vmov.f32	s6, s8
 8013a0e:	eeb0 4ae7 	vabs.f32	s8, s15
 8013a12:	eeb4 6ac4 	vcmpe.f32	s12, s8
 8013a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a1a:	d543      	bpl.n	8013aa4 <getRotationMatrix+0x12c>
 8013a1c:	eec6 2a04 	vdiv.f32	s5, s12, s8
 8013a20:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8013a24:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8013a28:	eeb0 6a44 	vmov.f32	s12, s8
 8013a2c:	eee3 3a22 	vfma.f32	s7, s6, s5
 8013a30:	eeb1 4ae3 	vsqrt.f32	s8, s7
 8013a34:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8013a38:	ee24 4a06 	vmul.f32	s8, s8, s12
 8013a3c:	ee83 6a84 	vdiv.f32	s12, s7, s8
 8013a40:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013a44:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013a48:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013a4c:	ee65 3a47 	vnmul.f32	s7, s10, s14
 8013a50:	ee25 4ae7 	vnmul.f32	s8, s11, s15
 8013a54:	ee24 6ae6 	vnmul.f32	s12, s9, s13
 8013a58:	eee7 3aa4 	vfma.f32	s7, s15, s9
 8013a5c:	eef0 4a44 	vmov.f32	s9, s8
 8013a60:	eee6 4a85 	vfma.f32	s9, s13, s10
 8013a64:	eea7 6a25 	vfma.f32	s12, s14, s11
 8013a68:	edc3 6a00 	vstr	s13, [r3]
 8013a6c:	ed83 7a03 	vstr	s14, [r3, #12]
 8013a70:	edc3 7a06 	vstr	s15, [r3, #24]
 8013a74:	edc3 3a01 	vstr	s7, [r3, #4]
 8013a78:	edc3 4a04 	vstr	s9, [r3, #16]
 8013a7c:	ed83 6a07 	vstr	s12, [r3, #28]
 8013a80:	bd38      	pop	{r3, r4, r5, pc}
 8013a82:	eec6 2a23 	vdiv.f32	s5, s12, s7
 8013a86:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 8013a8a:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8013a8e:	eeb0 6a63 	vmov.f32	s12, s7
 8013a92:	eea2 3a84 	vfma.f32	s6, s5, s8
 8013a96:	eeb0 4ae7 	vabs.f32	s8, s15
 8013a9a:	eeb4 6ac4 	vcmpe.f32	s12, s8
 8013a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aa2:	d4bb      	bmi.n	8013a1c <getRotationMatrix+0xa4>
 8013aa4:	ee87 4a86 	vdiv.f32	s8, s15, s12
 8013aa8:	eef0 3a43 	vmov.f32	s7, s6
 8013aac:	eee4 3a04 	vfma.f32	s7, s8, s8
 8013ab0:	e7be      	b.n	8013a30 <getRotationMatrix+0xb8>
 8013ab2:	bf00      	nop
 8013ab4:	00000000 	.word	0x00000000

08013ab8 <kf_update>:
 8013ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013abc:	ed2d 8b10 	vpush	{d8-d15}
 8013ac0:	f2ad 4d2c 	subw	sp, sp, #1068	@ 0x42c
 8013ac4:	461e      	mov	r6, r3
 8013ac6:	f8dd 4490 	ldr.w	r4, [sp, #1168]	@ 0x490
 8013aca:	ed9f 8a2a 	vldr	s16, [pc, #168]	@ 8013b74 <kf_update+0xbc>
 8013ace:	ed94 2a00 	vldr	s4, [r4]
 8013ad2:	edd4 2a01 	vldr	s5, [r4, #4]
 8013ad6:	ed94 3a02 	vldr	s6, [r4, #8]
 8013ada:	edd4 3a03 	vldr	s7, [r4, #12]
 8013ade:	ed94 4a04 	vldr	s8, [r4, #16]
 8013ae2:	edd4 4a05 	vldr	s9, [r4, #20]
 8013ae6:	ed94 5a06 	vldr	s10, [r4, #24]
 8013aea:	edd4 5a07 	vldr	s11, [r4, #28]
 8013aee:	ed94 6a08 	vldr	s12, [r4, #32]
 8013af2:	edd4 6a09 	vldr	s13, [r4, #36]	@ 0x24
 8013af6:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8013afa:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8013afe:	9201      	str	r2, [sp, #4]
 8013b00:	ab0b      	add	r3, sp, #44	@ 0x2c
 8013b02:	ee22 2a02 	vmul.f32	s4, s4, s4
 8013b06:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8013b0a:	ee23 3a03 	vmul.f32	s6, s6, s6
 8013b0e:	ee63 3aa3 	vmul.f32	s7, s7, s7
 8013b12:	ee24 4a04 	vmul.f32	s8, s8, s8
 8013b16:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8013b1a:	ee25 5a05 	vmul.f32	s10, s10, s10
 8013b1e:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8013b22:	ee26 6a06 	vmul.f32	s12, s12, s12
 8013b26:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8013b2a:	ee27 7a07 	vmul.f32	s14, s14, s14
 8013b2e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013b32:	3901      	subs	r1, #1
 8013b34:	9303      	str	r3, [sp, #12]
 8013b36:	2300      	movs	r3, #0
 8013b38:	4604      	mov	r4, r0
 8013b3a:	9104      	str	r1, [sp, #16]
 8013b3c:	ed8d 2a0b 	vstr	s4, [sp, #44]	@ 0x2c
 8013b40:	edcd 2a0c 	vstr	s5, [sp, #48]	@ 0x30
 8013b44:	ed8d 3a0d 	vstr	s6, [sp, #52]	@ 0x34
 8013b48:	edcd 3a0e 	vstr	s7, [sp, #56]	@ 0x38
 8013b4c:	ed8d 4a0f 	vstr	s8, [sp, #60]	@ 0x3c
 8013b50:	edcd 4a10 	vstr	s9, [sp, #64]	@ 0x40
 8013b54:	ed8d 5a11 	vstr	s10, [sp, #68]	@ 0x44
 8013b58:	edcd 5a12 	vstr	s11, [sp, #72]	@ 0x48
 8013b5c:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 8013b60:	edcd 6a14 	vstr	s13, [sp, #80]	@ 0x50
 8013b64:	ed8d 7a15 	vstr	s14, [sp, #84]	@ 0x54
 8013b68:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
 8013b6c:	9302      	str	r3, [sp, #8]
 8013b6e:	4637      	mov	r7, r6
 8013b70:	e010      	b.n	8013b94 <kf_update+0xdc>
 8013b72:	bf00      	nop
 8013b74:	00000000 	.word	0x00000000
 8013b78:	9a01      	ldr	r2, [sp, #4]
 8013b7a:	9b02      	ldr	r3, [sp, #8]
 8013b7c:	3204      	adds	r2, #4
 8013b7e:	9201      	str	r2, [sp, #4]
 8013b80:	9a03      	ldr	r2, [sp, #12]
 8013b82:	3301      	adds	r3, #1
 8013b84:	3204      	adds	r2, #4
 8013b86:	2b0c      	cmp	r3, #12
 8013b88:	9302      	str	r3, [sp, #8]
 8013b8a:	9203      	str	r2, [sp, #12]
 8013b8c:	f107 0704 	add.w	r7, r7, #4
 8013b90:	f000 85de 	beq.w	8014750 <kf_update+0xc98>
 8013b94:	9a04      	ldr	r2, [sp, #16]
 8013b96:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8013b9a:	9204      	str	r2, [sp, #16]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d0eb      	beq.n	8013b78 <kf_update+0xc0>
 8013ba0:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8013ba4:	ad17      	add	r5, sp, #92	@ 0x5c
 8013ba6:	edd7 da00 	vldr	s27, [r7]
 8013baa:	ed97 ea0c 	vldr	s28, [r7, #48]	@ 0x30
 8013bae:	edd7 ea18 	vldr	s29, [r7, #96]	@ 0x60
 8013bb2:	ed97 fa24 	vldr	s30, [r7, #144]	@ 0x90
 8013bb6:	edd7 fa30 	vldr	s31, [r7, #192]	@ 0xc0
 8013bba:	edd7 6a3c 	vldr	s13, [r7, #240]	@ 0xf0
 8013bbe:	ed97 6a48 	vldr	s12, [r7, #288]	@ 0x120
 8013bc2:	edd7 5a54 	vldr	s11, [r7, #336]	@ 0x150
 8013bc6:	ed97 5a60 	vldr	s10, [r7, #384]	@ 0x180
 8013bca:	9307      	str	r3, [sp, #28]
 8013bcc:	ed8d 8a17 	vstr	s16, [sp, #92]	@ 0x5c
 8013bd0:	ed8d 8a18 	vstr	s16, [sp, #96]	@ 0x60
 8013bd4:	ed8d 8a19 	vstr	s16, [sp, #100]	@ 0x64
 8013bd8:	ed8d 8a1a 	vstr	s16, [sp, #104]	@ 0x68
 8013bdc:	ed8d 8a1b 	vstr	s16, [sp, #108]	@ 0x6c
 8013be0:	ed8d 8a1c 	vstr	s16, [sp, #112]	@ 0x70
 8013be4:	ed8d 8a1d 	vstr	s16, [sp, #116]	@ 0x74
 8013be8:	ed8d 8a1e 	vstr	s16, [sp, #120]	@ 0x78
 8013bec:	ed8d 8a1f 	vstr	s16, [sp, #124]	@ 0x7c
 8013bf0:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 8013bf4:	462a      	mov	r2, r5
 8013bf6:	ecb3 7a01 	vldmia	r3!, {s14}
 8013bfa:	ecf2 7a01 	vldmia	r2!, {s15}
 8013bfe:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c06:	d006      	beq.n	8013c16 <kf_update+0x15e>
 8013c08:	eef5 da40 	vcmp.f32	s27, #0.0
 8013c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c10:	bf18      	it	ne
 8013c12:	eee7 7a2d 	vfmane.f32	s15, s14, s27
 8013c16:	ed93 7a08 	vldr	s14, [r3, #32]
 8013c1a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c22:	d006      	beq.n	8013c32 <kf_update+0x17a>
 8013c24:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8013c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c2c:	bf18      	it	ne
 8013c2e:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 8013c32:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8013c36:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c3e:	d006      	beq.n	8013c4e <kf_update+0x196>
 8013c40:	eef5 ea40 	vcmp.f32	s29, #0.0
 8013c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c48:	bf18      	it	ne
 8013c4a:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 8013c4e:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8013c52:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c5a:	d006      	beq.n	8013c6a <kf_update+0x1b2>
 8013c5c:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8013c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c64:	bf18      	it	ne
 8013c66:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 8013c6a:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8013c6e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c76:	d006      	beq.n	8013c86 <kf_update+0x1ce>
 8013c78:	eef5 fa40 	vcmp.f32	s31, #0.0
 8013c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c80:	bf18      	it	ne
 8013c82:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 8013c86:	ed93 7a2c 	vldr	s14, [r3, #176]	@ 0xb0
 8013c8a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c92:	d006      	beq.n	8013ca2 <kf_update+0x1ea>
 8013c94:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c9c:	bf18      	it	ne
 8013c9e:	eee7 7a26 	vfmane.f32	s15, s14, s13
 8013ca2:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 8013ca6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cae:	d006      	beq.n	8013cbe <kf_update+0x206>
 8013cb0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8013cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cb8:	bf18      	it	ne
 8013cba:	eee7 7a06 	vfmane.f32	s15, s14, s12
 8013cbe:	ed93 7a3e 	vldr	s14, [r3, #248]	@ 0xf8
 8013cc2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cca:	d006      	beq.n	8013cda <kf_update+0x222>
 8013ccc:	eef5 5a40 	vcmp.f32	s11, #0.0
 8013cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cd4:	bf18      	it	ne
 8013cd6:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8013cda:	ed93 7a47 	vldr	s14, [r3, #284]	@ 0x11c
 8013cde:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ce6:	d006      	beq.n	8013cf6 <kf_update+0x23e>
 8013ce8:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8013cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cf0:	bf18      	it	ne
 8013cf2:	eee7 7a05 	vfmane.f32	s15, s14, s10
 8013cf6:	4299      	cmp	r1, r3
 8013cf8:	ed42 7a01 	vstr	s15, [r2, #-4]
 8013cfc:	f47f af7b 	bne.w	8013bf6 <kf_update+0x13e>
 8013d00:	eef5 da40 	vcmp.f32	s27, #0.0
 8013d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d08:	eddd ba17 	vldr	s23, [sp, #92]	@ 0x5c
 8013d0c:	f000 84f8 	beq.w	8014700 <kf_update+0xc48>
 8013d10:	eef5 ba40 	vcmp.f32	s23, #0.0
 8013d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d18:	f000 8520 	beq.w	801475c <kf_update+0xca4>
 8013d1c:	ee6b 7aad 	vmul.f32	s15, s23, s27
 8013d20:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8013d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d28:	ed9d ca18 	vldr	s24, [sp, #96]	@ 0x60
 8013d2c:	d006      	beq.n	8013d3c <kf_update+0x284>
 8013d2e:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8013d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d36:	bf18      	it	ne
 8013d38:	eeec 7a0e 	vfmane.f32	s15, s24, s28
 8013d3c:	eef5 ea40 	vcmp.f32	s29, #0.0
 8013d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d44:	ed9d aa19 	vldr	s20, [sp, #100]	@ 0x64
 8013d48:	d006      	beq.n	8013d58 <kf_update+0x2a0>
 8013d4a:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8013d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d52:	bf18      	it	ne
 8013d54:	eeea 7a2e 	vfmane.f32	s15, s20, s29
 8013d58:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8013d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d60:	ed9d da1a 	vldr	s26, [sp, #104]	@ 0x68
 8013d64:	d006      	beq.n	8013d74 <kf_update+0x2bc>
 8013d66:	eeb5 da40 	vcmp.f32	s26, #0.0
 8013d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d6e:	bf18      	it	ne
 8013d70:	eeed 7a0f 	vfmane.f32	s15, s26, s30
 8013d74:	eef5 fa40 	vcmp.f32	s31, #0.0
 8013d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d7c:	eddd ca1b 	vldr	s25, [sp, #108]	@ 0x6c
 8013d80:	d006      	beq.n	8013d90 <kf_update+0x2d8>
 8013d82:	eef5 ca40 	vcmp.f32	s25, #0.0
 8013d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d8a:	bf18      	it	ne
 8013d8c:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 8013d90:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d98:	eddd aa1c 	vldr	s21, [sp, #112]	@ 0x70
 8013d9c:	d006      	beq.n	8013dac <kf_update+0x2f4>
 8013d9e:	eef5 aa40 	vcmp.f32	s21, #0.0
 8013da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013da6:	bf18      	it	ne
 8013da8:	eeea 7aa6 	vfmane.f32	s15, s21, s13
 8013dac:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8013db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013db4:	ed9d ba1d 	vldr	s22, [sp, #116]	@ 0x74
 8013db8:	d006      	beq.n	8013dc8 <kf_update+0x310>
 8013dba:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8013dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dc2:	bf18      	it	ne
 8013dc4:	eeeb 7a06 	vfmane.f32	s15, s22, s12
 8013dc8:	eef5 5a40 	vcmp.f32	s11, #0.0
 8013dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dd0:	eddd 9a1e 	vldr	s19, [sp, #120]	@ 0x78
 8013dd4:	d006      	beq.n	8013de4 <kf_update+0x32c>
 8013dd6:	eef5 9a40 	vcmp.f32	s19, #0.0
 8013dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dde:	bf18      	it	ne
 8013de0:	eee9 7aa5 	vfmane.f32	s15, s19, s11
 8013de4:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8013de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dec:	ed9d 7a1f 	vldr	s14, [sp, #124]	@ 0x7c
 8013df0:	d006      	beq.n	8013e00 <kf_update+0x348>
 8013df2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dfa:	bf18      	it	ne
 8013dfc:	eee7 7a05 	vfmane.f32	s15, s14, s10
 8013e00:	9b03      	ldr	r3, [sp, #12]
 8013e02:	ed93 4a00 	vldr	s8, [r3]
 8013e06:	9b02      	ldr	r3, [sp, #8]
 8013e08:	ee77 7a84 	vadd.f32	s15, s15, s8
 8013e0c:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8013e10:	ee84 9aa7 	vdiv.f32	s18, s9, s15
 8013e14:	2b05      	cmp	r3, #5
 8013e16:	ee69 ba2b 	vmul.f32	s23, s18, s23
 8013e1a:	ee29 ca0c 	vmul.f32	s24, s18, s24
 8013e1e:	ee29 aa0a 	vmul.f32	s20, s18, s20
 8013e22:	ee29 da0d 	vmul.f32	s26, s18, s26
 8013e26:	ee69 ca2c 	vmul.f32	s25, s18, s25
 8013e2a:	ee69 aa2a 	vmul.f32	s21, s18, s21
 8013e2e:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8013e32:	ee69 9a29 	vmul.f32	s19, s18, s19
 8013e36:	ee29 9a07 	vmul.f32	s18, s18, s14
 8013e3a:	edcd ba17 	vstr	s23, [sp, #92]	@ 0x5c
 8013e3e:	ed8d ca18 	vstr	s24, [sp, #96]	@ 0x60
 8013e42:	ed8d aa19 	vstr	s20, [sp, #100]	@ 0x64
 8013e46:	ed8d da1a 	vstr	s26, [sp, #104]	@ 0x68
 8013e4a:	edcd ca1b 	vstr	s25, [sp, #108]	@ 0x6c
 8013e4e:	edcd aa1c 	vstr	s21, [sp, #112]	@ 0x70
 8013e52:	ed8d ba1d 	vstr	s22, [sp, #116]	@ 0x74
 8013e56:	edcd 9a1e 	vstr	s19, [sp, #120]	@ 0x78
 8013e5a:	ed8d 9a1f 	vstr	s18, [sp, #124]	@ 0x7c
 8013e5e:	f340 844b 	ble.w	80146f8 <kf_update+0xc40>
 8013e62:	eef5 da40 	vcmp.f32	s27, #0.0
 8013e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e6a:	f000 847b 	beq.w	8014764 <kf_update+0xcac>
 8013e6e:	edd4 7a01 	vldr	s15, [r4, #4]
 8013e72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e7a:	f040 84d6 	bne.w	801482a <kf_update+0xd72>
 8013e7e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8013e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e86:	d008      	beq.n	8013e9a <kf_update+0x3e2>
 8013e88:	ed94 7a02 	vldr	s14, [r4, #8]
 8013e8c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e94:	bf18      	it	ne
 8013e96:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 8013e9a:	eef5 ea40 	vcmp.f32	s29, #0.0
 8013e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ea2:	d008      	beq.n	8013eb6 <kf_update+0x3fe>
 8013ea4:	ed94 7a03 	vldr	s14, [r4, #12]
 8013ea8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eb0:	bf18      	it	ne
 8013eb2:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 8013eb6:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8013eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ebe:	d008      	beq.n	8013ed2 <kf_update+0x41a>
 8013ec0:	ed94 7a04 	vldr	s14, [r4, #16]
 8013ec4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ecc:	bf18      	it	ne
 8013ece:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 8013ed2:	eef5 fa40 	vcmp.f32	s31, #0.0
 8013ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eda:	d008      	beq.n	8013eee <kf_update+0x436>
 8013edc:	ed94 7a05 	vldr	s14, [r4, #20]
 8013ee0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ee8:	bf18      	it	ne
 8013eea:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 8013eee:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ef6:	d008      	beq.n	8013f0a <kf_update+0x452>
 8013ef8:	ed94 7a06 	vldr	s14, [r4, #24]
 8013efc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f04:	bf18      	it	ne
 8013f06:	eee7 7a26 	vfmane.f32	s15, s14, s13
 8013f0a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8013f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f12:	d008      	beq.n	8013f26 <kf_update+0x46e>
 8013f14:	ed94 7a07 	vldr	s14, [r4, #28]
 8013f18:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f20:	bf18      	it	ne
 8013f22:	eee7 7a06 	vfmane.f32	s15, s14, s12
 8013f26:	eef5 5a40 	vcmp.f32	s11, #0.0
 8013f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f2e:	d008      	beq.n	8013f42 <kf_update+0x48a>
 8013f30:	ed94 7a08 	vldr	s14, [r4, #32]
 8013f34:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f3c:	bf18      	it	ne
 8013f3e:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8013f42:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8013f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f4a:	d008      	beq.n	8013f5e <kf_update+0x4a6>
 8013f4c:	ed94 7a09 	vldr	s14, [r4, #36]	@ 0x24
 8013f50:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f58:	bf18      	it	ne
 8013f5a:	eee7 7a05 	vfmane.f32	s15, s14, s10
 8013f5e:	9b01      	ldr	r3, [sp, #4]
 8013f60:	edd3 8a00 	vldr	s17, [r3]
 8013f64:	ee78 8ae7 	vsub.f32	s17, s17, s15
 8013f68:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8013f6c:	2100      	movs	r1, #0
 8013f6e:	a868      	add	r0, sp, #416	@ 0x1a0
 8013f70:	ed8d 5a09 	vstr	s10, [sp, #36]	@ 0x24
 8013f74:	edcd 5a08 	vstr	s11, [sp, #32]
 8013f78:	ed8d 6a06 	vstr	s12, [sp, #24]
 8013f7c:	edcd 6a05 	vstr	s13, [sp, #20]
 8013f80:	f00b fe41 	bl	801fc06 <memset>
 8013f84:	ab68      	add	r3, sp, #416	@ 0x1a0
 8013f86:	ed9d 5a09 	vldr	s10, [sp, #36]	@ 0x24
 8013f8a:	eddd 5a08 	vldr	s11, [sp, #32]
 8013f8e:	ed9d 6a06 	vldr	s12, [sp, #24]
 8013f92:	eddd 6a05 	vldr	s13, [sp, #20]
 8013f96:	a971      	add	r1, sp, #452	@ 0x1c4
 8013f98:	461a      	mov	r2, r3
 8013f9a:	ecf5 7a01 	vldmia	r5!, {s15}
 8013f9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fa6:	d062      	beq.n	801406e <kf_update+0x5b6>
 8013fa8:	eef5 da40 	vcmp.f32	s27, #0.0
 8013fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fb0:	d005      	beq.n	8013fbe <kf_update+0x506>
 8013fb2:	ed92 7a00 	vldr	s14, [r2]
 8013fb6:	eea7 7aad 	vfma.f32	s14, s15, s27
 8013fba:	ed82 7a00 	vstr	s14, [r2]
 8013fbe:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8013fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fc6:	d005      	beq.n	8013fd4 <kf_update+0x51c>
 8013fc8:	ed92 7a09 	vldr	s14, [r2, #36]	@ 0x24
 8013fcc:	eea7 7a8e 	vfma.f32	s14, s15, s28
 8013fd0:	ed82 7a09 	vstr	s14, [r2, #36]	@ 0x24
 8013fd4:	eef5 ea40 	vcmp.f32	s29, #0.0
 8013fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fdc:	d005      	beq.n	8013fea <kf_update+0x532>
 8013fde:	ed92 7a12 	vldr	s14, [r2, #72]	@ 0x48
 8013fe2:	eea7 7aae 	vfma.f32	s14, s15, s29
 8013fe6:	ed82 7a12 	vstr	s14, [r2, #72]	@ 0x48
 8013fea:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8013fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ff2:	d005      	beq.n	8014000 <kf_update+0x548>
 8013ff4:	ed92 7a1b 	vldr	s14, [r2, #108]	@ 0x6c
 8013ff8:	eea7 7a8f 	vfma.f32	s14, s15, s30
 8013ffc:	ed82 7a1b 	vstr	s14, [r2, #108]	@ 0x6c
 8014000:	eef5 fa40 	vcmp.f32	s31, #0.0
 8014004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014008:	d005      	beq.n	8014016 <kf_update+0x55e>
 801400a:	ed92 7a24 	vldr	s14, [r2, #144]	@ 0x90
 801400e:	eea7 7aaf 	vfma.f32	s14, s15, s31
 8014012:	ed82 7a24 	vstr	s14, [r2, #144]	@ 0x90
 8014016:	eef5 6a40 	vcmp.f32	s13, #0.0
 801401a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801401e:	d005      	beq.n	801402c <kf_update+0x574>
 8014020:	ed92 7a2d 	vldr	s14, [r2, #180]	@ 0xb4
 8014024:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014028:	ed82 7a2d 	vstr	s14, [r2, #180]	@ 0xb4
 801402c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8014030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014034:	d005      	beq.n	8014042 <kf_update+0x58a>
 8014036:	ed92 7a36 	vldr	s14, [r2, #216]	@ 0xd8
 801403a:	eea7 7a86 	vfma.f32	s14, s15, s12
 801403e:	ed82 7a36 	vstr	s14, [r2, #216]	@ 0xd8
 8014042:	eef5 5a40 	vcmp.f32	s11, #0.0
 8014046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801404a:	d005      	beq.n	8014058 <kf_update+0x5a0>
 801404c:	ed92 7a3f 	vldr	s14, [r2, #252]	@ 0xfc
 8014050:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8014054:	ed82 7a3f 	vstr	s14, [r2, #252]	@ 0xfc
 8014058:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801405c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014060:	d005      	beq.n	801406e <kf_update+0x5b6>
 8014062:	ed92 7a48 	vldr	s14, [r2, #288]	@ 0x120
 8014066:	eea7 7a85 	vfma.f32	s14, s15, s10
 801406a:	ed82 7a48 	vstr	s14, [r2, #288]	@ 0x120
 801406e:	3204      	adds	r2, #4
 8014070:	428a      	cmp	r2, r1
 8014072:	d192      	bne.n	8013f9a <kf_update+0x4e2>
 8014074:	adb9      	add	r5, sp, #740	@ 0x2e4
 8014076:	e9cd 5305 	strd	r5, r3, [sp, #20]
 801407a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801407e:	a968      	add	r1, sp, #416	@ 0x1a0
 8014080:	462a      	mov	r2, r5
 8014082:	f04f 0b06 	mov.w	fp, #6
 8014086:	f04f 0a03 	mov.w	sl, #3
 801408a:	f04f 0902 	mov.w	r9, #2
 801408e:	f04f 0804 	mov.w	r8, #4
 8014092:	f04f 0e05 	mov.w	lr, #5
 8014096:	f04f 0c07 	mov.w	ip, #7
 801409a:	2608      	movs	r6, #8
 801409c:	2000      	movs	r0, #0
 801409e:	ed82 8a00 	vstr	s16, [r2]
 80140a2:	2800      	cmp	r0, #0
 80140a4:	f000 8198 	beq.w	80143d8 <kf_update+0x920>
 80140a8:	edd1 7a00 	vldr	s15, [r1]
 80140ac:	ed82 8a01 	vstr	s16, [r2, #4]
 80140b0:	eef1 7a67 	vneg.f32	s15, s15
 80140b4:	2801      	cmp	r0, #1
 80140b6:	edc1 7a00 	vstr	s15, [r1]
 80140ba:	f000 8255 	beq.w	8014568 <kf_update+0xab0>
 80140be:	edd1 7a01 	vldr	s15, [r1, #4]
 80140c2:	ed82 8a02 	vstr	s16, [r2, #8]
 80140c6:	eef1 7a67 	vneg.f32	s15, s15
 80140ca:	2802      	cmp	r0, #2
 80140cc:	edc1 7a01 	vstr	s15, [r1, #4]
 80140d0:	f000 81f2 	beq.w	80144b8 <kf_update+0xa00>
 80140d4:	ab68      	add	r3, sp, #416	@ 0x1a0
 80140d6:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 80140da:	edd5 7a00 	vldr	s15, [r5]
 80140de:	ed82 8a03 	vstr	s16, [r2, #12]
 80140e2:	eef1 7a67 	vneg.f32	s15, s15
 80140e6:	2803      	cmp	r0, #3
 80140e8:	edc5 7a00 	vstr	s15, [r5]
 80140ec:	f040 8280 	bne.w	80145f0 <kf_update+0xb38>
 80140f0:	edd1 7a03 	vldr	s15, [r1, #12]
 80140f4:	ed8d 8ad8 	vstr	s16, [sp, #864]	@ 0x360
 80140f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80140fc:	ab68      	add	r3, sp, #416	@ 0x1a0
 80140fe:	edc1 7a03 	vstr	s15, [r1, #12]
 8014102:	eddd 7a87 	vldr	s15, [sp, #540]	@ 0x21c
 8014106:	ed82 8a05 	vstr	s16, [r2, #20]
 801410a:	eef1 7a67 	vneg.f32	s15, s15
 801410e:	edcd 7a87 	vstr	s15, [sp, #540]	@ 0x21c
 8014112:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 8014116:	edd5 7a00 	vldr	s15, [r5]
 801411a:	ed82 8a06 	vstr	s16, [r2, #24]
 801411e:	eef1 7a67 	vneg.f32	s15, s15
 8014122:	edc5 7a00 	vstr	s15, [r5]
 8014126:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 801412a:	edd5 7a00 	vldr	s15, [r5]
 801412e:	ed82 8a07 	vstr	s16, [r2, #28]
 8014132:	eef1 7a67 	vneg.f32	s15, s15
 8014136:	edc5 7a00 	vstr	s15, [r5]
 801413a:	ab68      	add	r3, sp, #416	@ 0x1a0
 801413c:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 8014140:	edd5 7a00 	vldr	s15, [r5]
 8014144:	ed82 8a08 	vstr	s16, [r2, #32]
 8014148:	eef1 7a67 	vneg.f32	s15, s15
 801414c:	2808      	cmp	r0, #8
 801414e:	edc5 7a00 	vstr	s15, [r5]
 8014152:	f040 818f 	bne.w	8014474 <kf_update+0x9bc>
 8014156:	aa68      	add	r2, sp, #416	@ 0x1a0
 8014158:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 801415c:	ed92 7a00 	vldr	s14, [r2]
 8014160:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014164:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014168:	e9dd 5305 	ldrd	r5, r3, [sp, #20]
 801416c:	edc2 7a00 	vstr	s15, [r2]
 8014170:	2600      	movs	r6, #0
 8014172:	f504 70a2 	add.w	r0, r4, #324	@ 0x144
 8014176:	ecf3 3a01 	vldmia	r3!, {s7}
 801417a:	ed93 4a08 	vldr	s8, [r3, #32]
 801417e:	edd3 4a11 	vldr	s9, [r3, #68]	@ 0x44
 8014182:	ed93 5a1a 	vldr	s10, [r3, #104]	@ 0x68
 8014186:	edd3 5a23 	vldr	s11, [r3, #140]	@ 0x8c
 801418a:	ed93 6a2c 	vldr	s12, [r3, #176]	@ 0xb0
 801418e:	edd3 6a35 	vldr	s13, [r3, #212]	@ 0xd4
 8014192:	ed93 7a3e 	vldr	s14, [r3, #248]	@ 0xf8
 8014196:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 801419a:	4629      	mov	r1, r5
 801419c:	4622      	mov	r2, r4
 801419e:	eef5 3a40 	vcmp.f32	s7, #0.0
 80141a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141a6:	d00c      	beq.n	80141c2 <kf_update+0x70a>
 80141a8:	ed92 3a0a 	vldr	s6, [r2, #40]	@ 0x28
 80141ac:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80141b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141b4:	d005      	beq.n	80141c2 <kf_update+0x70a>
 80141b6:	edd1 2a00 	vldr	s5, [r1]
 80141ba:	eee3 2a83 	vfma.f32	s5, s7, s6
 80141be:	edc1 2a00 	vstr	s5, [r1]
 80141c2:	eeb5 4a40 	vcmp.f32	s8, #0.0
 80141c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141ca:	d00c      	beq.n	80141e6 <kf_update+0x72e>
 80141cc:	ed92 3a0b 	vldr	s6, [r2, #44]	@ 0x2c
 80141d0:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80141d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141d8:	d005      	beq.n	80141e6 <kf_update+0x72e>
 80141da:	edd1 2a00 	vldr	s5, [r1]
 80141de:	eee4 2a03 	vfma.f32	s5, s8, s6
 80141e2:	edc1 2a00 	vstr	s5, [r1]
 80141e6:	eef5 4a40 	vcmp.f32	s9, #0.0
 80141ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141ee:	d00c      	beq.n	801420a <kf_update+0x752>
 80141f0:	ed92 3a0c 	vldr	s6, [r2, #48]	@ 0x30
 80141f4:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80141f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141fc:	d005      	beq.n	801420a <kf_update+0x752>
 80141fe:	edd1 2a00 	vldr	s5, [r1]
 8014202:	eee4 2a83 	vfma.f32	s5, s9, s6
 8014206:	edc1 2a00 	vstr	s5, [r1]
 801420a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801420e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014212:	d00c      	beq.n	801422e <kf_update+0x776>
 8014214:	ed92 3a0d 	vldr	s6, [r2, #52]	@ 0x34
 8014218:	eeb5 3a40 	vcmp.f32	s6, #0.0
 801421c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014220:	d005      	beq.n	801422e <kf_update+0x776>
 8014222:	edd1 2a00 	vldr	s5, [r1]
 8014226:	eee5 2a03 	vfma.f32	s5, s10, s6
 801422a:	edc1 2a00 	vstr	s5, [r1]
 801422e:	eef5 5a40 	vcmp.f32	s11, #0.0
 8014232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014236:	d00c      	beq.n	8014252 <kf_update+0x79a>
 8014238:	ed92 3a0e 	vldr	s6, [r2, #56]	@ 0x38
 801423c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8014240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014244:	d005      	beq.n	8014252 <kf_update+0x79a>
 8014246:	edd1 2a00 	vldr	s5, [r1]
 801424a:	eee5 2a83 	vfma.f32	s5, s11, s6
 801424e:	edc1 2a00 	vstr	s5, [r1]
 8014252:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8014256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801425a:	d00c      	beq.n	8014276 <kf_update+0x7be>
 801425c:	ed92 3a0f 	vldr	s6, [r2, #60]	@ 0x3c
 8014260:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8014264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014268:	d005      	beq.n	8014276 <kf_update+0x7be>
 801426a:	edd1 2a00 	vldr	s5, [r1]
 801426e:	eee6 2a03 	vfma.f32	s5, s12, s6
 8014272:	edc1 2a00 	vstr	s5, [r1]
 8014276:	eef5 6a40 	vcmp.f32	s13, #0.0
 801427a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801427e:	d00c      	beq.n	801429a <kf_update+0x7e2>
 8014280:	ed92 3a10 	vldr	s6, [r2, #64]	@ 0x40
 8014284:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8014288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801428c:	d005      	beq.n	801429a <kf_update+0x7e2>
 801428e:	edd1 2a00 	vldr	s5, [r1]
 8014292:	eee6 2a83 	vfma.f32	s5, s13, s6
 8014296:	edc1 2a00 	vstr	s5, [r1]
 801429a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801429e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142a2:	d00c      	beq.n	80142be <kf_update+0x806>
 80142a4:	ed92 3a11 	vldr	s6, [r2, #68]	@ 0x44
 80142a8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80142ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142b0:	d005      	beq.n	80142be <kf_update+0x806>
 80142b2:	edd1 2a00 	vldr	s5, [r1]
 80142b6:	eee7 2a03 	vfma.f32	s5, s14, s6
 80142ba:	edc1 2a00 	vstr	s5, [r1]
 80142be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80142c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142c6:	d00c      	beq.n	80142e2 <kf_update+0x82a>
 80142c8:	ed92 3a12 	vldr	s6, [r2, #72]	@ 0x48
 80142cc:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80142d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142d4:	d005      	beq.n	80142e2 <kf_update+0x82a>
 80142d6:	edd1 2a00 	vldr	s5, [r1]
 80142da:	eee7 2a83 	vfma.f32	s5, s15, s6
 80142de:	edc1 2a00 	vstr	s5, [r1]
 80142e2:	3224      	adds	r2, #36	@ 0x24
 80142e4:	4282      	cmp	r2, r0
 80142e6:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 80142ea:	f47f af58 	bne.w	801419e <kf_update+0x6e6>
 80142ee:	3601      	adds	r6, #1
 80142f0:	2e09      	cmp	r6, #9
 80142f2:	f105 0504 	add.w	r5, r5, #4
 80142f6:	f47f af3e 	bne.w	8014176 <kf_update+0x6be>
 80142fa:	9807      	ldr	r0, [sp, #28]
 80142fc:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8014300:	a9b9      	add	r1, sp, #740	@ 0x2e4
 8014302:	f00b fdaa 	bl	801fe5a <memcpy>
 8014306:	eef5 ba40 	vcmp.f32	s23, #0.0
 801430a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801430e:	f000 81a3 	beq.w	8014658 <kf_update+0xba0>
 8014312:	eef5 8a40 	vcmp.f32	s17, #0.0
 8014316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801431a:	f000 819d 	beq.w	8014658 <kf_update+0xba0>
 801431e:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8014322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014326:	ee68 baab 	vmul.f32	s23, s17, s23
 801432a:	f000 826f 	beq.w	801480c <kf_update+0xd54>
 801432e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8014332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014336:	ee2c ca28 	vmul.f32	s24, s24, s17
 801433a:	f000 8264 	beq.w	8014806 <kf_update+0xd4e>
 801433e:	eeb5 da40 	vcmp.f32	s26, #0.0
 8014342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014346:	ee68 7a8a 	vmul.f32	s15, s17, s20
 801434a:	f000 8257 	beq.w	80147fc <kf_update+0xd44>
 801434e:	eef5 ca40 	vcmp.f32	s25, #0.0
 8014352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014356:	ee28 7a8d 	vmul.f32	s14, s17, s26
 801435a:	eeb0 aa4c 	vmov.f32	s20, s24
 801435e:	f040 8272 	bne.w	8014846 <kf_update+0xd8e>
 8014362:	eef0 ca47 	vmov.f32	s25, s14
 8014366:	eeb0 da67 	vmov.f32	s26, s15
 801436a:	eef5 aa40 	vcmp.f32	s21, #0.0
 801436e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014372:	f000 81a8 	beq.w	80146c6 <kf_update+0xc0e>
 8014376:	eef5 8a40 	vcmp.f32	s17, #0.0
 801437a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801437e:	f000 8232 	beq.w	80147e6 <kf_update+0xd2e>
 8014382:	eddf 7ae1 	vldr	s15, [pc, #900]	@ 8014708 <kf_update+0xc50>
 8014386:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801438a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801438e:	ee28 7aaa 	vmul.f32	s14, s17, s21
 8014392:	f040 81bb 	bne.w	801470c <kf_update+0xc54>
 8014396:	eeb0 ba47 	vmov.f32	s22, s14
 801439a:	eef0 aa67 	vmov.f32	s21, s15
 801439e:	eef5 9a40 	vcmp.f32	s19, #0.0
 80143a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143a6:	f000 81bf 	beq.w	8014728 <kf_update+0xc70>
 80143aa:	eef5 8a40 	vcmp.f32	s17, #0.0
 80143ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143b2:	f000 821b 	beq.w	80147ec <kf_update+0xd34>
 80143b6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80143ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143be:	eddf 7ad2 	vldr	s15, [pc, #840]	@ 8014708 <kf_update+0xc50>
 80143c2:	ee28 7aa9 	vmul.f32	s14, s17, s19
 80143c6:	f040 826b 	bne.w	80148a0 <kf_update+0xde8>
 80143ca:	eef0 8a49 	vmov.f32	s17, s18
 80143ce:	eef0 9a67 	vmov.f32	s19, s15
 80143d2:	eeb0 9a47 	vmov.f32	s18, s14
 80143d6:	e1cb      	b.n	8014770 <kf_update+0xcb8>
 80143d8:	eddd 7a69 	vldr	s15, [sp, #420]	@ 0x1a4
 80143dc:	eddd 6a68 	vldr	s13, [sp, #416]	@ 0x1a0
 80143e0:	ed8d 8aba 	vstr	s16, [sp, #744]	@ 0x2e8
 80143e4:	ab68      	add	r3, sp, #416	@ 0x1a0
 80143e6:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 80143ea:	eef1 7a67 	vneg.f32	s15, s15
 80143ee:	edcd 7a69 	vstr	s15, [sp, #420]	@ 0x1a4
 80143f2:	edd5 7a00 	vldr	s15, [r5]
 80143f6:	ed82 8a02 	vstr	s16, [r2, #8]
 80143fa:	eef1 7a67 	vneg.f32	s15, s15
 80143fe:	edc5 7a00 	vstr	s15, [r5]
 8014402:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8014406:	edd5 7a00 	vldr	s15, [r5]
 801440a:	ed82 8a03 	vstr	s16, [r2, #12]
 801440e:	ee77 6a66 	vsub.f32	s13, s14, s13
 8014412:	eef1 7a67 	vneg.f32	s15, s15
 8014416:	edcd 6a68 	vstr	s13, [sp, #416]	@ 0x1a0
 801441a:	ed82 8a04 	vstr	s16, [r2, #16]
 801441e:	edc5 7a00 	vstr	s15, [r5]
 8014422:	ab68      	add	r3, sp, #416	@ 0x1a0
 8014424:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 8014428:	edd5 7a00 	vldr	s15, [r5]
 801442c:	ed82 8a05 	vstr	s16, [r2, #20]
 8014430:	eef1 7a67 	vneg.f32	s15, s15
 8014434:	2805      	cmp	r0, #5
 8014436:	edc5 7a00 	vstr	s15, [r5]
 801443a:	f040 80ba 	bne.w	80145b2 <kf_update+0xafa>
 801443e:	edd1 7a05 	vldr	s15, [r1, #20]
 8014442:	ed8d 8aec 	vstr	s16, [sp, #944]	@ 0x3b0
 8014446:	ee77 7a67 	vsub.f32	s15, s14, s15
 801444a:	ab68      	add	r3, sp, #416	@ 0x1a0
 801444c:	edc1 7a05 	vstr	s15, [r1, #20]
 8014450:	eddd 7a9b 	vldr	s15, [sp, #620]	@ 0x26c
 8014454:	ed82 8a07 	vstr	s16, [r2, #28]
 8014458:	eef1 7a67 	vneg.f32	s15, s15
 801445c:	ed82 8a08 	vstr	s16, [r2, #32]
 8014460:	edcd 7a9b 	vstr	s15, [sp, #620]	@ 0x26c
 8014464:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 8014468:	edd5 7a00 	vldr	s15, [r5]
 801446c:	eef1 7a67 	vneg.f32	s15, s15
 8014470:	edc5 7a00 	vstr	s15, [r5]
 8014474:	ab68      	add	r3, sp, #416	@ 0x1a0
 8014476:	eb03 0586 	add.w	r5, r3, r6, lsl #2
 801447a:	edd5 7a00 	vldr	s15, [r5]
 801447e:	3001      	adds	r0, #1
 8014480:	eef1 7a67 	vneg.f32	s15, s15
 8014484:	2809      	cmp	r0, #9
 8014486:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 801448a:	f10c 0c09 	add.w	ip, ip, #9
 801448e:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 8014492:	f10e 0e09 	add.w	lr, lr, #9
 8014496:	f108 0809 	add.w	r8, r8, #9
 801449a:	f109 0909 	add.w	r9, r9, #9
 801449e:	f10a 0a09 	add.w	sl, sl, #9
 80144a2:	f10b 0b09 	add.w	fp, fp, #9
 80144a6:	f106 0609 	add.w	r6, r6, #9
 80144aa:	edc5 7a00 	vstr	s15, [r5]
 80144ae:	f47f adf6 	bne.w	801409e <kf_update+0x5e6>
 80144b2:	e9dd 5305 	ldrd	r5, r3, [sp, #20]
 80144b6:	e65b      	b.n	8014170 <kf_update+0x6b8>
 80144b8:	edd1 7a02 	vldr	s15, [r1, #8]
 80144bc:	ed8d 8ace 	vstr	s16, [sp, #824]	@ 0x338
 80144c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80144c4:	ab68      	add	r3, sp, #416	@ 0x1a0
 80144c6:	edc1 7a02 	vstr	s15, [r1, #8]
 80144ca:	eddd 7a7d 	vldr	s15, [sp, #500]	@ 0x1f4
 80144ce:	ed82 8a04 	vstr	s16, [r2, #16]
 80144d2:	eef1 7a67 	vneg.f32	s15, s15
 80144d6:	edcd 7a7d 	vstr	s15, [sp, #500]	@ 0x1f4
 80144da:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 80144de:	edd5 7a00 	vldr	s15, [r5]
 80144e2:	ed82 8a05 	vstr	s16, [r2, #20]
 80144e6:	eef1 7a67 	vneg.f32	s15, s15
 80144ea:	edc5 7a00 	vstr	s15, [r5]
 80144ee:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 80144f2:	edd5 7a00 	vldr	s15, [r5]
 80144f6:	ed82 8a06 	vstr	s16, [r2, #24]
 80144fa:	eef1 7a67 	vneg.f32	s15, s15
 80144fe:	edc5 7a00 	vstr	s15, [r5]
 8014502:	ab68      	add	r3, sp, #416	@ 0x1a0
 8014504:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 8014508:	edd5 7a00 	vldr	s15, [r5]
 801450c:	ed82 8a07 	vstr	s16, [r2, #28]
 8014510:	eef1 7a67 	vneg.f32	s15, s15
 8014514:	2807      	cmp	r0, #7
 8014516:	edc5 7a00 	vstr	s15, [r5]
 801451a:	f47f ae0e 	bne.w	801413a <kf_update+0x682>
 801451e:	edd1 7a07 	vldr	s15, [r1, #28]
 8014522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014526:	f50d 6380 	add.w	r3, sp, #1024	@ 0x400
 801452a:	ed83 8a00 	vstr	s16, [r3]
 801452e:	edc1 7a07 	vstr	s15, [r1, #28]
 8014532:	2547      	movs	r5, #71	@ 0x47
 8014534:	ab68      	add	r3, sp, #416	@ 0x1a0
 8014536:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801453a:	edd5 7a00 	vldr	s15, [r5]
 801453e:	eef1 7a67 	vneg.f32	s15, s15
 8014542:	3001      	adds	r0, #1
 8014544:	edc5 7a00 	vstr	s15, [r5]
 8014548:	3224      	adds	r2, #36	@ 0x24
 801454a:	3609      	adds	r6, #9
 801454c:	f10c 0c09 	add.w	ip, ip, #9
 8014550:	3124      	adds	r1, #36	@ 0x24
 8014552:	f10e 0e09 	add.w	lr, lr, #9
 8014556:	f108 0809 	add.w	r8, r8, #9
 801455a:	f109 0909 	add.w	r9, r9, #9
 801455e:	f10a 0a09 	add.w	sl, sl, #9
 8014562:	f10b 0b09 	add.w	fp, fp, #9
 8014566:	e59a      	b.n	801409e <kf_update+0x5e6>
 8014568:	edd1 7a01 	vldr	s15, [r1, #4]
 801456c:	ed8d 8ac4 	vstr	s16, [sp, #784]	@ 0x310
 8014570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014574:	ab68      	add	r3, sp, #416	@ 0x1a0
 8014576:	edc1 7a01 	vstr	s15, [r1, #4]
 801457a:	eddd 7a73 	vldr	s15, [sp, #460]	@ 0x1cc
 801457e:	ed82 8a03 	vstr	s16, [r2, #12]
 8014582:	eef1 7a67 	vneg.f32	s15, s15
 8014586:	edcd 7a73 	vstr	s15, [sp, #460]	@ 0x1cc
 801458a:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 801458e:	edd5 7a00 	vldr	s15, [r5]
 8014592:	ed82 8a04 	vstr	s16, [r2, #16]
 8014596:	eef1 7a67 	vneg.f32	s15, s15
 801459a:	edc5 7a00 	vstr	s15, [r5]
 801459e:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 80145a2:	edd5 7a00 	vldr	s15, [r5]
 80145a6:	ed82 8a05 	vstr	s16, [r2, #20]
 80145aa:	eef1 7a67 	vneg.f32	s15, s15
 80145ae:	edc5 7a00 	vstr	s15, [r5]
 80145b2:	ab68      	add	r3, sp, #416	@ 0x1a0
 80145b4:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 80145b8:	edd5 7a00 	vldr	s15, [r5]
 80145bc:	ed82 8a06 	vstr	s16, [r2, #24]
 80145c0:	eef1 7a67 	vneg.f32	s15, s15
 80145c4:	2806      	cmp	r0, #6
 80145c6:	edc5 7a00 	vstr	s15, [r5]
 80145ca:	d19a      	bne.n	8014502 <kf_update+0xa4a>
 80145cc:	edd1 7a06 	vldr	s15, [r1, #24]
 80145d0:	ed8d 8af6 	vstr	s16, [sp, #984]	@ 0x3d8
 80145d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80145d8:	ed82 8a08 	vstr	s16, [r2, #32]
 80145dc:	edc1 7a06 	vstr	s15, [r1, #24]
 80145e0:	eddd 7aa5 	vldr	s15, [sp, #660]	@ 0x294
 80145e4:	eef1 7a67 	vneg.f32	s15, s15
 80145e8:	edcd 7aa5 	vstr	s15, [sp, #660]	@ 0x294
 80145ec:	4635      	mov	r5, r6
 80145ee:	e7a1      	b.n	8014534 <kf_update+0xa7c>
 80145f0:	ab68      	add	r3, sp, #416	@ 0x1a0
 80145f2:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 80145f6:	edd5 7a00 	vldr	s15, [r5]
 80145fa:	ed82 8a04 	vstr	s16, [r2, #16]
 80145fe:	eef1 7a67 	vneg.f32	s15, s15
 8014602:	2804      	cmp	r0, #4
 8014604:	edc5 7a00 	vstr	s15, [r5]
 8014608:	f47f af0b 	bne.w	8014422 <kf_update+0x96a>
 801460c:	edd1 7a04 	vldr	s15, [r1, #16]
 8014610:	ed8d 8ae2 	vstr	s16, [sp, #904]	@ 0x388
 8014614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014618:	ab68      	add	r3, sp, #416	@ 0x1a0
 801461a:	edc1 7a04 	vstr	s15, [r1, #16]
 801461e:	eddd 7a91 	vldr	s15, [sp, #580]	@ 0x244
 8014622:	ed82 8a06 	vstr	s16, [r2, #24]
 8014626:	eef1 7a67 	vneg.f32	s15, s15
 801462a:	edcd 7a91 	vstr	s15, [sp, #580]	@ 0x244
 801462e:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 8014632:	edd5 7a00 	vldr	s15, [r5]
 8014636:	ed82 8a07 	vstr	s16, [r2, #28]
 801463a:	eef1 7a67 	vneg.f32	s15, s15
 801463e:	edc5 7a00 	vstr	s15, [r5]
 8014642:	ed82 8a08 	vstr	s16, [r2, #32]
 8014646:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 801464a:	edd5 7a00 	vldr	s15, [r5]
 801464e:	eef1 7a67 	vneg.f32	s15, s15
 8014652:	edc5 7a00 	vstr	s15, [r5]
 8014656:	e70d      	b.n	8014474 <kf_update+0x9bc>
 8014658:	eeb5 ca40 	vcmp.f32	s24, #0.0
 801465c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014660:	d005      	beq.n	801466e <kf_update+0xbb6>
 8014662:	eef5 8a40 	vcmp.f32	s17, #0.0
 8014666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801466a:	f040 80fa 	bne.w	8014862 <kf_update+0xdaa>
 801466e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8014672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014676:	d068      	beq.n	801474a <kf_update+0xc92>
 8014678:	eef5 8a40 	vcmp.f32	s17, #0.0
 801467c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014680:	f040 8117 	bne.w	80148b2 <kf_update+0xdfa>
 8014684:	eeb0 aa68 	vmov.f32	s20, s17
 8014688:	eef0 ba68 	vmov.f32	s23, s17
 801468c:	eeb5 da40 	vcmp.f32	s26, #0.0
 8014690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014694:	d007      	beq.n	80146a6 <kf_update+0xbee>
 8014696:	eef5 8a40 	vcmp.f32	s17, #0.0
 801469a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801469e:	f040 80c8 	bne.w	8014832 <kf_update+0xd7a>
 80146a2:	eeb0 da68 	vmov.f32	s26, s17
 80146a6:	eef5 ca40 	vcmp.f32	s25, #0.0
 80146aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146ae:	f43f ae5c 	beq.w	801436a <kf_update+0x8b2>
 80146b2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80146b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146ba:	f040 80f7 	bne.w	80148ac <kf_update+0xdf4>
 80146be:	eef0 aa68 	vmov.f32	s21, s17
 80146c2:	eef0 ca68 	vmov.f32	s25, s17
 80146c6:	eeb5 ba40 	vcmp.f32	s22, #0.0
 80146ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146ce:	f43f ae66 	beq.w	801439e <kf_update+0x8e6>
 80146d2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80146d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146da:	f040 80cd 	bne.w	8014878 <kf_update+0xdc0>
 80146de:	eef5 9a40 	vcmp.f32	s19, #0.0
 80146e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146e6:	f000 8086 	beq.w	80147f6 <kf_update+0xd3e>
 80146ea:	eeb0 9a68 	vmov.f32	s18, s17
 80146ee:	eef0 9a68 	vmov.f32	s19, s17
 80146f2:	eeb0 ba68 	vmov.f32	s22, s17
 80146f6:	e03b      	b.n	8014770 <kf_update+0xcb8>
 80146f8:	9b01      	ldr	r3, [sp, #4]
 80146fa:	edd3 8a00 	vldr	s17, [r3]
 80146fe:	e433      	b.n	8013f68 <kf_update+0x4b0>
 8014700:	eef0 7a6d 	vmov.f32	s15, s27
 8014704:	f7ff bb0c 	b.w	8013d20 <kf_update+0x268>
 8014708:	00000000 	.word	0x00000000
 801470c:	eef5 9a40 	vcmp.f32	s19, #0.0
 8014710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014714:	eef0 aa67 	vmov.f32	s21, s15
 8014718:	ee68 7a8b 	vmul.f32	s15, s17, s22
 801471c:	f040 80b6 	bne.w	801488c <kf_update+0xdd4>
 8014720:	eef0 9a67 	vmov.f32	s19, s15
 8014724:	eeb0 ba47 	vmov.f32	s22, s14
 8014728:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801472c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014730:	d01c      	beq.n	801476c <kf_update+0xcb4>
 8014732:	eef5 8a40 	vcmp.f32	s17, #0.0
 8014736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801473a:	d051      	beq.n	80147e0 <kf_update+0xd28>
 801473c:	ed1f 7a0e 	vldr	s14, [pc, #-56]	@ 8014708 <kf_update+0xc50>
 8014740:	ee68 8a89 	vmul.f32	s17, s17, s18
 8014744:	eeb0 9a47 	vmov.f32	s18, s14
 8014748:	e012      	b.n	8014770 <kf_update+0xcb8>
 801474a:	eef0 ba4a 	vmov.f32	s23, s20
 801474e:	e79d      	b.n	801468c <kf_update+0xbd4>
 8014750:	f20d 4d2c 	addw	sp, sp, #1068	@ 0x42c
 8014754:	ecbd 8b10 	vpop	{d8-d15}
 8014758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801475c:	eef0 7a6b 	vmov.f32	s15, s23
 8014760:	f7ff bade 	b.w	8013d20 <kf_update+0x268>
 8014764:	eef0 7a6d 	vmov.f32	s15, s27
 8014768:	f7ff bb89 	b.w	8013e7e <kf_update+0x3c6>
 801476c:	eef0 8a49 	vmov.f32	s17, s18
 8014770:	edd4 3a01 	vldr	s7, [r4, #4]
 8014774:	ed94 4a02 	vldr	s8, [r4, #8]
 8014778:	edd4 4a03 	vldr	s9, [r4, #12]
 801477c:	ed94 5a04 	vldr	s10, [r4, #16]
 8014780:	edd4 5a05 	vldr	s11, [r4, #20]
 8014784:	ed94 6a06 	vldr	s12, [r4, #24]
 8014788:	edd4 6a07 	vldr	s13, [r4, #28]
 801478c:	ed94 7a08 	vldr	s14, [r4, #32]
 8014790:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 8014794:	ee73 3aab 	vadd.f32	s7, s7, s23
 8014798:	ee34 4a0a 	vadd.f32	s8, s8, s20
 801479c:	ee74 4a8d 	vadd.f32	s9, s9, s26
 80147a0:	ee35 5a2c 	vadd.f32	s10, s10, s25
 80147a4:	ee75 5aaa 	vadd.f32	s11, s11, s21
 80147a8:	ee36 6a0b 	vadd.f32	s12, s12, s22
 80147ac:	ee76 6aa9 	vadd.f32	s13, s13, s19
 80147b0:	ee37 7a09 	vadd.f32	s14, s14, s18
 80147b4:	ee77 7aa8 	vadd.f32	s15, s15, s17
 80147b8:	edc4 3a01 	vstr	s7, [r4, #4]
 80147bc:	ed84 4a02 	vstr	s8, [r4, #8]
 80147c0:	edc4 4a03 	vstr	s9, [r4, #12]
 80147c4:	ed84 5a04 	vstr	s10, [r4, #16]
 80147c8:	edc4 5a05 	vstr	s11, [r4, #20]
 80147cc:	ed84 6a06 	vstr	s12, [r4, #24]
 80147d0:	edc4 6a07 	vstr	s13, [r4, #28]
 80147d4:	ed84 7a08 	vstr	s14, [r4, #32]
 80147d8:	edc4 7a09 	vstr	s15, [r4, #36]	@ 0x24
 80147dc:	f7ff b9cc 	b.w	8013b78 <kf_update+0xc0>
 80147e0:	eeb0 9a68 	vmov.f32	s18, s17
 80147e4:	e7c4      	b.n	8014770 <kf_update+0xcb8>
 80147e6:	eef0 aa68 	vmov.f32	s21, s17
 80147ea:	e76c      	b.n	80146c6 <kf_update+0xc0e>
 80147ec:	eeb0 9a68 	vmov.f32	s18, s17
 80147f0:	eef0 9a68 	vmov.f32	s19, s17
 80147f4:	e7bc      	b.n	8014770 <kf_update+0xcb8>
 80147f6:	eeb0 ba69 	vmov.f32	s22, s19
 80147fa:	e795      	b.n	8014728 <kf_update+0xc70>
 80147fc:	eeb0 da67 	vmov.f32	s26, s15
 8014800:	eeb0 aa4c 	vmov.f32	s20, s24
 8014804:	e74f      	b.n	80146a6 <kf_update+0xbee>
 8014806:	eeb0 aa4c 	vmov.f32	s20, s24
 801480a:	e73f      	b.n	801468c <kf_update+0xbd4>
 801480c:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8014810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014814:	f43f af3a 	beq.w	801468c <kf_update+0xbd4>
 8014818:	eeb5 da40 	vcmp.f32	s26, #0.0
 801481c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014820:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8014824:	f47f ad93 	bne.w	801434e <kf_update+0x896>
 8014828:	e7e8      	b.n	80147fc <kf_update+0xd44>
 801482a:	ee67 7aad 	vmul.f32	s15, s15, s27
 801482e:	f7ff bb26 	b.w	8013e7e <kf_update+0x3c6>
 8014832:	eef5 ca40 	vcmp.f32	s25, #0.0
 8014836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801483a:	ed5f 7a4d 	vldr	s15, [pc, #-308]	@ 8014708 <kf_update+0xc50>
 801483e:	ee28 7a8d 	vmul.f32	s14, s17, s26
 8014842:	f43f ad8e 	beq.w	8014362 <kf_update+0x8aa>
 8014846:	eeb0 da67 	vmov.f32	s26, s15
 801484a:	eef5 aa40 	vcmp.f32	s21, #0.0
 801484e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014852:	ee68 7aac 	vmul.f32	s15, s17, s25
 8014856:	d126      	bne.n	80148a6 <kf_update+0xdee>
 8014858:	eef0 aa67 	vmov.f32	s21, s15
 801485c:	eef0 ca47 	vmov.f32	s25, s14
 8014860:	e731      	b.n	80146c6 <kf_update+0xc0e>
 8014862:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8014866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801486a:	ed5f ba59 	vldr	s23, [pc, #-356]	@ 8014708 <kf_update+0xc50>
 801486e:	ee2c ca28 	vmul.f32	s24, s24, s17
 8014872:	f47f ad64 	bne.w	801433e <kf_update+0x886>
 8014876:	e7c6      	b.n	8014806 <kf_update+0xd4e>
 8014878:	eef5 9a40 	vcmp.f32	s19, #0.0
 801487c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014880:	ed1f 7a5f 	vldr	s14, [pc, #-380]	@ 8014708 <kf_update+0xc50>
 8014884:	ee68 7a8b 	vmul.f32	s15, s17, s22
 8014888:	f43f af4a 	beq.w	8014720 <kf_update+0xc68>
 801488c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8014890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014894:	eeb0 ba47 	vmov.f32	s22, s14
 8014898:	ee28 7aa9 	vmul.f32	s14, s17, s19
 801489c:	f43f ad95 	beq.w	80143ca <kf_update+0x912>
 80148a0:	eef0 9a67 	vmov.f32	s19, s15
 80148a4:	e74c      	b.n	8014740 <kf_update+0xc88>
 80148a6:	eef0 ca47 	vmov.f32	s25, s14
 80148aa:	e56c      	b.n	8014386 <kf_update+0x8ce>
 80148ac:	ed1f 7a6a 	vldr	s14, [pc, #-424]	@ 8014708 <kf_update+0xc50>
 80148b0:	e7cb      	b.n	801484a <kf_update+0xd92>
 80148b2:	ed1f ca6b 	vldr	s24, [pc, #-428]	@ 8014708 <kf_update+0xc50>
 80148b6:	eeb5 da40 	vcmp.f32	s26, #0.0
 80148ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148be:	ee68 7a8a 	vmul.f32	s15, s17, s20
 80148c2:	eef0 ba4c 	vmov.f32	s23, s24
 80148c6:	f47f ad42 	bne.w	801434e <kf_update+0x896>
 80148ca:	e797      	b.n	80147fc <kf_update+0xd44>

080148cc <q2hpr>:
 80148cc:	b510      	push	{r4, lr}
 80148ce:	edd0 7a00 	vldr	s15, [r0]
 80148d2:	edd0 5a01 	vldr	s11, [r0, #4]
 80148d6:	ed90 7a02 	vldr	s14, [r0, #8]
 80148da:	ed90 5a03 	vldr	s10, [r0, #12]
 80148de:	ee67 0aa7 	vmul.f32	s1, s15, s15
 80148e2:	ee25 6aa5 	vmul.f32	s12, s11, s11
 80148e6:	ee65 6a87 	vmul.f32	s13, s11, s14
 80148ea:	ee25 0a65 	vnmul.f32	s0, s10, s11
 80148ee:	ed2d 8b08 	vpush	{d8-d11}
 80148f2:	eea7 0a87 	vfma.f32	s0, s15, s14
 80148f6:	460c      	mov	r4, r1
 80148f8:	eee7 6a85 	vfma.f32	s13, s15, s10
 80148fc:	ee36 aa06 	vadd.f32	s20, s12, s12
 8014900:	ee70 0aa0 	vadd.f32	s1, s1, s1
 8014904:	ee27 6a07 	vmul.f32	s12, s14, s14
 8014908:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801490c:	ee27 7a05 	vmul.f32	s14, s14, s10
 8014910:	ee30 ba8a 	vadd.f32	s22, s1, s20
 8014914:	eef7 ba00 	vmov.f32	s23, #112	@ 0x3f800000  1.0
 8014918:	ee76 aa06 	vadd.f32	s21, s12, s12
 801491c:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8014920:	ee77 8a07 	vadd.f32	s17, s14, s14
 8014924:	ee70 9a00 	vadd.f32	s19, s0, s0
 8014928:	ee36 9aa6 	vadd.f32	s18, s13, s13
 801492c:	ee3b bacb 	vsub.f32	s22, s23, s22
 8014930:	bb6a      	cbnz	r2, 801498e <q2hpr+0xc2>
 8014932:	ee70 0aaa 	vadd.f32	s1, s1, s21
 8014936:	ee38 0a68 	vsub.f32	s0, s16, s17
 801493a:	ee7b 0ae0 	vsub.f32	s1, s23, s1
 801493e:	f008 f96b 	bl	801cc18 <atan2f>
 8014942:	eeb0 8a40 	vmov.f32	s16, s0
 8014946:	eeb0 0a49 	vmov.f32	s0, s18
 801494a:	f008 f939 	bl	801cbc0 <asinf>
 801494e:	eef0 0a4b 	vmov.f32	s1, s22
 8014952:	eef0 8a40 	vmov.f32	s17, s0
 8014956:	eeb0 0a69 	vmov.f32	s0, s19
 801495a:	f008 f95d 	bl	801cc18 <atan2f>
 801495e:	eef1 8a68 	vneg.f32	s17, s17
 8014962:	eeb0 9a40 	vmov.f32	s18, s0
 8014966:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801496a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801496e:	ed84 8a00 	vstr	s16, [r4]
 8014972:	ed84 9a02 	vstr	s18, [r4, #8]
 8014976:	edc4 8a01 	vstr	s17, [r4, #4]
 801497a:	d505      	bpl.n	8014988 <q2hpr+0xbc>
 801497c:	eddf 7a13 	vldr	s15, [pc, #76]	@ 80149cc <q2hpr+0x100>
 8014980:	ee38 8a27 	vadd.f32	s16, s16, s15
 8014984:	ed84 8a00 	vstr	s16, [r4]
 8014988:	ecbd 8b08 	vpop	{d8-d11}
 801498c:	bd10      	pop	{r4, pc}
 801498e:	eeb0 0a69 	vmov.f32	s0, s19
 8014992:	f008 f915 	bl	801cbc0 <asinf>
 8014996:	eef0 0a4b 	vmov.f32	s1, s22
 801499a:	eef0 7a40 	vmov.f32	s15, s0
 801499e:	eeb0 0a49 	vmov.f32	s0, s18
 80149a2:	eeb0 9a67 	vmov.f32	s18, s15
 80149a6:	f008 f937 	bl	801cc18 <atan2f>
 80149aa:	ee7a 0a2a 	vadd.f32	s1, s20, s21
 80149ae:	eeb0 7a40 	vmov.f32	s14, s0
 80149b2:	ee38 0a28 	vadd.f32	s0, s16, s17
 80149b6:	ee7b 0ae0 	vsub.f32	s1, s23, s1
 80149ba:	eeb1 0a40 	vneg.f32	s0, s0
 80149be:	eef1 8a47 	vneg.f32	s17, s14
 80149c2:	f008 f929 	bl	801cc18 <atan2f>
 80149c6:	eeb0 8a40 	vmov.f32	s16, s0
 80149ca:	e7cc      	b.n	8014966 <q2hpr+0x9a>
 80149cc:	40c90fdb 	.word	0x40c90fdb

080149d0 <llEvaluate.constprop.0>:
 80149d0:	ed92 7a00 	vldr	s14, [r2]
 80149d4:	edd0 7a00 	vldr	s15, [r0]
 80149d8:	edd0 1a04 	vldr	s3, [r0, #16]
 80149dc:	ed92 6a01 	vldr	s12, [r2, #4]
 80149e0:	ed90 3a05 	vldr	s6, [r0, #20]
 80149e4:	ed90 2a08 	vldr	s4, [r0, #32]
 80149e8:	edd0 2a0c 	vldr	s5, [r0, #48]	@ 0x30
 80149ec:	edd0 3a09 	vldr	s7, [r0, #36]	@ 0x24
 80149f0:	edd0 4a0a 	vldr	s9, [r0, #40]	@ 0x28
 80149f4:	ed90 4a0d 	vldr	s8, [r0, #52]	@ 0x34
 80149f8:	ed90 5a0e 	vldr	s10, [r0, #56]	@ 0x38
 80149fc:	edd0 5a0f 	vldr	s11, [r0, #60]	@ 0x3c
 8014a00:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a08:	b084      	sub	sp, #16
 8014a0a:	f10d 0810 	add.w	r8, sp, #16
 8014a0e:	f101 0e10 	add.w	lr, r1, #16
 8014a12:	4606      	mov	r6, r0
 8014a14:	2703      	movs	r7, #3
 8014a16:	2504      	movs	r5, #4
 8014a18:	ed92 7a02 	vldr	s14, [r2, #8]
 8014a1c:	edd2 7a03 	vldr	s15, [r2, #12]
 8014a20:	edcd 6a00 	vstr	s13, [sp]
 8014a24:	eea6 6ae1 	vfms.f32	s12, s13, s3
 8014a28:	eea6 7ac2 	vfms.f32	s14, s13, s4
 8014a2c:	eee6 7ae2 	vfms.f32	s15, s13, s5
 8014a30:	eec6 6a03 	vdiv.f32	s13, s12, s6
 8014a34:	eea6 7ae3 	vfms.f32	s14, s13, s7
 8014a38:	eee4 7a66 	vfms.f32	s15, s8, s13
 8014a3c:	edcd 6a01 	vstr	s13, [sp, #4]
 8014a40:	eec7 6a24 	vdiv.f32	s13, s14, s9
 8014a44:	eee5 7a66 	vfms.f32	s15, s10, s13
 8014a48:	edcd 6a02 	vstr	s13, [sp, #8]
 8014a4c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8014a50:	ed8d 7a03 	vstr	s14, [sp, #12]
 8014a54:	ed78 7a01 	vldmdb	r8!, {s15}
 8014a58:	2d04      	cmp	r5, #4
 8014a5a:	b26b      	sxtb	r3, r5
 8014a5c:	ed6e 7a01 	vstmdb	lr!, {s15}
 8014a60:	d023      	beq.n	8014aaa <llEvaluate.constprop.0+0xda>
 8014a62:	00bc      	lsls	r4, r7, #2
 8014a64:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 8014a68:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8014a6c:	4422      	add	r2, r4
 8014a6e:	edd2 6a00 	vldr	s13, [r2]
 8014a72:	ed9c 7a00 	vldr	s14, [ip]
 8014a76:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8014a7a:	3301      	adds	r3, #1
 8014a7c:	b2da      	uxtb	r2, r3
 8014a7e:	2a04      	cmp	r2, #4
 8014a80:	b25b      	sxtb	r3, r3
 8014a82:	edce 7a00 	vstr	s15, [lr]
 8014a86:	d1ed      	bne.n	8014a64 <llEvaluate.constprop.0+0x94>
 8014a88:	edd6 6a0f 	vldr	s13, [r6, #60]	@ 0x3c
 8014a8c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014a90:	3d01      	subs	r5, #1
 8014a92:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 8014a96:	f107 37ff 	add.w	r7, r7, #4294967295	@ 0xffffffff
 8014a9a:	f1a6 0614 	sub.w	r6, r6, #20
 8014a9e:	ed8e 7a00 	vstr	s14, [lr]
 8014aa2:	d1d7      	bne.n	8014a54 <llEvaluate.constprop.0+0x84>
 8014aa4:	b004      	add	sp, #16
 8014aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014aaa:	edd6 6a0f 	vldr	s13, [r6, #60]	@ 0x3c
 8014aae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014ab2:	3f01      	subs	r7, #1
 8014ab4:	3e14      	subs	r6, #20
 8014ab6:	2503      	movs	r5, #3
 8014ab8:	ed8e 7a00 	vstr	s14, [lr]
 8014abc:	e7ca      	b.n	8014a54 <llEvaluate.constprop.0+0x84>
 8014abe:	bf00      	nop

08014ac0 <getMagStats.constprop.0>:
 8014ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ac4:	4d72      	ldr	r5, [pc, #456]	@ (8014c90 <getMagStats.constprop.0+0x1d0>)
 8014ac6:	2400      	movs	r4, #0
 8014ac8:	601c      	str	r4, [r3, #0]
 8014aca:	6014      	str	r4, [r2, #0]
 8014acc:	f895 40a1 	ldrb.w	r4, [r5, #161]	@ 0xa1
 8014ad0:	f995 60a2 	ldrsb.w	r6, [r5, #162]	@ 0xa2
 8014ad4:	4684      	mov	ip, r0
 8014ad6:	f895 00a0 	ldrb.w	r0, [r5, #160]	@ 0xa0
 8014ada:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014ade:	42a0      	cmp	r0, r4
 8014ae0:	eec7 5a80 	vdiv.f32	s11, s15, s0
 8014ae4:	f106 0601 	add.w	r6, r6, #1
 8014ae8:	ee04 0a90 	vmov	s9, r0
 8014aec:	f000 80c6 	beq.w	8014c7c <getMagStats.constprop.0+0x1bc>
 8014af0:	1a36      	subs	r6, r6, r0
 8014af2:	fb96 f7f4 	sdiv	r7, r6, r4
 8014af6:	fb04 6617 	mls	r6, r4, r7, r6
 8014afa:	2e00      	cmp	r6, #0
 8014afc:	bfb8      	it	lt
 8014afe:	1936      	addlt	r6, r6, r4
 8014b00:	fa0f fe86 	sxth.w	lr, r6
 8014b04:	ed9f 5a63 	vldr	s10, [pc, #396]	@ 8014c94 <getMagStats.constprop.0+0x1d4>
 8014b08:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8014b0c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8014b10:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8014b14:	2800      	cmp	r0, #0
 8014b16:	f000 80b8 	beq.w	8014c8a <getMagStats.constprop.0+0x1ca>
 8014b1a:	eb00 090e 	add.w	r9, r0, lr
 8014b1e:	ed9f 3a5e 	vldr	s6, [pc, #376]	@ 8014c98 <getMagStats.constprop.0+0x1d8>
 8014b22:	f8bc 8000 	ldrh.w	r8, [ip]
 8014b26:	f8bc 7002 	ldrh.w	r7, [ip, #2]
 8014b2a:	f8bc 6004 	ldrh.w	r6, [ip, #4]
 8014b2e:	2000      	movs	r0, #0
 8014b30:	e001      	b.n	8014b36 <getMagStats.constprop.0+0x76>
 8014b32:	ed92 3a00 	vldr	s6, [r2]
 8014b36:	fb9e fcf4 	sdiv	ip, lr, r4
 8014b3a:	fb04 ec1c 	mls	ip, r4, ip, lr
 8014b3e:	fa5f fc8c 	uxtb.w	ip, ip
 8014b42:	f10c 0c04 	add.w	ip, ip, #4
 8014b46:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8014b4a:	edd1 3a00 	vldr	s7, [r1]
 8014b4e:	f8bc a0a2 	ldrh.w	sl, [ip, #162]	@ 0xa2
 8014b52:	f8bc b0a4 	ldrh.w	fp, [ip, #164]	@ 0xa4
 8014b56:	f8bc c0a6 	ldrh.w	ip, [ip, #166]	@ 0xa6
 8014b5a:	ed91 4a04 	vldr	s8, [r1, #16]
 8014b5e:	ed91 6a08 	vldr	s12, [r1, #32]
 8014b62:	ebaa 0a08 	sub.w	sl, sl, r8
 8014b66:	ebab 0b07 	sub.w	fp, fp, r7
 8014b6a:	fa0f fa8a 	sxth.w	sl, sl
 8014b6e:	ee07 aa10 	vmov	s14, sl
 8014b72:	fa0f fa8b 	sxth.w	sl, fp
 8014b76:	ee06 aa90 	vmov	s13, sl
 8014b7a:	ebac 0c06 	sub.w	ip, ip, r6
 8014b7e:	fa0f fc8c 	sxth.w	ip, ip
 8014b82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014b86:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014b8a:	ee07 ca90 	vmov	s15, ip
 8014b8e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8014b92:	ee66 6a84 	vmul.f32	s13, s13, s8
 8014b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b9a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014b9e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8014ba2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014ba6:	ee17 ca10 	vmov	ip, s14
 8014baa:	ee16 ba90 	vmov	fp, s13
 8014bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014bb2:	fa0f fc8c 	sxth.w	ip, ip
 8014bb6:	fb1b fb0b 	smulbb	fp, fp, fp
 8014bba:	fb0c bb0c 	mla	fp, ip, ip, fp
 8014bbe:	ee17 ca90 	vmov	ip, s15
 8014bc2:	fa0f fc8c 	sxth.w	ip, ip
 8014bc6:	fb0c bc0c 	mla	ip, ip, ip, fp
 8014bca:	ee07 ca90 	vmov	s15, ip
 8014bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014bd2:	f10e 0e01 	add.w	lr, lr, #1
 8014bd6:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8014bda:	f100 0a01 	add.w	sl, r0, #1
 8014bde:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014be2:	ee17 ca10 	vmov	ip, s14
 8014be6:	fa0f fc8c 	sxth.w	ip, ip
 8014bea:	ee07 ca10 	vmov	s14, ip
 8014bee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014bf2:	ee77 7a45 	vsub.f32	s15, s14, s10
 8014bf6:	ee37 7a03 	vadd.f32	s14, s14, s6
 8014bfa:	eef0 7ae7 	vabs.f32	s15, s15
 8014bfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014c02:	ed82 7a00 	vstr	s14, [r2]
 8014c06:	ee17 ca90 	vmov	ip, s15
 8014c0a:	fa0f fc8c 	sxth.w	ip, ip
 8014c0e:	fb0c fb0c 	mul.w	fp, ip, ip
 8014c12:	ee07 ba90 	vmov	s15, fp
 8014c16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014c1a:	ee07 ca90 	vmov	s15, ip
 8014c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c22:	eef4 5ae7 	vcmpe.f32	s11, s15
 8014c26:	edd3 7a00 	vldr	s15, [r3]
 8014c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014c32:	bf48      	it	mi
 8014c34:	fa5f f08a 	uxtbmi.w	r0, sl
 8014c38:	45ce      	cmp	lr, r9
 8014c3a:	edc3 7a00 	vstr	s15, [r3]
 8014c3e:	f47f af78 	bne.w	8014b32 <getMagStats.constprop.0+0x72>
 8014c42:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8014c46:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8014c9c <getMagStats.constprop.0+0x1dc>
 8014c4a:	eec7 6aa4 	vdiv.f32	s13, s15, s9
 8014c4e:	eef1 7ae6 	vsqrt.f32	s15, s13
 8014c52:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c5e:	bfb8      	it	lt
 8014c60:	eef0 7a47 	vmovlt.f32	s15, s14
 8014c64:	edc3 7a00 	vstr	s15, [r3]
 8014c68:	edd2 7a00 	vldr	s15, [r2]
 8014c6c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014c70:	eec0 7a24 	vdiv.f32	s15, s0, s9
 8014c74:	edc2 7a00 	vstr	s15, [r2]
 8014c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c7c:	fb96 f7f0 	sdiv	r7, r6, r0
 8014c80:	fb00 6617 	mls	r6, r0, r7, r6
 8014c84:	fa0f fe86 	sxth.w	lr, r6
 8014c88:	e73c      	b.n	8014b04 <getMagStats.constprop.0+0x44>
 8014c8a:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8014c98 <getMagStats.constprop.0+0x1d8>
 8014c8e:	e7d8      	b.n	8014c42 <getMagStats.constprop.0+0x182>
 8014c90:	2000038c 	.word	0x2000038c
 8014c94:	423c0000 	.word	0x423c0000
 8014c98:	00000000 	.word	0x00000000
 8014c9c:	3f59999a 	.word	0x3f59999a

08014ca0 <MEMS_updateMagBufferIndex.constprop.0>:
 8014ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ca4:	ed2d 8b02 	vpush	{d8}
 8014ca8:	f8df 81b0 	ldr.w	r8, [pc, #432]	@ 8014e5c <MEMS_updateMagBufferIndex.constprop.0+0x1bc>
 8014cac:	f898 10a0 	ldrb.w	r1, [r8, #160]	@ 0xa0
 8014cb0:	f898 a0a1 	ldrb.w	sl, [r8, #161]	@ 0xa1
 8014cb4:	f998 30a2 	ldrsb.w	r3, [r8, #162]	@ 0xa2
 8014cb8:	2200      	movs	r2, #0
 8014cba:	4551      	cmp	r1, sl
 8014cbc:	e9c8 222a 	strd	r2, r2, [r8, #168]	@ 0xa8
 8014cc0:	e9c8 222c 	strd	r2, r2, [r8, #176]	@ 0xb0
 8014cc4:	e9c8 222e 	strd	r2, r2, [r8, #184]	@ 0xb8
 8014cc8:	b089      	sub	sp, #36	@ 0x24
 8014cca:	4606      	mov	r6, r0
 8014ccc:	f103 0301 	add.w	r3, r3, #1
 8014cd0:	f000 80be 	beq.w	8014e50 <MEMS_updateMagBufferIndex.constprop.0+0x1b0>
 8014cd4:	1a5b      	subs	r3, r3, r1
 8014cd6:	fb93 f2fa 	sdiv	r2, r3, sl
 8014cda:	fb0a 3312 	mls	r3, sl, r2, r3
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	bfb8      	it	lt
 8014ce2:	4453      	addlt	r3, sl
 8014ce4:	b21f      	sxth	r7, r3
 8014ce6:	2900      	cmp	r1, #0
 8014ce8:	f000 80aa 	beq.w	8014e40 <MEMS_updateMagBufferIndex.constprop.0+0x1a0>
 8014cec:	2000      	movs	r0, #0
 8014cee:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014cf2:	19cb      	adds	r3, r1, r7
 8014cf4:	ee87 8a80 	vdiv.f32	s16, s15, s0
 8014cf8:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8014cfc:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8014d00:	9307      	str	r3, [sp, #28]
 8014d02:	4683      	mov	fp, r0
 8014d04:	9002      	str	r0, [sp, #8]
 8014d06:	f04f 0901 	mov.w	r9, #1
 8014d0a:	4635      	mov	r5, r6
 8014d0c:	e01a      	b.n	8014d44 <MEMS_updateMagBufferIndex.constprop.0+0xa4>
 8014d0e:	9a02      	ldr	r2, [sp, #8]
 8014d10:	3c20      	subs	r4, #32
 8014d12:	fa09 f404 	lsl.w	r4, r9, r4
 8014d16:	4322      	orrs	r2, r4
 8014d18:	2e1f      	cmp	r6, #31
 8014d1a:	9202      	str	r2, [sp, #8]
 8014d1c:	d96e      	bls.n	8014dfc <MEMS_updateMagBufferIndex.constprop.0+0x15c>
 8014d1e:	9906      	ldr	r1, [sp, #24]
 8014d20:	f1a6 0220 	sub.w	r2, r6, #32
 8014d24:	fa09 f202 	lsl.w	r2, r9, r2
 8014d28:	4311      	orrs	r1, r2
 8014d2a:	2b1f      	cmp	r3, #31
 8014d2c:	9106      	str	r1, [sp, #24]
 8014d2e:	d96c      	bls.n	8014e0a <MEMS_updateMagBufferIndex.constprop.0+0x16a>
 8014d30:	9a04      	ldr	r2, [sp, #16]
 8014d32:	3b20      	subs	r3, #32
 8014d34:	fa09 f303 	lsl.w	r3, r9, r3
 8014d38:	431a      	orrs	r2, r3
 8014d3a:	9b07      	ldr	r3, [sp, #28]
 8014d3c:	9204      	str	r2, [sp, #16]
 8014d3e:	3701      	adds	r7, #1
 8014d40:	429f      	cmp	r7, r3
 8014d42:	d06b      	beq.n	8014e1c <MEMS_updateMagBufferIndex.constprop.0+0x17c>
 8014d44:	fb97 f3fa 	sdiv	r3, r7, sl
 8014d48:	fb0a 7313 	mls	r3, sl, r3, r7
 8014d4c:	b2db      	uxtb	r3, r3
 8014d4e:	1d1e      	adds	r6, r3, #4
 8014d50:	eb08 02c6 	add.w	r2, r8, r6, lsl #3
 8014d54:	f9b2 20a2 	ldrsh.w	r2, [r2, #162]	@ 0xa2
 8014d58:	fb92 f0f5 	sdiv	r0, r2, r5
 8014d5c:	fb05 2210 	mls	r2, r5, r0, r2
 8014d60:	2a00      	cmp	r2, #0
 8014d62:	bfb8      	it	lt
 8014d64:	1952      	addlt	r2, r2, r5
 8014d66:	b213      	sxth	r3, r2
 8014d68:	ee00 3a10 	vmov	s0, r3
 8014d6c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8014d70:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014d74:	f008 fa4c 	bl	801d210 <roundf>
 8014d78:	eb08 02c6 	add.w	r2, r8, r6, lsl #3
 8014d7c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8014d80:	f9b2 20a4 	ldrsh.w	r2, [r2, #164]	@ 0xa4
 8014d84:	fb92 f0f5 	sdiv	r0, r2, r5
 8014d88:	fb05 2210 	mls	r2, r5, r0, r2
 8014d8c:	2a00      	cmp	r2, #0
 8014d8e:	bfb8      	it	lt
 8014d90:	1952      	addlt	r2, r2, r5
 8014d92:	b213      	sxth	r3, r2
 8014d94:	ee00 3a10 	vmov	s0, r3
 8014d98:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8014d9c:	edcd 7a01 	vstr	s15, [sp, #4]
 8014da0:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014da4:	f008 fa34 	bl	801d210 <roundf>
 8014da8:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
 8014dac:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8014db0:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 8014db4:	fb93 f2f5 	sdiv	r2, r3, r5
 8014db8:	fb05 3312 	mls	r3, r5, r2, r3
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	bfb8      	it	lt
 8014dc0:	195b      	addlt	r3, r3, r5
 8014dc2:	b21b      	sxth	r3, r3
 8014dc4:	ee00 3a10 	vmov	s0, r3
 8014dc8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8014dcc:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8014dd0:	edcd 7a01 	vstr	s15, [sp, #4]
 8014dd4:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014dd8:	f008 fa1a 	bl	801d210 <roundf>
 8014ddc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8014de0:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8014de4:	edcd 7a01 	vstr	s15, [sp, #4]
 8014de8:	2c1f      	cmp	r4, #31
 8014dea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014dee:	d88e      	bhi.n	8014d0e <MEMS_updateMagBufferIndex.constprop.0+0x6e>
 8014df0:	fa09 f404 	lsl.w	r4, r9, r4
 8014df4:	2e1f      	cmp	r6, #31
 8014df6:	ea4b 0b04 	orr.w	fp, fp, r4
 8014dfa:	d890      	bhi.n	8014d1e <MEMS_updateMagBufferIndex.constprop.0+0x7e>
 8014dfc:	9905      	ldr	r1, [sp, #20]
 8014dfe:	fa09 f206 	lsl.w	r2, r9, r6
 8014e02:	4311      	orrs	r1, r2
 8014e04:	2b1f      	cmp	r3, #31
 8014e06:	9105      	str	r1, [sp, #20]
 8014e08:	d892      	bhi.n	8014d30 <MEMS_updateMagBufferIndex.constprop.0+0x90>
 8014e0a:	9a03      	ldr	r2, [sp, #12]
 8014e0c:	fa09 f303 	lsl.w	r3, r9, r3
 8014e10:	431a      	orrs	r2, r3
 8014e12:	9b07      	ldr	r3, [sp, #28]
 8014e14:	9203      	str	r2, [sp, #12]
 8014e16:	3701      	adds	r7, #1
 8014e18:	429f      	cmp	r7, r3
 8014e1a:	d193      	bne.n	8014d44 <MEMS_updateMagBufferIndex.constprop.0+0xa4>
 8014e1c:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8014e20:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 8014e24:	e9c8 322c 	strd	r3, r2, [r8, #176]	@ 0xb0
 8014e28:	9b02      	ldr	r3, [sp, #8]
 8014e2a:	f8c8 b0ac 	str.w	fp, [r8, #172]	@ 0xac
 8014e2e:	e9c8 012e 	strd	r0, r1, [r8, #184]	@ 0xb8
 8014e32:	f8c8 30a8 	str.w	r3, [r8, #168]	@ 0xa8
 8014e36:	b009      	add	sp, #36	@ 0x24
 8014e38:	ecbd 8b02 	vpop	{d8}
 8014e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e40:	23ff      	movs	r3, #255	@ 0xff
 8014e42:	f888 30a2 	strb.w	r3, [r8, #162]	@ 0xa2
 8014e46:	b009      	add	sp, #36	@ 0x24
 8014e48:	ecbd 8b02 	vpop	{d8}
 8014e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e50:	fb93 f2f1 	sdiv	r2, r3, r1
 8014e54:	fb01 3312 	mls	r3, r1, r2, r3
 8014e58:	b21f      	sxth	r7, r3
 8014e5a:	e744      	b.n	8014ce6 <MEMS_updateMagBufferIndex.constprop.0+0x46>
 8014e5c:	2000038c 	.word	0x2000038c

08014e60 <output_update>:
 8014e60:	edd0 7a01 	vldr	s15, [r0, #4]
 8014e64:	ed90 5a02 	vldr	s10, [r0, #8]
 8014e68:	ed90 7a00 	vldr	s14, [r0]
 8014e6c:	edd0 5a03 	vldr	s11, [r0, #12]
 8014e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e74:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8014e78:	ee67 6a85 	vmul.f32	s13, s15, s10
 8014e7c:	eea7 6a07 	vfma.f32	s12, s14, s14
 8014e80:	4615      	mov	r5, r2
 8014e82:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8014e86:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8014e8a:	eee7 6a25 	vfma.f32	s13, s14, s11
 8014e8e:	460f      	mov	r7, r1
 8014e90:	461e      	mov	r6, r3
 8014e92:	ee27 7a05 	vmul.f32	s14, s14, s10
 8014e96:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014e9a:	ee37 7a07 	vadd.f32	s14, s14, s14
 8014e9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014ea2:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8014ea6:	ee36 6a06 	vadd.f32	s12, s12, s12
 8014eaa:	2a00      	cmp	r2, #0
 8014eac:	d14b      	bne.n	8014f46 <output_update+0xe6>
 8014eae:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8014eb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014eb6:	ee35 7ac6 	vsub.f32	s14, s11, s12
 8014eba:	eef1 6a66 	vneg.f32	s13, s13
 8014ebe:	edc3 6a00 	vstr	s13, [r3]
 8014ec2:	edc3 7a01 	vstr	s15, [r3, #4]
 8014ec6:	ed83 7a02 	vstr	s14, [r3, #8]
 8014eca:	4629      	mov	r1, r5
 8014ecc:	4604      	mov	r4, r0
 8014ece:	f7ff fcfd 	bl	80148cc <q2hpr>
 8014ed2:	ed95 7a01 	vldr	s14, [r5, #4]
 8014ed6:	edd5 7a02 	vldr	s15, [r5, #8]
 8014eda:	edd5 6a00 	vldr	s13, [r5]
 8014ede:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8014ff4 <output_update+0x194>
 8014ee2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8014ff8 <output_update+0x198>
 8014ee6:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014eea:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014eee:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8014ef2:	ed85 7a01 	vstr	s14, [r5, #4]
 8014ef6:	edc5 6a00 	vstr	s13, [r5]
 8014efa:	edc5 7a02 	vstr	s15, [r5, #8]
 8014efe:	ed97 7a01 	vldr	s14, [r7, #4]
 8014f02:	edd6 7a00 	vldr	s15, [r6]
 8014f06:	6823      	ldr	r3, [r4, #0]
 8014f08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014f0c:	edc8 7a00 	vstr	s15, [r8]
 8014f10:	ed97 7a00 	vldr	s14, [r7]
 8014f14:	edd6 7a01 	vldr	s15, [r6, #4]
 8014f18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014f1c:	edc8 7a01 	vstr	s15, [r8, #4]
 8014f20:	edd6 7a02 	vldr	s15, [r6, #8]
 8014f24:	ed97 7a02 	vldr	s14, [r7, #8]
 8014f28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014f2c:	edc8 7a02 	vstr	s15, [r8, #8]
 8014f30:	edd4 7a02 	vldr	s15, [r4, #8]
 8014f34:	6862      	ldr	r2, [r4, #4]
 8014f36:	6022      	str	r2, [r4, #0]
 8014f38:	eef1 7a67 	vneg.f32	s15, s15
 8014f3c:	6063      	str	r3, [r4, #4]
 8014f3e:	edc4 7a02 	vstr	s15, [r4, #8]
 8014f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f46:	2a01      	cmp	r2, #1
 8014f48:	d015      	beq.n	8014f76 <output_update+0x116>
 8014f4a:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8014ff8 <output_update+0x198>
 8014f4e:	edd5 6a00 	vldr	s13, [r5]
 8014f52:	ed95 7a01 	vldr	s14, [r5, #4]
 8014f56:	edd5 7a02 	vldr	s15, [r5, #8]
 8014f5a:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014f5e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014f62:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014f66:	edc5 6a00 	vstr	s13, [r5]
 8014f6a:	ed85 7a01 	vstr	s14, [r5, #4]
 8014f6e:	edc5 7a02 	vstr	s15, [r5, #8]
 8014f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f76:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8014f7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014f7e:	ee36 6a65 	vsub.f32	s12, s12, s11
 8014f82:	eef1 6a66 	vneg.f32	s13, s13
 8014f86:	edc3 7a00 	vstr	s15, [r3]
 8014f8a:	edc3 6a01 	vstr	s13, [r3, #4]
 8014f8e:	ed83 6a02 	vstr	s12, [r3, #8]
 8014f92:	4629      	mov	r1, r5
 8014f94:	f7ff fc9a 	bl	80148cc <q2hpr>
 8014f98:	edd5 6a00 	vldr	s13, [r5]
 8014f9c:	ed95 7a01 	vldr	s14, [r5, #4]
 8014fa0:	edd5 7a02 	vldr	s15, [r5, #8]
 8014fa4:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8014ff8 <output_update+0x198>
 8014fa8:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014fac:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014fb0:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014fb4:	ed85 7a01 	vstr	s14, [r5, #4]
 8014fb8:	edc5 6a00 	vstr	s13, [r5]
 8014fbc:	edc5 7a02 	vstr	s15, [r5, #8]
 8014fc0:	ed97 7a00 	vldr	s14, [r7]
 8014fc4:	edd6 7a00 	vldr	s15, [r6]
 8014fc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014fcc:	edc8 7a00 	vstr	s15, [r8]
 8014fd0:	ed97 7a01 	vldr	s14, [r7, #4]
 8014fd4:	edd6 7a01 	vldr	s15, [r6, #4]
 8014fd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014fdc:	edc8 7a01 	vstr	s15, [r8, #4]
 8014fe0:	edd6 7a02 	vldr	s15, [r6, #8]
 8014fe4:	ed97 7a02 	vldr	s14, [r7, #8]
 8014fe8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014fec:	edc8 7a02 	vstr	s15, [r8, #8]
 8014ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ff4:	c2652ee1 	.word	0xc2652ee1
 8014ff8:	42652ee1 	.word	0x42652ee1

08014ffc <MFX_emptyAttitude>:
 8014ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015000:	ed2d 8b02 	vpush	{d8}
 8015004:	4fe9      	ldr	r7, [pc, #932]	@ (80153ac <MFX_emptyAttitude+0x3b0>)
 8015006:	eddf 8aea 	vldr	s17, [pc, #936]	@ 80153b0 <MFX_emptyAttitude+0x3b4>
 801500a:	f6ad 4dd4 	subw	sp, sp, #3284	@ 0xcd4
 801500e:	f04f 0800 	mov.w	r8, #0
 8015012:	f50d 64d7 	add.w	r4, sp, #1720	@ 0x6b8
 8015016:	46bc      	mov	ip, r7
 8015018:	e9c4 8800 	strd	r8, r8, [r4]
 801501c:	f83c 3b04 	ldrh.w	r3, [ip], #4
 8015020:	f8c4 8008 	str.w	r8, [r4, #8]
 8015024:	f88d 854a 	strb.w	r8, [sp, #1354]	@ 0x54a
 8015028:	f8ad 3548 	strh.w	r3, [sp, #1352]	@ 0x548
 801502c:	4681      	mov	r9, r0
 801502e:	f8dd 3548 	ldr.w	r3, [sp, #1352]	@ 0x548
 8015032:	f8ad 30a8 	strh.w	r3, [sp, #168]	@ 0xa8
 8015036:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801503a:	0c1b      	lsrs	r3, r3, #16
 801503c:	f88d 30aa 	strb.w	r3, [sp, #170]	@ 0xaa
 8015040:	ab2b      	add	r3, sp, #172	@ 0xac
 8015042:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015046:	ab2e      	add	r3, sp, #184	@ 0xb8
 8015048:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801504c:	ab31      	add	r3, sp, #196	@ 0xc4
 801504e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015052:	ab34      	add	r3, sp, #208	@ 0xd0
 8015054:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8015058:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801505c:	ab37      	add	r3, sp, #220	@ 0xdc
 801505e:	edcd 8a08 	vstr	s17, [sp, #32]
 8015062:	edcd 8a09 	vstr	s17, [sp, #36]	@ 0x24
 8015066:	edcd 8a0a 	vstr	s17, [sp, #40]	@ 0x28
 801506a:	ed8d 8a0b 	vstr	s16, [sp, #44]	@ 0x2c
 801506e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015072:	ab3a      	add	r3, sp, #232	@ 0xe8
 8015074:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015078:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801507c:	f10d 0e44 	add.w	lr, sp, #68	@ 0x44
 8015080:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015084:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015088:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801508c:	f44f 75b4 	mov.w	r5, #360	@ 0x168
 8015090:	f8dc 3000 	ldr.w	r3, [ip]
 8015094:	f8ce 3000 	str.w	r3, [lr]
 8015098:	462a      	mov	r2, r5
 801509a:	4641      	mov	r1, r8
 801509c:	4620      	mov	r0, r4
 801509e:	f00a fdb2 	bl	801fc06 <memset>
 80150a2:	f44f 56f0 	mov.w	r6, #7680	@ 0x1e00
 80150a6:	462a      	mov	r2, r5
 80150a8:	4621      	mov	r1, r4
 80150aa:	a840      	add	r0, sp, #256	@ 0x100
 80150ac:	f8ad 60f8 	strh.w	r6, [sp, #248]	@ 0xf8
 80150b0:	f00a fed3 	bl	801fe5a <memcpy>
 80150b4:	462a      	mov	r2, r5
 80150b6:	4641      	mov	r1, r8
 80150b8:	4620      	mov	r0, r4
 80150ba:	ed8d 8a3f 	vstr	s16, [sp, #252]	@ 0xfc
 80150be:	f00a fda2 	bl	801fc06 <memset>
 80150c2:	462a      	mov	r2, r5
 80150c4:	4621      	mov	r1, r4
 80150c6:	a89c      	add	r0, sp, #624	@ 0x270
 80150c8:	f8ad 6268 	strh.w	r6, [sp, #616]	@ 0x268
 80150cc:	f00a fec5 	bl	801fe5a <memcpy>
 80150d0:	462a      	mov	r2, r5
 80150d2:	4641      	mov	r1, r8
 80150d4:	4620      	mov	r0, r4
 80150d6:	ed8d 8a9b 	vstr	s16, [sp, #620]	@ 0x26c
 80150da:	f00a fd94 	bl	801fc06 <memset>
 80150de:	462a      	mov	r2, r5
 80150e0:	4621      	mov	r1, r4
 80150e2:	a8f8      	add	r0, sp, #992	@ 0x3e0
 80150e4:	f8ad 63d8 	strh.w	r6, [sp, #984]	@ 0x3d8
 80150e8:	f00a feb7 	bl	801fe5a <memcpy>
 80150ec:	462a      	mov	r2, r5
 80150ee:	4641      	mov	r1, r8
 80150f0:	4620      	mov	r0, r4
 80150f2:	ed8d 8af7 	vstr	s16, [sp, #988]	@ 0x3dc
 80150f6:	f00a fd86 	bl	801fc06 <memset>
 80150fa:	462a      	mov	r2, r5
 80150fc:	4621      	mov	r1, r4
 80150fe:	f50d 60aa 	add.w	r0, sp, #1360	@ 0x550
 8015102:	f8ad 6548 	strh.w	r6, [sp, #1352]	@ 0x548
 8015106:	f00a fea8 	bl	801fe5a <memcpy>
 801510a:	f04f 0301 	mov.w	r3, #1
 801510e:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 8015112:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8015116:	4ba7      	ldr	r3, [pc, #668]	@ (80153b4 <MFX_emptyAttitude+0x3b8>)
 8015118:	9320      	str	r3, [sp, #128]	@ 0x80
 801511a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801511c:	ae0c      	add	r6, sp, #48	@ 0x30
 801511e:	46b3      	mov	fp, r6
 8015120:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015122:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8015126:	e9c4 8800 	strd	r8, r8, [r4]
 801512a:	e9c4 8802 	strd	r8, r8, [r4, #8]
 801512e:	f8c4 8010 	str.w	r8, [r4, #16]
 8015132:	f10d 0c6c 	add.w	ip, sp, #108	@ 0x6c
 8015136:	46a6      	mov	lr, r4
 8015138:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801513c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015140:	f50d 6aa9 	add.w	sl, sp, #1352	@ 0x548
 8015144:	682d      	ldr	r5, [r5, #0]
 8015146:	f8cc 5000 	str.w	r5, [ip]
 801514a:	af21      	add	r7, sp, #132	@ 0x84
 801514c:	ed8a 8a01 	vstr	s16, [sl, #4]
 8015150:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015152:	ab1a      	add	r3, sp, #104	@ 0x68
 8015154:	e9cd a301 	strd	sl, r3, [sp, #4]
 8015158:	abf6      	add	r3, sp, #984	@ 0x3d8
 801515a:	9300      	str	r3, [sp, #0]
 801515c:	aa3e      	add	r2, sp, #248	@ 0xf8
 801515e:	f8c7 8000 	str.w	r8, [r7]
 8015162:	ab9a      	add	r3, sp, #616	@ 0x268
 8015164:	a911      	add	r1, sp, #68	@ 0x44
 8015166:	9403      	str	r4, [sp, #12]
 8015168:	2001      	movs	r0, #1
 801516a:	f7fd ffe7 	bl	801313c <DataHist_parameters>
 801516e:	4b92      	ldr	r3, [pc, #584]	@ (80153b8 <MFX_emptyAttitude+0x3bc>)
 8015170:	f8c9 3018 	str.w	r3, [r9, #24]
 8015174:	4b91      	ldr	r3, [pc, #580]	@ (80153bc <MFX_emptyAttitude+0x3c0>)
 8015176:	f8c9 301c 	str.w	r3, [r9, #28]
 801517a:	4b91      	ldr	r3, [pc, #580]	@ (80153c0 <MFX_emptyAttitude+0x3c4>)
 801517c:	f8c9 3020 	str.w	r3, [r9, #32]
 8015180:	4b90      	ldr	r3, [pc, #576]	@ (80153c4 <MFX_emptyAttitude+0x3c8>)
 8015182:	f8c9 3024 	str.w	r3, [r9, #36]	@ 0x24
 8015186:	4b90      	ldr	r3, [pc, #576]	@ (80153c8 <MFX_emptyAttitude+0x3cc>)
 8015188:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
 801518c:	4b8f      	ldr	r3, [pc, #572]	@ (80153cc <MFX_emptyAttitude+0x3d0>)
 801518e:	f8c9 302c 	str.w	r3, [r9, #44]	@ 0x2c
 8015192:	4b8f      	ldr	r3, [pc, #572]	@ (80153d0 <MFX_emptyAttitude+0x3d4>)
 8015194:	f8c9 3030 	str.w	r3, [r9, #48]	@ 0x30
 8015198:	f10d 0cac 	add.w	ip, sp, #172	@ 0xac
 801519c:	4b8d      	ldr	r3, [pc, #564]	@ (80153d4 <MFX_emptyAttitude+0x3d8>)
 801519e:	f8c9 3034 	str.w	r3, [r9, #52]	@ 0x34
 80151a2:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 80151a6:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	@ 0xa8
 80151aa:	f8a9 3070 	strh.w	r3, [r9, #112]	@ 0x70
 80151ae:	f89d 30aa 	ldrb.w	r3, [sp, #170]	@ 0xaa
 80151b2:	f889 3072 	strb.w	r3, [r9, #114]	@ 0x72
 80151b6:	f240 1301 	movw	r3, #257	@ 0x101
 80151ba:	f8a9 3000 	strh.w	r3, [r9]
 80151be:	f8a9 3004 	strh.w	r3, [r9, #4]
 80151c2:	4b85      	ldr	r3, [pc, #532]	@ (80153d8 <MFX_emptyAttitude+0x3dc>)
 80151c4:	f8c9 300c 	str.w	r3, [r9, #12]
 80151c8:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80151cc:	f8c9 1078 	str.w	r1, [r9, #120]	@ 0x78
 80151d0:	4b82      	ldr	r3, [pc, #520]	@ (80153dc <MFX_emptyAttitude+0x3e0>)
 80151d2:	f8c9 207c 	str.w	r2, [r9, #124]	@ 0x7c
 80151d6:	af2e      	add	r7, sp, #184	@ 0xb8
 80151d8:	2000      	movs	r0, #0
 80151da:	2100      	movs	r1, #0
 80151dc:	f8c9 3014 	str.w	r3, [r9, #20]
 80151e0:	e9c9 8816 	strd	r8, r8, [r9, #88]	@ 0x58
 80151e4:	e9c9 881a 	strd	r8, r8, [r9, #104]	@ 0x68
 80151e8:	e9c9 0118 	strd	r0, r1, [r9, #96]	@ 0x60
 80151ec:	f8a9 8002 	strh.w	r8, [r9, #2]
 80151f0:	ed89 8a02 	vstr	s16, [r9, #8]
 80151f4:	ed89 8a04 	vstr	s16, [r9, #16]
 80151f8:	cf07      	ldmia	r7!, {r0, r1, r2}
 80151fa:	ae31      	add	r6, sp, #196	@ 0xc4
 80151fc:	f8c9 0080 	str.w	r0, [r9, #128]	@ 0x80
 8015200:	f8c9 1084 	str.w	r1, [r9, #132]	@ 0x84
 8015204:	f8c9 2088 	str.w	r2, [r9, #136]	@ 0x88
 8015208:	ce07      	ldmia	r6!, {r0, r1, r2}
 801520a:	ad34      	add	r5, sp, #208	@ 0xd0
 801520c:	f8c9 008c 	str.w	r0, [r9, #140]	@ 0x8c
 8015210:	f8c9 1090 	str.w	r1, [r9, #144]	@ 0x90
 8015214:	f8c9 2094 	str.w	r2, [r9, #148]	@ 0x94
 8015218:	cd07      	ldmia	r5!, {r0, r1, r2}
 801521a:	f10d 0bdc 	add.w	fp, sp, #220	@ 0xdc
 801521e:	f8c9 0098 	str.w	r0, [r9, #152]	@ 0x98
 8015222:	f8c9 109c 	str.w	r1, [r9, #156]	@ 0x9c
 8015226:	f8c9 20a0 	str.w	r2, [r9, #160]	@ 0xa0
 801522a:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 801522e:	f10d 0ee8 	add.w	lr, sp, #232	@ 0xe8
 8015232:	f8c9 00a4 	str.w	r0, [r9, #164]	@ 0xa4
 8015236:	f8c9 10a8 	str.w	r1, [r9, #168]	@ 0xa8
 801523a:	f8c9 20ac 	str.w	r2, [r9, #172]	@ 0xac
 801523e:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 8015242:	ed9f 6a67 	vldr	s12, [pc, #412]	@ 80153e0 <MFX_emptyAttitude+0x3e4>
 8015246:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80153e4 <MFX_emptyAttitude+0x3e8>
 801524a:	eddf 7a67 	vldr	s15, [pc, #412]	@ 80153e8 <MFX_emptyAttitude+0x3ec>
 801524e:	f8c9 20b8 	str.w	r2, [r9, #184]	@ 0xb8
 8015252:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8015256:	f44f 1248 	mov.w	r2, #3276800	@ 0x320000
 801525a:	f8c9 00b0 	str.w	r0, [r9, #176]	@ 0xb0
 801525e:	f8c9 10b4 	str.w	r1, [r9, #180]	@ 0xb4
 8015262:	ed89 6a65 	vstr	s12, [r9, #404]	@ 0x194
 8015266:	edc9 6a66 	vstr	s13, [r9, #408]	@ 0x198
 801526a:	ed89 7a67 	vstr	s14, [r9, #412]	@ 0x19c
 801526e:	edc9 8a64 	vstr	s17, [r9, #400]	@ 0x190
 8015272:	edc9 8a30 	vstr	s17, [r9, #192]	@ 0xc0
 8015276:	edc9 8a4a 	vstr	s17, [r9, #296]	@ 0x128
 801527a:	edc9 8a31 	vstr	s17, [r9, #196]	@ 0xc4
 801527e:	edc9 8a4b 	vstr	s17, [r9, #300]	@ 0x12c
 8015282:	edc9 8a32 	vstr	s17, [r9, #200]	@ 0xc8
 8015286:	edc9 8a4c 	vstr	s17, [r9, #304]	@ 0x130
 801528a:	edc9 8a33 	vstr	s17, [r9, #204]	@ 0xcc
 801528e:	edc9 8a4d 	vstr	s17, [r9, #308]	@ 0x134
 8015292:	edc9 8a34 	vstr	s17, [r9, #208]	@ 0xd0
 8015296:	edc9 8a4e 	vstr	s17, [r9, #312]	@ 0x138
 801529a:	edc9 8a35 	vstr	s17, [r9, #212]	@ 0xd4
 801529e:	edc9 8a4f 	vstr	s17, [r9, #316]	@ 0x13c
 80152a2:	edc9 8a36 	vstr	s17, [r9, #216]	@ 0xd8
 80152a6:	edc9 8a50 	vstr	s17, [r9, #320]	@ 0x140
 80152aa:	edc9 8a37 	vstr	s17, [r9, #220]	@ 0xdc
 80152ae:	edc9 8a51 	vstr	s17, [r9, #324]	@ 0x144
 80152b2:	edc9 8a38 	vstr	s17, [r9, #224]	@ 0xe0
 80152b6:	edc9 8a52 	vstr	s17, [r9, #328]	@ 0x148
 80152ba:	edc9 8a39 	vstr	s17, [r9, #228]	@ 0xe4
 80152be:	edc9 8a53 	vstr	s17, [r9, #332]	@ 0x14c
 80152c2:	edc9 8a3a 	vstr	s17, [r9, #232]	@ 0xe8
 80152c6:	edc9 8a54 	vstr	s17, [r9, #336]	@ 0x150
 80152ca:	edc9 8a3b 	vstr	s17, [r9, #236]	@ 0xec
 80152ce:	edc9 8a55 	vstr	s17, [r9, #340]	@ 0x154
 80152d2:	edc9 8a3c 	vstr	s17, [r9, #240]	@ 0xf0
 80152d6:	edc9 8a56 	vstr	s17, [r9, #344]	@ 0x158
 80152da:	edc9 8a3d 	vstr	s17, [r9, #244]	@ 0xf4
 80152de:	edc9 8a57 	vstr	s17, [r9, #348]	@ 0x15c
 80152e2:	edc9 8a3e 	vstr	s17, [r9, #248]	@ 0xf8
 80152e6:	edc9 8a58 	vstr	s17, [r9, #352]	@ 0x160
 80152ea:	edc9 8a3f 	vstr	s17, [r9, #252]	@ 0xfc
 80152ee:	edc9 8a59 	vstr	s17, [r9, #356]	@ 0x164
 80152f2:	edc9 8a40 	vstr	s17, [r9, #256]	@ 0x100
 80152f6:	edc9 8a5a 	vstr	s17, [r9, #360]	@ 0x168
 80152fa:	f8c9 21a0 	str.w	r2, [r9, #416]	@ 0x1a0
 80152fe:	f04f 0201 	mov.w	r2, #1
 8015302:	edc9 7a75 	vstr	s15, [r9, #468]	@ 0x1d4
 8015306:	edc9 8a41 	vstr	s17, [r9, #260]	@ 0x104
 801530a:	edc9 8a5b 	vstr	s17, [r9, #364]	@ 0x16c
 801530e:	edc9 8a42 	vstr	s17, [r9, #264]	@ 0x108
 8015312:	edc9 8a5c 	vstr	s17, [r9, #368]	@ 0x170
 8015316:	edc9 8a43 	vstr	s17, [r9, #268]	@ 0x10c
 801531a:	edc9 8a5d 	vstr	s17, [r9, #372]	@ 0x174
 801531e:	edc9 8a44 	vstr	s17, [r9, #272]	@ 0x110
 8015322:	edc9 8a5e 	vstr	s17, [r9, #376]	@ 0x178
 8015326:	edc9 8a45 	vstr	s17, [r9, #276]	@ 0x114
 801532a:	edc9 8a5f 	vstr	s17, [r9, #380]	@ 0x17c
 801532e:	edc9 8a46 	vstr	s17, [r9, #280]	@ 0x118
 8015332:	edc9 8a60 	vstr	s17, [r9, #384]	@ 0x180
 8015336:	edc9 8a47 	vstr	s17, [r9, #284]	@ 0x11c
 801533a:	edc9 8a61 	vstr	s17, [r9, #388]	@ 0x184
 801533e:	edc9 8a48 	vstr	s17, [r9, #288]	@ 0x120
 8015342:	edc9 8a62 	vstr	s17, [r9, #392]	@ 0x188
 8015346:	edc9 8a49 	vstr	s17, [r9, #292]	@ 0x124
 801534a:	edc9 8a63 	vstr	s17, [r9, #396]	@ 0x18c
 801534e:	f889 81a4 	strb.w	r8, [r9, #420]	@ 0x1a4
 8015352:	f8c9 81a6 	str.w	r8, [r9, #422]	@ 0x1a6
 8015356:	edc9 8a6c 	vstr	s17, [r9, #432]	@ 0x1b0
 801535a:	edc9 8a76 	vstr	s17, [r9, #472]	@ 0x1d8
 801535e:	edc9 8a77 	vstr	s17, [r9, #476]	@ 0x1dc
 8015362:	edc9 8a78 	vstr	s17, [r9, #480]	@ 0x1e0
 8015366:	edc9 8a79 	vstr	s17, [r9, #484]	@ 0x1e4
 801536a:	edc9 8a7a 	vstr	s17, [r9, #488]	@ 0x1e8
 801536e:	edc9 8a7b 	vstr	s17, [r9, #492]	@ 0x1ec
 8015372:	edc9 8a7c 	vstr	s17, [r9, #496]	@ 0x1f0
 8015376:	edc9 8a7d 	vstr	s17, [r9, #500]	@ 0x1f4
 801537a:	edc9 8a6d 	vstr	s17, [r9, #436]	@ 0x1b4
 801537e:	edc9 8a7e 	vstr	s17, [r9, #504]	@ 0x1f8
 8015382:	edc9 7a7f 	vstr	s15, [r9, #508]	@ 0x1fc
 8015386:	edc9 7a89 	vstr	s15, [r9, #548]	@ 0x224
 801538a:	edc9 7a93 	vstr	s15, [r9, #588]	@ 0x24c
 801538e:	edc9 8a80 	vstr	s17, [r9, #512]	@ 0x200
 8015392:	edc9 8a81 	vstr	s17, [r9, #516]	@ 0x204
 8015396:	edc9 8a82 	vstr	s17, [r9, #520]	@ 0x208
 801539a:	edc9 8a83 	vstr	s17, [r9, #524]	@ 0x20c
 801539e:	edc9 8a84 	vstr	s17, [r9, #528]	@ 0x210
 80153a2:	edc9 8a85 	vstr	s17, [r9, #532]	@ 0x214
 80153a6:	edc9 8a86 	vstr	s17, [r9, #536]	@ 0x218
 80153aa:	e01f      	b.n	80153ec <MFX_emptyAttitude+0x3f0>
 80153ac:	08022464 	.word	0x08022464
 80153b0:	00000000 	.word	0x00000000
 80153b4:	40a00000 	.word	0x40a00000
 80153b8:	3a9d4952 	.word	0x3a9d4952
 80153bc:	3ac49ba6 	.word	0x3ac49ba6
 80153c0:	3b03126f 	.word	0x3b03126f
 80153c4:	3a83126f 	.word	0x3a83126f
 80153c8:	3f639581 	.word	0x3f639581
 80153cc:	402ab021 	.word	0x402ab021
 80153d0:	3f13f7cf 	.word	0x3f13f7cf
 80153d4:	3f2ac083 	.word	0x3f2ac083
 80153d8:	01010100 	.word	0x01010100
 80153dc:	41200000 	.word	0x41200000
 80153e0:	3f4ccccd 	.word	0x3f4ccccd
 80153e4:	3f333333 	.word	0x3f333333
 80153e8:	447a0000 	.word	0x447a0000
 80153ec:	edc9 8a6e 	vstr	s17, [r9, #440]	@ 0x1b8
 80153f0:	edc9 8a87 	vstr	s17, [r9, #540]	@ 0x21c
 80153f4:	edc9 8a88 	vstr	s17, [r9, #544]	@ 0x220
 80153f8:	edc9 8a8a 	vstr	s17, [r9, #552]	@ 0x228
 80153fc:	edc9 8a8b 	vstr	s17, [r9, #556]	@ 0x22c
 8015400:	edc9 8a8c 	vstr	s17, [r9, #560]	@ 0x230
 8015404:	edc9 8a8d 	vstr	s17, [r9, #564]	@ 0x234
 8015408:	edc9 8a8e 	vstr	s17, [r9, #568]	@ 0x238
 801540c:	edc9 8a8f 	vstr	s17, [r9, #572]	@ 0x23c
 8015410:	edc9 8a6f 	vstr	s17, [r9, #444]	@ 0x1bc
 8015414:	edc9 8a90 	vstr	s17, [r9, #576]	@ 0x240
 8015418:	edc9 8a91 	vstr	s17, [r9, #580]	@ 0x244
 801541c:	edc9 8a92 	vstr	s17, [r9, #584]	@ 0x248
 8015420:	edc9 8a94 	vstr	s17, [r9, #592]	@ 0x250
 8015424:	edc9 8a95 	vstr	s17, [r9, #596]	@ 0x254
 8015428:	edc9 8a96 	vstr	s17, [r9, #600]	@ 0x258
 801542c:	edc9 8a97 	vstr	s17, [r9, #604]	@ 0x25c
 8015430:	edc9 8a98 	vstr	s17, [r9, #608]	@ 0x260
 8015434:	edc9 8a70 	vstr	s17, [r9, #448]	@ 0x1c0
 8015438:	edc9 8a99 	vstr	s17, [r9, #612]	@ 0x264
 801543c:	edc9 8a9a 	vstr	s17, [r9, #616]	@ 0x268
 8015440:	edc9 8a9b 	vstr	s17, [r9, #620]	@ 0x26c
 8015444:	edc9 8a9c 	vstr	s17, [r9, #624]	@ 0x270
 8015448:	edc9 7a9d 	vstr	s15, [r9, #628]	@ 0x274
 801544c:	edc9 7aa7 	vstr	s15, [r9, #668]	@ 0x29c
 8015450:	edc9 7ab1 	vstr	s15, [r9, #708]	@ 0x2c4
 8015454:	edc9 8a9e 	vstr	s17, [r9, #632]	@ 0x278
 8015458:	edc9 8a9f 	vstr	s17, [r9, #636]	@ 0x27c
 801545c:	edc9 8aa0 	vstr	s17, [r9, #640]	@ 0x280
 8015460:	edc9 8aa1 	vstr	s17, [r9, #644]	@ 0x284
 8015464:	edc9 8a71 	vstr	s17, [r9, #452]	@ 0x1c4
 8015468:	edc9 8aa2 	vstr	s17, [r9, #648]	@ 0x288
 801546c:	edc9 8aa3 	vstr	s17, [r9, #652]	@ 0x28c
 8015470:	edc9 8aa4 	vstr	s17, [r9, #656]	@ 0x290
 8015474:	edc9 8aa5 	vstr	s17, [r9, #660]	@ 0x294
 8015478:	edc9 8aa6 	vstr	s17, [r9, #664]	@ 0x298
 801547c:	edc9 8aa8 	vstr	s17, [r9, #672]	@ 0x2a0
 8015480:	edc9 8aa9 	vstr	s17, [r9, #676]	@ 0x2a4
 8015484:	edc9 8aaa 	vstr	s17, [r9, #680]	@ 0x2a8
 8015488:	edc9 8a72 	vstr	s17, [r9, #456]	@ 0x1c8
 801548c:	edc9 8aab 	vstr	s17, [r9, #684]	@ 0x2ac
 8015490:	edc9 8aac 	vstr	s17, [r9, #688]	@ 0x2b0
 8015494:	edc9 8aad 	vstr	s17, [r9, #692]	@ 0x2b4
 8015498:	edc9 8aae 	vstr	s17, [r9, #696]	@ 0x2b8
 801549c:	edc9 8aaf 	vstr	s17, [r9, #700]	@ 0x2bc
 80154a0:	edc9 8ab0 	vstr	s17, [r9, #704]	@ 0x2c0
 80154a4:	edc9 8ab2 	vstr	s17, [r9, #712]	@ 0x2c8
 80154a8:	edc9 8ab3 	vstr	s17, [r9, #716]	@ 0x2cc
 80154ac:	edc9 8a73 	vstr	s17, [r9, #460]	@ 0x1cc
 80154b0:	edc9 8ab4 	vstr	s17, [r9, #720]	@ 0x2d0
 80154b4:	edc9 8ab5 	vstr	s17, [r9, #724]	@ 0x2d4
 80154b8:	edc9 8ab6 	vstr	s17, [r9, #728]	@ 0x2d8
 80154bc:	edc9 8ab7 	vstr	s17, [r9, #732]	@ 0x2dc
 80154c0:	edc9 8ab8 	vstr	s17, [r9, #736]	@ 0x2e0
 80154c4:	edc9 8ab9 	vstr	s17, [r9, #740]	@ 0x2e4
 80154c8:	edc9 8aba 	vstr	s17, [r9, #744]	@ 0x2e8
 80154cc:	f889 21ac 	strb.w	r2, [r9, #428]	@ 0x1ac
 80154d0:	f50d 624a 	add.w	r2, sp, #3232	@ 0xca0
 80154d4:	9202      	str	r2, [sp, #8]
 80154d6:	f50d 6233 	add.w	r2, sp, #2864	@ 0xb30
 80154da:	9201      	str	r2, [sp, #4]
 80154dc:	f509 7a46 	add.w	sl, r9, #792	@ 0x318
 80154e0:	f50d 621c 	add.w	r2, sp, #2496	@ 0x9c0
 80154e4:	f8cd a00c 	str.w	sl, [sp, #12]
 80154e8:	9200      	str	r2, [sp, #0]
 80154ea:	7820      	ldrb	r0, [r4, #0]
 80154ec:	edc9 7abb 	vstr	s15, [r9, #748]	@ 0x2ec
 80154f0:	f50d 6305 	add.w	r3, sp, #2128	@ 0x850
 80154f4:	f50d 62dc 	add.w	r2, sp, #1760	@ 0x6e0
 80154f8:	f20d 61bc 	addw	r1, sp, #1724	@ 0x6bc
 80154fc:	edc9 7ac5 	vstr	s15, [r9, #788]	@ 0x314
 8015500:	edc9 8abc 	vstr	s17, [r9, #752]	@ 0x2f0
 8015504:	edc9 8a74 	vstr	s17, [r9, #464]	@ 0x1d0
 8015508:	edc9 8abd 	vstr	s17, [r9, #756]	@ 0x2f4
 801550c:	edc9 8abe 	vstr	s17, [r9, #760]	@ 0x2f8
 8015510:	edc9 8abf 	vstr	s17, [r9, #764]	@ 0x2fc
 8015514:	edc9 8ac0 	vstr	s17, [r9, #768]	@ 0x300
 8015518:	edc9 8ac1 	vstr	s17, [r9, #772]	@ 0x304
 801551c:	edc9 8ac2 	vstr	s17, [r9, #776]	@ 0x308
 8015520:	edc9 8ac3 	vstr	s17, [r9, #780]	@ 0x30c
 8015524:	edc9 8ac4 	vstr	s17, [r9, #784]	@ 0x310
 8015528:	f7fd fe08 	bl	801313c <DataHist_parameters>
 801552c:	f609 1344 	addw	r3, r9, #2372	@ 0x944
 8015530:	f509 6216 	add.w	r2, r9, #2400	@ 0x960
 8015534:	f609 1168 	addw	r1, r9, #2408	@ 0x968
 8015538:	f509 6017 	add.w	r0, r9, #2416	@ 0x970
 801553c:	f10d 0c20 	add.w	ip, sp, #32
 8015540:	9304      	str	r3, [sp, #16]
 8015542:	9205      	str	r2, [sp, #20]
 8015544:	9106      	str	r1, [sp, #24]
 8015546:	9007      	str	r0, [sp, #28]
 8015548:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801554c:	f8c9 393c 	str.w	r3, [r9, #2364]	@ 0x93c
 8015550:	9b04      	ldr	r3, [sp, #16]
 8015552:	f8c9 0930 	str.w	r0, [r9, #2352]	@ 0x930
 8015556:	f8c9 1934 	str.w	r1, [r9, #2356]	@ 0x934
 801555a:	f8c9 2938 	str.w	r2, [r9, #2360]	@ 0x938
 801555e:	9906      	ldr	r1, [sp, #24]
 8015560:	9a05      	ldr	r2, [sp, #20]
 8015562:	9807      	ldr	r0, [sp, #28]
 8015564:	f509 6b14 	add.w	fp, r9, #2368	@ 0x940
 8015568:	f609 1a5c 	addw	sl, r9, #2396	@ 0x95c
 801556c:	edcb 8a00 	vstr	s17, [fp]
 8015570:	f609 1748 	addw	r7, r9, #2376	@ 0x948
 8015574:	edca 8a00 	vstr	s17, [sl]
 8015578:	f609 1664 	addw	r6, r9, #2404	@ 0x964
 801557c:	edc3 8a00 	vstr	s17, [r3]
 8015580:	f609 1554 	addw	r5, r9, #2388	@ 0x954
 8015584:	f609 1458 	addw	r4, r9, #2392	@ 0x958
 8015588:	f609 1e6c 	addw	lr, r9, #2412	@ 0x96c
 801558c:	230a      	movs	r3, #10
 801558e:	edc2 8a00 	vstr	s17, [r2]
 8015592:	edc7 8a00 	vstr	s17, [r7]
 8015596:	edc6 8a00 	vstr	s17, [r6]
 801559a:	f8c9 894c 	str.w	r8, [r9, #2380]	@ 0x94c
 801559e:	f8a9 8950 	strh.w	r8, [r9, #2384]	@ 0x950
 80155a2:	edc5 8a00 	vstr	s17, [r5]
 80155a6:	ed84 8a00 	vstr	s16, [r4]
 80155aa:	edc1 8a00 	vstr	s17, [r1]
 80155ae:	edc0 8a00 	vstr	s17, [r0]
 80155b2:	edce 8a00 	vstr	s17, [lr]
 80155b6:	f8c9 3974 	str.w	r3, [r9, #2420]	@ 0x974
 80155ba:	f889 8978 	strb.w	r8, [r9, #2424]	@ 0x978
 80155be:	f60d 4dd4 	addw	sp, sp, #3284	@ 0xcd4
 80155c2:	ecbd 8b02 	vpop	{d8}
 80155c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155ca:	bf00      	nop
 80155cc:	0000      	movs	r0, r0
	...

080155d0 <iNemoEngine_API_Update>:
 80155d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155d4:	ed2d 8b10 	vpush	{d8-d15}
 80155d8:	f2ad 5d0c 	subw	sp, sp, #1292	@ 0x50c
 80155dc:	eeb0 8a40 	vmov.f32	s16, s0
 80155e0:	4607      	mov	r7, r0
 80155e2:	4688      	mov	r8, r1
 80155e4:	4614      	mov	r4, r2
 80155e6:	932a      	str	r3, [sp, #168]	@ 0xa8
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	f000 820b 	beq.w	8015a04 <iNemoEngine_API_Update+0x434>
 80155ee:	68e0      	ldr	r0, [r4, #12]
 80155f0:	6921      	ldr	r1, [r4, #16]
 80155f2:	6962      	ldr	r2, [r4, #20]
 80155f4:	abab      	add	r3, sp, #684	@ 0x2ac
 80155f6:	c307      	stmia	r3!, {r0, r1, r2}
 80155f8:	6820      	ldr	r0, [r4, #0]
 80155fa:	6861      	ldr	r1, [r4, #4]
 80155fc:	68a2      	ldr	r2, [r4, #8]
 80155fe:	aba8      	add	r3, sp, #672	@ 0x2a0
 8015600:	c307      	stmia	r3!, {r0, r1, r2}
 8015602:	69a0      	ldr	r0, [r4, #24]
 8015604:	69e1      	ldr	r1, [r4, #28]
 8015606:	6a22      	ldr	r2, [r4, #32]
 8015608:	f897 4978 	ldrb.w	r4, [r7, #2424]	@ 0x978
 801560c:	abae      	add	r3, sp, #696	@ 0x2b8
 801560e:	c307      	stmia	r3!, {r0, r1, r2}
 8015610:	b12c      	cbz	r4, 801561e <iNemoEngine_API_Update+0x4e>
 8015612:	f8b7 2950 	ldrh.w	r2, [r7, #2384]	@ 0x950
 8015616:	793b      	ldrb	r3, [r7, #4]
 8015618:	429a      	cmp	r2, r3
 801561a:	f082 834a 	bcs.w	8017cb2 <iNemoEngine_API_Update+0x26e2>
 801561e:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8015622:	ae3b      	add	r6, sp, #236	@ 0xec
 8015624:	4619      	mov	r1, r3
 8015626:	4630      	mov	r0, r6
 8015628:	aaab      	add	r2, sp, #684	@ 0x2ac
 801562a:	9327      	str	r3, [sp, #156]	@ 0x9c
 801562c:	ad41      	add	r5, sp, #260	@ 0x104
 801562e:	f7fd fe31 	bl	8013294 <rotVect>
 8015632:	aaae      	add	r2, sp, #696	@ 0x2b8
 8015634:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8015638:	a83e      	add	r0, sp, #248	@ 0xf8
 801563a:	f7fd fe2b 	bl	8013294 <rotVect>
 801563e:	aaa8      	add	r2, sp, #672	@ 0x2a0
 8015640:	f107 0143 	add.w	r1, r7, #67	@ 0x43
 8015644:	4628      	mov	r0, r5
 8015646:	f7fd fe25 	bl	8013294 <rotVect>
 801564a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 801564e:	b923      	cbnz	r3, 801565a <iNemoEngine_API_Update+0x8a>
 8015650:	4b9d      	ldr	r3, [pc, #628]	@ (80158c8 <iNemoEngine_API_Update+0x2f8>)
 8015652:	606b      	str	r3, [r5, #4]
 8015654:	60ab      	str	r3, [r5, #8]
 8015656:	2300      	movs	r3, #0
 8015658:	602b      	str	r3, [r5, #0]
 801565a:	f8d7 394c 	ldr.w	r3, [r7, #2380]	@ 0x94c
 801565e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8015660:	2b09      	cmp	r3, #9
 8015662:	d851      	bhi.n	8015708 <iNemoEngine_API_Update+0x138>
 8015664:	edd6 aa01 	vldr	s21, [r6, #4]
 8015668:	ed96 ba00 	vldr	s22, [r6]
 801566c:	ed96 aa02 	vldr	s20, [r6, #8]
 8015670:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 8015674:	eef7 ba00 	vmov.f32	s23, #112	@ 0x3f800000  1.0
 8015678:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 801567c:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8015680:	ee17 0a90 	vmov	r0, s15
 8015684:	f7ea ff88 	bl	8000598 <__aeabi_f2d>
 8015688:	ec41 0b10 	vmov	d0, r0, r1
 801568c:	f007 fa40 	bl	801cb10 <sqrt>
 8015690:	ec51 0b10 	vmov	r0, r1, d0
 8015694:	f7eb fab0 	bl	8000bf8 <__aeabi_d2f>
 8015698:	ee07 0a90 	vmov	s15, r0
 801569c:	ee8b 7aa7 	vdiv.f32	s14, s23, s15
 80156a0:	ed95 9a01 	vldr	s18, [r5, #4]
 80156a4:	edd5 9a00 	vldr	s19, [r5]
 80156a8:	edd5 8a02 	vldr	s17, [r5, #8]
 80156ac:	ee69 7a09 	vmul.f32	s15, s18, s18
 80156b0:	ee2b ba07 	vmul.f32	s22, s22, s14
 80156b4:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80156b8:	ee6a aa87 	vmul.f32	s21, s21, s14
 80156bc:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80156c0:	ee2a aa07 	vmul.f32	s20, s20, s14
 80156c4:	ee17 0a90 	vmov	r0, s15
 80156c8:	ed86 ba00 	vstr	s22, [r6]
 80156cc:	edc6 aa01 	vstr	s21, [r6, #4]
 80156d0:	ed86 aa02 	vstr	s20, [r6, #8]
 80156d4:	f7ea ff60 	bl	8000598 <__aeabi_f2d>
 80156d8:	ec41 0b10 	vmov	d0, r0, r1
 80156dc:	f007 fa18 	bl	801cb10 <sqrt>
 80156e0:	ec51 0b10 	vmov	r0, r1, d0
 80156e4:	f7eb fa88 	bl	8000bf8 <__aeabi_d2f>
 80156e8:	ee07 0a10 	vmov	s14, r0
 80156ec:	eecb 7a87 	vdiv.f32	s15, s23, s14
 80156f0:	ee69 9aa7 	vmul.f32	s19, s19, s15
 80156f4:	ee29 9a27 	vmul.f32	s18, s18, s15
 80156f8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80156fc:	edc5 9a00 	vstr	s19, [r5]
 8015700:	ed85 9a01 	vstr	s18, [r5, #4]
 8015704:	edc5 8a02 	vstr	s17, [r5, #8]
 8015708:	793b      	ldrb	r3, [r7, #4]
 801570a:	f8b7 2950 	ldrh.w	r2, [r7, #2384]	@ 0x950
 801570e:	429a      	cmp	r2, r3
 8015710:	f080 80f2 	bcs.w	80158f8 <iNemoEngine_API_Update+0x328>
 8015714:	abd6      	add	r3, sp, #856	@ 0x358
 8015716:	931c      	str	r3, [sp, #112]	@ 0x70
 8015718:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 801571c:	9323      	str	r3, [sp, #140]	@ 0x8c
 801571e:	f607 1334 	addw	r3, r7, #2356	@ 0x934
 8015722:	9324      	str	r3, [sp, #144]	@ 0x90
 8015724:	f607 1338 	addw	r3, r7, #2360	@ 0x938
 8015728:	9325      	str	r3, [sp, #148]	@ 0x94
 801572a:	eddd 8aff 	vldr	s17, [sp, #1020]	@ 0x3fc
 801572e:	f607 133c 	addw	r3, r7, #2364	@ 0x93c
 8015732:	9326      	str	r3, [sp, #152]	@ 0x98
 8015734:	f50d 7a38 	add.w	sl, sp, #736	@ 0x2e0
 8015738:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801573a:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 801573c:	3301      	adds	r3, #1
 801573e:	f8c7 394c 	str.w	r3, [r7, #2380]	@ 0x94c
 8015742:	aaab      	add	r2, sp, #684	@ 0x2ac
 8015744:	4650      	mov	r0, sl
 8015746:	f7fd fda5 	bl	8013294 <rotVect>
 801574a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801574c:	ed93 aa00 	vldr	s20, [r3]
 8015750:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	f8c8 300c 	str.w	r3, [r8, #12]
 8015758:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	f8c8 3010 	str.w	r3, [r8, #16]
 8015760:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	f8c8 3014 	str.w	r3, [r8, #20]
 8015768:	ed88 aa06 	vstr	s20, [r8, #24]
 801576c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8015770:	9301      	str	r3, [sp, #4]
 8015772:	f108 0328 	add.w	r3, r8, #40	@ 0x28
 8015776:	4651      	mov	r1, sl
 8015778:	4642      	mov	r2, r8
 801577a:	f108 000c 	add.w	r0, r8, #12
 801577e:	9300      	str	r3, [sp, #0]
 8015780:	f108 031c 	add.w	r3, r8, #28
 8015784:	f7ff fb6c 	bl	8014e60 <output_update>
 8015788:	edd8 9a00 	vldr	s19, [r8]
 801578c:	ed98 9a01 	vldr	s18, [r8, #4]
 8015790:	eeb0 0a69 	vmov.f32	s0, s19
 8015794:	f007 fae6 	bl	801cd64 <sinf>
 8015798:	eeb0 8a40 	vmov.f32	s16, s0
 801579c:	eeb0 0a69 	vmov.f32	s0, s19
 80157a0:	f007 fa94 	bl	801cccc <cosf>
 80157a4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80157a6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80157aa:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 80157ae:	ed93 6a3d 	vldr	s12, [r3, #244]	@ 0xf4
 80157b2:	ee68 7a08 	vmul.f32	s15, s16, s16
 80157b6:	ee20 8a07 	vmul.f32	s16, s0, s14
 80157ba:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80158cc <iNemoEngine_API_Update+0x2fc>
 80157be:	eef0 6ac9 	vabs.f32	s13, s18
 80157c2:	eef4 6ac7 	vcmpe.f32	s13, s14
 80157c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157ca:	eea7 8a86 	vfma.f32	s16, s15, s12
 80157ce:	d573      	bpl.n	80158b8 <iNemoEngine_API_Update+0x2e8>
 80157d0:	eeb0 0a49 	vmov.f32	s0, s18
 80157d4:	f007 fb0c 	bl	801cdf0 <tanf>
 80157d8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80157dc:	eeb0 7a68 	vmov.f32	s14, s17
 80157e0:	eea0 7a08 	vfma.f32	s14, s0, s16
 80157e4:	4c3a      	ldr	r4, [pc, #232]	@ (80158d0 <iNemoEngine_API_Update+0x300>)
 80157e6:	eef1 7ac7 	vsqrt.f32	s15, s14
 80157ea:	f8d4 03c0 	ldr.w	r0, [r4, #960]	@ 0x3c0
 80157ee:	eddf 6a39 	vldr	s13, [pc, #228]	@ 80158d4 <iNemoEngine_API_Update+0x304>
 80157f2:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 80158e8 <iNemoEngine_API_Update+0x318>
 80157f6:	ed98 8a04 	vldr	s16, [r8, #16]
 80157fa:	edd8 8a03 	vldr	s17, [r8, #12]
 80157fe:	ed98 9a05 	vldr	s18, [r8, #20]
 8015802:	ed98 6a08 	vldr	s12, [r8, #32]
 8015806:	ed98 0a07 	vldr	s0, [r8, #28]
 801580a:	ed98 1a09 	vldr	s2, [r8, #36]	@ 0x24
 801580e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015812:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801581a:	bf88      	it	hi
 801581c:	eef0 7a66 	vmovhi.f32	s15, s13
 8015820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015828:	bfb8      	it	lt
 801582a:	eef0 7a47 	vmovlt.f32	s15, s14
 801582e:	edc8 7a0e 	vstr	s15, [r8, #56]	@ 0x38
 8015832:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8015836:	bb73      	cbnz	r3, 8015896 <iNemoEngine_API_Update+0x2c6>
 8015838:	eef0 0a46 	vmov.f32	s1, s12
 801583c:	f7fd fdfc 	bl	8013438 <findDirection>
 8015840:	f8c4 03c0 	str.w	r0, [r4, #960]	@ 0x3c0
 8015844:	2805      	cmp	r0, #5
 8015846:	f204 8186 	bhi.w	8019b56 <iNemoEngine_API_Update+0x4586>
 801584a:	e8df f010 	tbh	[pc, r0, lsl #1]
 801584e:	000a      	.short	0x000a
 8015850:	0006123c 	.word	0x0006123c
 8015854:	0006126f 	.word	0x0006126f
 8015858:	000a      	.short	0x000a
 801585a:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80158d8 <iNemoEngine_API_Update+0x308>
 801585e:	ee79 9aa7 	vadd.f32	s19, s19, s15
 8015862:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80158dc <iNemoEngine_API_Update+0x30c>
 8015866:	eef4 9ae7 	vcmpe.f32	s19, s15
 801586a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801586e:	bfa8      	it	ge
 8015870:	ee79 9ae7 	vsubge.f32	s19, s19, s15
 8015874:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 8015878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801587c:	d503      	bpl.n	8015886 <iNemoEngine_API_Update+0x2b6>
 801587e:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80158dc <iNemoEngine_API_Update+0x30c>
 8015882:	ee79 9aa7 	vadd.f32	s19, s19, s15
 8015886:	edc8 9a0d 	vstr	s19, [r8, #52]	@ 0x34
 801588a:	f20d 5d0c 	addw	sp, sp, #1292	@ 0x50c
 801588e:	ecbd 8b10 	vpop	{d8-d15}
 8015892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015896:	eef0 0a40 	vmov.f32	s1, s0
 801589a:	eeb1 1a41 	vneg.f32	s2, s2
 801589e:	eeb0 0a46 	vmov.f32	s0, s12
 80158a2:	f7fd fdc9 	bl	8013438 <findDirection>
 80158a6:	eef0 7a68 	vmov.f32	s15, s17
 80158aa:	eeb1 9a49 	vneg.f32	s18, s18
 80158ae:	eef0 8a48 	vmov.f32	s17, s16
 80158b2:	eeb0 8a67 	vmov.f32	s16, s15
 80158b6:	e7c3      	b.n	8015840 <iNemoEngine_API_Update+0x270>
 80158b8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80158e0 <iNemoEngine_API_Update+0x310>
 80158bc:	eeb0 7a68 	vmov.f32	s14, s17
 80158c0:	eea8 7a27 	vfma.f32	s14, s16, s15
 80158c4:	e78e      	b.n	80157e4 <iNemoEngine_API_Update+0x214>
 80158c6:	bf00      	nop
 80158c8:	3f333333 	.word	0x3f333333
 80158cc:	3fbc430e 	.word	0x3fbc430e
 80158d0:	2000038c 	.word	0x2000038c
 80158d4:	40490fdb 	.word	0x40490fdb
 80158d8:	43340000 	.word	0x43340000
 80158dc:	43b40000 	.word	0x43b40000
 80158e0:	42c6ab07 	.word	0x42c6ab07
 80158e4:	3c03126f 	.word	0x3c03126f
 80158e8:	3c8efa35 	.word	0x3c8efa35
 80158ec:	3ed93dd9 	.word	0x3ed93dd9
 80158f0:	3b656042 	.word	0x3b656042
 80158f4:	42c80000 	.word	0x42c80000
 80158f8:	ee07 3a90 	vmov	s15, r3
 80158fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015900:	ed5f 6a08 	vldr	s13, [pc, #-32]	@ 80158e4 <iNemoEngine_API_Update+0x314>
 8015904:	ed1f 7a08 	vldr	s14, [pc, #-32]	@ 80158e8 <iNemoEngine_API_Update+0x318>
 8015908:	ed1f aa08 	vldr	s20, [pc, #-32]	@ 80158ec <iNemoEngine_API_Update+0x31c>
 801590c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8015910:	f607 145c 	addw	r4, r7, #2396	@ 0x95c
 8015914:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8015918:	f507 6016 	add.w	r0, r7, #2400	@ 0x960
 801591c:	f607 1164 	addw	r1, r7, #2404	@ 0x964
 8015920:	2200      	movs	r2, #0
 8015922:	f04f 0c00 	mov.w	ip, #0
 8015926:	ab63      	add	r3, sp, #396	@ 0x18c
 8015928:	edcd 7a07 	vstr	s15, [sp, #28]
 801592c:	eef1 7ac6 	vsqrt.f32	s15, s12
 8015930:	ed5f 6a11 	vldr	s13, [pc, #-68]	@ 80158f0 <iNemoEngine_API_Update+0x320>
 8015934:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8015938:	edd4 6a00 	vldr	s13, [r4]
 801593c:	ee66 fa87 	vmul.f32	s31, s13, s14
 8015940:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8015944:	edd0 6a00 	vldr	s13, [r0]
 8015948:	ee26 fa87 	vmul.f32	s30, s13, s14
 801594c:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 8015950:	edd1 6a00 	vldr	s13, [r1]
 8015954:	f8a7 c950 	strh.w	ip, [r7, #2384]	@ 0x950
 8015958:	6022      	str	r2, [r4, #0]
 801595a:	6002      	str	r2, [r0, #0]
 801595c:	600a      	str	r2, [r1, #0]
 801595e:	797a      	ldrb	r2, [r7, #5]
 8015960:	9209      	str	r2, [sp, #36]	@ 0x24
 8015962:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8015966:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801596a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801596e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015970:	edcd 6a08 	vstr	s13, [sp, #32]
 8015974:	ee26 7a87 	vmul.f32	s14, s13, s14
 8015978:	ac60      	add	r4, sp, #384	@ 0x180
 801597a:	2b01      	cmp	r3, #1
 801597c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015980:	ee27 aa8a 	vmul.f32	s20, s15, s20
 8015984:	ed8d 7a10 	vstr	s14, [sp, #64]	@ 0x40
 8015988:	f002 83ff 	beq.w	801818a <iNemoEngine_API_Update+0x2bba>
 801598c:	2b02      	cmp	r3, #2
 801598e:	f002 83f3 	beq.w	8018178 <iNemoEngine_API_Update+0x2ba8>
 8015992:	2b00      	cmp	r3, #0
 8015994:	f002 8261 	beq.w	8017e5a <iNemoEngine_API_Update+0x288a>
 8015998:	edd7 9a05 	vldr	s19, [r7, #20]
 801599c:	ed1f 7a2b 	vldr	s14, [pc, #-172]	@ 80158f4 <iNemoEngine_API_Update+0x324>
 80159a0:	4a1a      	ldr	r2, [pc, #104]	@ (8015a0c <iNemoEngine_API_Update+0x43c>)
 80159a2:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 80159a6:	ee69 9a87 	vmul.f32	s19, s19, s14
 80159aa:	ee67 8aa8 	vmul.f32	s17, s15, s17
 80159ae:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 80159b2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8015a10 <iNemoEngine_API_Update+0x440>
 80159b6:	eddf 5a17 	vldr	s11, [pc, #92]	@ 8015a14 <iNemoEngine_API_Update+0x444>
 80159ba:	887b      	ldrh	r3, [r7, #2]
 80159bc:	ee26 7a87 	vmul.f32	s14, s13, s14
 80159c0:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80159c4:	1e59      	subs	r1, r3, #1
 80159c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80159ca:	2912      	cmp	r1, #18
 80159cc:	edcd 5a2f 	vstr	s11, [sp, #188]	@ 0xbc
 80159d0:	edcd 7a21 	vstr	s15, [sp, #132]	@ 0x84
 80159d4:	d824      	bhi.n	8015a20 <iNemoEngine_API_Update+0x450>
 80159d6:	3301      	adds	r3, #1
 80159d8:	b299      	uxth	r1, r3
 80159da:	2903      	cmp	r1, #3
 80159dc:	b21b      	sxth	r3, r3
 80159de:	f202 8232 	bhi.w	8017e46 <iNemoEngine_API_Update+0x2876>
 80159e2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8015a18 <iNemoEngine_API_Update+0x448>
 80159e6:	ee86 6a07 	vdiv.f32	s12, s12, s14
 80159ea:	ee6a 7a07 	vmul.f32	s15, s20, s14
 80159ee:	ed8d 6a29 	vstr	s12, [sp, #164]	@ 0xa4
 80159f2:	ed9d 6a21 	vldr	s12, [sp, #132]	@ 0x84
 80159f6:	ee26 7a07 	vmul.f32	s14, s12, s14
 80159fa:	eeb0 aa67 	vmov.f32	s20, s15
 80159fe:	ed8d 7a21 	vstr	s14, [sp, #132]	@ 0x84
 8015a02:	e020      	b.n	8015a46 <iNemoEngine_API_Update+0x476>
 8015a04:	ab50      	add	r3, sp, #320	@ 0x140
 8015a06:	932a      	str	r3, [sp, #168]	@ 0xa8
 8015a08:	e5f1      	b.n	80155ee <iNemoEngine_API_Update+0x1e>
 8015a0a:	bf00      	nop
 8015a0c:	3a83126f 	.word	0x3a83126f
 8015a10:	3fb50481 	.word	0x3fb50481
 8015a14:	3e0f5c29 	.word	0x3e0f5c29
 8015a18:	3e4ccccd 	.word	0x3e4ccccd
 8015a1c:	358637bd 	.word	0x358637bd
 8015a20:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8015a1c <iNemoEngine_API_Update+0x44c>
 8015a24:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8015a28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015a2c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8015a30:	ee86 7a07 	vdiv.f32	s14, s12, s14
 8015a34:	2300      	movs	r3, #0
 8015a36:	ee6a 7a27 	vmul.f32	s15, s20, s15
 8015a3a:	ed8d 7a29 	vstr	s14, [sp, #164]	@ 0xa4
 8015a3e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8015a42:	ee2a aa07 	vmul.f32	s20, s20, s14
 8015a46:	edcd 7a8d 	vstr	s15, [sp, #564]	@ 0x234
 8015a4a:	edcd 7a8e 	vstr	s15, [sp, #568]	@ 0x238
 8015a4e:	edcd 7a8f 	vstr	s15, [sp, #572]	@ 0x23c
 8015a52:	eddd 7a21 	vldr	s15, [sp, #132]	@ 0x84
 8015a56:	807b      	strh	r3, [r7, #2]
 8015a58:	edcd 7a96 	vstr	s15, [sp, #600]	@ 0x258
 8015a5c:	eddd 7a2f 	vldr	s15, [sp, #188]	@ 0xbc
 8015a60:	4be5      	ldr	r3, [pc, #916]	@ (8015df8 <iNemoEngine_API_Update+0x828>)
 8015a62:	edcd 7a97 	vstr	s15, [sp, #604]	@ 0x25c
 8015a66:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8015a6a:	eddd 7a29 	vldr	s15, [sp, #164]	@ 0xa4
 8015a6e:	926c      	str	r2, [sp, #432]	@ 0x1b0
 8015a70:	ee26 7a87 	vmul.f32	s14, s13, s14
 8015a74:	a8d6      	add	r0, sp, #856	@ 0x358
 8015a76:	926d      	str	r2, [sp, #436]	@ 0x1b4
 8015a78:	926e      	str	r2, [sp, #440]	@ 0x1b8
 8015a7a:	2100      	movs	r1, #0
 8015a7c:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8015a80:	4605      	mov	r5, r0
 8015a82:	9371      	str	r3, [sp, #452]	@ 0x1c4
 8015a84:	ed8d 7a1f 	vstr	s14, [sp, #124]	@ 0x7c
 8015a88:	901c      	str	r0, [sp, #112]	@ 0x70
 8015a8a:	ed8d aa90 	vstr	s20, [sp, #576]	@ 0x240
 8015a8e:	ed8d aa91 	vstr	s20, [sp, #580]	@ 0x244
 8015a92:	ed8d aa92 	vstr	s20, [sp, #584]	@ 0x248
 8015a96:	edcd 8a93 	vstr	s17, [sp, #588]	@ 0x24c
 8015a9a:	edcd 8a94 	vstr	s17, [sp, #592]	@ 0x250
 8015a9e:	edcd 8a95 	vstr	s17, [sp, #596]	@ 0x254
 8015aa2:	ed8d 7a98 	vstr	s14, [sp, #608]	@ 0x260
 8015aa6:	edcd 7a69 	vstr	s15, [sp, #420]	@ 0x1a4
 8015aaa:	edcd 7a6a 	vstr	s15, [sp, #424]	@ 0x1a8
 8015aae:	edcd 7a6b 	vstr	s15, [sp, #428]	@ 0x1ac
 8015ab2:	f00a f8a8 	bl	801fc06 <memset>
 8015ab6:	7b79      	ldrb	r1, [r7, #13]
 8015ab8:	9120      	str	r1, [sp, #128]	@ 0x80
 8015aba:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8015abe:	f8c5 30a8 	str.w	r3, [r5, #168]	@ 0xa8
 8015ac2:	f8c5 30dc 	str.w	r3, [r5, #220]	@ 0xdc
 8015ac6:	f8c5 3110 	str.w	r3, [r5, #272]	@ 0x110
 8015aca:	f8c5 3144 	str.w	r3, [r5, #324]	@ 0x144
 8015ace:	f8c5 3178 	str.w	r3, [r5, #376]	@ 0x178
 8015ad2:	f8c5 31ac 	str.w	r3, [r5, #428]	@ 0x1ac
 8015ad6:	2900      	cmp	r1, #0
 8015ad8:	f001 8103 	beq.w	8016ce2 <iNemoEngine_API_Update+0x1712>
 8015adc:	ed94 8a01 	vldr	s16, [r4, #4]
 8015ae0:	ed94 9a00 	vldr	s18, [r4]
 8015ae4:	edd4 ea02 	vldr	s29, [r4, #8]
 8015ae8:	ee68 7a08 	vmul.f32	s15, s16, s16
 8015aec:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8015af0:	eee9 7a09 	vfma.f32	s15, s18, s18
 8015af4:	ee28 7a07 	vmul.f32	s14, s16, s14
 8015af8:	eeee 7aae 	vfma.f32	s15, s29, s29
 8015afc:	ee39 6a09 	vadd.f32	s12, s18, s18
 8015b00:	ee7e 5aae 	vadd.f32	s11, s29, s29
 8015b04:	edcd 7a04 	vstr	s15, [sp, #16]
 8015b08:	eeb1 5a65 	vneg.f32	s10, s11
 8015b0c:	eef1 7a46 	vneg.f32	s15, s12
 8015b10:	eef1 6a47 	vneg.f32	s13, s14
 8015b14:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8015b16:	ed94 da04 	vldr	s26, [r4, #16]
 8015b1a:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
 8015b1e:	eef1 7a4d 	vneg.f32	s15, s26
 8015b22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015b26:	edd4 ba05 	vldr	s23, [r4, #20]
 8015b2a:	edc3 7a05 	vstr	s15, [r3, #20]
 8015b2e:	eef1 7a67 	vneg.f32	s15, s15
 8015b32:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
 8015b36:	ee7b 7aab 	vadd.f32	s15, s23, s23
 8015b3a:	ed94 ca03 	vldr	s24, [r4, #12]
 8015b3e:	edc3 7a04 	vstr	s15, [r3, #16]
 8015b42:	eef1 7a67 	vneg.f32	s15, s15
 8015b46:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
 8015b4a:	ee7c 7a0c 	vadd.f32	s15, s24, s24
 8015b4e:	edc3 5a01 	vstr	s11, [r3, #4]
 8015b52:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
 8015b56:	eef1 7a67 	vneg.f32	s15, s15
 8015b5a:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
 8015b5e:	ed83 7a02 	vstr	s14, [r3, #8]
 8015b62:	ed83 5a0c 	vstr	s10, [r3, #48]	@ 0x30
 8015b66:	ed83 6a0e 	vstr	s12, [r3, #56]	@ 0x38
 8015b6a:	edc3 6a18 	vstr	s13, [r3, #96]	@ 0x60
 8015b6e:	2230      	movs	r2, #48	@ 0x30
 8015b70:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8015b74:	2100      	movs	r1, #0
 8015b76:	a899      	add	r0, sp, #612	@ 0x264
 8015b78:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8015b7c:	9346      	str	r3, [sp, #280]	@ 0x118
 8015b7e:	f00a f842 	bl	801fc06 <memset>
 8015b82:	edd7 7a06 	vldr	s15, [r7, #24]
 8015b86:	f897 31ac 	ldrb.w	r3, [r7, #428]	@ 0x1ac
 8015b8a:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8015b8e:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
 8015b92:	edd7 7a07 	vldr	s15, [r7, #28]
 8015b96:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8015b9a:	edcd 7a12 	vstr	s15, [sp, #72]	@ 0x48
 8015b9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8015ba2:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8015ba6:	edcd 7a13 	vstr	s15, [sp, #76]	@ 0x4c
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	f042 8660 	bne.w	8018870 <iNemoEngine_API_Update+0x32a0>
 8015bb0:	f507 6314 	add.w	r3, r7, #2368	@ 0x940
 8015bb4:	932b      	str	r3, [sp, #172]	@ 0xac
 8015bb6:	f607 1344 	addw	r3, r7, #2372	@ 0x944
 8015bba:	932c      	str	r3, [sp, #176]	@ 0xb0
 8015bbc:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8015bc0:	932d      	str	r3, [sp, #180]	@ 0xb4
 8015bc2:	f897 3318 	ldrb.w	r3, [r7, #792]	@ 0x318
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	f042 8470 	bne.w	80184ac <iNemoEngine_API_Update+0x2edc>
 8015bcc:	f207 43b4 	addw	r3, r7, #1204	@ 0x4b4
 8015bd0:	9305      	str	r3, [sp, #20]
 8015bd2:	f207 6324 	addw	r3, r7, #1572	@ 0x624
 8015bd6:	9306      	str	r3, [sp, #24]
 8015bd8:	f507 63f3 	add.w	r3, r7, #1944	@ 0x798
 8015bdc:	f507 6597 	add.w	r5, r7, #1208	@ 0x4b8
 8015be0:	f507 66c5 	add.w	r6, r7, #1576	@ 0x628
 8015be4:	930e      	str	r3, [sp, #56]	@ 0x38
 8015be6:	f207 7b94 	addw	fp, r7, #1940	@ 0x794
 8015bea:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 8015bee:	ed93 ba00 	vldr	s22, [r3]
 8015bf2:	9323      	str	r3, [sp, #140]	@ 0x8c
 8015bf4:	f607 1234 	addw	r2, r7, #2356	@ 0x934
 8015bf8:	f607 1138 	addw	r1, r7, #2360	@ 0x938
 8015bfc:	f607 103c 	addw	r0, r7, #2364	@ 0x93c
 8015c00:	edd2 aa00 	vldr	s21, [r2]
 8015c04:	edd1 9a00 	vldr	s19, [r1]
 8015c08:	edd0 ca00 	vldr	s25, [r0]
 8015c0c:	9224      	str	r2, [sp, #144]	@ 0x90
 8015c0e:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8015c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c16:	9125      	str	r1, [sp, #148]	@ 0x94
 8015c18:	9026      	str	r0, [sp, #152]	@ 0x98
 8015c1a:	ed8d ba58 	vstr	s22, [sp, #352]	@ 0x160
 8015c1e:	edcd aa59 	vstr	s21, [sp, #356]	@ 0x164
 8015c22:	edcd 9a5a 	vstr	s19, [sp, #360]	@ 0x168
 8015c26:	edcd ca5b 	vstr	s25, [sp, #364]	@ 0x16c
 8015c2a:	f04f 0300 	mov.w	r3, #0
 8015c2e:	d142      	bne.n	8015cb6 <iNemoEngine_API_Update+0x6e6>
 8015c30:	eef5 aa40 	vcmp.f32	s21, #0.0
 8015c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c38:	d13d      	bne.n	8015cb6 <iNemoEngine_API_Update+0x6e6>
 8015c3a:	eef5 9a40 	vcmp.f32	s19, #0.0
 8015c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c42:	f043 856d 	bne.w	8019720 <iNemoEngine_API_Update+0x4150>
 8015c46:	eef5 ca40 	vcmp.f32	s25, #0.0
 8015c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c4e:	f043 867f 	bne.w	8019950 <iNemoEngine_API_Update+0x4380>
 8015c52:	eef7 da00 	vmov.f32	s27, #112	@ 0x3f800000  1.0
 8015c56:	9358      	str	r3, [sp, #352]	@ 0x160
 8015c58:	9359      	str	r3, [sp, #356]	@ 0x164
 8015c5a:	935a      	str	r3, [sp, #360]	@ 0x168
 8015c5c:	2100      	movs	r1, #0
 8015c5e:	4b67      	ldr	r3, [pc, #412]	@ (8015dfc <iNemoEngine_API_Update+0x82c>)
 8015c60:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8015c64:	edc7 da73 	vstr	s27, [r7, #460]	@ 0x1cc
 8015c68:	edc7 da74 	vstr	s27, [r7, #464]	@ 0x1d0
 8015c6c:	f887 11ac 	strb.w	r1, [r7, #428]	@ 0x1ac
 8015c70:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8015c74:	f507 70ea 	add.w	r0, r7, #468	@ 0x1d4
 8015c78:	edcd da5b 	vstr	s27, [sp, #364]	@ 0x16c
 8015c7c:	f009 ffc3 	bl	801fc06 <memset>
 8015c80:	4b5f      	ldr	r3, [pc, #380]	@ (8015e00 <iNemoEngine_API_Update+0x830>)
 8015c82:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8015c86:	eef0 9a6c 	vmov.f32	s19, s25
 8015c8a:	eef0 aa6c 	vmov.f32	s21, s25
 8015c8e:	eeb0 ba6c 	vmov.f32	s22, s25
 8015c92:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 8015c96:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8015c9a:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8015c9e:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 8015ca2:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8015ca6:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 8015caa:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8015cae:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 8015cb2:	eef0 ca6d 	vmov.f32	s25, s27
 8015cb6:	eddf 7a53 	vldr	s15, [pc, #332]	@ 8015e04 <iNemoEngine_API_Update+0x834>
 8015cba:	ed9d 7a04 	vldr	s14, [sp, #16]
 8015cbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cc6:	f100 87fe 	bmi.w	8016cc6 <iNemoEngine_API_Update+0x16f6>
 8015cca:	eeb1 eac7 	vsqrt.f32	s28, s14
 8015cce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015cd2:	ee3e 6a47 	vsub.f32	s12, s28, s14
 8015cd6:	eec7 7a0e 	vdiv.f32	s15, s14, s28
 8015cda:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8015cde:	eeb0 7ac6 	vabs.f32	s14, s12
 8015ce2:	ed8d 7a2e 	vstr	s14, [sp, #184]	@ 0xb8
 8015ce6:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015cea:	ed8d 7a30 	vstr	s14, [sp, #192]	@ 0xc0
 8015cee:	ee2d 7a0d 	vmul.f32	s14, s26, s26
 8015cf2:	edd4 6a00 	vldr	s13, [r4]
 8015cf6:	ed94 6a01 	vldr	s12, [r4, #4]
 8015cfa:	edcd 6a34 	vstr	s13, [sp, #208]	@ 0xd0
 8015cfe:	eeac 7a0c 	vfma.f32	s14, s24, s24
 8015d02:	9b05      	ldr	r3, [sp, #20]
 8015d04:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8015d08:	eeab 7aab 	vfma.f32	s14, s23, s23
 8015d0c:	4628      	mov	r0, r5
 8015d0e:	ee67 6a86 	vmul.f32	s13, s15, s12
 8015d12:	ed8d 6a35 	vstr	s12, [sp, #212]	@ 0xd4
 8015d16:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8015e04 <iNemoEngine_API_Update+0x834>
 8015d1a:	edcd 6a48 	vstr	s13, [sp, #288]	@ 0x120
 8015d1e:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8015d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d26:	bf54      	ite	pl
 8015d28:	eeb1 7ac7 	vsqrtpl.f32	s14, s14
 8015d2c:	ed9f 7a36 	vldrmi	s14, [pc, #216]	@ 8015e08 <iNemoEngine_API_Update+0x838>
 8015d30:	ed94 5a02 	vldr	s10, [r4, #8]
 8015d34:	ed8d 7a0a 	vstr	s14, [sp, #40]	@ 0x28
 8015d38:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 8015d3c:	ee82 7a87 	vdiv.f32	s14, s5, s14
 8015d40:	ee65 7a27 	vmul.f32	s15, s10, s15
 8015d44:	ee2d 6a07 	vmul.f32	s12, s26, s14
 8015d48:	ed93 3a00 	vldr	s6, [r3]
 8015d4c:	ed8d 6a4b 	vstr	s12, [sp, #300]	@ 0x12c
 8015d50:	ee66 6a26 	vmul.f32	s13, s12, s13
 8015d54:	ee2c 6a07 	vmul.f32	s12, s24, s14
 8015d58:	ee2b 7a87 	vmul.f32	s14, s23, s14
 8015d5c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8015d60:	eeb0 0a43 	vmov.f32	s0, s6
 8015d64:	eee7 6a87 	vfma.f32	s13, s15, s14
 8015d68:	ed8d 7a4c 	vstr	s14, [sp, #304]	@ 0x130
 8015d6c:	ed8d 5a32 	vstr	s10, [sp, #200]	@ 0xc8
 8015d70:	edcd 5a47 	vstr	s11, [sp, #284]	@ 0x11c
 8015d74:	ed8d 6a4a 	vstr	s12, [sp, #296]	@ 0x128
 8015d78:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 8015d7c:	edcd 7a49 	vstr	s15, [sp, #292]	@ 0x124
 8015d80:	f7fd fd14 	bl	80137ac <dataDerivative5>
 8015d84:	9b06      	ldr	r3, [sp, #24]
 8015d86:	ed8d 0a14 	vstr	s0, [sp, #80]	@ 0x50
 8015d8a:	edd3 7a00 	vldr	s15, [r3]
 8015d8e:	4630      	mov	r0, r6
 8015d90:	eeb0 0a67 	vmov.f32	s0, s15
 8015d94:	edcd 7a03 	vstr	s15, [sp, #12]
 8015d98:	f7fd fd08 	bl	80137ac <dataDerivative5>
 8015d9c:	eddb da00 	vldr	s27, [fp]
 8015da0:	ed8d 0a0c 	vstr	s0, [sp, #48]	@ 0x30
 8015da4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8015da6:	eeb0 0a6d 	vmov.f32	s0, s27
 8015daa:	f7fd fcff 	bl	80137ac <dataDerivative5>
 8015dae:	eec2 7a83 	vdiv.f32	s15, s5, s6
 8015db2:	ed8d 0a16 	vstr	s0, [sp, #88]	@ 0x58
 8015db6:	ee29 9a27 	vmul.f32	s18, s18, s15
 8015dba:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015dbe:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8015dc2:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8015e0c <iNemoEngine_API_Update+0x83c>
 8015dc6:	eeb0 7ac9 	vabs.f32	s14, s18
 8015dca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dd2:	d52d      	bpl.n	8015e30 <iNemoEngine_API_Update+0x860>
 8015dd4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015dd8:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8015ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015de0:	f282 8092 	bge.w	8017f08 <iNemoEngine_API_Update+0x2938>
 8015de4:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8015de8:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8015dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015df0:	f303 8088 	bgt.w	8018f04 <iNemoEngine_API_Update+0x3934>
 8015df4:	e00c      	b.n	8015e10 <iNemoEngine_API_Update+0x840>
 8015df6:	bf00      	nop
 8015df8:	3a9d4952 	.word	0x3a9d4952
 8015dfc:	bf666666 	.word	0xbf666666
 8015e00:	40a00000 	.word	0x40a00000
 8015e04:	3c23d70a 	.word	0x3c23d70a
 8015e08:	3dcccccd 	.word	0x3dcccccd
 8015e0c:	4b000000 	.word	0x4b000000
 8015e10:	ee79 7a67 	vsub.f32	s15, s18, s15
 8015e14:	ee17 0a90 	vmov	r0, s15
 8015e18:	f7ea fbbe 	bl	8000598 <__aeabi_f2d>
 8015e1c:	ec41 0b10 	vmov	d0, r0, r1
 8015e20:	f007 f8fe 	bl	801d020 <ceil>
 8015e24:	ec51 0b10 	vmov	r0, r1, d0
 8015e28:	f7ea fee6 	bl	8000bf8 <__aeabi_d2f>
 8015e2c:	ee09 0a10 	vmov	s18, r0
 8015e30:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8015e0c <iNemoEngine_API_Update+0x83c>
 8015e34:	ed8d 9a4d 	vstr	s18, [sp, #308]	@ 0x134
 8015e38:	eeb0 7ac8 	vabs.f32	s14, s16
 8015e3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e44:	d51f      	bpl.n	8015e86 <iNemoEngine_API_Update+0x8b6>
 8015e46:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015e4a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e52:	f282 802d 	bge.w	8017eb0 <iNemoEngine_API_Update+0x28e0>
 8015e56:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8015e5a:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8015e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e62:	f303 804b 	bgt.w	8018efc <iNemoEngine_API_Update+0x392c>
 8015e66:	ee78 7a67 	vsub.f32	s15, s16, s15
 8015e6a:	ee17 0a90 	vmov	r0, s15
 8015e6e:	f7ea fb93 	bl	8000598 <__aeabi_f2d>
 8015e72:	ec41 0b10 	vmov	d0, r0, r1
 8015e76:	f007 f8d3 	bl	801d020 <ceil>
 8015e7a:	ec51 0b10 	vmov	r0, r1, d0
 8015e7e:	f7ea febb 	bl	8000bf8 <__aeabi_d2f>
 8015e82:	ee08 0a10 	vmov	s16, r0
 8015e86:	ed5f 7a1f 	vldr	s15, [pc, #-124]	@ 8015e0c <iNemoEngine_API_Update+0x83c>
 8015e8a:	ed8d 8a4e 	vstr	s16, [sp, #312]	@ 0x138
 8015e8e:	eeb0 7aee 	vabs.f32	s14, s29
 8015e92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e9a:	d51f      	bpl.n	8015edc <iNemoEngine_API_Update+0x90c>
 8015e9c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015ea0:	eef4 eae7 	vcmpe.f32	s29, s15
 8015ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ea8:	f281 87f0 	bge.w	8017e8c <iNemoEngine_API_Update+0x28bc>
 8015eac:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8015eb0:	eef4 eac7 	vcmpe.f32	s29, s14
 8015eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eb8:	f303 801c 	bgt.w	8018ef4 <iNemoEngine_API_Update+0x3924>
 8015ebc:	ee7e 7ae7 	vsub.f32	s15, s29, s15
 8015ec0:	ee17 0a90 	vmov	r0, s15
 8015ec4:	f7ea fb68 	bl	8000598 <__aeabi_f2d>
 8015ec8:	ec41 0b10 	vmov	d0, r0, r1
 8015ecc:	f007 f8a8 	bl	801d020 <ceil>
 8015ed0:	ec51 0b10 	vmov	r0, r1, d0
 8015ed4:	f7ea fe90 	bl	8000bf8 <__aeabi_d2f>
 8015ed8:	ee0e 0a90 	vmov	s29, r0
 8015edc:	f897 04b1 	ldrb.w	r0, [r7, #1201]	@ 0x4b1
 8015ee0:	edcd ea4f 	vstr	s29, [sp, #316]	@ 0x13c
 8015ee4:	1e43      	subs	r3, r0, #1
 8015ee6:	b25a      	sxtb	r2, r3
 8015ee8:	2a00      	cmp	r2, #0
 8015eea:	b2db      	uxtb	r3, r3
 8015eec:	dd17      	ble.n	8015f1e <iNemoEngine_API_Update+0x94e>
 8015eee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015ef2:	1e82      	subs	r2, r0, #2
 8015ef4:	009b      	lsls	r3, r3, #2
 8015ef6:	b2d2      	uxtb	r2, r2
 8015ef8:	f507 6194 	add.w	r1, r7, #1184	@ 0x4a0
 8015efc:	4419      	add	r1, r3
 8015efe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015f02:	f203 43ac 	addw	r3, r3, #1196	@ 0x4ac
 8015f06:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 8015f0a:	443b      	add	r3, r7
 8015f0c:	681a      	ldr	r2, [r3, #0]
 8015f0e:	60da      	str	r2, [r3, #12]
 8015f10:	685a      	ldr	r2, [r3, #4]
 8015f12:	611a      	str	r2, [r3, #16]
 8015f14:	689a      	ldr	r2, [r3, #8]
 8015f16:	615a      	str	r2, [r3, #20]
 8015f18:	3b0c      	subs	r3, #12
 8015f1a:	428b      	cmp	r3, r1
 8015f1c:	d1f6      	bne.n	8015f0c <iNemoEngine_API_Update+0x93c>
 8015f1e:	ed9d 7a03 	vldr	s14, [sp, #12]
 8015f22:	ed85 9a00 	vstr	s18, [r5]
 8015f26:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015f2a:	ee87 9a87 	vdiv.f32	s18, s15, s14
 8015f2e:	f207 43bc 	addw	r3, r7, #1212	@ 0x4bc
 8015f32:	ed83 8a00 	vstr	s16, [r3]
 8015f36:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8015f3a:	edc3 ea00 	vstr	s29, [r3]
 8015f3e:	f897 34b0 	ldrb.w	r3, [r7, #1200]	@ 0x4b0
 8015f42:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8015e0c <iNemoEngine_API_Update+0x83c>
 8015f46:	ee2c 8a09 	vmul.f32	s16, s24, s18
 8015f4a:	3301      	adds	r3, #1
 8015f4c:	b2db      	uxtb	r3, r3
 8015f4e:	eeb0 7ac8 	vabs.f32	s14, s16
 8015f52:	4283      	cmp	r3, r0
 8015f54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f58:	bf28      	it	cs
 8015f5a:	4603      	movcs	r3, r0
 8015f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f60:	ee6d ea09 	vmul.f32	s29, s26, s18
 8015f64:	f887 34b0 	strb.w	r3, [r7, #1200]	@ 0x4b0
 8015f68:	ee2b 9a89 	vmul.f32	s18, s23, s18
 8015f6c:	d51f      	bpl.n	8015fae <iNemoEngine_API_Update+0x9de>
 8015f6e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015f72:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f7a:	f281 8775 	bge.w	8017e68 <iNemoEngine_API_Update+0x2898>
 8015f7e:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8015f82:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8015f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f8a:	f302 87af 	bgt.w	8018eec <iNemoEngine_API_Update+0x391c>
 8015f8e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8015f92:	ee17 0a90 	vmov	r0, s15
 8015f96:	f7ea faff 	bl	8000598 <__aeabi_f2d>
 8015f9a:	ec41 0b10 	vmov	d0, r0, r1
 8015f9e:	f007 f83f 	bl	801d020 <ceil>
 8015fa2:	ec51 0b10 	vmov	r0, r1, d0
 8015fa6:	f7ea fe27 	bl	8000bf8 <__aeabi_d2f>
 8015faa:	ee08 0a10 	vmov	s16, r0
 8015fae:	ed5f 7a69 	vldr	s15, [pc, #-420]	@ 8015e0c <iNemoEngine_API_Update+0x83c>
 8015fb2:	ed8d 8a4d 	vstr	s16, [sp, #308]	@ 0x134
 8015fb6:	eeb0 7aee 	vabs.f32	s14, s29
 8015fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fc2:	d51f      	bpl.n	8016004 <iNemoEngine_API_Update+0xa34>
 8015fc4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015fc8:	eef4 eae7 	vcmpe.f32	s29, s15
 8015fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fd0:	f282 80ae 	bge.w	8018130 <iNemoEngine_API_Update+0x2b60>
 8015fd4:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8015fd8:	eef4 eac7 	vcmpe.f32	s29, s14
 8015fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fe0:	f302 8780 	bgt.w	8018ee4 <iNemoEngine_API_Update+0x3914>
 8015fe4:	ee7e 7ae7 	vsub.f32	s15, s29, s15
 8015fe8:	ee17 0a90 	vmov	r0, s15
 8015fec:	f7ea fad4 	bl	8000598 <__aeabi_f2d>
 8015ff0:	ec41 0b10 	vmov	d0, r0, r1
 8015ff4:	f007 f814 	bl	801d020 <ceil>
 8015ff8:	ec51 0b10 	vmov	r0, r1, d0
 8015ffc:	f7ea fdfc 	bl	8000bf8 <__aeabi_d2f>
 8016000:	ee0e 0a90 	vmov	s29, r0
 8016004:	ed5f 7a7f 	vldr	s15, [pc, #-508]	@ 8015e0c <iNemoEngine_API_Update+0x83c>
 8016008:	edcd ea4e 	vstr	s29, [sp, #312]	@ 0x138
 801600c:	eeb0 7ac9 	vabs.f32	s14, s18
 8016010:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016018:	d51f      	bpl.n	801605a <iNemoEngine_API_Update+0xa8a>
 801601a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801601e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8016022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016026:	f282 8071 	bge.w	801810c <iNemoEngine_API_Update+0x2b3c>
 801602a:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801602e:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8016032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016036:	f302 8751 	bgt.w	8018edc <iNemoEngine_API_Update+0x390c>
 801603a:	ee79 7a67 	vsub.f32	s15, s18, s15
 801603e:	ee17 0a90 	vmov	r0, s15
 8016042:	f7ea faa9 	bl	8000598 <__aeabi_f2d>
 8016046:	ec41 0b10 	vmov	d0, r0, r1
 801604a:	f006 ffe9 	bl	801d020 <ceil>
 801604e:	ec51 0b10 	vmov	r0, r1, d0
 8016052:	f7ea fdd1 	bl	8000bf8 <__aeabi_d2f>
 8016056:	ee09 0a10 	vmov	s18, r0
 801605a:	f897 0621 	ldrb.w	r0, [r7, #1569]	@ 0x621
 801605e:	ed8d 9a4f 	vstr	s18, [sp, #316]	@ 0x13c
 8016062:	1e43      	subs	r3, r0, #1
 8016064:	b25a      	sxtb	r2, r3
 8016066:	2a00      	cmp	r2, #0
 8016068:	b2db      	uxtb	r3, r3
 801606a:	dd17      	ble.n	801609c <iNemoEngine_API_Update+0xacc>
 801606c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016070:	1e82      	subs	r2, r0, #2
 8016072:	009b      	lsls	r3, r3, #2
 8016074:	b2d2      	uxtb	r2, r2
 8016076:	f507 61c2 	add.w	r1, r7, #1552	@ 0x610
 801607a:	4419      	add	r1, r3
 801607c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016080:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 8016084:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 8016088:	443b      	add	r3, r7
 801608a:	681a      	ldr	r2, [r3, #0]
 801608c:	60da      	str	r2, [r3, #12]
 801608e:	685a      	ldr	r2, [r3, #4]
 8016090:	611a      	str	r2, [r3, #16]
 8016092:	689a      	ldr	r2, [r3, #8]
 8016094:	615a      	str	r2, [r3, #20]
 8016096:	3b0c      	subs	r3, #12
 8016098:	428b      	cmp	r3, r1
 801609a:	d1f6      	bne.n	801608a <iNemoEngine_API_Update+0xaba>
 801609c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80160a0:	ed86 8a00 	vstr	s16, [r6]
 80160a4:	ee87 8aad 	vdiv.f32	s16, s15, s27
 80160a8:	f207 632c 	addw	r3, r7, #1580	@ 0x62c
 80160ac:	edc3 ea00 	vstr	s29, [r3]
 80160b0:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 80160b4:	ed83 9a00 	vstr	s18, [r3]
 80160b8:	f897 3620 	ldrb.w	r3, [r7, #1568]	@ 0x620
 80160bc:	ed9d 7a10 	vldr	s14, [sp, #64]	@ 0x40
 80160c0:	ed5f 7aae 	vldr	s15, [pc, #-696]	@ 8015e0c <iNemoEngine_API_Update+0x83c>
 80160c4:	ee28 9a2f 	vmul.f32	s18, s16, s31
 80160c8:	3301      	adds	r3, #1
 80160ca:	b2db      	uxtb	r3, r3
 80160cc:	ee68 ea0f 	vmul.f32	s29, s16, s30
 80160d0:	ee27 8a08 	vmul.f32	s16, s14, s16
 80160d4:	eeb0 7ac9 	vabs.f32	s14, s18
 80160d8:	4283      	cmp	r3, r0
 80160da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80160de:	bf28      	it	cs
 80160e0:	4603      	movcs	r3, r0
 80160e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160e6:	f887 3620 	strb.w	r3, [r7, #1568]	@ 0x620
 80160ea:	d51f      	bpl.n	801612c <iNemoEngine_API_Update+0xb5c>
 80160ec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80160f0:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80160f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160f8:	f282 802c 	bge.w	8018154 <iNemoEngine_API_Update+0x2b84>
 80160fc:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8016100:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8016104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016108:	f302 86ca 	bgt.w	8018ea0 <iNemoEngine_API_Update+0x38d0>
 801610c:	ee79 7a67 	vsub.f32	s15, s18, s15
 8016110:	ee17 0a90 	vmov	r0, s15
 8016114:	f7ea fa40 	bl	8000598 <__aeabi_f2d>
 8016118:	ec41 0b10 	vmov	d0, r0, r1
 801611c:	f006 ff80 	bl	801d020 <ceil>
 8016120:	ec51 0b10 	vmov	r0, r1, d0
 8016124:	f7ea fd68 	bl	8000bf8 <__aeabi_d2f>
 8016128:	ee09 0a10 	vmov	s18, r0
 801612c:	ed5f 7ac9 	vldr	s15, [pc, #-804]	@ 8015e0c <iNemoEngine_API_Update+0x83c>
 8016130:	ed8d 9a4d 	vstr	s18, [sp, #308]	@ 0x134
 8016134:	eeb0 7aee 	vabs.f32	s14, s29
 8016138:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801613c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016140:	d51f      	bpl.n	8016182 <iNemoEngine_API_Update+0xbb2>
 8016142:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016146:	eef4 eae7 	vcmpe.f32	s29, s15
 801614a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801614e:	f281 87cb 	bge.w	80180e8 <iNemoEngine_API_Update+0x2b18>
 8016152:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8016156:	eef4 eac7 	vcmpe.f32	s29, s14
 801615a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801615e:	f302 86b9 	bgt.w	8018ed4 <iNemoEngine_API_Update+0x3904>
 8016162:	ee7e 7ae7 	vsub.f32	s15, s29, s15
 8016166:	ee17 0a90 	vmov	r0, s15
 801616a:	f7ea fa15 	bl	8000598 <__aeabi_f2d>
 801616e:	ec41 0b10 	vmov	d0, r0, r1
 8016172:	f006 ff55 	bl	801d020 <ceil>
 8016176:	ec51 0b10 	vmov	r0, r1, d0
 801617a:	f7ea fd3d 	bl	8000bf8 <__aeabi_d2f>
 801617e:	ee0e 0a90 	vmov	s29, r0
 8016182:	ed5f 7ade 	vldr	s15, [pc, #-888]	@ 8015e0c <iNemoEngine_API_Update+0x83c>
 8016186:	edcd ea4e 	vstr	s29, [sp, #312]	@ 0x138
 801618a:	eeb0 7ac8 	vabs.f32	s14, s16
 801618e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016196:	d51f      	bpl.n	80161d8 <iNemoEngine_API_Update+0xc08>
 8016198:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801619c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80161a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161a4:	f281 878e 	bge.w	80180c4 <iNemoEngine_API_Update+0x2af4>
 80161a8:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80161ac:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80161b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161b4:	f302 8678 	bgt.w	8018ea8 <iNemoEngine_API_Update+0x38d8>
 80161b8:	ee78 7a67 	vsub.f32	s15, s16, s15
 80161bc:	ee17 0a90 	vmov	r0, s15
 80161c0:	f7ea f9ea 	bl	8000598 <__aeabi_f2d>
 80161c4:	ec41 0b10 	vmov	d0, r0, r1
 80161c8:	f006 ff2a 	bl	801d020 <ceil>
 80161cc:	ec51 0b10 	vmov	r0, r1, d0
 80161d0:	f7ea fd12 	bl	8000bf8 <__aeabi_d2f>
 80161d4:	ee08 0a10 	vmov	s16, r0
 80161d8:	f897 0791 	ldrb.w	r0, [r7, #1937]	@ 0x791
 80161dc:	ed8d 8a4f 	vstr	s16, [sp, #316]	@ 0x13c
 80161e0:	1e43      	subs	r3, r0, #1
 80161e2:	b25a      	sxtb	r2, r3
 80161e4:	2a00      	cmp	r2, #0
 80161e6:	b2db      	uxtb	r3, r3
 80161e8:	dd17      	ble.n	801621a <iNemoEngine_API_Update+0xc4a>
 80161ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80161ee:	1e82      	subs	r2, r0, #2
 80161f0:	009b      	lsls	r3, r3, #2
 80161f2:	b2d2      	uxtb	r2, r2
 80161f4:	f507 61f0 	add.w	r1, r7, #1920	@ 0x780
 80161f8:	4419      	add	r1, r3
 80161fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80161fe:	f203 738c 	addw	r3, r3, #1932	@ 0x78c
 8016202:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 8016206:	443b      	add	r3, r7
 8016208:	681a      	ldr	r2, [r3, #0]
 801620a:	60da      	str	r2, [r3, #12]
 801620c:	685a      	ldr	r2, [r3, #4]
 801620e:	611a      	str	r2, [r3, #16]
 8016210:	689a      	ldr	r2, [r3, #8]
 8016212:	615a      	str	r2, [r3, #20]
 8016214:	3b0c      	subs	r3, #12
 8016216:	428b      	cmp	r3, r1
 8016218:	d1f6      	bne.n	8016208 <iNemoEngine_API_Update+0xc38>
 801621a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801621c:	ed83 9a00 	vstr	s18, [r3]
 8016220:	f207 739c 	addw	r3, r7, #1948	@ 0x79c
 8016224:	edc3 ea00 	vstr	s29, [r3]
 8016228:	9336      	str	r3, [sp, #216]	@ 0xd8
 801622a:	f507 63f4 	add.w	r3, r7, #1952	@ 0x7a0
 801622e:	ed83 8a00 	vstr	s16, [r3]
 8016232:	9337      	str	r3, [sp, #220]	@ 0xdc
 8016234:	f897 3790 	ldrb.w	r3, [r7, #1936]	@ 0x790
 8016238:	3301      	adds	r3, #1
 801623a:	b2db      	uxtb	r3, r3
 801623c:	4283      	cmp	r3, r0
 801623e:	bf28      	it	cs
 8016240:	4603      	movcs	r3, r0
 8016242:	f887 3790 	strb.w	r3, [r7, #1936]	@ 0x790
 8016246:	aa72      	add	r2, sp, #456	@ 0x1c8
 8016248:	a947      	add	r1, sp, #284	@ 0x11c
 801624a:	a84a      	add	r0, sp, #296	@ 0x128
 801624c:	f7fd fb94 	bl	8013978 <getRotationMatrix>
 8016250:	f50d 7a38 	add.w	sl, sp, #736	@ 0x2e0
 8016254:	f507 7347 	add.w	r3, r7, #796	@ 0x31c
 8016258:	9331      	str	r3, [sp, #196]	@ 0xc4
 801625a:	461e      	mov	r6, r3
 801625c:	46d4      	mov	ip, sl
 801625e:	f507 754f 	add.w	r5, r7, #828	@ 0x33c
 8016262:	6830      	ldr	r0, [r6, #0]
 8016264:	6871      	ldr	r1, [r6, #4]
 8016266:	68b2      	ldr	r2, [r6, #8]
 8016268:	68f3      	ldr	r3, [r6, #12]
 801626a:	4664      	mov	r4, ip
 801626c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801626e:	3610      	adds	r6, #16
 8016270:	42ae      	cmp	r6, r5
 8016272:	46a4      	mov	ip, r4
 8016274:	d1f5      	bne.n	8016262 <iNemoEngine_API_Update+0xc92>
 8016276:	6830      	ldr	r0, [r6, #0]
 8016278:	6020      	str	r0, [r4, #0]
 801627a:	ed97 7ac7 	vldr	s14, [r7, #796]	@ 0x31c
 801627e:	edd7 7ac8 	vldr	s15, [r7, #800]	@ 0x320
 8016282:	eeb0 7ac7 	vabs.f32	s14, s14
 8016286:	eef0 7ae7 	vabs.f32	s15, s15
 801628a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801628e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016292:	f140 850a 	bpl.w	8016caa <iNemoEngine_API_Update+0x16da>
 8016296:	2004      	movs	r0, #4
 8016298:	2400      	movs	r4, #0
 801629a:	2107      	movs	r1, #7
 801629c:	f04f 0c06 	mov.w	ip, #6
 80162a0:	2203      	movs	r2, #3
 80162a2:	4603      	mov	r3, r0
 80162a4:	9403      	str	r4, [sp, #12]
 80162a6:	f04f 0e01 	mov.w	lr, #1
 80162aa:	ed97 7ac9 	vldr	s14, [r7, #804]	@ 0x324
 80162ae:	eeb0 7ac7 	vabs.f32	s14, s14
 80162b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80162b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162ba:	f300 84e4 	bgt.w	8016c86 <iNemoEngine_API_Update+0x16b6>
 80162be:	2505      	movs	r5, #5
 80162c0:	9504      	str	r5, [sp, #16]
 80162c2:	f04f 0b08 	mov.w	fp, #8
 80162c6:	2502      	movs	r5, #2
 80162c8:	9e31      	ldr	r6, [sp, #196]	@ 0xc4
 80162ca:	4434      	add	r4, r6
 80162cc:	4433      	add	r3, r6
 80162ce:	edd4 6a00 	vldr	s13, [r4]
 80162d2:	ed93 7a00 	vldr	s14, [r3]
 80162d6:	9b03      	ldr	r3, [sp, #12]
 80162d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80162dc:	eb0a 0683 	add.w	r6, sl, r3, lsl #2
 80162e0:	eb0a 0485 	add.w	r4, sl, r5, lsl #2
 80162e4:	00ab      	lsls	r3, r5, #2
 80162e6:	eb0a 058e 	add.w	r5, sl, lr, lsl #2
 80162ea:	ea4f 0980 	mov.w	r9, r0, lsl #2
 80162ee:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80162f2:	edc6 7a00 	vstr	s15, [r6]
 80162f6:	ed95 7a00 	vldr	s14, [r5]
 80162fa:	edd4 6a00 	vldr	s13, [r4]
 80162fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016302:	eb0a 0582 	add.w	r5, sl, r2, lsl #2
 8016306:	edc4 7a00 	vstr	s15, [r4]
 801630a:	eb0a 0480 	add.w	r4, sl, r0, lsl #2
 801630e:	edd6 6a00 	vldr	s13, [r6]
 8016312:	ed94 6a00 	vldr	s12, [r4]
 8016316:	ed95 7a00 	vldr	s14, [r5]
 801631a:	eea6 7ac6 	vfms.f32	s14, s13, s12
 801631e:	ea4f 068c 	mov.w	r6, ip, lsl #2
 8016322:	ed85 7a00 	vstr	s14, [r5]
 8016326:	ed94 7a00 	vldr	s14, [r4]
 801632a:	9c04      	ldr	r4, [sp, #16]
 801632c:	eb0a 0084 	add.w	r0, sl, r4, lsl #2
 8016330:	ed90 6a00 	vldr	s12, [r0]
 8016334:	eea7 6ac7 	vfms.f32	s12, s15, s14
 8016338:	00a4      	lsls	r4, r4, #2
 801633a:	ed80 6a00 	vstr	s12, [r0]
 801633e:	eb0a 0081 	add.w	r0, sl, r1, lsl #2
 8016342:	0089      	lsls	r1, r1, #2
 8016344:	9104      	str	r1, [sp, #16]
 8016346:	eb0a 018c 	add.w	r1, sl, ip, lsl #2
 801634a:	edd0 5a00 	vldr	s11, [r0]
 801634e:	ed91 7a00 	vldr	s14, [r1]
 8016352:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8016356:	eef0 5ac6 	vabs.f32	s11, s12
 801635a:	ed81 7a00 	vstr	s14, [r1]
 801635e:	edd0 6a00 	vldr	s13, [r0]
 8016362:	eb0a 008b 	add.w	r0, sl, fp, lsl #2
 8016366:	ed90 7a00 	vldr	s14, [r0]
 801636a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801636e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8016372:	ed80 7a00 	vstr	s14, [r0]
 8016376:	edd5 6a00 	vldr	s13, [r5]
 801637a:	9803      	ldr	r0, [sp, #12]
 801637c:	eef0 7ae6 	vabs.f32	s15, s13
 8016380:	eef4 5ae7 	vcmpe.f32	s11, s15
 8016384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016388:	ea4f 0080 	mov.w	r0, r0, lsl #2
 801638c:	ea4f 0582 	mov.w	r5, r2, lsl #2
 8016390:	f300 8465 	bgt.w	8016c5e <iNemoEngine_API_Update+0x168e>
 8016394:	edd1 5a00 	vldr	s11, [r1]
 8016398:	eef0 7a47 	vmov.f32	s15, s14
 801639c:	ee86 4a26 	vdiv.f32	s8, s12, s13
 80163a0:	eb0a 020b 	add.w	r2, sl, fp
 80163a4:	4454      	add	r4, sl
 80163a6:	4455      	add	r5, sl
 80163a8:	a978      	add	r1, sp, #480	@ 0x1e0
 80163aa:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 80163ae:	eee4 7a65 	vfms.f32	s15, s8, s11
 80163b2:	ed84 4a00 	vstr	s8, [r4]
 80163b6:	edc2 7a00 	vstr	s15, [r2]
 80163ba:	4632      	mov	r2, r6
 80163bc:	4452      	add	r2, sl
 80163be:	edd2 1a00 	vldr	s3, [r2]
 80163c2:	9a04      	ldr	r2, [sp, #16]
 80163c4:	ed95 7a00 	vldr	s14, [r5]
 80163c8:	4452      	add	r2, sl
 80163ca:	ed92 2a00 	vldr	s4, [r2]
 80163ce:	eb0a 0209 	add.w	r2, sl, r9
 80163d2:	ed92 3a00 	vldr	s6, [r2]
 80163d6:	eb0a 0200 	add.w	r2, sl, r0
 80163da:	ed92 0a00 	vldr	s0, [r2]
 80163de:	eb0a 0203 	add.w	r2, sl, r3
 80163e2:	edd2 0a00 	vldr	s1, [r2]
 80163e6:	aa72      	add	r2, sp, #456	@ 0x1c8
 80163e8:	ee83 1aa7 	vdiv.f32	s2, s7, s15
 80163ec:	4472      	add	r2, lr
 80163ee:	eec3 2a87 	vdiv.f32	s5, s7, s14
 80163f2:	ed92 7a00 	vldr	s14, [r2]
 80163f6:	aa72      	add	r2, sp, #456	@ 0x1c8
 80163f8:	4402      	add	r2, r0
 80163fa:	edd2 7a00 	vldr	s15, [r2]
 80163fe:	aa72      	add	r2, sp, #456	@ 0x1c8
 8016400:	441a      	add	r2, r3
 8016402:	edd2 5a00 	vldr	s11, [r2]
 8016406:	eee0 7a47 	vfms.f32	s15, s0, s14
 801640a:	aa75      	add	r2, sp, #468	@ 0x1d4
 801640c:	4472      	add	r2, lr
 801640e:	eee0 5ac7 	vfms.f32	s11, s1, s14
 8016412:	edd2 4a00 	vldr	s9, [r2]
 8016416:	eee4 5a67 	vfms.f32	s11, s8, s15
 801641a:	aa75      	add	r2, sp, #468	@ 0x1d4
 801641c:	4402      	add	r2, r0
 801641e:	ed92 6a00 	vldr	s12, [r2]
 8016422:	ee61 5a25 	vmul.f32	s11, s2, s11
 8016426:	aa75      	add	r2, sp, #468	@ 0x1d4
 8016428:	eea2 7a65 	vfms.f32	s14, s4, s11
 801642c:	441a      	add	r2, r3
 801642e:	440b      	add	r3, r1
 8016430:	eee1 7ae5 	vfms.f32	s15, s3, s11
 8016434:	4408      	add	r0, r1
 8016436:	eef0 6a47 	vmov.f32	s13, s14
 801643a:	ee22 7aa7 	vmul.f32	s14, s5, s15
 801643e:	eea0 6a64 	vfms.f32	s12, s0, s9
 8016442:	eee3 6a47 	vfms.f32	s13, s6, s14
 8016446:	edd3 7a00 	vldr	s15, [r3]
 801644a:	ed90 5a00 	vldr	s10, [r0]
 801644e:	eeb0 8a66 	vmov.f32	s16, s13
 8016452:	edd2 6a00 	vldr	s13, [r2]
 8016456:	eee0 6ae4 	vfms.f32	s13, s1, s9
 801645a:	460b      	mov	r3, r1
 801645c:	4473      	add	r3, lr
 801645e:	44d6      	add	lr, sl
 8016460:	eee4 6a46 	vfms.f32	s13, s8, s12
 8016464:	ee61 6a26 	vmul.f32	s13, s2, s13
 8016468:	eea1 6ae6 	vfms.f32	s12, s3, s13
 801646c:	eee2 4a66 	vfms.f32	s9, s4, s13
 8016470:	ee22 6a86 	vmul.f32	s12, s5, s12
 8016474:	eee3 4a46 	vfms.f32	s9, s6, s12
 8016478:	eeb0 9a64 	vmov.f32	s18, s9
 801647c:	edd3 4a00 	vldr	s9, [r3]
 8016480:	eea4 5ac0 	vfms.f32	s10, s9, s0
 8016484:	eee4 7ae0 	vfms.f32	s15, s9, s1
 8016488:	eee4 7a45 	vfms.f32	s15, s8, s10
 801648c:	ee67 7a81 	vmul.f32	s15, s15, s2
 8016490:	eea7 5ae1 	vfms.f32	s10, s15, s3
 8016494:	eee7 4ac2 	vfms.f32	s9, s15, s4
 8016498:	ee22 4a85 	vmul.f32	s8, s5, s10
 801649c:	eeb0 5a64 	vmov.f32	s10, s9
 80164a0:	eea4 5a43 	vfms.f32	s10, s8, s6
 80164a4:	ed9e 3a00 	vldr	s6, [lr]
 80164a8:	eec3 4a83 	vdiv.f32	s9, s7, s6
 80164ac:	eebf 2a00 	vmov.f32	s4, #240	@ 0xbf800000 -1.0
 80164b0:	ee64 2a88 	vmul.f32	s5, s9, s16
 80164b4:	ee24 3a89 	vmul.f32	s6, s9, s18
 80164b8:	ee64 4a85 	vmul.f32	s9, s9, s10
 80164bc:	ee37 5a86 	vadd.f32	s10, s15, s12
 80164c0:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80164c4:	ee32 5ac5 	vsub.f32	s10, s5, s10
 80164c8:	eeb4 5ac2 	vcmpe.f32	s10, s4
 80164cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164d0:	bfc8      	it	gt
 80164d2:	ee75 3a23 	vaddgt.f32	s7, s10, s7
 80164d6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80164da:	bfcc      	ite	gt
 80164dc:	eeb1 5ae3 	vsqrtgt.f32	s10, s7
 80164e0:	ed9f 5ada 	vldrle	s10, [pc, #872]	@ 801684c <iNemoEngine_API_Update+0x127c>
 80164e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164e8:	f101 83df 	bmi.w	8017caa <iNemoEngine_API_Update+0x26da>
 80164ec:	bfd8      	it	le
 80164ee:	ee25 5a26 	vmulle.f32	s10, s10, s13
 80164f2:	ee76 6a67 	vsub.f32	s13, s12, s15
 80164f6:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 80164fa:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80164fe:	ee25 5a04 	vmul.f32	s10, s10, s8
 8016502:	eebf 4a00 	vmov.f32	s8, #240	@ 0xbf800000 -1.0
 8016506:	eef4 6ac4 	vcmpe.f32	s13, s8
 801650a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801650e:	bf88      	it	hi
 8016510:	eeb7 4a00 	vmovhi.f32	s8, #112	@ 0x3f800000  1.0
 8016514:	ee74 4ae5 	vsub.f32	s9, s9, s11
 8016518:	bf88      	it	hi
 801651a:	ee36 4a84 	vaddhi.f32	s8, s13, s8
 801651e:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8016522:	bf8c      	ite	hi
 8016524:	eef1 6ac4 	vsqrthi.f32	s13, s8
 8016528:	eddf 6ac8 	vldrls	s13, [pc, #800]	@ 801684c <iNemoEngine_API_Update+0x127c>
 801652c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016530:	f101 83b7 	bmi.w	8017ca2 <iNemoEngine_API_Update+0x26d2>
 8016534:	bfd8      	it	le
 8016536:	ee66 6aa4 	vmulle.f32	s13, s13, s9
 801653a:	ee72 2a86 	vadd.f32	s5, s5, s12
 801653e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8016542:	ee77 7ae2 	vsub.f32	s15, s15, s5
 8016546:	ee26 6a86 	vmul.f32	s12, s13, s12
 801654a:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 801654e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016556:	bf88      	it	hi
 8016558:	eef7 6a00 	vmovhi.f32	s13, #112	@ 0x3f800000  1.0
 801655c:	ee37 7a43 	vsub.f32	s14, s14, s6
 8016560:	bf88      	it	hi
 8016562:	ee77 6aa6 	vaddhi.f32	s13, s15, s13
 8016566:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801656a:	bf8c      	ite	hi
 801656c:	eef1 7ae6 	vsqrthi.f32	s15, s13
 8016570:	eddf 7ab6 	vldrls	s15, [pc, #728]	@ 801684c <iNemoEngine_API_Update+0x127c>
 8016574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016578:	f100 83d1 	bmi.w	8016d1e <iNemoEngine_API_Update+0x174e>
 801657c:	bfd8      	it	le
 801657e:	ee67 7a87 	vmulle.f32	s15, s15, s14
 8016582:	f897 2341 	ldrb.w	r2, [r7, #833]	@ 0x341
 8016586:	1e53      	subs	r3, r2, #1
 8016588:	b259      	sxtb	r1, r3
 801658a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801658e:	2900      	cmp	r1, #0
 8016590:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016594:	b2db      	uxtb	r3, r3
 8016596:	dd1c      	ble.n	80165d2 <iNemoEngine_API_Update+0x1002>
 8016598:	3a02      	subs	r2, #2
 801659a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801659e:	b2d2      	uxtb	r2, r2
 80165a0:	f1a7 010c 	sub.w	r1, r7, #12
 80165a4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80165a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80165ac:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 80165b0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80165b4:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 80165b8:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
 80165bc:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 80165c0:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
 80165c4:	f8d3 2344 	ldr.w	r2, [r3, #836]	@ 0x344
 80165c8:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
 80165cc:	3b0c      	subs	r3, #12
 80165ce:	428b      	cmp	r3, r1
 80165d0:	d1f0      	bne.n	80165b4 <iNemoEngine_API_Update+0xfe4>
 80165d2:	ed9d 7a07 	vldr	s14, [sp, #28]
 80165d6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80165da:	ee86 7a87 	vdiv.f32	s14, s13, s14
 80165de:	ab47      	add	r3, sp, #284	@ 0x11c
 80165e0:	f20d 12eb 	addw	r2, sp, #491	@ 0x1eb
 80165e4:	4699      	mov	r9, r3
 80165e6:	f1c2 0601 	rsb	r6, r2, #1
 80165ea:	9333      	str	r3, [sp, #204]	@ 0xcc
 80165ec:	2300      	movs	r3, #0
 80165ee:	e9cd 7838 	strd	r7, r8, [sp, #224]	@ 0xe0
 80165f2:	ad7b      	add	r5, sp, #492	@ 0x1ec
 80165f4:	46c8      	mov	r8, r9
 80165f6:	f50d 7b04 	add.w	fp, sp, #528	@ 0x210
 80165fa:	46b9      	mov	r9, r7
 80165fc:	ee25 5a07 	vmul.f32	s10, s10, s14
 8016600:	ee66 6a07 	vmul.f32	s13, s12, s14
 8016604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016608:	ed87 5ad2 	vstr	s10, [r7, #840]	@ 0x348
 801660c:	edc7 6ad3 	vstr	s13, [r7, #844]	@ 0x34c
 8016610:	edc7 7ad4 	vstr	s15, [r7, #848]	@ 0x350
 8016614:	4637      	mov	r7, r6
 8016616:	461e      	mov	r6, r3
 8016618:	3601      	adds	r6, #1
 801661a:	4651      	mov	r1, sl
 801661c:	f20d 13eb 	addw	r3, sp, #491	@ 0x1eb
 8016620:	464a      	mov	r2, r9
 8016622:	18f8      	adds	r0, r7, r3
 8016624:	f803 0f01 	strb.w	r0, [r3, #1]!
 8016628:	f8d2 0348 	ldr.w	r0, [r2, #840]	@ 0x348
 801662c:	f841 0b04 	str.w	r0, [r1], #4
 8016630:	f20d 2009 	addw	r0, sp, #521	@ 0x209
 8016634:	4298      	cmp	r0, r3
 8016636:	f102 020c 	add.w	r2, r2, #12
 801663a:	d1f2      	bne.n	8016622 <iNemoEngine_API_Update+0x1052>
 801663c:	ed9a 7a00 	vldr	s14, [sl]
 8016640:	edda 7a01 	vldr	s15, [sl, #4]
 8016644:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016648:	ed9a 7a02 	vldr	s14, [sl, #8]
 801664c:	edda 7a03 	vldr	s15, [sl, #12]
 8016650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016654:	bf88      	it	hi
 8016656:	f44f 7381 	movhi.w	r3, #258	@ 0x102
 801665a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801665e:	ed9a 7a04 	vldr	s14, [sl, #16]
 8016662:	edda 7a05 	vldr	s15, [sl, #20]
 8016666:	bf88      	it	hi
 8016668:	802b      	strhhi	r3, [r5, #0]
 801666a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801666e:	bf88      	it	hi
 8016670:	f44f 7341 	movhi.w	r3, #772	@ 0x304
 8016674:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016678:	ed9a 7a06 	vldr	s14, [sl, #24]
 801667c:	edda 7a07 	vldr	s15, [sl, #28]
 8016680:	bf88      	it	hi
 8016682:	806b      	strhhi	r3, [r5, #2]
 8016684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016688:	bf88      	it	hi
 801668a:	f240 5306 	movwhi	r3, #1286	@ 0x506
 801668e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016692:	ed9a 7a08 	vldr	s14, [sl, #32]
 8016696:	edda 7a09 	vldr	s15, [sl, #36]	@ 0x24
 801669a:	bf88      	it	hi
 801669c:	80ab      	strhhi	r3, [r5, #4]
 801669e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166a2:	bf88      	it	hi
 80166a4:	f44f 63e1 	movhi.w	r3, #1800	@ 0x708
 80166a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80166ac:	ed9a 7a0a 	vldr	s14, [sl, #40]	@ 0x28
 80166b0:	edda 7a0b 	vldr	s15, [sl, #44]	@ 0x2c
 80166b4:	bf88      	it	hi
 80166b6:	80eb      	strhhi	r3, [r5, #6]
 80166b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166bc:	bf88      	it	hi
 80166be:	f640 130a 	movwhi	r3, #2314	@ 0x90a
 80166c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80166c6:	ed9a 7a0c 	vldr	s14, [sl, #48]	@ 0x30
 80166ca:	edda 7a0d 	vldr	s15, [sl, #52]	@ 0x34
 80166ce:	bf88      	it	hi
 80166d0:	812b      	strhhi	r3, [r5, #8]
 80166d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166d6:	bf88      	it	hi
 80166d8:	f640 330c 	movwhi	r3, #2828	@ 0xb0c
 80166dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80166e0:	ed9a 7a0e 	vldr	s14, [sl, #56]	@ 0x38
 80166e4:	edda 7a0f 	vldr	s15, [sl, #60]	@ 0x3c
 80166e8:	bf88      	it	hi
 80166ea:	816b      	strhhi	r3, [r5, #10]
 80166ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166f0:	bf88      	it	hi
 80166f2:	f640 530e 	movwhi	r3, #3342	@ 0xd0e
 80166f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80166fa:	ed9a 7a10 	vldr	s14, [sl, #64]	@ 0x40
 80166fe:	edda 7a11 	vldr	s15, [sl, #68]	@ 0x44
 8016702:	bf88      	it	hi
 8016704:	81ab      	strhhi	r3, [r5, #12]
 8016706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801670a:	bf88      	it	hi
 801670c:	f44f 6371 	movhi.w	r3, #3856	@ 0xf10
 8016710:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016714:	ed9a 7a12 	vldr	s14, [sl, #72]	@ 0x48
 8016718:	edda 7a13 	vldr	s15, [sl, #76]	@ 0x4c
 801671c:	bf88      	it	hi
 801671e:	81eb      	strhhi	r3, [r5, #14]
 8016720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016724:	bf88      	it	hi
 8016726:	f241 1312 	movwhi	r3, #4370	@ 0x1112
 801672a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801672e:	ed9a 7a14 	vldr	s14, [sl, #80]	@ 0x50
 8016732:	edda 7a15 	vldr	s15, [sl, #84]	@ 0x54
 8016736:	bf88      	it	hi
 8016738:	822b      	strhhi	r3, [r5, #16]
 801673a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801673e:	bf88      	it	hi
 8016740:	f241 3314 	movwhi	r3, #4884	@ 0x1314
 8016744:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016748:	bf88      	it	hi
 801674a:	826b      	strhhi	r3, [r5, #18]
 801674c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016750:	bf84      	itt	hi
 8016752:	f241 5316 	movwhi	r3, #5398	@ 0x1516
 8016756:	82ab      	strhhi	r3, [r5, #20]
 8016758:	ed9a 7a16 	vldr	s14, [sl, #88]	@ 0x58
 801675c:	edda 7a17 	vldr	s15, [sl, #92]	@ 0x5c
 8016760:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016764:	ed9a 7a18 	vldr	s14, [sl, #96]	@ 0x60
 8016768:	edda 7a19 	vldr	s15, [sl, #100]	@ 0x64
 801676c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016770:	bf88      	it	hi
 8016772:	f241 7318 	movwhi	r3, #5912	@ 0x1718
 8016776:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801677a:	ed9a 7a1a 	vldr	s14, [sl, #104]	@ 0x68
 801677e:	edda 7a1b 	vldr	s15, [sl, #108]	@ 0x6c
 8016782:	bf88      	it	hi
 8016784:	82eb      	strhhi	r3, [r5, #22]
 8016786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801678a:	bf88      	it	hi
 801678c:	f641 131a 	movwhi	r3, #6426	@ 0x191a
 8016790:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016794:	ed9a 7a1c 	vldr	s14, [sl, #112]	@ 0x70
 8016798:	edda 7a1d 	vldr	s15, [sl, #116]	@ 0x74
 801679c:	bf88      	it	hi
 801679e:	832b      	strhhi	r3, [r5, #24]
 80167a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167a4:	bf88      	it	hi
 80167a6:	f641 331c 	movwhi	r3, #6940	@ 0x1b1c
 80167aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80167ae:	bf88      	it	hi
 80167b0:	836b      	strhhi	r3, [r5, #26]
 80167b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167b6:	bf88      	it	hi
 80167b8:	f641 531e 	movwhi	r3, #7454	@ 0x1d1e
 80167bc:	f04f 0101 	mov.w	r1, #1
 80167c0:	bf88      	it	hi
 80167c2:	83ab      	strhhi	r3, [r5, #28]
 80167c4:	221e      	movs	r2, #30
 80167c6:	4658      	mov	r0, fp
 80167c8:	f009 fa1d 	bl	801fc06 <memset>
 80167cc:	e9cd 971d 	strd	r9, r7, [sp, #116]	@ 0x74
 80167d0:	2404      	movs	r4, #4
 80167d2:	2102      	movs	r1, #2
 80167d4:	9618      	str	r6, [sp, #96]	@ 0x60
 80167d6:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
 80167da:	460a      	mov	r2, r1
 80167dc:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80167e0:	0049      	lsls	r1, r1, #1
 80167e2:	1c53      	adds	r3, r2, #1
 80167e4:	9303      	str	r3, [sp, #12]
 80167e6:	f04f 0801 	mov.w	r8, #1
 80167ea:	9105      	str	r1, [sp, #20]
 80167ec:	9b05      	ldr	r3, [sp, #20]
 80167ee:	9a03      	ldr	r2, [sp, #12]
 80167f0:	46c1      	mov	r9, r8
 80167f2:	4498      	add	r8, r3
 80167f4:	f1b8 0f1f 	cmp.w	r8, #31
 80167f8:	bfa8      	it	ge
 80167fa:	f04f 081f 	movge.w	r8, #31
 80167fe:	eba8 0309 	sub.w	r3, r8, r9
 8016802:	2b00      	cmp	r3, #0
 8016804:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 8016808:	dd34      	ble.n	8016874 <iNemoEngine_API_Update+0x12a4>
 801680a:	464f      	mov	r7, r9
 801680c:	f8cd 9010 	str.w	r9, [sp, #16]
 8016810:	2400      	movs	r4, #0
 8016812:	4699      	mov	r9, r3
 8016814:	1e79      	subs	r1, r7, #1
 8016816:	f915 200c 	ldrsb.w	r2, [r5, ip]
 801681a:	566b      	ldrsb	r3, [r5, r1]
 801681c:	eb0a 0082 	add.w	r0, sl, r2, lsl #2
 8016820:	eb0a 0683 	add.w	r6, sl, r3, lsl #2
 8016824:	ed16 7a01 	vldr	s14, [r6, #-4]
 8016828:	ed50 7a01 	vldr	s15, [r0, #-4]
 801682c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016834:	f10c 0002 	add.w	r0, ip, #2
 8016838:	f10c 0601 	add.w	r6, ip, #1
 801683c:	f240 81d0 	bls.w	8016be0 <iNemoEngine_API_Update+0x1610>
 8016840:	4580      	cmp	r8, r0
 8016842:	f80b 2004 	strb.w	r2, [fp, r4]
 8016846:	f000 81ba 	beq.w	8016bbe <iNemoEngine_API_Update+0x15ee>
 801684a:	e005      	b.n	8016858 <iNemoEngine_API_Update+0x1288>
 801684c:	00000000 	.word	0x00000000
 8016850:	3f333333 	.word	0x3f333333
 8016854:	3f4ccccd 	.word	0x3f4ccccd
 8016858:	46b4      	mov	ip, r6
 801685a:	3401      	adds	r4, #1
 801685c:	45a1      	cmp	r9, r4
 801685e:	dcd9      	bgt.n	8016814 <iNemoEngine_API_Update+0x1244>
 8016860:	464b      	mov	r3, r9
 8016862:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8016866:	f109 30ff 	add.w	r0, r9, #4294967295	@ 0xffffffff
 801686a:	461a      	mov	r2, r3
 801686c:	4428      	add	r0, r5
 801686e:	4659      	mov	r1, fp
 8016870:	f009 faf3 	bl	801fe5a <memcpy>
 8016874:	9b07      	ldr	r3, [sp, #28]
 8016876:	4443      	add	r3, r8
 8016878:	2b1e      	cmp	r3, #30
 801687a:	9303      	str	r3, [sp, #12]
 801687c:	ddb6      	ble.n	80167ec <iNemoEngine_API_Update+0x121c>
 801687e:	9c08      	ldr	r4, [sp, #32]
 8016880:	9905      	ldr	r1, [sp, #20]
 8016882:	3c01      	subs	r4, #1
 8016884:	d1a9      	bne.n	80167da <iNemoEngine_API_Update+0x120a>
 8016886:	f995 300e 	ldrsb.w	r3, [r5, #14]
 801688a:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 801688c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8016890:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8016894:	ed53 7a01 	vldr	s15, [r3, #-4]
 8016898:	f995 300f 	ldrsb.w	r3, [r5, #15]
 801689c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 80168a0:	ed13 7a01 	vldr	s14, [r3, #-4]
 80168a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80168a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ac:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80168b0:	bf4c      	ite	mi
 80168b2:	2201      	movmi	r2, #1
 80168b4:	2200      	movpl	r2, #0
 80168b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ba:	bf4c      	ite	mi
 80168bc:	2301      	movmi	r3, #1
 80168be:	2300      	movpl	r3, #0
 80168c0:	429a      	cmp	r2, r3
 80168c2:	e9dd 971d 	ldrd	r9, r7, [sp, #116]	@ 0x74
 80168c6:	f000 81a9 	beq.w	8016c1c <iNemoEngine_API_Update+0x164c>
 80168ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80168ce:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80168d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80168d6:	2e03      	cmp	r6, #3
 80168d8:	ece8 7a01 	vstmia	r8!, {s15}
 80168dc:	f109 0904 	add.w	r9, r9, #4
 80168e0:	f47f ae9a 	bne.w	8016618 <iNemoEngine_API_Update+0x1048>
 80168e4:	eddd 7a48 	vldr	s15, [sp, #288]	@ 0x120
 80168e8:	eddd 6a47 	vldr	s13, [sp, #284]	@ 0x11c
 80168ec:	ed9d 5a0c 	vldr	s10, [sp, #48]	@ 0x30
 80168f0:	ed9d 6a11 	vldr	s12, [sp, #68]	@ 0x44
 80168f4:	eddd 3a16 	vldr	s7, [sp, #88]	@ 0x58
 80168f8:	9605      	str	r6, [sp, #20]
 80168fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80168fe:	e9dd 7838 	ldrd	r7, r8, [sp, #224]	@ 0xe0
 8016902:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8016906:	f897 3900 	ldrb.w	r3, [r7, #2304]	@ 0x900
 801690a:	eddd 6a14 	vldr	s13, [sp, #80]	@ 0x50
 801690e:	eeb0 7a67 	vmov.f32	s14, s15
 8016912:	eddd 7a49 	vldr	s15, [sp, #292]	@ 0x124
 8016916:	eea7 7aa7 	vfma.f32	s14, s15, s15
 801691a:	46a1      	mov	r9, r4
 801691c:	f507 6410 	add.w	r4, r7, #2304	@ 0x900
 8016920:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8016924:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8016928:	ee65 5a27 	vmul.f32	s11, s10, s15
 801692c:	eec6 4a86 	vdiv.f32	s9, s13, s12
 8016930:	ed9d 6a12 	vldr	s12, [sp, #72]	@ 0x48
 8016934:	edcd 4a5c 	vstr	s9, [sp, #368]	@ 0x170
 8016938:	ee85 6a86 	vdiv.f32	s12, s11, s12
 801693c:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8016940:	eddd 5a13 	vldr	s11, [sp, #76]	@ 0x4c
 8016944:	ed8d 6a5d 	vstr	s12, [sp, #372]	@ 0x174
 8016948:	eef1 6ac7 	vsqrt.f32	s13, s14
 801694c:	ee87 4aa5 	vdiv.f32	s8, s15, s11
 8016950:	ed5f 7a41 	vldr	s15, [pc, #-260]	@ 8016850 <iNemoEngine_API_Update+0x1280>
 8016954:	ed8d 4a5e 	vstr	s8, [sp, #376]	@ 0x178
 8016958:	ee63 7aa7 	vmul.f32	s15, s7, s15
 801695c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8016960:	eee5 7a25 	vfma.f32	s15, s10, s11
 8016964:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8016968:	eeb0 5a67 	vmov.f32	s10, s15
 801696c:	edcd 7a03 	vstr	s15, [sp, #12]
 8016970:	ed5f 7a48 	vldr	s15, [pc, #-288]	@ 8016854 <iNemoEngine_API_Update+0x1284>
 8016974:	edcd 6a5f 	vstr	s13, [sp, #380]	@ 0x17c
 8016978:	ee65 7a27 	vmul.f32	s15, s10, s15
 801697c:	2b00      	cmp	r3, #0
 801697e:	f040 8160 	bne.w	8016c42 <iNemoEngine_API_Update+0x1672>
 8016982:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8016984:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016986:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8016988:	62a3      	str	r3, [r4, #40]	@ 0x28
 801698a:	6a23      	ldr	r3, [r4, #32]
 801698c:	6263      	str	r3, [r4, #36]	@ 0x24
 801698e:	69e3      	ldr	r3, [r4, #28]
 8016990:	6223      	str	r3, [r4, #32]
 8016992:	edc4 7a07 	vstr	s15, [r4, #28]
 8016996:	f607 130c 	addw	r3, r7, #2316	@ 0x90c
 801699a:	ed93 8a00 	vldr	s16, [r3]
 801699e:	ed97 0a02 	vldr	s0, [r7, #8]
 80169a2:	f607 1324 	addw	r3, r7, #2340	@ 0x924
 80169a6:	edd3 7a00 	vldr	s15, [r3]
 80169aa:	f607 1308 	addw	r3, r7, #2312	@ 0x908
 80169ae:	edd3 5a00 	vldr	s11, [r3]
 80169b2:	f507 6312 	add.w	r3, r7, #2336	@ 0x920
 80169b6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80169ba:	edd3 7a00 	vldr	s15, [r3]
 80169be:	f607 1304 	addw	r3, r7, #2308	@ 0x904
 80169c2:	eea5 8aa7 	vfma.f32	s16, s11, s15
 80169c6:	edd3 5a00 	vldr	s11, [r3]
 80169ca:	f607 131c 	addw	r3, r7, #2332	@ 0x91c
 80169ce:	edd3 7a00 	vldr	s15, [r3]
 80169d2:	f507 6311 	add.w	r3, r7, #2320	@ 0x910
 80169d6:	eea5 8aa7 	vfma.f32	s16, s11, s15
 80169da:	edd3 5a00 	vldr	s11, [r3]
 80169de:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80169e2:	edd3 7a00 	vldr	s15, [r3]
 80169e6:	f607 1314 	addw	r3, r7, #2324	@ 0x914
 80169ea:	eea5 8aa7 	vfma.f32	s16, s11, s15
 80169ee:	edd3 5a00 	vldr	s11, [r3]
 80169f2:	f607 132c 	addw	r3, r7, #2348	@ 0x92c
 80169f6:	edd3 7a00 	vldr	s15, [r3]
 80169fa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80169fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a02:	eea5 8aa7 	vfma.f32	s16, s11, s15
 8016a06:	f340 818d 	ble.w	8016d24 <iNemoEngine_API_Update+0x1754>
 8016a0a:	edd7 3a30 	vldr	s7, [r7, #192]	@ 0xc0
 8016a0e:	eef4 3ac8 	vcmpe.f32	s7, s16
 8016a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a16:	f101 8293 	bmi.w	8017f40 <iNemoEngine_API_Update+0x2970>
 8016a1a:	ed97 9a31 	vldr	s18, [r7, #196]	@ 0xc4
 8016a1e:	eddd 7a1f 	vldr	s15, [sp, #124]	@ 0x7c
 8016a22:	edd7 3a4a 	vldr	s7, [r7, #296]	@ 0x128
 8016a26:	ee67 7a89 	vmul.f32	s15, s15, s18
 8016a2a:	eef4 3ac8 	vcmpe.f32	s7, s16
 8016a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a32:	edcd 7a1f 	vstr	s15, [sp, #124]	@ 0x7c
 8016a36:	f142 81a1 	bpl.w	8018d7c <iNemoEngine_API_Update+0x37ac>
 8016a3a:	ed97 5a62 	vldr	s10, [r7, #392]	@ 0x188
 8016a3e:	eeb4 5ac8 	vcmpe.f32	s10, s16
 8016a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a46:	f342 819f 	ble.w	8018d88 <iNemoEngine_API_Update+0x37b8>
 8016a4a:	edd7 5a4c 	vldr	s11, [r7, #304]	@ 0x130
 8016a4e:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 8016a52:	eef4 5ac8 	vcmpe.f32	s11, s16
 8016a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a5a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016a5e:	f342 8497 	ble.w	8019390 <iNemoEngine_API_Update+0x3dc0>
 8016a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a66:	f282 84a8 	bge.w	80193ba <iNemoEngine_API_Update+0x3dea>
 8016a6a:	ed97 3a4b 	vldr	s6, [r7, #300]	@ 0x12c
 8016a6e:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 8016a72:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8016a76:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8016a7a:	ee78 3a63 	vsub.f32	s7, s16, s7
 8016a7e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8016a82:	eec7 eaa5 	vdiv.f32	s29, s15, s11
 8016a86:	ee7e ea83 	vadd.f32	s29, s29, s6
 8016a8a:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8016a8e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8016a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a96:	f202 84a8 	bhi.w	80193ea <iNemoEngine_API_Update+0x3e1a>
 8016a9a:	edd7 5a52 	vldr	s11, [r7, #328]	@ 0x148
 8016a9e:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8016aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aa6:	f142 87d7 	bpl.w	8019a58 <iNemoEngine_API_Update+0x4488>
 8016aaa:	ed97 3a51 	vldr	s6, [r7, #324]	@ 0x144
 8016aae:	edd7 3a53 	vldr	s7, [r7, #332]	@ 0x14c
 8016ab2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8016ab6:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8016aba:	ee78 7a67 	vsub.f32	s15, s16, s15
 8016abe:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8016ac2:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 8016ac6:	ee7e ea83 	vadd.f32	s29, s29, s6
 8016aca:	edd7 7a54 	vldr	s15, [r7, #336]	@ 0x150
 8016ace:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ad6:	f2c2 84a8 	blt.w	801942a <iNemoEngine_API_Update+0x3e5a>
 8016ada:	edd7 5a56 	vldr	s11, [r7, #344]	@ 0x158
 8016ade:	eef4 5ac8 	vcmpe.f32	s11, s16
 8016ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ae6:	f342 87be 	ble.w	8019a66 <iNemoEngine_API_Update+0x4496>
 8016aea:	ed97 3a55 	vldr	s6, [r7, #340]	@ 0x154
 8016aee:	edd7 3a57 	vldr	s7, [r7, #348]	@ 0x15c
 8016af2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8016af6:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8016afa:	ee78 7a67 	vsub.f32	s15, s16, s15
 8016afe:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8016b02:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 8016b06:	ee7e ea83 	vadd.f32	s29, s29, s6
 8016b0a:	edd7 7a58 	vldr	s15, [r7, #352]	@ 0x160
 8016b0e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b16:	f2c2 84a8 	blt.w	801946a <iNemoEngine_API_Update+0x3e9a>
 8016b1a:	edd7 5a5a 	vldr	s11, [r7, #360]	@ 0x168
 8016b1e:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8016b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b26:	f142 8709 	bpl.w	801993c <iNemoEngine_API_Update+0x436c>
 8016b2a:	ed97 3a59 	vldr	s6, [r7, #356]	@ 0x164
 8016b2e:	edd7 3a5b 	vldr	s7, [r7, #364]	@ 0x16c
 8016b32:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8016b36:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8016b3a:	ee78 7a67 	vsub.f32	s15, s16, s15
 8016b3e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8016b42:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 8016b46:	ee7e ea83 	vadd.f32	s29, s29, s6
 8016b4a:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8016b4e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b56:	f2c2 84a8 	blt.w	80194aa <iNemoEngine_API_Update+0x3eda>
 8016b5a:	edd7 5a5e 	vldr	s11, [r7, #376]	@ 0x178
 8016b5e:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8016b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b66:	f142 86ec 	bpl.w	8019942 <iNemoEngine_API_Update+0x4372>
 8016b6a:	ed97 3a5d 	vldr	s6, [r7, #372]	@ 0x174
 8016b6e:	edd7 3a5f 	vldr	s7, [r7, #380]	@ 0x17c
 8016b72:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8016b76:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8016b7a:	ee78 7a67 	vsub.f32	s15, s16, s15
 8016b7e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8016b82:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 8016b86:	ee7e ea83 	vadd.f32	s29, s29, s6
 8016b8a:	edd7 7a60 	vldr	s15, [r7, #384]	@ 0x180
 8016b8e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b96:	db0f      	blt.n	8016bb8 <iNemoEngine_API_Update+0x15e8>
 8016b98:	edd7 3a61 	vldr	s7, [r7, #388]	@ 0x184
 8016b9c:	edd7 5a63 	vldr	s11, [r7, #396]	@ 0x18c
 8016ba0:	ee35 5a67 	vsub.f32	s10, s10, s15
 8016ba4:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8016ba8:	ee78 7a67 	vsub.f32	s15, s16, s15
 8016bac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016bb0:	eec7 ea85 	vdiv.f32	s29, s15, s10
 8016bb4:	ee7e eaa3 	vadd.f32	s29, s29, s7
 8016bb8:	ee2a aa2e 	vmul.f32	s20, s20, s29
 8016bbc:	e0b6      	b.n	8016d2c <iNemoEngine_API_Update+0x175c>
 8016bbe:	9a03      	ldr	r2, [sp, #12]
 8016bc0:	1c60      	adds	r0, r4, #1
 8016bc2:	1bd3      	subs	r3, r2, r7
 8016bc4:	4297      	cmp	r7, r2
 8016bc6:	4429      	add	r1, r5
 8016bc8:	461a      	mov	r2, r3
 8016bca:	4458      	add	r0, fp
 8016bcc:	f6bf ae44 	bge.w	8016858 <iNemoEngine_API_Update+0x1288>
 8016bd0:	9306      	str	r3, [sp, #24]
 8016bd2:	f009 f942 	bl	801fe5a <memcpy>
 8016bd6:	9b06      	ldr	r3, [sp, #24]
 8016bd8:	9f03      	ldr	r7, [sp, #12]
 8016bda:	441c      	add	r4, r3
 8016bdc:	46b4      	mov	ip, r6
 8016bde:	e63c      	b.n	801685a <iNemoEngine_API_Update+0x128a>
 8016be0:	f80b 3004 	strb.w	r3, [fp, r4]
 8016be4:	9b03      	ldr	r3, [sp, #12]
 8016be6:	3701      	adds	r7, #1
 8016be8:	429f      	cmp	r7, r3
 8016bea:	f47f ae36 	bne.w	801685a <iNemoEngine_API_Update+0x128a>
 8016bee:	f10c 0601 	add.w	r6, ip, #1
 8016bf2:	eba8 030c 	sub.w	r3, r8, ip
 8016bf6:	1c60      	adds	r0, r4, #1
 8016bf8:	4546      	cmp	r6, r8
 8016bfa:	eb05 010c 	add.w	r1, r5, ip
 8016bfe:	f103 32ff 	add.w	r2, r3, #4294967295	@ 0xffffffff
 8016c02:	9306      	str	r3, [sp, #24]
 8016c04:	4458      	add	r0, fp
 8016c06:	f6bf ae28 	bge.w	801685a <iNemoEngine_API_Update+0x128a>
 8016c0a:	f009 f926 	bl	801fe5a <memcpy>
 8016c0e:	9b06      	ldr	r3, [sp, #24]
 8016c10:	3c01      	subs	r4, #1
 8016c12:	441e      	add	r6, r3
 8016c14:	441c      	add	r4, r3
 8016c16:	f1a6 0c02 	sub.w	ip, r6, #2
 8016c1a:	e61e      	b.n	801685a <iNemoEngine_API_Update+0x128a>
 8016c1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c24:	f43f ae51 	beq.w	80168ca <iNemoEngine_API_Update+0x12fa>
 8016c28:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c30:	f43f ae4b 	beq.w	80168ca <iNemoEngine_API_Update+0x12fa>
 8016c34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016c38:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8016c3c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8016c40:	e649      	b.n	80168d6 <iNemoEngine_API_Update+0x1306>
 8016c42:	2300      	movs	r3, #0
 8016c44:	f887 3900 	strb.w	r3, [r7, #2304]	@ 0x900
 8016c48:	edc4 7a07 	vstr	s15, [r4, #28]
 8016c4c:	edc4 7a08 	vstr	s15, [r4, #32]
 8016c50:	edc4 7a09 	vstr	s15, [r4, #36]	@ 0x24
 8016c54:	edc4 7a0a 	vstr	s15, [r4, #40]	@ 0x28
 8016c58:	edc4 7a0b 	vstr	s15, [r4, #44]	@ 0x2c
 8016c5c:	e69b      	b.n	8016996 <iNemoEngine_API_Update+0x13c6>
 8016c5e:	4618      	mov	r0, r3
 8016c60:	9b03      	ldr	r3, [sp, #12]
 8016c62:	edd1 7a00 	vldr	s15, [r1]
 8016c66:	eeb0 5a46 	vmov.f32	s10, s12
 8016c6a:	4625      	mov	r5, r4
 8016c6c:	eeb0 6a66 	vmov.f32	s12, s13
 8016c70:	465e      	mov	r6, fp
 8016c72:	eef0 5a47 	vmov.f32	s11, s14
 8016c76:	eef0 6a45 	vmov.f32	s13, s10
 8016c7a:	009b      	lsls	r3, r3, #2
 8016c7c:	0094      	lsls	r4, r2, #2
 8016c7e:	ea4f 0b8c 	mov.w	fp, ip, lsl #2
 8016c82:	f7ff bb8b 	b.w	801639c <iNemoEngine_API_Update+0xdcc>
 8016c86:	2303      	movs	r3, #3
 8016c88:	2108      	movs	r1, #8
 8016c8a:	2204      	movs	r2, #4
 8016c8c:	2601      	movs	r6, #1
 8016c8e:	9304      	str	r3, [sp, #16]
 8016c90:	f04f 0b06 	mov.w	fp, #6
 8016c94:	f04f 0c07 	mov.w	ip, #7
 8016c98:	2005      	movs	r0, #5
 8016c9a:	460b      	mov	r3, r1
 8016c9c:	4614      	mov	r4, r2
 8016c9e:	2500      	movs	r5, #0
 8016ca0:	9603      	str	r6, [sp, #12]
 8016ca2:	f04f 0e02 	mov.w	lr, #2
 8016ca6:	f7ff bb0f 	b.w	80162c8 <iNemoEngine_API_Update+0xcf8>
 8016caa:	2204      	movs	r2, #4
 8016cac:	2300      	movs	r3, #0
 8016cae:	2501      	movs	r5, #1
 8016cb0:	eef0 7a47 	vmov.f32	s15, s14
 8016cb4:	2106      	movs	r1, #6
 8016cb6:	f04f 0c07 	mov.w	ip, #7
 8016cba:	2003      	movs	r0, #3
 8016cbc:	4614      	mov	r4, r2
 8016cbe:	9503      	str	r5, [sp, #12]
 8016cc0:	469e      	mov	lr, r3
 8016cc2:	f7ff baf2 	b.w	80162aa <iNemoEngine_API_Update+0xcda>
 8016cc6:	eddf 7aa7 	vldr	s15, [pc, #668]	@ 8016f64 <iNemoEngine_API_Update+0x1994>
 8016cca:	ed9f eaa7 	vldr	s28, [pc, #668]	@ 8016f68 <iNemoEngine_API_Update+0x1998>
 8016cce:	edcd 7a30 	vstr	s15, [sp, #192]	@ 0xc0
 8016cd2:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8016f6c <iNemoEngine_API_Update+0x199c>
 8016cd6:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 8016cda:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8016cde:	f7ff b806 	b.w	8015cee <iNemoEngine_API_Update+0x71e>
 8016ce2:	ed9f 8aa3 	vldr	s16, [pc, #652]	@ 8016f70 <iNemoEngine_API_Update+0x19a0>
 8016ce6:	eddf 7aa3 	vldr	s15, [pc, #652]	@ 8016f74 <iNemoEngine_API_Update+0x19a4>
 8016cea:	eddf 6aac 	vldr	s13, [pc, #688]	@ 8016f9c <iNemoEngine_API_Update+0x19cc>
 8016cee:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8016f78 <iNemoEngine_API_Update+0x19a8>
 8016cf2:	eddf 4aa2 	vldr	s9, [pc, #648]	@ 8016f7c <iNemoEngine_API_Update+0x19ac>
 8016cf6:	ed84 8a01 	vstr	s16, [r4, #4]
 8016cfa:	edc4 7a00 	vstr	s15, [r4]
 8016cfe:	ed84 8a02 	vstr	s16, [r4, #8]
 8016d02:	eef0 5a66 	vmov.f32	s11, s13
 8016d06:	eeb0 5a47 	vmov.f32	s10, s14
 8016d0a:	eeb0 6a67 	vmov.f32	s12, s15
 8016d0e:	edcd 4a04 	vstr	s9, [sp, #16]
 8016d12:	eeb0 9a67 	vmov.f32	s18, s15
 8016d16:	eef0 ea48 	vmov.f32	s29, s16
 8016d1a:	f7fe befb 	b.w	8015b14 <iNemoEngine_API_Update+0x544>
 8016d1e:	eef1 7a67 	vneg.f32	s15, s15
 8016d22:	e42e      	b.n	8016582 <iNemoEngine_API_Update+0xfb2>
 8016d24:	eef7 ea00 	vmov.f32	s29, #112	@ 0x3f800000  1.0
 8016d28:	eeb0 9a6e 	vmov.f32	s18, s29
 8016d2c:	edd7 5a74 	vldr	s11, [r7, #464]	@ 0x1d0
 8016d30:	ed97 5a72 	vldr	s10, [r7, #456]	@ 0x1c8
 8016d34:	eddd 7a22 	vldr	s15, [sp, #136]	@ 0x88
 8016d38:	eddf 3a8b 	vldr	s7, [pc, #556]	@ 8016f68 <iNemoEngine_API_Update+0x1998>
 8016d3c:	ee7e 5a65 	vsub.f32	s11, s28, s11
 8016d40:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8016d44:	eef0 5ae5 	vabs.f32	s11, s11
 8016d48:	eef0 7ae7 	vabs.f32	s15, s15
 8016d4c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8016d50:	eef4 7ae3 	vcmpe.f32	s15, s7
 8016d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d58:	dd0a      	ble.n	8016d70 <iNemoEngine_API_Update+0x17a0>
 8016d5a:	ed9f 3a89 	vldr	s6, [pc, #548]	@ 8016f80 <iNemoEngine_API_Update+0x19b0>
 8016d5e:	eef4 7ac3 	vcmpe.f32	s15, s6
 8016d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d66:	f341 80e1 	ble.w	8017f2c <iNemoEngine_API_Update+0x295c>
 8016d6a:	eef1 3a04 	vmov.f32	s7, #20	@ 0x40a00000  5.0
 8016d6e:	e001      	b.n	8016d74 <iNemoEngine_API_Update+0x17a4>
 8016d70:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8016d74:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8016d78:	783e      	ldrb	r6, [r7, #0]
 8016d7a:	eef4 3ae7 	vcmpe.f32	s7, s15
 8016d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d82:	bfa8      	it	ge
 8016d84:	eef0 7a63 	vmovge.f32	s15, s7
 8016d88:	edcd 7a04 	vstr	s15, [sp, #16]
 8016d8c:	b1ce      	cbz	r6, 8016dc2 <iNemoEngine_API_Update+0x17f2>
 8016d8e:	787e      	ldrb	r6, [r7, #1]
 8016d90:	2e00      	cmp	r6, #0
 8016d92:	f041 8053 	bne.w	8017e3c <iNemoEngine_API_Update+0x286c>
 8016d96:	ee74 7a86 	vadd.f32	s15, s9, s12
 8016d9a:	eef5 4a00 	vmov.f32	s9, #80	@ 0x3e800000  0.250
 8016d9e:	ee74 7a27 	vadd.f32	s15, s8, s15
 8016da2:	ed97 6a05 	vldr	s12, [r7, #20]
 8016da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016daa:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8016dae:	eef6 4a00 	vmov.f32	s9, #96	@ 0x3f000000  0.5
 8016db2:	ee26 6a24 	vmul.f32	s12, s12, s9
 8016db6:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dbe:	f102 8293 	bmi.w	80192e8 <iNemoEngine_API_Update+0x3d18>
 8016dc2:	edd7 7a73 	vldr	s15, [r7, #460]	@ 0x1cc
 8016dc6:	ed9d 6a22 	vldr	s12, [sp, #136]	@ 0x88
 8016dca:	ed8d 5a4f 	vstr	s10, [sp, #316]	@ 0x13c
 8016dce:	ed8d 6aa2 	vstr	s12, [sp, #648]	@ 0x288
 8016dd2:	ed9d 6a0a 	vldr	s12, [sp, #40]	@ 0x28
 8016dd6:	ed8d eaa4 	vstr	s28, [sp, #656]	@ 0x290
 8016dda:	ed8d 6aa3 	vstr	s12, [sp, #652]	@ 0x28c
 8016dde:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8016de2:	eef0 4a46 	vmov.f32	s9, s12
 8016de6:	eee5 4a45 	vfms.f32	s9, s10, s10
 8016dea:	2300      	movs	r3, #0
 8016dec:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8016df0:	ee2c 4aaa 	vmul.f32	s8, s25, s21
 8016df4:	eef1 3ae4 	vsqrt.f32	s7, s9
 8016df8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8016dfc:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8016e00:	934d      	str	r3, [sp, #308]	@ 0x134
 8016e02:	ee74 2a04 	vadd.f32	s5, s8, s8
 8016e06:	ee29 4aac 	vmul.f32	s8, s19, s25
 8016e0a:	ee69 4aaa 	vmul.f32	s9, s19, s21
 8016e0e:	eeab 4a2a 	vfma.f32	s8, s22, s21
 8016e12:	ee2c 3a8b 	vmul.f32	s6, s25, s22
 8016e16:	ee29 1a8b 	vmul.f32	s2, s19, s22
 8016e1a:	ee74 4aa4 	vadd.f32	s9, s9, s9
 8016e1e:	ee69 9aa9 	vmul.f32	s19, s19, s19
 8016e22:	ee74 ca04 	vadd.f32	s25, s8, s8
 8016e26:	eeb0 4a00 	vmov.f32	s8, #0	@ 0x40000000  2.0
 8016e2a:	ee79 9aa9 	vadd.f32	s19, s19, s19
 8016e2e:	eeb0 2a64 	vmov.f32	s4, s9
 8016e32:	eee3 4a44 	vfms.f32	s9, s6, s8
 8016e36:	eea3 2a04 	vfma.f32	s4, s6, s8
 8016e3a:	ee2b ba0b 	vmul.f32	s22, s22, s22
 8016e3e:	eef0 1a69 	vmov.f32	s3, s19
 8016e42:	eddd 9a32 	vldr	s19, [sp, #200]	@ 0xc8
 8016e46:	edcd 3a4e 	vstr	s7, [sp, #312]	@ 0x138
 8016e4a:	eee3 9ae4 	vfms.f32	s19, s7, s9
 8016e4e:	eeeb 1a04 	vfma.f32	s3, s22, s8
 8016e52:	eddd 4a35 	vldr	s9, [sp, #212]	@ 0xd4
 8016e56:	eee5 4a42 	vfms.f32	s9, s10, s4
 8016e5a:	ee76 1a61 	vsub.f32	s3, s12, s3
 8016e5e:	ee6a aaaa 	vmul.f32	s21, s21, s21
 8016e62:	eee3 4ae1 	vfms.f32	s9, s7, s3
 8016e66:	ee7a aaaa 	vadd.f32	s21, s21, s21
 8016e6a:	edcd 4a9a 	vstr	s9, [sp, #616]	@ 0x268
 8016e6e:	ee7c 4a22 	vadd.f32	s9, s24, s5
 8016e72:	eef0 0a6a 	vmov.f32	s1, s21
 8016e76:	eeb0 3a62 	vmov.f32	s6, s5
 8016e7a:	eee1 4a44 	vfms.f32	s9, s2, s8
 8016e7e:	eeeb 0a04 	vfma.f32	s1, s22, s8
 8016e82:	ee91 3a04 	vfnms.f32	s6, s2, s8
 8016e86:	edcd 4a47 	vstr	s9, [sp, #284]	@ 0x11c
 8016e8a:	ee25 4a03 	vmul.f32	s8, s10, s6
 8016e8e:	edcd 4a9c 	vstr	s9, [sp, #624]	@ 0x270
 8016e92:	ee76 4a60 	vsub.f32	s9, s12, s1
 8016e96:	ee3b 6ac6 	vsub.f32	s12, s23, s12
 8016e9a:	eea3 4aac 	vfma.f32	s8, s7, s25
 8016e9e:	ee36 6a20 	vadd.f32	s12, s12, s1
 8016ea2:	eee5 9a64 	vfms.f32	s19, s10, s9
 8016ea6:	eddd 3a34 	vldr	s7, [sp, #208]	@ 0xd0
 8016eaa:	ed8d 6a49 	vstr	s12, [sp, #292]	@ 0x124
 8016eae:	ed8d 6a9e 	vstr	s12, [sp, #632]	@ 0x278
 8016eb2:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8016fac <iNemoEngine_API_Update+0x19dc>
 8016eb6:	edcd 9a9b 	vstr	s19, [sp, #620]	@ 0x26c
 8016eba:	ee3d 2a42 	vsub.f32	s4, s26, s4
 8016ebe:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8016ec2:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016eca:	ed8d 2a48 	vstr	s4, [sp, #288]	@ 0x120
 8016ece:	ed8d 2a9d 	vstr	s4, [sp, #628]	@ 0x274
 8016ed2:	ed8d 4a99 	vstr	s8, [sp, #612]	@ 0x264
 8016ed6:	d541      	bpl.n	8016f5c <iNemoEngine_API_Update+0x198c>
 8016ed8:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 8016f84 <iNemoEngine_API_Update+0x19b4>
 8016edc:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ee4:	dd3a      	ble.n	8016f5c <iNemoEngine_API_Update+0x198c>
 8016ee6:	ed9d 6a0a 	vldr	s12, [sp, #40]	@ 0x28
 8016eea:	ee76 7a67 	vsub.f32	s15, s12, s15
 8016eee:	ed9d 6a0c 	vldr	s12, [sp, #48]	@ 0x30
 8016ef2:	eef0 7ae7 	vabs.f32	s15, s15
 8016ef6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016efa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f02:	dd55      	ble.n	8016fb0 <iNemoEngine_API_Update+0x19e0>
 8016f04:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8016f08:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f10:	f140 8786 	bpl.w	8017e20 <iNemoEngine_API_Update+0x2850>
 8016f14:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 8016f88 <iNemoEngine_API_Update+0x19b8>
 8016f18:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f20:	f141 8172 	bpl.w	8018208 <iNemoEngine_API_Update+0x2c38>
 8016f24:	ed9f 6a1b 	vldr	s12, [pc, #108]	@ 8016f94 <iNemoEngine_API_Update+0x19c4>
 8016f28:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f30:	f2c1 8172 	blt.w	8018218 <iNemoEngine_API_Update+0x2c48>
 8016f34:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8016f8c <iNemoEngine_API_Update+0x19bc>
 8016f38:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f40:	f141 8227 	bpl.w	8018392 <iNemoEngine_API_Update+0x2dc2>
 8016f44:	ed9f 5a13 	vldr	s10, [pc, #76]	@ 8016f94 <iNemoEngine_API_Update+0x19c4>
 8016f48:	eddf 4a11 	vldr	s9, [pc, #68]	@ 8016f90 <iNemoEngine_API_Update+0x19c0>
 8016f4c:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8016f50:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8016f54:	eea5 6a24 	vfma.f32	s12, s10, s9
 8016f58:	f001 b968 	b.w	801822c <iNemoEngine_API_Update+0x2c5c>
 8016f5c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8016f60:	e7c1      	b.n	8016ee6 <iNemoEngine_API_Update+0x1916>
 8016f62:	bf00      	nop
 8016f64:	3ecccccc 	.word	0x3ecccccc
 8016f68:	3dcccccd 	.word	0x3dcccccd
 8016f6c:	3f666666 	.word	0x3f666666
 8016f70:	3f333333 	.word	0x3f333333
 8016f74:	00000000 	.word	0x00000000
 8016f78:	bfb33333 	.word	0xbfb33333
 8016f7c:	3f7ae147 	.word	0x3f7ae147
 8016f80:	3fb77778 	.word	0x3fb77778
 8016f84:	3f4ccccd 	.word	0x3f4ccccd
 8016f88:	3ba3d70a 	.word	0x3ba3d70a
 8016f8c:	3c75c28f 	.word	0x3c75c28f
 8016f90:	42f00001 	.word	0x42f00001
 8016f94:	3c23d70a 	.word	0x3c23d70a
 8016f98:	3b449ba6 	.word	0x3b449ba6
 8016f9c:	3fb33333 	.word	0x3fb33333
 8016fa0:	3f8f5c29 	.word	0x3f8f5c29
 8016fa4:	3f59999a 	.word	0x3f59999a
 8016fa8:	3e4ccccd 	.word	0x3e4ccccd
 8016fac:	3f99999a 	.word	0x3f99999a
 8016fb0:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 8016fb4:	ed5f 3a09 	vldr	s7, [pc, #-36]	@ 8016f94 <iNemoEngine_API_Update+0x19c4>
 8016fb8:	ed5f 4a09 	vldr	s9, [pc, #-36]	@ 8016f98 <iNemoEngine_API_Update+0x19c8>
 8016fbc:	eeb0 6a45 	vmov.f32	s12, s10
 8016fc0:	eef0 9a45 	vmov.f32	s19, s10
 8016fc4:	ed9d 4a04 	vldr	s8, [sp, #16]
 8016fc8:	edcd 4a6f 	vstr	s9, [sp, #444]	@ 0x1bc
 8016fcc:	eddd 4a21 	vldr	s9, [sp, #132]	@ 0x84
 8016fd0:	eddd 2a8e 	vldr	s5, [sp, #568]	@ 0x238
 8016fd4:	ed9d 2a90 	vldr	s4, [sp, #576]	@ 0x240
 8016fd8:	7b3b      	ldrb	r3, [r7, #12]
 8016fda:	ed8d aa91 	vstr	s20, [sp, #580]	@ 0x244
 8016fde:	ee24 9a09 	vmul.f32	s18, s8, s18
 8016fe2:	ee34 3aa4 	vadd.f32	s6, s9, s9
 8016fe6:	eddd 4a2f 	vldr	s9, [sp, #188]	@ 0xbc
 8016fea:	ed8d aa92 	vstr	s20, [sp, #584]	@ 0x248
 8016fee:	ee34 4aa4 	vadd.f32	s8, s9, s9
 8016ff2:	ee62 2a89 	vmul.f32	s5, s5, s18
 8016ff6:	eddd 4a1f 	vldr	s9, [sp, #124]	@ 0x7c
 8016ffa:	edcd 2a8e 	vstr	s5, [sp, #568]	@ 0x238
 8016ffe:	edcd 4a98 	vstr	s9, [sp, #608]	@ 0x260
 8017002:	eddd 2a8f 	vldr	s5, [sp, #572]	@ 0x23c
 8017006:	eddd 4a8d 	vldr	s9, [sp, #564]	@ 0x234
 801700a:	edcd 3a70 	vstr	s7, [sp, #448]	@ 0x1c0
 801700e:	ee23 3a06 	vmul.f32	s6, s6, s12
 8017012:	ee24 4a06 	vmul.f32	s8, s8, s12
 8017016:	ee69 4a24 	vmul.f32	s9, s18, s9
 801701a:	ee62 2a89 	vmul.f32	s5, s5, s18
 801701e:	ee2e 2a82 	vmul.f32	s4, s29, s4
 8017022:	ed8d 3a96 	vstr	s6, [sp, #600]	@ 0x258
 8017026:	ed8d 4a97 	vstr	s8, [sp, #604]	@ 0x25c
 801702a:	edcd 4a8d 	vstr	s9, [sp, #564]	@ 0x234
 801702e:	edcd 2a8f 	vstr	s5, [sp, #572]	@ 0x23c
 8017032:	ed8d 2a90 	vstr	s4, [sp, #576]	@ 0x240
 8017036:	2b00      	cmp	r3, #0
 8017038:	f000 85eb 	beq.w	8017c12 <iNemoEngine_API_Update+0x2642>
 801703c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801703e:	eddd 2a29 	vldr	s5, [sp, #164]	@ 0xa4
 8017042:	2300      	movs	r3, #0
 8017044:	f362 0307 	bfi	r3, r2, #0, #8
 8017048:	f362 230f 	bfi	r3, r2, #8, #8
 801704c:	f362 4317 	bfi	r3, r2, #16, #8
 8017050:	7bba      	ldrb	r2, [r7, #14]
 8017052:	f362 631f 	bfi	r3, r2, #24, #8
 8017056:	ee65 2a22 	vmul.f32	s5, s10, s5
 801705a:	ee26 aa0a 	vmul.f32	s20, s12, s20
 801705e:	ee63 3a85 	vmul.f32	s7, s7, s10
 8017062:	9344      	str	r3, [sp, #272]	@ 0x110
 8017064:	ee26 5a02 	vmul.f32	s10, s12, s4
 8017068:	2300      	movs	r3, #0
 801706a:	ee36 6a06 	vadd.f32	s12, s12, s12
 801706e:	4619      	mov	r1, r3
 8017070:	ee24 4a06 	vmul.f32	s8, s8, s12
 8017074:	f362 0107 	bfi	r1, r2, #0, #8
 8017078:	f362 210f 	bfi	r1, r2, #8, #8
 801707c:	edcd 3a70 	vstr	s7, [sp, #448]	@ 0x1c0
 8017080:	ed8d 5a90 	vstr	s10, [sp, #576]	@ 0x240
 8017084:	edcd 2a69 	vstr	s5, [sp, #420]	@ 0x1a4
 8017088:	ed8d aa91 	vstr	s20, [sp, #580]	@ 0x244
 801708c:	ed8d aa92 	vstr	s20, [sp, #584]	@ 0x248
 8017090:	edcd 2a6a 	vstr	s5, [sp, #424]	@ 0x1a8
 8017094:	edcd 2a6b 	vstr	s5, [sp, #428]	@ 0x1ac
 8017098:	ed8d 4a97 	vstr	s8, [sp, #604]	@ 0x25c
 801709c:	f8ad 1114 	strh.w	r1, [sp, #276]	@ 0x114
 80170a0:	2a00      	cmp	r2, #0
 80170a2:	f040 86b0 	bne.w	8017e06 <iNemoEngine_API_Update+0x2836>
 80170a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80170aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170ae:	f340 8482 	ble.w	80179b6 <iNemoEngine_API_Update+0x23e6>
 80170b2:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 80170b6:	eef4 7ac8 	vcmpe.f32	s15, s16
 80170ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170be:	f2c0 847a 	blt.w	80179b6 <iNemoEngine_API_Update+0x23e6>
 80170c2:	2e00      	cmp	r6, #0
 80170c4:	f040 8477 	bne.w	80179b6 <iNemoEngine_API_Update+0x23e6>
 80170c8:	ed5f 7a4c 	vldr	s15, [pc, #-304]	@ 8016f9c <iNemoEngine_API_Update+0x19cc>
 80170cc:	f8ad 6110 	strh.w	r6, [sp, #272]	@ 0x110
 80170d0:	eeb4 eae7 	vcmpe.f32	s28, s15
 80170d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170d8:	f88d 6112 	strb.w	r6, [sp, #274]	@ 0x112
 80170dc:	f88d 6119 	strb.w	r6, [sp, #281]	@ 0x119
 80170e0:	f88d 611b 	strb.w	r6, [sp, #283]	@ 0x11b
 80170e4:	f342 8146 	ble.w	8019374 <iNemoEngine_API_Update+0x3da4>
 80170e8:	2300      	movs	r3, #0
 80170ea:	f8ad 3110 	strh.w	r3, [sp, #272]	@ 0x110
 80170ee:	f88d 3112 	strb.w	r3, [sp, #274]	@ 0x112
 80170f2:	f88d 3119 	strb.w	r3, [sp, #281]	@ 0x119
 80170f6:	f88d 311b 	strb.w	r3, [sp, #283]	@ 0x11b
 80170fa:	ed5f 7a57 	vldr	s15, [pc, #-348]	@ 8016fa0 <iNemoEngine_API_Update+0x19d0>
 80170fe:	ed9d 6a0a 	vldr	s12, [sp, #40]	@ 0x28
 8017102:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8017106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801710a:	dc07      	bgt.n	801711c <iNemoEngine_API_Update+0x1b4c>
 801710c:	ed5f 7a5b 	vldr	s15, [pc, #-364]	@ 8016fa4 <iNemoEngine_API_Update+0x19d4>
 8017110:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8017114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017118:	f140 863f 	bpl.w	8017d9a <iNemoEngine_API_Update+0x27ca>
 801711c:	2300      	movs	r3, #0
 801711e:	f8ad 3113 	strh.w	r3, [sp, #275]	@ 0x113
 8017122:	f88d 3115 	strb.w	r3, [sp, #277]	@ 0x115
 8017126:	f8ad 3119 	strh.w	r3, [sp, #281]	@ 0x119
 801712a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801712e:	eef4 5ae7 	vcmpe.f32	s11, s15
 8017132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017136:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017138:	f340 855b 	ble.w	8017bf2 <iNemoEngine_API_Update+0x2622>
 801713c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017140:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8017144:	ed9d 6a1f 	vldr	s12, [sp, #124]	@ 0x7c
 8017148:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801714c:	2200      	movs	r2, #0
 801714e:	ee23 3a27 	vmul.f32	s6, s6, s15
 8017152:	ee66 7a27 	vmul.f32	s15, s12, s15
 8017156:	ed8d 3a96 	vstr	s6, [sp, #600]	@ 0x258
 801715a:	edcd 7a98 	vstr	s15, [sp, #608]	@ 0x260
 801715e:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8017162:	eef4 5ae7 	vcmpe.f32	s11, s15
 8017166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801716a:	bfc4      	itt	gt
 801716c:	f88d 2119 	strbgt.w	r2, [sp, #281]	@ 0x119
 8017170:	f88d 211b 	strbgt.w	r2, [sp, #283]	@ 0x11b
 8017174:	2b0e      	cmp	r3, #14
 8017176:	f8ad 2110 	strh.w	r2, [sp, #272]	@ 0x110
 801717a:	f88d 2112 	strb.w	r2, [sp, #274]	@ 0x112
 801717e:	f340 8608 	ble.w	8017d92 <iNemoEngine_API_Update+0x27c2>
 8017182:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
 8017186:	ed9d 6a14 	vldr	s12, [sp, #80]	@ 0x50
 801718a:	eef4 7ac6 	vcmpe.f32	s15, s12
 801718e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017192:	f340 8440 	ble.w	8017a16 <iNemoEngine_API_Update+0x2446>
 8017196:	eddd 7a12 	vldr	s15, [sp, #72]	@ 0x48
 801719a:	ed9d 6a0c 	vldr	s12, [sp, #48]	@ 0x30
 801719e:	eef4 7ac6 	vcmpe.f32	s15, s12
 80171a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171a6:	f340 8436 	ble.w	8017a16 <iNemoEngine_API_Update+0x2446>
 80171aa:	eddd 7a13 	vldr	s15, [sp, #76]	@ 0x4c
 80171ae:	ed9d 6a16 	vldr	s12, [sp, #88]	@ 0x58
 80171b2:	eef4 7ac6 	vcmpe.f32	s15, s12
 80171b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171ba:	f340 842c 	ble.w	8017a16 <iNemoEngine_API_Update+0x2446>
 80171be:	ed5f 7a86 	vldr	s15, [pc, #-536]	@ 8016fa8 <iNemoEngine_API_Update+0x19d8>
 80171c2:	eeb0 6aef 	vabs.f32	s12, s31
 80171c6:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80171ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171ce:	f140 8422 	bpl.w	8017a16 <iNemoEngine_API_Update+0x2446>
 80171d2:	eeb0 6acf 	vabs.f32	s12, s30
 80171d6:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80171da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171de:	f140 841a 	bpl.w	8017a16 <iNemoEngine_API_Update+0x2446>
 80171e2:	ed9d 6a10 	vldr	s12, [sp, #64]	@ 0x40
 80171e6:	eeb0 6ac6 	vabs.f32	s12, s12
 80171ea:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80171ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171f2:	f140 8410 	bpl.w	8017a16 <iNemoEngine_API_Update+0x2446>
 80171f6:	ed5f 7a93 	vldr	s15, [pc, #-588]	@ 8016fac <iNemoEngine_API_Update+0x19dc>
 80171fa:	eeb0 cacc 	vabs.f32	s24, s24
 80171fe:	eeb4 cae7 	vcmpe.f32	s24, s15
 8017202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017206:	f140 8406 	bpl.w	8017a16 <iNemoEngine_API_Update+0x2446>
 801720a:	eeb0 dacd 	vabs.f32	s26, s26
 801720e:	eeb4 dae7 	vcmpe.f32	s26, s15
 8017212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017216:	f140 83fe 	bpl.w	8017a16 <iNemoEngine_API_Update+0x2446>
 801721a:	eef0 baeb 	vabs.f32	s23, s23
 801721e:	eef4 bae7 	vcmpe.f32	s23, s15
 8017222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017226:	f140 83f6 	bpl.w	8017a16 <iNemoEngine_API_Update+0x2446>
 801722a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801722c:	edd3 7a00 	vldr	s15, [r3]
 8017230:	f207 73a4 	addw	r3, r7, #1956	@ 0x7a4
 8017234:	edd3 3a00 	vldr	s7, [r3]
 8017238:	f897 31a0 	ldrb.w	r3, [r7, #416]	@ 0x1a0
 801723c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8017240:	eef4 7ae3 	vcmpe.f32	s15, s7
 8017244:	2b09      	cmp	r3, #9
 8017246:	ed92 4a00 	vldr	s8, [r2]
 801724a:	bf8c      	ite	hi
 801724c:	220a      	movhi	r2, #10
 801724e:	2205      	movls	r2, #5
 8017250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017254:	bfb4      	ite	lt
 8017256:	eeb0 6a63 	vmovlt.f32	s12, s7
 801725a:	eeb0 6a67 	vmovge.f32	s12, s15
 801725e:	eeb4 6ac4 	vcmpe.f32	s12, s8
 8017262:	f207 71bc 	addw	r1, r7, #1980	@ 0x7bc
 8017266:	edd1 4a00 	vldr	s9, [r1]
 801726a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801726e:	bfb8      	it	lt
 8017270:	eeb0 6a44 	vmovlt.f32	s12, s8
 8017274:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8017278:	f507 61f9 	add.w	r1, r7, #1992	@ 0x7c8
 801727c:	ed91 5a00 	vldr	s10, [r1]
 8017280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017284:	bfb8      	it	lt
 8017286:	eeb0 6a64 	vmovlt.f32	s12, s9
 801728a:	eeb4 6ac5 	vcmpe.f32	s12, s10
 801728e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017292:	eef4 7ae3 	vcmpe.f32	s15, s7
 8017296:	bfb4      	ite	lt
 8017298:	eef0 5a45 	vmovlt.f32	s11, s10
 801729c:	eef0 5a46 	vmovge.f32	s11, s12
 80172a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172a4:	bf8c      	ite	hi
 80172a6:	eeb0 6a63 	vmovhi.f32	s12, s7
 80172aa:	eeb0 6a67 	vmovls.f32	s12, s15
 80172ae:	eeb4 6ac4 	vcmpe.f32	s12, s8
 80172b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172b6:	bf88      	it	hi
 80172b8:	eeb0 6a44 	vmovhi.f32	s12, s8
 80172bc:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80172c0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80172c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172c8:	bf88      	it	hi
 80172ca:	eeb0 6a64 	vmovhi.f32	s12, s9
 80172ce:	ee77 7a84 	vadd.f32	s15, s15, s8
 80172d2:	eeb4 6ac5 	vcmpe.f32	s12, s10
 80172d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172da:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80172de:	bf88      	it	hi
 80172e0:	eeb0 6a45 	vmovhi.f32	s12, s10
 80172e4:	2a05      	cmp	r2, #5
 80172e6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80172ea:	d063      	beq.n	80173b4 <iNemoEngine_API_Update+0x1de4>
 80172ec:	f207 71d4 	addw	r1, r7, #2004	@ 0x7d4
 80172f0:	ed91 3a00 	vldr	s6, [r1]
 80172f4:	f507 61fc 	add.w	r1, r7, #2016	@ 0x7e0
 80172f8:	eef4 5ac3 	vcmpe.f32	s11, s6
 80172fc:	edd1 3a00 	vldr	s7, [r1]
 8017300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017304:	bfb8      	it	lt
 8017306:	eef0 5a43 	vmovlt.f32	s11, s6
 801730a:	eef4 5ae3 	vcmpe.f32	s11, s7
 801730e:	f207 71ec 	addw	r1, r7, #2028	@ 0x7ec
 8017312:	ed91 4a00 	vldr	s8, [r1]
 8017316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801731a:	bfb8      	it	lt
 801731c:	eef0 5a63 	vmovlt.f32	s11, s7
 8017320:	eef4 5ac4 	vcmpe.f32	s11, s8
 8017324:	f507 61ff 	add.w	r1, r7, #2040	@ 0x7f8
 8017328:	edd1 4a00 	vldr	s9, [r1]
 801732c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017330:	bfb8      	it	lt
 8017332:	eef0 5a44 	vmovlt.f32	s11, s8
 8017336:	eef4 5ae4 	vcmpe.f32	s11, s9
 801733a:	f607 0104 	addw	r1, r7, #2052	@ 0x804
 801733e:	ed91 5a00 	vldr	s10, [r1]
 8017342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017346:	bfb8      	it	lt
 8017348:	eef0 5a64 	vmovlt.f32	s11, s9
 801734c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8017350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017354:	eeb4 6ac3 	vcmpe.f32	s12, s6
 8017358:	bfb8      	it	lt
 801735a:	eef0 5a45 	vmovlt.f32	s11, s10
 801735e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017362:	bf88      	it	hi
 8017364:	eeb0 6a43 	vmovhi.f32	s12, s6
 8017368:	eeb4 6ae3 	vcmpe.f32	s12, s7
 801736c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017370:	bf88      	it	hi
 8017372:	eeb0 6a63 	vmovhi.f32	s12, s7
 8017376:	ee77 7a83 	vadd.f32	s15, s15, s6
 801737a:	eeb4 6ac4 	vcmpe.f32	s12, s8
 801737e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017382:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017386:	bf88      	it	hi
 8017388:	eeb0 6a44 	vmovhi.f32	s12, s8
 801738c:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8017390:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017398:	bf88      	it	hi
 801739a:	eeb0 6a64 	vmovhi.f32	s12, s9
 801739e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80173a2:	eeb4 6ac5 	vcmpe.f32	s12, s10
 80173a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173aa:	ee77 7a85 	vadd.f32	s15, s15, s10
 80173ae:	bf88      	it	hi
 80173b0:	eeb0 6a45 	vmovhi.f32	s12, s10
 80173b4:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80173b8:	eddf 5af3 	vldr	s11, [pc, #972]	@ 8017788 <iNemoEngine_API_Update+0x21b8>
 80173bc:	ee26 6a2d 	vmul.f32	s12, s12, s27
 80173c0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80173c4:	eddf 5af1 	vldr	s11, [pc, #964]	@ 801778c <iNemoEngine_API_Update+0x21bc>
 80173c8:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80173cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173d0:	f300 8321 	bgt.w	8017a16 <iNemoEngine_API_Update+0x2446>
 80173d4:	eef0 7ae7 	vabs.f32	s15, s15
 80173d8:	ee67 7aad 	vmul.f32	s15, s15, s27
 80173dc:	ed9f 6aec 	vldr	s12, [pc, #944]	@ 8017790 <iNemoEngine_API_Update+0x21c0>
 80173e0:	eef4 7ac6 	vcmpe.f32	s15, s12
 80173e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173e8:	f300 8315 	bgt.w	8017a16 <iNemoEngine_API_Update+0x2446>
 80173ec:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 80173ee:	edd1 7a00 	vldr	s15, [r1]
 80173f2:	f507 61f5 	add.w	r1, r7, #1960	@ 0x7a8
 80173f6:	edd1 3a00 	vldr	s7, [r1]
 80173fa:	f207 71b4 	addw	r1, r7, #1972	@ 0x7b4
 80173fe:	eef4 7ae3 	vcmpe.f32	s15, s7
 8017402:	ed91 4a00 	vldr	s8, [r1]
 8017406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801740a:	bfb4      	ite	lt
 801740c:	eeb0 6a63 	vmovlt.f32	s12, s7
 8017410:	eeb0 6a67 	vmovge.f32	s12, s15
 8017414:	eeb4 6ac4 	vcmpe.f32	s12, s8
 8017418:	f507 61f8 	add.w	r1, r7, #1984	@ 0x7c0
 801741c:	edd1 4a00 	vldr	s9, [r1]
 8017420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017424:	bfb8      	it	lt
 8017426:	eeb0 6a44 	vmovlt.f32	s12, s8
 801742a:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801742e:	f207 71cc 	addw	r1, r7, #1996	@ 0x7cc
 8017432:	ed91 5a00 	vldr	s10, [r1]
 8017436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801743a:	bfb8      	it	lt
 801743c:	eeb0 6a64 	vmovlt.f32	s12, s9
 8017440:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8017444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017448:	eef4 7ae3 	vcmpe.f32	s15, s7
 801744c:	bfb4      	ite	lt
 801744e:	eef0 5a45 	vmovlt.f32	s11, s10
 8017452:	eef0 5a46 	vmovge.f32	s11, s12
 8017456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801745a:	bf8c      	ite	hi
 801745c:	eeb0 6a63 	vmovhi.f32	s12, s7
 8017460:	eeb0 6a67 	vmovls.f32	s12, s15
 8017464:	eeb4 6ac4 	vcmpe.f32	s12, s8
 8017468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801746c:	bf88      	it	hi
 801746e:	eeb0 6a44 	vmovhi.f32	s12, s8
 8017472:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8017476:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801747a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801747e:	bf88      	it	hi
 8017480:	eeb0 6a64 	vmovhi.f32	s12, s9
 8017484:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017488:	eeb4 6ac5 	vcmpe.f32	s12, s10
 801748c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017490:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8017494:	bf88      	it	hi
 8017496:	eeb0 6a45 	vmovhi.f32	s12, s10
 801749a:	2a05      	cmp	r2, #5
 801749c:	ee77 7a85 	vadd.f32	s15, s15, s10
 80174a0:	d063      	beq.n	801756a <iNemoEngine_API_Update+0x1f9a>
 80174a2:	f507 61fb 	add.w	r1, r7, #2008	@ 0x7d8
 80174a6:	ed91 3a00 	vldr	s6, [r1]
 80174aa:	f207 71e4 	addw	r1, r7, #2020	@ 0x7e4
 80174ae:	eef4 5ac3 	vcmpe.f32	s11, s6
 80174b2:	edd1 3a00 	vldr	s7, [r1]
 80174b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174ba:	bfb8      	it	lt
 80174bc:	eef0 5a43 	vmovlt.f32	s11, s6
 80174c0:	eef4 5ae3 	vcmpe.f32	s11, s7
 80174c4:	f507 61fe 	add.w	r1, r7, #2032	@ 0x7f0
 80174c8:	ed91 4a00 	vldr	s8, [r1]
 80174cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174d0:	bfb8      	it	lt
 80174d2:	eef0 5a63 	vmovlt.f32	s11, s7
 80174d6:	eef4 5ac4 	vcmpe.f32	s11, s8
 80174da:	f207 71fc 	addw	r1, r7, #2044	@ 0x7fc
 80174de:	edd1 4a00 	vldr	s9, [r1]
 80174e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174e6:	bfb8      	it	lt
 80174e8:	eef0 5a44 	vmovlt.f32	s11, s8
 80174ec:	eef4 5ae4 	vcmpe.f32	s11, s9
 80174f0:	f607 0108 	addw	r1, r7, #2056	@ 0x808
 80174f4:	ed91 5a00 	vldr	s10, [r1]
 80174f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174fc:	bfb8      	it	lt
 80174fe:	eef0 5a64 	vmovlt.f32	s11, s9
 8017502:	eef4 5ac5 	vcmpe.f32	s11, s10
 8017506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801750a:	eeb4 6ac3 	vcmpe.f32	s12, s6
 801750e:	bfb8      	it	lt
 8017510:	eef0 5a45 	vmovlt.f32	s11, s10
 8017514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017518:	bf88      	it	hi
 801751a:	eeb0 6a43 	vmovhi.f32	s12, s6
 801751e:	eeb4 6ae3 	vcmpe.f32	s12, s7
 8017522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017526:	bf88      	it	hi
 8017528:	eeb0 6a63 	vmovhi.f32	s12, s7
 801752c:	ee77 7a83 	vadd.f32	s15, s15, s6
 8017530:	eeb4 6ac4 	vcmpe.f32	s12, s8
 8017534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017538:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801753c:	bf88      	it	hi
 801753e:	eeb0 6a44 	vmovhi.f32	s12, s8
 8017542:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8017546:	ee77 7a84 	vadd.f32	s15, s15, s8
 801754a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801754e:	bf88      	it	hi
 8017550:	eeb0 6a64 	vmovhi.f32	s12, s9
 8017554:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8017558:	eeb4 6ac5 	vcmpe.f32	s12, s10
 801755c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017560:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017564:	bf88      	it	hi
 8017566:	eeb0 6a45 	vmovhi.f32	s12, s10
 801756a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801756e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8017788 <iNemoEngine_API_Update+0x21b8>
 8017572:	ee26 6a2d 	vmul.f32	s12, s12, s27
 8017576:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801757a:	eddf 5a84 	vldr	s11, [pc, #528]	@ 801778c <iNemoEngine_API_Update+0x21bc>
 801757e:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8017582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017586:	f300 8246 	bgt.w	8017a16 <iNemoEngine_API_Update+0x2446>
 801758a:	eef0 7ae7 	vabs.f32	s15, s15
 801758e:	ee67 7aad 	vmul.f32	s15, s15, s27
 8017592:	ed9f 6a7f 	vldr	s12, [pc, #508]	@ 8017790 <iNemoEngine_API_Update+0x21c0>
 8017596:	eef4 7ac6 	vcmpe.f32	s15, s12
 801759a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801759e:	f300 823a 	bgt.w	8017a16 <iNemoEngine_API_Update+0x2446>
 80175a2:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 80175a4:	edd1 3a00 	vldr	s7, [r1]
 80175a8:	f207 71ac 	addw	r1, r7, #1964	@ 0x7ac
 80175ac:	edd1 4a00 	vldr	s9, [r1]
 80175b0:	f507 61f7 	add.w	r1, r7, #1976	@ 0x7b8
 80175b4:	eef4 4ae3 	vcmpe.f32	s9, s7
 80175b8:	edd1 5a00 	vldr	s11, [r1]
 80175bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175c0:	bfb4      	ite	lt
 80175c2:	eef0 7a63 	vmovlt.f32	s15, s7
 80175c6:	eef0 7a64 	vmovge.f32	s15, s9
 80175ca:	eef4 7ae5 	vcmpe.f32	s15, s11
 80175ce:	f207 71c4 	addw	r1, r7, #1988	@ 0x7c4
 80175d2:	ed91 6a00 	vldr	s12, [r1]
 80175d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175da:	bfb8      	it	lt
 80175dc:	eef0 7a65 	vmovlt.f32	s15, s11
 80175e0:	eef4 7ac6 	vcmpe.f32	s15, s12
 80175e4:	f507 61fa 	add.w	r1, r7, #2000	@ 0x7d0
 80175e8:	ed91 4a00 	vldr	s8, [r1]
 80175ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175f0:	bfb8      	it	lt
 80175f2:	eef0 7a46 	vmovlt.f32	s15, s12
 80175f6:	eef4 7ac4 	vcmpe.f32	s15, s8
 80175fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175fe:	eef4 4ae3 	vcmpe.f32	s9, s7
 8017602:	bfb8      	it	lt
 8017604:	eef0 7a44 	vmovlt.f32	s15, s8
 8017608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801760c:	bf8c      	ite	hi
 801760e:	eeb0 5a63 	vmovhi.f32	s10, s7
 8017612:	eeb0 5a64 	vmovls.f32	s10, s9
 8017616:	eeb4 5ae5 	vcmpe.f32	s10, s11
 801761a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801761e:	bf88      	it	hi
 8017620:	eeb0 5a65 	vmovhi.f32	s10, s11
 8017624:	eeb4 5ac6 	vcmpe.f32	s10, s12
 8017628:	ee74 4aa3 	vadd.f32	s9, s9, s7
 801762c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017630:	bf88      	it	hi
 8017632:	eeb0 5a46 	vmovhi.f32	s10, s12
 8017636:	ee75 5aa4 	vadd.f32	s11, s11, s9
 801763a:	eeb4 5ac4 	vcmpe.f32	s10, s8
 801763e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017642:	ee36 6a25 	vadd.f32	s12, s12, s11
 8017646:	bf88      	it	hi
 8017648:	eeb0 5a44 	vmovhi.f32	s10, s8
 801764c:	2a05      	cmp	r2, #5
 801764e:	ee34 6a06 	vadd.f32	s12, s8, s12
 8017652:	d065      	beq.n	8017720 <iNemoEngine_API_Update+0x2150>
 8017654:	f207 72dc 	addw	r2, r7, #2012	@ 0x7dc
 8017658:	edd2 5a00 	vldr	s11, [r2]
 801765c:	f507 62fd 	add.w	r2, r7, #2024	@ 0x7e8
 8017660:	eef4 5ae7 	vcmpe.f32	s11, s15
 8017664:	ed92 3a00 	vldr	s6, [r2]
 8017668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801766c:	bfa8      	it	ge
 801766e:	eef0 7a65 	vmovge.f32	s15, s11
 8017672:	eef4 7ac3 	vcmpe.f32	s15, s6
 8017676:	f207 72f4 	addw	r2, r7, #2036	@ 0x7f4
 801767a:	edd2 3a00 	vldr	s7, [r2]
 801767e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017682:	bfb8      	it	lt
 8017684:	eef0 7a43 	vmovlt.f32	s15, s6
 8017688:	eef4 7ae3 	vcmpe.f32	s15, s7
 801768c:	f507 6200 	add.w	r2, r7, #2048	@ 0x800
 8017690:	ed92 4a00 	vldr	s8, [r2]
 8017694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017698:	bfb8      	it	lt
 801769a:	eef0 7a63 	vmovlt.f32	s15, s7
 801769e:	eef4 7ac4 	vcmpe.f32	s15, s8
 80176a2:	f607 020c 	addw	r2, r7, #2060	@ 0x80c
 80176a6:	edd2 4a00 	vldr	s9, [r2]
 80176aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176ae:	bfb8      	it	lt
 80176b0:	eef0 7a44 	vmovlt.f32	s15, s8
 80176b4:	eef4 7ae4 	vcmpe.f32	s15, s9
 80176b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176bc:	eef4 5ac5 	vcmpe.f32	s11, s10
 80176c0:	bfb8      	it	lt
 80176c2:	eef0 7a64 	vmovlt.f32	s15, s9
 80176c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176ca:	ee35 6a86 	vadd.f32	s12, s11, s12
 80176ce:	bf88      	it	hi
 80176d0:	eef0 5a45 	vmovhi.f32	s11, s10
 80176d4:	eef4 5ac3 	vcmpe.f32	s11, s6
 80176d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176dc:	bf88      	it	hi
 80176de:	eef0 5a43 	vmovhi.f32	s11, s6
 80176e2:	eef4 5ae3 	vcmpe.f32	s11, s7
 80176e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176ea:	ee33 6a06 	vadd.f32	s12, s6, s12
 80176ee:	bf88      	it	hi
 80176f0:	eef0 5a63 	vmovhi.f32	s11, s7
 80176f4:	eef4 5ac4 	vcmpe.f32	s11, s8
 80176f8:	ee33 6a86 	vadd.f32	s12, s7, s12
 80176fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017700:	bf88      	it	hi
 8017702:	eef0 5a44 	vmovhi.f32	s11, s8
 8017706:	ee34 6a06 	vadd.f32	s12, s8, s12
 801770a:	eef4 5ae4 	vcmpe.f32	s11, s9
 801770e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017712:	ee34 6a86 	vadd.f32	s12, s9, s12
 8017716:	bf8c      	ite	hi
 8017718:	eeb0 5a64 	vmovhi.f32	s10, s9
 801771c:	eeb0 5a65 	vmovls.f32	s10, s11
 8017720:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8017724:	ee67 5aad 	vmul.f32	s11, s15, s27
 8017728:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8017788 <iNemoEngine_API_Update+0x21b8>
 801772c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8017730:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801778c <iNemoEngine_API_Update+0x21bc>
 8017734:	eef4 5ac6 	vcmpe.f32	s11, s12
 8017738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801773c:	f300 816b 	bgt.w	8017a16 <iNemoEngine_API_Update+0x2446>
 8017740:	eef0 7ae7 	vabs.f32	s15, s15
 8017744:	ee67 7aad 	vmul.f32	s15, s15, s27
 8017748:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8017790 <iNemoEngine_API_Update+0x21c0>
 801774c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017754:	f300 815f 	bgt.w	8017a16 <iNemoEngine_API_Update+0x2446>
 8017758:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801775a:	2a00      	cmp	r2, #0
 801775c:	f042 8117 	bne.w	801998e <iNemoEngine_API_Update+0x43be>
 8017760:	2301      	movs	r3, #1
 8017762:	9309      	str	r3, [sp, #36]	@ 0x24
 8017764:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8017768:	939f      	str	r3, [sp, #636]	@ 0x27c
 801776a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801776e:	93a0      	str	r3, [sp, #640]	@ 0x280
 8017770:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8017774:	93a1      	str	r3, [sp, #644]	@ 0x284
 8017776:	2300      	movs	r3, #0
 8017778:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 801777c:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 8017780:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 8017784:	707b      	strb	r3, [r7, #1]
 8017786:	e00d      	b.n	80177a4 <iNemoEngine_API_Update+0x21d4>
 8017788:	3dcccccd 	.word	0x3dcccccd
 801778c:	3be56041 	.word	0x3be56041
 8017790:	3e333333 	.word	0x3e333333
 8017794:	42480000 	.word	0x42480000
 8017798:	00000000 	.word	0x00000000
 801779c:	3fb33333 	.word	0x3fb33333
 80177a0:	3ecccccd 	.word	0x3ecccccd
 80177a4:	ed5f 7a05 	vldr	s15, [pc, #-20]	@ 8017794 <iNemoEngine_API_Update+0x21c4>
 80177a8:	eef4 9ae7 	vcmpe.f32	s19, s15
 80177ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177b0:	f2c0 823f 	blt.w	8017c32 <iNemoEngine_API_Update+0x2662>
 80177b4:	2300      	movs	r3, #0
 80177b6:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 80177ba:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 80177be:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 80177c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80177c4:	2b01      	cmp	r3, #1
 80177c6:	f000 8245 	beq.w	8017c54 <iNemoEngine_API_Update+0x2684>
 80177ca:	edd7 3a75 	vldr	s7, [r7, #468]	@ 0x1d4
 80177ce:	ed97 4a7f 	vldr	s8, [r7, #508]	@ 0x1fc
 80177d2:	eddd 2a69 	vldr	s5, [sp, #420]	@ 0x1a4
 80177d6:	ed9d 3a6a 	vldr	s6, [sp, #424]	@ 0x1a8
 80177da:	edd7 4a89 	vldr	s9, [r7, #548]	@ 0x224
 80177de:	ed97 5a93 	vldr	s10, [r7, #588]	@ 0x24c
 80177e2:	edd7 5a9d 	vldr	s11, [r7, #628]	@ 0x274
 80177e6:	ed97 6aa7 	vldr	s12, [r7, #668]	@ 0x29c
 80177ea:	edd7 6ab1 	vldr	s13, [r7, #708]	@ 0x2c4
 80177ee:	ed97 7abb 	vldr	s14, [r7, #748]	@ 0x2ec
 80177f2:	edd7 7ac5 	vldr	s15, [r7, #788]	@ 0x314
 80177f6:	ed9d 2a6e 	vldr	s4, [sp, #440]	@ 0x1b8
 80177fa:	eddd 0a6b 	vldr	s1, [sp, #428]	@ 0x1ac
 80177fe:	ed9d 1a6c 	vldr	s2, [sp, #432]	@ 0x1b0
 8017802:	eddd 1a6d 	vldr	s3, [sp, #436]	@ 0x1b4
 8017806:	ed9d 0a71 	vldr	s0, [sp, #452]	@ 0x1c4
 801780a:	edcd 8a93 	vstr	s17, [sp, #588]	@ 0x24c
 801780e:	eee2 3aa2 	vfma.f32	s7, s5, s5
 8017812:	ab8d      	add	r3, sp, #564	@ 0x234
 8017814:	aa99      	add	r2, sp, #612	@ 0x264
 8017816:	eea3 4a03 	vfma.f32	s8, s6, s6
 801781a:	a944      	add	r1, sp, #272	@ 0x110
 801781c:	f507 70d6 	add.w	r0, r7, #428	@ 0x1ac
 8017820:	eddd 2a6f 	vldr	s5, [sp, #444]	@ 0x1bc
 8017824:	ed9d 3a70 	vldr	s6, [sp, #448]	@ 0x1c0
 8017828:	edc7 3a75 	vstr	s7, [r7, #468]	@ 0x1d4
 801782c:	eea1 5a01 	vfma.f32	s10, s2, s2
 8017830:	ad7a      	add	r5, sp, #488	@ 0x1e8
 8017832:	eea2 6a02 	vfma.f32	s12, s4, s4
 8017836:	eee2 6aa2 	vfma.f32	s13, s5, s5
 801783a:	eea3 7a03 	vfma.f32	s14, s6, s6
 801783e:	eee0 7a00 	vfma.f32	s15, s0, s0
 8017842:	eee0 4aa0 	vfma.f32	s9, s1, s1
 8017846:	eee1 5aa1 	vfma.f32	s11, s3, s3
 801784a:	ed87 5a93 	vstr	s10, [r7, #588]	@ 0x24c
 801784e:	ed87 4a7f 	vstr	s8, [r7, #508]	@ 0x1fc
 8017852:	edc7 4a89 	vstr	s9, [r7, #548]	@ 0x224
 8017856:	edc7 5a9d 	vstr	s11, [r7, #628]	@ 0x274
 801785a:	ed87 6aa7 	vstr	s12, [r7, #668]	@ 0x29c
 801785e:	edc7 6ab1 	vstr	s13, [r7, #708]	@ 0x2c4
 8017862:	ed87 7abb 	vstr	s14, [r7, #748]	@ 0x2ec
 8017866:	edc7 7ac5 	vstr	s15, [r7, #788]	@ 0x314
 801786a:	9300      	str	r3, [sp, #0]
 801786c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801786e:	edcd 8a94 	vstr	s17, [sp, #592]	@ 0x250
 8017872:	edcd 8a95 	vstr	s17, [sp, #596]	@ 0x254
 8017876:	f7fc f91f 	bl	8013ab8 <kf_update>
 801787a:	ed97 6a6d 	vldr	s12, [r7, #436]	@ 0x1b4
 801787e:	edd7 5a6c 	vldr	s11, [r7, #432]	@ 0x1b0
 8017882:	edd7 6a6e 	vldr	s13, [r7, #440]	@ 0x1b8
 8017886:	edcd 5a5c 	vstr	s11, [sp, #368]	@ 0x170
 801788a:	ee26 7a06 	vmul.f32	s14, s12, s12
 801788e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017892:	eea5 7aa5 	vfma.f32	s14, s11, s11
 8017896:	aa58      	add	r2, sp, #352	@ 0x160
 8017898:	4611      	mov	r1, r2
 801789a:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 801789e:	eea6 7aa6 	vfma.f32	s14, s13, s13
 80178a2:	4650      	mov	r0, sl
 80178a4:	ed8d 6a5d 	vstr	s12, [sp, #372]	@ 0x174
 80178a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80178ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178b0:	bf4c      	ite	mi
 80178b2:	ee37 5ac7 	vsubmi.f32	s10, s15, s14
 80178b6:	ed5f 7a48 	vldrpl	s15, [pc, #-288]	@ 8017798 <iNemoEngine_API_Update+0x21c8>
 80178ba:	edcd 6a5e 	vstr	s13, [sp, #376]	@ 0x178
 80178be:	bf48      	it	mi
 80178c0:	eef1 7ac5 	vsqrtmi.f32	s15, s10
 80178c4:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80178c8:	edcd 7a5f 	vstr	s15, [sp, #380]	@ 0x17c
 80178cc:	eeb1 5ac7 	vsqrt.f32	s10, s14
 80178d0:	ee84 7a85 	vdiv.f32	s14, s9, s10
 80178d4:	ee67 5a25 	vmul.f32	s11, s14, s11
 80178d8:	ee27 6a06 	vmul.f32	s12, s14, s12
 80178dc:	ee67 6a26 	vmul.f32	s13, s14, s13
 80178e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80178e4:	edca 5a00 	vstr	s11, [sl]
 80178e8:	ed8a 6a01 	vstr	s12, [sl, #4]
 80178ec:	edca 6a02 	vstr	s13, [sl, #8]
 80178f0:	edca 7a03 	vstr	s15, [sl, #12]
 80178f4:	f7fb ff20 	bl	8013738 <qmult>
 80178f8:	edd2 6a01 	vldr	s13, [r2, #4]
 80178fc:	ed92 6a00 	vldr	s12, [r2]
 8017900:	ed92 7a02 	vldr	s14, [r2, #8]
 8017904:	edd2 5a03 	vldr	s11, [r2, #12]
 8017908:	9e31      	ldr	r6, [sp, #196]	@ 0xc4
 801790a:	ee66 7aa6 	vmul.f32	s15, s13, s13
 801790e:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8017912:	eee6 7a06 	vfma.f32	s15, s12, s12
 8017916:	f50d 7ce4 	add.w	ip, sp, #456	@ 0x1c8
 801791a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801791e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8017922:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8017926:	eec4 7a85 	vdiv.f32	s15, s9, s10
 801792a:	ee27 6a86 	vmul.f32	s12, s15, s12
 801792e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017932:	ee27 7a87 	vmul.f32	s14, s15, s14
 8017936:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801793a:	ed8d 6a54 	vstr	s12, [sp, #336]	@ 0x150
 801793e:	edcd 6a55 	vstr	s13, [sp, #340]	@ 0x154
 8017942:	ed8d 7a56 	vstr	s14, [sp, #344]	@ 0x158
 8017946:	edcd 7a57 	vstr	s15, [sp, #348]	@ 0x15c
 801794a:	4664      	mov	r4, ip
 801794c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801794e:	42ac      	cmp	r4, r5
 8017950:	f106 0610 	add.w	r6, r6, #16
 8017954:	f10c 0c10 	add.w	ip, ip, #16
 8017958:	f846 0c10 	str.w	r0, [r6, #-16]
 801795c:	f846 1c0c 	str.w	r1, [r6, #-12]
 8017960:	f846 2c08 	str.w	r2, [r6, #-8]
 8017964:	f846 3c04 	str.w	r3, [r6, #-4]
 8017968:	d1ef      	bne.n	801794a <iNemoEngine_API_Update+0x237a>
 801796a:	f8dc 0000 	ldr.w	r0, [ip]
 801796e:	6030      	str	r0, [r6, #0]
 8017970:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8017972:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8017976:	6013      	str	r3, [r2, #0]
 8017978:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 801797a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801797e:	6013      	str	r3, [r2, #0]
 8017980:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8017982:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8017986:	6013      	str	r3, [r2, #0]
 8017988:	ac54      	add	r4, sp, #336	@ 0x150
 801798a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801798c:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 801798e:	60e3      	str	r3, [r4, #12]
 8017990:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017992:	6020      	str	r0, [r4, #0]
 8017994:	6061      	str	r1, [r4, #4]
 8017996:	60a2      	str	r2, [r4, #8]
 8017998:	edd7 8a75 	vldr	s17, [r7, #468]	@ 0x1d4
 801799c:	ed83 6a00 	vstr	s12, [r3]
 80179a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80179a2:	edc3 6a00 	vstr	s13, [r3]
 80179a6:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80179a8:	ed83 7a00 	vstr	s14, [r3]
 80179ac:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80179ae:	edc3 7a00 	vstr	s15, [r3]
 80179b2:	f7fd bec1 	b.w	8015738 <iNemoEngine_API_Update+0x168>
 80179b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	f43f ab95 	beq.w	80170e8 <iNemoEngine_API_Update+0x1b18>
 80179be:	ed5f 7a89 	vldr	s15, [pc, #-548]	@ 801779c <iNemoEngine_API_Update+0x21cc>
 80179c2:	2301      	movs	r3, #1
 80179c4:	eeb4 eae7 	vcmpe.f32	s28, s15
 80179c8:	f88d 3112 	strb.w	r3, [sp, #274]	@ 0x112
 80179cc:	f88d 3119 	strb.w	r3, [sp, #281]	@ 0x119
 80179d0:	f88d 311b 	strb.w	r3, [sp, #283]	@ 0x11b
 80179d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179d8:	f240 1301 	movw	r3, #257	@ 0x101
 80179dc:	f8ad 3110 	strh.w	r3, [sp, #272]	@ 0x110
 80179e0:	f73f ab82 	bgt.w	80170e8 <iNemoEngine_API_Update+0x1b18>
 80179e4:	ed5f 7a92 	vldr	s15, [pc, #-584]	@ 80177a0 <iNemoEngine_API_Update+0x21d0>
 80179e8:	eeb4 eae7 	vcmpe.f32	s28, s15
 80179ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179f0:	f53f ab7a 	bmi.w	80170e8 <iNemoEngine_API_Update+0x1b18>
 80179f4:	eddd 7a2e 	vldr	s15, [sp, #184]	@ 0xb8
 80179f8:	eef4 4ae7 	vcmpe.f32	s9, s15
 80179fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a00:	bfb8      	it	lt
 8017a02:	eef0 4a67 	vmovlt.f32	s9, s15
 8017a06:	edcd 4a8d 	vstr	s9, [sp, #564]	@ 0x234
 8017a0a:	edcd 4a8e 	vstr	s9, [sp, #568]	@ 0x238
 8017a0e:	edcd 4a8f 	vstr	s9, [sp, #572]	@ 0x23c
 8017a12:	f7ff bb72 	b.w	80170fa <iNemoEngine_API_Update+0x1b2a>
 8017a16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017a18:	2300      	movs	r3, #0
 8017a1a:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 8017a1e:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 8017a22:	2a00      	cmp	r2, #0
 8017a24:	f43f ae9e 	beq.w	8017764 <iNemoEngine_API_Update+0x2194>
 8017a28:	f002 02fd 	and.w	r2, r2, #253	@ 0xfd
 8017a2c:	2a01      	cmp	r2, #1
 8017a2e:	f001 8240 	beq.w	8018eb2 <iNemoEngine_API_Update+0x38e2>
 8017a32:	9303      	str	r3, [sp, #12]
 8017a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a36:	2b02      	cmp	r3, #2
 8017a38:	f041 823a 	bne.w	8018eb0 <iNemoEngine_API_Update+0x38e0>
 8017a3c:	eddd 7a14 	vldr	s15, [sp, #80]	@ 0x50
 8017a40:	ed9d 6a11 	vldr	s12, [sp, #68]	@ 0x44
 8017a44:	eddd 5a12 	vldr	s11, [sp, #72]	@ 0x48
 8017a48:	f897 21a4 	ldrb.w	r2, [r7, #420]	@ 0x1a4
 8017a4c:	ee87 6a86 	vdiv.f32	s12, s15, s12
 8017a50:	f240 1301 	movw	r3, #257	@ 0x101
 8017a54:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 8017a58:	2301      	movs	r3, #1
 8017a5a:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 8017a5e:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 8017a62:	ed8d 6a47 	vstr	s12, [sp, #284]	@ 0x11c
 8017a66:	ee87 5aa5 	vdiv.f32	s10, s15, s11
 8017a6a:	eddd 5a13 	vldr	s11, [sp, #76]	@ 0x4c
 8017a6e:	eddd 7a16 	vldr	s15, [sp, #88]	@ 0x58
 8017a72:	ed8d 5a48 	vstr	s10, [sp, #288]	@ 0x120
 8017a76:	eec7 7aa5 	vdiv.f32	s15, s15, s11
 8017a7a:	edd7 5a64 	vldr	s11, [r7, #400]	@ 0x190
 8017a7e:	edcd 7a49 	vstr	s15, [sp, #292]	@ 0x124
 8017a82:	eef4 4a00 	vmov.f32	s9, #64	@ 0x3e000000  0.125
 8017a86:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8017a8a:	eef4 5ac8 	vcmpe.f32	s11, s16
 8017a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a92:	f281 8251 	bge.w	8018f38 <iNemoEngine_API_Update+0x3968>
 8017a96:	eddd 5a11 	vldr	s11, [sp, #68]	@ 0x44
 8017a9a:	eddd 4a14 	vldr	s9, [sp, #80]	@ 0x50
 8017a9e:	eef4 5ae4 	vcmpe.f32	s11, s9
 8017aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aa6:	f341 863f 	ble.w	8019728 <iNemoEngine_API_Update+0x4158>
 8017aaa:	eddd 5a12 	vldr	s11, [sp, #72]	@ 0x48
 8017aae:	eddd 4a0c 	vldr	s9, [sp, #48]	@ 0x30
 8017ab2:	eef4 5ae4 	vcmpe.f32	s11, s9
 8017ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aba:	f341 8635 	ble.w	8019728 <iNemoEngine_API_Update+0x4158>
 8017abe:	eddd 5a13 	vldr	s11, [sp, #76]	@ 0x4c
 8017ac2:	eddd 4a16 	vldr	s9, [sp, #88]	@ 0x58
 8017ac6:	eef4 5ae4 	vcmpe.f32	s11, s9
 8017aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ace:	f341 862b 	ble.w	8019728 <iNemoEngine_API_Update+0x4158>
 8017ad2:	eef5 5a00 	vmov.f32	s11, #80	@ 0x3e800000  0.250
 8017ad6:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8017ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ade:	f141 8623 	bpl.w	8019728 <iNemoEngine_API_Update+0x4158>
 8017ae2:	ee36 6a05 	vadd.f32	s12, s12, s10
 8017ae6:	eef7 5a08 	vmov.f32	s11, #120	@ 0x3fc00000  1.5
 8017aea:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017aee:	eef4 7ae5 	vcmpe.f32	s15, s11
 8017af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017af6:	f141 8617 	bpl.w	8019728 <iNemoEngine_API_Update+0x4158>
 8017afa:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017afe:	2300      	movs	r3, #0
 8017b00:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8017b04:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6
 8017b08:	2a00      	cmp	r2, #0
 8017b0a:	f041 8237 	bne.w	8018f7c <iNemoEngine_API_Update+0x39ac>
 8017b0e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017b10:	a84a      	add	r0, sp, #296	@ 0x128
 8017b12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017b16:	460b      	mov	r3, r1
 8017b18:	edd1 7a00 	vldr	s15, [r1]
 8017b1c:	3201      	adds	r2, #1
 8017b1e:	330c      	adds	r3, #12
 8017b20:	3104      	adds	r1, #4
 8017b22:	461d      	mov	r5, r3
 8017b24:	edd5 6a00 	vldr	s13, [r5]
 8017b28:	330c      	adds	r3, #12
 8017b2a:	429c      	cmp	r4, r3
 8017b2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017b30:	d1f7      	bne.n	8017b22 <iNemoEngine_API_Update+0x2552>
 8017b32:	2a02      	cmp	r2, #2
 8017b34:	ece0 7a01 	vstmia	r0!, {s15}
 8017b38:	f104 0404 	add.w	r4, r4, #4
 8017b3c:	d1eb      	bne.n	8017b16 <iNemoEngine_API_Update+0x2546>
 8017b3e:	eddf 7ae8 	vldr	s15, [pc, #928]	@ 8017ee0 <iNemoEngine_API_Update+0x2910>
 8017b42:	ed9d 5a4a 	vldr	s10, [sp, #296]	@ 0x128
 8017b46:	eddd 5a4b 	vldr	s11, [sp, #300]	@ 0x12c
 8017b4a:	ed9d 6a4c 	vldr	s12, [sp, #304]	@ 0x130
 8017b4e:	9c33      	ldr	r4, [sp, #204]	@ 0xcc
 8017b50:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8017b54:	ee25 5a27 	vmul.f32	s10, s10, s15
 8017b58:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8017b5c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8017b60:	f507 71b2 	add.w	r1, r7, #356	@ 0x164
 8017b64:	4602      	mov	r2, r0
 8017b66:	edd2 7a7c 	vldr	s15, [r2, #496]	@ 0x1f0
 8017b6a:	f5a2 73ae 	sub.w	r3, r2, #348	@ 0x15c
 8017b6e:	edd3 6ad6 	vldr	s13, [r3, #856]	@ 0x358
 8017b72:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b7a:	f103 030c 	add.w	r3, r3, #12
 8017b7e:	bf88      	it	hi
 8017b80:	eef0 7a66 	vmovhi.f32	s15, s13
 8017b84:	4293      	cmp	r3, r2
 8017b86:	d1f2      	bne.n	8017b6e <iNemoEngine_API_Update+0x259e>
 8017b88:	1d1a      	adds	r2, r3, #4
 8017b8a:	4291      	cmp	r1, r2
 8017b8c:	ece4 7a01 	vstmia	r4!, {s15}
 8017b90:	d1e9      	bne.n	8017b66 <iNemoEngine_API_Update+0x2596>
 8017b92:	eddd 4a47 	vldr	s9, [sp, #284]	@ 0x11c
 8017b96:	eddd 7a48 	vldr	s15, [sp, #288]	@ 0x120
 8017b9a:	eddd 6a49 	vldr	s13, [sp, #292]	@ 0x124
 8017b9e:	787b      	ldrb	r3, [r7, #1]
 8017ba0:	eedd 4a85 	vfnms.f32	s9, s27, s10
 8017ba4:	eedd 7aa5 	vfnms.f32	s15, s27, s11
 8017ba8:	eedd 6a86 	vfnms.f32	s13, s27, s12
 8017bac:	eeb0 5a67 	vmov.f32	s10, s15
 8017bb0:	edcd 4a4a 	vstr	s9, [sp, #296]	@ 0x128
 8017bb4:	edcd 7a4b 	vstr	s15, [sp, #300]	@ 0x12c
 8017bb8:	edcd 6a4c 	vstr	s13, [sp, #304]	@ 0x130
 8017bbc:	b13b      	cbz	r3, 8017bce <iNemoEngine_API_Update+0x25fe>
 8017bbe:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8017bc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bca:	f101 8627 	bmi.w	801981c <iNemoEngine_API_Update+0x424c>
 8017bce:	f897 21a1 	ldrb.w	r2, [r7, #417]	@ 0x1a1
 8017bd2:	2a1e      	cmp	r2, #30
 8017bd4:	f001 8753 	beq.w	8019a7e <iNemoEngine_API_Update+0x44ae>
 8017bd8:	1c53      	adds	r3, r2, #1
 8017bda:	2aff      	cmp	r2, #255	@ 0xff
 8017bdc:	bf14      	ite	ne
 8017bde:	b2db      	uxtbne	r3, r3
 8017be0:	23ff      	moveq	r3, #255	@ 0xff
 8017be2:	f887 31a1 	strb.w	r3, [r7, #417]	@ 0x1a1
 8017be6:	9b03      	ldr	r3, [sp, #12]
 8017be8:	9309      	str	r3, [sp, #36]	@ 0x24
 8017bea:	2300      	movs	r3, #0
 8017bec:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 8017bf0:	e5d8      	b.n	80177a4 <iNemoEngine_API_Update+0x21d4>
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	f340 82d0 	ble.w	8018198 <iNemoEngine_API_Update+0x2bc8>
 8017bf8:	3b01      	subs	r3, #1
 8017bfa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	f8ad 3110 	strh.w	r3, [sp, #272]	@ 0x110
 8017c02:	f88d 3112 	strb.w	r3, [sp, #274]	@ 0x112
 8017c06:	f88d 3119 	strb.w	r3, [sp, #281]	@ 0x119
 8017c0a:	f88d 311b 	strb.w	r3, [sp, #283]	@ 0x11b
 8017c0e:	f7ff bab8 	b.w	8017182 <iNemoEngine_API_Update+0x1bb2>
 8017c12:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017c14:	f362 0307 	bfi	r3, r2, #0, #8
 8017c18:	f362 230f 	bfi	r3, r2, #8, #8
 8017c1c:	7bba      	ldrb	r2, [r7, #14]
 8017c1e:	f88d 2115 	strb.w	r2, [sp, #277]	@ 0x115
 8017c22:	f362 4317 	bfi	r3, r2, #16, #8
 8017c26:	f362 631f 	bfi	r3, r2, #24, #8
 8017c2a:	f8cd 3111 	str.w	r3, [sp, #273]	@ 0x111
 8017c2e:	f7ff ba3a 	b.w	80170a6 <iNemoEngine_API_Update+0x1ad6>
 8017c32:	f897 31a2 	ldrb.w	r3, [r7, #418]	@ 0x1a2
 8017c36:	2b31      	cmp	r3, #49	@ 0x31
 8017c38:	f63f adc3 	bhi.w	80177c2 <iNemoEngine_API_Update+0x21f2>
 8017c3c:	3301      	adds	r3, #1
 8017c3e:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 8017c42:	2300      	movs	r3, #0
 8017c44:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 8017c48:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 8017c4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c4e:	2b01      	cmp	r3, #1
 8017c50:	f47f adbb 	bne.w	80177ca <iNemoEngine_API_Update+0x21fa>
 8017c54:	ed9d 5a90 	vldr	s10, [sp, #576]	@ 0x240
 8017c58:	eddd 6a69 	vldr	s13, [sp, #420]	@ 0x1a4
 8017c5c:	eddd 5a91 	vldr	s11, [sp, #580]	@ 0x244
 8017c60:	ed9d 7a6a 	vldr	s14, [sp, #424]	@ 0x1a8
 8017c64:	ed9d 6a92 	vldr	s12, [sp, #584]	@ 0x248
 8017c68:	eddd 7a6b 	vldr	s15, [sp, #428]	@ 0x1ac
 8017c6c:	eef6 4a08 	vmov.f32	s9, #104	@ 0x3f400000  0.750
 8017c70:	ee25 5a24 	vmul.f32	s10, s10, s9
 8017c74:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8017c78:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8017c7c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8017c80:	ee26 6a24 	vmul.f32	s12, s12, s9
 8017c84:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017c88:	ed8d 5a90 	vstr	s10, [sp, #576]	@ 0x240
 8017c8c:	edcd 6a69 	vstr	s13, [sp, #420]	@ 0x1a4
 8017c90:	edcd 5a91 	vstr	s11, [sp, #580]	@ 0x244
 8017c94:	ed8d 7a6a 	vstr	s14, [sp, #424]	@ 0x1a8
 8017c98:	ed8d 6a92 	vstr	s12, [sp, #584]	@ 0x248
 8017c9c:	edcd 7a6b 	vstr	s15, [sp, #428]	@ 0x1ac
 8017ca0:	e593      	b.n	80177ca <iNemoEngine_API_Update+0x21fa>
 8017ca2:	eef1 6a66 	vneg.f32	s13, s13
 8017ca6:	f7fe bc48 	b.w	801653a <iNemoEngine_API_Update+0xf6a>
 8017caa:	eeb1 5a45 	vneg.f32	s10, s10
 8017cae:	f7fe bc20 	b.w	80164f2 <iNemoEngine_API_Update+0xf22>
 8017cb2:	f9b7 3974 	ldrsh.w	r3, [r7, #2420]	@ 0x974
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	f341 8083 	ble.w	8018dc2 <iNemoEngine_API_Update+0x37f2>
 8017cbc:	3b01      	subs	r3, #1
 8017cbe:	f8a7 3974 	strh.w	r3, [r7, #2420]	@ 0x974
 8017cc2:	f7fd bcac 	b.w	801561e <iNemoEngine_API_Update+0x4e>
 8017cc6:	ee6a 7a0a 	vmul.f32	s15, s20, s20
 8017cca:	ee6a 9a09 	vmul.f32	s19, s20, s18
 8017cce:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8017cd2:	eee8 9a28 	vfma.f32	s19, s16, s17
 8017cd6:	eee8 7a48 	vfms.f32	s15, s16, s16
 8017cda:	eee9 7a49 	vfms.f32	s15, s18, s18
 8017cde:	ee17 0a90 	vmov	r0, s15
 8017ce2:	f7e8 fc59 	bl	8000598 <__aeabi_f2d>
 8017ce6:	ee79 7aa9 	vadd.f32	s15, s19, s19
 8017cea:	4602      	mov	r2, r0
 8017cec:	460b      	mov	r3, r1
 8017cee:	ee17 0a90 	vmov	r0, s15
 8017cf2:	ec43 2b18 	vmov	d8, r2, r3
 8017cf6:	f7e8 fc4f 	bl	8000598 <__aeabi_f2d>
 8017cfa:	eeb0 1a48 	vmov.f32	s2, s16
 8017cfe:	eef0 1a68 	vmov.f32	s3, s17
 8017d02:	ec41 0b10 	vmov	d0, r0, r1
 8017d06:	f004 ff01 	bl	801cb0c <atan2>
 8017d0a:	a373      	add	r3, pc, #460	@ (adr r3, 8017ed8 <iNemoEngine_API_Update+0x2908>)
 8017d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d10:	ec51 0b10 	vmov	r0, r1, d0
 8017d14:	f7e8 fc98 	bl	8000648 <__aeabi_dmul>
 8017d18:	4b72      	ldr	r3, [pc, #456]	@ (8017ee4 <iNemoEngine_API_Update+0x2914>)
 8017d1a:	2200      	movs	r2, #0
 8017d1c:	f7e8 fadc 	bl	80002d8 <__aeabi_dsub>
 8017d20:	f7e8 ff6a 	bl	8000bf8 <__aeabi_d2f>
 8017d24:	ee09 0a90 	vmov	s19, r0
 8017d28:	f7fd bd9b 	b.w	8015862 <iNemoEngine_API_Update+0x292>
 8017d2c:	ee6a 7a0a 	vmul.f32	s15, s20, s20
 8017d30:	ee6a 9a09 	vmul.f32	s19, s20, s18
 8017d34:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8017d38:	eee8 9a28 	vfma.f32	s19, s16, s17
 8017d3c:	eee8 7a48 	vfms.f32	s15, s16, s16
 8017d40:	eee9 7a49 	vfms.f32	s15, s18, s18
 8017d44:	ee17 0a90 	vmov	r0, s15
 8017d48:	f7e8 fc26 	bl	8000598 <__aeabi_f2d>
 8017d4c:	ee79 7aa9 	vadd.f32	s15, s19, s19
 8017d50:	4602      	mov	r2, r0
 8017d52:	460b      	mov	r3, r1
 8017d54:	ee17 0a90 	vmov	r0, s15
 8017d58:	ec43 2b18 	vmov	d8, r2, r3
 8017d5c:	f7e8 fc1c 	bl	8000598 <__aeabi_f2d>
 8017d60:	eeb0 1a48 	vmov.f32	s2, s16
 8017d64:	eef0 1a68 	vmov.f32	s3, s17
 8017d68:	ec41 0b10 	vmov	d0, r0, r1
 8017d6c:	f004 fece 	bl	801cb0c <atan2>
 8017d70:	a359      	add	r3, pc, #356	@ (adr r3, 8017ed8 <iNemoEngine_API_Update+0x2908>)
 8017d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d76:	ec51 0b10 	vmov	r0, r1, d0
 8017d7a:	f7e8 fc65 	bl	8000648 <__aeabi_dmul>
 8017d7e:	4b59      	ldr	r3, [pc, #356]	@ (8017ee4 <iNemoEngine_API_Update+0x2914>)
 8017d80:	2200      	movs	r2, #0
 8017d82:	f7e8 faab 	bl	80002dc <__adddf3>
 8017d86:	f7e8 ff37 	bl	8000bf8 <__aeabi_d2f>
 8017d8a:	ee09 0a90 	vmov	s19, r0
 8017d8e:	f7fd bd68 	b.w	8015862 <iNemoEngine_API_Update+0x292>
 8017d92:	3305      	adds	r3, #5
 8017d94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8017d96:	f7ff b9f4 	b.w	8017182 <iNemoEngine_API_Update+0x1bb2>
 8017d9a:	2a00      	cmp	r2, #0
 8017d9c:	f43f a9be 	beq.w	801711c <iNemoEngine_API_Update+0x1b4c>
 8017da0:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 8017da4:	ee76 7a45 	vsub.f32	s15, s12, s10
 8017da8:	eeb0 6ae7 	vabs.f32	s12, s15
 8017dac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017db0:	eeb4 6ac4 	vcmpe.f32	s12, s8
 8017db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017db8:	eef4 7ac5 	vcmpe.f32	s15, s10
 8017dbc:	bfb8      	it	lt
 8017dbe:	eeb0 6a44 	vmovlt.f32	s12, s8
 8017dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dc6:	ed8d 6a97 	vstr	s12, [sp, #604]	@ 0x25c
 8017dca:	f77f a9ae 	ble.w	801712a <iNemoEngine_API_Update+0x1b5a>
 8017dce:	ed9d 6a90 	vldr	s12, [sp, #576]	@ 0x240
 8017dd2:	ee26 5a06 	vmul.f32	s10, s12, s12
 8017dd6:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8017dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dde:	f57f a9a4 	bpl.w	801712a <iNemoEngine_API_Update+0x1b5a>
 8017de2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8017de6:	ed8d 6a90 	vstr	s12, [sp, #576]	@ 0x240
 8017dea:	ed9d 6a91 	vldr	s12, [sp, #580]	@ 0x244
 8017dee:	ee26 6a27 	vmul.f32	s12, s12, s15
 8017df2:	ed8d 6a91 	vstr	s12, [sp, #580]	@ 0x244
 8017df6:	ed9d 6a92 	vldr	s12, [sp, #584]	@ 0x248
 8017dfa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8017dfe:	edcd 7a92 	vstr	s15, [sp, #584]	@ 0x248
 8017e02:	f7ff b992 	b.w	801712a <iNemoEngine_API_Update+0x1b5a>
 8017e06:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8017e0a:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e12:	bfc4      	itt	gt
 8017e14:	f8ad 3113 	strhgt.w	r3, [sp, #275]	@ 0x113
 8017e18:	f88d 3115 	strbgt.w	r3, [sp, #277]	@ 0x115
 8017e1c:	f7ff b943 	b.w	80170a6 <iNemoEngine_API_Update+0x1ad6>
 8017e20:	eddf 9a31 	vldr	s19, [pc, #196]	@ 8017ee8 <iNemoEngine_API_Update+0x2918>
 8017e24:	eddf 3a31 	vldr	s7, [pc, #196]	@ 8017eec <iNemoEngine_API_Update+0x291c>
 8017e28:	eddf 4a31 	vldr	s9, [pc, #196]	@ 8017ef0 <iNemoEngine_API_Update+0x2920>
 8017e2c:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8017ef4 <iNemoEngine_API_Update+0x2924>
 8017e30:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 8017ef8 <iNemoEngine_API_Update+0x2928>
 8017e34:	ee68 8aa9 	vmul.f32	s17, s17, s19
 8017e38:	f7ff b8c4 	b.w	8016fc4 <iNemoEngine_API_Update+0x19f4>
 8017e3c:	edd7 7a73 	vldr	s15, [r7, #460]	@ 0x1cc
 8017e40:	2600      	movs	r6, #0
 8017e42:	f7fe bfc0 	b.w	8016dc6 <iNemoEngine_API_Update+0x17f6>
 8017e46:	ee07 3a90 	vmov	s15, r3
 8017e4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017e4e:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8017efc <iNemoEngine_API_Update+0x292c>
 8017e52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017e56:	f7fd bdc6 	b.w	80159e6 <iNemoEngine_API_Update+0x416>
 8017e5a:	eddf 9a29 	vldr	s19, [pc, #164]	@ 8017f00 <iNemoEngine_API_Update+0x2930>
 8017e5e:	4a29      	ldr	r2, [pc, #164]	@ (8017f04 <iNemoEngine_API_Update+0x2934>)
 8017e60:	eef0 8a67 	vmov.f32	s17, s15
 8017e64:	f7fd bda3 	b.w	80159ae <iNemoEngine_API_Update+0x3de>
 8017e68:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017e6c:	ee17 0a90 	vmov	r0, s15
 8017e70:	f7e8 fb92 	bl	8000598 <__aeabi_f2d>
 8017e74:	ec41 0b10 	vmov	d0, r0, r1
 8017e78:	f005 f94e 	bl	801d118 <floor>
 8017e7c:	ec51 0b10 	vmov	r0, r1, d0
 8017e80:	f7e8 feba 	bl	8000bf8 <__aeabi_d2f>
 8017e84:	ee08 0a10 	vmov	s16, r0
 8017e88:	f7fe b891 	b.w	8015fae <iNemoEngine_API_Update+0x9de>
 8017e8c:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 8017e90:	ee17 0a90 	vmov	r0, s15
 8017e94:	f7e8 fb80 	bl	8000598 <__aeabi_f2d>
 8017e98:	ec41 0b10 	vmov	d0, r0, r1
 8017e9c:	f005 f93c 	bl	801d118 <floor>
 8017ea0:	ec51 0b10 	vmov	r0, r1, d0
 8017ea4:	f7e8 fea8 	bl	8000bf8 <__aeabi_d2f>
 8017ea8:	ee0e 0a90 	vmov	s29, r0
 8017eac:	f7fe b816 	b.w	8015edc <iNemoEngine_API_Update+0x90c>
 8017eb0:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017eb4:	ee17 0a90 	vmov	r0, s15
 8017eb8:	f7e8 fb6e 	bl	8000598 <__aeabi_f2d>
 8017ebc:	ec41 0b10 	vmov	d0, r0, r1
 8017ec0:	f005 f92a 	bl	801d118 <floor>
 8017ec4:	ec51 0b10 	vmov	r0, r1, d0
 8017ec8:	f7e8 fe96 	bl	8000bf8 <__aeabi_d2f>
 8017ecc:	ee08 0a10 	vmov	s16, r0
 8017ed0:	f7fd bfd9 	b.w	8015e86 <iNemoEngine_API_Update+0x8b6>
 8017ed4:	f3af 8000 	nop.w
 8017ed8:	20000000 	.word	0x20000000
 8017edc:	404ca5dc 	.word	0x404ca5dc
 8017ee0:	3d088889 	.word	0x3d088889
 8017ee4:	40568000 	.word	0x40568000
 8017ee8:	43168000 	.word	0x43168000
 8017eec:	391d4951 	.word	0x391d4951
 8017ef0:	383cbe62 	.word	0x383cbe62
 8017ef4:	3c75c28f 	.word	0x3c75c28f
 8017ef8:	469c3e00 	.word	0x469c3e00
 8017efc:	3d4ccccd 	.word	0x3d4ccccd
 8017f00:	3dcccccd 	.word	0x3dcccccd
 8017f04:	3a83126f 	.word	0x3a83126f
 8017f08:	ee79 7a27 	vadd.f32	s15, s18, s15
 8017f0c:	ee17 0a90 	vmov	r0, s15
 8017f10:	f7e8 fb42 	bl	8000598 <__aeabi_f2d>
 8017f14:	ec41 0b10 	vmov	d0, r0, r1
 8017f18:	f005 f8fe 	bl	801d118 <floor>
 8017f1c:	ec51 0b10 	vmov	r0, r1, d0
 8017f20:	f7e8 fe6a 	bl	8000bf8 <__aeabi_d2f>
 8017f24:	ee09 0a10 	vmov	s18, r0
 8017f28:	f7fd bf82 	b.w	8015e30 <iNemoEngine_API_Update+0x860>
 8017f2c:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8017f30:	eeb0 3a08 	vmov.f32	s6, #8	@ 0x40400000  3.0
 8017f34:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8017f38:	eee7 3a83 	vfma.f32	s7, s15, s6
 8017f3c:	f7fe bf1a 	b.w	8016d74 <iNemoEngine_API_Update+0x17a4>
 8017f40:	ed97 5a48 	vldr	s10, [r7, #288]	@ 0x120
 8017f44:	eeb4 5ac8 	vcmpe.f32	s10, s16
 8017f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f4c:	f340 8722 	ble.w	8018d94 <iNemoEngine_API_Update+0x37c4>
 8017f50:	edd7 5a32 	vldr	s11, [r7, #200]	@ 0xc8
 8017f54:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8017f58:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8017f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f60:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017f64:	f100 87d2 	bmi.w	8018f0c <iNemoEngine_API_Update+0x393c>
 8017f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f6c:	f141 833e 	bpl.w	80195ec <iNemoEngine_API_Update+0x401c>
 8017f70:	ed97 3a33 	vldr	s6, [r7, #204]	@ 0xcc
 8017f74:	edd7 3a35 	vldr	s7, [r7, #212]	@ 0xd4
 8017f78:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8017f7c:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8017f80:	ee78 5a65 	vsub.f32	s11, s16, s11
 8017f84:	ee63 5aa5 	vmul.f32	s11, s7, s11
 8017f88:	ee85 9aa7 	vdiv.f32	s18, s11, s15
 8017f8c:	ee39 9a03 	vadd.f32	s18, s18, s6
 8017f90:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 8017f94:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f9c:	f2c1 833e 	blt.w	801961c <iNemoEngine_API_Update+0x404c>
 8017fa0:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8017fa4:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8017fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fac:	f141 84b3 	bpl.w	8019916 <iNemoEngine_API_Update+0x4346>
 8017fb0:	ed97 3a37 	vldr	s6, [r7, #220]	@ 0xdc
 8017fb4:	edd7 3a39 	vldr	s7, [r7, #228]	@ 0xe4
 8017fb8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8017fbc:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8017fc0:	ee78 7a67 	vsub.f32	s15, s16, s15
 8017fc4:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8017fc8:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 8017fcc:	ee39 9a03 	vadd.f32	s18, s18, s6
 8017fd0:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 8017fd4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fdc:	f2c1 833e 	blt.w	801965c <iNemoEngine_API_Update+0x408c>
 8017fe0:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 8017fe4:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8017fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fec:	f141 848c 	bpl.w	8019908 <iNemoEngine_API_Update+0x4338>
 8017ff0:	ed97 3a3b 	vldr	s6, [r7, #236]	@ 0xec
 8017ff4:	edd7 3a3d 	vldr	s7, [r7, #244]	@ 0xf4
 8017ff8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8017ffc:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8018000:	ee78 7a67 	vsub.f32	s15, s16, s15
 8018004:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8018008:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 801800c:	ee39 9a03 	vadd.f32	s18, s18, s6
 8018010:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8018014:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801801c:	f2c1 833e 	blt.w	801969c <iNemoEngine_API_Update+0x40cc>
 8018020:	edd7 5a40 	vldr	s11, [r7, #256]	@ 0x100
 8018024:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8018028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801802c:	f141 8469 	bpl.w	8019902 <iNemoEngine_API_Update+0x4332>
 8018030:	ed97 3a3f 	vldr	s6, [r7, #252]	@ 0xfc
 8018034:	edd7 3a41 	vldr	s7, [r7, #260]	@ 0x104
 8018038:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801803c:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8018040:	ee78 7a67 	vsub.f32	s15, s16, s15
 8018044:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8018048:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 801804c:	ee39 9a03 	vadd.f32	s18, s18, s6
 8018050:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 8018054:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801805c:	f2c1 833e 	blt.w	80196dc <iNemoEngine_API_Update+0x410c>
 8018060:	edd7 5a44 	vldr	s11, [r7, #272]	@ 0x110
 8018064:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8018068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801806c:	f141 84f1 	bpl.w	8019a52 <iNemoEngine_API_Update+0x4482>
 8018070:	ed97 3a43 	vldr	s6, [r7, #268]	@ 0x10c
 8018074:	edd7 3a45 	vldr	s7, [r7, #276]	@ 0x114
 8018078:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801807c:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8018080:	ee78 7a67 	vsub.f32	s15, s16, s15
 8018084:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8018088:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 801808c:	ee39 9a03 	vadd.f32	s18, s18, s6
 8018090:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8018094:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801809c:	f6fe acbf 	blt.w	8016a1e <iNemoEngine_API_Update+0x144e>
 80180a0:	edd7 3a47 	vldr	s7, [r7, #284]	@ 0x11c
 80180a4:	edd7 5a49 	vldr	s11, [r7, #292]	@ 0x124
 80180a8:	ee35 5a67 	vsub.f32	s10, s10, s15
 80180ac:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80180b0:	ee78 7a67 	vsub.f32	s15, s16, s15
 80180b4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80180b8:	ee87 9a85 	vdiv.f32	s18, s15, s10
 80180bc:	ee39 9a23 	vadd.f32	s18, s18, s7
 80180c0:	f7fe bcad 	b.w	8016a1e <iNemoEngine_API_Update+0x144e>
 80180c4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80180c8:	ee17 0a90 	vmov	r0, s15
 80180cc:	f7e8 fa64 	bl	8000598 <__aeabi_f2d>
 80180d0:	ec41 0b10 	vmov	d0, r0, r1
 80180d4:	f005 f820 	bl	801d118 <floor>
 80180d8:	ec51 0b10 	vmov	r0, r1, d0
 80180dc:	f7e8 fd8c 	bl	8000bf8 <__aeabi_d2f>
 80180e0:	ee08 0a10 	vmov	s16, r0
 80180e4:	f7fe b878 	b.w	80161d8 <iNemoEngine_API_Update+0xc08>
 80180e8:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 80180ec:	ee17 0a90 	vmov	r0, s15
 80180f0:	f7e8 fa52 	bl	8000598 <__aeabi_f2d>
 80180f4:	ec41 0b10 	vmov	d0, r0, r1
 80180f8:	f005 f80e 	bl	801d118 <floor>
 80180fc:	ec51 0b10 	vmov	r0, r1, d0
 8018100:	f7e8 fd7a 	bl	8000bf8 <__aeabi_d2f>
 8018104:	ee0e 0a90 	vmov	s29, r0
 8018108:	f7fe b83b 	b.w	8016182 <iNemoEngine_API_Update+0xbb2>
 801810c:	ee79 7a27 	vadd.f32	s15, s18, s15
 8018110:	ee17 0a90 	vmov	r0, s15
 8018114:	f7e8 fa40 	bl	8000598 <__aeabi_f2d>
 8018118:	ec41 0b10 	vmov	d0, r0, r1
 801811c:	f004 fffc 	bl	801d118 <floor>
 8018120:	ec51 0b10 	vmov	r0, r1, d0
 8018124:	f7e8 fd68 	bl	8000bf8 <__aeabi_d2f>
 8018128:	ee09 0a10 	vmov	s18, r0
 801812c:	f7fd bf95 	b.w	801605a <iNemoEngine_API_Update+0xa8a>
 8018130:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 8018134:	ee17 0a90 	vmov	r0, s15
 8018138:	f7e8 fa2e 	bl	8000598 <__aeabi_f2d>
 801813c:	ec41 0b10 	vmov	d0, r0, r1
 8018140:	f004 ffea 	bl	801d118 <floor>
 8018144:	ec51 0b10 	vmov	r0, r1, d0
 8018148:	f7e8 fd56 	bl	8000bf8 <__aeabi_d2f>
 801814c:	ee0e 0a90 	vmov	s29, r0
 8018150:	f7fd bf58 	b.w	8016004 <iNemoEngine_API_Update+0xa34>
 8018154:	ee79 7a27 	vadd.f32	s15, s18, s15
 8018158:	ee17 0a90 	vmov	r0, s15
 801815c:	f7e8 fa1c 	bl	8000598 <__aeabi_f2d>
 8018160:	ec41 0b10 	vmov	d0, r0, r1
 8018164:	f004 ffd8 	bl	801d118 <floor>
 8018168:	ec51 0b10 	vmov	r0, r1, d0
 801816c:	f7e8 fd44 	bl	8000bf8 <__aeabi_d2f>
 8018170:	ee09 0a10 	vmov	s18, r0
 8018174:	f7fd bfda 	b.w	801612c <iNemoEngine_API_Update+0xb5c>
 8018178:	eef1 8a04 	vmov.f32	s17, #20	@ 0x40a00000  5.0
 801817c:	edd7 9a05 	vldr	s19, [r7, #20]
 8018180:	4ab1      	ldr	r2, [pc, #708]	@ (8018448 <iNemoEngine_API_Update+0x2e78>)
 8018182:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8018186:	f7fd bc12 	b.w	80159ae <iNemoEngine_API_Update+0x3de>
 801818a:	edd7 9a05 	vldr	s19, [r7, #20]
 801818e:	4aaf      	ldr	r2, [pc, #700]	@ (801844c <iNemoEngine_API_Update+0x2e7c>)
 8018190:	eef0 8a67 	vmov.f32	s17, s15
 8018194:	f7fd bc0b 	b.w	80159ae <iNemoEngine_API_Update+0x3de>
 8018198:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801819a:	2a00      	cmp	r2, #0
 801819c:	dd0c      	ble.n	80181b8 <iNemoEngine_API_Update+0x2be8>
 801819e:	ed9d 6a03 	vldr	s12, [sp, #12]
 80181a2:	eef5 7a08 	vmov.f32	s15, #88	@ 0x3ec00000  0.375
 80181a6:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80181aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181ae:	dd03      	ble.n	80181b8 <iNemoEngine_API_Update+0x2be8>
 80181b0:	3a01      	subs	r2, #1
 80181b2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80181b4:	f7fe bfe5 	b.w	8017182 <iNemoEngine_API_Update+0x1bb2>
 80181b8:	ed9d 6a12 	vldr	s12, [sp, #72]	@ 0x48
 80181bc:	eddd 5a0c 	vldr	s11, [sp, #48]	@ 0x30
 80181c0:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80181c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80181c8:	eef4 5ac6 	vcmpe.f32	s11, s12
 80181cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181d0:	f57e afd7 	bpl.w	8017182 <iNemoEngine_API_Update+0x1bb2>
 80181d4:	ed9d 6a13 	vldr	s12, [sp, #76]	@ 0x4c
 80181d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80181dc:	ed9d 6a16 	vldr	s12, [sp, #88]	@ 0x58
 80181e0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80181e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181e8:	f57e afcb 	bpl.w	8017182 <iNemoEngine_API_Update+0x1bb2>
 80181ec:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
 80181f0:	ed9d 6a14 	vldr	s12, [sp, #80]	@ 0x50
 80181f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80181f8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80181fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018200:	f341 83ac 	ble.w	801995c <iNemoEngine_API_Update+0x438c>
 8018204:	3303      	adds	r3, #3
 8018206:	e4f8      	b.n	8017bfa <iNemoEngine_API_Update+0x262a>
 8018208:	ed9f 6a91 	vldr	s12, [pc, #580]	@ 8018450 <iNemoEngine_API_Update+0x2e80>
 801820c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8018210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018214:	f57e ae8e 	bpl.w	8016f34 <iNemoEngine_API_Update+0x1964>
 8018218:	ed9f 6a8e 	vldr	s12, [pc, #568]	@ 8018454 <iNemoEngine_API_Update+0x2e84>
 801821c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8018220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018224:	f280 80b5 	bge.w	8018392 <iNemoEngine_API_Update+0x2dc2>
 8018228:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801822c:	ed9f 5a8a 	vldr	s10, [pc, #552]	@ 8018458 <iNemoEngine_API_Update+0x2e88>
 8018230:	eef4 7ac5 	vcmpe.f32	s15, s10
 8018234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018238:	f280 80bd 	bge.w	80183b6 <iNemoEngine_API_Update+0x2de6>
 801823c:	ed9f 5a87 	vldr	s10, [pc, #540]	@ 801845c <iNemoEngine_API_Update+0x2e8c>
 8018240:	eef4 7ac5 	vcmpe.f32	s15, s10
 8018244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018248:	f280 80c7 	bge.w	80183da <iNemoEngine_API_Update+0x2e0a>
 801824c:	ed9f 5a84 	vldr	s10, [pc, #528]	@ 8018460 <iNemoEngine_API_Update+0x2e90>
 8018250:	eef4 7ac5 	vcmpe.f32	s15, s10
 8018254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018258:	f280 80d1 	bge.w	80183fe <iNemoEngine_API_Update+0x2e2e>
 801825c:	ed9f 5a81 	vldr	s10, [pc, #516]	@ 8018464 <iNemoEngine_API_Update+0x2e94>
 8018260:	eef4 7ac5 	vcmpe.f32	s15, s10
 8018264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018268:	f280 80db 	bge.w	8018422 <iNemoEngine_API_Update+0x2e52>
 801826c:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8018270:	eef4 7ac5 	vcmpe.f32	s15, s10
 8018274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018278:	db09      	blt.n	801828e <iNemoEngine_API_Update+0x2cbe>
 801827a:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 801827e:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8018282:	eddf 4a79 	vldr	s9, [pc, #484]	@ 8018468 <iNemoEngine_API_Update+0x2e98>
 8018286:	ed9f 6a79 	vldr	s12, [pc, #484]	@ 801846c <iNemoEngine_API_Update+0x2e9c>
 801828a:	eea5 6a24 	vfma.f32	s12, s10, s9
 801828e:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8018292:	ee76 4a24 	vadd.f32	s9, s12, s9
 8018296:	eeb0 4a00 	vmov.f32	s8, #0	@ 0x40000000  2.0
 801829a:	ee84 5a24 	vdiv.f32	s10, s8, s9
 801829e:	eddf 4a6d 	vldr	s9, [pc, #436]	@ 8018454 <iNemoEngine_API_Update+0x2e84>
 80182a2:	ed9f 3a73 	vldr	s6, [pc, #460]	@ 8018470 <iNemoEngine_API_Update+0x2ea0>
 80182a6:	ed9f 4a6a 	vldr	s8, [pc, #424]	@ 8018450 <iNemoEngine_API_Update+0x2e80>
 80182aa:	eeb4 5ae4 	vcmpe.f32	s10, s9
 80182ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182b2:	bfb8      	it	lt
 80182b4:	eeb0 5a64 	vmovlt.f32	s10, s9
 80182b8:	eef4 7ac3 	vcmpe.f32	s15, s6
 80182bc:	eddf 4a6d 	vldr	s9, [pc, #436]	@ 8018474 <iNemoEngine_API_Update+0x2ea4>
 80182c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182c4:	ee65 4a24 	vmul.f32	s9, s10, s9
 80182c8:	ee65 3a04 	vmul.f32	s7, s10, s8
 80182cc:	f141 810f 	bpl.w	80194ee <iNemoEngine_API_Update+0x3f1e>
 80182d0:	eef4 7ac4 	vcmpe.f32	s15, s8
 80182d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182d8:	f2c1 810f 	blt.w	80194fa <iNemoEngine_API_Update+0x3f2a>
 80182dc:	ed9f 4a5d 	vldr	s8, [pc, #372]	@ 8018454 <iNemoEngine_API_Update+0x2e84>
 80182e0:	eef4 7ac4 	vcmpe.f32	s15, s8
 80182e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182e8:	f141 8112 	bpl.w	8019510 <iNemoEngine_API_Update+0x3f40>
 80182ec:	ed9f 4a58 	vldr	s8, [pc, #352]	@ 8018450 <iNemoEngine_API_Update+0x2e80>
 80182f0:	ed9f 3a61 	vldr	s6, [pc, #388]	@ 8018478 <iNemoEngine_API_Update+0x2ea8>
 80182f4:	ee37 4ac4 	vsub.f32	s8, s15, s8
 80182f8:	eef7 9a00 	vmov.f32	s19, #112	@ 0x3f800000  1.0
 80182fc:	eee4 9a03 	vfma.f32	s19, s8, s6
 8018300:	ed9f 4a55 	vldr	s8, [pc, #340]	@ 8018458 <iNemoEngine_API_Update+0x2e88>
 8018304:	eef4 7ac4 	vcmpe.f32	s15, s8
 8018308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801830c:	f2c1 8112 	blt.w	8019534 <iNemoEngine_API_Update+0x3f64>
 8018310:	ed9f 4a52 	vldr	s8, [pc, #328]	@ 801845c <iNemoEngine_API_Update+0x2e8c>
 8018314:	eef4 7ac4 	vcmpe.f32	s15, s8
 8018318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801831c:	f141 8112 	bpl.w	8019544 <iNemoEngine_API_Update+0x3f74>
 8018320:	ed9f 4a4d 	vldr	s8, [pc, #308]	@ 8018458 <iNemoEngine_API_Update+0x2e88>
 8018324:	ed9f 3a55 	vldr	s6, [pc, #340]	@ 801847c <iNemoEngine_API_Update+0x2eac>
 8018328:	eddf 9a55 	vldr	s19, [pc, #340]	@ 8018480 <iNemoEngine_API_Update+0x2eb0>
 801832c:	ee37 4ac4 	vsub.f32	s8, s15, s8
 8018330:	eee4 9a03 	vfma.f32	s19, s8, s6
 8018334:	ed9f 4a4a 	vldr	s8, [pc, #296]	@ 8018460 <iNemoEngine_API_Update+0x2e90>
 8018338:	eef4 7ac4 	vcmpe.f32	s15, s8
 801833c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018340:	f2c1 8112 	blt.w	8019568 <iNemoEngine_API_Update+0x3f98>
 8018344:	ed9f 4a47 	vldr	s8, [pc, #284]	@ 8018464 <iNemoEngine_API_Update+0x2e94>
 8018348:	eef4 7ac4 	vcmpe.f32	s15, s8
 801834c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018350:	f141 8112 	bpl.w	8019578 <iNemoEngine_API_Update+0x3fa8>
 8018354:	ed9f 4a42 	vldr	s8, [pc, #264]	@ 8018460 <iNemoEngine_API_Update+0x2e90>
 8018358:	ed9f 3a4a 	vldr	s6, [pc, #296]	@ 8018484 <iNemoEngine_API_Update+0x2eb4>
 801835c:	ee37 4ac4 	vsub.f32	s8, s15, s8
 8018360:	eef7 9a0c 	vmov.f32	s19, #124	@ 0x3fe00000  1.750
 8018364:	eee4 9a03 	vfma.f32	s19, s8, s6
 8018368:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 801836c:	eef4 7ac4 	vcmpe.f32	s15, s8
 8018370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018374:	db09      	blt.n	801838a <iNemoEngine_API_Update+0x2dba>
 8018376:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 801837a:	ee37 4ac4 	vsub.f32	s8, s15, s8
 801837e:	ed9f 3a42 	vldr	s6, [pc, #264]	@ 8018488 <iNemoEngine_API_Update+0x2eb8>
 8018382:	eddf 9a42 	vldr	s19, [pc, #264]	@ 801848c <iNemoEngine_API_Update+0x2ebc>
 8018386:	eee4 9a03 	vfma.f32	s19, s8, s6
 801838a:	ee68 8aa9 	vmul.f32	s17, s17, s19
 801838e:	f7fe be19 	b.w	8016fc4 <iNemoEngine_API_Update+0x19f4>
 8018392:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 8018458 <iNemoEngine_API_Update+0x2e88>
 8018396:	eef4 7ac6 	vcmpe.f32	s15, s12
 801839a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801839e:	d50a      	bpl.n	80183b6 <iNemoEngine_API_Update+0x2de6>
 80183a0:	ed9f 5a2c 	vldr	s10, [pc, #176]	@ 8018454 <iNemoEngine_API_Update+0x2e84>
 80183a4:	eddf 4a3a 	vldr	s9, [pc, #232]	@ 8018490 <iNemoEngine_API_Update+0x2ec0>
 80183a8:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8018494 <iNemoEngine_API_Update+0x2ec4>
 80183ac:	ee37 5ac5 	vsub.f32	s10, s15, s10
 80183b0:	eea5 6a24 	vfma.f32	s12, s10, s9
 80183b4:	e742      	b.n	801823c <iNemoEngine_API_Update+0x2c6c>
 80183b6:	ed9f 6a29 	vldr	s12, [pc, #164]	@ 801845c <iNemoEngine_API_Update+0x2e8c>
 80183ba:	eef4 7ac6 	vcmpe.f32	s15, s12
 80183be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183c2:	d50a      	bpl.n	80183da <iNemoEngine_API_Update+0x2e0a>
 80183c4:	ed9f 5a24 	vldr	s10, [pc, #144]	@ 8018458 <iNemoEngine_API_Update+0x2e88>
 80183c8:	eddf 4a33 	vldr	s9, [pc, #204]	@ 8018498 <iNemoEngine_API_Update+0x2ec8>
 80183cc:	ee37 5ac5 	vsub.f32	s10, s15, s10
 80183d0:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80183d4:	eea5 6a24 	vfma.f32	s12, s10, s9
 80183d8:	e738      	b.n	801824c <iNemoEngine_API_Update+0x2c7c>
 80183da:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 8018460 <iNemoEngine_API_Update+0x2e90>
 80183de:	eef4 7ac6 	vcmpe.f32	s15, s12
 80183e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183e6:	d50a      	bpl.n	80183fe <iNemoEngine_API_Update+0x2e2e>
 80183e8:	ed9f 5a1c 	vldr	s10, [pc, #112]	@ 801845c <iNemoEngine_API_Update+0x2e8c>
 80183ec:	eddf 4a2b 	vldr	s9, [pc, #172]	@ 801849c <iNemoEngine_API_Update+0x2ecc>
 80183f0:	ee37 5ac5 	vsub.f32	s10, s15, s10
 80183f4:	eeb1 6a04 	vmov.f32	s12, #20	@ 0x40a00000  5.0
 80183f8:	eea5 6a24 	vfma.f32	s12, s10, s9
 80183fc:	e72e      	b.n	801825c <iNemoEngine_API_Update+0x2c8c>
 80183fe:	ed9f 6a19 	vldr	s12, [pc, #100]	@ 8018464 <iNemoEngine_API_Update+0x2e94>
 8018402:	eef4 7ac6 	vcmpe.f32	s15, s12
 8018406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801840a:	d50a      	bpl.n	8018422 <iNemoEngine_API_Update+0x2e52>
 801840c:	ed9f 5a14 	vldr	s10, [pc, #80]	@ 8018460 <iNemoEngine_API_Update+0x2e90>
 8018410:	eddf 4a23 	vldr	s9, [pc, #140]	@ 80184a0 <iNemoEngine_API_Update+0x2ed0>
 8018414:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8018418:	eeb2 6a0a 	vmov.f32	s12, #42	@ 0x41500000  13.0
 801841c:	eea5 6a24 	vfma.f32	s12, s10, s9
 8018420:	e724      	b.n	801826c <iNemoEngine_API_Update+0x2c9c>
 8018422:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8018426:	eef4 7ac6 	vcmpe.f32	s15, s12
 801842a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801842e:	f57f af24 	bpl.w	801827a <iNemoEngine_API_Update+0x2caa>
 8018432:	ed9f 5a0c 	vldr	s10, [pc, #48]	@ 8018464 <iNemoEngine_API_Update+0x2e94>
 8018436:	eddf 4a1b 	vldr	s9, [pc, #108]	@ 80184a4 <iNemoEngine_API_Update+0x2ed4>
 801843a:	ed9f 6a1b 	vldr	s12, [pc, #108]	@ 80184a8 <iNemoEngine_API_Update+0x2ed8>
 801843e:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8018442:	eea5 6a24 	vfma.f32	s12, s10, s9
 8018446:	e722      	b.n	801828e <iNemoEngine_API_Update+0x2cbe>
 8018448:	3727c5ac 	.word	0x3727c5ac
 801844c:	3ac49ba6 	.word	0x3ac49ba6
 8018450:	3c23d70a 	.word	0x3c23d70a
 8018454:	3c75c28f 	.word	0x3c75c28f
 8018458:	3cf5c28f 	.word	0x3cf5c28f
 801845c:	3d4ccccd 	.word	0x3d4ccccd
 8018460:	3dcccccd 	.word	0x3dcccccd
 8018464:	3e4ccccd 	.word	0x3e4ccccd
 8018468:	47179000 	.word	0x47179000
 801846c:	4415c000 	.word	0x4415c000
 8018470:	3ba3d70a 	.word	0x3ba3d70a
 8018474:	3b449ba6 	.word	0x3b449ba6
 8018478:	411ffff6 	.word	0x411ffff6
 801847c:	418c0000 	.word	0x418c0000
 8018480:	3f933333 	.word	0x3f933333
 8018484:	42af0000 	.word	0x42af0000
 8018488:	43480000 	.word	0x43480000
 801848c:	424a0000 	.word	0x424a0000
 8018490:	41d55556 	.word	0x41d55556
 8018494:	3fcccccd 	.word	0x3fcccccd
 8018498:	4315ffff 	.word	0x4315ffff
 801849c:	43200000 	.word	0x43200000
 80184a0:	44848000 	.word	0x44848000
 80184a4:	44c80000 	.word	0x44c80000
 80184a8:	42ee0000 	.word	0x42ee0000
 80184ac:	2000      	movs	r0, #0
 80184ae:	f887 0318 	strb.w	r0, [r7, #792]	@ 0x318
 80184b2:	f207 40b4 	addw	r0, r7, #1204	@ 0x4b4
 80184b6:	49d7      	ldr	r1, [pc, #860]	@ (8018814 <iNemoEngine_API_Update+0x3244>)
 80184b8:	6001      	str	r1, [r0, #0]
 80184ba:	f207 7b94 	addw	fp, r7, #1940	@ 0x794
 80184be:	f207 6124 	addw	r1, r7, #1572	@ 0x624
 80184c2:	4ad5      	ldr	r2, [pc, #852]	@ (8018818 <iNemoEngine_API_Update+0x3248>)
 80184c4:	4bd5      	ldr	r3, [pc, #852]	@ (801881c <iNemoEngine_API_Update+0x324c>)
 80184c6:	600a      	str	r2, [r1, #0]
 80184c8:	f8cb 3000 	str.w	r3, [fp]
 80184cc:	f897 64b1 	ldrb.w	r6, [r7, #1201]	@ 0x4b1
 80184d0:	9005      	str	r0, [sp, #20]
 80184d2:	9106      	str	r1, [sp, #24]
 80184d4:	2e00      	cmp	r6, #0
 80184d6:	f001 82f7 	beq.w	8019ac8 <iNemoEngine_API_Update+0x44f8>
 80184da:	eddf 7ad1 	vldr	s15, [pc, #836]	@ 8018820 <iNemoEngine_API_Update+0x3250>
 80184de:	ee69 da27 	vmul.f32	s27, s18, s15
 80184e2:	eef6 9a00 	vmov.f32	s19, #96	@ 0x3f000000  0.5
 80184e6:	ee28 ea27 	vmul.f32	s28, s16, s15
 80184ea:	ee6e aaa7 	vmul.f32	s21, s29, s15
 80184ee:	ee7d 7ae9 	vsub.f32	s15, s27, s19
 80184f2:	f507 6597 	add.w	r5, r7, #1208	@ 0x4b8
 80184f6:	ee17 0a90 	vmov	r0, s15
 80184fa:	f7e8 f84d 	bl	8000598 <__aeabi_f2d>
 80184fe:	ee7d 7aa9 	vadd.f32	s15, s27, s19
 8018502:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8018506:	ee17 0a90 	vmov	r0, s15
 801850a:	f7e8 f845 	bl	8000598 <__aeabi_f2d>
 801850e:	ee7e 7a69 	vsub.f32	s15, s28, s19
 8018512:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8018516:	ee17 0a90 	vmov	r0, s15
 801851a:	f7e8 f83d 	bl	8000598 <__aeabi_f2d>
 801851e:	ee7e 7a29 	vadd.f32	s15, s28, s19
 8018522:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8018526:	ee17 0a90 	vmov	r0, s15
 801852a:	f7e8 f835 	bl	8000598 <__aeabi_f2d>
 801852e:	ee7a 7ae9 	vsub.f32	s15, s21, s19
 8018532:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8018536:	ee17 0a90 	vmov	r0, s15
 801853a:	f7e8 f82d 	bl	8000598 <__aeabi_f2d>
 801853e:	ee7a 7aa9 	vadd.f32	s15, s21, s19
 8018542:	4602      	mov	r2, r0
 8018544:	460b      	mov	r3, r1
 8018546:	ee17 0a90 	vmov	r0, s15
 801854a:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 801854e:	f7e8 f823 	bl	8000598 <__aeabi_f2d>
 8018552:	230c      	movs	r3, #12
 8018554:	eef0 7aea 	vabs.f32	s15, s21
 8018558:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 801855c:	eddf 9ab1 	vldr	s19, [pc, #708]	@ 8018824 <iNemoEngine_API_Update+0x3254>
 8018560:	edcd 7a03 	vstr	s15, [sp, #12]
 8018564:	fb13 5606 	smlabb	r6, r3, r6, r5
 8018568:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 801856c:	eef0 caed 	vabs.f32	s25, s27
 8018570:	eeb0 bace 	vabs.f32	s22, s28
 8018574:	46aa      	mov	sl, r5
 8018576:	e060      	b.n	801863a <iNemoEngine_API_Update+0x306a>
 8018578:	eddf 7aab 	vldr	s15, [pc, #684]	@ 8018828 <iNemoEngine_API_Update+0x3258>
 801857c:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8018580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018584:	f280 815a 	bge.w	801883c <iNemoEngine_API_Update+0x326c>
 8018588:	eddf 7aa8 	vldr	s15, [pc, #672]	@ 801882c <iNemoEngine_API_Update+0x325c>
 801858c:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8018590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018594:	f300 816a 	bgt.w	801886c <iNemoEngine_API_Update+0x329c>
 8018598:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801859c:	f004 fd40 	bl	801d020 <ceil>
 80185a0:	ec51 0b10 	vmov	r0, r1, d0
 80185a4:	f7e8 fb28 	bl	8000bf8 <__aeabi_d2f>
 80185a8:	4603      	mov	r3, r0
 80185aa:	eeb4 bae9 	vcmpe.f32	s22, s19
 80185ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185b2:	f8ca 3000 	str.w	r3, [sl]
 80185b6:	d54e      	bpl.n	8018656 <iNemoEngine_API_Update+0x3086>
 80185b8:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8018828 <iNemoEngine_API_Update+0x3258>
 80185bc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80185c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185c4:	f280 811b 	bge.w	80187fe <iNemoEngine_API_Update+0x322e>
 80185c8:	eddf 7a98 	vldr	s15, [pc, #608]	@ 801882c <iNemoEngine_API_Update+0x325c>
 80185cc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80185d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185d4:	f300 8148 	bgt.w	8018868 <iNemoEngine_API_Update+0x3298>
 80185d8:	ed9d 0b0e 	vldr	d0, [sp, #56]	@ 0x38
 80185dc:	f004 fd20 	bl	801d020 <ceil>
 80185e0:	ec51 0b10 	vmov	r0, r1, d0
 80185e4:	f7e8 fb08 	bl	8000bf8 <__aeabi_d2f>
 80185e8:	4603      	mov	r3, r0
 80185ea:	eddd 7a03 	vldr	s15, [sp, #12]
 80185ee:	f8ca 3004 	str.w	r3, [sl, #4]
 80185f2:	eef4 7ae9 	vcmpe.f32	s15, s19
 80185f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185fa:	d52f      	bpl.n	801865c <iNemoEngine_API_Update+0x308c>
 80185fc:	eddf 7a8a 	vldr	s15, [pc, #552]	@ 8018828 <iNemoEngine_API_Update+0x3258>
 8018600:	eef4 eae7 	vcmpe.f32	s29, s15
 8018604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018608:	f280 8122 	bge.w	8018850 <iNemoEngine_API_Update+0x3280>
 801860c:	eddf 7a87 	vldr	s15, [pc, #540]	@ 801882c <iNemoEngine_API_Update+0x325c>
 8018610:	eef4 eae7 	vcmpe.f32	s29, s15
 8018614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018618:	f300 8124 	bgt.w	8018864 <iNemoEngine_API_Update+0x3294>
 801861c:	ed9d 0b16 	vldr	d0, [sp, #88]	@ 0x58
 8018620:	f004 fcfe 	bl	801d020 <ceil>
 8018624:	ec51 0b10 	vmov	r0, r1, d0
 8018628:	f7e8 fae6 	bl	8000bf8 <__aeabi_d2f>
 801862c:	4603      	mov	r3, r0
 801862e:	f8ca 3008 	str.w	r3, [sl, #8]
 8018632:	f10a 0a0c 	add.w	sl, sl, #12
 8018636:	45b2      	cmp	sl, r6
 8018638:	d018      	beq.n	801866c <iNemoEngine_API_Update+0x309c>
 801863a:	eef4 cae9 	vcmpe.f32	s25, s19
 801863e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018642:	d499      	bmi.n	8018578 <iNemoEngine_API_Update+0x2fa8>
 8018644:	ee1d 3a90 	vmov	r3, s27
 8018648:	eeb4 bae9 	vcmpe.f32	s22, s19
 801864c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018650:	f8ca 3000 	str.w	r3, [sl]
 8018654:	d4b0      	bmi.n	80185b8 <iNemoEngine_API_Update+0x2fe8>
 8018656:	ee1e 3a10 	vmov	r3, s28
 801865a:	e7c6      	b.n	80185ea <iNemoEngine_API_Update+0x301a>
 801865c:	ee1a 3a90 	vmov	r3, s21
 8018660:	f10a 0a0c 	add.w	sl, sl, #12
 8018664:	f84a 3c04 	str.w	r3, [sl, #-4]
 8018668:	45b2      	cmp	sl, r6
 801866a:	d1e6      	bne.n	801863a <iNemoEngine_API_Update+0x306a>
 801866c:	f897 a621 	ldrb.w	sl, [r7, #1569]	@ 0x621
 8018670:	f507 66c5 	add.w	r6, r7, #1576	@ 0x628
 8018674:	f1ba 0f00 	cmp.w	sl, #0
 8018678:	f000 81ff 	beq.w	8018a7a <iNemoEngine_API_Update+0x34aa>
 801867c:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 8018830 <iNemoEngine_API_Update+0x3260>
 8018680:	ee6c da27 	vmul.f32	s27, s24, s15
 8018684:	eef6 9a00 	vmov.f32	s19, #96	@ 0x3f000000  0.5
 8018688:	ee2d ea27 	vmul.f32	s28, s26, s15
 801868c:	ee6b aaa7 	vmul.f32	s21, s23, s15
 8018690:	ee7d 7ae9 	vsub.f32	s15, s27, s19
 8018694:	f507 66c5 	add.w	r6, r7, #1576	@ 0x628
 8018698:	ee17 0a90 	vmov	r0, s15
 801869c:	f7e7 ff7c 	bl	8000598 <__aeabi_f2d>
 80186a0:	ee7d 7aa9 	vadd.f32	s15, s27, s19
 80186a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80186a8:	ee17 0a90 	vmov	r0, s15
 80186ac:	f7e7 ff74 	bl	8000598 <__aeabi_f2d>
 80186b0:	ee7e 7a69 	vsub.f32	s15, s28, s19
 80186b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80186b8:	ee17 0a90 	vmov	r0, s15
 80186bc:	f7e7 ff6c 	bl	8000598 <__aeabi_f2d>
 80186c0:	ee7e 7a29 	vadd.f32	s15, s28, s19
 80186c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80186c8:	ee17 0a90 	vmov	r0, s15
 80186cc:	f7e7 ff64 	bl	8000598 <__aeabi_f2d>
 80186d0:	ee7a 7ae9 	vsub.f32	s15, s21, s19
 80186d4:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80186d8:	ee17 0a90 	vmov	r0, s15
 80186dc:	f7e7 ff5c 	bl	8000598 <__aeabi_f2d>
 80186e0:	ee7a 7aa9 	vadd.f32	s15, s21, s19
 80186e4:	4602      	mov	r2, r0
 80186e6:	460b      	mov	r3, r1
 80186e8:	ee17 0a90 	vmov	r0, s15
 80186ec:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 80186f0:	f7e7 ff52 	bl	8000598 <__aeabi_f2d>
 80186f4:	230c      	movs	r3, #12
 80186f6:	eef0 7aea 	vabs.f32	s15, s21
 80186fa:	fb13 690a 	smlabb	r9, r3, sl, r6
 80186fe:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 8018702:	eddf 9a48 	vldr	s19, [pc, #288]	@ 8018824 <iNemoEngine_API_Update+0x3254>
 8018706:	edcd 7a03 	vstr	s15, [sp, #12]
 801870a:	eef0 caed 	vabs.f32	s25, s27
 801870e:	eeb0 bace 	vabs.f32	s22, s28
 8018712:	46b2      	mov	sl, r6
 8018714:	e062      	b.n	80187dc <iNemoEngine_API_Update+0x320c>
 8018716:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8018834 <iNemoEngine_API_Update+0x3264>
 801871a:	eeb4 cae7 	vcmpe.f32	s24, s15
 801871e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018722:	f280 82d3 	bge.w	8018ccc <iNemoEngine_API_Update+0x36fc>
 8018726:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8018838 <iNemoEngine_API_Update+0x3268>
 801872a:	eeb4 cae7 	vcmpe.f32	s24, s15
 801872e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018732:	f300 82e5 	bgt.w	8018d00 <iNemoEngine_API_Update+0x3730>
 8018736:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801873a:	f004 fc71 	bl	801d020 <ceil>
 801873e:	ec51 0b10 	vmov	r0, r1, d0
 8018742:	f7e8 fa59 	bl	8000bf8 <__aeabi_d2f>
 8018746:	4603      	mov	r3, r0
 8018748:	eeb4 bae9 	vcmpe.f32	s22, s19
 801874c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018750:	f8ca 3000 	str.w	r3, [sl]
 8018754:	d550      	bpl.n	80187f8 <iNemoEngine_API_Update+0x3228>
 8018756:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8018834 <iNemoEngine_API_Update+0x3264>
 801875a:	eeb4 dae7 	vcmpe.f32	s26, s15
 801875e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018762:	f280 82a9 	bge.w	8018cb8 <iNemoEngine_API_Update+0x36e8>
 8018766:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8018838 <iNemoEngine_API_Update+0x3268>
 801876a:	eeb4 dae7 	vcmpe.f32	s26, s15
 801876e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018772:	f300 82c2 	bgt.w	8018cfa <iNemoEngine_API_Update+0x372a>
 8018776:	ed9d 0b0e 	vldr	d0, [sp, #56]	@ 0x38
 801877a:	f004 fc51 	bl	801d020 <ceil>
 801877e:	ec51 0b10 	vmov	r0, r1, d0
 8018782:	f7e8 fa39 	bl	8000bf8 <__aeabi_d2f>
 8018786:	4603      	mov	r3, r0
 8018788:	eddd 7a03 	vldr	s15, [sp, #12]
 801878c:	f8ca 3004 	str.w	r3, [sl, #4]
 8018790:	eef4 7ae9 	vcmpe.f32	s15, s19
 8018794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018798:	f140 8166 	bpl.w	8018a68 <iNemoEngine_API_Update+0x3498>
 801879c:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8018834 <iNemoEngine_API_Update+0x3264>
 80187a0:	eef4 bae7 	vcmpe.f32	s23, s15
 80187a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187a8:	f280 829a 	bge.w	8018ce0 <iNemoEngine_API_Update+0x3710>
 80187ac:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8018838 <iNemoEngine_API_Update+0x3268>
 80187b0:	eef4 bae7 	vcmpe.f32	s23, s15
 80187b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187b8:	f300 829c 	bgt.w	8018cf4 <iNemoEngine_API_Update+0x3724>
 80187bc:	ed9d 0b16 	vldr	d0, [sp, #88]	@ 0x58
 80187c0:	f004 fc2e 	bl	801d020 <ceil>
 80187c4:	ec51 0b10 	vmov	r0, r1, d0
 80187c8:	f7e8 fa16 	bl	8000bf8 <__aeabi_d2f>
 80187cc:	4603      	mov	r3, r0
 80187ce:	f8ca 3008 	str.w	r3, [sl, #8]
 80187d2:	f10a 0a0c 	add.w	sl, sl, #12
 80187d6:	45ca      	cmp	sl, r9
 80187d8:	f000 814f 	beq.w	8018a7a <iNemoEngine_API_Update+0x34aa>
 80187dc:	eef4 cae9 	vcmpe.f32	s25, s19
 80187e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187e4:	d497      	bmi.n	8018716 <iNemoEngine_API_Update+0x3146>
 80187e6:	ee1d 3a90 	vmov	r3, s27
 80187ea:	eeb4 bae9 	vcmpe.f32	s22, s19
 80187ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187f2:	f8ca 3000 	str.w	r3, [sl]
 80187f6:	d4ae      	bmi.n	8018756 <iNemoEngine_API_Update+0x3186>
 80187f8:	ee1e 3a10 	vmov	r3, s28
 80187fc:	e7c4      	b.n	8018788 <iNemoEngine_API_Update+0x31b8>
 80187fe:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8018802:	f004 fc89 	bl	801d118 <floor>
 8018806:	ec51 0b10 	vmov	r0, r1, d0
 801880a:	f7e8 f9f5 	bl	8000bf8 <__aeabi_d2f>
 801880e:	4603      	mov	r3, r0
 8018810:	e6eb      	b.n	80185ea <iNemoEngine_API_Update+0x301a>
 8018812:	bf00      	nop
 8018814:	3a7001e0 	.word	0x3a7001e0
 8018818:	3a000100 	.word	0x3a000100
 801881c:	3a8c0118 	.word	0x3a8c0118
 8018820:	44888777 	.word	0x44888777
 8018824:	4b000000 	.word	0x4b000000
 8018828:	39f001e1 	.word	0x39f001e1
 801882c:	b9f001e1 	.word	0xb9f001e1
 8018830:	44fffe00 	.word	0x44fffe00
 8018834:	39800100 	.word	0x39800100
 8018838:	b9800100 	.word	0xb9800100
 801883c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8018840:	f004 fc6a 	bl	801d118 <floor>
 8018844:	ec51 0b10 	vmov	r0, r1, d0
 8018848:	f7e8 f9d6 	bl	8000bf8 <__aeabi_d2f>
 801884c:	4603      	mov	r3, r0
 801884e:	e6ac      	b.n	80185aa <iNemoEngine_API_Update+0x2fda>
 8018850:	ed9d 0b18 	vldr	d0, [sp, #96]	@ 0x60
 8018854:	f004 fc60 	bl	801d118 <floor>
 8018858:	ec51 0b10 	vmov	r0, r1, d0
 801885c:	f7e8 f9cc 	bl	8000bf8 <__aeabi_d2f>
 8018860:	4603      	mov	r3, r0
 8018862:	e6e4      	b.n	801862e <iNemoEngine_API_Update+0x305e>
 8018864:	464b      	mov	r3, r9
 8018866:	e6e2      	b.n	801862e <iNemoEngine_API_Update+0x305e>
 8018868:	464b      	mov	r3, r9
 801886a:	e6be      	b.n	80185ea <iNemoEngine_API_Update+0x301a>
 801886c:	464b      	mov	r3, r9
 801886e:	e69c      	b.n	80185aa <iNemoEngine_API_Update+0x2fda>
 8018870:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8018874:	4bb1      	ldr	r3, [pc, #708]	@ (8018b3c <iNemoEngine_API_Update+0x356c>)
 8018876:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 801887a:	2100      	movs	r1, #0
 801887c:	f8c7 51cc 	str.w	r5, [r7, #460]	@ 0x1cc
 8018880:	f8c7 51d0 	str.w	r5, [r7, #464]	@ 0x1d0
 8018884:	f887 11ac 	strb.w	r1, [r7, #428]	@ 0x1ac
 8018888:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 801888c:	f507 70ea 	add.w	r0, r7, #468	@ 0x1d4
 8018890:	f007 f9b9 	bl	801fc06 <memset>
 8018894:	ed97 6a02 	vldr	s12, [r7, #8]
 8018898:	eddf 7aa9 	vldr	s15, [pc, #676]	@ 8018b40 <iNemoEngine_API_Update+0x3570>
 801889c:	eddf 5aa9 	vldr	s11, [pc, #676]	@ 8018b44 <iNemoEngine_API_Update+0x3574>
 80188a0:	ed9f 5aa9 	vldr	s10, [pc, #676]	@ 8018b48 <iNemoEngine_API_Update+0x3578>
 80188a4:	eddf 3aa9 	vldr	s7, [pc, #676]	@ 8018b4c <iNemoEngine_API_Update+0x357c>
 80188a8:	ed9f 4aa9 	vldr	s8, [pc, #676]	@ 8018b50 <iNemoEngine_API_Update+0x3580>
 80188ac:	f8c7 50c4 	str.w	r5, [r7, #196]	@ 0xc4
 80188b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80188b4:	2300      	movs	r3, #0
 80188b6:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
 80188ba:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8018b54 <iNemoEngine_API_Update+0x3584>
 80188be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80188c2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80188c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80188ca:	edc7 7a4e 	vstr	s15, [r7, #312]	@ 0x138
 80188ce:	eddf 7aa2 	vldr	s15, [pc, #648]	@ 8018b58 <iNemoEngine_API_Update+0x3588>
 80188d2:	4ba2      	ldr	r3, [pc, #648]	@ (8018b5c <iNemoEngine_API_Update+0x358c>)
 80188d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80188d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80188dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80188e0:	edc7 7a50 	vstr	s15, [r7, #320]	@ 0x140
 80188e4:	eddf 7a9e 	vldr	s15, [pc, #632]	@ 8018b60 <iNemoEngine_API_Update+0x3590>
 80188e8:	4b9e      	ldr	r3, [pc, #632]	@ (8018b64 <iNemoEngine_API_Update+0x3594>)
 80188ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80188ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80188f2:	4b9d      	ldr	r3, [pc, #628]	@ (8018b68 <iNemoEngine_API_Update+0x3598>)
 80188f4:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0
 80188f8:	eddf 7a9c 	vldr	s15, [pc, #624]	@ 8018b6c <iNemoEngine_API_Update+0x359c>
 80188fc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8018900:	ee66 7a27 	vmul.f32	s15, s12, s15
 8018904:	4b9a      	ldr	r3, [pc, #616]	@ (8018b70 <iNemoEngine_API_Update+0x35a0>)
 8018906:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148
 801890a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 801890e:	eddf 7a99 	vldr	s15, [pc, #612]	@ 8018b74 <iNemoEngine_API_Update+0x35a4>
 8018912:	4b99      	ldr	r3, [pc, #612]	@ (8018b78 <iNemoEngine_API_Update+0x35a8>)
 8018914:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8018918:	4b98      	ldr	r3, [pc, #608]	@ (8018b7c <iNemoEngine_API_Update+0x35ac>)
 801891a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801891e:	ee66 5a25 	vmul.f32	s11, s12, s11
 8018922:	4b97      	ldr	r3, [pc, #604]	@ (8018b80 <iNemoEngine_API_Update+0x35b0>)
 8018924:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8018928:	ee26 5a05 	vmul.f32	s10, s12, s10
 801892c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8018930:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 8018934:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8018938:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 801893c:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 8018940:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8018944:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 8018948:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 801894c:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 8018950:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8018954:	f8c7 512c 	str.w	r5, [r7, #300]	@ 0x12c
 8018958:	f8c7 50cc 	str.w	r5, [r7, #204]	@ 0xcc
 801895c:	f8c7 5134 	str.w	r5, [r7, #308]	@ 0x134
 8018960:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8
 8018964:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8018b84 <iNemoEngine_API_Update+0x35b4>
 8018968:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8018b88 <iNemoEngine_API_Update+0x35b8>
 801896c:	eddf 7a87 	vldr	s15, [pc, #540]	@ 8018b8c <iNemoEngine_API_Update+0x35bc>
 8018970:	eddf 4a87 	vldr	s9, [pc, #540]	@ 8018b90 <iNemoEngine_API_Update+0x35c0>
 8018974:	edc7 5a32 	vstr	s11, [r7, #200]	@ 0xc8
 8018978:	edc7 5a4c 	vstr	s11, [r7, #304]	@ 0x130
 801897c:	ed87 5a36 	vstr	s10, [r7, #216]	@ 0xd8
 8018980:	ed87 5a54 	vstr	s10, [r7, #336]	@ 0x150
 8018984:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8018988:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 801898c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8018990:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 8018994:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 8018998:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801899c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80189a0:	ee66 6a26 	vmul.f32	s13, s12, s13
 80189a4:	ee26 7a07 	vmul.f32	s14, s12, s14
 80189a8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80189ac:	ee66 2a23 	vmul.f32	s5, s12, s7
 80189b0:	ee26 3a02 	vmul.f32	s6, s12, s4
 80189b4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80189b8:	ee66 4a24 	vmul.f32	s9, s12, s9
 80189bc:	4b75      	ldr	r3, [pc, #468]	@ (8018b94 <iNemoEngine_API_Update+0x35c4>)
 80189be:	4a76      	ldr	r2, [pc, #472]	@ (8018b98 <iNemoEngine_API_Update+0x35c8>)
 80189c0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80189c4:	ee66 1a04 	vmul.f32	s3, s12, s8
 80189c8:	4b74      	ldr	r3, [pc, #464]	@ (8018b9c <iNemoEngine_API_Update+0x35cc>)
 80189ca:	f8df e1ec 	ldr.w	lr, [pc, #492]	@ 8018bb8 <iNemoEngine_API_Update+0x35e8>
 80189ce:	f8df c1ec 	ldr.w	ip, [pc, #492]	@ 8018bbc <iNemoEngine_API_Update+0x35ec>
 80189d2:	4e73      	ldr	r6, [pc, #460]	@ (8018ba0 <iNemoEngine_API_Update+0x35d0>)
 80189d4:	4d73      	ldr	r5, [pc, #460]	@ (8018ba4 <iNemoEngine_API_Update+0x35d4>)
 80189d6:	4874      	ldr	r0, [pc, #464]	@ (8018ba8 <iNemoEngine_API_Update+0x35d8>)
 80189d8:	4974      	ldr	r1, [pc, #464]	@ (8018bac <iNemoEngine_API_Update+0x35dc>)
 80189da:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80189de:	edc7 3a3d 	vstr	s7, [r7, #244]	@ 0xf4
 80189e2:	f8c7 e15c 	str.w	lr, [r7, #348]	@ 0x15c
 80189e6:	f8c7 c0fc 	str.w	ip, [r7, #252]	@ 0xfc
 80189ea:	f8c7 6164 	str.w	r6, [r7, #356]	@ 0x164
 80189ee:	f8c7 516c 	str.w	r5, [r7, #364]	@ 0x16c
 80189f2:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
 80189f6:	edc7 1a46 	vstr	s3, [r7, #280]	@ 0x118
 80189fa:	edc7 4a60 	vstr	s9, [r7, #384]	@ 0x180
 80189fe:	f8c7 119c 	str.w	r1, [r7, #412]	@ 0x19c
 8018a02:	ed87 2a66 	vstr	s4, [r7, #408]	@ 0x198
 8018a06:	ed87 4a65 	vstr	s8, [r7, #404]	@ 0x194
 8018a0a:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8018a0e:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8018a12:	edc7 6a3c 	vstr	s13, [r7, #240]	@ 0xf0
 8018a16:	edc7 6a56 	vstr	s13, [r7, #344]	@ 0x158
 8018a1a:	ed87 7a3e 	vstr	s14, [r7, #248]	@ 0xf8
 8018a1e:	ed87 7a58 	vstr	s14, [r7, #352]	@ 0x160
 8018a22:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
 8018a26:	edc7 7a5a 	vstr	s15, [r7, #360]	@ 0x168
 8018a2a:	edc7 2a42 	vstr	s5, [r7, #264]	@ 0x108
 8018a2e:	edc7 2a5c 	vstr	s5, [r7, #368]	@ 0x170
 8018a32:	ed87 3a44 	vstr	s6, [r7, #272]	@ 0x110
 8018a36:	ed87 3a5e 	vstr	s6, [r7, #376]	@ 0x178
 8018a3a:	ed87 6a48 	vstr	s12, [r7, #288]	@ 0x120
 8018a3e:	ed87 6a62 	vstr	s12, [r7, #392]	@ 0x188
 8018a42:	edc7 5a64 	vstr	s11, [r7, #400]	@ 0x190
 8018a46:	787b      	ldrb	r3, [r7, #1]
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	f000 81a7 	beq.w	8018d9c <iNemoEngine_API_Update+0x37cc>
 8018a4e:	f507 6314 	add.w	r3, r7, #2368	@ 0x940
 8018a52:	932b      	str	r3, [sp, #172]	@ 0xac
 8018a54:	f607 1344 	addw	r3, r7, #2372	@ 0x944
 8018a58:	932c      	str	r3, [sp, #176]	@ 0xb0
 8018a5a:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8018a5e:	932d      	str	r3, [sp, #180]	@ 0xb4
 8018a60:	2300      	movs	r3, #0
 8018a62:	707b      	strb	r3, [r7, #1]
 8018a64:	f7fd b8ad 	b.w	8015bc2 <iNemoEngine_API_Update+0x5f2>
 8018a68:	ee1a 3a90 	vmov	r3, s21
 8018a6c:	f10a 0a0c 	add.w	sl, sl, #12
 8018a70:	f84a 3c04 	str.w	r3, [sl, #-4]
 8018a74:	45ca      	cmp	sl, r9
 8018a76:	f47f aeb1 	bne.w	80187dc <iNemoEngine_API_Update+0x320c>
 8018a7a:	f897 a791 	ldrb.w	sl, [r7, #1937]	@ 0x791
 8018a7e:	f1ba 0f00 	cmp.w	sl, #0
 8018a82:	f000 87f3 	beq.w	8019a6c <iNemoEngine_API_Update+0x449c>
 8018a86:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8018bb0 <iNemoEngine_API_Update+0x35e0>
 8018a8a:	ed9d 7a10 	vldr	s14, [sp, #64]	@ 0x40
 8018a8e:	ee6f daa7 	vmul.f32	s27, s31, s15
 8018a92:	eef6 9a00 	vmov.f32	s19, #96	@ 0x3f000000  0.5
 8018a96:	ee67 aa27 	vmul.f32	s21, s14, s15
 8018a9a:	ee2f ea27 	vmul.f32	s28, s30, s15
 8018a9e:	ee7d 7ae9 	vsub.f32	s15, s27, s19
 8018aa2:	eef0 caed 	vabs.f32	s25, s27
 8018aa6:	ee17 0a90 	vmov	r0, s15
 8018aaa:	f7e7 fd75 	bl	8000598 <__aeabi_f2d>
 8018aae:	ee7d 7aa9 	vadd.f32	s15, s27, s19
 8018ab2:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8018ab6:	ee17 0a90 	vmov	r0, s15
 8018aba:	f7e7 fd6d 	bl	8000598 <__aeabi_f2d>
 8018abe:	ee7e 7a69 	vsub.f32	s15, s28, s19
 8018ac2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8018ac6:	ee17 0a90 	vmov	r0, s15
 8018aca:	f7e7 fd65 	bl	8000598 <__aeabi_f2d>
 8018ace:	ee7e 7a29 	vadd.f32	s15, s28, s19
 8018ad2:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8018ad6:	ee17 0a90 	vmov	r0, s15
 8018ada:	f7e7 fd5d 	bl	8000598 <__aeabi_f2d>
 8018ade:	ee7a 7ae9 	vsub.f32	s15, s21, s19
 8018ae2:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 8018ae6:	ee17 0a90 	vmov	r0, s15
 8018aea:	f7e7 fd55 	bl	8000598 <__aeabi_f2d>
 8018aee:	ee7a 7aa9 	vadd.f32	s15, s21, s19
 8018af2:	4602      	mov	r2, r0
 8018af4:	460b      	mov	r3, r1
 8018af6:	ee17 0a90 	vmov	r0, s15
 8018afa:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
 8018afe:	f7e7 fd4b 	bl	8000598 <__aeabi_f2d>
 8018b02:	f507 63f3 	add.w	r3, r7, #1944	@ 0x798
 8018b06:	eef0 7aea 	vabs.f32	s15, s21
 8018b0a:	220c      	movs	r2, #12
 8018b0c:	fb12 320a 	smlabb	r2, r2, sl, r3
 8018b10:	edcd 7a03 	vstr	s15, [sp, #12]
 8018b14:	eef0 7a4d 	vmov.f32	s15, s26
 8018b18:	e9cd 011a 	strd	r0, r1, [sp, #104]	@ 0x68
 8018b1c:	eeb0 da6e 	vmov.f32	s26, s29
 8018b20:	eddf 9a24 	vldr	s19, [pc, #144]	@ 8018bb4 <iNemoEngine_API_Update+0x35e4>
 8018b24:	930e      	str	r3, [sp, #56]	@ 0x38
 8018b26:	eef0 ea6b 	vmov.f32	s29, s23
 8018b2a:	eeb0 bace 	vabs.f32	s22, s28
 8018b2e:	eef0 ba49 	vmov.f32	s23, s18
 8018b32:	469a      	mov	sl, r3
 8018b34:	4691      	mov	r9, r2
 8018b36:	eeb0 9a67 	vmov.f32	s18, s15
 8018b3a:	e0ac      	b.n	8018c96 <iNemoEngine_API_Update+0x36c6>
 8018b3c:	bf666666 	.word	0xbf666666
 8018b40:	3d072b02 	.word	0x3d072b02
 8018b44:	3ca3d70a 	.word	0x3ca3d70a
 8018b48:	3d4ccccd 	.word	0x3d4ccccd
 8018b4c:	3ecccccd 	.word	0x3ecccccd
 8018b50:	3f4ccccd 	.word	0x3f4ccccd
 8018b54:	3cb43958 	.word	0x3cb43958
 8018b58:	3cf5c28f 	.word	0x3cf5c28f
 8018b5c:	3eb33333 	.word	0x3eb33333
 8018b60:	3d75c28f 	.word	0x3d75c28f
 8018b64:	3ee66666 	.word	0x3ee66666
 8018b68:	3f866666 	.word	0x3f866666
 8018b6c:	3d23d70a 	.word	0x3d23d70a
 8018b70:	3f8ccccd 	.word	0x3f8ccccd
 8018b74:	3d8f5c29 	.word	0x3d8f5c29
 8018b78:	3f933333 	.word	0x3f933333
 8018b7c:	3ebd70a4 	.word	0x3ebd70a4
 8018b80:	40a00000 	.word	0x40a00000
 8018b84:	3dcccccd 	.word	0x3dcccccd
 8018b88:	3e4ccccd 	.word	0x3e4ccccd
 8018b8c:	3e99999a 	.word	0x3e99999a
 8018b90:	3f666666 	.word	0x3f666666
 8018b94:	40200000 	.word	0x40200000
 8018b98:	3f99999a 	.word	0x3f99999a
 8018b9c:	40400000 	.word	0x40400000
 8018ba0:	3fb9999a 	.word	0x3fb9999a
 8018ba4:	3fcccccd 	.word	0x3fcccccd
 8018ba8:	3fe66666 	.word	0x3fe66666
 8018bac:	3f333333 	.word	0x3f333333
 8018bb0:	446a0ccd 	.word	0x446a0ccd
 8018bb4:	4b000000 	.word	0x4b000000
 8018bb8:	3fa66666 	.word	0x3fa66666
 8018bbc:	3f19999a 	.word	0x3f19999a
 8018bc0:	3cfaad3b 	.word	0x3cfaad3b
 8018bc4:	bcfaad3b 	.word	0xbcfaad3b
 8018bc8:	80000000 	.word	0x80000000
 8018bcc:	eddd 7a1d 	vldr	s15, [sp, #116]	@ 0x74
 8018bd0:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8018bc0 <iNemoEngine_API_Update+0x35f0>
 8018bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bdc:	f280 80b1 	bge.w	8018d42 <iNemoEngine_API_Update+0x3772>
 8018be0:	ed1f 7a08 	vldr	s14, [pc, #-32]	@ 8018bc4 <iNemoEngine_API_Update+0x35f4>
 8018be4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bec:	f300 80c3 	bgt.w	8018d76 <iNemoEngine_API_Update+0x37a6>
 8018bf0:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8018bf4:	f004 fa14 	bl	801d020 <ceil>
 8018bf8:	ec51 0b10 	vmov	r0, r1, d0
 8018bfc:	f7e7 fffc 	bl	8000bf8 <__aeabi_d2f>
 8018c00:	4603      	mov	r3, r0
 8018c02:	eeb4 bae9 	vcmpe.f32	s22, s19
 8018c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c0a:	f8ca 3000 	str.w	r3, [sl]
 8018c0e:	d550      	bpl.n	8018cb2 <iNemoEngine_API_Update+0x36e2>
 8018c10:	eddd 7a1e 	vldr	s15, [sp, #120]	@ 0x78
 8018c14:	ed1f 7a16 	vldr	s14, [pc, #-88]	@ 8018bc0 <iNemoEngine_API_Update+0x35f0>
 8018c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c20:	f280 8085 	bge.w	8018d2e <iNemoEngine_API_Update+0x375e>
 8018c24:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 8018bc4 <iNemoEngine_API_Update+0x35f4>
 8018c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c30:	f300 809e 	bgt.w	8018d70 <iNemoEngine_API_Update+0x37a0>
 8018c34:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8018c38:	f004 f9f2 	bl	801d020 <ceil>
 8018c3c:	ec51 0b10 	vmov	r0, r1, d0
 8018c40:	f7e7 ffda 	bl	8000bf8 <__aeabi_d2f>
 8018c44:	4603      	mov	r3, r0
 8018c46:	eddd 7a03 	vldr	s15, [sp, #12]
 8018c4a:	f8ca 3004 	str.w	r3, [sl, #4]
 8018c4e:	eef4 7ae9 	vcmpe.f32	s15, s19
 8018c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c56:	d556      	bpl.n	8018d06 <iNemoEngine_API_Update+0x3736>
 8018c58:	eddd 7a08 	vldr	s15, [sp, #32]
 8018c5c:	ed1f 7a28 	vldr	s14, [pc, #-160]	@ 8018bc0 <iNemoEngine_API_Update+0x35f0>
 8018c60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c68:	da75      	bge.n	8018d56 <iNemoEngine_API_Update+0x3786>
 8018c6a:	ed1f 7a2a 	vldr	s14, [pc, #-168]	@ 8018bc4 <iNemoEngine_API_Update+0x35f4>
 8018c6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c76:	dc78      	bgt.n	8018d6a <iNemoEngine_API_Update+0x379a>
 8018c78:	ed9d 0b18 	vldr	d0, [sp, #96]	@ 0x60
 8018c7c:	f004 f9d0 	bl	801d020 <ceil>
 8018c80:	ec51 0b10 	vmov	r0, r1, d0
 8018c84:	f7e7 ffb8 	bl	8000bf8 <__aeabi_d2f>
 8018c88:	4603      	mov	r3, r0
 8018c8a:	f8ca 3008 	str.w	r3, [sl, #8]
 8018c8e:	f10a 0a0c 	add.w	sl, sl, #12
 8018c92:	45ca      	cmp	sl, r9
 8018c94:	d03f      	beq.n	8018d16 <iNemoEngine_API_Update+0x3746>
 8018c96:	eef4 cae9 	vcmpe.f32	s25, s19
 8018c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c9e:	d495      	bmi.n	8018bcc <iNemoEngine_API_Update+0x35fc>
 8018ca0:	ee1d 3a90 	vmov	r3, s27
 8018ca4:	eeb4 bae9 	vcmpe.f32	s22, s19
 8018ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cac:	f8ca 3000 	str.w	r3, [sl]
 8018cb0:	d4ae      	bmi.n	8018c10 <iNemoEngine_API_Update+0x3640>
 8018cb2:	ee1e 3a10 	vmov	r3, s28
 8018cb6:	e7c6      	b.n	8018c46 <iNemoEngine_API_Update+0x3676>
 8018cb8:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8018cbc:	f004 fa2c 	bl	801d118 <floor>
 8018cc0:	ec51 0b10 	vmov	r0, r1, d0
 8018cc4:	f7e7 ff98 	bl	8000bf8 <__aeabi_d2f>
 8018cc8:	4603      	mov	r3, r0
 8018cca:	e55d      	b.n	8018788 <iNemoEngine_API_Update+0x31b8>
 8018ccc:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8018cd0:	f004 fa22 	bl	801d118 <floor>
 8018cd4:	ec51 0b10 	vmov	r0, r1, d0
 8018cd8:	f7e7 ff8e 	bl	8000bf8 <__aeabi_d2f>
 8018cdc:	4603      	mov	r3, r0
 8018cde:	e533      	b.n	8018748 <iNemoEngine_API_Update+0x3178>
 8018ce0:	ed9d 0b18 	vldr	d0, [sp, #96]	@ 0x60
 8018ce4:	f004 fa18 	bl	801d118 <floor>
 8018ce8:	ec51 0b10 	vmov	r0, r1, d0
 8018cec:	f7e7 ff84 	bl	8000bf8 <__aeabi_d2f>
 8018cf0:	4603      	mov	r3, r0
 8018cf2:	e56c      	b.n	80187ce <iNemoEngine_API_Update+0x31fe>
 8018cf4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8018cf8:	e569      	b.n	80187ce <iNemoEngine_API_Update+0x31fe>
 8018cfa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8018cfe:	e543      	b.n	8018788 <iNemoEngine_API_Update+0x31b8>
 8018d00:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8018d04:	e520      	b.n	8018748 <iNemoEngine_API_Update+0x3178>
 8018d06:	ee1a 3a90 	vmov	r3, s21
 8018d0a:	f10a 0a0c 	add.w	sl, sl, #12
 8018d0e:	f84a 3c04 	str.w	r3, [sl, #-4]
 8018d12:	45ca      	cmp	sl, r9
 8018d14:	d1bf      	bne.n	8018c96 <iNemoEngine_API_Update+0x36c6>
 8018d16:	eef0 7a49 	vmov.f32	s15, s18
 8018d1a:	eeb0 9a6b 	vmov.f32	s18, s23
 8018d1e:	eef0 ba6e 	vmov.f32	s23, s29
 8018d22:	eef0 ea4d 	vmov.f32	s29, s26
 8018d26:	eeb0 da67 	vmov.f32	s26, s15
 8018d2a:	f7fc bf5e 	b.w	8015bea <iNemoEngine_API_Update+0x61a>
 8018d2e:	ed9d 0b16 	vldr	d0, [sp, #88]	@ 0x58
 8018d32:	f004 f9f1 	bl	801d118 <floor>
 8018d36:	ec51 0b10 	vmov	r0, r1, d0
 8018d3a:	f7e7 ff5d 	bl	8000bf8 <__aeabi_d2f>
 8018d3e:	4603      	mov	r3, r0
 8018d40:	e781      	b.n	8018c46 <iNemoEngine_API_Update+0x3676>
 8018d42:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8018d46:	f004 f9e7 	bl	801d118 <floor>
 8018d4a:	ec51 0b10 	vmov	r0, r1, d0
 8018d4e:	f7e7 ff53 	bl	8000bf8 <__aeabi_d2f>
 8018d52:	4603      	mov	r3, r0
 8018d54:	e755      	b.n	8018c02 <iNemoEngine_API_Update+0x3632>
 8018d56:	ed9d 0b1a 	vldr	d0, [sp, #104]	@ 0x68
 8018d5a:	f004 f9dd 	bl	801d118 <floor>
 8018d5e:	ec51 0b10 	vmov	r0, r1, d0
 8018d62:	f7e7 ff49 	bl	8000bf8 <__aeabi_d2f>
 8018d66:	4603      	mov	r3, r0
 8018d68:	e78f      	b.n	8018c8a <iNemoEngine_API_Update+0x36ba>
 8018d6a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8018d6e:	e78c      	b.n	8018c8a <iNemoEngine_API_Update+0x36ba>
 8018d70:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8018d74:	e767      	b.n	8018c46 <iNemoEngine_API_Update+0x3676>
 8018d76:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8018d7a:	e742      	b.n	8018c02 <iNemoEngine_API_Update+0x3632>
 8018d7c:	edd7 ea4b 	vldr	s29, [r7, #300]	@ 0x12c
 8018d80:	ee2a aa2e 	vmul.f32	s20, s20, s29
 8018d84:	f7fd bfd2 	b.w	8016d2c <iNemoEngine_API_Update+0x175c>
 8018d88:	edd7 ea63 	vldr	s29, [r7, #396]	@ 0x18c
 8018d8c:	ee2a aa2e 	vmul.f32	s20, s20, s29
 8018d90:	f7fd bfcc 	b.w	8016d2c <iNemoEngine_API_Update+0x175c>
 8018d94:	ed97 9a49 	vldr	s18, [r7, #292]	@ 0x124
 8018d98:	f7fd be41 	b.w	8016a1e <iNemoEngine_API_Update+0x144e>
 8018d9c:	f507 6314 	add.w	r3, r7, #2368	@ 0x940
 8018da0:	f607 1244 	addw	r2, r7, #2372	@ 0x944
 8018da4:	f607 1148 	addw	r1, r7, #2376	@ 0x948
 8018da8:	932b      	str	r3, [sp, #172]	@ 0xac
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8018db0:	6813      	ldr	r3, [r2, #0]
 8018db2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8018db6:	680b      	ldr	r3, [r1, #0]
 8018db8:	922c      	str	r2, [sp, #176]	@ 0xb0
 8018dba:	912d      	str	r1, [sp, #180]	@ 0xb4
 8018dbc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8018dc0:	e64e      	b.n	8018a60 <iNemoEngine_API_Update+0x3490>
 8018dc2:	f207 43b4 	addw	r3, r7, #1204	@ 0x4b4
 8018dc6:	ed93 0a00 	vldr	s0, [r3]
 8018dca:	f507 6097 	add.w	r0, r7, #1208	@ 0x4b8
 8018dce:	f7fa fced 	bl	80137ac <dataDerivative5>
 8018dd2:	f207 6324 	addw	r3, r7, #1572	@ 0x624
 8018dd6:	eeb0 3a40 	vmov.f32	s6, s0
 8018dda:	f507 60c5 	add.w	r0, r7, #1576	@ 0x628
 8018dde:	ed93 0a00 	vldr	s0, [r3]
 8018de2:	f7fa fce3 	bl	80137ac <dataDerivative5>
 8018de6:	f207 7b94 	addw	fp, r7, #1940	@ 0x794
 8018dea:	eef0 2a40 	vmov.f32	s5, s0
 8018dee:	f507 60f3 	add.w	r0, r7, #1944	@ 0x798
 8018df2:	ed9b 0a00 	vldr	s0, [fp]
 8018df6:	f7fa fcd9 	bl	80137ac <dataDerivative5>
 8018dfa:	f9b7 3976 	ldrsh.w	r3, [r7, #2422]	@ 0x976
 8018dfe:	ee07 3a90 	vmov	s15, r3
 8018e02:	3301      	adds	r3, #1
 8018e04:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8018e08:	ee07 3a90 	vmov	s15, r3
 8018e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018e14:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8018e18:	f607 106c 	addw	r0, r7, #2412	@ 0x96c
 8018e1c:	f607 1168 	addw	r1, r7, #2408	@ 0x968
 8018e20:	f507 6217 	add.w	r2, r7, #2416	@ 0x970
 8018e24:	b21b      	sxth	r3, r3
 8018e26:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8018e2a:	ed90 7a00 	vldr	s14, [r0]
 8018e2e:	ed91 5a00 	vldr	s10, [r1]
 8018e32:	eef0 7a43 	vmov.f32	s15, s6
 8018e36:	eee7 7a25 	vfma.f32	s15, s14, s11
 8018e3a:	eeb0 7a62 	vmov.f32	s14, s5
 8018e3e:	eea5 7a85 	vfma.f32	s14, s11, s10
 8018e42:	ed92 5a00 	vldr	s10, [r2]
 8018e46:	eef0 6a40 	vmov.f32	s13, s0
 8018e4a:	eee5 6a85 	vfma.f32	s13, s11, s10
 8018e4e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018e52:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018e56:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018e5a:	edc0 7a00 	vstr	s15, [r0]
 8018e5e:	ed81 7a00 	vstr	s14, [r1]
 8018e62:	edc2 6a00 	vstr	s13, [r2]
 8018e66:	f8a7 3976 	strh.w	r3, [r7, #2422]	@ 0x976
 8018e6a:	f47c abd8 	bne.w	801561e <iNemoEngine_API_Update+0x4e>
 8018e6e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8018e72:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018e76:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018e7a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018e7e:	2300      	movs	r3, #0
 8018e80:	ed87 7a07 	vstr	s14, [r7, #28]
 8018e84:	edc7 6a08 	vstr	s13, [r7, #32]
 8018e88:	edc7 7a06 	vstr	s15, [r7, #24]
 8018e8c:	6003      	str	r3, [r0, #0]
 8018e8e:	600b      	str	r3, [r1, #0]
 8018e90:	6013      	str	r3, [r2, #0]
 8018e92:	2300      	movs	r3, #0
 8018e94:	f8a7 3976 	strh.w	r3, [r7, #2422]	@ 0x976
 8018e98:	f887 3978 	strb.w	r3, [r7, #2424]	@ 0x978
 8018e9c:	f7fc bbbf 	b.w	801561e <iNemoEngine_API_Update+0x4e>
 8018ea0:	ed1f 9ab7 	vldr	s18, [pc, #-732]	@ 8018bc8 <iNemoEngine_API_Update+0x35f8>
 8018ea4:	f7fd b942 	b.w	801612c <iNemoEngine_API_Update+0xb5c>
 8018ea8:	ed1f 8ab9 	vldr	s16, [pc, #-740]	@ 8018bc8 <iNemoEngine_API_Update+0x35f8>
 8018eac:	f7fd b994 	b.w	80161d8 <iNemoEngine_API_Update+0xc08>
 8018eb0:	9b03      	ldr	r3, [sp, #12]
 8018eb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8018eb4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8018eb8:	939f      	str	r3, [sp, #636]	@ 0x27c
 8018eba:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8018ebe:	93a0      	str	r3, [sp, #640]	@ 0x280
 8018ec0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8018ec4:	93a1      	str	r3, [sp, #644]	@ 0x284
 8018ec6:	2300      	movs	r3, #0
 8018ec8:	f887 31a0 	strb.w	r3, [r7, #416]	@ 0x1a0
 8018ecc:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 8018ed0:	f7fe bc68 	b.w	80177a4 <iNemoEngine_API_Update+0x21d4>
 8018ed4:	ed5f eac4 	vldr	s29, [pc, #-784]	@ 8018bc8 <iNemoEngine_API_Update+0x35f8>
 8018ed8:	f7fd b953 	b.w	8016182 <iNemoEngine_API_Update+0xbb2>
 8018edc:	ed1f 9ac6 	vldr	s18, [pc, #-792]	@ 8018bc8 <iNemoEngine_API_Update+0x35f8>
 8018ee0:	f7fd b8bb 	b.w	801605a <iNemoEngine_API_Update+0xa8a>
 8018ee4:	ed5f eac8 	vldr	s29, [pc, #-800]	@ 8018bc8 <iNemoEngine_API_Update+0x35f8>
 8018ee8:	f7fd b88c 	b.w	8016004 <iNemoEngine_API_Update+0xa34>
 8018eec:	ed1f 8aca 	vldr	s16, [pc, #-808]	@ 8018bc8 <iNemoEngine_API_Update+0x35f8>
 8018ef0:	f7fd b85d 	b.w	8015fae <iNemoEngine_API_Update+0x9de>
 8018ef4:	ed5f eacc 	vldr	s29, [pc, #-816]	@ 8018bc8 <iNemoEngine_API_Update+0x35f8>
 8018ef8:	f7fc bff0 	b.w	8015edc <iNemoEngine_API_Update+0x90c>
 8018efc:	ed1f 8ace 	vldr	s16, [pc, #-824]	@ 8018bc8 <iNemoEngine_API_Update+0x35f8>
 8018f00:	f7fc bfc1 	b.w	8015e86 <iNemoEngine_API_Update+0x8b6>
 8018f04:	ed1f 9ad0 	vldr	s18, [pc, #-832]	@ 8018bc8 <iNemoEngine_API_Update+0x35f8>
 8018f08:	f7fc bf92 	b.w	8015e30 <iNemoEngine_API_Update+0x860>
 8018f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f10:	f280 836c 	bge.w	80195ec <iNemoEngine_API_Update+0x401c>
 8018f14:	ed97 3a31 	vldr	s6, [r7, #196]	@ 0xc4
 8018f18:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8018f1c:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8018f20:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8018f24:	ee78 3a63 	vsub.f32	s7, s16, s7
 8018f28:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8018f2c:	ee87 9aa5 	vdiv.f32	s18, s15, s11
 8018f30:	ee39 9a03 	vadd.f32	s18, s18, s6
 8018f34:	f7ff b82c 	b.w	8017f90 <iNemoEngine_API_Update+0x29c0>
 8018f38:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	@ 0x1a6
 8018f3c:	3301      	adds	r3, #1
 8018f3e:	b29b      	uxth	r3, r3
 8018f40:	2a00      	cmp	r2, #0
 8018f42:	f040 85cf 	bne.w	8019ae4 <iNemoEngine_API_Update+0x4514>
 8018f46:	eddf 7ae6 	vldr	s15, [pc, #920]	@ 80192e0 <iNemoEngine_API_Update+0x3d10>
 8018f4a:	eddf 6ae6 	vldr	s13, [pc, #920]	@ 80192e4 <iNemoEngine_API_Update+0x3d14>
 8018f4e:	2b31      	cmp	r3, #49	@ 0x31
 8018f50:	bf98      	it	ls
 8018f52:	eef0 7a66 	vmovls.f32	s15, s13
 8018f56:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6
 8018f5a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8018f5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8018f62:	f5b3 0f8c 	cmp.w	r3, #4587520	@ 0x460000
 8018f66:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8018f6a:	f000 85b1 	beq.w	8019ad0 <iNemoEngine_API_Update+0x4500>
 8018f6e:	f5b3 0fc8 	cmp.w	r3, #6553600	@ 0x640000
 8018f72:	f47e adc9 	bne.w	8017b08 <iNemoEngine_API_Update+0x2538>
 8018f76:	2301      	movs	r3, #1
 8018f78:	f887 31a4 	strb.w	r3, [r7, #420]	@ 0x1a4
 8018f7c:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 8018f80:	edd3 5a00 	vldr	s11, [r3]
 8018f84:	f507 63f1 	add.w	r3, r7, #1928	@ 0x788
 8018f88:	ed93 7a00 	vldr	s14, [r3]
 8018f8c:	f207 6314 	addw	r3, r7, #1556	@ 0x614
 8018f90:	ed93 5a00 	vldr	s10, [r3]
 8018f94:	ee65 4aa5 	vmul.f32	s9, s11, s11
 8018f98:	f207 7384 	addw	r3, r7, #1924	@ 0x784
 8018f9c:	eee5 4a05 	vfma.f32	s9, s10, s10
 8018fa0:	a84d      	add	r0, sp, #308	@ 0x134
 8018fa2:	462a      	mov	r2, r5
 8018fa4:	edd3 6a00 	vldr	s13, [r3]
 8018fa8:	f207 631c 	addw	r3, r7, #1564	@ 0x61c
 8018fac:	edd3 7a00 	vldr	s15, [r3]
 8018fb0:	eee7 4aa7 	vfma.f32	s9, s15, s15
 8018fb4:	f207 738c 	addw	r3, r7, #1932	@ 0x78c
 8018fb8:	a947      	add	r1, sp, #284	@ 0x11c
 8018fba:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 8018fbe:	eef1 3ae4 	vsqrt.f32	s7, s9
 8018fc2:	462e      	mov	r6, r5
 8018fc4:	4654      	mov	r4, sl
 8018fc6:	ee27 6a07 	vmul.f32	s12, s14, s14
 8018fca:	eec4 4a23 	vdiv.f32	s9, s8, s7
 8018fce:	eea6 6aa6 	vfma.f32	s12, s13, s13
 8018fd2:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8018fd6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8018fda:	edcd 7a49 	vstr	s15, [sp, #292]	@ 0x124
 8018fde:	edd3 7a00 	vldr	s15, [r3]
 8018fe2:	edcd 5a48 	vstr	s11, [sp, #288]	@ 0x120
 8018fe6:	eea7 6aa7 	vfma.f32	s12, s15, s15
 8018fea:	ee25 5a24 	vmul.f32	s10, s10, s9
 8018fee:	eef1 5ac6 	vsqrt.f32	s11, s12
 8018ff2:	ed8d 5a47 	vstr	s10, [sp, #284]	@ 0x11c
 8018ff6:	ee84 6a25 	vdiv.f32	s12, s8, s11
 8018ffa:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018ffe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019002:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019006:	ed8d 7a4e 	vstr	s14, [sp, #312]	@ 0x138
 801900a:	edcd 7a4f 	vstr	s15, [sp, #316]	@ 0x13c
 801900e:	edcd 6a4d 	vstr	s13, [sp, #308]	@ 0x134
 8019012:	f7fa fcb1 	bl	8013978 <getRotationMatrix>
 8019016:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8019018:	46de      	mov	lr, fp
 801901a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801901e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8019020:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019024:	6836      	ldr	r6, [r6, #0]
 8019026:	f8ce 6000 	str.w	r6, [lr]
 801902a:	46dc      	mov	ip, fp
 801902c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019032:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019038:	ed9b 7a00 	vldr	s14, [fp]
 801903c:	eddb 7a01 	vldr	s15, [fp, #4]
 8019040:	6026      	str	r6, [r4, #0]
 8019042:	eeb0 7ac7 	vabs.f32	s14, s14
 8019046:	eef0 7ae7 	vabs.f32	s15, s15
 801904a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801904e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019052:	f100 8574 	bmi.w	8019b3e <iNemoEngine_API_Update+0x456e>
 8019056:	2304      	movs	r3, #4
 8019058:	2000      	movs	r0, #0
 801905a:	eef0 7a47 	vmov.f32	s15, s14
 801905e:	4699      	mov	r9, r3
 8019060:	2103      	movs	r1, #3
 8019062:	2606      	movs	r6, #6
 8019064:	f04f 0e07 	mov.w	lr, #7
 8019068:	461a      	mov	r2, r3
 801906a:	f04f 0c01 	mov.w	ip, #1
 801906e:	9004      	str	r0, [sp, #16]
 8019070:	ed9b 7a02 	vldr	s14, [fp, #8]
 8019074:	eeb0 7ac7 	vabs.f32	s14, s14
 8019078:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801907c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019080:	f300 854d 	bgt.w	8019b1e <iNemoEngine_API_Update+0x454e>
 8019084:	2305      	movs	r3, #5
 8019086:	2408      	movs	r4, #8
 8019088:	e9cd 3405 	strd	r3, r4, [sp, #20]
 801908c:	2302      	movs	r3, #2
 801908e:	464c      	mov	r4, r9
 8019090:	445c      	add	r4, fp
 8019092:	4458      	add	r0, fp
 8019094:	edd4 6a00 	vldr	s13, [r4]
 8019098:	ed90 7a00 	vldr	s14, [r0]
 801909c:	9804      	ldr	r0, [sp, #16]
 801909e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80190a2:	eb0a 0b8c 	add.w	fp, sl, ip, lsl #2
 80190a6:	eb0a 0483 	add.w	r4, sl, r3, lsl #2
 80190aa:	eb0a 0980 	add.w	r9, sl, r0, lsl #2
 80190ae:	0080      	lsls	r0, r0, #2
 80190b0:	9004      	str	r0, [sp, #16]
 80190b2:	eb0a 0081 	add.w	r0, sl, r1, lsl #2
 80190b6:	0089      	lsls	r1, r1, #2
 80190b8:	9107      	str	r1, [sp, #28]
 80190ba:	009b      	lsls	r3, r3, #2
 80190bc:	edcb 7a00 	vstr	s15, [fp]
 80190c0:	ed94 7a00 	vldr	s14, [r4]
 80190c4:	edd9 7a00 	vldr	s15, [r9]
 80190c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80190cc:	ea4f 098e 	mov.w	r9, lr, lsl #2
 80190d0:	edc4 6a00 	vstr	s13, [r4]
 80190d4:	eb0a 0482 	add.w	r4, sl, r2, lsl #2
 80190d8:	ed9b 6a00 	vldr	s12, [fp]
 80190dc:	ed90 7a00 	vldr	s14, [r0]
 80190e0:	edd4 7a00 	vldr	s15, [r4]
 80190e4:	eee6 7a47 	vfms.f32	s15, s12, s14
 80190e8:	edc4 7a00 	vstr	s15, [r4]
 80190ec:	edd0 7a00 	vldr	s15, [r0]
 80190f0:	9805      	ldr	r0, [sp, #20]
 80190f2:	eb0a 0180 	add.w	r1, sl, r0, lsl #2
 80190f6:	ed91 7a00 	vldr	s14, [r1]
 80190fa:	eea6 7ae7 	vfms.f32	s14, s13, s15
 80190fe:	ea4f 0b80 	mov.w	fp, r0, lsl #2
 8019102:	00b0      	lsls	r0, r6, #2
 8019104:	9005      	str	r0, [sp, #20]
 8019106:	ed81 7a00 	vstr	s14, [r1]
 801910a:	eb0a 008e 	add.w	r0, sl, lr, lsl #2
 801910e:	eb0a 0186 	add.w	r1, sl, r6, lsl #2
 8019112:	ed91 5a00 	vldr	s10, [r1]
 8019116:	edd0 7a00 	vldr	s15, [r0]
 801911a:	9e06      	ldr	r6, [sp, #24]
 801911c:	eee6 7a45 	vfms.f32	s15, s12, s10
 8019120:	eef0 5ac7 	vabs.f32	s11, s14
 8019124:	edc0 7a00 	vstr	s15, [r0]
 8019128:	ed91 6a00 	vldr	s12, [r1]
 801912c:	eb0a 0186 	add.w	r1, sl, r6, lsl #2
 8019130:	edd1 7a00 	vldr	s15, [r1]
 8019134:	eee6 7ac6 	vfms.f32	s15, s13, s12
 8019138:	00b6      	lsls	r6, r6, #2
 801913a:	edc1 7a00 	vstr	s15, [r1]
 801913e:	edd4 6a00 	vldr	s13, [r4]
 8019142:	eeb0 6ae6 	vabs.f32	s12, s13
 8019146:	eef4 5ac6 	vcmpe.f32	s11, s12
 801914a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801914e:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8019152:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8019156:	f300 84cd 	bgt.w	8019af4 <iNemoEngine_API_Update+0x4524>
 801915a:	ed90 6a00 	vldr	s12, [r0]
 801915e:	9804      	ldr	r0, [sp, #16]
 8019160:	eec7 1a26 	vdiv.f32	s3, s14, s13
 8019164:	eb0a 020b 	add.w	r2, sl, fp
 8019168:	4456      	add	r6, sl
 801916a:	4454      	add	r4, sl
 801916c:	eb0a 0b09 	add.w	fp, sl, r9
 8019170:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8019174:	eee1 7ac6 	vfms.f32	s15, s3, s12
 8019178:	edc2 1a00 	vstr	s3, [r2]
 801917c:	9a05      	ldr	r2, [sp, #20]
 801917e:	edc6 7a00 	vstr	s15, [r6]
 8019182:	4452      	add	r2, sl
 8019184:	ed92 3a00 	vldr	s6, [r2]
 8019188:	9a07      	ldr	r2, [sp, #28]
 801918a:	ed9b 2a00 	vldr	s4, [fp]
 801918e:	4452      	add	r2, sl
 8019190:	edd2 4a00 	vldr	s9, [r2]
 8019194:	9a03      	ldr	r2, [sp, #12]
 8019196:	9209      	str	r2, [sp, #36]	@ 0x24
 8019198:	eb0a 0201 	add.w	r2, sl, r1
 801919c:	ed92 0a00 	vldr	s0, [r2]
 80191a0:	eb0a 0203 	add.w	r2, sl, r3
 80191a4:	edd2 2a00 	vldr	s5, [r2]
 80191a8:	aa72      	add	r2, sp, #456	@ 0x1c8
 80191aa:	ee80 1aa7 	vdiv.f32	s2, s1, s15
 80191ae:	4402      	add	r2, r0
 80191b0:	edd2 6a00 	vldr	s13, [r2]
 80191b4:	edd4 7a00 	vldr	s15, [r4]
 80191b8:	aa72      	add	r2, sp, #456	@ 0x1c8
 80191ba:	440a      	add	r2, r1
 80191bc:	eec0 3aa7 	vdiv.f32	s7, s1, s15
 80191c0:	edd2 7a00 	vldr	s15, [r2]
 80191c4:	aa72      	add	r2, sp, #456	@ 0x1c8
 80191c6:	441a      	add	r2, r3
 80191c8:	ed92 7a00 	vldr	s14, [r2]
 80191cc:	eee0 7a66 	vfms.f32	s15, s0, s13
 80191d0:	aa75      	add	r2, sp, #468	@ 0x1d4
 80191d2:	4402      	add	r2, r0
 80191d4:	eea2 7ae6 	vfms.f32	s14, s5, s13
 80191d8:	eea1 7ae7 	vfms.f32	s14, s3, s15
 80191dc:	ee21 7a07 	vmul.f32	s14, s2, s14
 80191e0:	eee2 7a47 	vfms.f32	s15, s4, s14
 80191e4:	eee3 6a47 	vfms.f32	s13, s6, s14
 80191e8:	ee63 7aa7 	vmul.f32	s15, s7, s15
 80191ec:	ed85 7a02 	vstr	s14, [r5, #8]
 80191f0:	eee4 6ae7 	vfms.f32	s13, s9, s15
 80191f4:	edc5 7a01 	vstr	s15, [r5, #4]
 80191f8:	eeb0 4a66 	vmov.f32	s8, s13
 80191fc:	edd2 6a00 	vldr	s13, [r2]
 8019200:	aa75      	add	r2, sp, #468	@ 0x1d4
 8019202:	440a      	add	r2, r1
 8019204:	ed92 6a00 	vldr	s12, [r2]
 8019208:	aa75      	add	r2, sp, #468	@ 0x1d4
 801920a:	441a      	add	r2, r3
 801920c:	edd2 5a00 	vldr	s11, [r2]
 8019210:	aa78      	add	r2, sp, #480	@ 0x1e0
 8019212:	4411      	add	r1, r2
 8019214:	4413      	add	r3, r2
 8019216:	4402      	add	r2, r0
 8019218:	ed92 5a00 	vldr	s10, [r2]
 801921c:	edd1 7a00 	vldr	s15, [r1]
 8019220:	ed93 7a00 	vldr	s14, [r3]
 8019224:	eea0 6a66 	vfms.f32	s12, s0, s13
 8019228:	eb0a 0300 	add.w	r3, sl, r0
 801922c:	a95c      	add	r1, sp, #368	@ 0x170
 801922e:	eee5 7a40 	vfms.f32	s15, s10, s0
 8019232:	4628      	mov	r0, r5
 8019234:	eee2 5ae6 	vfms.f32	s11, s5, s13
 8019238:	eea5 7a62 	vfms.f32	s14, s10, s5
 801923c:	ed93 0a00 	vldr	s0, [r3]
 8019240:	eee1 5ac6 	vfms.f32	s11, s3, s12
 8019244:	2300      	movs	r3, #0
 8019246:	eea1 7ae7 	vfms.f32	s14, s3, s15
 801924a:	eec0 2a80 	vdiv.f32	s5, s1, s0
 801924e:	ee27 7a01 	vmul.f32	s14, s14, s2
 8019252:	ee61 5a25 	vmul.f32	s11, s2, s11
 8019256:	eee7 7a42 	vfms.f32	s15, s14, s4
 801925a:	eea2 6a65 	vfms.f32	s12, s4, s11
 801925e:	eee3 6a65 	vfms.f32	s13, s6, s11
 8019262:	edc5 5a05 	vstr	s11, [r5, #20]
 8019266:	eef0 5a45 	vmov.f32	s11, s10
 801926a:	eee7 5a43 	vfms.f32	s11, s14, s6
 801926e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8019272:	ee23 6a86 	vmul.f32	s12, s7, s12
 8019276:	eee7 5ae4 	vfms.f32	s11, s15, s9
 801927a:	eee4 6ac6 	vfms.f32	s13, s9, s12
 801927e:	ee22 4a84 	vmul.f32	s8, s5, s8
 8019282:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8019286:	ee62 2aa5 	vmul.f32	s5, s5, s11
 801928a:	edc5 6a03 	vstr	s13, [r5, #12]
 801928e:	ed85 7a08 	vstr	s14, [r5, #32]
 8019292:	edc5 7a07 	vstr	s15, [r5, #28]
 8019296:	ed85 4a00 	vstr	s8, [r5]
 801929a:	ed85 6a04 	vstr	s12, [r5, #16]
 801929e:	edc5 2a06 	vstr	s5, [r5, #24]
 80192a2:	f7fa fac9 	bl	8013838 <b_dcm2q>
 80192a6:	ed9d 7a5d 	vldr	s14, [sp, #372]	@ 0x174
 80192aa:	eddd 7a5e 	vldr	s15, [sp, #376]	@ 0x178
 80192ae:	eddd 6a5c 	vldr	s13, [sp, #368]	@ 0x170
 80192b2:	f887 31a0 	strb.w	r3, [r7, #416]	@ 0x1a0
 80192b6:	ee37 7a07 	vadd.f32	s14, s14, s14
 80192ba:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80192be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80192c2:	edcd 6a47 	vstr	s13, [sp, #284]	@ 0x11c
 80192c6:	ed8d 7a48 	vstr	s14, [sp, #288]	@ 0x120
 80192ca:	edcd 7a49 	vstr	s15, [sp, #292]	@ 0x124
 80192ce:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 80192d2:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 80192d6:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 80192da:	f7fe ba63 	b.w	80177a4 <iNemoEngine_API_Update+0x21d4>
 80192de:	bf00      	nop
 80192e0:	3e4cccce 	.word	0x3e4cccce
 80192e4:	3eaaaaab 	.word	0x3eaaaaab
 80192e8:	a958      	add	r1, sp, #352	@ 0x160
 80192ea:	a872      	add	r0, sp, #456	@ 0x1c8
 80192ec:	edcd 5a18 	vstr	s11, [sp, #96]	@ 0x60
 80192f0:	ed8d 0a08 	vstr	s0, [sp, #32]
 80192f4:	edcd 6a07 	vstr	s13, [sp, #28]
 80192f8:	ed8d 7a06 	vstr	s14, [sp, #24]
 80192fc:	f7fa fa9c 	bl	8013838 <b_dcm2q>
 8019300:	eddd 7a22 	vldr	s15, [sp, #136]	@ 0x88
 8019304:	eef7 9a00 	vmov.f32	s19, #112	@ 0x3f800000  1.0
 8019308:	edc7 7a72 	vstr	s15, [r7, #456]	@ 0x1c8
 801930c:	edc7 9a73 	vstr	s19, [r7, #460]	@ 0x1cc
 8019310:	4631      	mov	r1, r6
 8019312:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8019316:	f507 70ea 	add.w	r0, r7, #468	@ 0x1d4
 801931a:	f006 fc74 	bl	801fc06 <memset>
 801931e:	4ba0      	ldr	r3, [pc, #640]	@ (80195a0 <iNemoEngine_API_Update+0x3fd0>)
 8019320:	703e      	strb	r6, [r7, #0]
 8019322:	eef0 7a69 	vmov.f32	s15, s19
 8019326:	ed9d ba58 	vldr	s22, [sp, #352]	@ 0x160
 801932a:	eddd aa59 	vldr	s21, [sp, #356]	@ 0x164
 801932e:	eddd 9a5a 	vldr	s19, [sp, #360]	@ 0x168
 8019332:	eddd ca5b 	vldr	s25, [sp, #364]	@ 0x16c
 8019336:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801933a:	eddd 5a18 	vldr	s11, [sp, #96]	@ 0x60
 801933e:	ed9d 0a08 	vldr	s0, [sp, #32]
 8019342:	eddd 6a07 	vldr	s13, [sp, #28]
 8019346:	ed9d 7a06 	vldr	s14, [sp, #24]
 801934a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 801934e:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 8019352:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8019356:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 801935a:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 801935e:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8019362:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 8019366:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 801936a:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 801936e:	2601      	movs	r6, #1
 8019370:	f7fd bd29 	b.w	8016dc6 <iNemoEngine_API_Update+0x17f6>
 8019374:	eddf 7a94 	vldr	s15, [pc, #592]	@ 80195c8 <iNemoEngine_API_Update+0x3ff8>
 8019378:	eeb4 eae7 	vcmpe.f32	s28, s15
 801937c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019380:	f53d aeb2 	bmi.w	80170e8 <iNemoEngine_API_Update+0x1b18>
 8019384:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8019386:	2b00      	cmp	r3, #0
 8019388:	f47d aeb7 	bne.w	80170fa <iNemoEngine_API_Update+0x1b2a>
 801938c:	f7fd beac 	b.w	80170e8 <iNemoEngine_API_Update+0x1b18>
 8019390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019394:	d511      	bpl.n	80193ba <iNemoEngine_API_Update+0x3dea>
 8019396:	ed97 3a4d 	vldr	s6, [r7, #308]	@ 0x134
 801939a:	edd7 3a4f 	vldr	s7, [r7, #316]	@ 0x13c
 801939e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80193a2:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80193a6:	ee78 5a65 	vsub.f32	s11, s16, s11
 80193aa:	ee63 5aa5 	vmul.f32	s11, s7, s11
 80193ae:	eec5 eaa7 	vdiv.f32	s29, s11, s15
 80193b2:	ee7e ea83 	vadd.f32	s29, s29, s6
 80193b6:	f7fd bb68 	b.w	8016a8a <iNemoEngine_API_Update+0x14ba>
 80193ba:	edd7 5a50 	vldr	s11, [r7, #320]	@ 0x140
 80193be:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80193c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193c6:	f140 834a 	bpl.w	8019a5e <iNemoEngine_API_Update+0x448e>
 80193ca:	ed97 3a4f 	vldr	s6, [r7, #316]	@ 0x13c
 80193ce:	edd7 3a51 	vldr	s7, [r7, #324]	@ 0x144
 80193d2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80193d6:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80193da:	ee78 7a67 	vsub.f32	s15, s16, s15
 80193de:	ee63 3aa7 	vmul.f32	s7, s7, s15
 80193e2:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 80193e6:	ee7e ea83 	vadd.f32	s29, s29, s6
 80193ea:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 80193ee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80193f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193f6:	f6fd ab68 	blt.w	8016aca <iNemoEngine_API_Update+0x14fa>
 80193fa:	edd7 5a54 	vldr	s11, [r7, #336]	@ 0x150
 80193fe:	eef4 5ac8 	vcmpe.f32	s11, s16
 8019402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019406:	f340 8295 	ble.w	8019934 <iNemoEngine_API_Update+0x4364>
 801940a:	ed97 3a53 	vldr	s6, [r7, #332]	@ 0x14c
 801940e:	edd7 3a55 	vldr	s7, [r7, #340]	@ 0x154
 8019412:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8019416:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801941a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801941e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8019422:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 8019426:	ee7e ea83 	vadd.f32	s29, s29, s6
 801942a:	edd7 7a56 	vldr	s15, [r7, #344]	@ 0x158
 801942e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019436:	f6fd ab68 	blt.w	8016b0a <iNemoEngine_API_Update+0x153a>
 801943a:	edd7 5a58 	vldr	s11, [r7, #352]	@ 0x160
 801943e:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8019442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019446:	f140 8258 	bpl.w	80198fa <iNemoEngine_API_Update+0x432a>
 801944a:	ed97 3a57 	vldr	s6, [r7, #348]	@ 0x15c
 801944e:	edd7 3a59 	vldr	s7, [r7, #356]	@ 0x164
 8019452:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8019456:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801945a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801945e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8019462:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 8019466:	ee7e ea83 	vadd.f32	s29, s29, s6
 801946a:	edd7 7a5a 	vldr	s15, [r7, #360]	@ 0x168
 801946e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019476:	f6fd ab68 	blt.w	8016b4a <iNemoEngine_API_Update+0x157a>
 801947a:	edd7 5a5c 	vldr	s11, [r7, #368]	@ 0x170
 801947e:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8019482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019486:	f140 825f 	bpl.w	8019948 <iNemoEngine_API_Update+0x4378>
 801948a:	ed97 3a5b 	vldr	s6, [r7, #364]	@ 0x16c
 801948e:	edd7 3a5d 	vldr	s7, [r7, #372]	@ 0x174
 8019492:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8019496:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801949a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801949e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 80194a2:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 80194a6:	ee7e ea83 	vadd.f32	s29, s29, s6
 80194aa:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 80194ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80194b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194b6:	f6fd ab68 	blt.w	8016b8a <iNemoEngine_API_Update+0x15ba>
 80194ba:	edd7 5a60 	vldr	s11, [r7, #384]	@ 0x180
 80194be:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80194c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194c6:	f140 82d6 	bpl.w	8019a76 <iNemoEngine_API_Update+0x44a6>
 80194ca:	edd7 3a5f 	vldr	s7, [r7, #380]	@ 0x17c
 80194ce:	ed97 5a61 	vldr	s10, [r7, #388]	@ 0x184
 80194d2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80194d6:	ee35 5a63 	vsub.f32	s10, s10, s7
 80194da:	ee78 7a67 	vsub.f32	s15, s16, s15
 80194de:	ee25 5a27 	vmul.f32	s10, s10, s15
 80194e2:	eec5 ea25 	vdiv.f32	s29, s10, s11
 80194e6:	ee7e eaa3 	vadd.f32	s29, s29, s7
 80194ea:	f7fd bb65 	b.w	8016bb8 <iNemoEngine_API_Update+0x15e8>
 80194ee:	eef4 7ac4 	vcmpe.f32	s15, s8
 80194f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194f6:	f57e aef1 	bpl.w	80182dc <iNemoEngine_API_Update+0x2d0c>
 80194fa:	ed9f 4a2a 	vldr	s8, [pc, #168]	@ 80195a4 <iNemoEngine_API_Update+0x3fd4>
 80194fe:	eef4 7ac4 	vcmpe.f32	s15, s8
 8019502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019506:	da03      	bge.n	8019510 <iNemoEngine_API_Update+0x3f40>
 8019508:	eef7 9a00 	vmov.f32	s19, #112	@ 0x3f800000  1.0
 801950c:	f7fe bef8 	b.w	8018300 <iNemoEngine_API_Update+0x2d30>
 8019510:	ed9f 4a25 	vldr	s8, [pc, #148]	@ 80195a8 <iNemoEngine_API_Update+0x3fd8>
 8019514:	eef4 7ac4 	vcmpe.f32	s15, s8
 8019518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801951c:	f57e aef8 	bpl.w	8018310 <iNemoEngine_API_Update+0x2d40>
 8019520:	ed9f 4a20 	vldr	s8, [pc, #128]	@ 80195a4 <iNemoEngine_API_Update+0x3fd4>
 8019524:	ed9f 3a21 	vldr	s6, [pc, #132]	@ 80195ac <iNemoEngine_API_Update+0x3fdc>
 8019528:	eddf 9a21 	vldr	s19, [pc, #132]	@ 80195b0 <iNemoEngine_API_Update+0x3fe0>
 801952c:	ee37 4ac4 	vsub.f32	s8, s15, s8
 8019530:	eee4 9a03 	vfma.f32	s19, s8, s6
 8019534:	ed9f 4a1f 	vldr	s8, [pc, #124]	@ 80195b4 <iNemoEngine_API_Update+0x3fe4>
 8019538:	eef4 7ac4 	vcmpe.f32	s15, s8
 801953c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019540:	f6fe aef8 	blt.w	8018334 <iNemoEngine_API_Update+0x2d64>
 8019544:	ed9f 4a1c 	vldr	s8, [pc, #112]	@ 80195b8 <iNemoEngine_API_Update+0x3fe8>
 8019548:	eef4 7ac4 	vcmpe.f32	s15, s8
 801954c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019550:	f57e aef8 	bpl.w	8018344 <iNemoEngine_API_Update+0x2d74>
 8019554:	ed9f 4a17 	vldr	s8, [pc, #92]	@ 80195b4 <iNemoEngine_API_Update+0x3fe4>
 8019558:	ee37 4ac4 	vsub.f32	s8, s15, s8
 801955c:	eeb1 3a04 	vmov.f32	s6, #20	@ 0x40a00000  5.0
 8019560:	eef7 9a08 	vmov.f32	s19, #120	@ 0x3fc00000  1.5
 8019564:	eee4 9a03 	vfma.f32	s19, s8, s6
 8019568:	ed9f 4a14 	vldr	s8, [pc, #80]	@ 80195bc <iNemoEngine_API_Update+0x3fec>
 801956c:	eef4 7ac4 	vcmpe.f32	s15, s8
 8019570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019574:	f6fe aef8 	blt.w	8018368 <iNemoEngine_API_Update+0x2d98>
 8019578:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 801957c:	eef4 7ac4 	vcmpe.f32	s15, s8
 8019580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019584:	f57e aef7 	bpl.w	8018376 <iNemoEngine_API_Update+0x2da6>
 8019588:	ed9f 4a0c 	vldr	s8, [pc, #48]	@ 80195bc <iNemoEngine_API_Update+0x3fec>
 801958c:	ed9f 3a0c 	vldr	s6, [pc, #48]	@ 80195c0 <iNemoEngine_API_Update+0x3ff0>
 8019590:	ee37 4ac4 	vsub.f32	s8, s15, s8
 8019594:	eef2 9a05 	vmov.f32	s19, #37	@ 0x41280000  10.5
 8019598:	eee4 9a03 	vfma.f32	s19, s8, s6
 801959c:	f7fe bef5 	b.w	801838a <iNemoEngine_API_Update+0x2dba>
 80195a0:	40a00000 	.word	0x40a00000
 80195a4:	3c75c28f 	.word	0x3c75c28f
 80195a8:	3cf5c28f 	.word	0x3cf5c28f
 80195ac:	40d5555a 	.word	0x40d5555a
 80195b0:	3f866666 	.word	0x3f866666
 80195b4:	3d4ccccd 	.word	0x3d4ccccd
 80195b8:	3dcccccd 	.word	0x3dcccccd
 80195bc:	3e4ccccd 	.word	0x3e4ccccd
 80195c0:	43055555 	.word	0x43055555
 80195c4:	43c7ffff 	.word	0x43c7ffff
 80195c8:	3ecccccd 	.word	0x3ecccccd
 80195cc:	3e999998 	.word	0x3e999998
 80195d0:	3f99999a 	.word	0x3f99999a
 80195d4:	42100000 	.word	0x42100000
 80195d8:	42c7ffff 	.word	0x42c7ffff
 80195dc:	3d088889 	.word	0x3d088889
 80195e0:	3d0d3dcb 	.word	0x3d0d3dcb
 80195e4:	3e4cccd0 	.word	0x3e4cccd0
 80195e8:	3f8ccccd 	.word	0x3f8ccccd
 80195ec:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 80195f0:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80195f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195f8:	f140 8278 	bpl.w	8019aec <iNemoEngine_API_Update+0x451c>
 80195fc:	ed97 3a35 	vldr	s6, [r7, #212]	@ 0xd4
 8019600:	edd7 3a37 	vldr	s7, [r7, #220]	@ 0xdc
 8019604:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8019608:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801960c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8019610:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8019614:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 8019618:	ee39 9a03 	vadd.f32	s18, s18, s6
 801961c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8019620:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019628:	f6fe acd2 	blt.w	8017fd0 <iNemoEngine_API_Update+0x2a00>
 801962c:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 8019630:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8019634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019638:	f140 8178 	bpl.w	801992c <iNemoEngine_API_Update+0x435c>
 801963c:	ed97 3a39 	vldr	s6, [r7, #228]	@ 0xe4
 8019640:	edd7 3a3b 	vldr	s7, [r7, #236]	@ 0xec
 8019644:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8019648:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801964c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8019650:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8019654:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 8019658:	ee39 9a03 	vadd.f32	s18, s18, s6
 801965c:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 8019660:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019668:	f6fe acd2 	blt.w	8018010 <iNemoEngine_API_Update+0x2a40>
 801966c:	edd7 5a3e 	vldr	s11, [r7, #248]	@ 0xf8
 8019670:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8019674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019678:	f140 8154 	bpl.w	8019924 <iNemoEngine_API_Update+0x4354>
 801967c:	ed97 3a3d 	vldr	s6, [r7, #244]	@ 0xf4
 8019680:	edd7 3a3f 	vldr	s7, [r7, #252]	@ 0xfc
 8019684:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8019688:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801968c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8019690:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8019694:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 8019698:	ee39 9a03 	vadd.f32	s18, s18, s6
 801969c:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 80196a0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80196a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196a8:	f6fe acd2 	blt.w	8018050 <iNemoEngine_API_Update+0x2a80>
 80196ac:	edd7 5a42 	vldr	s11, [r7, #264]	@ 0x108
 80196b0:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80196b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196b8:	f140 8130 	bpl.w	801991c <iNemoEngine_API_Update+0x434c>
 80196bc:	ed97 3a41 	vldr	s6, [r7, #260]	@ 0x104
 80196c0:	edd7 3a43 	vldr	s7, [r7, #268]	@ 0x10c
 80196c4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80196c8:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80196cc:	ee78 7a67 	vsub.f32	s15, s16, s15
 80196d0:	ee63 3aa7 	vmul.f32	s7, s7, s15
 80196d4:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 80196d8:	ee39 9a03 	vadd.f32	s18, s18, s6
 80196dc:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 80196e0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80196e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196e8:	f6fe acd2 	blt.w	8018090 <iNemoEngine_API_Update+0x2ac0>
 80196ec:	edd7 5a46 	vldr	s11, [r7, #280]	@ 0x118
 80196f0:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80196f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196f8:	f140 8109 	bpl.w	801990e <iNemoEngine_API_Update+0x433e>
 80196fc:	edd7 3a45 	vldr	s7, [r7, #276]	@ 0x114
 8019700:	ed97 5a47 	vldr	s10, [r7, #284]	@ 0x11c
 8019704:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8019708:	ee35 5a63 	vsub.f32	s10, s10, s7
 801970c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8019710:	ee65 7a27 	vmul.f32	s15, s10, s15
 8019714:	ee87 9aa5 	vdiv.f32	s18, s15, s11
 8019718:	ee39 9a23 	vadd.f32	s18, s18, s7
 801971c:	f7fd b97f 	b.w	8016a1e <iNemoEngine_API_Update+0x144e>
 8019720:	eeb0 ba6a 	vmov.f32	s22, s21
 8019724:	f7fc bac7 	b.w	8015cb6 <iNemoEngine_API_Update+0x6e6>
 8019728:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801972c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019730:	dd45      	ble.n	80197be <iNemoEngine_API_Update+0x41ee>
 8019732:	ed5f 7a5c 	vldr	s15, [pc, #-368]	@ 80195c4 <iNemoEngine_API_Update+0x3ff4>
 8019736:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801973a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801973e:	f140 80d7 	bpl.w	80198f0 <iNemoEngine_API_Update+0x4320>
 8019742:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019746:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801974a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801974e:	f140 80bc 	bpl.w	80198ca <iNemoEngine_API_Update+0x42fa>
 8019752:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 8019756:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801975a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801975e:	da33      	bge.n	80197c8 <iNemoEngine_API_Update+0x41f8>
 8019760:	ed1f 6a60 	vldr	s12, [pc, #-384]	@ 80195e4 <iNemoEngine_API_Update+0x4014>
 8019764:	eee6 7a86 	vfma.f32	s15, s13, s12
 8019768:	eeb3 6a00 	vmov.f32	s12, #48	@ 0x41800000  16.0
 801976c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8019770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019774:	db39      	blt.n	80197ea <iNemoEngine_API_Update+0x421a>
 8019776:	ed5f 7a69 	vldr	s15, [pc, #-420]	@ 80195d4 <iNemoEngine_API_Update+0x4004>
 801977a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801977e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019782:	d539      	bpl.n	80197f8 <iNemoEngine_API_Update+0x4228>
 8019784:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8019788:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801978c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8019790:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8019794:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019798:	ed1f 6a71 	vldr	s12, [pc, #-452]	@ 80195d8 <iNemoEngine_API_Update+0x4008>
 801979c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80197a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197a4:	db09      	blt.n	80197ba <iNemoEngine_API_Update+0x41ea>
 80197a6:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 80197aa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80197ae:	ed1f 6a7a 	vldr	s12, [pc, #-488]	@ 80195c8 <iNemoEngine_API_Update+0x3ff8>
 80197b2:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80197b6:	eee6 7a86 	vfma.f32	s15, s13, s12
 80197ba:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80197be:	2300      	movs	r3, #0
 80197c0:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6
 80197c4:	f7fe b9a0 	b.w	8017b08 <iNemoEngine_API_Update+0x2538>
 80197c8:	eef3 7a00 	vmov.f32	s15, #48	@ 0x41800000  16.0
 80197cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80197d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197d4:	d5cf      	bpl.n	8019776 <iNemoEngine_API_Update+0x41a6>
 80197d6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80197da:	ee36 6ac6 	vsub.f32	s12, s13, s12
 80197de:	ed5f 5a85 	vldr	s11, [pc, #-532]	@ 80195cc <iNemoEngine_API_Update+0x3ffc>
 80197e2:	ed5f 7a85 	vldr	s15, [pc, #-532]	@ 80195d0 <iNemoEngine_API_Update+0x4000>
 80197e6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80197ea:	ed1f 6a86 	vldr	s12, [pc, #-536]	@ 80195d4 <iNemoEngine_API_Update+0x4004>
 80197ee:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80197f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197f6:	dbcf      	blt.n	8019798 <iNemoEngine_API_Update+0x41c8>
 80197f8:	ed5f 7a89 	vldr	s15, [pc, #-548]	@ 80195d8 <iNemoEngine_API_Update+0x4008>
 80197fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019804:	d5cf      	bpl.n	80197a6 <iNemoEngine_API_Update+0x41d6>
 8019806:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801980a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801980e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8019812:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8019816:	eee6 7a86 	vfma.f32	s15, s13, s12
 801981a:	e7ce      	b.n	80197ba <iNemoEngine_API_Update+0x41ea>
 801981c:	ed1f 4a91 	vldr	s8, [pc, #-580]	@ 80195dc <iNemoEngine_API_Update+0x400c>
 8019820:	ed5f 5a91 	vldr	s11, [pc, #-580]	@ 80195e0 <iNemoEngine_API_Update+0x4010>
 8019824:	ac4d      	add	r4, sp, #308	@ 0x134
 8019826:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801982a:	edd0 7a7c 	vldr	s15, [r0, #496]	@ 0x1f0
 801982e:	f5a0 73ae 	sub.w	r3, r0, #348	@ 0x15c
 8019832:	3101      	adds	r1, #1
 8019834:	eeb0 7a67 	vmov.f32	s14, s15
 8019838:	461a      	mov	r2, r3
 801983a:	ed92 6ad6 	vldr	s12, [r2, #856]	@ 0x358
 801983e:	320c      	adds	r2, #12
 8019840:	4290      	cmp	r0, r2
 8019842:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019846:	d1f8      	bne.n	801983a <iNemoEngine_API_Update+0x426a>
 8019848:	ee27 7a04 	vmul.f32	s14, s14, s8
 801984c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019850:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019854:	ed93 6ad6 	vldr	s12, [r3, #856]	@ 0x358
 8019858:	330c      	adds	r3, #12
 801985a:	ee36 6a47 	vsub.f32	s12, s12, s14
 801985e:	4298      	cmp	r0, r3
 8019860:	eee6 7a06 	vfma.f32	s15, s12, s12
 8019864:	d1f6      	bne.n	8019854 <iNemoEngine_API_Update+0x4284>
 8019866:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801986a:	2902      	cmp	r1, #2
 801986c:	f100 0004 	add.w	r0, r0, #4
 8019870:	ece4 7a01 	vstmia	r4!, {s15}
 8019874:	d1d9      	bne.n	801982a <iNemoEngine_API_Update+0x425a>
 8019876:	ed9d 6a4d 	vldr	s12, [sp, #308]	@ 0x134
 801987a:	eddd 7a4e 	vldr	s15, [sp, #312]	@ 0x138
 801987e:	ed9d 7a4f 	vldr	s14, [sp, #316]	@ 0x13c
 8019882:	eef1 3ac6 	vsqrt.f32	s7, s12
 8019886:	eeb1 4ae7 	vsqrt.f32	s8, s15
 801988a:	eef1 5ac7 	vsqrt.f32	s11, s14
 801988e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019892:	eeb3 6a00 	vmov.f32	s12, #48	@ 0x41800000  16.0
 8019896:	ee77 7a87 	vadd.f32	s15, s15, s14
 801989a:	edcd 3a4d 	vstr	s7, [sp, #308]	@ 0x134
 801989e:	eef4 7ac6 	vcmpe.f32	s15, s12
 80198a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198a6:	ed8d 4a4e 	vstr	s8, [sp, #312]	@ 0x138
 80198aa:	edcd 5a4f 	vstr	s11, [sp, #316]	@ 0x13c
 80198ae:	f57e a98e 	bpl.w	8017bce <iNemoEngine_API_Update+0x25fe>
 80198b2:	2300      	movs	r3, #0
 80198b4:	edcd 4a9f 	vstr	s9, [sp, #636]	@ 0x27c
 80198b8:	ed8d 5aa0 	vstr	s10, [sp, #640]	@ 0x280
 80198bc:	edcd 6aa1 	vstr	s13, [sp, #644]	@ 0x284
 80198c0:	707b      	strb	r3, [r7, #1]
 80198c2:	9b03      	ldr	r3, [sp, #12]
 80198c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80198c6:	f7fd bf6d 	b.w	80177a4 <iNemoEngine_API_Update+0x21d4>
 80198ca:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 80198ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80198d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198d6:	f57f af77 	bpl.w	80197c8 <iNemoEngine_API_Update+0x41f8>
 80198da:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80198de:	ee36 6ac6 	vsub.f32	s12, s13, s12
 80198e2:	ed5f 5ac0 	vldr	s11, [pc, #-768]	@ 80195e4 <iNemoEngine_API_Update+0x4014>
 80198e6:	ed5f 7ac0 	vldr	s15, [pc, #-768]	@ 80195e8 <iNemoEngine_API_Update+0x4018>
 80198ea:	eee6 7a25 	vfma.f32	s15, s12, s11
 80198ee:	e73b      	b.n	8019768 <iNemoEngine_API_Update+0x4198>
 80198f0:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 80198f4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80198f8:	e761      	b.n	80197be <iNemoEngine_API_Update+0x41ee>
 80198fa:	eef0 7a65 	vmov.f32	s15, s11
 80198fe:	f7fd b90c 	b.w	8016b1a <iNemoEngine_API_Update+0x154a>
 8019902:	eef0 7a65 	vmov.f32	s15, s11
 8019906:	e6d1      	b.n	80196ac <iNemoEngine_API_Update+0x40dc>
 8019908:	eef0 7a65 	vmov.f32	s15, s11
 801990c:	e6ae      	b.n	801966c <iNemoEngine_API_Update+0x409c>
 801990e:	eef0 7a65 	vmov.f32	s15, s11
 8019912:	f7fe bbc5 	b.w	80180a0 <iNemoEngine_API_Update+0x2ad0>
 8019916:	eef0 7a65 	vmov.f32	s15, s11
 801991a:	e687      	b.n	801962c <iNemoEngine_API_Update+0x405c>
 801991c:	eef0 7a65 	vmov.f32	s15, s11
 8019920:	f7fe bb9e 	b.w	8018060 <iNemoEngine_API_Update+0x2a90>
 8019924:	eef0 7a65 	vmov.f32	s15, s11
 8019928:	f7fe bb7a 	b.w	8018020 <iNemoEngine_API_Update+0x2a50>
 801992c:	eef0 7a65 	vmov.f32	s15, s11
 8019930:	f7fe bb56 	b.w	8017fe0 <iNemoEngine_API_Update+0x2a10>
 8019934:	eef0 7a65 	vmov.f32	s15, s11
 8019938:	f7fd b8cf 	b.w	8016ada <iNemoEngine_API_Update+0x150a>
 801993c:	eef0 7a65 	vmov.f32	s15, s11
 8019940:	e59b      	b.n	801947a <iNemoEngine_API_Update+0x3eaa>
 8019942:	eef0 7a65 	vmov.f32	s15, s11
 8019946:	e5b8      	b.n	80194ba <iNemoEngine_API_Update+0x3eea>
 8019948:	eef0 7a65 	vmov.f32	s15, s11
 801994c:	f7fd b905 	b.w	8016b5a <iNemoEngine_API_Update+0x158a>
 8019950:	eef0 aa69 	vmov.f32	s21, s19
 8019954:	eeb0 ba69 	vmov.f32	s22, s19
 8019958:	f7fc b9ad 	b.w	8015cb6 <iNemoEngine_API_Update+0x6e6>
 801995c:	2a00      	cmp	r2, #0
 801995e:	f73e a94d 	bgt.w	8017bfc <iNemoEngine_API_Update+0x262c>
 8019962:	ed9d 5a8d 	vldr	s10, [sp, #564]	@ 0x234
 8019966:	ed9d 6a8e 	vldr	s12, [sp, #568]	@ 0x238
 801996a:	eddd 7a8f 	vldr	s15, [sp, #572]	@ 0x23c
 801996e:	eef1 5a00 	vmov.f32	s11, #16	@ 0x40800000  4.0
 8019972:	ee25 5a25 	vmul.f32	s10, s10, s11
 8019976:	ee26 6a25 	vmul.f32	s12, s12, s11
 801997a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801997e:	ed8d 5a8d 	vstr	s10, [sp, #564]	@ 0x234
 8019982:	ed8d 6a8e 	vstr	s12, [sp, #568]	@ 0x238
 8019986:	edcd 7a8f 	vstr	s15, [sp, #572]	@ 0x23c
 801998a:	f7fd bbfa 	b.w	8017182 <iNemoEngine_API_Update+0x1bb2>
 801998e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019990:	f002 02fd 	and.w	r2, r2, #253	@ 0xfd
 8019994:	2a01      	cmp	r2, #1
 8019996:	d002      	beq.n	801999e <iNemoEngine_API_Update+0x43ce>
 8019998:	2301      	movs	r3, #1
 801999a:	f7fe b84a 	b.w	8017a32 <iNemoEngine_API_Update+0x2462>
 801999e:	2b0a      	cmp	r3, #10
 80199a0:	d01b      	beq.n	80199da <iNemoEngine_API_Update+0x440a>
 80199a2:	eddf 7a6f 	vldr	s15, [pc, #444]	@ 8019b60 <iNemoEngine_API_Update+0x4590>
 80199a6:	3301      	adds	r3, #1
 80199a8:	eef4 9ae7 	vcmpe.f32	s19, s15
 80199ac:	f887 31a0 	strb.w	r3, [r7, #416]	@ 0x1a0
 80199b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199b4:	f04f 0300 	mov.w	r3, #0
 80199b8:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 80199bc:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 80199c0:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 80199c4:	da32      	bge.n	8019a2c <iNemoEngine_API_Update+0x445c>
 80199c6:	f897 31a2 	ldrb.w	r3, [r7, #418]	@ 0x1a2
 80199ca:	2b31      	cmp	r3, #49	@ 0x31
 80199cc:	f63e a942 	bhi.w	8017c54 <iNemoEngine_API_Update+0x2684>
 80199d0:	3301      	adds	r3, #1
 80199d2:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 80199d6:	f7fe b93d 	b.w	8017c54 <iNemoEngine_API_Update+0x2684>
 80199da:	f897 31a3 	ldrb.w	r3, [r7, #419]	@ 0x1a3
 80199de:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 80199e2:	f88d 2118 	strb.w	r2, [sp, #280]	@ 0x118
 80199e6:	3301      	adds	r3, #1
 80199e8:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 80199ec:	787b      	ldrb	r3, [r7, #1]
 80199ee:	edcd fa9f 	vstr	s31, [sp, #636]	@ 0x27c
 80199f2:	f240 1201 	movw	r2, #257	@ 0x101
 80199f6:	ed8d faa0 	vstr	s30, [sp, #640]	@ 0x280
 80199fa:	edcd 7aa1 	vstr	s15, [sp, #644]	@ 0x284
 80199fe:	f8ad 2116 	strh.w	r2, [sp, #278]	@ 0x116
 8019a02:	b13b      	cbz	r3, 8019a14 <iNemoEngine_API_Update+0x4444>
 8019a04:	2300      	movs	r3, #0
 8019a06:	edc7 fa6f 	vstr	s31, [r7, #444]	@ 0x1bc
 8019a0a:	ed87 fa70 	vstr	s30, [r7, #448]	@ 0x1c0
 8019a0e:	edc7 7a71 	vstr	s15, [r7, #452]	@ 0x1c4
 8019a12:	707b      	strb	r3, [r7, #1]
 8019a14:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8019b60 <iNemoEngine_API_Update+0x4590>
 8019a18:	eef4 9ae7 	vcmpe.f32	s19, s15
 8019a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a20:	db08      	blt.n	8019a34 <iNemoEngine_API_Update+0x4464>
 8019a22:	2300      	movs	r3, #0
 8019a24:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 8019a28:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 8019a2c:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 8019a30:	f7fe b910 	b.w	8017c54 <iNemoEngine_API_Update+0x2684>
 8019a34:	f897 31a2 	ldrb.w	r3, [r7, #418]	@ 0x1a2
 8019a38:	2b31      	cmp	r3, #49	@ 0x31
 8019a3a:	f63e a90b 	bhi.w	8017c54 <iNemoEngine_API_Update+0x2684>
 8019a3e:	3301      	adds	r3, #1
 8019a40:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 8019a44:	2300      	movs	r3, #0
 8019a46:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 8019a4a:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 8019a4e:	f7fe b901 	b.w	8017c54 <iNemoEngine_API_Update+0x2684>
 8019a52:	eef0 7a65 	vmov.f32	s15, s11
 8019a56:	e649      	b.n	80196ec <iNemoEngine_API_Update+0x411c>
 8019a58:	eef0 7a65 	vmov.f32	s15, s11
 8019a5c:	e4cd      	b.n	80193fa <iNemoEngine_API_Update+0x3e2a>
 8019a5e:	eef0 7a65 	vmov.f32	s15, s11
 8019a62:	f7fd b81a 	b.w	8016a9a <iNemoEngine_API_Update+0x14ca>
 8019a66:	eef0 7a65 	vmov.f32	s15, s11
 8019a6a:	e4e6      	b.n	801943a <iNemoEngine_API_Update+0x3e6a>
 8019a6c:	f507 63f3 	add.w	r3, r7, #1944	@ 0x798
 8019a70:	930e      	str	r3, [sp, #56]	@ 0x38
 8019a72:	f7fc b8ba 	b.w	8015bea <iNemoEngine_API_Update+0x61a>
 8019a76:	eef0 7a65 	vmov.f32	s15, s11
 8019a7a:	f7fd b88d 	b.w	8016b98 <iNemoEngine_API_Update+0x15c8>
 8019a7e:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	@ 0x1a6
 8019a82:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 8019a86:	2b27      	cmp	r3, #39	@ 0x27
 8019a88:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	@ 0x1a8
 8019a8c:	f103 0301 	add.w	r3, r3, #1
 8019a90:	bf98      	it	ls
 8019a92:	eef0 fa64 	vmovls.f32	s31, s9
 8019a96:	bf98      	it	ls
 8019a98:	eeb0 fa45 	vmovls.f32	s30, s10
 8019a9c:	bf98      	it	ls
 8019a9e:	eef0 7a66 	vmovls.f32	s15, s13
 8019aa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019aa6:	f04f 0201 	mov.w	r2, #1
 8019aaa:	bf14      	ite	ne
 8019aac:	b29b      	uxthne	r3, r3
 8019aae:	f64f 73ff 	movweq	r3, #65535	@ 0xffff
 8019ab2:	edcd fa9f 	vstr	s31, [sp, #636]	@ 0x27c
 8019ab6:	ed8d faa0 	vstr	s30, [sp, #640]	@ 0x280
 8019aba:	edcd 7aa1 	vstr	s15, [sp, #644]	@ 0x284
 8019abe:	f887 21a3 	strb.w	r2, [r7, #419]	@ 0x1a3
 8019ac2:	f8a7 31a8 	strh.w	r3, [r7, #424]	@ 0x1a8
 8019ac6:	e6fc      	b.n	80198c2 <iNemoEngine_API_Update+0x42f2>
 8019ac8:	f507 6597 	add.w	r5, r7, #1208	@ 0x4b8
 8019acc:	f7fe bdce 	b.w	801866c <iNemoEngine_API_Update+0x309c>
 8019ad0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8019ad4:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8019ad8:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 8019adc:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8019ae0:	f7fe b812 	b.w	8017b08 <iNemoEngine_API_Update+0x2538>
 8019ae4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019ae8:	f7ff ba35 	b.w	8018f56 <iNemoEngine_API_Update+0x3986>
 8019aec:	eef0 7a65 	vmov.f32	s15, s11
 8019af0:	f7fe ba56 	b.w	8017fa0 <iNemoEngine_API_Update+0x29d0>
 8019af4:	eef0 5a47 	vmov.f32	s11, s14
 8019af8:	eeb0 6a67 	vmov.f32	s12, s15
 8019afc:	eeb0 7a66 	vmov.f32	s14, s13
 8019b00:	4619      	mov	r1, r3
 8019b02:	465c      	mov	r4, fp
 8019b04:	46b1      	mov	r9, r6
 8019b06:	edd0 7a00 	vldr	s15, [r0]
 8019b0a:	eef0 6a65 	vmov.f32	s13, s11
 8019b0e:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8019b12:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8019b16:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8019b1a:	f7ff bb20 	b.w	801915e <iNemoEngine_API_Update+0x3b8e>
 8019b1e:	2306      	movs	r3, #6
 8019b20:	2608      	movs	r6, #8
 8019b22:	2204      	movs	r2, #4
 8019b24:	2402      	movs	r4, #2
 8019b26:	9306      	str	r3, [sp, #24]
 8019b28:	f04f 0e07 	mov.w	lr, #7
 8019b2c:	2105      	movs	r1, #5
 8019b2e:	4630      	mov	r0, r6
 8019b30:	4691      	mov	r9, r2
 8019b32:	2300      	movs	r3, #0
 8019b34:	f04f 0c01 	mov.w	ip, #1
 8019b38:	9404      	str	r4, [sp, #16]
 8019b3a:	f7ff baa8 	b.w	801908e <iNemoEngine_API_Update+0x3abe>
 8019b3e:	2104      	movs	r1, #4
 8019b40:	2301      	movs	r3, #1
 8019b42:	2203      	movs	r2, #3
 8019b44:	2607      	movs	r6, #7
 8019b46:	f04f 0e06 	mov.w	lr, #6
 8019b4a:	4608      	mov	r0, r1
 8019b4c:	f04f 0c00 	mov.w	ip, #0
 8019b50:	9304      	str	r3, [sp, #16]
 8019b52:	f7ff ba8d 	b.w	8019070 <iNemoEngine_API_Update+0x3aa0>
 8019b56:	eddf 9a03 	vldr	s19, [pc, #12]	@ 8019b64 <iNemoEngine_API_Update+0x4594>
 8019b5a:	f7fb be94 	b.w	8015886 <iNemoEngine_API_Update+0x2b6>
 8019b5e:	bf00      	nop
 8019b60:	42480000 	.word	0x42480000
 8019b64:	00000000 	.word	0x00000000

08019b68 <MEMS_runMagCal.constprop.0>:
 8019b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019c30 <MEMS_runMagCal.constprop.0+0xc8>
 8019b70:	ed2d 8b0e 	vpush	{d8-d14}
 8019b74:	f8ba 2008 	ldrh.w	r2, [sl, #8]
 8019b78:	f2ad 5d64 	subw	sp, sp, #1380	@ 0x564
 8019b7c:	2a82      	cmp	r2, #130	@ 0x82
 8019b7e:	9201      	str	r2, [sp, #4]
 8019b80:	f102 35ff 	add.w	r5, r2, #4294967295	@ 0xffffffff
 8019b84:	d946      	bls.n	8019c14 <MEMS_runMagCal.constprop.0+0xac>
 8019b86:	f9ba 1002 	ldrsh.w	r1, [sl, #2]
 8019b8a:	f8da 300c 	ldr.w	r3, [sl, #12]
 8019b8e:	9108      	str	r1, [sp, #32]
 8019b90:	fb05 3311 	mls	r3, r5, r1, r3
 8019b94:	f102 007e 	add.w	r0, r2, #126	@ 0x7e
 8019b98:	9303      	str	r3, [sp, #12]
 8019b9a:	2581      	movs	r5, #129	@ 0x81
 8019b9c:	2382      	movs	r3, #130	@ 0x82
 8019b9e:	b2c0      	uxtb	r0, r0
 8019ba0:	fb01 f505 	mul.w	r5, r1, r5
 8019ba4:	9301      	str	r3, [sp, #4]
 8019ba6:	461c      	mov	r4, r3
 8019ba8:	f8da 6010 	ldr.w	r6, [sl, #16]
 8019bac:	2300      	movs	r3, #0
 8019bae:	f50d 79a8 	add.w	r9, sp, #336	@ 0x150
 8019bb2:	f816 c033 	ldrb.w	ip, [r6, r3, lsl #3]
 8019bb6:	f809 c033 	strb.w	ip, [r9, r3, lsl #3]
 8019bba:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
 8019bbe:	eb09 01c3 	add.w	r1, r9, r3, lsl #3
 8019bc2:	3301      	adds	r3, #1
 8019bc4:	b2db      	uxtb	r3, r3
 8019bc6:	f8d7 c002 	ldr.w	ip, [r7, #2]
 8019bca:	88ff      	ldrh	r7, [r7, #6]
 8019bcc:	f8c1 c002 	str.w	ip, [r1, #2]
 8019bd0:	42a3      	cmp	r3, r4
 8019bd2:	80cf      	strh	r7, [r1, #6]
 8019bd4:	d3ed      	bcc.n	8019bb2 <MEMS_runMagCal.constprop.0+0x4a>
 8019bd6:	2a82      	cmp	r2, #130	@ 0x82
 8019bd8:	bf38      	it	cc
 8019bda:	2282      	movcc	r2, #130	@ 0x82
 8019bdc:	3a82      	subs	r2, #130	@ 0x82
 8019bde:	f8aa 2008 	strh.w	r2, [sl, #8]
 8019be2:	b1a0      	cbz	r0, 8019c0e <MEMS_runMagCal.constprop.0+0xa6>
 8019be4:	f8da 3010 	ldr.w	r3, [sl, #16]
 8019be8:	3302      	adds	r3, #2
 8019bea:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8019bee:	2700      	movs	r7, #0
 8019bf0:	f893 640e 	ldrb.w	r6, [r3, #1038]	@ 0x40e
 8019bf4:	f8d3 1410 	ldr.w	r1, [r3, #1040]	@ 0x410
 8019bf8:	f8b3 2414 	ldrh.w	r2, [r3, #1044]	@ 0x414
 8019bfc:	f803 6c02 	strb.w	r6, [r3, #-2]
 8019c00:	6019      	str	r1, [r3, #0]
 8019c02:	809a      	strh	r2, [r3, #4]
 8019c04:	f883 740e 	strb.w	r7, [r3, #1038]	@ 0x40e
 8019c08:	3308      	adds	r3, #8
 8019c0a:	4298      	cmp	r0, r3
 8019c0c:	d1f0      	bne.n	8019bf0 <MEMS_runMagCal.constprop.0+0x88>
 8019c0e:	9b03      	ldr	r3, [sp, #12]
 8019c10:	4622      	mov	r2, r4
 8019c12:	e01b      	b.n	8019c4c <MEMS_runMagCal.constprop.0+0xe4>
 8019c14:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 8019c18:	9308      	str	r3, [sp, #32]
 8019c1a:	fb03 f505 	mul.w	r5, r3, r5
 8019c1e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8019c22:	1b5b      	subs	r3, r3, r5
 8019c24:	9303      	str	r3, [sp, #12]
 8019c26:	b17a      	cbz	r2, 8019c48 <MEMS_runMagCal.constprop.0+0xe0>
 8019c28:	4614      	mov	r4, r2
 8019c2a:	2000      	movs	r0, #0
 8019c2c:	e7bc      	b.n	8019ba8 <MEMS_runMagCal.constprop.0+0x40>
 8019c2e:	bf00      	nop
 8019c30:	2000038c 	.word	0x2000038c
 8019c34:	00000000 	.word	0x00000000
 8019c38:	43020000 	.word	0x43020000
 8019c3c:	447a0000 	.word	0x447a0000
 8019c40:	4423d666 	.word	0x4423d666
 8019c44:	42c80000 	.word	0x42c80000
 8019c48:	f8aa 2008 	strh.w	r2, [sl, #8]
 8019c4c:	18eb      	adds	r3, r5, r3
 8019c4e:	9302      	str	r3, [sp, #8]
 8019c50:	f8ca 304c 	str.w	r3, [sl, #76]	@ 0x4c
 8019c54:	2a00      	cmp	r2, #0
 8019c56:	f000 8391 	beq.w	801a37c <MEMS_runMagCal.constprop.0+0x814>
 8019c5a:	4619      	mov	r1, r3
 8019c5c:	f8da 301c 	ldr.w	r3, [sl, #28]
 8019c60:	f501 30c3 	add.w	r0, r1, #99840	@ 0x18600
 8019c64:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8019c68:	30a0      	adds	r0, #160	@ 0xa0
 8019c6a:	fb03 f101 	mul.w	r1, r3, r1
 8019c6e:	4288      	cmp	r0, r1
 8019c70:	f0c0 838f 	bcc.w	801a392 <MEMS_runMagCal.constprop.0+0x82a>
 8019c74:	f8da 10a4 	ldr.w	r1, [sl, #164]	@ 0xa4
 8019c78:	4288      	cmp	r0, r1
 8019c7a:	f0c0 838a 	bcc.w	801a392 <MEMS_runMagCal.constprop.0+0x82a>
 8019c7e:	f89a 30a0 	ldrb.w	r3, [sl, #160]	@ 0xa0
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	f000 838f 	beq.w	801a3a6 <MEMS_runMagCal.constprop.0+0x83e>
 8019c88:	f04f 2380 	mov.w	r3, #2147516416	@ 0x80008000
 8019c8c:	1e54      	subs	r4, r2, #1
 8019c8e:	9334      	str	r3, [sp, #208]	@ 0xd0
 8019c90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019c94:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 8019c34 <MEMS_runMagCal.constprop.0+0xcc>
 8019c98:	edda 8a01 	vldr	s17, [sl, #4]
 8019c9c:	f8ad 30d4 	strh.w	r3, [sp, #212]	@ 0xd4
 8019ca0:	b2a4      	uxth	r4, r4
 8019ca2:	f06f 2380 	mvn.w	r3, #2147516416	@ 0x80008000
 8019ca6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019caa:	2c03      	cmp	r4, #3
 8019cac:	9344      	str	r3, [sp, #272]	@ 0x110
 8019cae:	f50d 79a8 	add.w	r9, sp, #336	@ 0x150
 8019cb2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8019cb6:	f04f 0100 	mov.w	r1, #0
 8019cba:	ed9a 6a1f 	vldr	s12, [sl, #124]	@ 0x7c
 8019cbe:	edda 5a1c 	vldr	s11, [sl, #112]	@ 0x70
 8019cc2:	ed9a 5a23 	vldr	s10, [sl, #140]	@ 0x8c
 8019cc6:	edda 4a1d 	vldr	s9, [sl, #116]	@ 0x74
 8019cca:	ed9a 4a27 	vldr	s8, [sl, #156]	@ 0x9c
 8019cce:	edda 3a1e 	vldr	s7, [sl, #120]	@ 0x78
 8019cd2:	f8ad 3114 	strh.w	r3, [sp, #276]	@ 0x114
 8019cd6:	ee87 8aa8 	vdiv.f32	s16, s15, s17
 8019cda:	bf28      	it	cs
 8019cdc:	2403      	movcs	r4, #3
 8019cde:	4648      	mov	r0, r9
 8019ce0:	460b      	mov	r3, r1
 8019ce2:	eef0 7a47 	vmov.f32	s15, s14
 8019ce6:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
 8019cea:	7805      	ldrb	r5, [r0, #0]
 8019cec:	3301      	adds	r3, #1
 8019cee:	b29b      	uxth	r3, r3
 8019cf0:	2d00      	cmp	r5, #0
 8019cf2:	d052      	beq.n	8019d9a <MEMS_runMagCal.constprop.0+0x232>
 8019cf4:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8019cf8:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8019cfc:	f9bd 50d0 	ldrsh.w	r5, [sp, #208]	@ 0xd0
 8019d00:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
 8019d04:	ee07 ca10 	vmov	s14, ip
 8019d08:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8019d0c:	ee07 7a10 	vmov	s14, r7
 8019d10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019d14:	4565      	cmp	r5, ip
 8019d16:	bfb8      	it	lt
 8019d18:	4665      	movlt	r5, ip
 8019d1a:	ee37 7a64 	vsub.f32	s14, s14, s9
 8019d1e:	f8ad 50d0 	strh.w	r5, [sp, #208]	@ 0xd0
 8019d22:	f9bd 5110 	ldrsh.w	r5, [sp, #272]	@ 0x110
 8019d26:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8019d2a:	ee27 7a05 	vmul.f32	s14, s14, s10
 8019d2e:	4565      	cmp	r5, ip
 8019d30:	bfa8      	it	ge
 8019d32:	4665      	movge	r5, ip
 8019d34:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019d38:	ee27 7a07 	vmul.f32	s14, s14, s14
 8019d3c:	f8ad 5110 	strh.w	r5, [sp, #272]	@ 0x110
 8019d40:	f9bd 50d2 	ldrsh.w	r5, [sp, #210]	@ 0xd2
 8019d44:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8019d48:	42bd      	cmp	r5, r7
 8019d4a:	bfb8      	it	lt
 8019d4c:	463d      	movlt	r5, r7
 8019d4e:	f8ad 50d2 	strh.w	r5, [sp, #210]	@ 0xd2
 8019d52:	f9bd 5112 	ldrsh.w	r5, [sp, #274]	@ 0x112
 8019d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d5a:	ee07 6a10 	vmov	s14, r6
 8019d5e:	42bd      	cmp	r5, r7
 8019d60:	bfa8      	it	ge
 8019d62:	463d      	movge	r5, r7
 8019d64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019d68:	f8ad 5112 	strh.w	r5, [sp, #274]	@ 0x112
 8019d6c:	f9bd 50d4 	ldrsh.w	r5, [sp, #212]	@ 0xd4
 8019d70:	ee37 7a63 	vsub.f32	s14, s14, s7
 8019d74:	42b5      	cmp	r5, r6
 8019d76:	bfb8      	it	lt
 8019d78:	4635      	movlt	r5, r6
 8019d7a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019d7e:	f8ad 50d4 	strh.w	r5, [sp, #212]	@ 0xd4
 8019d82:	f9bd 5114 	ldrsh.w	r5, [sp, #276]	@ 0x114
 8019d86:	eee7 7a07 	vfma.f32	s15, s14, s14
 8019d8a:	42b5      	cmp	r5, r6
 8019d8c:	f101 0101 	add.w	r1, r1, #1
 8019d90:	bfa8      	it	ge
 8019d92:	4635      	movge	r5, r6
 8019d94:	b249      	sxtb	r1, r1
 8019d96:	f8ad 5114 	strh.w	r5, [sp, #276]	@ 0x114
 8019d9a:	42a3      	cmp	r3, r4
 8019d9c:	f100 0008 	add.w	r0, r0, #8
 8019da0:	d9a3      	bls.n	8019cea <MEMS_runMagCal.constprop.0+0x182>
 8019da2:	4293      	cmp	r3, r2
 8019da4:	f081 8117 	bcs.w	801afd6 <MEMS_runMagCal.constprop.0+0x146e>
 8019da8:	1ad2      	subs	r2, r2, r3
 8019daa:	3a01      	subs	r2, #1
 8019dac:	fa13 f282 	uxtah	r2, r3, r2
 8019db0:	f109 0708 	add.w	r7, r9, #8
 8019db4:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 8019db8:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
 8019dbc:	f04f 0c00 	mov.w	ip, #0
 8019dc0:	781a      	ldrb	r2, [r3, #0]
 8019dc2:	1c4e      	adds	r6, r1, #1
 8019dc4:	2a00      	cmp	r2, #0
 8019dc6:	f000 8095 	beq.w	8019ef4 <MEMS_runMagCal.constprop.0+0x38c>
 8019dca:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 8019dce:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 8019dd2:	f9bd 10d0 	ldrsh.w	r1, [sp, #208]	@ 0xd0
 8019dd6:	f933 2c06 	ldrsh.w	r2, [r3, #-6]
 8019dda:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8019dde:	ee07 5a10 	vmov	s14, r5
 8019de2:	eeb8 3ac7 	vcvt.f32.s32	s6, s14
 8019de6:	ee07 4a10 	vmov	s14, r4
 8019dea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019dee:	42a9      	cmp	r1, r5
 8019df0:	ee37 7a64 	vsub.f32	s14, s14, s9
 8019df4:	ee33 3a65 	vsub.f32	s6, s6, s11
 8019df8:	ee27 7a05 	vmul.f32	s14, s14, s10
 8019dfc:	bfb8      	it	lt
 8019dfe:	4629      	movlt	r1, r5
 8019e00:	ee23 3a06 	vmul.f32	s6, s6, s12
 8019e04:	ee27 7a07 	vmul.f32	s14, s14, s14
 8019e08:	f8ad 10d0 	strh.w	r1, [sp, #208]	@ 0xd0
 8019e0c:	b271      	sxtb	r1, r6
 8019e0e:	f933 6c16 	ldrsh.w	r6, [r3, #-22]
 8019e12:	eea3 7a03 	vfma.f32	s14, s6, s6
 8019e16:	1b92      	subs	r2, r2, r6
 8019e18:	f933 6c1e 	ldrsh.w	r6, [r3, #-30]
 8019e1c:	ee06 0a90 	vmov	s13, r0
 8019e20:	1bae      	subs	r6, r5, r6
 8019e22:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 8019e26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019e2a:	f933 6c14 	ldrsh.w	r6, [r3, #-20]
 8019e2e:	ee07 2a10 	vmov	s14, r2
 8019e32:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019e36:	f933 2c04 	ldrsh.w	r2, [r3, #-4]
 8019e3a:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8019e3e:	1b92      	subs	r2, r2, r6
 8019e40:	f933 6c1c 	ldrsh.w	r6, [r3, #-28]
 8019e44:	ee66 6a84 	vmul.f32	s13, s13, s8
 8019e48:	1ba6      	subs	r6, r4, r6
 8019e4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e4e:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 8019e52:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8019e56:	f933 6c12 	ldrsh.w	r6, [r3, #-18]
 8019e5a:	ee06 2a90 	vmov	s13, r2
 8019e5e:	eeb0 7ac7 	vabs.f32	s14, s14
 8019e62:	f933 2c02 	ldrsh.w	r2, [r3, #-2]
 8019e66:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8019e6a:	1b92      	subs	r2, r2, r6
 8019e6c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019e70:	f933 6c1a 	ldrsh.w	r6, [r3, #-26]
 8019e74:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8019e78:	eef0 6ae6 	vabs.f32	s13, s13
 8019e7c:	1b86      	subs	r6, r0, r6
 8019e7e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8019e82:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 8019e86:	ee06 2a90 	vmov	s13, r2
 8019e8a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8019e8e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019e92:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8019e96:	eef0 6ae6 	vabs.f32	s13, s13
 8019e9a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019e9e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8019ea2:	ee17 2a10 	vmov	r2, s14
 8019ea6:	4594      	cmp	ip, r2
 8019ea8:	bf38      	it	cc
 8019eaa:	4694      	movcc	ip, r2
 8019eac:	f9bd 2110 	ldrsh.w	r2, [sp, #272]	@ 0x110
 8019eb0:	4295      	cmp	r5, r2
 8019eb2:	bfa8      	it	ge
 8019eb4:	4615      	movge	r5, r2
 8019eb6:	f9bd 20d2 	ldrsh.w	r2, [sp, #210]	@ 0xd2
 8019eba:	f8ad 5110 	strh.w	r5, [sp, #272]	@ 0x110
 8019ebe:	42a2      	cmp	r2, r4
 8019ec0:	bfb8      	it	lt
 8019ec2:	4622      	movlt	r2, r4
 8019ec4:	f9bd 5112 	ldrsh.w	r5, [sp, #274]	@ 0x112
 8019ec8:	f8ad 20d2 	strh.w	r2, [sp, #210]	@ 0xd2
 8019ecc:	f9bd 20d4 	ldrsh.w	r2, [sp, #212]	@ 0xd4
 8019ed0:	42a5      	cmp	r5, r4
 8019ed2:	bfa8      	it	ge
 8019ed4:	4625      	movge	r5, r4
 8019ed6:	4282      	cmp	r2, r0
 8019ed8:	bfb8      	it	lt
 8019eda:	4602      	movlt	r2, r0
 8019edc:	4614      	mov	r4, r2
 8019ede:	f9bd 2114 	ldrsh.w	r2, [sp, #276]	@ 0x114
 8019ee2:	f8ad 5112 	strh.w	r5, [sp, #274]	@ 0x112
 8019ee6:	4282      	cmp	r2, r0
 8019ee8:	bfa8      	it	ge
 8019eea:	4602      	movge	r2, r0
 8019eec:	f8ad 40d4 	strh.w	r4, [sp, #212]	@ 0xd4
 8019ef0:	f8ad 2114 	strh.w	r2, [sp, #276]	@ 0x114
 8019ef4:	3308      	adds	r3, #8
 8019ef6:	429f      	cmp	r7, r3
 8019ef8:	f47f af62 	bne.w	8019dc0 <MEMS_runMagCal.constprop.0+0x258>
 8019efc:	2900      	cmp	r1, #0
 8019efe:	f000 8244 	beq.w	801a38a <MEMS_runMagCal.constprop.0+0x822>
 8019f02:	f9bd 20d0 	ldrsh.w	r2, [sp, #208]	@ 0xd0
 8019f06:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8019f0a:	f280 823d 	bge.w	801a388 <MEMS_runMagCal.constprop.0+0x820>
 8019f0e:	f9bd 4110 	ldrsh.w	r4, [sp, #272]	@ 0x110
 8019f12:	f514 4f80 	cmn.w	r4, #16384	@ 0x4000
 8019f16:	f2c0 8237 	blt.w	801a388 <MEMS_runMagCal.constprop.0+0x820>
 8019f1a:	f9bd 30d2 	ldrsh.w	r3, [sp, #210]	@ 0xd2
 8019f1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8019f22:	f280 8231 	bge.w	801a388 <MEMS_runMagCal.constprop.0+0x820>
 8019f26:	f9bd 7112 	ldrsh.w	r7, [sp, #274]	@ 0x112
 8019f2a:	f517 4f80 	cmn.w	r7, #16384	@ 0x4000
 8019f2e:	f2c0 822b 	blt.w	801a388 <MEMS_runMagCal.constprop.0+0x820>
 8019f32:	f9bd 00d4 	ldrsh.w	r0, [sp, #212]	@ 0xd4
 8019f36:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 8019f3a:	f280 8225 	bge.w	801a388 <MEMS_runMagCal.constprop.0+0x820>
 8019f3e:	f9bd 6114 	ldrsh.w	r6, [sp, #276]	@ 0x114
 8019f42:	f516 4f80 	cmn.w	r6, #16384	@ 0x4000
 8019f46:	f2c0 821f 	blt.w	801a388 <MEMS_runMagCal.constprop.0+0x820>
 8019f4a:	ee07 1a10 	vmov	s14, r1
 8019f4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019f52:	1bd9      	subs	r1, r3, r7
 8019f54:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8019f58:	1b12      	subs	r2, r2, r4
 8019f5a:	428a      	cmp	r2, r1
 8019f5c:	4613      	mov	r3, r2
 8019f5e:	eba0 0006 	sub.w	r0, r0, r6
 8019f62:	bfb8      	it	lt
 8019f64:	460b      	movlt	r3, r1
 8019f66:	4283      	cmp	r3, r0
 8019f68:	bfb8      	it	lt
 8019f6a:	4603      	movlt	r3, r0
 8019f6c:	ed1f 7ace 	vldr	s14, [pc, #-824]	@ 8019c38 <MEMS_runMagCal.constprop.0+0xd0>
 8019f70:	eef1 7ae6 	vsqrt.f32	s15, s13
 8019f74:	ee06 3a90 	vmov	s13, r3
 8019f78:	ee28 7a07 	vmul.f32	s14, s16, s14
 8019f7c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019f80:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8019f84:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8019f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f8c:	f100 81fc 	bmi.w	801a388 <MEMS_runMagCal.constprop.0+0x820>
 8019f90:	ee07 ca10 	vmov	s14, ip
 8019f94:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8019f98:	ed1f 6ad8 	vldr	s12, [pc, #-864]	@ 8019c3c <MEMS_runMagCal.constprop.0+0xd4>
 8019f9c:	ee27 7a28 	vmul.f32	s14, s14, s17
 8019fa0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8019fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fa8:	f300 81ee 	bgt.w	801a388 <MEMS_runMagCal.constprop.0+0x820>
 8019fac:	eeb1 6a04 	vmov.f32	s12, #20	@ 0x40a00000  5.0
 8019fb0:	ee28 6a06 	vmul.f32	s12, s16, s12
 8019fb4:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8019fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fbc:	f301 805a 	bgt.w	801b074 <MEMS_runMagCal.constprop.0+0x150c>
 8019fc0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8019fc4:	ee26 7a07 	vmul.f32	s14, s12, s14
 8019fc8:	eef4 6ac7 	vcmpe.f32	s13, s14
 8019fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fd0:	f301 8078 	bgt.w	801b0c4 <MEMS_runMagCal.constprop.0+0x155c>
 8019fd4:	2300      	movs	r3, #0
 8019fd6:	930d      	str	r3, [sp, #52]	@ 0x34
 8019fd8:	9304      	str	r3, [sp, #16]
 8019fda:	2100      	movs	r1, #0
 8019fdc:	ed1f 7ae8 	vldr	s14, [pc, #-928]	@ 8019c40 <MEMS_runMagCal.constprop.0+0xd8>
 8019fe0:	f89a 406c 	ldrb.w	r4, [sl, #108]	@ 0x6c
 8019fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fec:	f140 81e6 	bpl.w	801a3bc <MEMS_runMagCal.constprop.0+0x854>
 8019ff0:	ed1f 7aec 	vldr	s14, [pc, #-944]	@ 8019c44 <MEMS_runMagCal.constprop.0+0xdc>
 8019ff4:	ee27 0a87 	vmul.f32	s0, s15, s14
 8019ff8:	2c01      	cmp	r4, #1
 8019ffa:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8019ffe:	ed8d 0a13 	vstr	s0, [sp, #76]	@ 0x4c
 801a002:	ee17 3a90 	vmov	r3, s15
 801a006:	b29b      	uxth	r3, r3
 801a008:	d90c      	bls.n	801a024 <MEMS_runMagCal.constprop.0+0x4bc>
 801a00a:	2bc7      	cmp	r3, #199	@ 0xc7
 801a00c:	f200 8791 	bhi.w	801af32 <MEMS_runMagCal.constprop.0+0x13ca>
 801a010:	2400      	movs	r4, #0
 801a012:	23ff      	movs	r3, #255	@ 0xff
 801a014:	f88a 406c 	strb.w	r4, [sl, #108]	@ 0x6c
 801a018:	f88a 40a0 	strb.w	r4, [sl, #160]	@ 0xa0
 801a01c:	f88a 4054 	strb.w	r4, [sl, #84]	@ 0x54
 801a020:	f88a 30a2 	strb.w	r3, [sl, #162]	@ 0xa2
 801a024:	2900      	cmp	r1, #0
 801a026:	f040 81a0 	bne.w	801a36a <MEMS_runMagCal.constprop.0+0x802>
 801a02a:	f99a 3026 	ldrsb.w	r3, [sl, #38]	@ 0x26
 801a02e:	f89a 8025 	ldrb.w	r8, [sl, #37]	@ 0x25
 801a032:	2b00      	cmp	r3, #0
 801a034:	f2c0 874c 	blt.w	801aed0 <MEMS_runMagCal.constprop.0+0x1368>
 801a038:	3301      	adds	r3, #1
 801a03a:	fbb3 f2f8 	udiv	r2, r3, r8
 801a03e:	fb08 3312 	mls	r3, r8, r2, r3
 801a042:	b25b      	sxtb	r3, r3
 801a044:	461f      	mov	r7, r3
 801a046:	f89a 6024 	ldrb.w	r6, [sl, #36]	@ 0x24
 801a04a:	f88a 3026 	strb.w	r3, [sl, #38]	@ 0x26
 801a04e:	3601      	adds	r6, #1
 801a050:	4546      	cmp	r6, r8
 801a052:	bfa8      	it	ge
 801a054:	4646      	movge	r6, r8
 801a056:	b2f5      	uxtb	r5, r6
 801a058:	f88a 5024 	strb.w	r5, [sl, #36]	@ 0x24
 801a05c:	f003 f8d8 	bl	801d210 <roundf>
 801a060:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801a064:	eb0a 0347 	add.w	r3, sl, r7, lsl #1
 801a068:	ee10 2a10 	vmov	r2, s0
 801a06c:	f8da 1020 	ldr.w	r1, [sl, #32]
 801a070:	851a      	strh	r2, [r3, #40]	@ 0x28
 801a072:	b129      	cbz	r1, 801a080 <MEMS_runMagCal.constprop.0+0x518>
 801a074:	9a02      	ldr	r2, [sp, #8]
 801a076:	f501 6396 	add.w	r3, r1, #1200	@ 0x4b0
 801a07a:	429a      	cmp	r2, r3
 801a07c:	f0c0 817e 	bcc.w	801a37c <MEMS_runMagCal.constprop.0+0x814>
 801a080:	9b04      	ldr	r3, [sp, #16]
 801a082:	2b01      	cmp	r3, #1
 801a084:	f000 817a 	beq.w	801a37c <MEMS_runMagCal.constprop.0+0x814>
 801a088:	1ea3      	subs	r3, r4, #2
 801a08a:	2b01      	cmp	r3, #1
 801a08c:	f240 8761 	bls.w	801af52 <MEMS_runMagCal.constprop.0+0x13ea>
 801a090:	f8da 501c 	ldr.w	r5, [sl, #28]
 801a094:	f89a 3054 	ldrb.w	r3, [sl, #84]	@ 0x54
 801a098:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a09a:	eeb0 ba08 	vmov.f32	s22, #8	@ 0x40400000  3.0
 801a09e:	ee28 ba0b 	vmul.f32	s22, s16, s22
 801a0a2:	eddf 7acb 	vldr	s15, [pc, #812]	@ 801a3d0 <MEMS_runMagCal.constprop.0+0x868>
 801a0a6:	f8da 30a4 	ldr.w	r3, [sl, #164]	@ 0xa4
 801a0aa:	ed9f 7aca 	vldr	s14, [pc, #808]	@ 801a3d4 <MEMS_runMagCal.constprop.0+0x86c>
 801a0ae:	f89a 40a0 	ldrb.w	r4, [sl, #160]	@ 0xa0
 801a0b2:	ee6b 7a27 	vmul.f32	s15, s22, s15
 801a0b6:	f503 521c 	add.w	r2, r3, #9984	@ 0x2700
 801a0ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801a0be:	ee6b aa0b 	vmul.f32	s21, s22, s22
 801a0c2:	ee17 1a90 	vmov	r1, s15
 801a0c6:	b28f      	uxth	r7, r1
 801a0c8:	9902      	ldr	r1, [sp, #8]
 801a0ca:	3210      	adds	r2, #16
 801a0cc:	eef7 9a08 	vmov.f32	s19, #120	@ 0x3fc00000  1.5
 801a0d0:	4291      	cmp	r1, r2
 801a0d2:	ee6a aa87 	vmul.f32	s21, s21, s14
 801a0d6:	ee6b 9a29 	vmul.f32	s19, s22, s19
 801a0da:	d951      	bls.n	801a180 <MEMS_runMagCal.constprop.0+0x618>
 801a0dc:	f242 3228 	movw	r2, #9000	@ 0x2328
 801a0e0:	4291      	cmp	r1, r2
 801a0e2:	f89a 00a1 	ldrb.w	r0, [sl, #161]	@ 0xa1
 801a0e6:	bf18      	it	ne
 801a0e8:	f5a1 560c 	subne.w	r6, r1, #8960	@ 0x2300
 801a0ec:	f99a 10a2 	ldrsb.w	r1, [sl, #162]	@ 0xa2
 801a0f0:	bf14      	ite	ne
 801a0f2:	3e28      	subne	r6, #40	@ 0x28
 801a0f4:	2600      	moveq	r6, #0
 801a0f6:	42a0      	cmp	r0, r4
 801a0f8:	f101 0101 	add.w	r1, r1, #1
 801a0fc:	f001 8034 	beq.w	801b168 <MEMS_runMagCal.constprop.0+0x1600>
 801a100:	1b0a      	subs	r2, r1, r4
 801a102:	fb92 f1f0 	sdiv	r1, r2, r0
 801a106:	fb00 2111 	mls	r1, r0, r1, r2
 801a10a:	2900      	cmp	r1, #0
 801a10c:	bfb8      	it	lt
 801a10e:	1809      	addlt	r1, r1, r0
 801a110:	b209      	sxth	r1, r1
 801a112:	2c00      	cmp	r4, #0
 801a114:	f001 80c6 	beq.w	801b2a4 <MEMS_runMagCal.constprop.0+0x173c>
 801a118:	1b9b      	subs	r3, r3, r6
 801a11a:	f8dd e010 	ldr.w	lr, [sp, #16]
 801a11e:	fa1f f883 	uxth.w	r8, r3
 801a122:	eb04 0c01 	add.w	ip, r4, r1
 801a126:	e006      	b.n	801a136 <MEMS_runMagCal.constprop.0+0x5ce>
 801a128:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801a12c:	3101      	adds	r1, #1
 801a12e:	4561      	cmp	r1, ip
 801a130:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 801a134:	d01b      	beq.n	801a16e <MEMS_runMagCal.constprop.0+0x606>
 801a136:	fb91 f3f0 	sdiv	r3, r1, r0
 801a13a:	fb00 1313 	mls	r3, r0, r3, r1
 801a13e:	b2db      	uxtb	r3, r3
 801a140:	3304      	adds	r3, #4
 801a142:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
 801a146:	f8b2 20a0 	ldrh.w	r2, [r2, #160]	@ 0xa0
 801a14a:	4442      	add	r2, r8
 801a14c:	b212      	sxth	r2, r2
 801a14e:	2a00      	cmp	r2, #0
 801a150:	daea      	bge.n	801a128 <MEMS_runMagCal.constprop.0+0x5c0>
 801a152:	2c00      	cmp	r4, #0
 801a154:	f000 86b8 	beq.w	801aec8 <MEMS_runMagCal.constprop.0+0x1360>
 801a158:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801a15c:	3101      	adds	r1, #1
 801a15e:	3c01      	subs	r4, #1
 801a160:	4561      	cmp	r1, ip
 801a162:	b2e4      	uxtb	r4, r4
 801a164:	f04f 0e01 	mov.w	lr, #1
 801a168:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 801a16c:	d1e3      	bne.n	801a136 <MEMS_runMagCal.constprop.0+0x5ce>
 801a16e:	f1be 0f01 	cmp.w	lr, #1
 801a172:	f88a 40a0 	strb.w	r4, [sl, #160]	@ 0xa0
 801a176:	f001 8069 	beq.w	801b24c <MEMS_runMagCal.constprop.0+0x16e4>
 801a17a:	f8ca 60a4 	str.w	r6, [sl, #164]	@ 0xa4
 801a17e:	4633      	mov	r3, r6
 801a180:	2c00      	cmp	r4, #0
 801a182:	f000 86ce 	beq.w	801af22 <MEMS_runMagCal.constprop.0+0x13ba>
 801a186:	f99a 20a2 	ldrsb.w	r2, [sl, #162]	@ 0xa2
 801a18a:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 801a18e:	f9b2 20c0 	ldrsh.w	r2, [r2, #192]	@ 0xc0
 801a192:	f502 529c 	add.w	r2, r2, #4992	@ 0x1380
 801a196:	3208      	adds	r2, #8
 801a198:	441a      	add	r2, r3
 801a19a:	9b03      	ldr	r3, [sp, #12]
 801a19c:	429a      	cmp	r2, r3
 801a19e:	f0c0 86b4 	bcc.w	801af0a <MEMS_runMagCal.constprop.0+0x13a2>
 801a1a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a1a4:	b913      	cbnz	r3, 801a1ac <MEMS_runMagCal.constprop.0+0x644>
 801a1a6:	2c0a      	cmp	r4, #10
 801a1a8:	f240 86bf 	bls.w	801af2a <MEMS_runMagCal.constprop.0+0x13c2>
 801a1ac:	ed9f 9a8a 	vldr	s18, [pc, #552]	@ 801a3d8 <MEMS_runMagCal.constprop.0+0x870>
 801a1b0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a1b4:	9306      	str	r3, [sp, #24]
 801a1b6:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 801a1ba:	9b04      	ldr	r3, [sp, #16]
 801a1bc:	930e      	str	r3, [sp, #56]	@ 0x38
 801a1be:	f04f 0b00 	mov.w	fp, #0
 801a1c2:	ee28 aa0a 	vmul.f32	s20, s16, s20
 801a1c6:	ee28 9a89 	vmul.f32	s18, s17, s18
 801a1ca:	465b      	mov	r3, fp
 801a1cc:	46d8      	mov	r8, fp
 801a1ce:	9510      	str	r5, [sp, #64]	@ 0x40
 801a1d0:	f8cd 901c 	str.w	r9, [sp, #28]
 801a1d4:	9a07      	ldr	r2, [sp, #28]
 801a1d6:	f812 1038 	ldrb.w	r1, [r2, r8, lsl #3]
 801a1da:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 801a1de:	2900      	cmp	r1, #0
 801a1e0:	f000 8150 	beq.w	801a484 <MEMS_runMagCal.constprop.0+0x91c>
 801a1e4:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
 801a1e8:	f8d2 4002 	ldr.w	r4, [r2, #2]
 801a1ec:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801a1f0:	6852      	ldr	r2, [r2, #4]
 801a1f2:	920c      	str	r2, [sp, #48]	@ 0x30
 801a1f4:	ee07 5a90 	vmov	s15, r5
 801a1f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a1fc:	f344 420f 	sbfx	r2, r4, #16, #16
 801a200:	eef0 7ae7 	vabs.f32	s15, s15
 801a204:	eef4 7aca 	vcmpe.f32	s15, s20
 801a208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a20c:	ea4f 4924 	mov.w	r9, r4, asr #16
 801a210:	d516      	bpl.n	801a240 <MEMS_runMagCal.constprop.0+0x6d8>
 801a212:	ee07 9a90 	vmov	s15, r9
 801a216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a21a:	eef0 7ae7 	vabs.f32	s15, s15
 801a21e:	eeb4 aae7 	vcmpe.f32	s20, s15
 801a222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a226:	dd0b      	ble.n	801a240 <MEMS_runMagCal.constprop.0+0x6d8>
 801a228:	ee07 6a90 	vmov	s15, r6
 801a22c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a230:	eef0 7ae7 	vabs.f32	s15, s15
 801a234:	eeb4 aae7 	vcmpe.f32	s20, s15
 801a238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a23c:	f300 8122 	bgt.w	801a484 <MEMS_runMagCal.constprop.0+0x91c>
 801a240:	f89a 10a0 	ldrb.w	r1, [sl, #160]	@ 0xa0
 801a244:	9105      	str	r1, [sp, #20]
 801a246:	2900      	cmp	r1, #0
 801a248:	f000 85ad 	beq.w	801ada6 <MEMS_runMagCal.constprop.0+0x123e>
 801a24c:	f9ba 33ba 	ldrsh.w	r3, [sl, #954]	@ 0x3ba
 801a250:	f9ba 23b8 	ldrsh.w	r2, [sl, #952]	@ 0x3b8
 801a254:	eba3 0309 	sub.w	r3, r3, r9
 801a258:	fb03 f303 	mul.w	r3, r3, r3
 801a25c:	1b52      	subs	r2, r2, r5
 801a25e:	fb02 3202 	mla	r2, r2, r2, r3
 801a262:	f9ba 33bc 	ldrsh.w	r3, [sl, #956]	@ 0x3bc
 801a266:	1b9b      	subs	r3, r3, r6
 801a268:	fb03 2303 	mla	r3, r3, r3, r2
 801a26c:	ee07 3a90 	vmov	s15, r3
 801a270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a274:	eef4 aae7 	vcmpe.f32	s21, s15
 801a278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a27c:	f300 8102 	bgt.w	801a484 <MEMS_runMagCal.constprop.0+0x91c>
 801a280:	fb95 f3f7 	sdiv	r3, r5, r7
 801a284:	fb07 5313 	mls	r3, r7, r3, r5
 801a288:	2b00      	cmp	r3, #0
 801a28a:	bfb8      	it	lt
 801a28c:	19db      	addlt	r3, r3, r7
 801a28e:	b21b      	sxth	r3, r3
 801a290:	ee07 3a90 	vmov	s15, r3
 801a294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a298:	ee27 0a89 	vmul.f32	s0, s15, s18
 801a29c:	f002 ffb8 	bl	801d210 <roundf>
 801a2a0:	fb99 f3f7 	sdiv	r3, r9, r7
 801a2a4:	fb07 9313 	mls	r3, r7, r3, r9
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a2ae:	bfb8      	it	lt
 801a2b0:	19db      	addlt	r3, r3, r7
 801a2b2:	b21b      	sxth	r3, r3
 801a2b4:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
 801a2b8:	ee07 3a90 	vmov	s15, r3
 801a2bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a2c0:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 801a2c4:	9209      	str	r2, [sp, #36]	@ 0x24
 801a2c6:	ee27 0a89 	vmul.f32	s0, s15, s18
 801a2ca:	f002 ffa1 	bl	801d210 <roundf>
 801a2ce:	fb96 f3f7 	sdiv	r3, r6, r7
 801a2d2:	fb07 6313 	mls	r3, r7, r3, r6
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a2dc:	bfb8      	it	lt
 801a2de:	19db      	addlt	r3, r3, r7
 801a2e0:	b21b      	sxth	r3, r3
 801a2e2:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
 801a2e6:	ee07 3a90 	vmov	s15, r3
 801a2ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a2ee:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 801a2f2:	920a      	str	r2, [sp, #40]	@ 0x28
 801a2f4:	ee27 0a89 	vmul.f32	s0, s15, s18
 801a2f8:	f002 ff8a 	bl	801d210 <roundf>
 801a2fc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a300:	e9da 312a 	ldrd	r3, r1, [sl, #168]	@ 0xa8
 801a304:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
 801a308:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 801a30c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a30e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a310:	2a1f      	cmp	r2, #31
 801a312:	f240 85d3 	bls.w	801aebc <MEMS_runMagCal.constprop.0+0x1354>
 801a316:	3a20      	subs	r2, #32
 801a318:	2101      	movs	r1, #1
 801a31a:	fa01 f202 	lsl.w	r2, r1, r2
 801a31e:	401a      	ands	r2, r3
 801a320:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a322:	291f      	cmp	r1, #31
 801a324:	e9da 302c 	ldrd	r3, r0, [sl, #176]	@ 0xb0
 801a328:	f240 85c1 	bls.w	801aeae <MEMS_runMagCal.constprop.0+0x1346>
 801a32c:	3920      	subs	r1, #32
 801a32e:	2001      	movs	r0, #1
 801a330:	fa00 f101 	lsl.w	r1, r0, r1
 801a334:	ea01 0c03 	and.w	ip, r1, r3
 801a338:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a33a:	291f      	cmp	r1, #31
 801a33c:	e9da 032e 	ldrd	r0, r3, [sl, #184]	@ 0xb8
 801a340:	f240 85ae 	bls.w	801aea0 <MEMS_runMagCal.constprop.0+0x1338>
 801a344:	f1a1 0020 	sub.w	r0, r1, #32
 801a348:	2101      	movs	r1, #1
 801a34a:	fa01 f000 	lsl.w	r0, r1, r0
 801a34e:	4003      	ands	r3, r0
 801a350:	2b00      	cmp	r3, #0
 801a352:	d149      	bne.n	801a3e8 <MEMS_runMagCal.constprop.0+0x880>
 801a354:	ea5c 0102 	orrs.w	r1, ip, r2
 801a358:	d14a      	bne.n	801a3f0 <MEMS_runMagCal.constprop.0+0x888>
 801a35a:	f99a 30a2 	ldrsb.w	r3, [sl, #162]	@ 0xa2
 801a35e:	f89a 00a1 	ldrb.w	r0, [sl, #161]	@ 0xa1
 801a362:	f103 0e01 	add.w	lr, r3, #1
 801a366:	f000 be3b 	b.w	801afe0 <MEMS_runMagCal.constprop.0+0x1478>
 801a36a:	9902      	ldr	r1, [sp, #8]
 801a36c:	f8ca 1020 	str.w	r1, [sl, #32]
 801a370:	2200      	movs	r2, #0
 801a372:	23ff      	movs	r3, #255	@ 0xff
 801a374:	f88a 20a0 	strb.w	r2, [sl, #160]	@ 0xa0
 801a378:	f88a 30a2 	strb.w	r3, [sl, #162]	@ 0xa2
 801a37c:	f20d 5d64 	addw	sp, sp, #1380	@ 0x564
 801a380:	ecbd 8b0e 	vpop	{d8-d14}
 801a384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a388:	2102      	movs	r1, #2
 801a38a:	2300      	movs	r3, #0
 801a38c:	930d      	str	r3, [sp, #52]	@ 0x34
 801a38e:	9304      	str	r3, [sp, #16]
 801a390:	e624      	b.n	8019fdc <MEMS_runMagCal.constprop.0+0x474>
 801a392:	3b00      	subs	r3, #0
 801a394:	bf18      	it	ne
 801a396:	2301      	movne	r3, #1
 801a398:	e9ca 3306 	strd	r3, r3, [sl, #24]
 801a39c:	2300      	movs	r3, #0
 801a39e:	f88a 30a0 	strb.w	r3, [sl, #160]	@ 0xa0
 801a3a2:	f8ca 3020 	str.w	r3, [sl, #32]
 801a3a6:	2300      	movs	r3, #0
 801a3a8:	e9ca 332a 	strd	r3, r3, [sl, #168]	@ 0xa8
 801a3ac:	e9ca 332c 	strd	r3, r3, [sl, #176]	@ 0xb0
 801a3b0:	e9ca 332e 	strd	r3, r3, [sl, #184]	@ 0xb8
 801a3b4:	23ff      	movs	r3, #255	@ 0xff
 801a3b6:	f88a 30a2 	strb.w	r3, [sl, #162]	@ 0xa2
 801a3ba:	e465      	b.n	8019c88 <MEMS_runMagCal.constprop.0+0x120>
 801a3bc:	eddf 7a07 	vldr	s15, [pc, #28]	@ 801a3dc <MEMS_runMagCal.constprop.0+0x874>
 801a3c0:	2c01      	cmp	r4, #1
 801a3c2:	edcd 7a13 	vstr	s15, [sp, #76]	@ 0x4c
 801a3c6:	eeb0 0a67 	vmov.f32	s0, s15
 801a3ca:	f67f ae2b 	bls.w	801a024 <MEMS_runMagCal.constprop.0+0x4bc>
 801a3ce:	e61f      	b.n	801a010 <MEMS_runMagCal.constprop.0+0x4a8>
 801a3d0:	427c0000 	.word	0x427c0000
 801a3d4:	3f666666 	.word	0x3f666666
 801a3d8:	3eaaaaab 	.word	0x3eaaaaab
 801a3dc:	477fff00 	.word	0x477fff00
 801a3e0:	42340000 	.word	0x42340000
 801a3e4:	3faccccd 	.word	0x3faccccd
 801a3e8:	b112      	cbz	r2, 801a3f0 <MEMS_runMagCal.constprop.0+0x888>
 801a3ea:	f1bc 0f00 	cmp.w	ip, #0
 801a3ee:	d149      	bne.n	801a484 <MEMS_runMagCal.constprop.0+0x91c>
 801a3f0:	f99a 30a2 	ldrsb.w	r3, [sl, #162]	@ 0xa2
 801a3f4:	f89a 00a1 	ldrb.w	r0, [sl, #161]	@ 0xa1
 801a3f8:	f103 0e01 	add.w	lr, r3, #1
 801a3fc:	9b05      	ldr	r3, [sp, #20]
 801a3fe:	4283      	cmp	r3, r0
 801a400:	f000 863e 	beq.w	801b080 <MEMS_runMagCal.constprop.0+0x1518>
 801a404:	ebae 0303 	sub.w	r3, lr, r3
 801a408:	fb93 f2f0 	sdiv	r2, r3, r0
 801a40c:	fb00 3212 	mls	r2, r0, r2, r3
 801a410:	2a00      	cmp	r2, #0
 801a412:	bfb8      	it	lt
 801a414:	1812      	addlt	r2, r2, r0
 801a416:	b212      	sxth	r2, r2
 801a418:	9b05      	ldr	r3, [sp, #20]
 801a41a:	9411      	str	r4, [sp, #68]	@ 0x44
 801a41c:	eb03 0c02 	add.w	ip, r3, r2
 801a420:	e002      	b.n	801a428 <MEMS_runMagCal.constprop.0+0x8c0>
 801a422:	4562      	cmp	r2, ip
 801a424:	f000 85db 	beq.w	801afde <MEMS_runMagCal.constprop.0+0x1476>
 801a428:	fb92 f3f0 	sdiv	r3, r2, r0
 801a42c:	fb00 2313 	mls	r3, r0, r3, r2
 801a430:	b2db      	uxtb	r3, r3
 801a432:	3304      	adds	r3, #4
 801a434:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801a438:	3201      	adds	r2, #1
 801a43a:	f9b3 40a2 	ldrsh.w	r4, [r3, #162]	@ 0xa2
 801a43e:	f9b3 10a4 	ldrsh.w	r1, [r3, #164]	@ 0xa4
 801a442:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 801a446:	1b2c      	subs	r4, r5, r4
 801a448:	eba9 0101 	sub.w	r1, r9, r1
 801a44c:	ee07 4a90 	vmov	s15, r4
 801a450:	ee06 1a90 	vmov	s13, r1
 801a454:	1af3      	subs	r3, r6, r3
 801a456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a45a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a45e:	ee07 3a10 	vmov	s14, r3
 801a462:	eef0 7ae7 	vabs.f32	s15, s15
 801a466:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a46a:	eef0 6ae6 	vabs.f32	s13, s13
 801a46e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a472:	eeb0 7ac7 	vabs.f32	s14, s14
 801a476:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a47a:	eef4 9ae7 	vcmpe.f32	s19, s15
 801a47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a482:	ddce      	ble.n	801a422 <MEMS_runMagCal.constprop.0+0x8ba>
 801a484:	9b06      	ldr	r3, [sp, #24]
 801a486:	9a01      	ldr	r2, [sp, #4]
 801a488:	f108 0801 	add.w	r8, r8, #1
 801a48c:	fa0f f888 	sxth.w	r8, r8
 801a490:	445b      	add	r3, fp
 801a492:	4590      	cmp	r8, r2
 801a494:	fa1f fb83 	uxth.w	fp, r3
 801a498:	4643      	mov	r3, r8
 801a49a:	f6ff ae9b 	blt.w	801a1d4 <MEMS_runMagCal.constprop.0+0x66c>
 801a49e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801a4a0:	f89a 3014 	ldrb.w	r3, [sl, #20]
 801a4a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a4a6:	431a      	orrs	r2, r3
 801a4a8:	b2d3      	uxtb	r3, r2
 801a4aa:	f88a 3014 	strb.w	r3, [sl, #20]
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	f43f af64 	beq.w	801a37c <MEMS_runMagCal.constprop.0+0x814>
 801a4b4:	f89a 30a0 	ldrb.w	r3, [sl, #160]	@ 0xa0
 801a4b8:	9301      	str	r3, [sp, #4]
 801a4ba:	2b19      	cmp	r3, #25
 801a4bc:	f67f af5e 	bls.w	801a37c <MEMS_runMagCal.constprop.0+0x814>
 801a4c0:	b125      	cbz	r5, 801a4cc <MEMS_runMagCal.constprop.0+0x964>
 801a4c2:	f8da 3018 	ldr.w	r3, [sl, #24]
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	f040 8622 	bne.w	801b110 <MEMS_runMagCal.constprop.0+0x15a8>
 801a4cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	f040 8651 	bne.w	801b176 <MEMS_runMagCal.constprop.0+0x160e>
 801a4d4:	2300      	movs	r3, #0
 801a4d6:	9804      	ldr	r0, [sp, #16]
 801a4d8:	f8da c0b0 	ldr.w	ip, [sl, #176]	@ 0xb0
 801a4dc:	f8da 70bc 	ldr.w	r7, [sl, #188]	@ 0xbc
 801a4e0:	932b      	str	r3, [sp, #172]	@ 0xac
 801a4e2:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 801a4e6:	e9cd 3329 	strd	r3, r3, [sp, #164]	@ 0xa4
 801a4ea:	e9da 592a 	ldrd	r5, r9, [sl, #168]	@ 0xa8
 801a4ee:	e9da 8e2d 	ldrd	r8, lr, [sl, #180]	@ 0xb4
 801a4f2:	4602      	mov	r2, r0
 801a4f4:	4604      	mov	r4, r0
 801a4f6:	2601      	movs	r6, #1
 801a4f8:	2b1f      	cmp	r3, #31
 801a4fa:	f240 843e 	bls.w	801ad7a <MEMS_runMagCal.constprop.0+0x1212>
 801a4fe:	f1a3 0120 	sub.w	r1, r3, #32
 801a502:	fa06 f101 	lsl.w	r1, r6, r1
 801a506:	420d      	tst	r5, r1
 801a508:	bf1c      	itt	ne
 801a50a:	3001      	addne	r0, #1
 801a50c:	b2c0      	uxtbne	r0, r0
 801a50e:	ea1c 0f01 	tst.w	ip, r1
 801a512:	bf18      	it	ne
 801a514:	3401      	addne	r4, #1
 801a516:	ea01 0107 	and.w	r1, r1, r7
 801a51a:	f103 0301 	add.w	r3, r3, #1
 801a51e:	bf18      	it	ne
 801a520:	b2e4      	uxtbne	r4, r4
 801a522:	2900      	cmp	r1, #0
 801a524:	bf18      	it	ne
 801a526:	3201      	addne	r2, #1
 801a528:	2b40      	cmp	r3, #64	@ 0x40
 801a52a:	b2d2      	uxtb	r2, r2
 801a52c:	d1e4      	bne.n	801a4f8 <MEMS_runMagCal.constprop.0+0x990>
 801a52e:	2805      	cmp	r0, #5
 801a530:	f240 841e 	bls.w	801ad70 <MEMS_runMagCal.constprop.0+0x1208>
 801a534:	2c05      	cmp	r4, #5
 801a536:	f240 841b 	bls.w	801ad70 <MEMS_runMagCal.constprop.0+0x1208>
 801a53a:	2a05      	cmp	r2, #5
 801a53c:	f240 8418 	bls.w	801ad70 <MEMS_runMagCal.constprop.0+0x1208>
 801a540:	f89a 40a1 	ldrb.w	r4, [sl, #161]	@ 0xa1
 801a544:	9b01      	ldr	r3, [sp, #4]
 801a546:	f99a 50a2 	ldrsb.w	r5, [sl, #162]	@ 0xa2
 801a54a:	42a3      	cmp	r3, r4
 801a54c:	f105 0701 	add.w	r7, r5, #1
 801a550:	f000 86ab 	beq.w	801b2aa <MEMS_runMagCal.constprop.0+0x1742>
 801a554:	1afa      	subs	r2, r7, r3
 801a556:	fb92 f3f4 	sdiv	r3, r2, r4
 801a55a:	fb04 2213 	mls	r2, r4, r3, r2
 801a55e:	2a00      	cmp	r2, #0
 801a560:	bfb8      	it	lt
 801a562:	1912      	addlt	r2, r2, r4
 801a564:	b212      	sxth	r2, r2
 801a566:	f102 0315 	add.w	r3, r2, #21
 801a56a:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801a56e:	f9b3 601a 	ldrsh.w	r6, [r3, #26]
 801a572:	f9b3 001c 	ldrsh.w	r0, [r3, #28]
 801a576:	f9b3 101e 	ldrsh.w	r1, [r3, #30]
 801a57a:	9b01      	ldr	r3, [sp, #4]
 801a57c:	468c      	mov	ip, r1
 801a57e:	eb03 0902 	add.w	r9, r3, r2
 801a582:	4686      	mov	lr, r0
 801a584:	46b0      	mov	r8, r6
 801a586:	fb92 f3f4 	sdiv	r3, r2, r4
 801a58a:	fb04 2313 	mls	r3, r4, r3, r2
 801a58e:	b2db      	uxtb	r3, r3
 801a590:	3315      	adds	r3, #21
 801a592:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801a596:	3201      	adds	r2, #1
 801a598:	f9b3 b01a 	ldrsh.w	fp, [r3, #26]
 801a59c:	455e      	cmp	r6, fp
 801a59e:	bfb8      	it	lt
 801a5a0:	465e      	movlt	r6, fp
 801a5a2:	45d8      	cmp	r8, fp
 801a5a4:	bfa8      	it	ge
 801a5a6:	46d8      	movge	r8, fp
 801a5a8:	f9b3 b01c 	ldrsh.w	fp, [r3, #28]
 801a5ac:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801a5b0:	4558      	cmp	r0, fp
 801a5b2:	bfb8      	it	lt
 801a5b4:	4658      	movlt	r0, fp
 801a5b6:	45de      	cmp	lr, fp
 801a5b8:	bfa8      	it	ge
 801a5ba:	46de      	movge	lr, fp
 801a5bc:	4299      	cmp	r1, r3
 801a5be:	bfb8      	it	lt
 801a5c0:	4619      	movlt	r1, r3
 801a5c2:	459c      	cmp	ip, r3
 801a5c4:	bfa8      	it	ge
 801a5c6:	469c      	movge	ip, r3
 801a5c8:	454a      	cmp	r2, r9
 801a5ca:	d1dc      	bne.n	801a586 <MEMS_runMagCal.constprop.0+0xa1e>
 801a5cc:	eba6 0308 	sub.w	r3, r6, r8
 801a5d0:	ed5f 7a7d 	vldr	s15, [pc, #-500]	@ 801a3e0 <MEMS_runMagCal.constprop.0+0x878>
 801a5d4:	f89a b054 	ldrb.w	fp, [sl, #84]	@ 0x54
 801a5d8:	f89a 606c 	ldrb.w	r6, [sl, #108]	@ 0x6c
 801a5dc:	b21b      	sxth	r3, r3
 801a5de:	ee68 7a27 	vmul.f32	s15, s16, s15
 801a5e2:	ee06 3a90 	vmov	s13, r3
 801a5e6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 801a5ea:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 801a5ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 801a5f2:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801a5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5fa:	f300 8636 	bgt.w	801b26a <MEMS_runMagCal.constprop.0+0x1702>
 801a5fe:	eba0 020e 	sub.w	r2, r0, lr
 801a602:	b212      	sxth	r2, r2
 801a604:	ee06 2a90 	vmov	s13, r2
 801a608:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a60c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801a610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a614:	f100 8629 	bmi.w	801b26a <MEMS_runMagCal.constprop.0+0x1702>
 801a618:	eba1 010c 	sub.w	r1, r1, ip
 801a61c:	b209      	sxth	r1, r1
 801a61e:	ee05 1a90 	vmov	s11, r1
 801a622:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801a626:	eeb4 7ae5 	vcmpe.f32	s14, s11
 801a62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a62e:	f100 861c 	bmi.w	801b26a <MEMS_runMagCal.constprop.0+0x1702>
 801a632:	429a      	cmp	r2, r3
 801a634:	4610      	mov	r0, r2
 801a636:	bfb8      	it	lt
 801a638:	4618      	movlt	r0, r3
 801a63a:	4288      	cmp	r0, r1
 801a63c:	bfb8      	it	lt
 801a63e:	4608      	movlt	r0, r1
 801a640:	ee09 0a10 	vmov	s18, r0
 801a644:	429a      	cmp	r2, r3
 801a646:	4610      	mov	r0, r2
 801a648:	ee19 5a10 	vmov	r5, s18
 801a64c:	bfa8      	it	ge
 801a64e:	4618      	movge	r0, r3
 801a650:	4288      	cmp	r0, r1
 801a652:	bfa8      	it	ge
 801a654:	4608      	movge	r0, r1
 801a656:	429d      	cmp	r5, r3
 801a658:	f8ad 005e 	strh.w	r0, [sp, #94]	@ 0x5e
 801a65c:	dd03      	ble.n	801a666 <MEMS_runMagCal.constprop.0+0xafe>
 801a65e:	4298      	cmp	r0, r3
 801a660:	bfb8      	it	lt
 801a662:	f8ad 305e 	strhlt.w	r3, [sp, #94]	@ 0x5e
 801a666:	ee19 3a10 	vmov	r3, s18
 801a66a:	4293      	cmp	r3, r2
 801a66c:	dd03      	ble.n	801a676 <MEMS_runMagCal.constprop.0+0xb0e>
 801a66e:	4290      	cmp	r0, r2
 801a670:	bfb8      	it	lt
 801a672:	f8ad 205e 	strhlt.w	r2, [sp, #94]	@ 0x5e
 801a676:	ee19 3a10 	vmov	r3, s18
 801a67a:	4299      	cmp	r1, r3
 801a67c:	da03      	bge.n	801a686 <MEMS_runMagCal.constprop.0+0xb1e>
 801a67e:	4281      	cmp	r1, r0
 801a680:	bfc8      	it	gt
 801a682:	f8ad 105e 	strhgt.w	r1, [sp, #94]	@ 0x5e
 801a686:	ea5b 0306 	orrs.w	r3, fp, r6
 801a68a:	f040 8627 	bne.w	801b2dc <MEMS_runMagCal.constprop.0+0x1774>
 801a68e:	eef4 7ac6 	vcmpe.f32	s15, s12
 801a692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a696:	f300 866a 	bgt.w	801b36e <MEMS_runMagCal.constprop.0+0x1806>
 801a69a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801a69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6a2:	f300 8664 	bgt.w	801b36e <MEMS_runMagCal.constprop.0+0x1806>
 801a6a6:	eef4 7ae5 	vcmpe.f32	s15, s11
 801a6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6ae:	bfcc      	ite	gt
 801a6b0:	f04f 0901 	movgt.w	r9, #1
 801a6b4:	f04f 0900 	movle.w	r9, #0
 801a6b8:	ed1f 7ab6 	vldr	s14, [pc, #-728]	@ 801a3e4 <MEMS_runMagCal.constprop.0+0x87c>
 801a6bc:	eeb8 5ac9 	vcvt.f32.s32	s10, s18
 801a6c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 801a6c4:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801a6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6cc:	f2c0 8338 	blt.w	801ad40 <MEMS_runMagCal.constprop.0+0x11d8>
 801a6d0:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 801a6d4:	ee05 3a10 	vmov	s10, r3
 801a6d8:	eeb7 7a02 	vmov.f32	s14, #114	@ 0x3f900000  1.125
 801a6dc:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801a6e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 801a6e4:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801a6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6ec:	f2c0 8328 	blt.w	801ad40 <MEMS_runMagCal.constprop.0+0x11d8>
 801a6f0:	ee19 3a10 	vmov	r3, s18
 801a6f4:	ebb3 0f40 	cmp.w	r3, r0, lsl #1
 801a6f8:	f280 8322 	bge.w	801ad40 <MEMS_runMagCal.constprop.0+0x11d8>
 801a6fc:	ee07 0a10 	vmov	s14, r0
 801a700:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a704:	eeb7 5a04 	vmov.f32	s10, #116	@ 0x3fa00000  1.250
 801a708:	ee27 7a05 	vmul.f32	s14, s14, s10
 801a70c:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a714:	f140 8314 	bpl.w	801ad40 <MEMS_runMagCal.constprop.0+0x11d8>
 801a718:	9b01      	ldr	r3, [sp, #4]
 801a71a:	42a3      	cmp	r3, r4
 801a71c:	f001 842a 	beq.w	801bf74 <MEMS_runMagCal.constprop.0+0x240c>
 801a720:	1afb      	subs	r3, r7, r3
 801a722:	fb93 f2f4 	sdiv	r2, r3, r4
 801a726:	fb04 3312 	mls	r3, r4, r2, r3
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	bfb8      	it	lt
 801a72e:	191b      	addlt	r3, r3, r4
 801a730:	b21b      	sxth	r3, r3
 801a732:	fa4f f883 	sxtb.w	r8, r3
 801a736:	9b04      	ldr	r3, [sp, #16]
 801a738:	9303      	str	r3, [sp, #12]
 801a73a:	469e      	mov	lr, r3
 801a73c:	f1c8 0301 	rsb	r3, r8, #1
 801a740:	e9cd 3605 	strd	r3, r6, [sp, #20]
 801a744:	9707      	str	r7, [sp, #28]
 801a746:	4641      	mov	r1, r8
 801a748:	f108 0801 	add.w	r8, r8, #1
 801a74c:	fb91 f3f4 	sdiv	r3, r1, r4
 801a750:	fb04 1113 	mls	r1, r4, r3, r1
 801a754:	b24a      	sxtb	r2, r1
 801a756:	fb98 f3f4 	sdiv	r3, r8, r4
 801a75a:	fb04 8313 	mls	r3, r4, r3, r8
 801a75e:	2a00      	cmp	r2, #0
 801a760:	b25b      	sxtb	r3, r3
 801a762:	f103 0304 	add.w	r3, r3, #4
 801a766:	bfbc      	itt	lt
 801a768:	1909      	addlt	r1, r1, r4
 801a76a:	b24a      	sxtblt	r2, r1
 801a76c:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
 801a770:	3204      	adds	r2, #4
 801a772:	f9b1 c0a2 	ldrsh.w	ip, [r1, #162]	@ 0xa2
 801a776:	eb0a 01c2 	add.w	r1, sl, r2, lsl #3
 801a77a:	f9b1 50a2 	ldrsh.w	r5, [r1, #162]	@ 0xa2
 801a77e:	fa1f f18c 	uxth.w	r1, ip
 801a782:	45ac      	cmp	ip, r5
 801a784:	b2a8      	uxth	r0, r5
 801a786:	bfaa      	itet	ge
 801a788:	1a09      	subge	r1, r1, r0
 801a78a:	1a40      	sublt	r0, r0, r1
 801a78c:	b20e      	sxthge	r6, r1
 801a78e:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
 801a792:	bfb8      	it	lt
 801a794:	b206      	sxthlt	r6, r0
 801a796:	f9b1 c0a4 	ldrsh.w	ip, [r1, #164]	@ 0xa4
 801a79a:	eb0a 01c2 	add.w	r1, sl, r2, lsl #3
 801a79e:	f9b1 50a4 	ldrsh.w	r5, [r1, #164]	@ 0xa4
 801a7a2:	fa1f f18c 	uxth.w	r1, ip
 801a7a6:	45ac      	cmp	ip, r5
 801a7a8:	b2a8      	uxth	r0, r5
 801a7aa:	bfaa      	itet	ge
 801a7ac:	1a09      	subge	r1, r1, r0
 801a7ae:	1a40      	sublt	r0, r0, r1
 801a7b0:	b20f      	sxthge	r7, r1
 801a7b2:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
 801a7b6:	bfb8      	it	lt
 801a7b8:	b207      	sxthlt	r7, r0
 801a7ba:	f9b1 c0a6 	ldrsh.w	ip, [r1, #166]	@ 0xa6
 801a7be:	eb0a 01c2 	add.w	r1, sl, r2, lsl #3
 801a7c2:	fa1f f08c 	uxth.w	r0, ip
 801a7c6:	f9b1 50a6 	ldrsh.w	r5, [r1, #166]	@ 0xa6
 801a7ca:	b2a9      	uxth	r1, r5
 801a7cc:	45ac      	cmp	ip, r5
 801a7ce:	bfb4      	ite	lt
 801a7d0:	1a09      	sublt	r1, r1, r0
 801a7d2:	1a41      	subge	r1, r0, r1
 801a7d4:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801a7d8:	eb0a 00c2 	add.w	r0, sl, r2, lsl #3
 801a7dc:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 801a7e0:	f8b0 30a0 	ldrh.w	r3, [r0, #160]	@ 0xa0
 801a7e4:	1ad2      	subs	r2, r2, r3
 801a7e6:	b212      	sxth	r2, r2
 801a7e8:	2a00      	cmp	r2, #0
 801a7ea:	b209      	sxth	r1, r1
 801a7ec:	dd20      	ble.n	801a830 <MEMS_runMagCal.constprop.0+0xcc8>
 801a7ee:	19bb      	adds	r3, r7, r6
 801a7f0:	ee07 2a90 	vmov	s15, r2
 801a7f4:	440b      	add	r3, r1
 801a7f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a7fa:	fb02 f303 	mul.w	r3, r2, r3
 801a7fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a802:	ee07 3a90 	vmov	s15, r3
 801a806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a80a:	f10e 0e01 	add.w	lr, lr, #1
 801a80e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801a812:	fa5f fe8e 	uxtb.w	lr, lr
 801a816:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801a81a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801a81e:	ee17 3a90 	vmov	r3, s15
 801a822:	b21b      	sxth	r3, r3
 801a824:	2b96      	cmp	r3, #150	@ 0x96
 801a826:	dd03      	ble.n	801a830 <MEMS_runMagCal.constprop.0+0xcc8>
 801a828:	9b03      	ldr	r3, [sp, #12]
 801a82a:	3301      	adds	r3, #1
 801a82c:	b2db      	uxtb	r3, r3
 801a82e:	9303      	str	r3, [sp, #12]
 801a830:	9b05      	ldr	r3, [sp, #20]
 801a832:	9a01      	ldr	r2, [sp, #4]
 801a834:	4443      	add	r3, r8
 801a836:	b2db      	uxtb	r3, r3
 801a838:	429a      	cmp	r2, r3
 801a83a:	d884      	bhi.n	801a746 <MEMS_runMagCal.constprop.0+0xbde>
 801a83c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a840:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a844:	4573      	cmp	r3, lr
 801a846:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 801a84a:	f340 8291 	ble.w	801ad70 <MEMS_runMagCal.constprop.0+0x1208>
 801a84e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a850:	b91b      	cbnz	r3, 801a85a <MEMS_runMagCal.constprop.0+0xcf2>
 801a852:	3e02      	subs	r6, #2
 801a854:	2e01      	cmp	r6, #1
 801a856:	f241 831b 	bls.w	801be90 <MEMS_runMagCal.constprop.0+0x2328>
 801a85a:	9b01      	ldr	r3, [sp, #4]
 801a85c:	42a3      	cmp	r3, r4
 801a85e:	f000 8590 	beq.w	801b382 <MEMS_runMagCal.constprop.0+0x181a>
 801a862:	1afb      	subs	r3, r7, r3
 801a864:	fb93 f2f4 	sdiv	r2, r3, r4
 801a868:	fb04 3312 	mls	r3, r4, r2, r3
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	bfb8      	it	lt
 801a870:	191b      	addlt	r3, r3, r4
 801a872:	b21b      	sxth	r3, r3
 801a874:	eddf 9aea 	vldr	s19, [pc, #936]	@ 801ac20 <MEMS_runMagCal.constprop.0+0x10b8>
 801a878:	4619      	mov	r1, r3
 801a87a:	eeb0 aa69 	vmov.f32	s20, s19
 801a87e:	eef0 aa69 	vmov.f32	s21, s19
 801a882:	2000      	movs	r0, #0
 801a884:	fb91 f2f4 	sdiv	r2, r1, r4
 801a888:	fb04 1212 	mls	r2, r4, r2, r1
 801a88c:	b2d2      	uxtb	r2, r2
 801a88e:	3204      	adds	r2, #4
 801a890:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 801a894:	3001      	adds	r0, #1
 801a896:	f9b2 50a2 	ldrsh.w	r5, [r2, #162]	@ 0xa2
 801a89a:	ee07 5a90 	vmov	s15, r5
 801a89e:	f9b2 50a4 	ldrsh.w	r5, [r2, #164]	@ 0xa4
 801a8a2:	f9b2 20a6 	ldrsh.w	r2, [r2, #166]	@ 0xa6
 801a8a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a8aa:	ee07 5a10 	vmov	s14, r5
 801a8ae:	ee7a aaa7 	vadd.f32	s21, s21, s15
 801a8b2:	ee07 2a90 	vmov	s15, r2
 801a8b6:	9d01      	ldr	r5, [sp, #4]
 801a8b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a8bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a8c0:	b2c2      	uxtb	r2, r0
 801a8c2:	4295      	cmp	r5, r2
 801a8c4:	ee3a aa07 	vadd.f32	s20, s20, s14
 801a8c8:	ee79 9aa7 	vadd.f32	s19, s19, s15
 801a8cc:	f101 0101 	add.w	r1, r1, #1
 801a8d0:	d8d8      	bhi.n	801a884 <MEMS_runMagCal.constprop.0+0xd1c>
 801a8d2:	ee07 5a90 	vmov	s15, r5
 801a8d6:	eeb8 bae7 	vcvt.f32.s32	s22, s15
 801a8da:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801a8de:	eec7 4a8b 	vdiv.f32	s9, s15, s22
 801a8e2:	2100      	movs	r1, #0
 801a8e4:	eddf 6ace 	vldr	s13, [pc, #824]	@ 801ac20 <MEMS_runMagCal.constprop.0+0x10b8>
 801a8e8:	ee6a aaa4 	vmul.f32	s21, s21, s9
 801a8ec:	ee2a aa24 	vmul.f32	s20, s20, s9
 801a8f0:	ee69 9aa4 	vmul.f32	s19, s19, s9
 801a8f4:	eeb0 6a66 	vmov.f32	s12, s13
 801a8f8:	eef0 5a66 	vmov.f32	s11, s13
 801a8fc:	eeb0 5a66 	vmov.f32	s10, s13
 801a900:	eef0 ca66 	vmov.f32	s25, s13
 801a904:	eef0 7a66 	vmov.f32	s15, s13
 801a908:	fb93 f2f4 	sdiv	r2, r3, r4
 801a90c:	fb04 3212 	mls	r2, r4, r2, r3
 801a910:	b2d2      	uxtb	r2, r2
 801a912:	3204      	adds	r2, #4
 801a914:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 801a918:	3101      	adds	r1, #1
 801a91a:	f9b2 00a2 	ldrsh.w	r0, [r2, #162]	@ 0xa2
 801a91e:	ee03 0a90 	vmov	s7, r0
 801a922:	f9b2 00a4 	ldrsh.w	r0, [r2, #164]	@ 0xa4
 801a926:	f9b2 20a6 	ldrsh.w	r2, [r2, #166]	@ 0xa6
 801a92a:	ee04 0a10 	vmov	s8, r0
 801a92e:	ee04 2a90 	vmov	s9, r2
 801a932:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801a936:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801a93a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801a93e:	9801      	ldr	r0, [sp, #4]
 801a940:	ee73 3aea 	vsub.f32	s7, s7, s21
 801a944:	ee34 4a4a 	vsub.f32	s8, s8, s20
 801a948:	ee74 4ae9 	vsub.f32	s9, s9, s19
 801a94c:	b2ca      	uxtb	r2, r1
 801a94e:	4290      	cmp	r0, r2
 801a950:	eee3 caa3 	vfma.f32	s25, s7, s7
 801a954:	f103 0301 	add.w	r3, r3, #1
 801a958:	eea3 5a84 	vfma.f32	s10, s7, s8
 801a95c:	eee3 5aa4 	vfma.f32	s11, s7, s9
 801a960:	eee4 7a04 	vfma.f32	s15, s8, s8
 801a964:	eea4 6a24 	vfma.f32	s12, s8, s9
 801a968:	eee4 6aa4 	vfma.f32	s13, s9, s9
 801a96c:	d8cc      	bhi.n	801a908 <MEMS_runMagCal.constprop.0+0xda0>
 801a96e:	ee25 4aa5 	vmul.f32	s8, s11, s11
 801a972:	eddf 4aac 	vldr	s9, [pc, #688]	@ 801ac24 <MEMS_runMagCal.constprop.0+0x10bc>
 801a976:	eea5 4a05 	vfma.f32	s8, s10, s10
 801a97a:	eea6 4a06 	vfma.f32	s8, s12, s12
 801a97e:	eeb4 4ae4 	vcmpe.f32	s8, s9
 801a982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a986:	d471      	bmi.n	801aa6c <MEMS_runMagCal.constprop.0+0xf04>
 801a988:	ee7c baa7 	vadd.f32	s23, s25, s15
 801a98c:	ed9f caa6 	vldr	s24, [pc, #664]	@ 801ac28 <MEMS_runMagCal.constprop.0+0x10c0>
 801a990:	ee7b baa6 	vadd.f32	s23, s23, s13
 801a994:	eef0 3a00 	vmov.f32	s7, #0	@ 0x40000000  2.0
 801a998:	ee6b ba8c 	vmul.f32	s23, s23, s24
 801a99c:	ee77 7aeb 	vsub.f32	s15, s15, s23
 801a9a0:	ee3c 7aeb 	vsub.f32	s14, s25, s23
 801a9a4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801a9a8:	ee76 6aeb 	vsub.f32	s13, s13, s23
 801a9ac:	eee7 4a07 	vfma.f32	s9, s14, s14
 801a9b0:	eee4 4a23 	vfma.f32	s9, s8, s7
 801a9b4:	ed9f 4a9d 	vldr	s8, [pc, #628]	@ 801ac2c <MEMS_runMagCal.constprop.0+0x10c4>
 801a9b8:	eee6 4aa6 	vfma.f32	s9, s13, s13
 801a9bc:	ee64 4a84 	vmul.f32	s9, s9, s8
 801a9c0:	eeb1 dae4 	vsqrt.f32	s26, s9
 801a9c4:	eec6 4a8d 	vdiv.f32	s9, s13, s26
 801a9c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a9cc:	ee87 4a0d 	vdiv.f32	s8, s14, s26
 801a9d0:	ee86 7a8d 	vdiv.f32	s14, s13, s26
 801a9d4:	ee25 5a07 	vmul.f32	s10, s10, s14
 801a9d8:	ee65 5a87 	vmul.f32	s11, s11, s14
 801a9dc:	ee66 6a07 	vmul.f32	s13, s12, s14
 801a9e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 801a9e4:	ee65 7a64 	vnmul.f32	s15, s10, s9
 801a9e8:	ee26 6ae6 	vnmul.f32	s12, s13, s13
 801a9ec:	eee6 7aa5 	vfma.f32	s15, s13, s11
 801a9f0:	eea4 6a87 	vfma.f32	s12, s9, s14
 801a9f4:	ee67 7a85 	vmul.f32	s15, s15, s10
 801a9f8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801a9fc:	eee6 7a04 	vfma.f32	s15, s12, s8
 801aa00:	eea6 7a85 	vfma.f32	s14, s13, s10
 801aa04:	eeb8 6a00 	vmov.f32	s12, #128	@ 0xc0000000 -2.0
 801aa08:	eee7 7a25 	vfma.f32	s15, s14, s11
 801aa0c:	eef4 7ac6 	vcmpe.f32	s15, s12
 801aa10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa14:	f241 8299 	bls.w	801bf4a <MEMS_runMagCal.constprop.0+0x23e2>
 801aa18:	eef4 7ae3 	vcmpe.f32	s15, s7
 801aa1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa20:	f281 828f 	bge.w	801bf42 <MEMS_runMagCal.constprop.0+0x23da>
 801aa24:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 801aa28:	ee27 0a80 	vmul.f32	s0, s15, s0
 801aa2c:	f002 f89c 	bl	801cb68 <acosf>
 801aa30:	ee20 ca0c 	vmul.f32	s24, s0, s24
 801aa34:	eeb0 0a4c 	vmov.f32	s0, s24
 801aa38:	f002 f948 	bl	801cccc <cosf>
 801aa3c:	eef0 7a40 	vmov.f32	s15, s0
 801aa40:	ed9f 0a7b 	vldr	s0, [pc, #492]	@ 801ac30 <MEMS_runMagCal.constprop.0+0x10c8>
 801aa44:	ee3d da0d 	vadd.f32	s26, s26, s26
 801aa48:	ee3c 0a00 	vadd.f32	s0, s24, s0
 801aa4c:	eef0 ca6b 	vmov.f32	s25, s23
 801aa50:	eeed ca27 	vfma.f32	s25, s26, s15
 801aa54:	f002 f93a 	bl	801cccc <cosf>
 801aa58:	eef0 6a6b 	vmov.f32	s13, s23
 801aa5c:	eeed 6a00 	vfma.f32	s13, s26, s0
 801aa60:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
 801aa64:	ee7c 7aa6 	vadd.f32	s15, s25, s13
 801aa68:	eedb 7a86 	vfnms.f32	s15, s23, s12
 801aa6c:	eef0 4aec 	vabs.f32	s9, s25
 801aa70:	eef0 5ae7 	vabs.f32	s11, s15
 801aa74:	eef4 5ae4 	vcmpe.f32	s11, s9
 801aa78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa7c:	bf8c      	ite	hi
 801aa7e:	eeb0 5a64 	vmovhi.f32	s10, s9
 801aa82:	eeb0 5a65 	vmovls.f32	s10, s11
 801aa86:	eeb0 6ae6 	vabs.f32	s12, s13
 801aa8a:	eeb4 5ac6 	vcmpe.f32	s10, s12
 801aa8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa92:	eef4 5ae4 	vcmpe.f32	s11, s9
 801aa96:	bf88      	it	hi
 801aa98:	eeb0 5a46 	vmovhi.f32	s10, s12
 801aa9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aaa0:	bfb8      	it	lt
 801aaa2:	eef0 5a64 	vmovlt.f32	s11, s9
 801aaa6:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801aaaa:	eef3 4a09 	vmov.f32	s9, #57	@ 0x41c80000  25.0
 801aaae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aab2:	ee65 4a24 	vmul.f32	s9, s10, s9
 801aab6:	bfb8      	it	lt
 801aab8:	eeb0 6a65 	vmovlt.f32	s12, s11
 801aabc:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801aac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aac4:	f301 81cd 	bgt.w	801be62 <MEMS_runMagCal.constprop.0+0x22fa>
 801aac8:	eef3 5a04 	vmov.f32	s11, #52	@ 0x41a00000  20.0
 801aacc:	ee25 5a25 	vmul.f32	s10, s10, s11
 801aad0:	eeb4 6ac5 	vcmpe.f32	s12, s10
 801aad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aad8:	dd03      	ble.n	801aae2 <MEMS_runMagCal.constprop.0+0xf7a>
 801aada:	9b01      	ldr	r3, [sp, #4]
 801aadc:	2b22      	cmp	r3, #34	@ 0x22
 801aade:	f241 81c0 	bls.w	801be62 <MEMS_runMagCal.constprop.0+0x22fa>
 801aae2:	ee3c 7aa6 	vadd.f32	s14, s25, s13
 801aae6:	eddf 6a53 	vldr	s13, [pc, #332]	@ 801ac34 <MEMS_runMagCal.constprop.0+0x10cc>
 801aaea:	ee77 7a27 	vadd.f32	s15, s14, s15
 801aaee:	ee87 7a8b 	vdiv.f32	s14, s15, s22
 801aaf2:	eef1 7ac7 	vsqrt.f32	s15, s14
 801aaf6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801aafa:	eef4 7ae6 	vcmpe.f32	s15, s13
 801aafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab02:	f301 81ae 	bgt.w	801be62 <MEMS_runMagCal.constprop.0+0x22fa>
 801ab06:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 801ab0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ab0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab12:	f101 81a6 	bmi.w	801be62 <MEMS_runMagCal.constprop.0+0x22fa>
 801ab16:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801ac38 <MEMS_runMagCal.constprop.0+0x10d0>
 801ab1a:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 801ab1e:	2300      	movs	r3, #0
 801ab20:	e9cd 3330 	strd	r3, r3, [sp, #192]	@ 0xc0
 801ab24:	9333      	str	r3, [sp, #204]	@ 0xcc
 801ab26:	eef8 7ac9 	vcvt.f32.s32	s15, s18
 801ab2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ab2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab32:	d408      	bmi.n	801ab46 <MEMS_runMagCal.constprop.0+0xfde>
 801ab34:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801ab38:	ee17 3a10 	vmov	r3, s14
 801ab3c:	b21b      	sxth	r3, r3
 801ab3e:	ee09 3a10 	vmov	s18, r3
 801ab42:	eef8 7ac9 	vcvt.f32.s32	s15, s18
 801ab46:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801ac3c <MEMS_runMagCal.constprop.0+0x10d4>
 801ab4a:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 801ab4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ab52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab56:	dc08      	bgt.n	801ab6a <MEMS_runMagCal.constprop.0+0x1002>
 801ab58:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801ab5c:	ee17 3a10 	vmov	r3, s14
 801ab60:	b21b      	sxth	r3, r3
 801ab62:	ee09 3a10 	vmov	s18, r3
 801ab66:	eef8 7ac9 	vcvt.f32.s32	s15, s18
 801ab6a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801ab6e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801ac40 <MEMS_runMagCal.constprop.0+0x10d8>
 801ab72:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ab76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab7a:	f341 8185 	ble.w	801be88 <MEMS_runMagCal.constprop.0+0x2320>
 801ab7e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801ac44 <MEMS_runMagCal.constprop.0+0x10dc>
 801ab82:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ab86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab8a:	f141 817d 	bpl.w	801be88 <MEMS_runMagCal.constprop.0+0x2320>
 801ab8e:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 801ac48 <MEMS_runMagCal.constprop.0+0x10e0>
 801ab92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ab96:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801ab9a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801ab9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801aba2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 801ac3c <MEMS_runMagCal.constprop.0+0x10d4>
 801aba6:	f8cd 9014 	str.w	r9, [sp, #20]
 801abaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 801abae:	ee68 aaaa 	vmul.f32	s21, s17, s21
 801abb2:	ee28 aa8a 	vmul.f32	s20, s17, s20
 801abb6:	ee68 9aa9 	vmul.f32	s19, s17, s19
 801abba:	ed9f 9a1a 	vldr	s18, [pc, #104]	@ 801ac24 <MEMS_runMagCal.constprop.0+0x10bc>
 801abbe:	9e04      	ldr	r6, [sp, #16]
 801abc0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801abc4:	edcd aa2c 	vstr	s21, [sp, #176]	@ 0xb0
 801abc8:	ed8d aa2d 	vstr	s20, [sp, #180]	@ 0xb4
 801abcc:	edcd 9a2e 	vstr	s19, [sp, #184]	@ 0xb8
 801abd0:	edcd 7a2f 	vstr	s15, [sp, #188]	@ 0xbc
 801abd4:	edcd 7a32 	vstr	s15, [sp, #200]	@ 0xc8
 801abd8:	f8cd b00c 	str.w	fp, [sp, #12]
 801abdc:	46b8      	mov	r8, r7
 801abde:	2500      	movs	r5, #0
 801abe0:	2240      	movs	r2, #64	@ 0x40
 801abe2:	4629      	mov	r1, r5
 801abe4:	a834      	add	r0, sp, #208	@ 0xd0
 801abe6:	e9cd 551f 	strd	r5, r5, [sp, #124]	@ 0x7c
 801abea:	e9cd 5521 	strd	r5, r5, [sp, #132]	@ 0x84
 801abee:	e9cd 551b 	strd	r5, r5, [sp, #108]	@ 0x6c
 801abf2:	e9cd 551d 	strd	r5, r5, [sp, #116]	@ 0x74
 801abf6:	f005 f806 	bl	801fc06 <memset>
 801abfa:	4629      	mov	r1, r5
 801abfc:	2240      	movs	r2, #64	@ 0x40
 801abfe:	a844      	add	r0, sp, #272	@ 0x110
 801ac00:	f005 f801 	bl	801fc06 <memset>
 801ac04:	ed9d ba2f 	vldr	s22, [sp, #188]	@ 0xbc
 801ac08:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801ac4c <MEMS_runMagCal.constprop.0+0x10e4>
 801ac0c:	eeb4 bae7 	vcmpe.f32	s22, s15
 801ac10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac14:	f100 857b 	bmi.w	801b70e <MEMS_runMagCal.constprop.0+0x1ba6>
 801ac18:	45a1      	cmp	r9, r4
 801ac1a:	f000 853d 	beq.w	801b698 <MEMS_runMagCal.constprop.0+0x1b30>
 801ac1e:	e01d      	b.n	801ac5c <MEMS_runMagCal.constprop.0+0x10f4>
 801ac20:	00000000 	.word	0x00000000
 801ac24:	358637bd 	.word	0x358637bd
 801ac28:	3eaaaaab 	.word	0x3eaaaaab
 801ac2c:	3e2aaaab 	.word	0x3e2aaaab
 801ac30:	40060a92 	.word	0x40060a92
 801ac34:	42960000 	.word	0x42960000
 801ac38:	430d0000 	.word	0x430d0000
 801ac3c:	423c0000 	.word	0x423c0000
 801ac40:	41966667 	.word	0x41966667
 801ac44:	433c0000 	.word	0x433c0000
 801ac48:	3c2e4c41 	.word	0x3c2e4c41
 801ac4c:	3dcccccd 	.word	0x3dcccccd
 801ac50:	00000000 	.word	0x00000000
 801ac54:	2b8cbccb 	.word	0x2b8cbccb
 801ac58:	3a83126f 	.word	0x3a83126f
 801ac5c:	eba8 0309 	sub.w	r3, r8, r9
 801ac60:	fb93 f2f4 	sdiv	r2, r3, r4
 801ac64:	fb04 3312 	mls	r3, r4, r2, r3
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	bfb8      	it	lt
 801ac6c:	191b      	addlt	r3, r3, r4
 801ac6e:	b21b      	sxth	r3, r3
 801ac70:	ed5f 7a09 	vldr	s15, [pc, #-36]	@ 801ac50 <MEMS_runMagCal.constprop.0+0x10e8>
 801ac74:	ed9d aa2c 	vldr	s20, [sp, #176]	@ 0xb0
 801ac78:	eddd 9a2d 	vldr	s19, [sp, #180]	@ 0xb4
 801ac7c:	eddd aa2e 	vldr	s21, [sp, #184]	@ 0xb8
 801ac80:	ed5f ca0c 	vldr	s25, [pc, #-48]	@ 801ac54 <MEMS_runMagCal.constprop.0+0x10ec>
 801ac84:	eef0 ba67 	vmov.f32	s23, s15
 801ac88:	eef0 5a67 	vmov.f32	s11, s15
 801ac8c:	eeb0 0a67 	vmov.f32	s0, s15
 801ac90:	eef0 0a67 	vmov.f32	s1, s15
 801ac94:	eeb0 5a67 	vmov.f32	s10, s15
 801ac98:	eef0 4a67 	vmov.f32	s9, s15
 801ac9c:	eeb0 1a67 	vmov.f32	s2, s15
 801aca0:	eef0 1a67 	vmov.f32	s3, s15
 801aca4:	eeb0 4a67 	vmov.f32	s8, s15
 801aca8:	eef0 3a67 	vmov.f32	s7, s15
 801acac:	eeb0 3a67 	vmov.f32	s6, s15
 801acb0:	eeb0 2a67 	vmov.f32	s4, s15
 801acb4:	eef0 2a67 	vmov.f32	s5, s15
 801acb8:	2100      	movs	r1, #0
 801acba:	eeb7 ca00 	vmov.f32	s24, #112	@ 0x3f800000  1.0
 801acbe:	fb93 f2f4 	sdiv	r2, r3, r4
 801acc2:	fb04 3212 	mls	r2, r4, r2, r3
 801acc6:	b2d2      	uxtb	r2, r2
 801acc8:	3204      	adds	r2, #4
 801acca:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 801acce:	ee3b dacb 	vsub.f32	s26, s23, s22
 801acd2:	f9b2 00a4 	ldrsh.w	r0, [r2, #164]	@ 0xa4
 801acd6:	ee06 0a10 	vmov	s12, r0
 801acda:	f9b2 00a2 	ldrsh.w	r0, [r2, #162]	@ 0xa2
 801acde:	f9b2 20a6 	ldrsh.w	r2, [r2, #166]	@ 0xa6
 801ace2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801ace6:	ee0d 0a90 	vmov	s27, r0
 801acea:	ee26 6a28 	vmul.f32	s12, s12, s17
 801acee:	eef8 daed 	vcvt.f32.s32	s27, s27
 801acf2:	ee36 7a69 	vsub.f32	s14, s12, s19
 801acf6:	ee6d daa8 	vmul.f32	s27, s27, s17
 801acfa:	ee06 2a90 	vmov	s13, r2
 801acfe:	ee3d eaca 	vsub.f32	s28, s27, s20
 801ad02:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ad06:	ee27 7a07 	vmul.f32	s14, s14, s14
 801ad0a:	ee66 6aa8 	vmul.f32	s13, s13, s17
 801ad0e:	eeae 7a0e 	vfma.f32	s14, s28, s28
 801ad12:	ee3a ea6d 	vsub.f32	s28, s20, s27
 801ad16:	ee76 daea 	vsub.f32	s27, s13, s21
 801ad1a:	ee39 6ac6 	vsub.f32	s12, s19, s12
 801ad1e:	eead 7aad 	vfma.f32	s14, s27, s27
 801ad22:	ee7a 6ae6 	vsub.f32	s13, s21, s13
 801ad26:	eeb4 7aec 	vcmpe.f32	s14, s25
 801ad2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad2e:	f140 834b 	bpl.w	801b3c8 <MEMS_runMagCal.constprop.0+0x1860>
 801ad32:	3101      	adds	r1, #1
 801ad34:	b2ca      	uxtb	r2, r1
 801ad36:	4591      	cmp	r9, r2
 801ad38:	f103 0301 	add.w	r3, r3, #1
 801ad3c:	d8bf      	bhi.n	801acbe <MEMS_runMagCal.constprop.0+0x1156>
 801ad3e:	e372      	b.n	801b426 <MEMS_runMagCal.constprop.0+0x18be>
 801ad40:	eeb7 7a02 	vmov.f32	s14, #114	@ 0x3f900000  1.125
 801ad44:	ee26 6a07 	vmul.f32	s12, s12, s14
 801ad48:	eef4 7ac6 	vcmpe.f32	s15, s12
 801ad4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad50:	dc0e      	bgt.n	801ad70 <MEMS_runMagCal.constprop.0+0x1208>
 801ad52:	ee66 6a87 	vmul.f32	s13, s13, s14
 801ad56:	eef4 7ae6 	vcmpe.f32	s15, s13
 801ad5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad5e:	dc07      	bgt.n	801ad70 <MEMS_runMagCal.constprop.0+0x1208>
 801ad60:	ee25 7a87 	vmul.f32	s14, s11, s14
 801ad64:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ad68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad6c:	f77f acd4 	ble.w	801a718 <MEMS_runMagCal.constprop.0+0xbb0>
 801ad70:	2300      	movs	r3, #0
 801ad72:	f88a 3014 	strb.w	r3, [sl, #20]
 801ad76:	f7ff bb01 	b.w	801a37c <MEMS_runMagCal.constprop.0+0x814>
 801ad7a:	fa06 f103 	lsl.w	r1, r6, r3
 801ad7e:	ea19 0f01 	tst.w	r9, r1
 801ad82:	bf1c      	itt	ne
 801ad84:	3001      	addne	r0, #1
 801ad86:	b2c0      	uxtbne	r0, r0
 801ad88:	ea18 0f01 	tst.w	r8, r1
 801ad8c:	bf18      	it	ne
 801ad8e:	3401      	addne	r4, #1
 801ad90:	ea0e 0101 	and.w	r1, lr, r1
 801ad94:	bf18      	it	ne
 801ad96:	b2e4      	uxtbne	r4, r4
 801ad98:	2900      	cmp	r1, #0
 801ad9a:	bf18      	it	ne
 801ad9c:	3201      	addne	r2, #1
 801ad9e:	b2d2      	uxtb	r2, r2
 801ada0:	3301      	adds	r3, #1
 801ada2:	f7ff bba9 	b.w	801a4f8 <MEMS_runMagCal.constprop.0+0x990>
 801ada6:	9908      	ldr	r1, [sp, #32]
 801ada8:	f8aa 20c4 	strh.w	r2, [sl, #196]	@ 0xc4
 801adac:	9a03      	ldr	r2, [sp, #12]
 801adae:	f8ca 43b8 	str.w	r4, [sl, #952]	@ 0x3b8
 801adb2:	fb01 2303 	mla	r3, r1, r3, r2
 801adb6:	f8ca 30a4 	str.w	r3, [sl, #164]	@ 0xa4
 801adba:	f04f 0301 	mov.w	r3, #1
 801adbe:	f88a 30a0 	strb.w	r3, [sl, #160]	@ 0xa0
 801adc2:	9b05      	ldr	r3, [sp, #20]
 801adc4:	f88a 30a2 	strb.w	r3, [sl, #162]	@ 0xa2
 801adc8:	f8aa 30c0 	strh.w	r3, [sl, #192]	@ 0xc0
 801adcc:	fb95 f3f7 	sdiv	r3, r5, r7
 801add0:	fb07 5313 	mls	r3, r7, r3, r5
 801add4:	2b00      	cmp	r3, #0
 801add6:	bfb8      	it	lt
 801add8:	19db      	addlt	r3, r3, r7
 801adda:	b21b      	sxth	r3, r3
 801addc:	ee07 3a90 	vmov	s15, r3
 801ade0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801ade4:	f8aa 50c2 	strh.w	r5, [sl, #194]	@ 0xc2
 801ade8:	ee20 0a09 	vmul.f32	s0, s0, s18
 801adec:	f8aa 60c6 	strh.w	r6, [sl, #198]	@ 0xc6
 801adf0:	f8aa 63bc 	strh.w	r6, [sl, #956]	@ 0x3bc
 801adf4:	f002 fa0c 	bl	801d210 <roundf>
 801adf8:	fb99 f3f7 	sdiv	r3, r9, r7
 801adfc:	fb07 9313 	mls	r3, r7, r3, r9
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801ae06:	bfb8      	it	lt
 801ae08:	19db      	addlt	r3, r3, r7
 801ae0a:	b21b      	sxth	r3, r3
 801ae0c:	edcd 7a05 	vstr	s15, [sp, #20]
 801ae10:	ee07 3a90 	vmov	s15, r3
 801ae14:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801ae18:	f89d 4014 	ldrb.w	r4, [sp, #20]
 801ae1c:	ee20 0a09 	vmul.f32	s0, s0, s18
 801ae20:	f002 f9f6 	bl	801d210 <roundf>
 801ae24:	fb96 f3f7 	sdiv	r3, r6, r7
 801ae28:	fb07 6313 	mls	r3, r7, r3, r6
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801ae32:	bfb8      	it	lt
 801ae34:	19db      	addlt	r3, r3, r7
 801ae36:	b21b      	sxth	r3, r3
 801ae38:	edcd 7a05 	vstr	s15, [sp, #20]
 801ae3c:	ee07 3a90 	vmov	s15, r3
 801ae40:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801ae44:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801ae48:	ee20 0a09 	vmul.f32	s0, s0, s18
 801ae4c:	f002 f9e0 	bl	801d210 <roundf>
 801ae50:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801ae54:	2c1f      	cmp	r4, #31
 801ae56:	edcd 7a05 	vstr	s15, [sp, #20]
 801ae5a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801ae5e:	d94c      	bls.n	801aefa <MEMS_runMagCal.constprop.0+0x1392>
 801ae60:	f8da 30a8 	ldr.w	r3, [sl, #168]	@ 0xa8
 801ae64:	3c20      	subs	r4, #32
 801ae66:	2101      	movs	r1, #1
 801ae68:	40a1      	lsls	r1, r4
 801ae6a:	430b      	orrs	r3, r1
 801ae6c:	f8ca 30a8 	str.w	r3, [sl, #168]	@ 0xa8
 801ae70:	2d1f      	cmp	r5, #31
 801ae72:	d93a      	bls.n	801aeea <MEMS_runMagCal.constprop.0+0x1382>
 801ae74:	f8da 10b0 	ldr.w	r1, [sl, #176]	@ 0xb0
 801ae78:	3d20      	subs	r5, #32
 801ae7a:	2301      	movs	r3, #1
 801ae7c:	40ab      	lsls	r3, r5
 801ae7e:	430b      	orrs	r3, r1
 801ae80:	f8ca 30b0 	str.w	r3, [sl, #176]	@ 0xb0
 801ae84:	2a1f      	cmp	r2, #31
 801ae86:	d927      	bls.n	801aed8 <MEMS_runMagCal.constprop.0+0x1370>
 801ae88:	f8da 10bc 	ldr.w	r1, [sl, #188]	@ 0xbc
 801ae8c:	3a20      	subs	r2, #32
 801ae8e:	2301      	movs	r3, #1
 801ae90:	4093      	lsls	r3, r2
 801ae92:	430b      	orrs	r3, r1
 801ae94:	f8ca 30bc 	str.w	r3, [sl, #188]	@ 0xbc
 801ae98:	2301      	movs	r3, #1
 801ae9a:	930e      	str	r3, [sp, #56]	@ 0x38
 801ae9c:	f7ff baf2 	b.w	801a484 <MEMS_runMagCal.constprop.0+0x91c>
 801aea0:	460b      	mov	r3, r1
 801aea2:	2101      	movs	r1, #1
 801aea4:	fa01 f303 	lsl.w	r3, r1, r3
 801aea8:	4003      	ands	r3, r0
 801aeaa:	f7ff ba51 	b.w	801a350 <MEMS_runMagCal.constprop.0+0x7e8>
 801aeae:	460b      	mov	r3, r1
 801aeb0:	2101      	movs	r1, #1
 801aeb2:	4099      	lsls	r1, r3
 801aeb4:	ea01 0c00 	and.w	ip, r1, r0
 801aeb8:	f7ff ba3e 	b.w	801a338 <MEMS_runMagCal.constprop.0+0x7d0>
 801aebc:	4613      	mov	r3, r2
 801aebe:	2201      	movs	r2, #1
 801aec0:	409a      	lsls	r2, r3
 801aec2:	400a      	ands	r2, r1
 801aec4:	f7ff ba2c 	b.w	801a320 <MEMS_runMagCal.constprop.0+0x7b8>
 801aec8:	f04f 0e01 	mov.w	lr, #1
 801aecc:	f7ff b92c 	b.w	801a128 <MEMS_runMagCal.constprop.0+0x5c0>
 801aed0:	2700      	movs	r7, #0
 801aed2:	463b      	mov	r3, r7
 801aed4:	f7ff b8b7 	b.w	801a046 <MEMS_runMagCal.constprop.0+0x4de>
 801aed8:	f8da 30b8 	ldr.w	r3, [sl, #184]	@ 0xb8
 801aedc:	2101      	movs	r1, #1
 801aede:	fa01 f202 	lsl.w	r2, r1, r2
 801aee2:	4313      	orrs	r3, r2
 801aee4:	f8ca 30b8 	str.w	r3, [sl, #184]	@ 0xb8
 801aee8:	e7d6      	b.n	801ae98 <MEMS_runMagCal.constprop.0+0x1330>
 801aeea:	f8da 30b4 	ldr.w	r3, [sl, #180]	@ 0xb4
 801aeee:	2101      	movs	r1, #1
 801aef0:	40a9      	lsls	r1, r5
 801aef2:	430b      	orrs	r3, r1
 801aef4:	f8ca 30b4 	str.w	r3, [sl, #180]	@ 0xb4
 801aef8:	e7c4      	b.n	801ae84 <MEMS_runMagCal.constprop.0+0x131c>
 801aefa:	f8da 30ac 	ldr.w	r3, [sl, #172]	@ 0xac
 801aefe:	2101      	movs	r1, #1
 801af00:	40a1      	lsls	r1, r4
 801af02:	430b      	orrs	r3, r1
 801af04:	f8ca 30ac 	str.w	r3, [sl, #172]	@ 0xac
 801af08:	e7b2      	b.n	801ae70 <MEMS_runMagCal.constprop.0+0x1308>
 801af0a:	2300      	movs	r3, #0
 801af0c:	e9ca 332a 	strd	r3, r3, [sl, #168]	@ 0xa8
 801af10:	e9ca 332c 	strd	r3, r3, [sl, #176]	@ 0xb0
 801af14:	e9ca 332e 	strd	r3, r3, [sl, #184]	@ 0xb8
 801af18:	f88a 30a0 	strb.w	r3, [sl, #160]	@ 0xa0
 801af1c:	23ff      	movs	r3, #255	@ 0xff
 801af1e:	f88a 30a2 	strb.w	r3, [sl, #162]	@ 0xa2
 801af22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801af24:	2b00      	cmp	r3, #0
 801af26:	f47f a941 	bne.w	801a1ac <MEMS_runMagCal.constprop.0+0x644>
 801af2a:	9b04      	ldr	r3, [sp, #16]
 801af2c:	930e      	str	r3, [sp, #56]	@ 0x38
 801af2e:	f7ff bab7 	b.w	801a4a0 <MEMS_runMagCal.constprop.0+0x938>
 801af32:	f241 225b 	movw	r2, #4699	@ 0x125b
 801af36:	4293      	cmp	r3, r2
 801af38:	f67f a874 	bls.w	801a024 <MEMS_runMagCal.constprop.0+0x4bc>
 801af3c:	f5a3 5392 	sub.w	r3, r3, #4672	@ 0x1240
 801af40:	3b1c      	subs	r3, #28
 801af42:	b29b      	uxth	r3, r3
 801af44:	f643 2298 	movw	r2, #15000	@ 0x3a98
 801af48:	4293      	cmp	r3, r2
 801af4a:	f67f a86b 	bls.w	801a024 <MEMS_runMagCal.constprop.0+0x4bc>
 801af4e:	f7ff b85f 	b.w	801a010 <MEMS_runMagCal.constprop.0+0x4a8>
 801af52:	4545      	cmp	r5, r8
 801af54:	f000 8118 	beq.w	801b188 <MEMS_runMagCal.constprop.0+0x1620>
 801af58:	2c03      	cmp	r4, #3
 801af5a:	f47f a899 	bne.w	801a090 <MEMS_runMagCal.constprop.0+0x528>
 801af5e:	ee07 1a90 	vmov	s15, r1
 801af62:	ed5f 6ac3 	vldr	s13, [pc, #-780]	@ 801ac58 <MEMS_runMagCal.constprop.0+0x10f0>
 801af66:	ed9a 7a06 	vldr	s14, [sl, #24]
 801af6a:	f89a 3054 	ldrb.w	r3, [sl, #84]	@ 0x54
 801af6e:	f8da 501c 	ldr.w	r5, [sl, #28]
 801af72:	930f      	str	r3, [sp, #60]	@ 0x3c
 801af74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801af78:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801af7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801af80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801af84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af88:	f77f a882 	ble.w	801a090 <MEMS_runMagCal.constprop.0+0x528>
 801af8c:	2d00      	cmp	r5, #0
 801af8e:	f43f a881 	beq.w	801a094 <MEMS_runMagCal.constprop.0+0x52c>
 801af92:	eddd 7a02 	vldr	s15, [sp, #8]
 801af96:	f105 030a 	add.w	r3, r5, #10
 801af9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801af9e:	ee07 3a90 	vmov	s15, r3
 801afa2:	ee27 7a26 	vmul.f32	s14, s14, s13
 801afa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801afaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801afae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afb2:	f77f a86f 	ble.w	801a094 <MEMS_runMagCal.constprop.0+0x52c>
 801afb6:	f89a 3015 	ldrb.w	r3, [sl, #21]
 801afba:	2b00      	cmp	r3, #0
 801afbc:	f47f a86a 	bne.w	801a094 <MEMS_runMagCal.constprop.0+0x52c>
 801afc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	f43f a9da 	beq.w	801a37c <MEMS_runMagCal.constprop.0+0x814>
 801afc8:	f89a 305c 	ldrb.w	r3, [sl, #92]	@ 0x5c
 801afcc:	2bff      	cmp	r3, #255	@ 0xff
 801afce:	f47f a9d5 	bne.w	801a37c <MEMS_runMagCal.constprop.0+0x814>
 801afd2:	f7ff b862 	b.w	801a09a <MEMS_runMagCal.constprop.0+0x532>
 801afd6:	f04f 0c00 	mov.w	ip, #0
 801afda:	f7fe bf8f 	b.w	8019efc <MEMS_runMagCal.constprop.0+0x394>
 801afde:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801afe0:	fb9e f2f0 	sdiv	r2, lr, r0
 801afe4:	fb00 e212 	mls	r2, r0, r2, lr
 801afe8:	b252      	sxtb	r2, r2
 801afea:	f88a 20a2 	strb.w	r2, [sl, #162]	@ 0xa2
 801afee:	3204      	adds	r2, #4
 801aff0:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 801aff4:	9b05      	ldr	r3, [sp, #20]
 801aff6:	f8a2 50a2 	strh.w	r5, [r2, #162]	@ 0xa2
 801affa:	3301      	adds	r3, #1
 801affc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801affe:	f8da 10a4 	ldr.w	r1, [sl, #164]	@ 0xa4
 801b002:	f8c2 50a4 	str.w	r5, [r2, #164]	@ 0xa4
 801b006:	4283      	cmp	r3, r0
 801b008:	f8ca 43b8 	str.w	r4, [sl, #952]	@ 0x3b8
 801b00c:	9c03      	ldr	r4, [sp, #12]
 801b00e:	f8aa 63bc 	strh.w	r6, [sl, #956]	@ 0x3bc
 801b012:	bfa8      	it	ge
 801b014:	4603      	movge	r3, r0
 801b016:	b2db      	uxtb	r3, r3
 801b018:	1a61      	subs	r1, r4, r1
 801b01a:	4459      	add	r1, fp
 801b01c:	4283      	cmp	r3, r0
 801b01e:	f88a 30a0 	strb.w	r3, [sl, #160]	@ 0xa0
 801b022:	f8a2 10a0 	strh.w	r1, [r2, #160]	@ 0xa0
 801b026:	f000 811a 	beq.w	801b25e <MEMS_runMagCal.constprop.0+0x16f6>
 801b02a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b02c:	2b1f      	cmp	r3, #31
 801b02e:	d940      	bls.n	801b0b2 <MEMS_runMagCal.constprop.0+0x154a>
 801b030:	f1a3 0120 	sub.w	r1, r3, #32
 801b034:	2201      	movs	r2, #1
 801b036:	f8da 30a8 	ldr.w	r3, [sl, #168]	@ 0xa8
 801b03a:	408a      	lsls	r2, r1
 801b03c:	4313      	orrs	r3, r2
 801b03e:	f8ca 30a8 	str.w	r3, [sl, #168]	@ 0xa8
 801b042:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b044:	2b1f      	cmp	r3, #31
 801b046:	d92b      	bls.n	801b0a0 <MEMS_runMagCal.constprop.0+0x1538>
 801b048:	f8da 20b0 	ldr.w	r2, [sl, #176]	@ 0xb0
 801b04c:	f1a3 0120 	sub.w	r1, r3, #32
 801b050:	2301      	movs	r3, #1
 801b052:	408b      	lsls	r3, r1
 801b054:	4313      	orrs	r3, r2
 801b056:	f8ca 30b0 	str.w	r3, [sl, #176]	@ 0xb0
 801b05a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b05c:	2b1f      	cmp	r3, #31
 801b05e:	d916      	bls.n	801b08e <MEMS_runMagCal.constprop.0+0x1526>
 801b060:	f8da 20bc 	ldr.w	r2, [sl, #188]	@ 0xbc
 801b064:	f1a3 0120 	sub.w	r1, r3, #32
 801b068:	2301      	movs	r3, #1
 801b06a:	408b      	lsls	r3, r1
 801b06c:	4313      	orrs	r3, r2
 801b06e:	f8ca 30bc 	str.w	r3, [sl, #188]	@ 0xbc
 801b072:	e711      	b.n	801ae98 <MEMS_runMagCal.constprop.0+0x1330>
 801b074:	2300      	movs	r3, #0
 801b076:	930d      	str	r3, [sp, #52]	@ 0x34
 801b078:	2301      	movs	r3, #1
 801b07a:	9304      	str	r3, [sp, #16]
 801b07c:	f7fe bfad 	b.w	8019fda <MEMS_runMagCal.constprop.0+0x472>
 801b080:	fb9e f2f3 	sdiv	r2, lr, r3
 801b084:	fb03 e212 	mls	r2, r3, r2, lr
 801b088:	b212      	sxth	r2, r2
 801b08a:	f7ff b9c5 	b.w	801a418 <MEMS_runMagCal.constprop.0+0x8b0>
 801b08e:	4619      	mov	r1, r3
 801b090:	2201      	movs	r2, #1
 801b092:	f8da 30b8 	ldr.w	r3, [sl, #184]	@ 0xb8
 801b096:	408a      	lsls	r2, r1
 801b098:	4313      	orrs	r3, r2
 801b09a:	f8ca 30b8 	str.w	r3, [sl, #184]	@ 0xb8
 801b09e:	e6fb      	b.n	801ae98 <MEMS_runMagCal.constprop.0+0x1330>
 801b0a0:	4619      	mov	r1, r3
 801b0a2:	2201      	movs	r2, #1
 801b0a4:	f8da 30b4 	ldr.w	r3, [sl, #180]	@ 0xb4
 801b0a8:	408a      	lsls	r2, r1
 801b0aa:	4313      	orrs	r3, r2
 801b0ac:	f8ca 30b4 	str.w	r3, [sl, #180]	@ 0xb4
 801b0b0:	e7d3      	b.n	801b05a <MEMS_runMagCal.constprop.0+0x14f2>
 801b0b2:	4619      	mov	r1, r3
 801b0b4:	2201      	movs	r2, #1
 801b0b6:	f8da 30ac 	ldr.w	r3, [sl, #172]	@ 0xac
 801b0ba:	408a      	lsls	r2, r1
 801b0bc:	4313      	orrs	r3, r2
 801b0be:	f8ca 30ac 	str.w	r3, [sl, #172]	@ 0xac
 801b0c2:	e7be      	b.n	801b042 <MEMS_runMagCal.constprop.0+0x14da>
 801b0c4:	ee07 2a10 	vmov	s14, r2
 801b0c8:	ee36 6a06 	vadd.f32	s12, s12, s12
 801b0cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b0d0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801b0d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0d8:	f77e af7c 	ble.w	8019fd4 <MEMS_runMagCal.constprop.0+0x46c>
 801b0dc:	ee07 1a10 	vmov	s14, r1
 801b0e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b0e4:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801b0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0ec:	f57e af72 	bpl.w	8019fd4 <MEMS_runMagCal.constprop.0+0x46c>
 801b0f0:	ee07 0a10 	vmov	s14, r0
 801b0f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b0f8:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801b0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b100:	bf4c      	ite	mi
 801b102:	2301      	movmi	r3, #1
 801b104:	2300      	movpl	r3, #0
 801b106:	930d      	str	r3, [sp, #52]	@ 0x34
 801b108:	2300      	movs	r3, #0
 801b10a:	9304      	str	r3, [sp, #16]
 801b10c:	f7fe bf65 	b.w	8019fda <MEMS_runMagCal.constprop.0+0x472>
 801b110:	ee07 3a90 	vmov	s15, r3
 801b114:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801b118:	eddd 7a02 	vldr	s15, [sp, #8]
 801b11c:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 801b394 <MEMS_runMagCal.constprop.0+0x182c>
 801b120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b124:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 801b128:	ee67 7a86 	vmul.f32	s15, s15, s12
 801b12c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801b130:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801b134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b138:	f63f a9c8 	bhi.w	801a4cc <MEMS_runMagCal.constprop.0+0x964>
 801b13c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b13e:	2b00      	cmp	r3, #0
 801b140:	f43f a91c 	beq.w	801a37c <MEMS_runMagCal.constprop.0+0x814>
 801b144:	ee07 5a10 	vmov	s14, r5
 801b148:	eef8 6a47 	vcvt.f32.u32	s13, s14
 801b14c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 801b150:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b154:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b15c:	bf4c      	ite	mi
 801b15e:	2301      	movmi	r3, #1
 801b160:	2300      	movpl	r3, #0
 801b162:	930d      	str	r3, [sp, #52]	@ 0x34
 801b164:	f7ff b9b6 	b.w	801a4d4 <MEMS_runMagCal.constprop.0+0x96c>
 801b168:	fb91 f2f4 	sdiv	r2, r1, r4
 801b16c:	fb04 1112 	mls	r1, r4, r2, r1
 801b170:	b209      	sxth	r1, r1
 801b172:	f7fe bfce 	b.w	801a112 <MEMS_runMagCal.constprop.0+0x5aa>
 801b176:	eddd 7a02 	vldr	s15, [sp, #8]
 801b17a:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 801b394 <MEMS_runMagCal.constprop.0+0x182c>
 801b17e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b182:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b186:	e7dd      	b.n	801b144 <MEMS_runMagCal.constprop.0+0x15dc>
 801b188:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 801b3b4 <MEMS_runMagCal.constprop.0+0x184c>
 801b18c:	1c7b      	adds	r3, r7, #1
 801b18e:	edcd 6a13 	vstr	s13, [sp, #76]	@ 0x4c
 801b192:	af14      	add	r7, sp, #80	@ 0x50
 801b194:	fb93 f2f8 	sdiv	r2, r3, r8
 801b198:	edc7 6a00 	vstr	s13, [r7]
 801b19c:	fb08 3312 	mls	r3, r8, r2, r3
 801b1a0:	f1b8 0f00 	cmp.w	r8, #0
 801b1a4:	f000 80e7 	beq.w	801b376 <MEMS_runMagCal.constprop.0+0x180e>
 801b1a8:	b29b      	uxth	r3, r3
 801b1aa:	eeb0 6a66 	vmov.f32	s12, s13
 801b1ae:	eb08 0e03 	add.w	lr, r8, r3
 801b1b2:	f241 2c5c 	movw	ip, #4700	@ 0x125c
 801b1b6:	fbb3 f2f8 	udiv	r2, r3, r8
 801b1ba:	fb08 3212 	mls	r2, r8, r2, r3
 801b1be:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 801b1c2:	3301      	adds	r3, #1
 801b1c4:	8d10      	ldrh	r0, [r2, #40]	@ 0x28
 801b1c6:	4560      	cmp	r0, ip
 801b1c8:	f5a0 5292 	sub.w	r2, r0, #4672	@ 0x1240
 801b1cc:	f1a2 021c 	sub.w	r2, r2, #28
 801b1d0:	bf98      	it	ls
 801b1d2:	ebac 0200 	subls.w	r2, ip, r0
 801b1d6:	ee07 0a90 	vmov	s15, r0
 801b1da:	b292      	uxth	r2, r2
 801b1dc:	fb02 f202 	mul.w	r2, r2, r2
 801b1e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b1e4:	ee07 2a90 	vmov	s15, r2
 801b1e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b1ec:	4573      	cmp	r3, lr
 801b1ee:	ee36 6a07 	vadd.f32	s12, s12, s14
 801b1f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801b1f6:	d1de      	bne.n	801b1b6 <MEMS_runMagCal.constprop.0+0x164e>
 801b1f8:	ee07 6a90 	vmov	s15, r6
 801b1fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b200:	eddf 5a65 	vldr	s11, [pc, #404]	@ 801b398 <MEMS_runMagCal.constprop.0+0x1830>
 801b204:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b208:	eec6 6a27 	vdiv.f32	s13, s12, s15
 801b20c:	eef1 7ac7 	vsqrt.f32	s15, s14
 801b210:	ed9f 6a62 	vldr	s12, [pc, #392]	@ 801b39c <MEMS_runMagCal.constprop.0+0x1834>
 801b214:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801b218:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801b21c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801b220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b224:	edcd 6a13 	vstr	s13, [sp, #76]	@ 0x4c
 801b228:	edc7 7a00 	vstr	s15, [r7]
 801b22c:	dd44      	ble.n	801b2b8 <MEMS_runMagCal.constprop.0+0x1750>
 801b22e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801b3a0 <MEMS_runMagCal.constprop.0+0x1838>
 801b232:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b236:	2302      	movs	r3, #2
 801b238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b23c:	f88a 306c 	strb.w	r3, [sl, #108]	@ 0x6c
 801b240:	bfc4      	itt	gt
 801b242:	2301      	movgt	r3, #1
 801b244:	f88a 3015 	strbgt.w	r3, [sl, #21]
 801b248:	f7fe bf22 	b.w	801a090 <MEMS_runMagCal.constprop.0+0x528>
 801b24c:	eeb0 0a4b 	vmov.f32	s0, s22
 801b250:	4638      	mov	r0, r7
 801b252:	f7f9 fd25 	bl	8014ca0 <MEMS_updateMagBufferIndex.constprop.0>
 801b256:	f89a 40a0 	ldrb.w	r4, [sl, #160]	@ 0xa0
 801b25a:	f7fe bf8e 	b.w	801a17a <MEMS_runMagCal.constprop.0+0x612>
 801b25e:	eeb0 0a4b 	vmov.f32	s0, s22
 801b262:	4638      	mov	r0, r7
 801b264:	f7f9 fd1c 	bl	8014ca0 <MEMS_updateMagBufferIndex.constprop.0>
 801b268:	e6df      	b.n	801b02a <MEMS_runMagCal.constprop.0+0x14c2>
 801b26a:	eb0a 03c5 	add.w	r3, sl, r5, lsl #3
 801b26e:	f8da 20a4 	ldr.w	r2, [sl, #164]	@ 0xa4
 801b272:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 801b276:	f8da 1020 	ldr.w	r1, [sl, #32]
 801b27a:	4413      	add	r3, r2
 801b27c:	4299      	cmp	r1, r3
 801b27e:	f4bf ad77 	bcs.w	801ad70 <MEMS_runMagCal.constprop.0+0x1208>
 801b282:	f8da 301c 	ldr.w	r3, [sl, #28]
 801b286:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801b28a:	fb01 f303 	mul.w	r3, r1, r3
 801b28e:	3364      	adds	r3, #100	@ 0x64
 801b290:	4293      	cmp	r3, r2
 801b292:	bf38      	it	cc
 801b294:	4613      	movcc	r3, r2
 801b296:	2200      	movs	r2, #0
 801b298:	f8ca 3020 	str.w	r3, [sl, #32]
 801b29c:	f88a 2014 	strb.w	r2, [sl, #20]
 801b2a0:	f7ff b86c 	b.w	801a37c <MEMS_runMagCal.constprop.0+0x814>
 801b2a4:	f8ca 60a4 	str.w	r6, [sl, #164]	@ 0xa4
 801b2a8:	e63b      	b.n	801af22 <MEMS_runMagCal.constprop.0+0x13ba>
 801b2aa:	fb97 f2f3 	sdiv	r2, r7, r3
 801b2ae:	fb03 7212 	mls	r2, r3, r2, r7
 801b2b2:	b212      	sxth	r2, r2
 801b2b4:	f7ff b957 	b.w	801a566 <MEMS_runMagCal.constprop.0+0x9fe>
 801b2b8:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 801b3a4 <MEMS_runMagCal.constprop.0+0x183c>
 801b2bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2c4:	eddf 7a36 	vldr	s15, [pc, #216]	@ 801b3a0 <MEMS_runMagCal.constprop.0+0x1838>
 801b2c8:	d444      	bmi.n	801b354 <MEMS_runMagCal.constprop.0+0x17ec>
 801b2ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2d2:	bfc4      	itt	gt
 801b2d4:	2301      	movgt	r3, #1
 801b2d6:	f88a 3015 	strbgt.w	r3, [sl, #21]
 801b2da:	e63d      	b.n	801af58 <MEMS_runMagCal.constprop.0+0x13f0>
 801b2dc:	ed9a 5a23 	vldr	s10, [sl, #140]	@ 0x8c
 801b2e0:	ed9a 7a1f 	vldr	s14, [sl, #124]	@ 0x7c
 801b2e4:	edda 4a27 	vldr	s9, [sl, #156]	@ 0x9c
 801b2e8:	ee37 7a05 	vadd.f32	s14, s14, s10
 801b2ec:	ed9f 5a2e 	vldr	s10, [pc, #184]	@ 801b3a8 <MEMS_runMagCal.constprop.0+0x1840>
 801b2f0:	ee37 7a24 	vadd.f32	s14, s14, s9
 801b2f4:	eef7 4a02 	vmov.f32	s9, #114	@ 0x3f900000  1.125
 801b2f8:	ee27 7a05 	vmul.f32	s14, s14, s10
 801b2fc:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 801b300:	eeb4 7ae4 	vcmpe.f32	s14, s9
 801b304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b308:	bf88      	it	hi
 801b30a:	eeb0 7a64 	vmovhi.f32	s14, s9
 801b30e:	eeb4 7ac5 	vcmpe.f32	s14, s10
 801b312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b316:	bfb8      	it	lt
 801b318:	eeb0 7a45 	vmovlt.f32	s14, s10
 801b31c:	ee26 6a07 	vmul.f32	s12, s12, s14
 801b320:	eef4 7ac6 	vcmpe.f32	s15, s12
 801b324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b328:	f73f ad22 	bgt.w	801ad70 <MEMS_runMagCal.constprop.0+0x1208>
 801b32c:	ee66 6a87 	vmul.f32	s13, s13, s14
 801b330:	eef4 7ae6 	vcmpe.f32	s15, s13
 801b334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b338:	f73f ad1a 	bgt.w	801ad70 <MEMS_runMagCal.constprop.0+0x1208>
 801b33c:	ee65 5a87 	vmul.f32	s11, s11, s14
 801b340:	eef4 7ae5 	vcmpe.f32	s15, s11
 801b344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b348:	f73f ad12 	bgt.w	801ad70 <MEMS_runMagCal.constprop.0+0x1208>
 801b34c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801b350:	f7ff b9e2 	b.w	801a718 <MEMS_runMagCal.constprop.0+0xbb0>
 801b354:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b358:	2303      	movs	r3, #3
 801b35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b35e:	f88a 306c 	strb.w	r3, [sl, #108]	@ 0x6c
 801b362:	bfd4      	ite	le
 801b364:	2300      	movle	r3, #0
 801b366:	2301      	movgt	r3, #1
 801b368:	f88a 3015 	strb.w	r3, [sl, #21]
 801b36c:	e5f7      	b.n	801af5e <MEMS_runMagCal.constprop.0+0x13f6>
 801b36e:	f04f 0901 	mov.w	r9, #1
 801b372:	f7ff b9a1 	b.w	801a6b8 <MEMS_runMagCal.constprop.0+0xb50>
 801b376:	2303      	movs	r3, #3
 801b378:	f88a 5015 	strb.w	r5, [sl, #21]
 801b37c:	f88a 306c 	strb.w	r3, [sl, #108]	@ 0x6c
 801b380:	e5ed      	b.n	801af5e <MEMS_runMagCal.constprop.0+0x13f6>
 801b382:	461a      	mov	r2, r3
 801b384:	fb97 f3f3 	sdiv	r3, r7, r3
 801b388:	fb02 7313 	mls	r3, r2, r3, r7
 801b38c:	b21b      	sxth	r3, r3
 801b38e:	f7ff ba71 	b.w	801a874 <MEMS_runMagCal.constprop.0+0xd0c>
 801b392:	bf00      	nop
 801b394:	3a83126f 	.word	0x3a83126f
 801b398:	3c23d70a 	.word	0x3c23d70a
 801b39c:	4b095440 	.word	0x4b095440
 801b3a0:	481c4000 	.word	0x481c4000
 801b3a4:	471c4000 	.word	0x471c4000
 801b3a8:	3eaaaaab 	.word	0x3eaaaaab
 801b3ac:	3e99999a 	.word	0x3e99999a
 801b3b0:	3f666666 	.word	0x3f666666
 801b3b4:	00000000 	.word	0x00000000
 801b3b8:	41f00001 	.word	0x41f00001
 801b3bc:	423c0000 	.word	0x423c0000
 801b3c0:	400ccccd 	.word	0x400ccccd
 801b3c4:	3dcccccd 	.word	0x3dcccccd
 801b3c8:	eef1 dac7 	vsqrt.f32	s27, s14
 801b3cc:	3101      	adds	r1, #1
 801b3ce:	b2ca      	uxtb	r2, r1
 801b3d0:	4591      	cmp	r9, r2
 801b3d2:	f103 0301 	add.w	r3, r3, #1
 801b3d6:	ee77 7a8c 	vadd.f32	s15, s15, s24
 801b3da:	ee8c 7a2d 	vdiv.f32	s14, s24, s27
 801b3de:	ee7d ba2d 	vadd.f32	s23, s26, s27
 801b3e2:	ee26 6a07 	vmul.f32	s12, s12, s14
 801b3e6:	ee2e da07 	vmul.f32	s26, s28, s14
 801b3ea:	ee7b da6d 	vsub.f32	s27, s22, s27
 801b3ee:	ee26 7a87 	vmul.f32	s14, s13, s14
 801b3f2:	eeed 2a8d 	vfma.f32	s5, s27, s26
 801b3f6:	eead 2a0d 	vfma.f32	s4, s26, s26
 801b3fa:	eead 3a06 	vfma.f32	s6, s26, s12
 801b3fe:	eeed 3a07 	vfma.f32	s7, s26, s14
 801b402:	eeed 1a86 	vfma.f32	s3, s27, s12
 801b406:	eeed 0a87 	vfma.f32	s1, s27, s14
 801b40a:	eea6 1a06 	vfma.f32	s2, s12, s12
 801b40e:	eee6 4a07 	vfma.f32	s9, s12, s14
 801b412:	eea7 0a07 	vfma.f32	s0, s14, s14
 801b416:	ee34 4a4d 	vsub.f32	s8, s8, s26
 801b41a:	ee35 5a46 	vsub.f32	s10, s10, s12
 801b41e:	ee75 5ac7 	vsub.f32	s11, s11, s14
 801b422:	f63f ac4c 	bhi.w	801acbe <MEMS_runMagCal.constprop.0+0x1156>
 801b426:	2240      	movs	r2, #64	@ 0x40
 801b428:	2100      	movs	r1, #0
 801b42a:	a844      	add	r0, sp, #272	@ 0x110
 801b42c:	edcd 7a43 	vstr	s15, [sp, #268]	@ 0x10c
 801b430:	edcd ba22 	vstr	s23, [sp, #136]	@ 0x88
 801b434:	ed8d 0a3e 	vstr	s0, [sp, #248]	@ 0xf8
 801b438:	edcd 0a21 	vstr	s1, [sp, #132]	@ 0x84
 801b43c:	ed8d 1a39 	vstr	s2, [sp, #228]	@ 0xe4
 801b440:	edcd 5a3f 	vstr	s11, [sp, #252]	@ 0xfc
 801b444:	ed8d 5a3b 	vstr	s10, [sp, #236]	@ 0xec
 801b448:	edcd 4a3a 	vstr	s9, [sp, #232]	@ 0xe8
 801b44c:	edcd 1a20 	vstr	s3, [sp, #128]	@ 0x80
 801b450:	ed8d 4a37 	vstr	s8, [sp, #220]	@ 0xdc
 801b454:	edcd 3a36 	vstr	s7, [sp, #216]	@ 0xd8
 801b458:	ed8d 3a35 	vstr	s6, [sp, #212]	@ 0xd4
 801b45c:	ed8d 2a34 	vstr	s4, [sp, #208]	@ 0xd0
 801b460:	edcd 2a1f 	vstr	s5, [sp, #124]	@ 0x7c
 801b464:	ed8d 3a38 	vstr	s6, [sp, #224]	@ 0xe0
 801b468:	edcd 3a3c 	vstr	s7, [sp, #240]	@ 0xf0
 801b46c:	ed8d 4a40 	vstr	s8, [sp, #256]	@ 0x100
 801b470:	edcd 4a3d 	vstr	s9, [sp, #244]	@ 0xf4
 801b474:	ed8d 5a41 	vstr	s10, [sp, #260]	@ 0x104
 801b478:	edcd 5a42 	vstr	s11, [sp, #264]	@ 0x108
 801b47c:	f004 fbc3 	bl	801fc06 <memset>
 801b480:	a834      	add	r0, sp, #208	@ 0xd0
 801b482:	ab44      	add	r3, sp, #272	@ 0x110
 801b484:	4601      	mov	r1, r0
 801b486:	2200      	movs	r2, #0
 801b488:	2a00      	cmp	r2, #0
 801b48a:	f000 810c 	beq.w	801b6a6 <MEMS_runMagCal.constprop.0+0x1b3e>
 801b48e:	eddd 7a44 	vldr	s15, [sp, #272]	@ 0x110
 801b492:	eeb0 7ae7 	vabs.f32	s14, s15
 801b496:	eeb4 7ac9 	vcmpe.f32	s14, s18
 801b49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b49e:	f100 8136 	bmi.w	801b70e <MEMS_runMagCal.constprop.0+0x1ba6>
 801b4a2:	ed90 7a00 	vldr	s14, [r0]
 801b4a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b4aa:	b255      	sxtb	r5, r2
 801b4ac:	edc3 6a00 	vstr	s13, [r3]
 801b4b0:	2d00      	cmp	r5, #0
 801b4b2:	d056      	beq.n	801b562 <MEMS_runMagCal.constprop.0+0x19fa>
 801b4b4:	eddd 7a48 	vldr	s15, [sp, #288]	@ 0x120
 801b4b8:	2a01      	cmp	r2, #1
 801b4ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b4be:	f000 810c 	beq.w	801b6da <MEMS_runMagCal.constprop.0+0x1b72>
 801b4c2:	ed9d 6a49 	vldr	s12, [sp, #292]	@ 0x124
 801b4c6:	eeb0 7ac6 	vabs.f32	s14, s12
 801b4ca:	eeb4 7ac9 	vcmpe.f32	s14, s18
 801b4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4d2:	f100 811c 	bmi.w	801b70e <MEMS_runMagCal.constprop.0+0x1ba6>
 801b4d6:	ed90 7a01 	vldr	s14, [r0, #4]
 801b4da:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b4de:	2a02      	cmp	r2, #2
 801b4e0:	eec7 7a06 	vdiv.f32	s15, s14, s12
 801b4e4:	edc3 7a01 	vstr	s15, [r3, #4]
 801b4e8:	ed9d 7a4d 	vldr	s14, [sp, #308]	@ 0x134
 801b4ec:	ed9d 6a4c 	vldr	s12, [sp, #304]	@ 0x130
 801b4f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 801b4f4:	eea6 7a26 	vfma.f32	s14, s12, s13
 801b4f8:	f000 80e1 	beq.w	801b6be <MEMS_runMagCal.constprop.0+0x1b56>
 801b4fc:	eddd 5a4e 	vldr	s11, [sp, #312]	@ 0x138
 801b500:	eeb0 6ae5 	vabs.f32	s12, s11
 801b504:	eeb4 6ac9 	vcmpe.f32	s12, s18
 801b508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b50c:	f100 80ff 	bmi.w	801b70e <MEMS_runMagCal.constprop.0+0x1ba6>
 801b510:	ed90 6a02 	vldr	s12, [r0, #8]
 801b514:	ee36 7a47 	vsub.f32	s14, s12, s14
 801b518:	2a03      	cmp	r2, #3
 801b51a:	ee87 6a25 	vdiv.f32	s12, s14, s11
 801b51e:	ed83 6a02 	vstr	s12, [r3, #8]
 801b522:	ed9d 7a51 	vldr	s14, [sp, #324]	@ 0x144
 801b526:	eddd 5a50 	vldr	s11, [sp, #320]	@ 0x140
 801b52a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b52e:	ed9d 7a52 	vldr	s14, [sp, #328]	@ 0x148
 801b532:	eee5 7aa6 	vfma.f32	s15, s11, s13
 801b536:	eee7 7a06 	vfma.f32	s15, s14, s12
 801b53a:	f000 80dc 	beq.w	801b6f6 <MEMS_runMagCal.constprop.0+0x1b8e>
 801b53e:	ed9d 6a53 	vldr	s12, [sp, #332]	@ 0x14c
 801b542:	eeb0 7ac6 	vabs.f32	s14, s12
 801b546:	eeb4 7ac9 	vcmpe.f32	s14, s18
 801b54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b54e:	f100 80de 	bmi.w	801b70e <MEMS_runMagCal.constprop.0+0x1ba6>
 801b552:	ed90 7a03 	vldr	s14, [r0, #12]
 801b556:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b55a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 801b55e:	edc3 6a03 	vstr	s13, [r3, #12]
 801b562:	3201      	adds	r2, #1
 801b564:	2a04      	cmp	r2, #4
 801b566:	f100 0010 	add.w	r0, r0, #16
 801b56a:	f103 0310 	add.w	r3, r3, #16
 801b56e:	f101 0114 	add.w	r1, r1, #20
 801b572:	d189      	bne.n	801b488 <MEMS_runMagCal.constprop.0+0x1920>
 801b574:	aa1f      	add	r2, sp, #124	@ 0x7c
 801b576:	a91b      	add	r1, sp, #108	@ 0x6c
 801b578:	a844      	add	r0, sp, #272	@ 0x110
 801b57a:	f7f9 fa29 	bl	80149d0 <llEvaluate.constprop.0>
 801b57e:	ed5f ba6f 	vldr	s23, [pc, #-444]	@ 801b3c4 <MEMS_runMagCal.constprop.0+0x185c>
 801b582:	9d04      	ldr	r5, [sp, #16]
 801b584:	f8cd 8018 	str.w	r8, [sp, #24]
 801b588:	ab1f      	add	r3, sp, #124	@ 0x7c
 801b58a:	46b0      	mov	r8, r6
 801b58c:	f10d 0b8c 	add.w	fp, sp, #140	@ 0x8c
 801b590:	4626      	mov	r6, r4
 801b592:	2700      	movs	r7, #0
 801b594:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 801b598:	461c      	mov	r4, r3
 801b59a:	e9cd 771f 	strd	r7, r7, [sp, #124]	@ 0x7c
 801b59e:	e9cd 7721 	strd	r7, r7, [sp, #132]	@ 0x84
 801b5a2:	aa1f      	add	r2, sp, #124	@ 0x7c
 801b5a4:	eca4 1a01 	vstmia	r4!, {s2}
 801b5a8:	a923      	add	r1, sp, #140	@ 0x8c
 801b5aa:	a844      	add	r0, sp, #272	@ 0x110
 801b5ac:	f7f9 fa10 	bl	80149d0 <llEvaluate.constprop.0>
 801b5b0:	ecbb 7a01 	vldmia	fp!, {s14}
 801b5b4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801b5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5bc:	f340 84b2 	ble.w	801bf24 <MEMS_runMagCal.constprop.0+0x23bc>
 801b5c0:	eef1 7ac7 	vsqrt.f32	s15, s14
 801b5c4:	eef4 bae7 	vcmpe.f32	s23, s15
 801b5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5cc:	bfb8      	it	lt
 801b5ce:	eef0 ba67 	vmovlt.f32	s23, s15
 801b5d2:	3501      	adds	r5, #1
 801b5d4:	b2ed      	uxtb	r5, r5
 801b5d6:	2d03      	cmp	r5, #3
 801b5d8:	d1df      	bne.n	801b59a <MEMS_runMagCal.constprop.0+0x1a32>
 801b5da:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 801b5de:	ee6b 7a27 	vmul.f32	s15, s22, s15
 801b5e2:	ed9d 7a1e 	vldr	s14, [sp, #120]	@ 0x78
 801b5e6:	eddd 5a1c 	vldr	s11, [sp, #112]	@ 0x70
 801b5ea:	ed9d 5a1b 	vldr	s10, [sp, #108]	@ 0x6c
 801b5ee:	ed9d 6a1d 	vldr	s12, [sp, #116]	@ 0x74
 801b5f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5fa:	eeb0 7ae5 	vabs.f32	s14, s11
 801b5fe:	bf48      	it	mi
 801b600:	edcd 7a1e 	vstrmi	s15, [sp, #120]	@ 0x78
 801b604:	eef0 7ac5 	vabs.f32	s15, s10
 801b608:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b610:	bfb8      	it	lt
 801b612:	eef0 7a47 	vmovlt.f32	s15, s14
 801b616:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b61a:	ed1f 7a9a 	vldr	s14, [pc, #-616]	@ 801b3b4 <MEMS_runMagCal.constprop.0+0x184c>
 801b61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b622:	bfb8      	it	lt
 801b624:	eef0 7a47 	vmovlt.f32	s15, s14
 801b628:	eef0 6ac6 	vabs.f32	s13, s12
 801b62c:	eef4 6ae7 	vcmpe.f32	s13, s15
 801b630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b634:	ed9d 7a1e 	vldr	s14, [sp, #120]	@ 0x78
 801b638:	ee79 9aa5 	vadd.f32	s19, s19, s11
 801b63c:	ed5f 5aa5 	vldr	s11, [pc, #-660]	@ 801b3ac <MEMS_runMagCal.constprop.0+0x1844>
 801b640:	edcd 9a2d 	vstr	s19, [sp, #180]	@ 0xb4
 801b644:	bfb8      	it	lt
 801b646:	eef0 6a67 	vmovlt.f32	s13, s15
 801b64a:	ee3a aa05 	vadd.f32	s20, s20, s10
 801b64e:	ee36 6a2a 	vadd.f32	s12, s12, s21
 801b652:	ee3b ba07 	vadd.f32	s22, s22, s14
 801b656:	eef4 6ae5 	vcmpe.f32	s13, s11
 801b65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b65e:	4634      	mov	r4, r6
 801b660:	ed8d aa2c 	vstr	s20, [sp, #176]	@ 0xb0
 801b664:	4646      	mov	r6, r8
 801b666:	ed8d 6a2e 	vstr	s12, [sp, #184]	@ 0xb8
 801b66a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801b66e:	ed8d ba2f 	vstr	s22, [sp, #188]	@ 0xbc
 801b672:	eef0 7ac7 	vabs.f32	s15, s14
 801b676:	f140 8459 	bpl.w	801bf2c <MEMS_runMagCal.constprop.0+0x23c4>
 801b67a:	ed1f 7ab3 	vldr	s14, [pc, #-716]	@ 801b3b0 <MEMS_runMagCal.constprop.0+0x1848>
 801b67e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b686:	f140 8451 	bpl.w	801bf2c <MEMS_runMagCal.constprop.0+0x23c4>
 801b68a:	2e01      	cmp	r6, #1
 801b68c:	f200 8453 	bhi.w	801bf36 <MEMS_runMagCal.constprop.0+0x23ce>
 801b690:	3601      	adds	r6, #1
 801b692:	b2f6      	uxtb	r6, r6
 801b694:	f7ff baa3 	b.w	801abde <MEMS_runMagCal.constprop.0+0x1076>
 801b698:	fb98 f3f9 	sdiv	r3, r8, r9
 801b69c:	fb09 8313 	mls	r3, r9, r3, r8
 801b6a0:	b21b      	sxth	r3, r3
 801b6a2:	f7ff bae5 	b.w	801ac70 <MEMS_runMagCal.constprop.0+0x1108>
 801b6a6:	edd1 7a00 	vldr	s15, [r1]
 801b6aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6b2:	dd2c      	ble.n	801b70e <MEMS_runMagCal.constprop.0+0x1ba6>
 801b6b4:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801b6b8:	ed83 7a00 	vstr	s14, [r3]
 801b6bc:	e751      	b.n	801b562 <MEMS_runMagCal.constprop.0+0x19fa>
 801b6be:	edd1 7a00 	vldr	s15, [r1]
 801b6c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6ca:	dd20      	ble.n	801b70e <MEMS_runMagCal.constprop.0+0x1ba6>
 801b6cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b6d0:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801b6d4:	ed83 7a02 	vstr	s14, [r3, #8]
 801b6d8:	e743      	b.n	801b562 <MEMS_runMagCal.constprop.0+0x19fa>
 801b6da:	ed91 7a00 	vldr	s14, [r1]
 801b6de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6e6:	dd12      	ble.n	801b70e <MEMS_runMagCal.constprop.0+0x1ba6>
 801b6e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b6ec:	eef1 7ac7 	vsqrt.f32	s15, s14
 801b6f0:	edc3 7a01 	vstr	s15, [r3, #4]
 801b6f4:	e735      	b.n	801b562 <MEMS_runMagCal.constprop.0+0x19fa>
 801b6f6:	ed91 7a00 	vldr	s14, [r1]
 801b6fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b702:	dd04      	ble.n	801b70e <MEMS_runMagCal.constprop.0+0x1ba6>
 801b704:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b708:	eef1 6ac7 	vsqrt.f32	s13, s14
 801b70c:	e727      	b.n	801b55e <MEMS_runMagCal.constprop.0+0x19f6>
 801b70e:	ed5f bad7 	vldr	s23, [pc, #-860]	@ 801b3b4 <MEMS_runMagCal.constprop.0+0x184c>
 801b712:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801b716:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801b71a:	ed5f 6ad9 	vldr	s13, [pc, #-868]	@ 801b3b8 <MEMS_runMagCal.constprop.0+0x1850>
 801b71e:	eef0 7a6b 	vmov.f32	s15, s23
 801b722:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
 801b726:	ed9d 7a2f 	vldr	s14, [sp, #188]	@ 0xbc
 801b72a:	ed5f 5adc 	vldr	s11, [pc, #-880]	@ 801b3bc <MEMS_runMagCal.constprop.0+0x1854>
 801b72e:	eef4 6ac6 	vcmpe.f32	s13, s12
 801b732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b736:	eec5 9a87 	vdiv.f32	s19, s11, s14
 801b73a:	dc0e      	bgt.n	801b75a <MEMS_runMagCal.constprop.0+0x1bf2>
 801b73c:	ed5f 6ae0 	vldr	s13, [pc, #-896]	@ 801b3c0 <MEMS_runMagCal.constprop.0+0x1858>
 801b740:	eef4 7ae6 	vcmpe.f32	s15, s13
 801b744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b748:	dc07      	bgt.n	801b75a <MEMS_runMagCal.constprop.0+0x1bf2>
 801b74a:	ed5f 7ae2 	vldr	s15, [pc, #-904]	@ 801b3c4 <MEMS_runMagCal.constprop.0+0x185c>
 801b74e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b756:	f200 81f8 	bhi.w	801bb4a <MEMS_runMagCal.constprop.0+0x1fe2>
 801b75a:	4be2      	ldr	r3, [pc, #904]	@ (801bae4 <MEMS_runMagCal.constprop.0+0x1f7c>)
 801b75c:	ed9f 9ae2 	vldr	s18, [pc, #904]	@ 801bae8 <MEMS_runMagCal.constprop.0+0x1f80>
 801b760:	9323      	str	r3, [sp, #140]	@ 0x8c
 801b762:	9332      	str	r3, [sp, #200]	@ 0xc8
 801b764:	eddd 6a2c 	vldr	s13, [sp, #176]	@ 0xb0
 801b768:	ed9d 7a2d 	vldr	s14, [sp, #180]	@ 0xb4
 801b76c:	eddd 7a2e 	vldr	s15, [sp, #184]	@ 0xb8
 801b770:	ed9d 6a32 	vldr	s12, [sp, #200]	@ 0xc8
 801b774:	eddd 5a23 	vldr	s11, [sp, #140]	@ 0x8c
 801b778:	edcd 9a44 	vstr	s19, [sp, #272]	@ 0x110
 801b77c:	ee66 6a88 	vmul.f32	s13, s13, s16
 801b780:	ee27 7a08 	vmul.f32	s14, s14, s16
 801b784:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b788:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801b78c:	2300      	movs	r3, #0
 801b78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b792:	e9cd 3345 	strd	r3, r3, [sp, #276]	@ 0x114
 801b796:	e9cd 3349 	strd	r3, r3, [sp, #292]	@ 0x124
 801b79a:	edcd 6a34 	vstr	s13, [sp, #208]	@ 0xd0
 801b79e:	ed8d 7a35 	vstr	s14, [sp, #212]	@ 0xd4
 801b7a2:	edcd 9a48 	vstr	s19, [sp, #288]	@ 0x120
 801b7a6:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 801b7aa:	edcd 9a4c 	vstr	s19, [sp, #304]	@ 0x130
 801b7ae:	9347      	str	r3, [sp, #284]	@ 0x11c
 801b7b0:	934b      	str	r3, [sp, #300]	@ 0x12c
 801b7b2:	f100 83b4 	bmi.w	801bf1e <MEMS_runMagCal.constprop.0+0x23b6>
 801b7b6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801b7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7be:	f100 83ae 	bmi.w	801bf1e <MEMS_runMagCal.constprop.0+0x23b6>
 801b7c2:	eec5 7a86 	vdiv.f32	s15, s11, s12
 801b7c6:	eeb7 aa00 	vmov.f32	s20, #112	@ 0x3f800000  1.0
 801b7ca:	ee3a aa67 	vsub.f32	s20, s20, s15
 801b7ce:	ed9f 7ac7 	vldr	s14, [pc, #796]	@ 801baec <MEMS_runMagCal.constprop.0+0x1f84>
 801b7d2:	eddf 6ac7 	vldr	s13, [pc, #796]	@ 801baf0 <MEMS_runMagCal.constprop.0+0x1f88>
 801b7d6:	ee39 7ac7 	vsub.f32	s14, s19, s14
 801b7da:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801b7de:	eeb0 7ac7 	vabs.f32	s14, s14
 801b7e2:	ee79 7ae7 	vsub.f32	s15, s19, s15
 801b7e6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801b7ea:	ed9f 7ac2 	vldr	s14, [pc, #776]	@ 801baf4 <MEMS_runMagCal.constprop.0+0x1f8c>
 801b7ee:	eef0 7ae7 	vabs.f32	s15, s15
 801b7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b7fa:	f100 8313 	bmi.w	801be24 <MEMS_runMagCal.constprop.0+0x22bc>
 801b7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b802:	f280 831b 	bge.w	801be3c <MEMS_runMagCal.constprop.0+0x22d4>
 801b806:	eddf 7abc 	vldr	s15, [pc, #752]	@ 801baf8 <MEMS_runMagCal.constprop.0+0x1f90>
 801b80a:	eeb4 aae7 	vcmpe.f32	s20, s15
 801b80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b812:	f100 8313 	bmi.w	801be3c <MEMS_runMagCal.constprop.0+0x22d4>
 801b816:	ae19      	add	r6, sp, #100	@ 0x64
 801b818:	9c04      	ldr	r4, [sp, #16]
 801b81a:	ad34      	add	r5, sp, #208	@ 0xd0
 801b81c:	46b0      	mov	r8, r6
 801b81e:	ecb5 0a01 	vldmia	r5!, {s0}
 801b822:	f001 fcf5 	bl	801d210 <roundf>
 801b826:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b82a:	3401      	adds	r4, #1
 801b82c:	ee10 3a10 	vmov	r3, s0
 801b830:	b2e4      	uxtb	r4, r4
 801b832:	2c03      	cmp	r4, #3
 801b834:	f828 3b02 	strh.w	r3, [r8], #2
 801b838:	d1f1      	bne.n	801b81e <MEMS_runMagCal.constprop.0+0x1cb6>
 801b83a:	eddd 7a02 	vldr	s15, [sp, #8]
 801b83e:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801b842:	eddf 7aae 	vldr	s15, [pc, #696]	@ 801bafc <MEMS_runMagCal.constprop.0+0x1f94>
 801b846:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b84a:	f001 fce1 	bl	801d210 <roundf>
 801b84e:	eef0 7a40 	vmov.f32	s15, s0
 801b852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b856:	ab15      	add	r3, sp, #84	@ 0x54
 801b858:	eeb0 0a68 	vmov.f32	s0, s17
 801b85c:	aa16      	add	r2, sp, #88	@ 0x58
 801b85e:	a944      	add	r1, sp, #272	@ 0x110
 801b860:	4630      	mov	r0, r6
 801b862:	ee17 8a90 	vmov	r8, s15
 801b866:	edca 7a06 	vstr	s15, [sl, #24]
 801b86a:	f7f9 f929 	bl	8014ac0 <getMagStats.constprop.0>
 801b86e:	f89a 30a0 	ldrb.w	r3, [sl, #160]	@ 0xa0
 801b872:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 801bb00 <MEMS_runMagCal.constprop.0+0x1f98>
 801b876:	f89a 50a0 	ldrb.w	r5, [sl, #160]	@ 0xa0
 801b87a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 801b87e:	005b      	lsls	r3, r3, #1
 801b880:	ee07 3a90 	vmov	s15, r3
 801b884:	ee07 0a10 	vmov	s14, r0
 801b888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b88c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b890:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b894:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b89c:	dc0d      	bgt.n	801b8ba <MEMS_runMagCal.constprop.0+0x1d52>
 801b89e:	ed9d 7a15 	vldr	s14, [sp, #84]	@ 0x54
 801b8a2:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 801b8a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8ae:	bfc6      	itte	gt
 801b8b0:	fabb f38b 	clzgt	r3, fp
 801b8b4:	095b      	lsrgt	r3, r3, #5
 801b8b6:	2301      	movle	r3, #1
 801b8b8:	9304      	str	r3, [sp, #16]
 801b8ba:	ee28 0a09 	vmul.f32	s0, s16, s18
 801b8be:	f8cd 809c 	str.w	r8, [sp, #156]	@ 0x9c
 801b8c2:	f001 fca5 	bl	801d210 <roundf>
 801b8c6:	eddf 7a8f 	vldr	s15, [pc, #572]	@ 801bb04 <MEMS_runMagCal.constprop.0+0x1f9c>
 801b8ca:	6830      	ldr	r0, [r6, #0]
 801b8cc:	eddd aa15 	vldr	s21, [sp, #84]	@ 0x54
 801b8d0:	f8cd 00a2 	str.w	r0, [sp, #162]	@ 0xa2
 801b8d4:	ee69 7aa7 	vmul.f32	s15, s19, s15
 801b8d8:	2300      	movs	r3, #0
 801b8da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b8de:	f1b9 0f01 	cmp.w	r9, #1
 801b8e2:	ee17 2a90 	vmov	r2, s15
 801b8e6:	b294      	uxth	r4, r2
 801b8e8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801b8ec:	f364 030f 	bfi	r3, r4, #0, #16
 801b8f0:	f364 431f 	bfi	r3, r4, #16, #16
 801b8f4:	932a      	str	r3, [sp, #168]	@ 0xa8
 801b8f6:	ee17 3a90 	vmov	r3, s15
 801b8fa:	f88d 30a1 	strb.w	r3, [sp, #161]	@ 0xa1
 801b8fe:	88b3      	ldrh	r3, [r6, #4]
 801b900:	f8ad 40ac 	strh.w	r4, [sp, #172]	@ 0xac
 801b904:	f8ad 30a6 	strh.w	r3, [sp, #166]	@ 0xa6
 801b908:	f000 828a 	beq.w	801be20 <MEMS_runMagCal.constprop.0+0x22b8>
 801b90c:	ee28 0a2a 	vmul.f32	s0, s16, s21
 801b910:	ee80 0a0a 	vdiv.f32	s0, s0, s20
 801b914:	f001 fc7c 	bl	801d210 <roundf>
 801b918:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801b91c:	edcd 7a01 	vstr	s15, [sp, #4]
 801b920:	f89d 6004 	ldrb.w	r6, [sp, #4]
 801b924:	9a04      	ldr	r2, [sp, #16]
 801b926:	f88d 60a0 	strb.w	r6, [sp, #160]	@ 0xa0
 801b92a:	2300      	movs	r3, #0
 801b92c:	f88a 3014 	strb.w	r3, [sl, #20]
 801b930:	2a00      	cmp	r2, #0
 801b932:	f43e ad23 	beq.w	801a37c <MEMS_runMagCal.constprop.0+0x814>
 801b936:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b938:	f88a 3015 	strb.w	r3, [sl, #21]
 801b93c:	2a00      	cmp	r2, #0
 801b93e:	f040 8133 	bne.w	801bba8 <MEMS_runMagCal.constprop.0+0x2040>
 801b942:	af14      	add	r7, sp, #80	@ 0x50
 801b944:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	@ 0xac
 801b948:	f8bd 10a8 	ldrh.w	r1, [sp, #168]	@ 0xa8
 801b94c:	f8bd 20aa 	ldrh.w	r2, [sp, #170]	@ 0xaa
 801b950:	f8df e1c0 	ldr.w	lr, [pc, #448]	@ 801bb14 <MEMS_runMagCal.constprop.0+0x1fac>
 801b954:	eddf 7a70 	vldr	s15, [pc, #448]	@ 801bb18 <MEMS_runMagCal.constprop.0+0x1fb0>
 801b958:	f8ca 801c 	str.w	r8, [sl, #28]
 801b95c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801b960:	fb00 f303 	mul.w	r3, r0, r3
 801b964:	ee06 3a10 	vmov	s12, r3
 801b968:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	@ 0xa2
 801b96c:	ed9a 0a01 	vldr	s0, [sl, #4]
 801b970:	f89a 4025 	ldrb.w	r4, [sl, #37]	@ 0x25
 801b974:	ee03 3a90 	vmov	s7, r3
 801b978:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	@ 0xa4
 801b97c:	ee04 3a10 	vmov	s8, r3
 801b980:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	@ 0xa6
 801b984:	fb00 f101 	mul.w	r1, r0, r1
 801b988:	ee04 3a90 	vmov	s9, r3
 801b98c:	fb00 f202 	mul.w	r2, r0, r2
 801b990:	23ff      	movs	r3, #255	@ 0xff
 801b992:	f10d 0c9c 	add.w	ip, sp, #156	@ 0x9c
 801b996:	ee05 1a10 	vmov	s10, r1
 801b99a:	ee05 2a90 	vmov	s11, r2
 801b99e:	f88a 3026 	strb.w	r3, [sl, #38]	@ 0x26
 801b9a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b9a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b9aa:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801b9ae:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801b9b2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801b9b6:	ee25 5a27 	vmul.f32	s10, s10, s15
 801b9ba:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801b9be:	ee26 6a27 	vmul.f32	s12, s12, s15
 801b9c2:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801b9c6:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801b9ca:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801b9ce:	f04f 0801 	mov.w	r8, #1
 801b9d2:	f8dc 3000 	ldr.w	r3, [ip]
 801b9d6:	f8ce 3000 	str.w	r3, [lr]
 801b9da:	ed8a 5a1f 	vstr	s10, [sl, #124]	@ 0x7c
 801b9de:	edca 5a23 	vstr	s11, [sl, #140]	@ 0x8c
 801b9e2:	ed8a 6a27 	vstr	s12, [sl, #156]	@ 0x9c
 801b9e6:	f88a 8054 	strb.w	r8, [sl, #84]	@ 0x54
 801b9ea:	f88a 806d 	strb.w	r8, [sl, #109]	@ 0x6d
 801b9ee:	edca 3a1c 	vstr	s7, [sl, #112]	@ 0x70
 801b9f2:	ed8a 4a1d 	vstr	s8, [sl, #116]	@ 0x74
 801b9f6:	edca 4a1e 	vstr	s9, [sl, #120]	@ 0x78
 801b9fa:	2d00      	cmp	r5, #0
 801b9fc:	d04d      	beq.n	801ba9a <MEMS_runMagCal.constprop.0+0x1f32>
 801b9fe:	ed9f 3a42 	vldr	s6, [pc, #264]	@ 801bb08 <MEMS_runMagCal.constprop.0+0x1fa0>
 801ba02:	f89a 00a1 	ldrb.w	r0, [sl, #161]	@ 0xa1
 801ba06:	2100      	movs	r1, #0
 801ba08:	ee20 3a03 	vmul.f32	s6, s0, s6
 801ba0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ba10:	460b      	mov	r3, r1
 801ba12:	fbb3 fcf0 	udiv	ip, r3, r0
 801ba16:	fb00 331c 	mls	r3, r0, ip, r3
 801ba1a:	3315      	adds	r3, #21
 801ba1c:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801ba20:	3201      	adds	r2, #1
 801ba22:	fb92 fcf4 	sdiv	ip, r2, r4
 801ba26:	fb04 221c 	mls	r2, r4, ip, r2
 801ba2a:	f9b3 c01c 	ldrsh.w	ip, [r3, #28]
 801ba2e:	ee07 ca90 	vmov	s15, ip
 801ba32:	f9b3 c01a 	ldrsh.w	ip, [r3, #26]
 801ba36:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801ba3a:	ee06 ca90 	vmov	s13, ip
 801ba3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ba42:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ba46:	ee77 7ac4 	vsub.f32	s15, s15, s8
 801ba4a:	ee07 3a10 	vmov	s14, r3
 801ba4e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801ba52:	ee76 6ae3 	vsub.f32	s13, s13, s7
 801ba56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801ba5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ba5e:	ee66 6a85 	vmul.f32	s13, s13, s10
 801ba62:	ee37 7a64 	vsub.f32	s14, s14, s9
 801ba66:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801ba6a:	b252      	sxtb	r2, r2
 801ba6c:	eb0a 0342 	add.w	r3, sl, r2, lsl #1
 801ba70:	ee27 7a06 	vmul.f32	s14, s14, s12
 801ba74:	3101      	adds	r1, #1
 801ba76:	eee7 7a07 	vfma.f32	s15, s14, s14
 801ba7a:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801ba7e:	ee67 7a03 	vmul.f32	s15, s14, s6
 801ba82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ba86:	ee17 ca90 	vmov	ip, s15
 801ba8a:	f8a3 c028 	strh.w	ip, [r3, #40]	@ 0x28
 801ba8e:	b28b      	uxth	r3, r1
 801ba90:	42ab      	cmp	r3, r5
 801ba92:	b209      	sxth	r1, r1
 801ba94:	dbbd      	blt.n	801ba12 <MEMS_runMagCal.constprop.0+0x1eaa>
 801ba96:	f88a 2026 	strb.w	r2, [sl, #38]	@ 0x26
 801ba9a:	42ac      	cmp	r4, r5
 801ba9c:	bf28      	it	cs
 801ba9e:	462c      	movcs	r4, r5
 801baa0:	aa13      	add	r2, sp, #76	@ 0x4c
 801baa2:	491a      	ldr	r1, [pc, #104]	@ (801bb0c <MEMS_runMagCal.constprop.0+0x1fa4>)
 801baa4:	f88a 4024 	strb.w	r4, [sl, #36]	@ 0x24
 801baa8:	f10d 00a2 	add.w	r0, sp, #162	@ 0xa2
 801baac:	463b      	mov	r3, r7
 801baae:	f7f9 f807 	bl	8014ac0 <getMagStats.constprop.0>
 801bab2:	eddf 6a17 	vldr	s13, [pc, #92]	@ 801bb10 <MEMS_runMagCal.constprop.0+0x1fa8>
 801bab6:	edd2 7a00 	vldr	s15, [r2]
 801baba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801babe:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801bac2:	eef0 7ae7 	vabs.f32	s15, s15
 801bac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 801baca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bace:	edd7 6a00 	vldr	s13, [r7]
 801bad2:	d523      	bpl.n	801bb1c <MEMS_runMagCal.constprop.0+0x1fb4>
 801bad4:	eef4 6ac7 	vcmpe.f32	s13, s14
 801bad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801badc:	f100 819b 	bmi.w	801be16 <MEMS_runMagCal.constprop.0+0x22ae>
 801bae0:	e01c      	b.n	801bb1c <MEMS_runMagCal.constprop.0+0x1fb4>
 801bae2:	bf00      	nop
 801bae4:	423c0000 	.word	0x423c0000
 801bae8:	41f00001 	.word	0x41f00001
 801baec:	3f8ccccd 	.word	0x3f8ccccd
 801baf0:	3f266666 	.word	0x3f266666
 801baf4:	3eb33333 	.word	0x3eb33333
 801baf8:	3f19999a 	.word	0x3f19999a
 801bafc:	3a83126f 	.word	0x3a83126f
 801bb00:	3c23d70a 	.word	0x3c23d70a
 801bb04:	447a0000 	.word	0x447a0000
 801bb08:	42c80000 	.word	0x42c80000
 801bb0c:	20000408 	.word	0x20000408
 801bb10:	423c0000 	.word	0x423c0000
 801bb14:	200003e4 	.word	0x200003e4
 801bb18:	358637bd 	.word	0x358637bd
 801bb1c:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 801bb20:	eef4 7ac7 	vcmpe.f32	s15, s14
 801bb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb28:	d507      	bpl.n	801bb3a <MEMS_runMagCal.constprop.0+0x1fd2>
 801bb2a:	eef4 6a47 	vcmp.f32	s13, s14
 801bb2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb32:	9b04      	ldr	r3, [sp, #16]
 801bb34:	bf48      	it	mi
 801bb36:	2302      	movmi	r3, #2
 801bb38:	9304      	str	r3, [sp, #16]
 801bb3a:	2ec9      	cmp	r6, #201	@ 0xc9
 801bb3c:	9b04      	ldr	r3, [sp, #16]
 801bb3e:	bf28      	it	cs
 801bb40:	2302      	movcs	r3, #2
 801bb42:	f88a 306c 	strb.w	r3, [sl, #108]	@ 0x6c
 801bb46:	f7fe bc19 	b.w	801a37c <MEMS_runMagCal.constprop.0+0x814>
 801bb4a:	2224      	movs	r2, #36	@ 0x24
 801bb4c:	2100      	movs	r1, #0
 801bb4e:	a844      	add	r0, sp, #272	@ 0x110
 801bb50:	f004 f859 	bl	801fc06 <memset>
 801bb54:	ad2c      	add	r5, sp, #176	@ 0xb0
 801bb56:	f10d 08d0 	add.w	r8, sp, #208	@ 0xd0
 801bb5a:	ae44      	add	r6, sp, #272	@ 0x110
 801bb5c:	2400      	movs	r4, #0
 801bb5e:	ecb5 0a01 	vldmia	r5!, {s0}
 801bb62:	ee28 0a00 	vmul.f32	s0, s16, s0
 801bb66:	f001 fb53 	bl	801d210 <roundf>
 801bb6a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801bb6e:	4633      	mov	r3, r6
 801bb70:	3401      	adds	r4, #1
 801bb72:	edc3 9a00 	vstr	s19, [r3]
 801bb76:	ee10 3a10 	vmov	r3, s0
 801bb7a:	2c03      	cmp	r4, #3
 801bb7c:	f828 3b02 	strh.w	r3, [r8], #2
 801bb80:	f106 0610 	add.w	r6, r6, #16
 801bb84:	d1eb      	bne.n	801bb5e <MEMS_runMagCal.constprop.0+0x1ff6>
 801bb86:	eeb0 0a68 	vmov.f32	s0, s17
 801bb8a:	ab23      	add	r3, sp, #140	@ 0x8c
 801bb8c:	aa32      	add	r2, sp, #200	@ 0xc8
 801bb8e:	a944      	add	r1, sp, #272	@ 0x110
 801bb90:	a834      	add	r0, sp, #208	@ 0xd0
 801bb92:	f7f8 ff95 	bl	8014ac0 <getMagStats.constprop.0>
 801bb96:	ed9d 9a23 	vldr	s18, [sp, #140]	@ 0x8c
 801bb9a:	ee79 7a09 	vadd.f32	s15, s18, s18
 801bb9e:	ee29 9a2b 	vmul.f32	s18, s18, s23
 801bba2:	edcd 7a23 	vstr	s15, [sp, #140]	@ 0x8c
 801bba6:	e5dd      	b.n	801b764 <MEMS_runMagCal.constprop.0+0x1bfc>
 801bba8:	e9cd 3345 	strd	r3, r3, [sp, #276]	@ 0x114
 801bbac:	e9cd 3349 	strd	r3, r3, [sp, #292]	@ 0x124
 801bbb0:	9347      	str	r3, [sp, #284]	@ 0x11c
 801bbb2:	934b      	str	r3, [sp, #300]	@ 0x12c
 801bbb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801bbb8:	fb03 f304 	mul.w	r3, r3, r4
 801bbbc:	ee07 3a90 	vmov	s15, r3
 801bbc0:	ed1f 7a2b 	vldr	s14, [pc, #-172]	@ 801bb18 <MEMS_runMagCal.constprop.0+0x1fb0>
 801bbc4:	49e3      	ldr	r1, [pc, #908]	@ (801bf54 <MEMS_runMagCal.constprop.0+0x23ec>)
 801bbc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bbca:	eeb0 0a68 	vmov.f32	s0, s17
 801bbce:	ee67 7a87 	vmul.f32	s15, s15, s14
 801bbd2:	ab34      	add	r3, sp, #208	@ 0xd0
 801bbd4:	aa13      	add	r2, sp, #76	@ 0x4c
 801bbd6:	f1a1 001e 	sub.w	r0, r1, #30
 801bbda:	af14      	add	r7, sp, #80	@ 0x50
 801bbdc:	edcd 7a44 	vstr	s15, [sp, #272]	@ 0x110
 801bbe0:	edcd 7a48 	vstr	s15, [sp, #288]	@ 0x120
 801bbe4:	edcd 7a4c 	vstr	s15, [sp, #304]	@ 0x130
 801bbe8:	f7f8 ff6a 	bl	8014ac0 <getMagStats.constprop.0>
 801bbec:	eeb0 0a68 	vmov.f32	s0, s17
 801bbf0:	a944      	add	r1, sp, #272	@ 0x110
 801bbf2:	463b      	mov	r3, r7
 801bbf4:	f10d 00a2 	add.w	r0, sp, #162	@ 0xa2
 801bbf8:	f7f8 ff62 	bl	8014ac0 <getMagStats.constprop.0>
 801bbfc:	eddd 7a13 	vldr	s15, [sp, #76]	@ 0x4c
 801bc00:	eddf 6ad5 	vldr	s13, [pc, #852]	@ 801bf58 <MEMS_runMagCal.constprop.0+0x23f0>
 801bc04:	ed97 6a00 	vldr	s12, [r7]
 801bc08:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bc0c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801bc10:	eef0 7ae7 	vabs.f32	s15, s15
 801bc14:	eef4 7ac7 	vcmpe.f32	s15, s14
 801bc18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc1c:	d505      	bpl.n	801bc2a <MEMS_runMagCal.constprop.0+0x20c2>
 801bc1e:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801bc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc26:	f100 80f9 	bmi.w	801be1c <MEMS_runMagCal.constprop.0+0x22b4>
 801bc2a:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 801bc2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801bc32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc36:	f140 80ec 	bpl.w	801be12 <MEMS_runMagCal.constprop.0+0x22aa>
 801bc3a:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801bc3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc42:	9b04      	ldr	r3, [sp, #16]
 801bc44:	bfb8      	it	lt
 801bc46:	2302      	movlt	r3, #2
 801bc48:	eddd 5a34 	vldr	s11, [sp, #208]	@ 0xd0
 801bc4c:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801bc50:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801bc54:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801bc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc5c:	f57e ab8e 	bpl.w	801a37c <MEMS_runMagCal.constprop.0+0x814>
 801bc60:	f89a 206c 	ldrb.w	r2, [sl, #108]	@ 0x6c
 801bc64:	429a      	cmp	r2, r3
 801bc66:	f63e ab89 	bhi.w	801a37c <MEMS_runMagCal.constprop.0+0x814>
 801bc6a:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801bc6e:	ee66 7a27 	vmul.f32	s15, s12, s15
 801bc72:	eef4 5ae7 	vcmpe.f32	s11, s15
 801bc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc7a:	d40c      	bmi.n	801bc96 <MEMS_runMagCal.constprop.0+0x212e>
 801bc7c:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 801bc80:	eef4 5ae7 	vcmpe.f32	s11, s15
 801bc84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc88:	f57f ae5c 	bpl.w	801b944 <MEMS_runMagCal.constprop.0+0x1ddc>
 801bc8c:	f89a 305c 	ldrb.w	r3, [sl, #92]	@ 0x5c
 801bc90:	42b3      	cmp	r3, r6
 801bc92:	f4bf ae57 	bcs.w	801b944 <MEMS_runMagCal.constprop.0+0x1ddc>
 801bc96:	f9ba 2060 	ldrsh.w	r2, [sl, #96]	@ 0x60
 801bc9a:	f9bd e0a4 	ldrsh.w	lr, [sp, #164]	@ 0xa4
 801bc9e:	f9bd b0a2 	ldrsh.w	fp, [sp, #162]	@ 0xa2
 801bca2:	f9ba 105e 	ldrsh.w	r1, [sl, #94]	@ 0x5e
 801bca6:	f9ba 3062 	ldrsh.w	r3, [sl, #98]	@ 0x62
 801bcaa:	f9bd c0a6 	ldrsh.w	ip, [sp, #166]	@ 0xa6
 801bcae:	eba2 000e 	sub.w	r0, r2, lr
 801bcb2:	eba1 090b 	sub.w	r9, r1, fp
 801bcb6:	2800      	cmp	r0, #0
 801bcb8:	bfb8      	it	lt
 801bcba:	4240      	neglt	r0, r0
 801bcbc:	f1b9 0f00 	cmp.w	r9, #0
 801bcc0:	bfb8      	it	lt
 801bcc2:	f1c9 0900 	rsblt	r9, r9, #0
 801bcc6:	4548      	cmp	r0, r9
 801bcc8:	bfb8      	it	lt
 801bcca:	4648      	movlt	r0, r9
 801bccc:	eba3 090c 	sub.w	r9, r3, ip
 801bcd0:	f1b9 0f00 	cmp.w	r9, #0
 801bcd4:	b200      	sxth	r0, r0
 801bcd6:	bfb8      	it	lt
 801bcd8:	f1c9 0900 	rsblt	r9, r9, #0
 801bcdc:	4548      	cmp	r0, r9
 801bcde:	bfb8      	it	lt
 801bce0:	4648      	movlt	r0, r9
 801bce2:	b200      	sxth	r0, r0
 801bce4:	ee07 0a90 	vmov	s15, r0
 801bce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bcec:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 801bcf0:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801bcf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801bcf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcfc:	f57f ae22 	bpl.w	801b944 <MEMS_runMagCal.constprop.0+0x1ddc>
 801bd00:	ee36 6a25 	vadd.f32	s12, s12, s11
 801bd04:	ee05 6a10 	vmov	s10, r6
 801bd08:	ee85 4a86 	vdiv.f32	s8, s11, s12
 801bd0c:	ee07 1a90 	vmov	s15, r1
 801bd10:	eeb8 2ac5 	vcvt.f32.s32	s4, s10
 801bd14:	ee05 4a10 	vmov	s10, r4
 801bd18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801bd1c:	eef8 3ac5 	vcvt.f32.s32	s7, s10
 801bd20:	ee07 2a90 	vmov	s15, r2
 801bd24:	ee05 ba10 	vmov	s10, fp
 801bd28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801bd2c:	eef8 2ac5 	vcvt.f32.s32	s5, s10
 801bd30:	ee07 3a90 	vmov	s15, r3
 801bd34:	ee05 ea10 	vmov	s10, lr
 801bd38:	f89a 305c 	ldrb.w	r3, [sl, #92]	@ 0x5c
 801bd3c:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 801bd40:	ee74 4ac4 	vsub.f32	s9, s9, s8
 801bd44:	eeb8 3ac5 	vcvt.f32.s32	s6, s10
 801bd48:	ee06 3a10 	vmov	s12, r3
 801bd4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bd50:	ee05 ca10 	vmov	s10, ip
 801bd54:	f8ba 3064 	ldrh.w	r3, [sl, #100]	@ 0x64
 801bd58:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801bd5c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801bd60:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801bd64:	eee4 7a05 	vfma.f32	s15, s8, s10
 801bd68:	ee26 6a24 	vmul.f32	s12, s12, s9
 801bd6c:	ee05 3a10 	vmov	s10, r3
 801bd70:	eea4 6a02 	vfma.f32	s12, s8, s4
 801bd74:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
 801bd78:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801bd7c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801bd80:	ee05 3a90 	vmov	s11, r3
 801bd84:	eee4 6a22 	vfma.f32	s13, s8, s5
 801bd88:	f8ba 3068 	ldrh.w	r3, [sl, #104]	@ 0x68
 801bd8c:	ee25 5a24 	vmul.f32	s10, s10, s9
 801bd90:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 801bd94:	eea4 5a23 	vfma.f32	s10, s8, s7
 801bd98:	ee27 7a24 	vmul.f32	s14, s14, s9
 801bd9c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801bda0:	ed8d 6a01 	vstr	s12, [sp, #4]
 801bda4:	eea4 7a03 	vfma.f32	s14, s8, s6
 801bda8:	f89d 6004 	ldrb.w	r6, [sp, #4]
 801bdac:	f88d 60a0 	strb.w	r6, [sp, #160]	@ 0xa0
 801bdb0:	ee06 3a10 	vmov	s12, r3
 801bdb4:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801bdb8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801bdbc:	eee4 5a23 	vfma.f32	s11, s8, s7
 801bdc0:	ee16 3a90 	vmov	r3, s13
 801bdc4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801bdc8:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 801bdcc:	ee26 6a24 	vmul.f32	s12, s12, s9
 801bdd0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801bdd4:	f8ad 30a2 	strh.w	r3, [sp, #162]	@ 0xa2
 801bdd8:	ee15 3a10 	vmov	r3, s10
 801bddc:	eea4 6a23 	vfma.f32	s12, s8, s7
 801bde0:	f8ad 30a8 	strh.w	r3, [sp, #168]	@ 0xa8
 801bde4:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 801bde8:	ee17 3a10 	vmov	r3, s14
 801bdec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bdf0:	f8ad 30a4 	strh.w	r3, [sp, #164]	@ 0xa4
 801bdf4:	ee15 3a90 	vmov	r3, s11
 801bdf8:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 801bdfc:	f8ad 30aa 	strh.w	r3, [sp, #170]	@ 0xaa
 801be00:	ee17 3a90 	vmov	r3, s15
 801be04:	f8ad 30a6 	strh.w	r3, [sp, #166]	@ 0xa6
 801be08:	ee16 3a10 	vmov	r3, s12
 801be0c:	f8ad 30ac 	strh.w	r3, [sp, #172]	@ 0xac
 801be10:	e598      	b.n	801b944 <MEMS_runMagCal.constprop.0+0x1ddc>
 801be12:	9b04      	ldr	r3, [sp, #16]
 801be14:	e718      	b.n	801bc48 <MEMS_runMagCal.constprop.0+0x20e0>
 801be16:	2303      	movs	r3, #3
 801be18:	9304      	str	r3, [sp, #16]
 801be1a:	e68e      	b.n	801bb3a <MEMS_runMagCal.constprop.0+0x1fd2>
 801be1c:	2303      	movs	r3, #3
 801be1e:	e713      	b.n	801bc48 <MEMS_runMagCal.constprop.0+0x20e0>
 801be20:	26ff      	movs	r6, #255	@ 0xff
 801be22:	e57f      	b.n	801b924 <MEMS_runMagCal.constprop.0+0x1dbc>
 801be24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be28:	f6ff aced 	blt.w	801b806 <MEMS_runMagCal.constprop.0+0x1c9e>
 801be2c:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 801bf5c <MEMS_runMagCal.constprop.0+0x23f4>
 801be30:	eef4 9ae7 	vcmpe.f32	s19, s15
 801be34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be38:	f63f ace5 	bhi.w	801b806 <MEMS_runMagCal.constprop.0+0x1c9e>
 801be3c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 801bf60 <MEMS_runMagCal.constprop.0+0x23f8>
 801be40:	9b01      	ldr	r3, [sp, #4]
 801be42:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801be46:	3b01      	subs	r3, #1
 801be48:	f88a 30a0 	strb.w	r3, [sl, #160]	@ 0xa0
 801be4c:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 801be50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801be54:	ee80 0a28 	vdiv.f32	s0, s0, s17
 801be58:	ee17 3a90 	vmov	r3, s15
 801be5c:	b298      	uxth	r0, r3
 801be5e:	f7f8 ff1f 	bl	8014ca0 <MEMS_updateMagBufferIndex.constprop.0>
 801be62:	eddd 7a02 	vldr	s15, [sp, #8]
 801be66:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801be6a:	eddf 7a41 	vldr	s15, [pc, #260]	@ 801bf70 <MEMS_runMagCal.constprop.0+0x2408>
 801be6e:	ee20 0a27 	vmul.f32	s0, s0, s15
 801be72:	f001 f9cd 	bl	801d210 <roundf>
 801be76:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801be7a:	2300      	movs	r3, #0
 801be7c:	f88a 3014 	strb.w	r3, [sl, #20]
 801be80:	ed8a 0a06 	vstr	s0, [sl, #24]
 801be84:	f7fe ba7a 	b.w	801a37c <MEMS_runMagCal.constprop.0+0x814>
 801be88:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801be8c:	f7fe be89 	b.w	801aba2 <MEMS_runMagCal.constprop.0+0x103a>
 801be90:	ed9a 0a1c 	vldr	s0, [sl, #112]	@ 0x70
 801be94:	f001 f9bc 	bl	801d210 <roundf>
 801be98:	eef0 7a40 	vmov.f32	s15, s0
 801be9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bea0:	ae19      	add	r6, sp, #100	@ 0x64
 801bea2:	ee17 3a90 	vmov	r3, s15
 801bea6:	ed9a 0a1d 	vldr	s0, [sl, #116]	@ 0x74
 801beaa:	8033      	strh	r3, [r6, #0]
 801beac:	f001 f9b0 	bl	801d210 <roundf>
 801beb0:	eef0 7a40 	vmov.f32	s15, s0
 801beb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801beb8:	ed9a 0a1e 	vldr	s0, [sl, #120]	@ 0x78
 801bebc:	ee17 3a90 	vmov	r3, s15
 801bec0:	8073      	strh	r3, [r6, #2]
 801bec2:	f001 f9a5 	bl	801d210 <roundf>
 801bec6:	eef0 7a40 	vmov.f32	s15, s0
 801beca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bece:	4921      	ldr	r1, [pc, #132]	@ (801bf54 <MEMS_runMagCal.constprop.0+0x23ec>)
 801bed0:	ee17 3a90 	vmov	r3, s15
 801bed4:	eeb0 0a68 	vmov.f32	s0, s17
 801bed8:	80b3      	strh	r3, [r6, #4]
 801beda:	aa16      	add	r2, sp, #88	@ 0x58
 801bedc:	ab15      	add	r3, sp, #84	@ 0x54
 801bede:	4630      	mov	r0, r6
 801bee0:	f7f8 fdee 	bl	8014ac0 <getMagStats.constprop.0>
 801bee4:	ed93 7a00 	vldr	s14, [r3]
 801bee8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801bf64 <MEMS_runMagCal.constprop.0+0x23fc>
 801beec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bef4:	d50e      	bpl.n	801bf14 <MEMS_runMagCal.constprop.0+0x23ac>
 801bef6:	b968      	cbnz	r0, 801bf14 <MEMS_runMagCal.constprop.0+0x23ac>
 801bef8:	f1bb 0f00 	cmp.w	fp, #0
 801befc:	d042      	beq.n	801bf84 <MEMS_runMagCal.constprop.0+0x241c>
 801befe:	f89a 305d 	ldrb.w	r3, [sl, #93]	@ 0x5d
 801bf02:	ee07 3a90 	vmov	s15, r3
 801bf06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bf0a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801bf0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf12:	dc37      	bgt.n	801bf84 <MEMS_runMagCal.constprop.0+0x241c>
 801bf14:	2300      	movs	r3, #0
 801bf16:	6033      	str	r3, [r6, #0]
 801bf18:	80b3      	strh	r3, [r6, #4]
 801bf1a:	f7fe bc9e 	b.w	801a85a <MEMS_runMagCal.constprop.0+0xcf2>
 801bf1e:	ed9f aa12 	vldr	s20, [pc, #72]	@ 801bf68 <MEMS_runMagCal.constprop.0+0x2400>
 801bf22:	e454      	b.n	801b7ce <MEMS_runMagCal.constprop.0+0x1c66>
 801bf24:	eef2 ba04 	vmov.f32	s23, #36	@ 0x41200000  10.0
 801bf28:	f7ff bb53 	b.w	801b5d2 <MEMS_runMagCal.constprop.0+0x1a6a>
 801bf2c:	3601      	adds	r6, #1
 801bf2e:	b2f6      	uxtb	r6, r6
 801bf30:	2e05      	cmp	r6, #5
 801bf32:	f47e ae54 	bne.w	801abde <MEMS_runMagCal.constprop.0+0x1076>
 801bf36:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801bf3a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801bf3e:	f7ff bbf0 	b.w	801b722 <MEMS_runMagCal.constprop.0+0x1bba>
 801bf42:	ed9f ca09 	vldr	s24, [pc, #36]	@ 801bf68 <MEMS_runMagCal.constprop.0+0x2400>
 801bf46:	f7fe bd75 	b.w	801aa34 <MEMS_runMagCal.constprop.0+0xecc>
 801bf4a:	ed9f ca08 	vldr	s24, [pc, #32]	@ 801bf6c <MEMS_runMagCal.constprop.0+0x2404>
 801bf4e:	f7fe bd71 	b.w	801aa34 <MEMS_runMagCal.constprop.0+0xecc>
 801bf52:	bf00      	nop
 801bf54:	20000408 	.word	0x20000408
 801bf58:	423c0000 	.word	0x423c0000
 801bf5c:	3ee66666 	.word	0x3ee66666
 801bf60:	433d0000 	.word	0x433d0000
 801bf64:	3ff4cccd 	.word	0x3ff4cccd
 801bf68:	00000000 	.word	0x00000000
 801bf6c:	3f860a92 	.word	0x3f860a92
 801bf70:	3a83126f 	.word	0x3a83126f
 801bf74:	461a      	mov	r2, r3
 801bf76:	fb97 f3f3 	sdiv	r3, r7, r3
 801bf7a:	fb02 7313 	mls	r3, r2, r3, r7
 801bf7e:	b21b      	sxth	r3, r3
 801bf80:	f7fe bbd7 	b.w	801a732 <MEMS_runMagCal.constprop.0+0xbca>
 801bf84:	eddd 7a02 	vldr	s15, [sp, #8]
 801bf88:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801bf8c:	ed5f 7a08 	vldr	s15, [pc, #-32]	@ 801bf70 <MEMS_runMagCal.constprop.0+0x2408>
 801bf90:	2303      	movs	r3, #3
 801bf92:	ee20 0a27 	vmul.f32	s0, s0, s15
 801bf96:	f88a 306c 	strb.w	r3, [sl, #108]	@ 0x6c
 801bf9a:	e76a      	b.n	801be72 <MEMS_runMagCal.constprop.0+0x230a>

0801bf9c <MotionFX_GetStateSize>:
 801bf9c:	f44f 6018 	mov.w	r0, #2432	@ 0x980
 801bfa0:	4770      	bx	lr
 801bfa2:	bf00      	nop

0801bfa4 <MotionFX_initialize>:
 801bfa4:	4a4b      	ldr	r2, [pc, #300]	@ (801c0d4 <MotionFX_initialize+0x130>)
 801bfa6:	6813      	ldr	r3, [r2, #0]
 801bfa8:	f04f 2ce0 	mov.w	ip, #3758153728	@ 0xe000e000
 801bfac:	f023 0301 	bic.w	r3, r3, #1
 801bfb0:	b530      	push	{r4, r5, lr}
 801bfb2:	6013      	str	r3, [r2, #0]
 801bfb4:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	@ 0xd00
 801bfb8:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 801bfbc:	400b      	ands	r3, r1
 801bfbe:	f24c 2240 	movw	r2, #49728	@ 0xc240
 801bfc2:	4293      	cmp	r3, r2
 801bfc4:	b085      	sub	sp, #20
 801bfc6:	4604      	mov	r4, r0
 801bfc8:	d013      	beq.n	801bff2 <MotionFX_initialize+0x4e>
 801bfca:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	@ 0xd00
 801bfce:	f24c 2270 	movw	r2, #49776	@ 0xc270
 801bfd2:	400b      	ands	r3, r1
 801bfd4:	4293      	cmp	r3, r2
 801bfd6:	d00c      	beq.n	801bff2 <MotionFX_initialize+0x4e>
 801bfd8:	4a3f      	ldr	r2, [pc, #252]	@ (801c0d8 <MotionFX_initialize+0x134>)
 801bfda:	2301      	movs	r3, #1
 801bfdc:	6093      	str	r3, [r2, #8]
 801bfde:	6893      	ldr	r3, [r2, #8]
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d1fc      	bne.n	801bfde <MotionFX_initialize+0x3a>
 801bfe4:	4b3d      	ldr	r3, [pc, #244]	@ (801c0dc <MotionFX_initialize+0x138>)
 801bfe6:	6013      	str	r3, [r2, #0]
 801bfe8:	6812      	ldr	r2, [r2, #0]
 801bfea:	4b3d      	ldr	r3, [pc, #244]	@ (801c0e0 <MotionFX_initialize+0x13c>)
 801bfec:	429a      	cmp	r2, r3
 801bfee:	d02c      	beq.n	801c04a <MotionFX_initialize+0xa6>
 801bff0:	e7fe      	b.n	801bff0 <MotionFX_initialize+0x4c>
 801bff2:	4b3c      	ldr	r3, [pc, #240]	@ (801c0e4 <MotionFX_initialize+0x140>)
 801bff4:	681b      	ldr	r3, [r3, #0]
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d1ee      	bne.n	801bfd8 <MotionFX_initialize+0x34>
 801bffa:	4a3b      	ldr	r2, [pc, #236]	@ (801c0e8 <MotionFX_initialize+0x144>)
 801bffc:	6813      	ldr	r3, [r2, #0]
 801bffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c002:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 801c006:	d054      	beq.n	801c0b2 <MotionFX_initialize+0x10e>
 801c008:	6813      	ldr	r3, [r2, #0]
 801c00a:	f240 4183 	movw	r1, #1155	@ 0x483
 801c00e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c012:	428b      	cmp	r3, r1
 801c014:	d04d      	beq.n	801c0b2 <MotionFX_initialize+0x10e>
 801c016:	6813      	ldr	r3, [r2, #0]
 801c018:	f240 4285 	movw	r2, #1157	@ 0x485
 801c01c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c020:	4293      	cmp	r3, r2
 801c022:	d046      	beq.n	801c0b2 <MotionFX_initialize+0x10e>
 801c024:	4b31      	ldr	r3, [pc, #196]	@ (801c0ec <MotionFX_initialize+0x148>)
 801c026:	681b      	ldr	r3, [r3, #0]
 801c028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c02c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801c030:	d1d2      	bne.n	801bfd8 <MotionFX_initialize+0x34>
 801c032:	4a2f      	ldr	r2, [pc, #188]	@ (801c0f0 <MotionFX_initialize+0x14c>)
 801c034:	2301      	movs	r3, #1
 801c036:	6093      	str	r3, [r2, #8]
 801c038:	6893      	ldr	r3, [r2, #8]
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	d1fc      	bne.n	801c038 <MotionFX_initialize+0x94>
 801c03e:	4b27      	ldr	r3, [pc, #156]	@ (801c0dc <MotionFX_initialize+0x138>)
 801c040:	6013      	str	r3, [r2, #0]
 801c042:	6812      	ldr	r2, [r2, #0]
 801c044:	4b26      	ldr	r3, [pc, #152]	@ (801c0e0 <MotionFX_initialize+0x13c>)
 801c046:	429a      	cmp	r2, r3
 801c048:	d1d2      	bne.n	801bff0 <MotionFX_initialize+0x4c>
 801c04a:	4b2a      	ldr	r3, [pc, #168]	@ (801c0f4 <MotionFX_initialize+0x150>)
 801c04c:	4a2a      	ldr	r2, [pc, #168]	@ (801c0f8 <MotionFX_initialize+0x154>)
 801c04e:	9303      	str	r3, [sp, #12]
 801c050:	2501      	movs	r5, #1
 801c052:	4620      	mov	r0, r4
 801c054:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801c058:	f882 53c4 	strb.w	r5, [r2, #964]	@ 0x3c4
 801c05c:	f7f8 ffce 	bl	8014ffc <MFX_emptyAttitude>
 801c060:	a901      	add	r1, sp, #4
 801c062:	f104 003a 	add.w	r0, r4, #58	@ 0x3a
 801c066:	f7f7 fae3 	bl	8013630 <updateOrientation>
 801c06a:	a903      	add	r1, sp, #12
 801c06c:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 801c070:	f7f7 fade 	bl	8013630 <updateOrientation>
 801c074:	a902      	add	r1, sp, #8
 801c076:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 801c07a:	f7f7 fad9 	bl	8013630 <updateOrientation>
 801c07e:	4b1f      	ldr	r3, [pc, #124]	@ (801c0fc <MotionFX_initialize+0x158>)
 801c080:	491f      	ldr	r1, [pc, #124]	@ (801c100 <MotionFX_initialize+0x15c>)
 801c082:	61a3      	str	r3, [r4, #24]
 801c084:	4b1f      	ldr	r3, [pc, #124]	@ (801c104 <MotionFX_initialize+0x160>)
 801c086:	4a20      	ldr	r2, [pc, #128]	@ (801c108 <MotionFX_initialize+0x164>)
 801c088:	62a1      	str	r1, [r4, #40]	@ 0x28
 801c08a:	6223      	str	r3, [r4, #32]
 801c08c:	491f      	ldr	r1, [pc, #124]	@ (801c10c <MotionFX_initialize+0x168>)
 801c08e:	61e2      	str	r2, [r4, #28]
 801c090:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c094:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 801c098:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801c09c:	8723      	strh	r3, [r4, #56]	@ 0x38
 801c09e:	f240 1301 	movw	r3, #257	@ 0x101
 801c0a2:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801c0a4:	6361      	str	r1, [r4, #52]	@ 0x34
 801c0a6:	80a2      	strh	r2, [r4, #4]
 801c0a8:	f8a4 300d 	strh.w	r3, [r4, #13]
 801c0ac:	73e5      	strb	r5, [r4, #15]
 801c0ae:	b005      	add	sp, #20
 801c0b0:	bd30      	pop	{r4, r5, pc}
 801c0b2:	4a17      	ldr	r2, [pc, #92]	@ (801c110 <MotionFX_initialize+0x16c>)
 801c0b4:	2301      	movs	r3, #1
 801c0b6:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 801c0ba:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d1fb      	bne.n	801c0ba <MotionFX_initialize+0x116>
 801c0c2:	4b06      	ldr	r3, [pc, #24]	@ (801c0dc <MotionFX_initialize+0x138>)
 801c0c4:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 801c0c8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 801c0cc:	4b04      	ldr	r3, [pc, #16]	@ (801c0e0 <MotionFX_initialize+0x13c>)
 801c0ce:	429a      	cmp	r2, r3
 801c0d0:	d0bb      	beq.n	801c04a <MotionFX_initialize+0xa6>
 801c0d2:	e78d      	b.n	801bff0 <MotionFX_initialize+0x4c>
 801c0d4:	e0002000 	.word	0xe0002000
 801c0d8:	40023000 	.word	0x40023000
 801c0dc:	f407a5c2 	.word	0xf407a5c2
 801c0e0:	b5e8b5cd 	.word	0xb5e8b5cd
 801c0e4:	e0042000 	.word	0xe0042000
 801c0e8:	5c001000 	.word	0x5c001000
 801c0ec:	50081000 	.word	0x50081000
 801c0f0:	4c004000 	.word	0x4c004000
 801c0f4:	00756e65 	.word	0x00756e65
 801c0f8:	2000038c 	.word	0x2000038c
 801c0fc:	3a51b717 	.word	0x3a51b717
 801c100:	3f666666 	.word	0x3f666666
 801c104:	3b378034 	.word	0x3b378034
 801c108:	3a378034 	.word	0x3a378034
 801c10c:	3f2ac083 	.word	0x3f2ac083
 801c110:	58024000 	.word	0x58024000

0801c114 <MotionFX_setKnobs>:
 801c114:	4b24      	ldr	r3, [pc, #144]	@ (801c1a8 <MotionFX_setKnobs+0x94>)
 801c116:	f893 23c4 	ldrb.w	r2, [r3, #964]	@ 0x3c4
 801c11a:	b902      	cbnz	r2, 801c11e <MotionFX_setKnobs+0xa>
 801c11c:	4770      	bx	lr
 801c11e:	460b      	mov	r3, r1
 801c120:	2900      	cmp	r1, #0
 801c122:	d0fb      	beq.n	801c11c <MotionFX_setKnobs+0x8>
 801c124:	b510      	push	{r4, lr}
 801c126:	4604      	mov	r4, r0
 801c128:	689a      	ldr	r2, [r3, #8]
 801c12a:	6808      	ldr	r0, [r1, #0]
 801c12c:	6849      	ldr	r1, [r1, #4]
 801c12e:	62e1      	str	r1, [r4, #44]	@ 0x2c
 801c130:	62a0      	str	r0, [r4, #40]	@ 0x28
 801c132:	6362      	str	r2, [r4, #52]	@ 0x34
 801c134:	7b1a      	ldrb	r2, [r3, #12]
 801c136:	7162      	strb	r2, [r4, #5]
 801c138:	6918      	ldr	r0, [r3, #16]
 801c13a:	6959      	ldr	r1, [r3, #20]
 801c13c:	699a      	ldr	r2, [r3, #24]
 801c13e:	6222      	str	r2, [r4, #32]
 801c140:	61a0      	str	r0, [r4, #24]
 801c142:	61e1      	str	r1, [r4, #28]
 801c144:	7f1a      	ldrb	r2, [r3, #28]
 801c146:	7122      	strb	r2, [r4, #4]
 801c148:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 801c14c:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
 801c150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c152:	f884 2978 	strb.w	r2, [r4, #2424]	@ 0x978
 801c156:	b084      	sub	sp, #16
 801c158:	f8b3 101d 	ldrh.w	r1, [r3, #29]
 801c15c:	7fda      	ldrb	r2, [r3, #31]
 801c15e:	f88d 2006 	strb.w	r2, [sp, #6]
 801c162:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c166:	f8b3 2021 	ldrh.w	r2, [r3, #33]	@ 0x21
 801c16a:	f8ad 2008 	strh.w	r2, [sp, #8]
 801c16e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801c172:	f88d 200a 	strb.w	r2, [sp, #10]
 801c176:	f8b3 2025 	ldrh.w	r2, [r3, #37]	@ 0x25
 801c17a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801c17e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801c182:	f88d 300e 	strb.w	r3, [sp, #14]
 801c186:	a901      	add	r1, sp, #4
 801c188:	f104 003a 	add.w	r0, r4, #58	@ 0x3a
 801c18c:	f7f7 fa50 	bl	8013630 <updateOrientation>
 801c190:	a903      	add	r1, sp, #12
 801c192:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 801c196:	f7f7 fa4b 	bl	8013630 <updateOrientation>
 801c19a:	a902      	add	r1, sp, #8
 801c19c:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 801c1a0:	f7f7 fa46 	bl	8013630 <updateOrientation>
 801c1a4:	b004      	add	sp, #16
 801c1a6:	bd10      	pop	{r4, pc}
 801c1a8:	2000038c 	.word	0x2000038c

0801c1ac <MotionFX_getKnobs>:
 801c1ac:	4b1d      	ldr	r3, [pc, #116]	@ (801c224 <MotionFX_getKnobs+0x78>)
 801c1ae:	f893 33c4 	ldrb.w	r3, [r3, #964]	@ 0x3c4
 801c1b2:	b903      	cbnz	r3, 801c1b6 <MotionFX_getKnobs+0xa>
 801c1b4:	4770      	bx	lr
 801c1b6:	460a      	mov	r2, r1
 801c1b8:	2900      	cmp	r1, #0
 801c1ba:	d0fb      	beq.n	801c1b4 <MotionFX_getKnobs+0x8>
 801c1bc:	b510      	push	{r4, lr}
 801c1be:	4604      	mov	r4, r0
 801c1c0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801c1c2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801c1c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c1c6:	6093      	str	r3, [r2, #8]
 801c1c8:	6010      	str	r0, [r2, #0]
 801c1ca:	6051      	str	r1, [r2, #4]
 801c1cc:	7963      	ldrb	r3, [r4, #5]
 801c1ce:	7313      	strb	r3, [r2, #12]
 801c1d0:	69a0      	ldr	r0, [r4, #24]
 801c1d2:	69e1      	ldr	r1, [r4, #28]
 801c1d4:	6a23      	ldr	r3, [r4, #32]
 801c1d6:	6193      	str	r3, [r2, #24]
 801c1d8:	6110      	str	r0, [r2, #16]
 801c1da:	6151      	str	r1, [r2, #20]
 801c1dc:	7923      	ldrb	r3, [r4, #4]
 801c1de:	7713      	strb	r3, [r2, #28]
 801c1e0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801c1e4:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
 801c1e8:	f894 3978 	ldrb.w	r3, [r4, #2424]	@ 0x978
 801c1ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801c1ee:	f102 011d 	add.w	r1, r2, #29
 801c1f2:	f104 003a 	add.w	r0, r4, #58	@ 0x3a
 801c1f6:	f7f7 f8af 	bl	8013358 <findAxis>
 801c1fa:	f102 0121 	add.w	r1, r2, #33	@ 0x21
 801c1fe:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 801c202:	f7f7 f8a9 	bl	8013358 <findAxis>
 801c206:	f102 0125 	add.w	r1, r2, #37	@ 0x25
 801c20a:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 801c20e:	f7f7 f8a3 	bl	8013358 <findAxis>
 801c212:	2300      	movs	r3, #0
 801c214:	f882 3020 	strb.w	r3, [r2, #32]
 801c218:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
 801c21c:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 801c220:	bd10      	pop	{r4, pc}
 801c222:	bf00      	nop
 801c224:	2000038c 	.word	0x2000038c

0801c228 <MotionFX_enable_6X>:
 801c228:	4b0e      	ldr	r3, [pc, #56]	@ (801c264 <MotionFX_enable_6X+0x3c>)
 801c22a:	f893 33c4 	ldrb.w	r3, [r3, #964]	@ 0x3c4
 801c22e:	b903      	cbnz	r3, 801c232 <MotionFX_enable_6X+0xa>
 801c230:	4770      	bx	lr
 801c232:	2900      	cmp	r1, #0
 801c234:	d0fc      	beq.n	801c230 <MotionFX_enable_6X+0x8>
 801c236:	b530      	push	{r4, r5, lr}
 801c238:	1d05      	adds	r5, r0, #4
 801c23a:	b099      	sub	sp, #100	@ 0x64
 801c23c:	4604      	mov	r4, r0
 801c23e:	4629      	mov	r1, r5
 801c240:	225c      	movs	r2, #92	@ 0x5c
 801c242:	a801      	add	r0, sp, #4
 801c244:	f003 fe09 	bl	801fe5a <memcpy>
 801c248:	4620      	mov	r0, r4
 801c24a:	f7f8 fed7 	bl	8014ffc <MFX_emptyAttitude>
 801c24e:	225c      	movs	r2, #92	@ 0x5c
 801c250:	a901      	add	r1, sp, #4
 801c252:	4628      	mov	r0, r5
 801c254:	f003 fe01 	bl	801fe5a <memcpy>
 801c258:	2300      	movs	r3, #0
 801c25a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 801c25e:	7363      	strb	r3, [r4, #13]
 801c260:	b019      	add	sp, #100	@ 0x64
 801c262:	bd30      	pop	{r4, r5, pc}
 801c264:	2000038c 	.word	0x2000038c

0801c268 <MotionFX_enable_9X>:
 801c268:	4b0e      	ldr	r3, [pc, #56]	@ (801c2a4 <MotionFX_enable_9X+0x3c>)
 801c26a:	f893 33c4 	ldrb.w	r3, [r3, #964]	@ 0x3c4
 801c26e:	b903      	cbnz	r3, 801c272 <MotionFX_enable_9X+0xa>
 801c270:	4770      	bx	lr
 801c272:	2900      	cmp	r1, #0
 801c274:	d0fc      	beq.n	801c270 <MotionFX_enable_9X+0x8>
 801c276:	b530      	push	{r4, r5, lr}
 801c278:	1d05      	adds	r5, r0, #4
 801c27a:	b099      	sub	sp, #100	@ 0x64
 801c27c:	4604      	mov	r4, r0
 801c27e:	4629      	mov	r1, r5
 801c280:	225c      	movs	r2, #92	@ 0x5c
 801c282:	a801      	add	r0, sp, #4
 801c284:	f003 fde9 	bl	801fe5a <memcpy>
 801c288:	4620      	mov	r0, r4
 801c28a:	f7f8 feb7 	bl	8014ffc <MFX_emptyAttitude>
 801c28e:	225c      	movs	r2, #92	@ 0x5c
 801c290:	a901      	add	r1, sp, #4
 801c292:	4628      	mov	r0, r5
 801c294:	f003 fde1 	bl	801fe5a <memcpy>
 801c298:	2301      	movs	r3, #1
 801c29a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 801c29e:	7363      	strb	r3, [r4, #13]
 801c2a0:	b019      	add	sp, #100	@ 0x64
 801c2a2:	bd30      	pop	{r4, r5, pc}
 801c2a4:	2000038c 	.word	0x2000038c

0801c2a8 <MotionFX_update>:
 801c2a8:	b430      	push	{r4, r5}
 801c2aa:	4c06      	ldr	r4, [pc, #24]	@ (801c2c4 <MotionFX_update+0x1c>)
 801c2ac:	9d02      	ldr	r5, [sp, #8]
 801c2ae:	f894 43c4 	ldrb.w	r4, [r4, #964]	@ 0x3c4
 801c2b2:	b90c      	cbnz	r4, 801c2b8 <MotionFX_update+0x10>
 801c2b4:	bc30      	pop	{r4, r5}
 801c2b6:	4770      	bx	lr
 801c2b8:	ed93 0a00 	vldr	s0, [r3]
 801c2bc:	462b      	mov	r3, r5
 801c2be:	bc30      	pop	{r4, r5}
 801c2c0:	f7f9 b986 	b.w	80155d0 <iNemoEngine_API_Update>
 801c2c4:	2000038c 	.word	0x2000038c

0801c2c8 <MotionFX_propagate>:
 801c2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c2ca:	ed2d 8b06 	vpush	{d8-d10}
 801c2ce:	4c79      	ldr	r4, [pc, #484]	@ (801c4b4 <MotionFX_propagate+0x1ec>)
 801c2d0:	f894 63c4 	ldrb.w	r6, [r4, #964]	@ 0x3c4
 801c2d4:	b09d      	sub	sp, #116	@ 0x74
 801c2d6:	b91e      	cbnz	r6, 801c2e0 <MotionFX_propagate+0x18>
 801c2d8:	b01d      	add	sp, #116	@ 0x74
 801c2da:	ecbd 8b06 	vpop	{d8-d10}
 801c2de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c2e0:	4694      	mov	ip, r2
 801c2e2:	4604      	mov	r4, r0
 801c2e4:	460d      	mov	r5, r1
 801c2e6:	68d0      	ldr	r0, [r2, #12]
 801c2e8:	6911      	ldr	r1, [r2, #16]
 801c2ea:	6952      	ldr	r2, [r2, #20]
 801c2ec:	ed93 0a00 	vldr	s0, [r3]
 801c2f0:	ab0f      	add	r3, sp, #60	@ 0x3c
 801c2f2:	c307      	stmia	r3!, {r0, r1, r2}
 801c2f4:	f8dc 0018 	ldr.w	r0, [ip, #24]
 801c2f8:	f8dc 101c 	ldr.w	r1, [ip, #28]
 801c2fc:	f8dc 2020 	ldr.w	r2, [ip, #32]
 801c300:	c307      	stmia	r3!, {r0, r1, r2}
 801c302:	aa12      	add	r2, sp, #72	@ 0x48
 801c304:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 801c308:	a802      	add	r0, sp, #8
 801c30a:	f7f6 ffc3 	bl	8013294 <rotVect>
 801c30e:	7923      	ldrb	r3, [r4, #4]
 801c310:	f104 073a 	add.w	r7, r4, #58	@ 0x3a
 801c314:	2b00      	cmp	r3, #0
 801c316:	f000 80bf 	beq.w	801c498 <MotionFX_propagate+0x1d0>
 801c31a:	ee07 3a90 	vmov	s15, r3
 801c31e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c322:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c326:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c32a:	f604 135c 	addw	r3, r4, #2396	@ 0x95c
 801c32e:	f504 6613 	add.w	r6, r4, #2352	@ 0x930
 801c332:	edd3 7a00 	vldr	s15, [r3]
 801c336:	eddd 5a02 	vldr	s11, [sp, #8]
 801c33a:	ed9d 5a03 	vldr	s10, [sp, #12]
 801c33e:	ed9d 6a04 	vldr	s12, [sp, #16]
 801c342:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 801c4b8 <MotionFX_propagate+0x1f0>
 801c346:	eddf 4a5d 	vldr	s9, [pc, #372]	@ 801c4bc <MotionFX_propagate+0x1f4>
 801c34a:	eee5 7aa6 	vfma.f32	s15, s11, s13
 801c34e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 801c352:	edc3 7a00 	vstr	s15, [r3]
 801c356:	f504 6316 	add.w	r3, r4, #2400	@ 0x960
 801c35a:	edd3 7a00 	vldr	s15, [r3]
 801c35e:	eee5 7a26 	vfma.f32	s15, s10, s13
 801c362:	ee20 0a04 	vmul.f32	s0, s0, s8
 801c366:	edc3 7a00 	vstr	s15, [r3]
 801c36a:	f604 1364 	addw	r3, r4, #2404	@ 0x964
 801c36e:	edd3 7a00 	vldr	s15, [r3]
 801c372:	eee6 7a26 	vfma.f32	s15, s12, s13
 801c376:	edc3 7a00 	vstr	s15, [r3]
 801c37a:	f604 1344 	addw	r3, r4, #2372	@ 0x944
 801c37e:	edd3 8a00 	vldr	s17, [r3]
 801c382:	f504 6314 	add.w	r3, r4, #2368	@ 0x940
 801c386:	ed93 9a00 	vldr	s18, [r3]
 801c38a:	eed5 8a07 	vfnms.f32	s17, s10, s14
 801c38e:	f604 1348 	addw	r3, r4, #2376	@ 0x948
 801c392:	ee95 9a87 	vfnms.f32	s18, s11, s14
 801c396:	ee68 7aa8 	vmul.f32	s15, s17, s17
 801c39a:	ed93 8a00 	vldr	s16, [r3]
 801c39e:	eee9 7a09 	vfma.f32	s15, s18, s18
 801c3a2:	ee96 8a07 	vfnms.f32	s16, s12, s14
 801c3a6:	eee8 7a08 	vfma.f32	s15, s16, s16
 801c3aa:	eef4 7ae4 	vcmpe.f32	s15, s9
 801c3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3b2:	dd76      	ble.n	801c4a2 <MotionFX_propagate+0x1da>
 801c3b4:	eeb1 aae7 	vsqrt.f32	s20, s15
 801c3b8:	ee6a 9a00 	vmul.f32	s19, s20, s0
 801c3bc:	eeb0 0a69 	vmov.f32	s0, s19
 801c3c0:	f000 fcd0 	bl	801cd64 <sinf>
 801c3c4:	eeb0 7a40 	vmov.f32	s14, s0
 801c3c8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c3cc:	eeb0 0a69 	vmov.f32	s0, s19
 801c3d0:	ee29 9a27 	vmul.f32	s18, s18, s15
 801c3d4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801c3d8:	ee28 8a27 	vmul.f32	s16, s16, s15
 801c3dc:	f000 fc76 	bl	801cccc <cosf>
 801c3e0:	a805      	add	r0, sp, #20
 801c3e2:	4632      	mov	r2, r6
 801c3e4:	4631      	mov	r1, r6
 801c3e6:	ed8d 0a08 	vstr	s0, [sp, #32]
 801c3ea:	ed8d 9a05 	vstr	s18, [sp, #20]
 801c3ee:	edcd 8a06 	vstr	s17, [sp, #24]
 801c3f2:	ed8d 8a07 	vstr	s16, [sp, #28]
 801c3f6:	f7f7 f99f 	bl	8013738 <qmult>
 801c3fa:	f604 1c38 	addw	ip, r4, #2360	@ 0x938
 801c3fe:	ed9c 7a00 	vldr	s14, [ip]
 801c402:	ed96 6a00 	vldr	s12, [r6]
 801c406:	f604 1e34 	addw	lr, r4, #2356	@ 0x934
 801c40a:	edde 6a00 	vldr	s13, [lr]
 801c40e:	ee67 7a07 	vmul.f32	s15, s14, s14
 801c412:	f604 133c 	addw	r3, r4, #2364	@ 0x93c
 801c416:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801c41a:	aa0f      	add	r2, sp, #60	@ 0x3c
 801c41c:	4639      	mov	r1, r7
 801c41e:	edd3 5a00 	vldr	s11, [r3]
 801c422:	eee6 7a06 	vfma.f32	s15, s12, s12
 801c426:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 801c42a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801c42e:	eeb1 5ae7 	vsqrt.f32	s10, s15
 801c432:	eec4 7a85 	vdiv.f32	s15, s9, s10
 801c436:	ee27 4a86 	vmul.f32	s8, s15, s12
 801c43a:	ee67 4aa6 	vmul.f32	s9, s15, s13
 801c43e:	ee27 5a27 	vmul.f32	s10, s14, s15
 801c442:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801c446:	ed86 4a00 	vstr	s8, [r6]
 801c44a:	edce 4a00 	vstr	s9, [lr]
 801c44e:	ed8c 5a00 	vstr	s10, [ip]
 801c452:	edc3 5a00 	vstr	s11, [r3]
 801c456:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	@ 0x950
 801c45a:	3301      	adds	r3, #1
 801c45c:	f8a4 3950 	strh.w	r3, [r4, #2384]	@ 0x950
 801c460:	f7f6 ff18 	bl	8013294 <rotVect>
 801c464:	ed85 4a03 	vstr	s8, [r5, #12]
 801c468:	edc5 4a04 	vstr	s9, [r5, #16]
 801c46c:	ed85 5a05 	vstr	s10, [r5, #20]
 801c470:	edc5 5a06 	vstr	s11, [r5, #24]
 801c474:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801c478:	f105 0328 	add.w	r3, r5, #40	@ 0x28
 801c47c:	e9cd 3200 	strd	r3, r2, [sp]
 801c480:	4601      	mov	r1, r0
 801c482:	f105 031c 	add.w	r3, r5, #28
 801c486:	462a      	mov	r2, r5
 801c488:	f105 000c 	add.w	r0, r5, #12
 801c48c:	f7f8 fce8 	bl	8014e60 <output_update>
 801c490:	b01d      	add	sp, #116	@ 0x74
 801c492:	ecbd 8b06 	vpop	{d8-d10}
 801c496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c498:	2301      	movs	r3, #1
 801c49a:	7123      	strb	r3, [r4, #4]
 801c49c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c4a0:	e743      	b.n	801c32a <MotionFX_propagate+0x62>
 801c4a2:	ee29 9a00 	vmul.f32	s18, s18, s0
 801c4a6:	ee68 8a80 	vmul.f32	s17, s17, s0
 801c4aa:	ee28 8a00 	vmul.f32	s16, s16, s0
 801c4ae:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801c4b2:	e795      	b.n	801c3e0 <MotionFX_propagate+0x118>
 801c4b4:	2000038c 	.word	0x2000038c
 801c4b8:	3c8efa35 	.word	0x3c8efa35
 801c4bc:	38d1b718 	.word	0x38d1b718

0801c4c0 <MotionFX_MagCal_init>:
 801c4c0:	b570      	push	{r4, r5, r6, lr}
 801c4c2:	4c42      	ldr	r4, [pc, #264]	@ (801c5cc <MotionFX_MagCal_init+0x10c>)
 801c4c4:	f894 33c4 	ldrb.w	r3, [r4, #964]	@ 0x3c4
 801c4c8:	b903      	cbnz	r3, 801c4cc <MotionFX_MagCal_init+0xc>
 801c4ca:	bd70      	pop	{r4, r5, r6, pc}
 801c4cc:	1e43      	subs	r3, r0, #1
 801c4ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c4d2:	4605      	mov	r5, r0
 801c4d4:	d2f9      	bcs.n	801c4ca <MotionFX_MagCal_init+0xa>
 801c4d6:	2900      	cmp	r1, #0
 801c4d8:	d139      	bne.n	801c54e <MotionFX_MagCal_init+0x8e>
 801c4da:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
 801c4de:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801c4e2:	4a3b      	ldr	r2, [pc, #236]	@ (801c5d0 <MotionFX_MagCal_init+0x110>)
 801c4e4:	1b5b      	subs	r3, r3, r5
 801c4e6:	ee07 3a90 	vmov	s15, r3
 801c4ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c4ee:	23c8      	movs	r3, #200	@ 0xc8
 801c4f0:	eef0 7ae7 	vabs.f32	s15, s15
 801c4f4:	fb93 f3f5 	sdiv	r3, r3, r5
 801c4f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c4fc:	b2db      	uxtb	r3, r3
 801c4fe:	2b0f      	cmp	r3, #15
 801c500:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c504:	bf28      	it	cs
 801c506:	230f      	movcs	r3, #15
 801c508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c50c:	6015      	str	r5, [r2, #0]
 801c50e:	f884 37de 	strb.w	r3, [r4, #2014]	@ 0x7de
 801c512:	b22d      	sxth	r5, r5
 801c514:	dc0e      	bgt.n	801c534 <MotionFX_MagCal_init+0x74>
 801c516:	edd4 7a01 	vldr	s15, [r4, #4]
 801c51a:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 801c5d4 <MotionFX_MagCal_init+0x114>
 801c51e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 801c5d8 <MotionFX_MagCal_init+0x118>
 801c522:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c526:	eef0 7ae7 	vabs.f32	s15, s15
 801c52a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c532:	dd08      	ble.n	801c546 <MotionFX_MagCal_init+0x86>
 801c534:	2300      	movs	r3, #0
 801c536:	4a29      	ldr	r2, [pc, #164]	@ (801c5dc <MotionFX_MagCal_init+0x11c>)
 801c538:	8123      	strh	r3, [r4, #8]
 801c53a:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 801c53e:	60e3      	str	r3, [r4, #12]
 801c540:	8021      	strh	r1, [r4, #0]
 801c542:	8065      	strh	r5, [r4, #2]
 801c544:	6062      	str	r2, [r4, #4]
 801c546:	2300      	movs	r3, #0
 801c548:	f884 3858 	strb.w	r3, [r4, #2136]	@ 0x858
 801c54c:	bd70      	pop	{r4, r5, r6, pc}
 801c54e:	2600      	movs	r6, #0
 801c550:	f44f 0302 	mov.w	r3, #8519680	@ 0x820000
 801c554:	e9c4 3602 	strd	r3, r6, [r4, #8]
 801c558:	f504 7372 	add.w	r3, r4, #968	@ 0x3c8
 801c55c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801c560:	4631      	mov	r1, r6
 801c562:	6123      	str	r3, [r4, #16]
 801c564:	f104 00a0 	add.w	r0, r4, #160	@ 0xa0
 801c568:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801c56c:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 801c570:	f884 6048 	strb.w	r6, [r4, #72]	@ 0x48
 801c574:	64e6      	str	r6, [r4, #76]	@ 0x4c
 801c576:	82a6      	strh	r6, [r4, #20]
 801c578:	f003 fb45 	bl	801fc06 <memset>
 801c57c:	225f      	movs	r2, #95	@ 0x5f
 801c57e:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
 801c582:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 801c586:	84a2      	strh	r2, [r4, #36]	@ 0x24
 801c588:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801c58c:	23ff      	movs	r3, #255	@ 0xff
 801c58e:	f8a4 2054 	strh.w	r2, [r4, #84]	@ 0x54
 801c592:	4631      	mov	r1, r6
 801c594:	2230      	movs	r2, #48	@ 0x30
 801c596:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 801c59a:	f884 30a2 	strb.w	r3, [r4, #162]	@ 0xa2
 801c59e:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
 801c5a2:	e9c4 6606 	strd	r6, r6, [r4, #24]
 801c5a6:	6226      	str	r6, [r4, #32]
 801c5a8:	f003 fb2d 	bl	801fc06 <memset>
 801c5ac:	f1a5 030a 	sub.w	r3, r5, #10
 801c5b0:	b29b      	uxth	r3, r3
 801c5b2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801c5b6:	2101      	movs	r1, #1
 801c5b8:	2b32      	cmp	r3, #50	@ 0x32
 801c5ba:	f884 106d 	strb.w	r1, [r4, #109]	@ 0x6d
 801c5be:	67e2      	str	r2, [r4, #124]	@ 0x7c
 801c5c0:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
 801c5c4:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 801c5c8:	d889      	bhi.n	801c4de <MotionFX_MagCal_init+0x1e>
 801c5ca:	e786      	b.n	801c4da <MotionFX_MagCal_init+0x1a>
 801c5cc:	2000038c 	.word	0x2000038c
 801c5d0:	20000000 	.word	0x20000000
 801c5d4:	3dcccccd 	.word	0x3dcccccd
 801c5d8:	3c23d70a 	.word	0x3c23d70a
 801c5dc:	3dcccccd 	.word	0x3dcccccd

0801c5e0 <MotionFX_MagCal_run>:
 801c5e0:	4940      	ldr	r1, [pc, #256]	@ (801c6e4 <MotionFX_MagCal_run+0x104>)
 801c5e2:	f891 33c4 	ldrb.w	r3, [r1, #964]	@ 0x3c4
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	d07b      	beq.n	801c6e2 <MotionFX_MagCal_run+0x102>
 801c5ea:	ed90 7a00 	vldr	s14, [r0]
 801c5ee:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 801c6e8 <MotionFX_MagCal_run+0x108>
 801c5f2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801c5f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5fe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801c602:	bfb4      	ite	lt
 801c604:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 801c608:	ee77 7a87 	vaddge.f32	s15, s15, s14
 801c60c:	ed90 7a01 	vldr	s14, [r0, #4]
 801c610:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c614:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801c618:	ee17 ca90 	vmov	ip, s15
 801c61c:	eddf 7a32 	vldr	s15, [pc, #200]	@ 801c6e8 <MotionFX_MagCal_run+0x108>
 801c620:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c628:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801c62c:	bfb4      	ite	lt
 801c62e:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 801c632:	ee77 7a87 	vaddge.f32	s15, s15, s14
 801c636:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c63a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c63e:	ed90 7a02 	vldr	s14, [r0, #8]
 801c642:	f891 3858 	ldrb.w	r3, [r1, #2136]	@ 0x858
 801c646:	68c0      	ldr	r0, [r0, #12]
 801c648:	ee17 2a90 	vmov	r2, s15
 801c64c:	eddf 7a26 	vldr	s15, [pc, #152]	@ 801c6e8 <MotionFX_MagCal_run+0x108>
 801c650:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801c654:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c65c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801c660:	bfac      	ite	ge
 801c662:	ee77 7a87 	vaddge.f32	s15, s15, s14
 801c666:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 801c66a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c66e:	b38b      	cbz	r3, 801c6d4 <MotionFX_MagCal_run+0xf4>
 801c670:	481e      	ldr	r0, [pc, #120]	@ (801c6ec <MotionFX_MagCal_run+0x10c>)
 801c672:	6800      	ldr	r0, [r0, #0]
 801c674:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 801c678:	fb10 f003 	smulbb	r0, r0, r3
 801c67c:	f8a4 07e0 	strh.w	r0, [r4, #2016]	@ 0x7e0
 801c680:	00d8      	lsls	r0, r3, #3
 801c682:	f647 74fe 	movw	r4, #32766	@ 0x7ffe
 801c686:	ee17 5a90 	vmov	r5, s15
 801c68a:	4f19      	ldr	r7, [pc, #100]	@ (801c6f0 <MotionFX_MagCal_run+0x110>)
 801c68c:	45a4      	cmp	ip, r4
 801c68e:	4666      	mov	r6, ip
 801c690:	bfa8      	it	ge
 801c692:	4626      	movge	r6, r4
 801c694:	42a5      	cmp	r5, r4
 801c696:	bfa8      	it	ge
 801c698:	4625      	movge	r5, r4
 801c69a:	42be      	cmp	r6, r7
 801c69c:	bfb8      	it	lt
 801c69e:	463e      	movlt	r6, r7
 801c6a0:	42ba      	cmp	r2, r7
 801c6a2:	db02      	blt.n	801c6aa <MotionFX_MagCal_run+0xca>
 801c6a4:	4294      	cmp	r4, r2
 801c6a6:	bfa8      	it	ge
 801c6a8:	4614      	movge	r4, r2
 801c6aa:	180a      	adds	r2, r1, r0
 801c6ac:	4810      	ldr	r0, [pc, #64]	@ (801c6f0 <MotionFX_MagCal_run+0x110>)
 801c6ae:	f8a2 67e2 	strh.w	r6, [r2, #2018]	@ 0x7e2
 801c6b2:	42a8      	cmp	r0, r5
 801c6b4:	bfb8      	it	lt
 801c6b6:	4628      	movlt	r0, r5
 801c6b8:	3301      	adds	r3, #1
 801c6ba:	f891 57de 	ldrb.w	r5, [r1, #2014]	@ 0x7de
 801c6be:	f8a2 47e4 	strh.w	r4, [r2, #2020]	@ 0x7e4
 801c6c2:	b2db      	uxtb	r3, r3
 801c6c4:	42ab      	cmp	r3, r5
 801c6c6:	f881 3858 	strb.w	r3, [r1, #2136]	@ 0x858
 801c6ca:	f8a2 07e6 	strh.w	r0, [r2, #2022]	@ 0x7e6
 801c6ce:	d011      	beq.n	801c6f4 <MotionFX_MagCal_run+0x114>
 801c6d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c6d4:	f8c1 07d8 	str.w	r0, [r1, #2008]	@ 0x7d8
 801c6d8:	2001      	movs	r0, #1
 801c6da:	f881 07dc 	strb.w	r0, [r1, #2012]	@ 0x7dc
 801c6de:	4618      	mov	r0, r3
 801c6e0:	e7cf      	b.n	801c682 <MotionFX_MagCal_run+0xa2>
 801c6e2:	4770      	bx	lr
 801c6e4:	2000038c 	.word	0x2000038c
 801c6e8:	43fa0000 	.word	0x43fa0000
 801c6ec:	20000000 	.word	0x20000000
 801c6f0:	ffff8002 	.word	0xffff8002
 801c6f4:	f891 37dc 	ldrb.w	r3, [r1, #2012]	@ 0x7dc
 801c6f8:	f8d1 77d8 	ldr.w	r7, [r1, #2008]	@ 0x7d8
 801c6fc:	2200      	movs	r2, #0
 801c6fe:	f881 2858 	strb.w	r2, [r1, #2136]	@ 0x858
 801c702:	2b00      	cmp	r3, #0
 801c704:	f000 8169 	beq.w	801c9da <MotionFX_MagCal_run+0x3fa>
 801c708:	2d00      	cmp	r5, #0
 801c70a:	f000 8166 	beq.w	801c9da <MotionFX_MagCal_run+0x3fa>
 801c70e:	894e      	ldrh	r6, [r1, #10]
 801c710:	2e00      	cmp	r6, #0
 801c712:	f000 8162 	beq.w	801c9da <MotionFX_MagCal_run+0x3fa>
 801c716:	890b      	ldrh	r3, [r1, #8]
 801c718:	690c      	ldr	r4, [r1, #16]
 801c71a:	42b3      	cmp	r3, r6
 801c71c:	bf28      	it	cs
 801c71e:	4633      	movcs	r3, r6
 801c720:	3301      	adds	r3, #1
 801c722:	b29b      	uxth	r3, r3
 801c724:	42b3      	cmp	r3, r6
 801c726:	bf28      	it	cs
 801c728:	4633      	movcs	r3, r6
 801c72a:	f06f 4860 	mvn.w	r8, #3758096384	@ 0xe0000000
 801c72e:	eb03 0208 	add.w	r2, r3, r8
 801c732:	f04f 0901 	mov.w	r9, #1
 801c736:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801c73a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801c73e:	f8d1 c7e2 	ldr.w	ip, [r1, #2018]	@ 0x7e2
 801c742:	f8c2 c002 	str.w	ip, [r2, #2]
 801c746:	f9b1 07e6 	ldrsh.w	r0, [r1, #2022]	@ 0x7e6
 801c74a:	f8b1 e7e0 	ldrh.w	lr, [r1, #2016]	@ 0x7e0
 801c74e:	80d0      	strh	r0, [r2, #6]
 801c750:	454d      	cmp	r5, r9
 801c752:	f000 813a 	beq.w	801c9ca <MotionFX_MagCal_run+0x3ea>
 801c756:	444b      	add	r3, r9
 801c758:	b29b      	uxth	r3, r3
 801c75a:	42b3      	cmp	r3, r6
 801c75c:	bf28      	it	cs
 801c75e:	4633      	movcs	r3, r6
 801c760:	eb03 0208 	add.w	r2, r3, r8
 801c764:	2d02      	cmp	r5, #2
 801c766:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801c76a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801c76e:	f8d1 c7ea 	ldr.w	ip, [r1, #2026]	@ 0x7ea
 801c772:	f8c2 c002 	str.w	ip, [r2, #2]
 801c776:	f9b1 07ee 	ldrsh.w	r0, [r1, #2030]	@ 0x7ee
 801c77a:	f8b1 e7e8 	ldrh.w	lr, [r1, #2024]	@ 0x7e8
 801c77e:	80d0      	strh	r0, [r2, #6]
 801c780:	f000 8123 	beq.w	801c9ca <MotionFX_MagCal_run+0x3ea>
 801c784:	444b      	add	r3, r9
 801c786:	b29b      	uxth	r3, r3
 801c788:	42b3      	cmp	r3, r6
 801c78a:	bf28      	it	cs
 801c78c:	4633      	movcs	r3, r6
 801c78e:	eb03 0208 	add.w	r2, r3, r8
 801c792:	2d03      	cmp	r5, #3
 801c794:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801c798:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801c79c:	f8d1 c7f2 	ldr.w	ip, [r1, #2034]	@ 0x7f2
 801c7a0:	f8c2 c002 	str.w	ip, [r2, #2]
 801c7a4:	f9b1 07f6 	ldrsh.w	r0, [r1, #2038]	@ 0x7f6
 801c7a8:	f8b1 e7f0 	ldrh.w	lr, [r1, #2032]	@ 0x7f0
 801c7ac:	80d0      	strh	r0, [r2, #6]
 801c7ae:	f000 810c 	beq.w	801c9ca <MotionFX_MagCal_run+0x3ea>
 801c7b2:	444b      	add	r3, r9
 801c7b4:	b29b      	uxth	r3, r3
 801c7b6:	42b3      	cmp	r3, r6
 801c7b8:	bf28      	it	cs
 801c7ba:	4633      	movcs	r3, r6
 801c7bc:	eb03 0208 	add.w	r2, r3, r8
 801c7c0:	2d04      	cmp	r5, #4
 801c7c2:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801c7c6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801c7ca:	f8d1 c7fa 	ldr.w	ip, [r1, #2042]	@ 0x7fa
 801c7ce:	f8c2 c002 	str.w	ip, [r2, #2]
 801c7d2:	f9b1 07fe 	ldrsh.w	r0, [r1, #2046]	@ 0x7fe
 801c7d6:	f8b1 e7f8 	ldrh.w	lr, [r1, #2040]	@ 0x7f8
 801c7da:	80d0      	strh	r0, [r2, #6]
 801c7dc:	f000 80f5 	beq.w	801c9ca <MotionFX_MagCal_run+0x3ea>
 801c7e0:	444b      	add	r3, r9
 801c7e2:	b29b      	uxth	r3, r3
 801c7e4:	42b3      	cmp	r3, r6
 801c7e6:	bf28      	it	cs
 801c7e8:	4633      	movcs	r3, r6
 801c7ea:	eb03 0208 	add.w	r2, r3, r8
 801c7ee:	2d05      	cmp	r5, #5
 801c7f0:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801c7f4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801c7f8:	f8d1 c802 	ldr.w	ip, [r1, #2050]	@ 0x802
 801c7fc:	f8c2 c002 	str.w	ip, [r2, #2]
 801c800:	f9b1 0806 	ldrsh.w	r0, [r1, #2054]	@ 0x806
 801c804:	f8b1 e800 	ldrh.w	lr, [r1, #2048]	@ 0x800
 801c808:	80d0      	strh	r0, [r2, #6]
 801c80a:	f000 80de 	beq.w	801c9ca <MotionFX_MagCal_run+0x3ea>
 801c80e:	444b      	add	r3, r9
 801c810:	b29b      	uxth	r3, r3
 801c812:	42b3      	cmp	r3, r6
 801c814:	bf28      	it	cs
 801c816:	4633      	movcs	r3, r6
 801c818:	4498      	add	r8, r3
 801c81a:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
 801c81e:	f804 9038 	strb.w	r9, [r4, r8, lsl #3]
 801c822:	f8d1 c80a 	ldr.w	ip, [r1, #2058]	@ 0x80a
 801c826:	f8c2 c002 	str.w	ip, [r2, #2]
 801c82a:	f9b1 080e 	ldrsh.w	r0, [r1, #2062]	@ 0x80e
 801c82e:	f8b1 e808 	ldrh.w	lr, [r1, #2056]	@ 0x808
 801c832:	80d0      	strh	r0, [r2, #6]
 801c834:	2d06      	cmp	r5, #6
 801c836:	f000 80c8 	beq.w	801c9ca <MotionFX_MagCal_run+0x3ea>
 801c83a:	444b      	add	r3, r9
 801c83c:	b29b      	uxth	r3, r3
 801c83e:	42b3      	cmp	r3, r6
 801c840:	bf28      	it	cs
 801c842:	4633      	movcs	r3, r6
 801c844:	f06f 4860 	mvn.w	r8, #3758096384	@ 0xe0000000
 801c848:	eb03 0208 	add.w	r2, r3, r8
 801c84c:	2d07      	cmp	r5, #7
 801c84e:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801c852:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801c856:	f8d1 c812 	ldr.w	ip, [r1, #2066]	@ 0x812
 801c85a:	f8c2 c002 	str.w	ip, [r2, #2]
 801c85e:	f9b1 0816 	ldrsh.w	r0, [r1, #2070]	@ 0x816
 801c862:	f8b1 e810 	ldrh.w	lr, [r1, #2064]	@ 0x810
 801c866:	80d0      	strh	r0, [r2, #6]
 801c868:	f000 80af 	beq.w	801c9ca <MotionFX_MagCal_run+0x3ea>
 801c86c:	444b      	add	r3, r9
 801c86e:	b29b      	uxth	r3, r3
 801c870:	42b3      	cmp	r3, r6
 801c872:	bf28      	it	cs
 801c874:	4633      	movcs	r3, r6
 801c876:	eb03 0208 	add.w	r2, r3, r8
 801c87a:	2d08      	cmp	r5, #8
 801c87c:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801c880:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801c884:	f8d1 c81a 	ldr.w	ip, [r1, #2074]	@ 0x81a
 801c888:	f8c2 c002 	str.w	ip, [r2, #2]
 801c88c:	f9b1 081e 	ldrsh.w	r0, [r1, #2078]	@ 0x81e
 801c890:	f8b1 e818 	ldrh.w	lr, [r1, #2072]	@ 0x818
 801c894:	80d0      	strh	r0, [r2, #6]
 801c896:	f000 8098 	beq.w	801c9ca <MotionFX_MagCal_run+0x3ea>
 801c89a:	444b      	add	r3, r9
 801c89c:	b29b      	uxth	r3, r3
 801c89e:	42b3      	cmp	r3, r6
 801c8a0:	bf28      	it	cs
 801c8a2:	4633      	movcs	r3, r6
 801c8a4:	eb03 0208 	add.w	r2, r3, r8
 801c8a8:	2d09      	cmp	r5, #9
 801c8aa:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801c8ae:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801c8b2:	f8d1 c822 	ldr.w	ip, [r1, #2082]	@ 0x822
 801c8b6:	f8c2 c002 	str.w	ip, [r2, #2]
 801c8ba:	f9b1 0826 	ldrsh.w	r0, [r1, #2086]	@ 0x826
 801c8be:	f8b1 e820 	ldrh.w	lr, [r1, #2080]	@ 0x820
 801c8c2:	80d0      	strh	r0, [r2, #6]
 801c8c4:	f000 8081 	beq.w	801c9ca <MotionFX_MagCal_run+0x3ea>
 801c8c8:	444b      	add	r3, r9
 801c8ca:	b29b      	uxth	r3, r3
 801c8cc:	42b3      	cmp	r3, r6
 801c8ce:	bf28      	it	cs
 801c8d0:	4633      	movcs	r3, r6
 801c8d2:	eb03 0208 	add.w	r2, r3, r8
 801c8d6:	2d0a      	cmp	r5, #10
 801c8d8:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801c8dc:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801c8e0:	f8d1 c82a 	ldr.w	ip, [r1, #2090]	@ 0x82a
 801c8e4:	f8c2 c002 	str.w	ip, [r2, #2]
 801c8e8:	f9b1 082e 	ldrsh.w	r0, [r1, #2094]	@ 0x82e
 801c8ec:	f8b1 e828 	ldrh.w	lr, [r1, #2088]	@ 0x828
 801c8f0:	80d0      	strh	r0, [r2, #6]
 801c8f2:	d06a      	beq.n	801c9ca <MotionFX_MagCal_run+0x3ea>
 801c8f4:	444b      	add	r3, r9
 801c8f6:	b29b      	uxth	r3, r3
 801c8f8:	42b3      	cmp	r3, r6
 801c8fa:	bf28      	it	cs
 801c8fc:	4633      	movcs	r3, r6
 801c8fe:	eb03 0208 	add.w	r2, r3, r8
 801c902:	2d0b      	cmp	r5, #11
 801c904:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801c908:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801c90c:	f8d1 c832 	ldr.w	ip, [r1, #2098]	@ 0x832
 801c910:	f8c2 c002 	str.w	ip, [r2, #2]
 801c914:	f9b1 0836 	ldrsh.w	r0, [r1, #2102]	@ 0x836
 801c918:	f8b1 e830 	ldrh.w	lr, [r1, #2096]	@ 0x830
 801c91c:	80d0      	strh	r0, [r2, #6]
 801c91e:	d054      	beq.n	801c9ca <MotionFX_MagCal_run+0x3ea>
 801c920:	444b      	add	r3, r9
 801c922:	b29b      	uxth	r3, r3
 801c924:	42b3      	cmp	r3, r6
 801c926:	bf28      	it	cs
 801c928:	4633      	movcs	r3, r6
 801c92a:	eb03 0208 	add.w	r2, r3, r8
 801c92e:	2d0c      	cmp	r5, #12
 801c930:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801c934:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801c938:	f8d1 c83a 	ldr.w	ip, [r1, #2106]	@ 0x83a
 801c93c:	f8c2 c002 	str.w	ip, [r2, #2]
 801c940:	f9b1 083e 	ldrsh.w	r0, [r1, #2110]	@ 0x83e
 801c944:	f8b1 e838 	ldrh.w	lr, [r1, #2104]	@ 0x838
 801c948:	80d0      	strh	r0, [r2, #6]
 801c94a:	d03e      	beq.n	801c9ca <MotionFX_MagCal_run+0x3ea>
 801c94c:	444b      	add	r3, r9
 801c94e:	b29b      	uxth	r3, r3
 801c950:	42b3      	cmp	r3, r6
 801c952:	bf28      	it	cs
 801c954:	4633      	movcs	r3, r6
 801c956:	eb03 0208 	add.w	r2, r3, r8
 801c95a:	2d0d      	cmp	r5, #13
 801c95c:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801c960:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801c964:	f8d1 c842 	ldr.w	ip, [r1, #2114]	@ 0x842
 801c968:	f8c2 c002 	str.w	ip, [r2, #2]
 801c96c:	f9b1 0846 	ldrsh.w	r0, [r1, #2118]	@ 0x846
 801c970:	f8b1 e840 	ldrh.w	lr, [r1, #2112]	@ 0x840
 801c974:	80d0      	strh	r0, [r2, #6]
 801c976:	d028      	beq.n	801c9ca <MotionFX_MagCal_run+0x3ea>
 801c978:	444b      	add	r3, r9
 801c97a:	b29b      	uxth	r3, r3
 801c97c:	42b3      	cmp	r3, r6
 801c97e:	bf28      	it	cs
 801c980:	4633      	movcs	r3, r6
 801c982:	eb03 0208 	add.w	r2, r3, r8
 801c986:	2d0e      	cmp	r5, #14
 801c988:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801c98c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801c990:	f8d1 c84a 	ldr.w	ip, [r1, #2122]	@ 0x84a
 801c994:	f8c2 c002 	str.w	ip, [r2, #2]
 801c998:	f9b1 084e 	ldrsh.w	r0, [r1, #2126]	@ 0x84e
 801c99c:	f8b1 e848 	ldrh.w	lr, [r1, #2120]	@ 0x848
 801c9a0:	80d0      	strh	r0, [r2, #6]
 801c9a2:	d012      	beq.n	801c9ca <MotionFX_MagCal_run+0x3ea>
 801c9a4:	444b      	add	r3, r9
 801c9a6:	b29b      	uxth	r3, r3
 801c9a8:	42b3      	cmp	r3, r6
 801c9aa:	bf28      	it	cs
 801c9ac:	4633      	movcs	r3, r6
 801c9ae:	4498      	add	r8, r3
 801c9b0:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
 801c9b4:	f804 9038 	strb.w	r9, [r4, r8, lsl #3]
 801c9b8:	f8d1 c852 	ldr.w	ip, [r1, #2130]	@ 0x852
 801c9bc:	f8c2 c002 	str.w	ip, [r2, #2]
 801c9c0:	f9b1 0856 	ldrsh.w	r0, [r1, #2134]	@ 0x856
 801c9c4:	f8b1 e850 	ldrh.w	lr, [r1, #2128]	@ 0x850
 801c9c8:	80d0      	strh	r0, [r2, #6]
 801c9ca:	810b      	strh	r3, [r1, #8]
 801c9cc:	4477      	add	r7, lr
 801c9ce:	2301      	movs	r3, #1
 801c9d0:	f8c2 c002 	str.w	ip, [r2, #2]
 801c9d4:	80d0      	strh	r0, [r2, #6]
 801c9d6:	7013      	strb	r3, [r2, #0]
 801c9d8:	60cf      	str	r7, [r1, #12]
 801c9da:	f891 3048 	ldrb.w	r3, [r1, #72]	@ 0x48
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	f43f ae76 	beq.w	801c6d0 <MotionFX_MagCal_run+0xf0>
 801c9e4:	890a      	ldrh	r2, [r1, #8]
 801c9e6:	894b      	ldrh	r3, [r1, #10]
 801c9e8:	4293      	cmp	r3, r2
 801c9ea:	d022      	beq.n	801ca32 <MotionFX_MagCal_run+0x452>
 801c9ec:	b32a      	cbz	r2, 801ca3a <MotionFX_MagCal_run+0x45a>
 801c9ee:	68cb      	ldr	r3, [r1, #12]
 801c9f0:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 801c9f4:	3301      	adds	r3, #1
 801c9f6:	4403      	add	r3, r0
 801c9f8:	1c58      	adds	r0, r3, #1
 801c9fa:	d01e      	beq.n	801ca3a <MotionFX_MagCal_run+0x45a>
 801c9fc:	f503 541c 	add.w	r4, r3, #9984	@ 0x2700
 801ca00:	3410      	adds	r4, #16
 801ca02:	6cc8      	ldr	r0, [r1, #76]	@ 0x4c
 801ca04:	42a0      	cmp	r0, r4
 801ca06:	f8b1 4050 	ldrh.w	r4, [r1, #80]	@ 0x50
 801ca0a:	bf84      	itt	hi
 801ca0c:	64cb      	strhi	r3, [r1, #76]	@ 0x4c
 801ca0e:	4618      	movhi	r0, r3
 801ca10:	4420      	add	r0, r4
 801ca12:	4283      	cmp	r3, r0
 801ca14:	f4ff ae5c 	bcc.w	801c6d0 <MotionFX_MagCal_run+0xf0>
 801ca18:	b132      	cbz	r2, 801ca28 <MotionFX_MagCal_run+0x448>
 801ca1a:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 801ca1e:	68c9      	ldr	r1, [r1, #12]
 801ca20:	3a01      	subs	r2, #1
 801ca22:	fb00 1212 	mls	r2, r0, r2, r1
 801ca26:	b292      	uxth	r2, r2
 801ca28:	1a9b      	subs	r3, r3, r2
 801ca2a:	b21b      	sxth	r3, r3
 801ca2c:	42a3      	cmp	r3, r4
 801ca2e:	f6ff ae4f 	blt.w	801c6d0 <MotionFX_MagCal_run+0xf0>
 801ca32:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ca36:	f7fd b897 	b.w	8019b68 <MEMS_runMagCal.constprop.0>
 801ca3a:	f242 7410 	movw	r4, #10000	@ 0x2710
 801ca3e:	2300      	movs	r3, #0
 801ca40:	e7df      	b.n	801ca02 <MotionFX_MagCal_run+0x422>
 801ca42:	bf00      	nop

0801ca44 <MotionFX_MagCal_getParams>:
 801ca44:	4b20      	ldr	r3, [pc, #128]	@ (801cac8 <MotionFX_MagCal_getParams+0x84>)
 801ca46:	f893 23c4 	ldrb.w	r2, [r3, #964]	@ 0x3c4
 801ca4a:	b902      	cbnz	r2, 801ca4e <MotionFX_MagCal_getParams+0xa>
 801ca4c:	4770      	bx	lr
 801ca4e:	b530      	push	{r4, r5, lr}
 801ca50:	f103 0e6c 	add.w	lr, r3, #108	@ 0x6c
 801ca54:	4604      	mov	r4, r0
 801ca56:	f893 506c 	ldrb.w	r5, [r3, #108]	@ 0x6c
 801ca5a:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 801cacc <MotionFX_MagCal_getParams+0x88>
 801ca5e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ca62:	b08f      	sub	sp, #60	@ 0x3c
 801ca64:	f10d 0c04 	add.w	ip, sp, #4
 801ca68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ca6c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ca70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ca74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ca78:	eddd 6a02 	vldr	s13, [sp, #8]
 801ca7c:	ed9d 7a03 	vldr	s14, [sp, #12]
 801ca80:	eddd 7a04 	vldr	s15, [sp, #16]
 801ca84:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801ca88:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801ca8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ca90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ca94:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ca98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ca9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801caa0:	f8de 3000 	ldr.w	r3, [lr]
 801caa4:	7325      	strb	r5, [r4, #12]
 801caa6:	ee66 6a86 	vmul.f32	s13, s13, s12
 801caaa:	ee27 7a06 	vmul.f32	s14, s14, s12
 801caae:	ee67 7a86 	vmul.f32	s15, s15, s12
 801cab2:	edc4 6a00 	vstr	s13, [r4]
 801cab6:	f8cc 3000 	str.w	r3, [ip]
 801caba:	ed84 7a01 	vstr	s14, [r4, #4]
 801cabe:	edc4 7a02 	vstr	s15, [r4, #8]
 801cac2:	b00f      	add	sp, #60	@ 0x3c
 801cac4:	bd30      	pop	{r4, r5, pc}
 801cac6:	bf00      	nop
 801cac8:	2000038c 	.word	0x2000038c
 801cacc:	3b03126f 	.word	0x3b03126f

0801cad0 <_ZdlPvj>:
 801cad0:	f000 b811 	b.w	801caf6 <_ZdlPv>

0801cad4 <_Znwj>:
 801cad4:	2801      	cmp	r0, #1
 801cad6:	bf38      	it	cc
 801cad8:	2001      	movcc	r0, #1
 801cada:	b510      	push	{r4, lr}
 801cadc:	4604      	mov	r4, r0
 801cade:	4620      	mov	r0, r4
 801cae0:	f002 fa42 	bl	801ef68 <malloc>
 801cae4:	b100      	cbz	r0, 801cae8 <_Znwj+0x14>
 801cae6:	bd10      	pop	{r4, pc}
 801cae8:	f000 f808 	bl	801cafc <_ZSt15get_new_handlerv>
 801caec:	b908      	cbnz	r0, 801caf2 <_Znwj+0x1e>
 801caee:	f002 fa33 	bl	801ef58 <abort>
 801caf2:	4780      	blx	r0
 801caf4:	e7f3      	b.n	801cade <_Znwj+0xa>

0801caf6 <_ZdlPv>:
 801caf6:	f002 ba3f 	b.w	801ef78 <free>
	...

0801cafc <_ZSt15get_new_handlerv>:
 801cafc:	4b02      	ldr	r3, [pc, #8]	@ (801cb08 <_ZSt15get_new_handlerv+0xc>)
 801cafe:	6818      	ldr	r0, [r3, #0]
 801cb00:	f3bf 8f5b 	dmb	ish
 801cb04:	4770      	bx	lr
 801cb06:	bf00      	nop
 801cb08:	20017ba4 	.word	0x20017ba4

0801cb0c <atan2>:
 801cb0c:	f000 bba4 	b.w	801d258 <__ieee754_atan2>

0801cb10 <sqrt>:
 801cb10:	b538      	push	{r3, r4, r5, lr}
 801cb12:	ed2d 8b02 	vpush	{d8}
 801cb16:	ec55 4b10 	vmov	r4, r5, d0
 801cb1a:	f000 f9a5 	bl	801ce68 <__ieee754_sqrt>
 801cb1e:	4622      	mov	r2, r4
 801cb20:	462b      	mov	r3, r5
 801cb22:	4620      	mov	r0, r4
 801cb24:	4629      	mov	r1, r5
 801cb26:	eeb0 8a40 	vmov.f32	s16, s0
 801cb2a:	eef0 8a60 	vmov.f32	s17, s1
 801cb2e:	f7e4 f825 	bl	8000b7c <__aeabi_dcmpun>
 801cb32:	b990      	cbnz	r0, 801cb5a <sqrt+0x4a>
 801cb34:	2200      	movs	r2, #0
 801cb36:	2300      	movs	r3, #0
 801cb38:	4620      	mov	r0, r4
 801cb3a:	4629      	mov	r1, r5
 801cb3c:	f7e3 fff6 	bl	8000b2c <__aeabi_dcmplt>
 801cb40:	b158      	cbz	r0, 801cb5a <sqrt+0x4a>
 801cb42:	f003 f95d 	bl	801fe00 <__errno>
 801cb46:	2321      	movs	r3, #33	@ 0x21
 801cb48:	6003      	str	r3, [r0, #0]
 801cb4a:	2200      	movs	r2, #0
 801cb4c:	2300      	movs	r3, #0
 801cb4e:	4610      	mov	r0, r2
 801cb50:	4619      	mov	r1, r3
 801cb52:	f7e3 fea3 	bl	800089c <__aeabi_ddiv>
 801cb56:	ec41 0b18 	vmov	d8, r0, r1
 801cb5a:	eeb0 0a48 	vmov.f32	s0, s16
 801cb5e:	eef0 0a68 	vmov.f32	s1, s17
 801cb62:	ecbd 8b02 	vpop	{d8}
 801cb66:	bd38      	pop	{r3, r4, r5, pc}

0801cb68 <acosf>:
 801cb68:	b508      	push	{r3, lr}
 801cb6a:	ed2d 8b02 	vpush	{d8}
 801cb6e:	eeb0 8a40 	vmov.f32	s16, s0
 801cb72:	f000 ff59 	bl	801da28 <__ieee754_acosf>
 801cb76:	eeb4 8a48 	vcmp.f32	s16, s16
 801cb7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb7e:	eef0 8a40 	vmov.f32	s17, s0
 801cb82:	d615      	bvs.n	801cbb0 <acosf+0x48>
 801cb84:	eeb0 0a48 	vmov.f32	s0, s16
 801cb88:	f000 f8e4 	bl	801cd54 <fabsf>
 801cb8c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801cb90:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801cb94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb98:	dd0a      	ble.n	801cbb0 <acosf+0x48>
 801cb9a:	f003 f931 	bl	801fe00 <__errno>
 801cb9e:	ecbd 8b02 	vpop	{d8}
 801cba2:	2321      	movs	r3, #33	@ 0x21
 801cba4:	6003      	str	r3, [r0, #0]
 801cba6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801cbaa:	4804      	ldr	r0, [pc, #16]	@ (801cbbc <acosf+0x54>)
 801cbac:	f000 b956 	b.w	801ce5c <nanf>
 801cbb0:	eeb0 0a68 	vmov.f32	s0, s17
 801cbb4:	ecbd 8b02 	vpop	{d8}
 801cbb8:	bd08      	pop	{r3, pc}
 801cbba:	bf00      	nop
 801cbbc:	08022d66 	.word	0x08022d66

0801cbc0 <asinf>:
 801cbc0:	b508      	push	{r3, lr}
 801cbc2:	ed2d 8b02 	vpush	{d8}
 801cbc6:	eeb0 8a40 	vmov.f32	s16, s0
 801cbca:	f001 f825 	bl	801dc18 <__ieee754_asinf>
 801cbce:	eeb4 8a48 	vcmp.f32	s16, s16
 801cbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbd6:	eef0 8a40 	vmov.f32	s17, s0
 801cbda:	d615      	bvs.n	801cc08 <asinf+0x48>
 801cbdc:	eeb0 0a48 	vmov.f32	s0, s16
 801cbe0:	f000 f8b8 	bl	801cd54 <fabsf>
 801cbe4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801cbe8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801cbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbf0:	dd0a      	ble.n	801cc08 <asinf+0x48>
 801cbf2:	f003 f905 	bl	801fe00 <__errno>
 801cbf6:	ecbd 8b02 	vpop	{d8}
 801cbfa:	2321      	movs	r3, #33	@ 0x21
 801cbfc:	6003      	str	r3, [r0, #0]
 801cbfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801cc02:	4804      	ldr	r0, [pc, #16]	@ (801cc14 <asinf+0x54>)
 801cc04:	f000 b92a 	b.w	801ce5c <nanf>
 801cc08:	eeb0 0a68 	vmov.f32	s0, s17
 801cc0c:	ecbd 8b02 	vpop	{d8}
 801cc10:	bd08      	pop	{r3, pc}
 801cc12:	bf00      	nop
 801cc14:	08022d66 	.word	0x08022d66

0801cc18 <atan2f>:
 801cc18:	f001 b8e4 	b.w	801dde4 <__ieee754_atan2f>

0801cc1c <powf>:
 801cc1c:	b508      	push	{r3, lr}
 801cc1e:	ed2d 8b04 	vpush	{d8-d9}
 801cc22:	eeb0 8a60 	vmov.f32	s16, s1
 801cc26:	eeb0 9a40 	vmov.f32	s18, s0
 801cc2a:	f001 f97b 	bl	801df24 <__ieee754_powf>
 801cc2e:	eeb4 8a48 	vcmp.f32	s16, s16
 801cc32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc36:	eef0 8a40 	vmov.f32	s17, s0
 801cc3a:	d63e      	bvs.n	801ccba <powf+0x9e>
 801cc3c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801cc40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc44:	d112      	bne.n	801cc6c <powf+0x50>
 801cc46:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801cc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc4e:	d039      	beq.n	801ccc4 <powf+0xa8>
 801cc50:	eeb0 0a48 	vmov.f32	s0, s16
 801cc54:	f000 f8f8 	bl	801ce48 <finitef>
 801cc58:	b378      	cbz	r0, 801ccba <powf+0x9e>
 801cc5a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801cc5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc62:	d52a      	bpl.n	801ccba <powf+0x9e>
 801cc64:	f003 f8cc 	bl	801fe00 <__errno>
 801cc68:	2322      	movs	r3, #34	@ 0x22
 801cc6a:	e014      	b.n	801cc96 <powf+0x7a>
 801cc6c:	f000 f8ec 	bl	801ce48 <finitef>
 801cc70:	b998      	cbnz	r0, 801cc9a <powf+0x7e>
 801cc72:	eeb0 0a49 	vmov.f32	s0, s18
 801cc76:	f000 f8e7 	bl	801ce48 <finitef>
 801cc7a:	b170      	cbz	r0, 801cc9a <powf+0x7e>
 801cc7c:	eeb0 0a48 	vmov.f32	s0, s16
 801cc80:	f000 f8e2 	bl	801ce48 <finitef>
 801cc84:	b148      	cbz	r0, 801cc9a <powf+0x7e>
 801cc86:	eef4 8a68 	vcmp.f32	s17, s17
 801cc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc8e:	d7e9      	bvc.n	801cc64 <powf+0x48>
 801cc90:	f003 f8b6 	bl	801fe00 <__errno>
 801cc94:	2321      	movs	r3, #33	@ 0x21
 801cc96:	6003      	str	r3, [r0, #0]
 801cc98:	e00f      	b.n	801ccba <powf+0x9e>
 801cc9a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801cc9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cca2:	d10a      	bne.n	801ccba <powf+0x9e>
 801cca4:	eeb0 0a49 	vmov.f32	s0, s18
 801cca8:	f000 f8ce 	bl	801ce48 <finitef>
 801ccac:	b128      	cbz	r0, 801ccba <powf+0x9e>
 801ccae:	eeb0 0a48 	vmov.f32	s0, s16
 801ccb2:	f000 f8c9 	bl	801ce48 <finitef>
 801ccb6:	2800      	cmp	r0, #0
 801ccb8:	d1d4      	bne.n	801cc64 <powf+0x48>
 801ccba:	eeb0 0a68 	vmov.f32	s0, s17
 801ccbe:	ecbd 8b04 	vpop	{d8-d9}
 801ccc2:	bd08      	pop	{r3, pc}
 801ccc4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801ccc8:	e7f7      	b.n	801ccba <powf+0x9e>
	...

0801cccc <cosf>:
 801cccc:	ee10 3a10 	vmov	r3, s0
 801ccd0:	b507      	push	{r0, r1, r2, lr}
 801ccd2:	4a1e      	ldr	r2, [pc, #120]	@ (801cd4c <cosf+0x80>)
 801ccd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ccd8:	4293      	cmp	r3, r2
 801ccda:	d806      	bhi.n	801ccea <cosf+0x1e>
 801ccdc:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801cd50 <cosf+0x84>
 801cce0:	b003      	add	sp, #12
 801cce2:	f85d eb04 	ldr.w	lr, [sp], #4
 801cce6:	f000 bd1f 	b.w	801d728 <__kernel_cosf>
 801ccea:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ccee:	d304      	bcc.n	801ccfa <cosf+0x2e>
 801ccf0:	ee30 0a40 	vsub.f32	s0, s0, s0
 801ccf4:	b003      	add	sp, #12
 801ccf6:	f85d fb04 	ldr.w	pc, [sp], #4
 801ccfa:	4668      	mov	r0, sp
 801ccfc:	f001 fbe2 	bl	801e4c4 <__ieee754_rem_pio2f>
 801cd00:	f000 0003 	and.w	r0, r0, #3
 801cd04:	2801      	cmp	r0, #1
 801cd06:	d009      	beq.n	801cd1c <cosf+0x50>
 801cd08:	2802      	cmp	r0, #2
 801cd0a:	d010      	beq.n	801cd2e <cosf+0x62>
 801cd0c:	b9b0      	cbnz	r0, 801cd3c <cosf+0x70>
 801cd0e:	eddd 0a01 	vldr	s1, [sp, #4]
 801cd12:	ed9d 0a00 	vldr	s0, [sp]
 801cd16:	f000 fd07 	bl	801d728 <__kernel_cosf>
 801cd1a:	e7eb      	b.n	801ccf4 <cosf+0x28>
 801cd1c:	eddd 0a01 	vldr	s1, [sp, #4]
 801cd20:	ed9d 0a00 	vldr	s0, [sp]
 801cd24:	f000 fd58 	bl	801d7d8 <__kernel_sinf>
 801cd28:	eeb1 0a40 	vneg.f32	s0, s0
 801cd2c:	e7e2      	b.n	801ccf4 <cosf+0x28>
 801cd2e:	eddd 0a01 	vldr	s1, [sp, #4]
 801cd32:	ed9d 0a00 	vldr	s0, [sp]
 801cd36:	f000 fcf7 	bl	801d728 <__kernel_cosf>
 801cd3a:	e7f5      	b.n	801cd28 <cosf+0x5c>
 801cd3c:	eddd 0a01 	vldr	s1, [sp, #4]
 801cd40:	ed9d 0a00 	vldr	s0, [sp]
 801cd44:	2001      	movs	r0, #1
 801cd46:	f000 fd47 	bl	801d7d8 <__kernel_sinf>
 801cd4a:	e7d3      	b.n	801ccf4 <cosf+0x28>
 801cd4c:	3f490fd8 	.word	0x3f490fd8
 801cd50:	00000000 	.word	0x00000000

0801cd54 <fabsf>:
 801cd54:	ee10 3a10 	vmov	r3, s0
 801cd58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cd5c:	ee00 3a10 	vmov	s0, r3
 801cd60:	4770      	bx	lr
	...

0801cd64 <sinf>:
 801cd64:	ee10 3a10 	vmov	r3, s0
 801cd68:	b507      	push	{r0, r1, r2, lr}
 801cd6a:	4a1f      	ldr	r2, [pc, #124]	@ (801cde8 <sinf+0x84>)
 801cd6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cd70:	4293      	cmp	r3, r2
 801cd72:	d807      	bhi.n	801cd84 <sinf+0x20>
 801cd74:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801cdec <sinf+0x88>
 801cd78:	2000      	movs	r0, #0
 801cd7a:	b003      	add	sp, #12
 801cd7c:	f85d eb04 	ldr.w	lr, [sp], #4
 801cd80:	f000 bd2a 	b.w	801d7d8 <__kernel_sinf>
 801cd84:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801cd88:	d304      	bcc.n	801cd94 <sinf+0x30>
 801cd8a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801cd8e:	b003      	add	sp, #12
 801cd90:	f85d fb04 	ldr.w	pc, [sp], #4
 801cd94:	4668      	mov	r0, sp
 801cd96:	f001 fb95 	bl	801e4c4 <__ieee754_rem_pio2f>
 801cd9a:	f000 0003 	and.w	r0, r0, #3
 801cd9e:	2801      	cmp	r0, #1
 801cda0:	d00a      	beq.n	801cdb8 <sinf+0x54>
 801cda2:	2802      	cmp	r0, #2
 801cda4:	d00f      	beq.n	801cdc6 <sinf+0x62>
 801cda6:	b9c0      	cbnz	r0, 801cdda <sinf+0x76>
 801cda8:	eddd 0a01 	vldr	s1, [sp, #4]
 801cdac:	ed9d 0a00 	vldr	s0, [sp]
 801cdb0:	2001      	movs	r0, #1
 801cdb2:	f000 fd11 	bl	801d7d8 <__kernel_sinf>
 801cdb6:	e7ea      	b.n	801cd8e <sinf+0x2a>
 801cdb8:	eddd 0a01 	vldr	s1, [sp, #4]
 801cdbc:	ed9d 0a00 	vldr	s0, [sp]
 801cdc0:	f000 fcb2 	bl	801d728 <__kernel_cosf>
 801cdc4:	e7e3      	b.n	801cd8e <sinf+0x2a>
 801cdc6:	eddd 0a01 	vldr	s1, [sp, #4]
 801cdca:	ed9d 0a00 	vldr	s0, [sp]
 801cdce:	2001      	movs	r0, #1
 801cdd0:	f000 fd02 	bl	801d7d8 <__kernel_sinf>
 801cdd4:	eeb1 0a40 	vneg.f32	s0, s0
 801cdd8:	e7d9      	b.n	801cd8e <sinf+0x2a>
 801cdda:	eddd 0a01 	vldr	s1, [sp, #4]
 801cdde:	ed9d 0a00 	vldr	s0, [sp]
 801cde2:	f000 fca1 	bl	801d728 <__kernel_cosf>
 801cde6:	e7f5      	b.n	801cdd4 <sinf+0x70>
 801cde8:	3f490fd8 	.word	0x3f490fd8
 801cdec:	00000000 	.word	0x00000000

0801cdf0 <tanf>:
 801cdf0:	ee10 3a10 	vmov	r3, s0
 801cdf4:	b507      	push	{r0, r1, r2, lr}
 801cdf6:	4a12      	ldr	r2, [pc, #72]	@ (801ce40 <tanf+0x50>)
 801cdf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cdfc:	4293      	cmp	r3, r2
 801cdfe:	d807      	bhi.n	801ce10 <tanf+0x20>
 801ce00:	eddf 0a10 	vldr	s1, [pc, #64]	@ 801ce44 <tanf+0x54>
 801ce04:	2001      	movs	r0, #1
 801ce06:	b003      	add	sp, #12
 801ce08:	f85d eb04 	ldr.w	lr, [sp], #4
 801ce0c:	f000 bd2c 	b.w	801d868 <__kernel_tanf>
 801ce10:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ce14:	d304      	bcc.n	801ce20 <tanf+0x30>
 801ce16:	ee30 0a40 	vsub.f32	s0, s0, s0
 801ce1a:	b003      	add	sp, #12
 801ce1c:	f85d fb04 	ldr.w	pc, [sp], #4
 801ce20:	4668      	mov	r0, sp
 801ce22:	f001 fb4f 	bl	801e4c4 <__ieee754_rem_pio2f>
 801ce26:	0040      	lsls	r0, r0, #1
 801ce28:	f000 0002 	and.w	r0, r0, #2
 801ce2c:	eddd 0a01 	vldr	s1, [sp, #4]
 801ce30:	ed9d 0a00 	vldr	s0, [sp]
 801ce34:	f1c0 0001 	rsb	r0, r0, #1
 801ce38:	f000 fd16 	bl	801d868 <__kernel_tanf>
 801ce3c:	e7ed      	b.n	801ce1a <tanf+0x2a>
 801ce3e:	bf00      	nop
 801ce40:	3f490fda 	.word	0x3f490fda
 801ce44:	00000000 	.word	0x00000000

0801ce48 <finitef>:
 801ce48:	ee10 3a10 	vmov	r3, s0
 801ce4c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801ce50:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801ce54:	bfac      	ite	ge
 801ce56:	2000      	movge	r0, #0
 801ce58:	2001      	movlt	r0, #1
 801ce5a:	4770      	bx	lr

0801ce5c <nanf>:
 801ce5c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ce64 <nanf+0x8>
 801ce60:	4770      	bx	lr
 801ce62:	bf00      	nop
 801ce64:	7fc00000 	.word	0x7fc00000

0801ce68 <__ieee754_sqrt>:
 801ce68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce6c:	4a68      	ldr	r2, [pc, #416]	@ (801d010 <__ieee754_sqrt+0x1a8>)
 801ce6e:	ec55 4b10 	vmov	r4, r5, d0
 801ce72:	43aa      	bics	r2, r5
 801ce74:	462b      	mov	r3, r5
 801ce76:	4621      	mov	r1, r4
 801ce78:	d110      	bne.n	801ce9c <__ieee754_sqrt+0x34>
 801ce7a:	4622      	mov	r2, r4
 801ce7c:	4620      	mov	r0, r4
 801ce7e:	4629      	mov	r1, r5
 801ce80:	f7e3 fbe2 	bl	8000648 <__aeabi_dmul>
 801ce84:	4602      	mov	r2, r0
 801ce86:	460b      	mov	r3, r1
 801ce88:	4620      	mov	r0, r4
 801ce8a:	4629      	mov	r1, r5
 801ce8c:	f7e3 fa26 	bl	80002dc <__adddf3>
 801ce90:	4604      	mov	r4, r0
 801ce92:	460d      	mov	r5, r1
 801ce94:	ec45 4b10 	vmov	d0, r4, r5
 801ce98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce9c:	2d00      	cmp	r5, #0
 801ce9e:	dc0e      	bgt.n	801cebe <__ieee754_sqrt+0x56>
 801cea0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801cea4:	4322      	orrs	r2, r4
 801cea6:	d0f5      	beq.n	801ce94 <__ieee754_sqrt+0x2c>
 801cea8:	b19d      	cbz	r5, 801ced2 <__ieee754_sqrt+0x6a>
 801ceaa:	4622      	mov	r2, r4
 801ceac:	4620      	mov	r0, r4
 801ceae:	4629      	mov	r1, r5
 801ceb0:	f7e3 fa12 	bl	80002d8 <__aeabi_dsub>
 801ceb4:	4602      	mov	r2, r0
 801ceb6:	460b      	mov	r3, r1
 801ceb8:	f7e3 fcf0 	bl	800089c <__aeabi_ddiv>
 801cebc:	e7e8      	b.n	801ce90 <__ieee754_sqrt+0x28>
 801cebe:	152a      	asrs	r2, r5, #20
 801cec0:	d115      	bne.n	801ceee <__ieee754_sqrt+0x86>
 801cec2:	2000      	movs	r0, #0
 801cec4:	e009      	b.n	801ceda <__ieee754_sqrt+0x72>
 801cec6:	0acb      	lsrs	r3, r1, #11
 801cec8:	3a15      	subs	r2, #21
 801ceca:	0549      	lsls	r1, r1, #21
 801cecc:	2b00      	cmp	r3, #0
 801cece:	d0fa      	beq.n	801cec6 <__ieee754_sqrt+0x5e>
 801ced0:	e7f7      	b.n	801cec2 <__ieee754_sqrt+0x5a>
 801ced2:	462a      	mov	r2, r5
 801ced4:	e7fa      	b.n	801cecc <__ieee754_sqrt+0x64>
 801ced6:	005b      	lsls	r3, r3, #1
 801ced8:	3001      	adds	r0, #1
 801ceda:	02dc      	lsls	r4, r3, #11
 801cedc:	d5fb      	bpl.n	801ced6 <__ieee754_sqrt+0x6e>
 801cede:	1e44      	subs	r4, r0, #1
 801cee0:	1b12      	subs	r2, r2, r4
 801cee2:	f1c0 0420 	rsb	r4, r0, #32
 801cee6:	fa21 f404 	lsr.w	r4, r1, r4
 801ceea:	4323      	orrs	r3, r4
 801ceec:	4081      	lsls	r1, r0
 801ceee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cef2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801cef6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801cefa:	07d2      	lsls	r2, r2, #31
 801cefc:	bf5c      	itt	pl
 801cefe:	005b      	lslpl	r3, r3, #1
 801cf00:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801cf04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801cf08:	bf58      	it	pl
 801cf0a:	0049      	lslpl	r1, r1, #1
 801cf0c:	2600      	movs	r6, #0
 801cf0e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801cf12:	106d      	asrs	r5, r5, #1
 801cf14:	0049      	lsls	r1, r1, #1
 801cf16:	2016      	movs	r0, #22
 801cf18:	4632      	mov	r2, r6
 801cf1a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801cf1e:	1917      	adds	r7, r2, r4
 801cf20:	429f      	cmp	r7, r3
 801cf22:	bfde      	ittt	le
 801cf24:	193a      	addle	r2, r7, r4
 801cf26:	1bdb      	suble	r3, r3, r7
 801cf28:	1936      	addle	r6, r6, r4
 801cf2a:	0fcf      	lsrs	r7, r1, #31
 801cf2c:	3801      	subs	r0, #1
 801cf2e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801cf32:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801cf36:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801cf3a:	d1f0      	bne.n	801cf1e <__ieee754_sqrt+0xb6>
 801cf3c:	4604      	mov	r4, r0
 801cf3e:	2720      	movs	r7, #32
 801cf40:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801cf44:	429a      	cmp	r2, r3
 801cf46:	eb00 0e0c 	add.w	lr, r0, ip
 801cf4a:	db02      	blt.n	801cf52 <__ieee754_sqrt+0xea>
 801cf4c:	d113      	bne.n	801cf76 <__ieee754_sqrt+0x10e>
 801cf4e:	458e      	cmp	lr, r1
 801cf50:	d811      	bhi.n	801cf76 <__ieee754_sqrt+0x10e>
 801cf52:	f1be 0f00 	cmp.w	lr, #0
 801cf56:	eb0e 000c 	add.w	r0, lr, ip
 801cf5a:	da42      	bge.n	801cfe2 <__ieee754_sqrt+0x17a>
 801cf5c:	2800      	cmp	r0, #0
 801cf5e:	db40      	blt.n	801cfe2 <__ieee754_sqrt+0x17a>
 801cf60:	f102 0801 	add.w	r8, r2, #1
 801cf64:	1a9b      	subs	r3, r3, r2
 801cf66:	458e      	cmp	lr, r1
 801cf68:	bf88      	it	hi
 801cf6a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801cf6e:	eba1 010e 	sub.w	r1, r1, lr
 801cf72:	4464      	add	r4, ip
 801cf74:	4642      	mov	r2, r8
 801cf76:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801cf7a:	3f01      	subs	r7, #1
 801cf7c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801cf80:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801cf84:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801cf88:	d1dc      	bne.n	801cf44 <__ieee754_sqrt+0xdc>
 801cf8a:	4319      	orrs	r1, r3
 801cf8c:	d01b      	beq.n	801cfc6 <__ieee754_sqrt+0x15e>
 801cf8e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801d014 <__ieee754_sqrt+0x1ac>
 801cf92:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801d018 <__ieee754_sqrt+0x1b0>
 801cf96:	e9da 0100 	ldrd	r0, r1, [sl]
 801cf9a:	e9db 2300 	ldrd	r2, r3, [fp]
 801cf9e:	f7e3 f99b 	bl	80002d8 <__aeabi_dsub>
 801cfa2:	e9da 8900 	ldrd	r8, r9, [sl]
 801cfa6:	4602      	mov	r2, r0
 801cfa8:	460b      	mov	r3, r1
 801cfaa:	4640      	mov	r0, r8
 801cfac:	4649      	mov	r1, r9
 801cfae:	f7e3 fdc7 	bl	8000b40 <__aeabi_dcmple>
 801cfb2:	b140      	cbz	r0, 801cfc6 <__ieee754_sqrt+0x15e>
 801cfb4:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801cfb8:	e9da 0100 	ldrd	r0, r1, [sl]
 801cfbc:	e9db 2300 	ldrd	r2, r3, [fp]
 801cfc0:	d111      	bne.n	801cfe6 <__ieee754_sqrt+0x17e>
 801cfc2:	3601      	adds	r6, #1
 801cfc4:	463c      	mov	r4, r7
 801cfc6:	1072      	asrs	r2, r6, #1
 801cfc8:	0863      	lsrs	r3, r4, #1
 801cfca:	07f1      	lsls	r1, r6, #31
 801cfcc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801cfd0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801cfd4:	bf48      	it	mi
 801cfd6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801cfda:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801cfde:	4618      	mov	r0, r3
 801cfe0:	e756      	b.n	801ce90 <__ieee754_sqrt+0x28>
 801cfe2:	4690      	mov	r8, r2
 801cfe4:	e7be      	b.n	801cf64 <__ieee754_sqrt+0xfc>
 801cfe6:	f7e3 f979 	bl	80002dc <__adddf3>
 801cfea:	e9da 8900 	ldrd	r8, r9, [sl]
 801cfee:	4602      	mov	r2, r0
 801cff0:	460b      	mov	r3, r1
 801cff2:	4640      	mov	r0, r8
 801cff4:	4649      	mov	r1, r9
 801cff6:	f7e3 fd99 	bl	8000b2c <__aeabi_dcmplt>
 801cffa:	b120      	cbz	r0, 801d006 <__ieee754_sqrt+0x19e>
 801cffc:	1ca0      	adds	r0, r4, #2
 801cffe:	bf08      	it	eq
 801d000:	3601      	addeq	r6, #1
 801d002:	3402      	adds	r4, #2
 801d004:	e7df      	b.n	801cfc6 <__ieee754_sqrt+0x15e>
 801d006:	1c63      	adds	r3, r4, #1
 801d008:	f023 0401 	bic.w	r4, r3, #1
 801d00c:	e7db      	b.n	801cfc6 <__ieee754_sqrt+0x15e>
 801d00e:	bf00      	nop
 801d010:	7ff00000 	.word	0x7ff00000
 801d014:	200001a0 	.word	0x200001a0
 801d018:	20000198 	.word	0x20000198
 801d01c:	00000000 	.word	0x00000000

0801d020 <ceil>:
 801d020:	ec51 0b10 	vmov	r0, r1, d0
 801d024:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d02c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801d030:	2e13      	cmp	r6, #19
 801d032:	460c      	mov	r4, r1
 801d034:	4605      	mov	r5, r0
 801d036:	4680      	mov	r8, r0
 801d038:	dc2e      	bgt.n	801d098 <ceil+0x78>
 801d03a:	2e00      	cmp	r6, #0
 801d03c:	da11      	bge.n	801d062 <ceil+0x42>
 801d03e:	a332      	add	r3, pc, #200	@ (adr r3, 801d108 <ceil+0xe8>)
 801d040:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d044:	f7e3 f94a 	bl	80002dc <__adddf3>
 801d048:	2200      	movs	r2, #0
 801d04a:	2300      	movs	r3, #0
 801d04c:	f7e3 fd8c 	bl	8000b68 <__aeabi_dcmpgt>
 801d050:	b120      	cbz	r0, 801d05c <ceil+0x3c>
 801d052:	2c00      	cmp	r4, #0
 801d054:	db4f      	blt.n	801d0f6 <ceil+0xd6>
 801d056:	4325      	orrs	r5, r4
 801d058:	d151      	bne.n	801d0fe <ceil+0xde>
 801d05a:	462c      	mov	r4, r5
 801d05c:	4621      	mov	r1, r4
 801d05e:	4628      	mov	r0, r5
 801d060:	e023      	b.n	801d0aa <ceil+0x8a>
 801d062:	4f2b      	ldr	r7, [pc, #172]	@ (801d110 <ceil+0xf0>)
 801d064:	4137      	asrs	r7, r6
 801d066:	ea01 0307 	and.w	r3, r1, r7
 801d06a:	4303      	orrs	r3, r0
 801d06c:	d01d      	beq.n	801d0aa <ceil+0x8a>
 801d06e:	a326      	add	r3, pc, #152	@ (adr r3, 801d108 <ceil+0xe8>)
 801d070:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d074:	f7e3 f932 	bl	80002dc <__adddf3>
 801d078:	2200      	movs	r2, #0
 801d07a:	2300      	movs	r3, #0
 801d07c:	f7e3 fd74 	bl	8000b68 <__aeabi_dcmpgt>
 801d080:	2800      	cmp	r0, #0
 801d082:	d0eb      	beq.n	801d05c <ceil+0x3c>
 801d084:	2c00      	cmp	r4, #0
 801d086:	bfc2      	ittt	gt
 801d088:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 801d08c:	4133      	asrgt	r3, r6
 801d08e:	18e4      	addgt	r4, r4, r3
 801d090:	ea24 0407 	bic.w	r4, r4, r7
 801d094:	2500      	movs	r5, #0
 801d096:	e7e1      	b.n	801d05c <ceil+0x3c>
 801d098:	2e33      	cmp	r6, #51	@ 0x33
 801d09a:	dd0a      	ble.n	801d0b2 <ceil+0x92>
 801d09c:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801d0a0:	d103      	bne.n	801d0aa <ceil+0x8a>
 801d0a2:	4602      	mov	r2, r0
 801d0a4:	460b      	mov	r3, r1
 801d0a6:	f7e3 f919 	bl	80002dc <__adddf3>
 801d0aa:	ec41 0b10 	vmov	d0, r0, r1
 801d0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0b2:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801d0b6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801d0ba:	40df      	lsrs	r7, r3
 801d0bc:	4238      	tst	r0, r7
 801d0be:	d0f4      	beq.n	801d0aa <ceil+0x8a>
 801d0c0:	a311      	add	r3, pc, #68	@ (adr r3, 801d108 <ceil+0xe8>)
 801d0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0c6:	f7e3 f909 	bl	80002dc <__adddf3>
 801d0ca:	2200      	movs	r2, #0
 801d0cc:	2300      	movs	r3, #0
 801d0ce:	f7e3 fd4b 	bl	8000b68 <__aeabi_dcmpgt>
 801d0d2:	2800      	cmp	r0, #0
 801d0d4:	d0c2      	beq.n	801d05c <ceil+0x3c>
 801d0d6:	2c00      	cmp	r4, #0
 801d0d8:	dd0a      	ble.n	801d0f0 <ceil+0xd0>
 801d0da:	2e14      	cmp	r6, #20
 801d0dc:	d101      	bne.n	801d0e2 <ceil+0xc2>
 801d0de:	3401      	adds	r4, #1
 801d0e0:	e006      	b.n	801d0f0 <ceil+0xd0>
 801d0e2:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801d0e6:	2301      	movs	r3, #1
 801d0e8:	40b3      	lsls	r3, r6
 801d0ea:	441d      	add	r5, r3
 801d0ec:	45a8      	cmp	r8, r5
 801d0ee:	d8f6      	bhi.n	801d0de <ceil+0xbe>
 801d0f0:	ea25 0507 	bic.w	r5, r5, r7
 801d0f4:	e7b2      	b.n	801d05c <ceil+0x3c>
 801d0f6:	2500      	movs	r5, #0
 801d0f8:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 801d0fc:	e7ae      	b.n	801d05c <ceil+0x3c>
 801d0fe:	4c05      	ldr	r4, [pc, #20]	@ (801d114 <ceil+0xf4>)
 801d100:	2500      	movs	r5, #0
 801d102:	e7ab      	b.n	801d05c <ceil+0x3c>
 801d104:	f3af 8000 	nop.w
 801d108:	8800759c 	.word	0x8800759c
 801d10c:	7e37e43c 	.word	0x7e37e43c
 801d110:	000fffff 	.word	0x000fffff
 801d114:	3ff00000 	.word	0x3ff00000

0801d118 <floor>:
 801d118:	ec51 0b10 	vmov	r0, r1, d0
 801d11c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d124:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801d128:	2e13      	cmp	r6, #19
 801d12a:	460c      	mov	r4, r1
 801d12c:	4605      	mov	r5, r0
 801d12e:	4680      	mov	r8, r0
 801d130:	dc34      	bgt.n	801d19c <floor+0x84>
 801d132:	2e00      	cmp	r6, #0
 801d134:	da17      	bge.n	801d166 <floor+0x4e>
 801d136:	a332      	add	r3, pc, #200	@ (adr r3, 801d200 <floor+0xe8>)
 801d138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d13c:	f7e3 f8ce 	bl	80002dc <__adddf3>
 801d140:	2200      	movs	r2, #0
 801d142:	2300      	movs	r3, #0
 801d144:	f7e3 fd10 	bl	8000b68 <__aeabi_dcmpgt>
 801d148:	b150      	cbz	r0, 801d160 <floor+0x48>
 801d14a:	2c00      	cmp	r4, #0
 801d14c:	da55      	bge.n	801d1fa <floor+0xe2>
 801d14e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801d152:	432c      	orrs	r4, r5
 801d154:	2500      	movs	r5, #0
 801d156:	42ac      	cmp	r4, r5
 801d158:	4c2b      	ldr	r4, [pc, #172]	@ (801d208 <floor+0xf0>)
 801d15a:	bf08      	it	eq
 801d15c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801d160:	4621      	mov	r1, r4
 801d162:	4628      	mov	r0, r5
 801d164:	e023      	b.n	801d1ae <floor+0x96>
 801d166:	4f29      	ldr	r7, [pc, #164]	@ (801d20c <floor+0xf4>)
 801d168:	4137      	asrs	r7, r6
 801d16a:	ea01 0307 	and.w	r3, r1, r7
 801d16e:	4303      	orrs	r3, r0
 801d170:	d01d      	beq.n	801d1ae <floor+0x96>
 801d172:	a323      	add	r3, pc, #140	@ (adr r3, 801d200 <floor+0xe8>)
 801d174:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d178:	f7e3 f8b0 	bl	80002dc <__adddf3>
 801d17c:	2200      	movs	r2, #0
 801d17e:	2300      	movs	r3, #0
 801d180:	f7e3 fcf2 	bl	8000b68 <__aeabi_dcmpgt>
 801d184:	2800      	cmp	r0, #0
 801d186:	d0eb      	beq.n	801d160 <floor+0x48>
 801d188:	2c00      	cmp	r4, #0
 801d18a:	bfbe      	ittt	lt
 801d18c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801d190:	4133      	asrlt	r3, r6
 801d192:	18e4      	addlt	r4, r4, r3
 801d194:	ea24 0407 	bic.w	r4, r4, r7
 801d198:	2500      	movs	r5, #0
 801d19a:	e7e1      	b.n	801d160 <floor+0x48>
 801d19c:	2e33      	cmp	r6, #51	@ 0x33
 801d19e:	dd0a      	ble.n	801d1b6 <floor+0x9e>
 801d1a0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801d1a4:	d103      	bne.n	801d1ae <floor+0x96>
 801d1a6:	4602      	mov	r2, r0
 801d1a8:	460b      	mov	r3, r1
 801d1aa:	f7e3 f897 	bl	80002dc <__adddf3>
 801d1ae:	ec41 0b10 	vmov	d0, r0, r1
 801d1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d1b6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801d1ba:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801d1be:	40df      	lsrs	r7, r3
 801d1c0:	4207      	tst	r7, r0
 801d1c2:	d0f4      	beq.n	801d1ae <floor+0x96>
 801d1c4:	a30e      	add	r3, pc, #56	@ (adr r3, 801d200 <floor+0xe8>)
 801d1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1ca:	f7e3 f887 	bl	80002dc <__adddf3>
 801d1ce:	2200      	movs	r2, #0
 801d1d0:	2300      	movs	r3, #0
 801d1d2:	f7e3 fcc9 	bl	8000b68 <__aeabi_dcmpgt>
 801d1d6:	2800      	cmp	r0, #0
 801d1d8:	d0c2      	beq.n	801d160 <floor+0x48>
 801d1da:	2c00      	cmp	r4, #0
 801d1dc:	da0a      	bge.n	801d1f4 <floor+0xdc>
 801d1de:	2e14      	cmp	r6, #20
 801d1e0:	d101      	bne.n	801d1e6 <floor+0xce>
 801d1e2:	3401      	adds	r4, #1
 801d1e4:	e006      	b.n	801d1f4 <floor+0xdc>
 801d1e6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801d1ea:	2301      	movs	r3, #1
 801d1ec:	40b3      	lsls	r3, r6
 801d1ee:	441d      	add	r5, r3
 801d1f0:	4545      	cmp	r5, r8
 801d1f2:	d3f6      	bcc.n	801d1e2 <floor+0xca>
 801d1f4:	ea25 0507 	bic.w	r5, r5, r7
 801d1f8:	e7b2      	b.n	801d160 <floor+0x48>
 801d1fa:	2500      	movs	r5, #0
 801d1fc:	462c      	mov	r4, r5
 801d1fe:	e7af      	b.n	801d160 <floor+0x48>
 801d200:	8800759c 	.word	0x8800759c
 801d204:	7e37e43c 	.word	0x7e37e43c
 801d208:	bff00000 	.word	0xbff00000
 801d20c:	000fffff 	.word	0x000fffff

0801d210 <roundf>:
 801d210:	ee10 0a10 	vmov	r0, s0
 801d214:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801d218:	3a7f      	subs	r2, #127	@ 0x7f
 801d21a:	2a16      	cmp	r2, #22
 801d21c:	dc15      	bgt.n	801d24a <roundf+0x3a>
 801d21e:	2a00      	cmp	r2, #0
 801d220:	da08      	bge.n	801d234 <roundf+0x24>
 801d222:	3201      	adds	r2, #1
 801d224:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 801d228:	d101      	bne.n	801d22e <roundf+0x1e>
 801d22a:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 801d22e:	ee00 3a10 	vmov	s0, r3
 801d232:	4770      	bx	lr
 801d234:	4907      	ldr	r1, [pc, #28]	@ (801d254 <roundf+0x44>)
 801d236:	4111      	asrs	r1, r2
 801d238:	4201      	tst	r1, r0
 801d23a:	d0fa      	beq.n	801d232 <roundf+0x22>
 801d23c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801d240:	4113      	asrs	r3, r2
 801d242:	4403      	add	r3, r0
 801d244:	ea23 0301 	bic.w	r3, r3, r1
 801d248:	e7f1      	b.n	801d22e <roundf+0x1e>
 801d24a:	2a80      	cmp	r2, #128	@ 0x80
 801d24c:	d1f1      	bne.n	801d232 <roundf+0x22>
 801d24e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d252:	4770      	bx	lr
 801d254:	007fffff 	.word	0x007fffff

0801d258 <__ieee754_atan2>:
 801d258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d25c:	ec57 6b11 	vmov	r6, r7, d1
 801d260:	4273      	negs	r3, r6
 801d262:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801d3e0 <__ieee754_atan2+0x188>
 801d266:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801d26a:	4333      	orrs	r3, r6
 801d26c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801d270:	4543      	cmp	r3, r8
 801d272:	ec51 0b10 	vmov	r0, r1, d0
 801d276:	4635      	mov	r5, r6
 801d278:	d809      	bhi.n	801d28e <__ieee754_atan2+0x36>
 801d27a:	4244      	negs	r4, r0
 801d27c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801d280:	4304      	orrs	r4, r0
 801d282:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801d286:	4544      	cmp	r4, r8
 801d288:	468e      	mov	lr, r1
 801d28a:	4681      	mov	r9, r0
 801d28c:	d907      	bls.n	801d29e <__ieee754_atan2+0x46>
 801d28e:	4632      	mov	r2, r6
 801d290:	463b      	mov	r3, r7
 801d292:	f7e3 f823 	bl	80002dc <__adddf3>
 801d296:	ec41 0b10 	vmov	d0, r0, r1
 801d29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d29e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801d2a2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801d2a6:	4334      	orrs	r4, r6
 801d2a8:	d103      	bne.n	801d2b2 <__ieee754_atan2+0x5a>
 801d2aa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d2ae:	f000 b89b 	b.w	801d3e8 <atan>
 801d2b2:	17bc      	asrs	r4, r7, #30
 801d2b4:	f004 0402 	and.w	r4, r4, #2
 801d2b8:	ea53 0909 	orrs.w	r9, r3, r9
 801d2bc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801d2c0:	d107      	bne.n	801d2d2 <__ieee754_atan2+0x7a>
 801d2c2:	2c02      	cmp	r4, #2
 801d2c4:	d05f      	beq.n	801d386 <__ieee754_atan2+0x12e>
 801d2c6:	2c03      	cmp	r4, #3
 801d2c8:	d1e5      	bne.n	801d296 <__ieee754_atan2+0x3e>
 801d2ca:	a141      	add	r1, pc, #260	@ (adr r1, 801d3d0 <__ieee754_atan2+0x178>)
 801d2cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d2d0:	e7e1      	b.n	801d296 <__ieee754_atan2+0x3e>
 801d2d2:	4315      	orrs	r5, r2
 801d2d4:	d106      	bne.n	801d2e4 <__ieee754_atan2+0x8c>
 801d2d6:	f1be 0f00 	cmp.w	lr, #0
 801d2da:	da5f      	bge.n	801d39c <__ieee754_atan2+0x144>
 801d2dc:	a13e      	add	r1, pc, #248	@ (adr r1, 801d3d8 <__ieee754_atan2+0x180>)
 801d2de:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d2e2:	e7d8      	b.n	801d296 <__ieee754_atan2+0x3e>
 801d2e4:	4542      	cmp	r2, r8
 801d2e6:	d10f      	bne.n	801d308 <__ieee754_atan2+0xb0>
 801d2e8:	4293      	cmp	r3, r2
 801d2ea:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801d2ee:	d107      	bne.n	801d300 <__ieee754_atan2+0xa8>
 801d2f0:	2c02      	cmp	r4, #2
 801d2f2:	d84c      	bhi.n	801d38e <__ieee754_atan2+0x136>
 801d2f4:	4b34      	ldr	r3, [pc, #208]	@ (801d3c8 <__ieee754_atan2+0x170>)
 801d2f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d2fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d2fe:	e7ca      	b.n	801d296 <__ieee754_atan2+0x3e>
 801d300:	2c02      	cmp	r4, #2
 801d302:	d848      	bhi.n	801d396 <__ieee754_atan2+0x13e>
 801d304:	4b31      	ldr	r3, [pc, #196]	@ (801d3cc <__ieee754_atan2+0x174>)
 801d306:	e7f6      	b.n	801d2f6 <__ieee754_atan2+0x9e>
 801d308:	4543      	cmp	r3, r8
 801d30a:	d0e4      	beq.n	801d2d6 <__ieee754_atan2+0x7e>
 801d30c:	1a9b      	subs	r3, r3, r2
 801d30e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801d312:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d316:	da1e      	bge.n	801d356 <__ieee754_atan2+0xfe>
 801d318:	2f00      	cmp	r7, #0
 801d31a:	da01      	bge.n	801d320 <__ieee754_atan2+0xc8>
 801d31c:	323c      	adds	r2, #60	@ 0x3c
 801d31e:	db1e      	blt.n	801d35e <__ieee754_atan2+0x106>
 801d320:	4632      	mov	r2, r6
 801d322:	463b      	mov	r3, r7
 801d324:	f7e3 faba 	bl	800089c <__aeabi_ddiv>
 801d328:	ec41 0b10 	vmov	d0, r0, r1
 801d32c:	f000 f9f4 	bl	801d718 <fabs>
 801d330:	f000 f85a 	bl	801d3e8 <atan>
 801d334:	ec51 0b10 	vmov	r0, r1, d0
 801d338:	2c01      	cmp	r4, #1
 801d33a:	d013      	beq.n	801d364 <__ieee754_atan2+0x10c>
 801d33c:	2c02      	cmp	r4, #2
 801d33e:	d015      	beq.n	801d36c <__ieee754_atan2+0x114>
 801d340:	2c00      	cmp	r4, #0
 801d342:	d0a8      	beq.n	801d296 <__ieee754_atan2+0x3e>
 801d344:	a318      	add	r3, pc, #96	@ (adr r3, 801d3a8 <__ieee754_atan2+0x150>)
 801d346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d34a:	f7e2 ffc5 	bl	80002d8 <__aeabi_dsub>
 801d34e:	a318      	add	r3, pc, #96	@ (adr r3, 801d3b0 <__ieee754_atan2+0x158>)
 801d350:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d354:	e014      	b.n	801d380 <__ieee754_atan2+0x128>
 801d356:	a118      	add	r1, pc, #96	@ (adr r1, 801d3b8 <__ieee754_atan2+0x160>)
 801d358:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d35c:	e7ec      	b.n	801d338 <__ieee754_atan2+0xe0>
 801d35e:	2000      	movs	r0, #0
 801d360:	2100      	movs	r1, #0
 801d362:	e7e9      	b.n	801d338 <__ieee754_atan2+0xe0>
 801d364:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d368:	4619      	mov	r1, r3
 801d36a:	e794      	b.n	801d296 <__ieee754_atan2+0x3e>
 801d36c:	a30e      	add	r3, pc, #56	@ (adr r3, 801d3a8 <__ieee754_atan2+0x150>)
 801d36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d372:	f7e2 ffb1 	bl	80002d8 <__aeabi_dsub>
 801d376:	4602      	mov	r2, r0
 801d378:	460b      	mov	r3, r1
 801d37a:	a10d      	add	r1, pc, #52	@ (adr r1, 801d3b0 <__ieee754_atan2+0x158>)
 801d37c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d380:	f7e2 ffaa 	bl	80002d8 <__aeabi_dsub>
 801d384:	e787      	b.n	801d296 <__ieee754_atan2+0x3e>
 801d386:	a10a      	add	r1, pc, #40	@ (adr r1, 801d3b0 <__ieee754_atan2+0x158>)
 801d388:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d38c:	e783      	b.n	801d296 <__ieee754_atan2+0x3e>
 801d38e:	a10c      	add	r1, pc, #48	@ (adr r1, 801d3c0 <__ieee754_atan2+0x168>)
 801d390:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d394:	e77f      	b.n	801d296 <__ieee754_atan2+0x3e>
 801d396:	2000      	movs	r0, #0
 801d398:	2100      	movs	r1, #0
 801d39a:	e77c      	b.n	801d296 <__ieee754_atan2+0x3e>
 801d39c:	a106      	add	r1, pc, #24	@ (adr r1, 801d3b8 <__ieee754_atan2+0x160>)
 801d39e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d3a2:	e778      	b.n	801d296 <__ieee754_atan2+0x3e>
 801d3a4:	f3af 8000 	nop.w
 801d3a8:	33145c07 	.word	0x33145c07
 801d3ac:	3ca1a626 	.word	0x3ca1a626
 801d3b0:	54442d18 	.word	0x54442d18
 801d3b4:	400921fb 	.word	0x400921fb
 801d3b8:	54442d18 	.word	0x54442d18
 801d3bc:	3ff921fb 	.word	0x3ff921fb
 801d3c0:	54442d18 	.word	0x54442d18
 801d3c4:	3fe921fb 	.word	0x3fe921fb
 801d3c8:	08022680 	.word	0x08022680
 801d3cc:	08022668 	.word	0x08022668
 801d3d0:	54442d18 	.word	0x54442d18
 801d3d4:	c00921fb 	.word	0xc00921fb
 801d3d8:	54442d18 	.word	0x54442d18
 801d3dc:	bff921fb 	.word	0xbff921fb
 801d3e0:	7ff00000 	.word	0x7ff00000
 801d3e4:	00000000 	.word	0x00000000

0801d3e8 <atan>:
 801d3e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3ec:	ec55 4b10 	vmov	r4, r5, d0
 801d3f0:	4bbf      	ldr	r3, [pc, #764]	@ (801d6f0 <atan+0x308>)
 801d3f2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801d3f6:	429e      	cmp	r6, r3
 801d3f8:	46ab      	mov	fp, r5
 801d3fa:	d918      	bls.n	801d42e <atan+0x46>
 801d3fc:	4bbd      	ldr	r3, [pc, #756]	@ (801d6f4 <atan+0x30c>)
 801d3fe:	429e      	cmp	r6, r3
 801d400:	d801      	bhi.n	801d406 <atan+0x1e>
 801d402:	d109      	bne.n	801d418 <atan+0x30>
 801d404:	b144      	cbz	r4, 801d418 <atan+0x30>
 801d406:	4622      	mov	r2, r4
 801d408:	462b      	mov	r3, r5
 801d40a:	4620      	mov	r0, r4
 801d40c:	4629      	mov	r1, r5
 801d40e:	f7e2 ff65 	bl	80002dc <__adddf3>
 801d412:	4604      	mov	r4, r0
 801d414:	460d      	mov	r5, r1
 801d416:	e006      	b.n	801d426 <atan+0x3e>
 801d418:	f1bb 0f00 	cmp.w	fp, #0
 801d41c:	f340 812b 	ble.w	801d676 <atan+0x28e>
 801d420:	a597      	add	r5, pc, #604	@ (adr r5, 801d680 <atan+0x298>)
 801d422:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d426:	ec45 4b10 	vmov	d0, r4, r5
 801d42a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d42e:	4bb2      	ldr	r3, [pc, #712]	@ (801d6f8 <atan+0x310>)
 801d430:	429e      	cmp	r6, r3
 801d432:	d813      	bhi.n	801d45c <atan+0x74>
 801d434:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801d438:	429e      	cmp	r6, r3
 801d43a:	d80c      	bhi.n	801d456 <atan+0x6e>
 801d43c:	a392      	add	r3, pc, #584	@ (adr r3, 801d688 <atan+0x2a0>)
 801d43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d442:	4620      	mov	r0, r4
 801d444:	4629      	mov	r1, r5
 801d446:	f7e2 ff49 	bl	80002dc <__adddf3>
 801d44a:	4bac      	ldr	r3, [pc, #688]	@ (801d6fc <atan+0x314>)
 801d44c:	2200      	movs	r2, #0
 801d44e:	f7e3 fb8b 	bl	8000b68 <__aeabi_dcmpgt>
 801d452:	2800      	cmp	r0, #0
 801d454:	d1e7      	bne.n	801d426 <atan+0x3e>
 801d456:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801d45a:	e029      	b.n	801d4b0 <atan+0xc8>
 801d45c:	f000 f95c 	bl	801d718 <fabs>
 801d460:	4ba7      	ldr	r3, [pc, #668]	@ (801d700 <atan+0x318>)
 801d462:	429e      	cmp	r6, r3
 801d464:	ec55 4b10 	vmov	r4, r5, d0
 801d468:	f200 80bc 	bhi.w	801d5e4 <atan+0x1fc>
 801d46c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801d470:	429e      	cmp	r6, r3
 801d472:	f200 809e 	bhi.w	801d5b2 <atan+0x1ca>
 801d476:	4622      	mov	r2, r4
 801d478:	462b      	mov	r3, r5
 801d47a:	4620      	mov	r0, r4
 801d47c:	4629      	mov	r1, r5
 801d47e:	f7e2 ff2d 	bl	80002dc <__adddf3>
 801d482:	4b9e      	ldr	r3, [pc, #632]	@ (801d6fc <atan+0x314>)
 801d484:	2200      	movs	r2, #0
 801d486:	f7e2 ff27 	bl	80002d8 <__aeabi_dsub>
 801d48a:	2200      	movs	r2, #0
 801d48c:	4606      	mov	r6, r0
 801d48e:	460f      	mov	r7, r1
 801d490:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801d494:	4620      	mov	r0, r4
 801d496:	4629      	mov	r1, r5
 801d498:	f7e2 ff20 	bl	80002dc <__adddf3>
 801d49c:	4602      	mov	r2, r0
 801d49e:	460b      	mov	r3, r1
 801d4a0:	4630      	mov	r0, r6
 801d4a2:	4639      	mov	r1, r7
 801d4a4:	f7e3 f9fa 	bl	800089c <__aeabi_ddiv>
 801d4a8:	f04f 0a00 	mov.w	sl, #0
 801d4ac:	4604      	mov	r4, r0
 801d4ae:	460d      	mov	r5, r1
 801d4b0:	4622      	mov	r2, r4
 801d4b2:	462b      	mov	r3, r5
 801d4b4:	4620      	mov	r0, r4
 801d4b6:	4629      	mov	r1, r5
 801d4b8:	f7e3 f8c6 	bl	8000648 <__aeabi_dmul>
 801d4bc:	4602      	mov	r2, r0
 801d4be:	460b      	mov	r3, r1
 801d4c0:	4680      	mov	r8, r0
 801d4c2:	4689      	mov	r9, r1
 801d4c4:	f7e3 f8c0 	bl	8000648 <__aeabi_dmul>
 801d4c8:	a371      	add	r3, pc, #452	@ (adr r3, 801d690 <atan+0x2a8>)
 801d4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4ce:	4606      	mov	r6, r0
 801d4d0:	460f      	mov	r7, r1
 801d4d2:	f7e3 f8b9 	bl	8000648 <__aeabi_dmul>
 801d4d6:	a370      	add	r3, pc, #448	@ (adr r3, 801d698 <atan+0x2b0>)
 801d4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4dc:	f7e2 fefe 	bl	80002dc <__adddf3>
 801d4e0:	4632      	mov	r2, r6
 801d4e2:	463b      	mov	r3, r7
 801d4e4:	f7e3 f8b0 	bl	8000648 <__aeabi_dmul>
 801d4e8:	a36d      	add	r3, pc, #436	@ (adr r3, 801d6a0 <atan+0x2b8>)
 801d4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4ee:	f7e2 fef5 	bl	80002dc <__adddf3>
 801d4f2:	4632      	mov	r2, r6
 801d4f4:	463b      	mov	r3, r7
 801d4f6:	f7e3 f8a7 	bl	8000648 <__aeabi_dmul>
 801d4fa:	a36b      	add	r3, pc, #428	@ (adr r3, 801d6a8 <atan+0x2c0>)
 801d4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d500:	f7e2 feec 	bl	80002dc <__adddf3>
 801d504:	4632      	mov	r2, r6
 801d506:	463b      	mov	r3, r7
 801d508:	f7e3 f89e 	bl	8000648 <__aeabi_dmul>
 801d50c:	a368      	add	r3, pc, #416	@ (adr r3, 801d6b0 <atan+0x2c8>)
 801d50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d512:	f7e2 fee3 	bl	80002dc <__adddf3>
 801d516:	4632      	mov	r2, r6
 801d518:	463b      	mov	r3, r7
 801d51a:	f7e3 f895 	bl	8000648 <__aeabi_dmul>
 801d51e:	a366      	add	r3, pc, #408	@ (adr r3, 801d6b8 <atan+0x2d0>)
 801d520:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d524:	f7e2 feda 	bl	80002dc <__adddf3>
 801d528:	4642      	mov	r2, r8
 801d52a:	464b      	mov	r3, r9
 801d52c:	f7e3 f88c 	bl	8000648 <__aeabi_dmul>
 801d530:	a363      	add	r3, pc, #396	@ (adr r3, 801d6c0 <atan+0x2d8>)
 801d532:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d536:	4680      	mov	r8, r0
 801d538:	4689      	mov	r9, r1
 801d53a:	4630      	mov	r0, r6
 801d53c:	4639      	mov	r1, r7
 801d53e:	f7e3 f883 	bl	8000648 <__aeabi_dmul>
 801d542:	a361      	add	r3, pc, #388	@ (adr r3, 801d6c8 <atan+0x2e0>)
 801d544:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d548:	f7e2 fec6 	bl	80002d8 <__aeabi_dsub>
 801d54c:	4632      	mov	r2, r6
 801d54e:	463b      	mov	r3, r7
 801d550:	f7e3 f87a 	bl	8000648 <__aeabi_dmul>
 801d554:	a35e      	add	r3, pc, #376	@ (adr r3, 801d6d0 <atan+0x2e8>)
 801d556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d55a:	f7e2 febd 	bl	80002d8 <__aeabi_dsub>
 801d55e:	4632      	mov	r2, r6
 801d560:	463b      	mov	r3, r7
 801d562:	f7e3 f871 	bl	8000648 <__aeabi_dmul>
 801d566:	a35c      	add	r3, pc, #368	@ (adr r3, 801d6d8 <atan+0x2f0>)
 801d568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d56c:	f7e2 feb4 	bl	80002d8 <__aeabi_dsub>
 801d570:	4632      	mov	r2, r6
 801d572:	463b      	mov	r3, r7
 801d574:	f7e3 f868 	bl	8000648 <__aeabi_dmul>
 801d578:	a359      	add	r3, pc, #356	@ (adr r3, 801d6e0 <atan+0x2f8>)
 801d57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d57e:	f7e2 feab 	bl	80002d8 <__aeabi_dsub>
 801d582:	4632      	mov	r2, r6
 801d584:	463b      	mov	r3, r7
 801d586:	f7e3 f85f 	bl	8000648 <__aeabi_dmul>
 801d58a:	4602      	mov	r2, r0
 801d58c:	460b      	mov	r3, r1
 801d58e:	4640      	mov	r0, r8
 801d590:	4649      	mov	r1, r9
 801d592:	f7e2 fea3 	bl	80002dc <__adddf3>
 801d596:	4622      	mov	r2, r4
 801d598:	462b      	mov	r3, r5
 801d59a:	f7e3 f855 	bl	8000648 <__aeabi_dmul>
 801d59e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801d5a2:	4602      	mov	r2, r0
 801d5a4:	460b      	mov	r3, r1
 801d5a6:	d148      	bne.n	801d63a <atan+0x252>
 801d5a8:	4620      	mov	r0, r4
 801d5aa:	4629      	mov	r1, r5
 801d5ac:	f7e2 fe94 	bl	80002d8 <__aeabi_dsub>
 801d5b0:	e72f      	b.n	801d412 <atan+0x2a>
 801d5b2:	4b52      	ldr	r3, [pc, #328]	@ (801d6fc <atan+0x314>)
 801d5b4:	2200      	movs	r2, #0
 801d5b6:	4620      	mov	r0, r4
 801d5b8:	4629      	mov	r1, r5
 801d5ba:	f7e2 fe8d 	bl	80002d8 <__aeabi_dsub>
 801d5be:	4b4f      	ldr	r3, [pc, #316]	@ (801d6fc <atan+0x314>)
 801d5c0:	4606      	mov	r6, r0
 801d5c2:	460f      	mov	r7, r1
 801d5c4:	2200      	movs	r2, #0
 801d5c6:	4620      	mov	r0, r4
 801d5c8:	4629      	mov	r1, r5
 801d5ca:	f7e2 fe87 	bl	80002dc <__adddf3>
 801d5ce:	4602      	mov	r2, r0
 801d5d0:	460b      	mov	r3, r1
 801d5d2:	4630      	mov	r0, r6
 801d5d4:	4639      	mov	r1, r7
 801d5d6:	f7e3 f961 	bl	800089c <__aeabi_ddiv>
 801d5da:	f04f 0a01 	mov.w	sl, #1
 801d5de:	4604      	mov	r4, r0
 801d5e0:	460d      	mov	r5, r1
 801d5e2:	e765      	b.n	801d4b0 <atan+0xc8>
 801d5e4:	4b47      	ldr	r3, [pc, #284]	@ (801d704 <atan+0x31c>)
 801d5e6:	429e      	cmp	r6, r3
 801d5e8:	d21c      	bcs.n	801d624 <atan+0x23c>
 801d5ea:	4b47      	ldr	r3, [pc, #284]	@ (801d708 <atan+0x320>)
 801d5ec:	2200      	movs	r2, #0
 801d5ee:	4620      	mov	r0, r4
 801d5f0:	4629      	mov	r1, r5
 801d5f2:	f7e2 fe71 	bl	80002d8 <__aeabi_dsub>
 801d5f6:	4b44      	ldr	r3, [pc, #272]	@ (801d708 <atan+0x320>)
 801d5f8:	4606      	mov	r6, r0
 801d5fa:	460f      	mov	r7, r1
 801d5fc:	2200      	movs	r2, #0
 801d5fe:	4620      	mov	r0, r4
 801d600:	4629      	mov	r1, r5
 801d602:	f7e3 f821 	bl	8000648 <__aeabi_dmul>
 801d606:	4b3d      	ldr	r3, [pc, #244]	@ (801d6fc <atan+0x314>)
 801d608:	2200      	movs	r2, #0
 801d60a:	f7e2 fe67 	bl	80002dc <__adddf3>
 801d60e:	4602      	mov	r2, r0
 801d610:	460b      	mov	r3, r1
 801d612:	4630      	mov	r0, r6
 801d614:	4639      	mov	r1, r7
 801d616:	f7e3 f941 	bl	800089c <__aeabi_ddiv>
 801d61a:	f04f 0a02 	mov.w	sl, #2
 801d61e:	4604      	mov	r4, r0
 801d620:	460d      	mov	r5, r1
 801d622:	e745      	b.n	801d4b0 <atan+0xc8>
 801d624:	4622      	mov	r2, r4
 801d626:	462b      	mov	r3, r5
 801d628:	4938      	ldr	r1, [pc, #224]	@ (801d70c <atan+0x324>)
 801d62a:	2000      	movs	r0, #0
 801d62c:	f7e3 f936 	bl	800089c <__aeabi_ddiv>
 801d630:	f04f 0a03 	mov.w	sl, #3
 801d634:	4604      	mov	r4, r0
 801d636:	460d      	mov	r5, r1
 801d638:	e73a      	b.n	801d4b0 <atan+0xc8>
 801d63a:	4b35      	ldr	r3, [pc, #212]	@ (801d710 <atan+0x328>)
 801d63c:	4e35      	ldr	r6, [pc, #212]	@ (801d714 <atan+0x32c>)
 801d63e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d642:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d646:	f7e2 fe47 	bl	80002d8 <__aeabi_dsub>
 801d64a:	4622      	mov	r2, r4
 801d64c:	462b      	mov	r3, r5
 801d64e:	f7e2 fe43 	bl	80002d8 <__aeabi_dsub>
 801d652:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801d656:	4602      	mov	r2, r0
 801d658:	460b      	mov	r3, r1
 801d65a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801d65e:	f7e2 fe3b 	bl	80002d8 <__aeabi_dsub>
 801d662:	f1bb 0f00 	cmp.w	fp, #0
 801d666:	4604      	mov	r4, r0
 801d668:	460d      	mov	r5, r1
 801d66a:	f6bf aedc 	bge.w	801d426 <atan+0x3e>
 801d66e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d672:	461d      	mov	r5, r3
 801d674:	e6d7      	b.n	801d426 <atan+0x3e>
 801d676:	a51c      	add	r5, pc, #112	@ (adr r5, 801d6e8 <atan+0x300>)
 801d678:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d67c:	e6d3      	b.n	801d426 <atan+0x3e>
 801d67e:	bf00      	nop
 801d680:	54442d18 	.word	0x54442d18
 801d684:	3ff921fb 	.word	0x3ff921fb
 801d688:	8800759c 	.word	0x8800759c
 801d68c:	7e37e43c 	.word	0x7e37e43c
 801d690:	e322da11 	.word	0xe322da11
 801d694:	3f90ad3a 	.word	0x3f90ad3a
 801d698:	24760deb 	.word	0x24760deb
 801d69c:	3fa97b4b 	.word	0x3fa97b4b
 801d6a0:	a0d03d51 	.word	0xa0d03d51
 801d6a4:	3fb10d66 	.word	0x3fb10d66
 801d6a8:	c54c206e 	.word	0xc54c206e
 801d6ac:	3fb745cd 	.word	0x3fb745cd
 801d6b0:	920083ff 	.word	0x920083ff
 801d6b4:	3fc24924 	.word	0x3fc24924
 801d6b8:	5555550d 	.word	0x5555550d
 801d6bc:	3fd55555 	.word	0x3fd55555
 801d6c0:	2c6a6c2f 	.word	0x2c6a6c2f
 801d6c4:	bfa2b444 	.word	0xbfa2b444
 801d6c8:	52defd9a 	.word	0x52defd9a
 801d6cc:	3fadde2d 	.word	0x3fadde2d
 801d6d0:	af749a6d 	.word	0xaf749a6d
 801d6d4:	3fb3b0f2 	.word	0x3fb3b0f2
 801d6d8:	fe231671 	.word	0xfe231671
 801d6dc:	3fbc71c6 	.word	0x3fbc71c6
 801d6e0:	9998ebc4 	.word	0x9998ebc4
 801d6e4:	3fc99999 	.word	0x3fc99999
 801d6e8:	54442d18 	.word	0x54442d18
 801d6ec:	bff921fb 	.word	0xbff921fb
 801d6f0:	440fffff 	.word	0x440fffff
 801d6f4:	7ff00000 	.word	0x7ff00000
 801d6f8:	3fdbffff 	.word	0x3fdbffff
 801d6fc:	3ff00000 	.word	0x3ff00000
 801d700:	3ff2ffff 	.word	0x3ff2ffff
 801d704:	40038000 	.word	0x40038000
 801d708:	3ff80000 	.word	0x3ff80000
 801d70c:	bff00000 	.word	0xbff00000
 801d710:	08022698 	.word	0x08022698
 801d714:	080226b8 	.word	0x080226b8

0801d718 <fabs>:
 801d718:	ec51 0b10 	vmov	r0, r1, d0
 801d71c:	4602      	mov	r2, r0
 801d71e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801d722:	ec43 2b10 	vmov	d0, r2, r3
 801d726:	4770      	bx	lr

0801d728 <__kernel_cosf>:
 801d728:	ee10 3a10 	vmov	r3, s0
 801d72c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d730:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801d734:	eef0 6a40 	vmov.f32	s13, s0
 801d738:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801d73c:	d204      	bcs.n	801d748 <__kernel_cosf+0x20>
 801d73e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801d742:	ee17 2a90 	vmov	r2, s15
 801d746:	b342      	cbz	r2, 801d79a <__kernel_cosf+0x72>
 801d748:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801d74c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801d7b8 <__kernel_cosf+0x90>
 801d750:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801d7bc <__kernel_cosf+0x94>
 801d754:	4a1a      	ldr	r2, [pc, #104]	@ (801d7c0 <__kernel_cosf+0x98>)
 801d756:	eea7 6a27 	vfma.f32	s12, s14, s15
 801d75a:	4293      	cmp	r3, r2
 801d75c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801d7c4 <__kernel_cosf+0x9c>
 801d760:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d764:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801d7c8 <__kernel_cosf+0xa0>
 801d768:	eea7 6a87 	vfma.f32	s12, s15, s14
 801d76c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801d7cc <__kernel_cosf+0xa4>
 801d770:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d774:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801d7d0 <__kernel_cosf+0xa8>
 801d778:	eea7 6a87 	vfma.f32	s12, s15, s14
 801d77c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801d780:	ee26 6a07 	vmul.f32	s12, s12, s14
 801d784:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801d788:	eee7 0a06 	vfma.f32	s1, s14, s12
 801d78c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d790:	d804      	bhi.n	801d79c <__kernel_cosf+0x74>
 801d792:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801d796:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d79a:	4770      	bx	lr
 801d79c:	4a0d      	ldr	r2, [pc, #52]	@ (801d7d4 <__kernel_cosf+0xac>)
 801d79e:	4293      	cmp	r3, r2
 801d7a0:	bf9a      	itte	ls
 801d7a2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801d7a6:	ee07 3a10 	vmovls	s14, r3
 801d7aa:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801d7ae:	ee30 0a47 	vsub.f32	s0, s0, s14
 801d7b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d7b6:	e7ec      	b.n	801d792 <__kernel_cosf+0x6a>
 801d7b8:	ad47d74e 	.word	0xad47d74e
 801d7bc:	310f74f6 	.word	0x310f74f6
 801d7c0:	3e999999 	.word	0x3e999999
 801d7c4:	b493f27c 	.word	0xb493f27c
 801d7c8:	37d00d01 	.word	0x37d00d01
 801d7cc:	bab60b61 	.word	0xbab60b61
 801d7d0:	3d2aaaab 	.word	0x3d2aaaab
 801d7d4:	3f480000 	.word	0x3f480000

0801d7d8 <__kernel_sinf>:
 801d7d8:	ee10 3a10 	vmov	r3, s0
 801d7dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d7e0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801d7e4:	d204      	bcs.n	801d7f0 <__kernel_sinf+0x18>
 801d7e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801d7ea:	ee17 3a90 	vmov	r3, s15
 801d7ee:	b35b      	cbz	r3, 801d848 <__kernel_sinf+0x70>
 801d7f0:	ee20 7a00 	vmul.f32	s14, s0, s0
 801d7f4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801d84c <__kernel_sinf+0x74>
 801d7f8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801d850 <__kernel_sinf+0x78>
 801d7fc:	eea7 6a27 	vfma.f32	s12, s14, s15
 801d800:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801d854 <__kernel_sinf+0x7c>
 801d804:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d808:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801d858 <__kernel_sinf+0x80>
 801d80c:	eea7 6a87 	vfma.f32	s12, s15, s14
 801d810:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801d85c <__kernel_sinf+0x84>
 801d814:	ee60 6a07 	vmul.f32	s13, s0, s14
 801d818:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d81c:	b930      	cbnz	r0, 801d82c <__kernel_sinf+0x54>
 801d81e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801d860 <__kernel_sinf+0x88>
 801d822:	eea7 6a27 	vfma.f32	s12, s14, s15
 801d826:	eea6 0a26 	vfma.f32	s0, s12, s13
 801d82a:	4770      	bx	lr
 801d82c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801d830:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801d834:	eee0 7a86 	vfma.f32	s15, s1, s12
 801d838:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801d83c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801d864 <__kernel_sinf+0x8c>
 801d840:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801d844:	ee30 0a60 	vsub.f32	s0, s0, s1
 801d848:	4770      	bx	lr
 801d84a:	bf00      	nop
 801d84c:	2f2ec9d3 	.word	0x2f2ec9d3
 801d850:	b2d72f34 	.word	0xb2d72f34
 801d854:	3638ef1b 	.word	0x3638ef1b
 801d858:	b9500d01 	.word	0xb9500d01
 801d85c:	3c088889 	.word	0x3c088889
 801d860:	be2aaaab 	.word	0xbe2aaaab
 801d864:	3e2aaaab 	.word	0x3e2aaaab

0801d868 <__kernel_tanf>:
 801d868:	b508      	push	{r3, lr}
 801d86a:	ee10 3a10 	vmov	r3, s0
 801d86e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801d872:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 801d876:	eef0 7a40 	vmov.f32	s15, s0
 801d87a:	d217      	bcs.n	801d8ac <__kernel_tanf+0x44>
 801d87c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801d880:	ee17 1a10 	vmov	r1, s14
 801d884:	bb41      	cbnz	r1, 801d8d8 <__kernel_tanf+0x70>
 801d886:	1c43      	adds	r3, r0, #1
 801d888:	4313      	orrs	r3, r2
 801d88a:	d108      	bne.n	801d89e <__kernel_tanf+0x36>
 801d88c:	f7ff fa62 	bl	801cd54 <fabsf>
 801d890:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d894:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d898:	eeb0 0a67 	vmov.f32	s0, s15
 801d89c:	bd08      	pop	{r3, pc}
 801d89e:	2801      	cmp	r0, #1
 801d8a0:	d0fa      	beq.n	801d898 <__kernel_tanf+0x30>
 801d8a2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801d8a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d8aa:	e7f5      	b.n	801d898 <__kernel_tanf+0x30>
 801d8ac:	494c      	ldr	r1, [pc, #304]	@ (801d9e0 <__kernel_tanf+0x178>)
 801d8ae:	428a      	cmp	r2, r1
 801d8b0:	d312      	bcc.n	801d8d8 <__kernel_tanf+0x70>
 801d8b2:	2b00      	cmp	r3, #0
 801d8b4:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 801d9e4 <__kernel_tanf+0x17c>
 801d8b8:	bfb8      	it	lt
 801d8ba:	eef1 7a40 	vneglt.f32	s15, s0
 801d8be:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d8c2:	eddf 7a49 	vldr	s15, [pc, #292]	@ 801d9e8 <__kernel_tanf+0x180>
 801d8c6:	bfb8      	it	lt
 801d8c8:	eef1 0a60 	vneglt.f32	s1, s1
 801d8cc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801d8d0:	eddf 0a46 	vldr	s1, [pc, #280]	@ 801d9ec <__kernel_tanf+0x184>
 801d8d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d8d8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801d8dc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 801d9f0 <__kernel_tanf+0x188>
 801d8e0:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 801d9f4 <__kernel_tanf+0x18c>
 801d8e4:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 801d9f8 <__kernel_tanf+0x190>
 801d8e8:	493d      	ldr	r1, [pc, #244]	@ (801d9e0 <__kernel_tanf+0x178>)
 801d8ea:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801d8ee:	428a      	cmp	r2, r1
 801d8f0:	eea7 6a25 	vfma.f32	s12, s14, s11
 801d8f4:	eddf 5a41 	vldr	s11, [pc, #260]	@ 801d9fc <__kernel_tanf+0x194>
 801d8f8:	eee6 5a07 	vfma.f32	s11, s12, s14
 801d8fc:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 801da00 <__kernel_tanf+0x198>
 801d900:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d904:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801da04 <__kernel_tanf+0x19c>
 801d908:	eee6 5a07 	vfma.f32	s11, s12, s14
 801d90c:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 801da08 <__kernel_tanf+0x1a0>
 801d910:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d914:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 801da0c <__kernel_tanf+0x1a4>
 801d918:	eee7 5a05 	vfma.f32	s11, s14, s10
 801d91c:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801da10 <__kernel_tanf+0x1a8>
 801d920:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d924:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801da14 <__kernel_tanf+0x1ac>
 801d928:	eee5 5a07 	vfma.f32	s11, s10, s14
 801d92c:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801da18 <__kernel_tanf+0x1b0>
 801d930:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d934:	eddf 5a39 	vldr	s11, [pc, #228]	@ 801da1c <__kernel_tanf+0x1b4>
 801d938:	eee5 5a07 	vfma.f32	s11, s10, s14
 801d93c:	eeb0 7a46 	vmov.f32	s14, s12
 801d940:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801d944:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801d948:	eeb0 6a60 	vmov.f32	s12, s1
 801d94c:	eea7 6a05 	vfma.f32	s12, s14, s10
 801d950:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 801da20 <__kernel_tanf+0x1b8>
 801d954:	eee6 0a26 	vfma.f32	s1, s12, s13
 801d958:	eee5 0a07 	vfma.f32	s1, s10, s14
 801d95c:	ee37 6aa0 	vadd.f32	s12, s15, s1
 801d960:	d31d      	bcc.n	801d99e <__kernel_tanf+0x136>
 801d962:	ee07 0a10 	vmov	s14, r0
 801d966:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d96a:	ee26 5a06 	vmul.f32	s10, s12, s12
 801d96e:	ee36 6a07 	vadd.f32	s12, s12, s14
 801d972:	179b      	asrs	r3, r3, #30
 801d974:	eec5 5a06 	vdiv.f32	s11, s10, s12
 801d978:	f003 0302 	and.w	r3, r3, #2
 801d97c:	f1c3 0301 	rsb	r3, r3, #1
 801d980:	ee06 3a90 	vmov	s13, r3
 801d984:	ee35 6ae0 	vsub.f32	s12, s11, s1
 801d988:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d98c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801d990:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801d994:	eea7 7ac6 	vfms.f32	s14, s15, s12
 801d998:	ee66 7a87 	vmul.f32	s15, s13, s14
 801d99c:	e77c      	b.n	801d898 <__kernel_tanf+0x30>
 801d99e:	2801      	cmp	r0, #1
 801d9a0:	d01b      	beq.n	801d9da <__kernel_tanf+0x172>
 801d9a2:	4b20      	ldr	r3, [pc, #128]	@ (801da24 <__kernel_tanf+0x1bc>)
 801d9a4:	ee16 2a10 	vmov	r2, s12
 801d9a8:	401a      	ands	r2, r3
 801d9aa:	ee05 2a90 	vmov	s11, r2
 801d9ae:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801d9b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d9b6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801d9ba:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 801d9be:	eec7 6a86 	vdiv.f32	s13, s15, s12
 801d9c2:	ee16 2a90 	vmov	r2, s13
 801d9c6:	4013      	ands	r3, r2
 801d9c8:	ee07 3a90 	vmov	s15, r3
 801d9cc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801d9d0:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801d9d4:	eee7 7a26 	vfma.f32	s15, s14, s13
 801d9d8:	e75e      	b.n	801d898 <__kernel_tanf+0x30>
 801d9da:	eef0 7a46 	vmov.f32	s15, s12
 801d9de:	e75b      	b.n	801d898 <__kernel_tanf+0x30>
 801d9e0:	3f2ca140 	.word	0x3f2ca140
 801d9e4:	3f490fda 	.word	0x3f490fda
 801d9e8:	33222168 	.word	0x33222168
 801d9ec:	00000000 	.word	0x00000000
 801d9f0:	b79bae5f 	.word	0xb79bae5f
 801d9f4:	38a3f445 	.word	0x38a3f445
 801d9f8:	37d95384 	.word	0x37d95384
 801d9fc:	3a1a26c8 	.word	0x3a1a26c8
 801da00:	3b6b6916 	.word	0x3b6b6916
 801da04:	3cb327a4 	.word	0x3cb327a4
 801da08:	3e088889 	.word	0x3e088889
 801da0c:	3895c07a 	.word	0x3895c07a
 801da10:	398137b9 	.word	0x398137b9
 801da14:	3abede48 	.word	0x3abede48
 801da18:	3c11371f 	.word	0x3c11371f
 801da1c:	3d5d0dd1 	.word	0x3d5d0dd1
 801da20:	3eaaaaab 	.word	0x3eaaaaab
 801da24:	fffff000 	.word	0xfffff000

0801da28 <__ieee754_acosf>:
 801da28:	b508      	push	{r3, lr}
 801da2a:	ee10 3a10 	vmov	r3, s0
 801da2e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801da32:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801da36:	ed2d 8b0c 	vpush	{d8-d13}
 801da3a:	d10a      	bne.n	801da52 <__ieee754_acosf+0x2a>
 801da3c:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 801dbd4 <__ieee754_acosf+0x1ac>
 801da40:	eddf 7a65 	vldr	s15, [pc, #404]	@ 801dbd8 <__ieee754_acosf+0x1b0>
 801da44:	2b00      	cmp	r3, #0
 801da46:	bfc8      	it	gt
 801da48:	eeb0 0a67 	vmovgt.f32	s0, s15
 801da4c:	ecbd 8b0c 	vpop	{d8-d13}
 801da50:	bd08      	pop	{r3, pc}
 801da52:	d904      	bls.n	801da5e <__ieee754_acosf+0x36>
 801da54:	ee30 8a40 	vsub.f32	s16, s0, s0
 801da58:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801da5c:	e7f6      	b.n	801da4c <__ieee754_acosf+0x24>
 801da5e:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 801da62:	d23c      	bcs.n	801dade <__ieee754_acosf+0xb6>
 801da64:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 801da68:	f240 80b1 	bls.w	801dbce <__ieee754_acosf+0x1a6>
 801da6c:	ee60 7a00 	vmul.f32	s15, s0, s0
 801da70:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 801dbdc <__ieee754_acosf+0x1b4>
 801da74:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 801dbe0 <__ieee754_acosf+0x1b8>
 801da78:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 801dbe4 <__ieee754_acosf+0x1bc>
 801da7c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801da80:	eddf 6a59 	vldr	s13, [pc, #356]	@ 801dbe8 <__ieee754_acosf+0x1c0>
 801da84:	eee7 6a27 	vfma.f32	s13, s14, s15
 801da88:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801dbec <__ieee754_acosf+0x1c4>
 801da8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801da90:	eddf 6a57 	vldr	s13, [pc, #348]	@ 801dbf0 <__ieee754_acosf+0x1c8>
 801da94:	eee7 6a27 	vfma.f32	s13, s14, s15
 801da98:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 801dbf4 <__ieee754_acosf+0x1cc>
 801da9c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801daa0:	eddf 6a55 	vldr	s13, [pc, #340]	@ 801dbf8 <__ieee754_acosf+0x1d0>
 801daa4:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801daa8:	eddf 6a54 	vldr	s13, [pc, #336]	@ 801dbfc <__ieee754_acosf+0x1d4>
 801daac:	eee6 6a27 	vfma.f32	s13, s12, s15
 801dab0:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 801dc00 <__ieee754_acosf+0x1d8>
 801dab4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801dab8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dabc:	eee6 6a27 	vfma.f32	s13, s12, s15
 801dac0:	ee27 7a27 	vmul.f32	s14, s14, s15
 801dac4:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 801dc04 <__ieee754_acosf+0x1dc>
 801dac8:	ee87 6a26 	vdiv.f32	s12, s14, s13
 801dacc:	eee0 7a46 	vfms.f32	s15, s0, s12
 801dad0:	ee70 7a67 	vsub.f32	s15, s0, s15
 801dad4:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 801dc08 <__ieee754_acosf+0x1e0>
 801dad8:	ee30 0a67 	vsub.f32	s0, s0, s15
 801dadc:	e7b6      	b.n	801da4c <__ieee754_acosf+0x24>
 801dade:	2b00      	cmp	r3, #0
 801dae0:	eddf da3e 	vldr	s27, [pc, #248]	@ 801dbdc <__ieee754_acosf+0x1b4>
 801dae4:	eddf ca3e 	vldr	s25, [pc, #248]	@ 801dbe0 <__ieee754_acosf+0x1b8>
 801dae8:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 801dbe8 <__ieee754_acosf+0x1c0>
 801daec:	eddf ba3f 	vldr	s23, [pc, #252]	@ 801dbec <__ieee754_acosf+0x1c4>
 801daf0:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 801dbf0 <__ieee754_acosf+0x1c8>
 801daf4:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 801dbf4 <__ieee754_acosf+0x1cc>
 801daf8:	ed9f da3f 	vldr	s26, [pc, #252]	@ 801dbf8 <__ieee754_acosf+0x1d0>
 801dafc:	eddf aa39 	vldr	s21, [pc, #228]	@ 801dbe4 <__ieee754_acosf+0x1bc>
 801db00:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 801dbfc <__ieee754_acosf+0x1d4>
 801db04:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 801dc00 <__ieee754_acosf+0x1d8>
 801db08:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 801db0c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801db10:	da28      	bge.n	801db64 <__ieee754_acosf+0x13c>
 801db12:	ee30 8a09 	vadd.f32	s16, s0, s18
 801db16:	ee28 0a27 	vmul.f32	s0, s16, s15
 801db1a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801db1e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801db22:	eeac ca80 	vfma.f32	s24, s25, s0
 801db26:	eeaa aa80 	vfma.f32	s20, s21, s0
 801db2a:	eeec ba00 	vfma.f32	s23, s24, s0
 801db2e:	eeea 9a00 	vfma.f32	s19, s20, s0
 801db32:	eeab ba80 	vfma.f32	s22, s23, s0
 801db36:	eea9 9a80 	vfma.f32	s18, s19, s0
 801db3a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801db3e:	ee68 8a80 	vmul.f32	s17, s17, s0
 801db42:	f000 ff4f 	bl	801e9e4 <__ieee754_sqrtf>
 801db46:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801db4a:	eddf 7a30 	vldr	s15, [pc, #192]	@ 801dc0c <__ieee754_acosf+0x1e4>
 801db4e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801db52:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801db56:	ee77 7a80 	vadd.f32	s15, s15, s0
 801db5a:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 801dc10 <__ieee754_acosf+0x1e8>
 801db5e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801db62:	e773      	b.n	801da4c <__ieee754_acosf+0x24>
 801db64:	ee39 8a40 	vsub.f32	s16, s18, s0
 801db68:	ee28 8a27 	vmul.f32	s16, s16, s15
 801db6c:	eeb0 0a48 	vmov.f32	s0, s16
 801db70:	f000 ff38 	bl	801e9e4 <__ieee754_sqrtf>
 801db74:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801db78:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801db7c:	eeac ca88 	vfma.f32	s24, s25, s16
 801db80:	eeaa aa88 	vfma.f32	s20, s21, s16
 801db84:	eeec ba08 	vfma.f32	s23, s24, s16
 801db88:	ee10 3a10 	vmov	r3, s0
 801db8c:	eeab ba88 	vfma.f32	s22, s23, s16
 801db90:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801db94:	f023 030f 	bic.w	r3, r3, #15
 801db98:	eeea 9a08 	vfma.f32	s19, s20, s16
 801db9c:	ee07 3a90 	vmov	s15, r3
 801dba0:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801dba4:	eeb0 6a48 	vmov.f32	s12, s16
 801dba8:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801dbac:	eea9 9a88 	vfma.f32	s18, s19, s16
 801dbb0:	ee70 6a27 	vadd.f32	s13, s0, s15
 801dbb4:	ee68 8a88 	vmul.f32	s17, s17, s16
 801dbb8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801dbbc:	eec8 6a89 	vdiv.f32	s13, s17, s18
 801dbc0:	eea0 7a26 	vfma.f32	s14, s0, s13
 801dbc4:	ee37 0a87 	vadd.f32	s0, s15, s14
 801dbc8:	ee30 0a00 	vadd.f32	s0, s0, s0
 801dbcc:	e73e      	b.n	801da4c <__ieee754_acosf+0x24>
 801dbce:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 801dc14 <__ieee754_acosf+0x1ec>
 801dbd2:	e73b      	b.n	801da4c <__ieee754_acosf+0x24>
 801dbd4:	40490fdb 	.word	0x40490fdb
 801dbd8:	00000000 	.word	0x00000000
 801dbdc:	3811ef08 	.word	0x3811ef08
 801dbe0:	3a4f7f04 	.word	0x3a4f7f04
 801dbe4:	bf303361 	.word	0xbf303361
 801dbe8:	bd241146 	.word	0xbd241146
 801dbec:	3e4e0aa8 	.word	0x3e4e0aa8
 801dbf0:	bea6b090 	.word	0xbea6b090
 801dbf4:	3e2aaaab 	.word	0x3e2aaaab
 801dbf8:	3d9dc62e 	.word	0x3d9dc62e
 801dbfc:	4001572d 	.word	0x4001572d
 801dc00:	c019d139 	.word	0xc019d139
 801dc04:	33a22168 	.word	0x33a22168
 801dc08:	3fc90fda 	.word	0x3fc90fda
 801dc0c:	b3a22168 	.word	0xb3a22168
 801dc10:	40490fda 	.word	0x40490fda
 801dc14:	3fc90fdb 	.word	0x3fc90fdb

0801dc18 <__ieee754_asinf>:
 801dc18:	b538      	push	{r3, r4, r5, lr}
 801dc1a:	ee10 5a10 	vmov	r5, s0
 801dc1e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801dc22:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 801dc26:	ed2d 8b04 	vpush	{d8-d9}
 801dc2a:	d10c      	bne.n	801dc46 <__ieee754_asinf+0x2e>
 801dc2c:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 801dda4 <__ieee754_asinf+0x18c>
 801dc30:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 801dda8 <__ieee754_asinf+0x190>
 801dc34:	ee60 7a27 	vmul.f32	s15, s0, s15
 801dc38:	eee0 7a07 	vfma.f32	s15, s0, s14
 801dc3c:	eeb0 0a67 	vmov.f32	s0, s15
 801dc40:	ecbd 8b04 	vpop	{d8-d9}
 801dc44:	bd38      	pop	{r3, r4, r5, pc}
 801dc46:	d904      	bls.n	801dc52 <__ieee754_asinf+0x3a>
 801dc48:	ee70 7a40 	vsub.f32	s15, s0, s0
 801dc4c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801dc50:	e7f6      	b.n	801dc40 <__ieee754_asinf+0x28>
 801dc52:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801dc56:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801dc5a:	d20b      	bcs.n	801dc74 <__ieee754_asinf+0x5c>
 801dc5c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 801dc60:	d252      	bcs.n	801dd08 <__ieee754_asinf+0xf0>
 801dc62:	eddf 7a52 	vldr	s15, [pc, #328]	@ 801ddac <__ieee754_asinf+0x194>
 801dc66:	ee70 7a27 	vadd.f32	s15, s0, s15
 801dc6a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801dc6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc72:	dce5      	bgt.n	801dc40 <__ieee754_asinf+0x28>
 801dc74:	f7ff f86e 	bl	801cd54 <fabsf>
 801dc78:	ee38 8ac0 	vsub.f32	s16, s17, s0
 801dc7c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801dc80:	ee28 8a27 	vmul.f32	s16, s16, s15
 801dc84:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 801ddb0 <__ieee754_asinf+0x198>
 801dc88:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 801ddb4 <__ieee754_asinf+0x19c>
 801dc8c:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 801ddb8 <__ieee754_asinf+0x1a0>
 801dc90:	eea8 7a27 	vfma.f32	s14, s16, s15
 801dc94:	eddf 7a49 	vldr	s15, [pc, #292]	@ 801ddbc <__ieee754_asinf+0x1a4>
 801dc98:	eee7 7a08 	vfma.f32	s15, s14, s16
 801dc9c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 801ddc0 <__ieee754_asinf+0x1a8>
 801dca0:	eea7 7a88 	vfma.f32	s14, s15, s16
 801dca4:	eddf 7a47 	vldr	s15, [pc, #284]	@ 801ddc4 <__ieee754_asinf+0x1ac>
 801dca8:	eee7 7a08 	vfma.f32	s15, s14, s16
 801dcac:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 801ddc8 <__ieee754_asinf+0x1b0>
 801dcb0:	eea7 9a88 	vfma.f32	s18, s15, s16
 801dcb4:	eddf 7a45 	vldr	s15, [pc, #276]	@ 801ddcc <__ieee754_asinf+0x1b4>
 801dcb8:	eee8 7a07 	vfma.f32	s15, s16, s14
 801dcbc:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 801ddd0 <__ieee754_asinf+0x1b8>
 801dcc0:	eea7 7a88 	vfma.f32	s14, s15, s16
 801dcc4:	eddf 7a43 	vldr	s15, [pc, #268]	@ 801ddd4 <__ieee754_asinf+0x1bc>
 801dcc8:	eee7 7a08 	vfma.f32	s15, s14, s16
 801dccc:	eeb0 0a48 	vmov.f32	s0, s16
 801dcd0:	eee7 8a88 	vfma.f32	s17, s15, s16
 801dcd4:	f000 fe86 	bl	801e9e4 <__ieee754_sqrtf>
 801dcd8:	4b3f      	ldr	r3, [pc, #252]	@ (801ddd8 <__ieee754_asinf+0x1c0>)
 801dcda:	ee29 9a08 	vmul.f32	s18, s18, s16
 801dcde:	429c      	cmp	r4, r3
 801dce0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801dce4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801dce8:	d93d      	bls.n	801dd66 <__ieee754_asinf+0x14e>
 801dcea:	eea0 0a06 	vfma.f32	s0, s0, s12
 801dcee:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 801dddc <__ieee754_asinf+0x1c4>
 801dcf2:	eee0 7a26 	vfma.f32	s15, s0, s13
 801dcf6:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 801dda8 <__ieee754_asinf+0x190>
 801dcfa:	ee30 0a67 	vsub.f32	s0, s0, s15
 801dcfe:	2d00      	cmp	r5, #0
 801dd00:	bfd8      	it	le
 801dd02:	eeb1 0a40 	vnegle.f32	s0, s0
 801dd06:	e79b      	b.n	801dc40 <__ieee754_asinf+0x28>
 801dd08:	ee60 7a00 	vmul.f32	s15, s0, s0
 801dd0c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801ddb4 <__ieee754_asinf+0x19c>
 801dd10:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 801ddb0 <__ieee754_asinf+0x198>
 801dd14:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 801ddc8 <__ieee754_asinf+0x1b0>
 801dd18:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801dd1c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801ddbc <__ieee754_asinf+0x1a4>
 801dd20:	eee7 6a27 	vfma.f32	s13, s14, s15
 801dd24:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 801ddc0 <__ieee754_asinf+0x1a8>
 801dd28:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801dd2c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 801ddc4 <__ieee754_asinf+0x1ac>
 801dd30:	eee7 6a27 	vfma.f32	s13, s14, s15
 801dd34:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 801ddb8 <__ieee754_asinf+0x1a0>
 801dd38:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801dd3c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 801ddcc <__ieee754_asinf+0x1b4>
 801dd40:	eee7 6a86 	vfma.f32	s13, s15, s12
 801dd44:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 801ddd0 <__ieee754_asinf+0x1b8>
 801dd48:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801dd4c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 801ddd4 <__ieee754_asinf+0x1bc>
 801dd50:	eee6 6a27 	vfma.f32	s13, s12, s15
 801dd54:	ee27 7a27 	vmul.f32	s14, s14, s15
 801dd58:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801dd5c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801dd60:	eea0 0a27 	vfma.f32	s0, s0, s15
 801dd64:	e76c      	b.n	801dc40 <__ieee754_asinf+0x28>
 801dd66:	ee10 3a10 	vmov	r3, s0
 801dd6a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801dd6e:	f023 030f 	bic.w	r3, r3, #15
 801dd72:	ee07 3a10 	vmov	s14, r3
 801dd76:	eea7 8a47 	vfms.f32	s16, s14, s14
 801dd7a:	ee70 5a00 	vadd.f32	s11, s0, s0
 801dd7e:	ee30 0a07 	vadd.f32	s0, s0, s14
 801dd82:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801dda4 <__ieee754_asinf+0x18c>
 801dd86:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801dd8a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 801dde0 <__ieee754_asinf+0x1c8>
 801dd8e:	eee5 7a66 	vfms.f32	s15, s10, s13
 801dd92:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801dd96:	eeb0 6a40 	vmov.f32	s12, s0
 801dd9a:	eea7 6a66 	vfms.f32	s12, s14, s13
 801dd9e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801dda2:	e7aa      	b.n	801dcfa <__ieee754_asinf+0xe2>
 801dda4:	b33bbd2e 	.word	0xb33bbd2e
 801dda8:	3fc90fdb 	.word	0x3fc90fdb
 801ddac:	7149f2ca 	.word	0x7149f2ca
 801ddb0:	3a4f7f04 	.word	0x3a4f7f04
 801ddb4:	3811ef08 	.word	0x3811ef08
 801ddb8:	3e2aaaab 	.word	0x3e2aaaab
 801ddbc:	bd241146 	.word	0xbd241146
 801ddc0:	3e4e0aa8 	.word	0x3e4e0aa8
 801ddc4:	bea6b090 	.word	0xbea6b090
 801ddc8:	3d9dc62e 	.word	0x3d9dc62e
 801ddcc:	bf303361 	.word	0xbf303361
 801ddd0:	4001572d 	.word	0x4001572d
 801ddd4:	c019d139 	.word	0xc019d139
 801ddd8:	3f799999 	.word	0x3f799999
 801dddc:	333bbd2e 	.word	0x333bbd2e
 801dde0:	3f490fdb 	.word	0x3f490fdb

0801dde4 <__ieee754_atan2f>:
 801dde4:	ee10 2a90 	vmov	r2, s1
 801dde8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 801ddec:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801ddf0:	b510      	push	{r4, lr}
 801ddf2:	eef0 7a40 	vmov.f32	s15, s0
 801ddf6:	d806      	bhi.n	801de06 <__ieee754_atan2f+0x22>
 801ddf8:	ee10 0a10 	vmov	r0, s0
 801ddfc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801de00:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801de04:	d904      	bls.n	801de10 <__ieee754_atan2f+0x2c>
 801de06:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801de0a:	eeb0 0a67 	vmov.f32	s0, s15
 801de0e:	bd10      	pop	{r4, pc}
 801de10:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801de14:	d103      	bne.n	801de1e <__ieee754_atan2f+0x3a>
 801de16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de1a:	f000 bc83 	b.w	801e724 <atanf>
 801de1e:	1794      	asrs	r4, r2, #30
 801de20:	f004 0402 	and.w	r4, r4, #2
 801de24:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801de28:	b943      	cbnz	r3, 801de3c <__ieee754_atan2f+0x58>
 801de2a:	2c02      	cmp	r4, #2
 801de2c:	d05e      	beq.n	801deec <__ieee754_atan2f+0x108>
 801de2e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801df00 <__ieee754_atan2f+0x11c>
 801de32:	2c03      	cmp	r4, #3
 801de34:	bf08      	it	eq
 801de36:	eef0 7a47 	vmoveq.f32	s15, s14
 801de3a:	e7e6      	b.n	801de0a <__ieee754_atan2f+0x26>
 801de3c:	b941      	cbnz	r1, 801de50 <__ieee754_atan2f+0x6c>
 801de3e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 801df04 <__ieee754_atan2f+0x120>
 801de42:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801df08 <__ieee754_atan2f+0x124>
 801de46:	2800      	cmp	r0, #0
 801de48:	bfb8      	it	lt
 801de4a:	eef0 7a47 	vmovlt.f32	s15, s14
 801de4e:	e7dc      	b.n	801de0a <__ieee754_atan2f+0x26>
 801de50:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801de54:	d110      	bne.n	801de78 <__ieee754_atan2f+0x94>
 801de56:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801de5a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801de5e:	d107      	bne.n	801de70 <__ieee754_atan2f+0x8c>
 801de60:	2c02      	cmp	r4, #2
 801de62:	d846      	bhi.n	801def2 <__ieee754_atan2f+0x10e>
 801de64:	4b29      	ldr	r3, [pc, #164]	@ (801df0c <__ieee754_atan2f+0x128>)
 801de66:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801de6a:	edd3 7a00 	vldr	s15, [r3]
 801de6e:	e7cc      	b.n	801de0a <__ieee754_atan2f+0x26>
 801de70:	2c02      	cmp	r4, #2
 801de72:	d841      	bhi.n	801def8 <__ieee754_atan2f+0x114>
 801de74:	4b26      	ldr	r3, [pc, #152]	@ (801df10 <__ieee754_atan2f+0x12c>)
 801de76:	e7f6      	b.n	801de66 <__ieee754_atan2f+0x82>
 801de78:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801de7c:	d0df      	beq.n	801de3e <__ieee754_atan2f+0x5a>
 801de7e:	1a5b      	subs	r3, r3, r1
 801de80:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 801de84:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801de88:	da1a      	bge.n	801dec0 <__ieee754_atan2f+0xdc>
 801de8a:	2a00      	cmp	r2, #0
 801de8c:	da01      	bge.n	801de92 <__ieee754_atan2f+0xae>
 801de8e:	313c      	adds	r1, #60	@ 0x3c
 801de90:	db19      	blt.n	801dec6 <__ieee754_atan2f+0xe2>
 801de92:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801de96:	f7fe ff5d 	bl	801cd54 <fabsf>
 801de9a:	f000 fc43 	bl	801e724 <atanf>
 801de9e:	eef0 7a40 	vmov.f32	s15, s0
 801dea2:	2c01      	cmp	r4, #1
 801dea4:	d012      	beq.n	801decc <__ieee754_atan2f+0xe8>
 801dea6:	2c02      	cmp	r4, #2
 801dea8:	d017      	beq.n	801deda <__ieee754_atan2f+0xf6>
 801deaa:	2c00      	cmp	r4, #0
 801deac:	d0ad      	beq.n	801de0a <__ieee754_atan2f+0x26>
 801deae:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 801df14 <__ieee754_atan2f+0x130>
 801deb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801deb6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 801df18 <__ieee754_atan2f+0x134>
 801deba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801debe:	e7a4      	b.n	801de0a <__ieee754_atan2f+0x26>
 801dec0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801df04 <__ieee754_atan2f+0x120>
 801dec4:	e7ed      	b.n	801dea2 <__ieee754_atan2f+0xbe>
 801dec6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801df1c <__ieee754_atan2f+0x138>
 801deca:	e7ea      	b.n	801dea2 <__ieee754_atan2f+0xbe>
 801decc:	ee17 3a90 	vmov	r3, s15
 801ded0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801ded4:	ee07 3a90 	vmov	s15, r3
 801ded8:	e797      	b.n	801de0a <__ieee754_atan2f+0x26>
 801deda:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 801df14 <__ieee754_atan2f+0x130>
 801dede:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dee2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 801df18 <__ieee754_atan2f+0x134>
 801dee6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801deea:	e78e      	b.n	801de0a <__ieee754_atan2f+0x26>
 801deec:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 801df18 <__ieee754_atan2f+0x134>
 801def0:	e78b      	b.n	801de0a <__ieee754_atan2f+0x26>
 801def2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 801df20 <__ieee754_atan2f+0x13c>
 801def6:	e788      	b.n	801de0a <__ieee754_atan2f+0x26>
 801def8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801df1c <__ieee754_atan2f+0x138>
 801defc:	e785      	b.n	801de0a <__ieee754_atan2f+0x26>
 801defe:	bf00      	nop
 801df00:	c0490fdb 	.word	0xc0490fdb
 801df04:	3fc90fdb 	.word	0x3fc90fdb
 801df08:	bfc90fdb 	.word	0xbfc90fdb
 801df0c:	080226e4 	.word	0x080226e4
 801df10:	080226d8 	.word	0x080226d8
 801df14:	33bbbd2e 	.word	0x33bbbd2e
 801df18:	40490fdb 	.word	0x40490fdb
 801df1c:	00000000 	.word	0x00000000
 801df20:	3f490fdb 	.word	0x3f490fdb

0801df24 <__ieee754_powf>:
 801df24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df28:	ee10 4a90 	vmov	r4, s1
 801df2c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 801df30:	ed2d 8b02 	vpush	{d8}
 801df34:	ee10 6a10 	vmov	r6, s0
 801df38:	eeb0 8a40 	vmov.f32	s16, s0
 801df3c:	eef0 8a60 	vmov.f32	s17, s1
 801df40:	d10c      	bne.n	801df5c <__ieee754_powf+0x38>
 801df42:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 801df46:	0076      	lsls	r6, r6, #1
 801df48:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 801df4c:	f240 829c 	bls.w	801e488 <__ieee754_powf+0x564>
 801df50:	ee38 0a28 	vadd.f32	s0, s16, s17
 801df54:	ecbd 8b02 	vpop	{d8}
 801df58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df5c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 801df60:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 801df64:	d802      	bhi.n	801df6c <__ieee754_powf+0x48>
 801df66:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801df6a:	d908      	bls.n	801df7e <__ieee754_powf+0x5a>
 801df6c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801df70:	d1ee      	bne.n	801df50 <__ieee754_powf+0x2c>
 801df72:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 801df76:	0064      	lsls	r4, r4, #1
 801df78:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 801df7c:	e7e6      	b.n	801df4c <__ieee754_powf+0x28>
 801df7e:	2e00      	cmp	r6, #0
 801df80:	da1e      	bge.n	801dfc0 <__ieee754_powf+0x9c>
 801df82:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 801df86:	d22b      	bcs.n	801dfe0 <__ieee754_powf+0xbc>
 801df88:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801df8c:	d332      	bcc.n	801dff4 <__ieee754_powf+0xd0>
 801df8e:	ea4f 53e9 	mov.w	r3, r9, asr #23
 801df92:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 801df96:	fa49 f503 	asr.w	r5, r9, r3
 801df9a:	fa05 f303 	lsl.w	r3, r5, r3
 801df9e:	454b      	cmp	r3, r9
 801dfa0:	d126      	bne.n	801dff0 <__ieee754_powf+0xcc>
 801dfa2:	f005 0501 	and.w	r5, r5, #1
 801dfa6:	f1c5 0502 	rsb	r5, r5, #2
 801dfaa:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801dfae:	d122      	bne.n	801dff6 <__ieee754_powf+0xd2>
 801dfb0:	2c00      	cmp	r4, #0
 801dfb2:	f280 826f 	bge.w	801e494 <__ieee754_powf+0x570>
 801dfb6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801dfba:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801dfbe:	e7c9      	b.n	801df54 <__ieee754_powf+0x30>
 801dfc0:	2500      	movs	r5, #0
 801dfc2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801dfc6:	d1f0      	bne.n	801dfaa <__ieee754_powf+0x86>
 801dfc8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 801dfcc:	f000 825c 	beq.w	801e488 <__ieee754_powf+0x564>
 801dfd0:	d908      	bls.n	801dfe4 <__ieee754_powf+0xc0>
 801dfd2:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 801e334 <__ieee754_powf+0x410>
 801dfd6:	2c00      	cmp	r4, #0
 801dfd8:	bfa8      	it	ge
 801dfda:	eeb0 0a68 	vmovge.f32	s0, s17
 801dfde:	e7b9      	b.n	801df54 <__ieee754_powf+0x30>
 801dfe0:	2502      	movs	r5, #2
 801dfe2:	e7ee      	b.n	801dfc2 <__ieee754_powf+0x9e>
 801dfe4:	2c00      	cmp	r4, #0
 801dfe6:	f280 8252 	bge.w	801e48e <__ieee754_powf+0x56a>
 801dfea:	eeb1 0a68 	vneg.f32	s0, s17
 801dfee:	e7b1      	b.n	801df54 <__ieee754_powf+0x30>
 801dff0:	2500      	movs	r5, #0
 801dff2:	e7da      	b.n	801dfaa <__ieee754_powf+0x86>
 801dff4:	2500      	movs	r5, #0
 801dff6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801dffa:	d102      	bne.n	801e002 <__ieee754_powf+0xde>
 801dffc:	ee28 0a08 	vmul.f32	s0, s16, s16
 801e000:	e7a8      	b.n	801df54 <__ieee754_powf+0x30>
 801e002:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801e006:	d109      	bne.n	801e01c <__ieee754_powf+0xf8>
 801e008:	2e00      	cmp	r6, #0
 801e00a:	db07      	blt.n	801e01c <__ieee754_powf+0xf8>
 801e00c:	eeb0 0a48 	vmov.f32	s0, s16
 801e010:	ecbd 8b02 	vpop	{d8}
 801e014:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e018:	f000 bce4 	b.w	801e9e4 <__ieee754_sqrtf>
 801e01c:	eeb0 0a48 	vmov.f32	s0, s16
 801e020:	f7fe fe98 	bl	801cd54 <fabsf>
 801e024:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 801e028:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801e02c:	4647      	mov	r7, r8
 801e02e:	d002      	beq.n	801e036 <__ieee754_powf+0x112>
 801e030:	f1b8 0f00 	cmp.w	r8, #0
 801e034:	d117      	bne.n	801e066 <__ieee754_powf+0x142>
 801e036:	2c00      	cmp	r4, #0
 801e038:	bfbc      	itt	lt
 801e03a:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801e03e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801e042:	2e00      	cmp	r6, #0
 801e044:	da86      	bge.n	801df54 <__ieee754_powf+0x30>
 801e046:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 801e04a:	ea58 0805 	orrs.w	r8, r8, r5
 801e04e:	d104      	bne.n	801e05a <__ieee754_powf+0x136>
 801e050:	ee70 7a40 	vsub.f32	s15, s0, s0
 801e054:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801e058:	e77c      	b.n	801df54 <__ieee754_powf+0x30>
 801e05a:	2d01      	cmp	r5, #1
 801e05c:	f47f af7a 	bne.w	801df54 <__ieee754_powf+0x30>
 801e060:	eeb1 0a40 	vneg.f32	s0, s0
 801e064:	e776      	b.n	801df54 <__ieee754_powf+0x30>
 801e066:	0ff0      	lsrs	r0, r6, #31
 801e068:	3801      	subs	r0, #1
 801e06a:	ea55 0300 	orrs.w	r3, r5, r0
 801e06e:	d104      	bne.n	801e07a <__ieee754_powf+0x156>
 801e070:	ee38 8a48 	vsub.f32	s16, s16, s16
 801e074:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801e078:	e76c      	b.n	801df54 <__ieee754_powf+0x30>
 801e07a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801e07e:	d973      	bls.n	801e168 <__ieee754_powf+0x244>
 801e080:	4bad      	ldr	r3, [pc, #692]	@ (801e338 <__ieee754_powf+0x414>)
 801e082:	4598      	cmp	r8, r3
 801e084:	d808      	bhi.n	801e098 <__ieee754_powf+0x174>
 801e086:	2c00      	cmp	r4, #0
 801e088:	da0b      	bge.n	801e0a2 <__ieee754_powf+0x17e>
 801e08a:	2000      	movs	r0, #0
 801e08c:	ecbd 8b02 	vpop	{d8}
 801e090:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e094:	f000 bca0 	b.w	801e9d8 <__math_oflowf>
 801e098:	4ba8      	ldr	r3, [pc, #672]	@ (801e33c <__ieee754_powf+0x418>)
 801e09a:	4598      	cmp	r8, r3
 801e09c:	d908      	bls.n	801e0b0 <__ieee754_powf+0x18c>
 801e09e:	2c00      	cmp	r4, #0
 801e0a0:	dcf3      	bgt.n	801e08a <__ieee754_powf+0x166>
 801e0a2:	2000      	movs	r0, #0
 801e0a4:	ecbd 8b02 	vpop	{d8}
 801e0a8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e0ac:	f000 bc8e 	b.w	801e9cc <__math_uflowf>
 801e0b0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801e0b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e0b8:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 801e340 <__ieee754_powf+0x41c>
 801e0bc:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801e0c0:	eee0 6a67 	vfms.f32	s13, s0, s15
 801e0c4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801e0c8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801e0cc:	ee20 7a00 	vmul.f32	s14, s0, s0
 801e0d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e0d4:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 801e344 <__ieee754_powf+0x420>
 801e0d8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801e0dc:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 801e348 <__ieee754_powf+0x424>
 801e0e0:	eee0 7a07 	vfma.f32	s15, s0, s14
 801e0e4:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 801e34c <__ieee754_powf+0x428>
 801e0e8:	eef0 6a67 	vmov.f32	s13, s15
 801e0ec:	eee0 6a07 	vfma.f32	s13, s0, s14
 801e0f0:	ee16 3a90 	vmov	r3, s13
 801e0f4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801e0f8:	f023 030f 	bic.w	r3, r3, #15
 801e0fc:	ee06 3a90 	vmov	s13, r3
 801e100:	eee0 6a47 	vfms.f32	s13, s0, s14
 801e104:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e108:	3d01      	subs	r5, #1
 801e10a:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 801e10e:	4305      	orrs	r5, r0
 801e110:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e114:	f024 040f 	bic.w	r4, r4, #15
 801e118:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 801e11c:	bf18      	it	ne
 801e11e:	eeb0 8a47 	vmovne.f32	s16, s14
 801e122:	ee07 4a10 	vmov	s14, r4
 801e126:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801e12a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801e12e:	ee07 3a90 	vmov	s15, r3
 801e132:	eee7 0a27 	vfma.f32	s1, s14, s15
 801e136:	ee07 4a10 	vmov	s14, r4
 801e13a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e13e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801e142:	ee17 1a10 	vmov	r1, s14
 801e146:	2900      	cmp	r1, #0
 801e148:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e14c:	f340 80dd 	ble.w	801e30a <__ieee754_powf+0x3e6>
 801e150:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 801e154:	f240 80ca 	bls.w	801e2ec <__ieee754_powf+0x3c8>
 801e158:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801e15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e160:	bf4c      	ite	mi
 801e162:	2001      	movmi	r0, #1
 801e164:	2000      	movpl	r0, #0
 801e166:	e791      	b.n	801e08c <__ieee754_powf+0x168>
 801e168:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801e16c:	bf01      	itttt	eq
 801e16e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 801e350 <__ieee754_powf+0x42c>
 801e172:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801e176:	f06f 0317 	mvneq.w	r3, #23
 801e17a:	ee17 7a90 	vmoveq	r7, s15
 801e17e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 801e182:	bf18      	it	ne
 801e184:	2300      	movne	r3, #0
 801e186:	3a7f      	subs	r2, #127	@ 0x7f
 801e188:	441a      	add	r2, r3
 801e18a:	4b72      	ldr	r3, [pc, #456]	@ (801e354 <__ieee754_powf+0x430>)
 801e18c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 801e190:	429f      	cmp	r7, r3
 801e192:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 801e196:	dd06      	ble.n	801e1a6 <__ieee754_powf+0x282>
 801e198:	4b6f      	ldr	r3, [pc, #444]	@ (801e358 <__ieee754_powf+0x434>)
 801e19a:	429f      	cmp	r7, r3
 801e19c:	f340 80a4 	ble.w	801e2e8 <__ieee754_powf+0x3c4>
 801e1a0:	3201      	adds	r2, #1
 801e1a2:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 801e1a6:	2600      	movs	r6, #0
 801e1a8:	4b6c      	ldr	r3, [pc, #432]	@ (801e35c <__ieee754_powf+0x438>)
 801e1aa:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801e1ae:	ee07 1a10 	vmov	s14, r1
 801e1b2:	edd3 5a00 	vldr	s11, [r3]
 801e1b6:	4b6a      	ldr	r3, [pc, #424]	@ (801e360 <__ieee754_powf+0x43c>)
 801e1b8:	ee75 7a87 	vadd.f32	s15, s11, s14
 801e1bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e1c0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 801e1c4:	1049      	asrs	r1, r1, #1
 801e1c6:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801e1ca:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801e1ce:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 801e1d2:	ee37 6a65 	vsub.f32	s12, s14, s11
 801e1d6:	ee07 1a90 	vmov	s15, r1
 801e1da:	ee26 5a24 	vmul.f32	s10, s12, s9
 801e1de:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801e1e2:	ee15 7a10 	vmov	r7, s10
 801e1e6:	401f      	ands	r7, r3
 801e1e8:	ee06 7a90 	vmov	s13, r7
 801e1ec:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801e1f0:	ee37 7a65 	vsub.f32	s14, s14, s11
 801e1f4:	ee65 7a05 	vmul.f32	s15, s10, s10
 801e1f8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801e1fc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 801e364 <__ieee754_powf+0x440>
 801e200:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 801e368 <__ieee754_powf+0x444>
 801e204:	eee7 5a87 	vfma.f32	s11, s15, s14
 801e208:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801e36c <__ieee754_powf+0x448>
 801e20c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801e210:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 801e340 <__ieee754_powf+0x41c>
 801e214:	eee7 5a27 	vfma.f32	s11, s14, s15
 801e218:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 801e370 <__ieee754_powf+0x44c>
 801e21c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801e220:	eddf 5a54 	vldr	s11, [pc, #336]	@ 801e374 <__ieee754_powf+0x450>
 801e224:	ee26 6a24 	vmul.f32	s12, s12, s9
 801e228:	eee7 5a27 	vfma.f32	s11, s14, s15
 801e22c:	ee35 7a26 	vadd.f32	s14, s10, s13
 801e230:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801e234:	ee27 7a06 	vmul.f32	s14, s14, s12
 801e238:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801e23c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801e240:	eef0 5a67 	vmov.f32	s11, s15
 801e244:	eee6 5aa6 	vfma.f32	s11, s13, s13
 801e248:	ee75 5a87 	vadd.f32	s11, s11, s14
 801e24c:	ee15 1a90 	vmov	r1, s11
 801e250:	4019      	ands	r1, r3
 801e252:	ee05 1a90 	vmov	s11, r1
 801e256:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801e25a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801e25e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e262:	ee67 7a85 	vmul.f32	s15, s15, s10
 801e266:	eee6 7a25 	vfma.f32	s15, s12, s11
 801e26a:	eeb0 6a67 	vmov.f32	s12, s15
 801e26e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801e272:	ee16 1a10 	vmov	r1, s12
 801e276:	4019      	ands	r1, r3
 801e278:	ee06 1a10 	vmov	s12, r1
 801e27c:	eeb0 7a46 	vmov.f32	s14, s12
 801e280:	eea6 7ae5 	vfms.f32	s14, s13, s11
 801e284:	493c      	ldr	r1, [pc, #240]	@ (801e378 <__ieee754_powf+0x454>)
 801e286:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801e28a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e28e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801e37c <__ieee754_powf+0x458>
 801e292:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801e380 <__ieee754_powf+0x45c>
 801e296:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e29a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 801e384 <__ieee754_powf+0x460>
 801e29e:	eee6 7a07 	vfma.f32	s15, s12, s14
 801e2a2:	ed91 7a00 	vldr	s14, [r1]
 801e2a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e2aa:	ee07 2a10 	vmov	s14, r2
 801e2ae:	eef0 6a67 	vmov.f32	s13, s15
 801e2b2:	4a35      	ldr	r2, [pc, #212]	@ (801e388 <__ieee754_powf+0x464>)
 801e2b4:	eee6 6a25 	vfma.f32	s13, s12, s11
 801e2b8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 801e2bc:	ed92 5a00 	vldr	s10, [r2]
 801e2c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e2c4:	ee76 6a85 	vadd.f32	s13, s13, s10
 801e2c8:	ee76 6a87 	vadd.f32	s13, s13, s14
 801e2cc:	ee16 2a90 	vmov	r2, s13
 801e2d0:	4013      	ands	r3, r2
 801e2d2:	ee06 3a90 	vmov	s13, r3
 801e2d6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801e2da:	ee37 7a45 	vsub.f32	s14, s14, s10
 801e2de:	eea6 7a65 	vfms.f32	s14, s12, s11
 801e2e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e2e6:	e70f      	b.n	801e108 <__ieee754_powf+0x1e4>
 801e2e8:	2601      	movs	r6, #1
 801e2ea:	e75d      	b.n	801e1a8 <__ieee754_powf+0x284>
 801e2ec:	d152      	bne.n	801e394 <__ieee754_powf+0x470>
 801e2ee:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801e38c <__ieee754_powf+0x468>
 801e2f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e2f6:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801e2fa:	eef4 6ac7 	vcmpe.f32	s13, s14
 801e2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e302:	f73f af29 	bgt.w	801e158 <__ieee754_powf+0x234>
 801e306:	2386      	movs	r3, #134	@ 0x86
 801e308:	e048      	b.n	801e39c <__ieee754_powf+0x478>
 801e30a:	4a21      	ldr	r2, [pc, #132]	@ (801e390 <__ieee754_powf+0x46c>)
 801e30c:	4293      	cmp	r3, r2
 801e30e:	d907      	bls.n	801e320 <__ieee754_powf+0x3fc>
 801e310:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801e314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e318:	bf4c      	ite	mi
 801e31a:	2001      	movmi	r0, #1
 801e31c:	2000      	movpl	r0, #0
 801e31e:	e6c1      	b.n	801e0a4 <__ieee754_powf+0x180>
 801e320:	d138      	bne.n	801e394 <__ieee754_powf+0x470>
 801e322:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e326:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801e32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e32e:	dbea      	blt.n	801e306 <__ieee754_powf+0x3e2>
 801e330:	e7ee      	b.n	801e310 <__ieee754_powf+0x3ec>
 801e332:	bf00      	nop
 801e334:	00000000 	.word	0x00000000
 801e338:	3f7ffff3 	.word	0x3f7ffff3
 801e33c:	3f800007 	.word	0x3f800007
 801e340:	3eaaaaab 	.word	0x3eaaaaab
 801e344:	3fb8aa3b 	.word	0x3fb8aa3b
 801e348:	36eca570 	.word	0x36eca570
 801e34c:	3fb8aa00 	.word	0x3fb8aa00
 801e350:	4b800000 	.word	0x4b800000
 801e354:	001cc471 	.word	0x001cc471
 801e358:	005db3d6 	.word	0x005db3d6
 801e35c:	08022700 	.word	0x08022700
 801e360:	fffff000 	.word	0xfffff000
 801e364:	3e6c3255 	.word	0x3e6c3255
 801e368:	3e53f142 	.word	0x3e53f142
 801e36c:	3e8ba305 	.word	0x3e8ba305
 801e370:	3edb6db7 	.word	0x3edb6db7
 801e374:	3f19999a 	.word	0x3f19999a
 801e378:	080226f0 	.word	0x080226f0
 801e37c:	3f76384f 	.word	0x3f76384f
 801e380:	3f763800 	.word	0x3f763800
 801e384:	369dc3a0 	.word	0x369dc3a0
 801e388:	080226f8 	.word	0x080226f8
 801e38c:	3338aa3c 	.word	0x3338aa3c
 801e390:	43160000 	.word	0x43160000
 801e394:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 801e398:	d971      	bls.n	801e47e <__ieee754_powf+0x55a>
 801e39a:	15db      	asrs	r3, r3, #23
 801e39c:	3b7e      	subs	r3, #126	@ 0x7e
 801e39e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801e3a2:	4118      	asrs	r0, r3
 801e3a4:	4408      	add	r0, r1
 801e3a6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801e3aa:	4a3c      	ldr	r2, [pc, #240]	@ (801e49c <__ieee754_powf+0x578>)
 801e3ac:	3b7f      	subs	r3, #127	@ 0x7f
 801e3ae:	411a      	asrs	r2, r3
 801e3b0:	4002      	ands	r2, r0
 801e3b2:	ee07 2a10 	vmov	s14, r2
 801e3b6:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801e3ba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801e3be:	f1c3 0317 	rsb	r3, r3, #23
 801e3c2:	4118      	asrs	r0, r3
 801e3c4:	2900      	cmp	r1, #0
 801e3c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e3ca:	bfb8      	it	lt
 801e3cc:	4240      	neglt	r0, r0
 801e3ce:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801e3d2:	eddf 6a33 	vldr	s13, [pc, #204]	@ 801e4a0 <__ieee754_powf+0x57c>
 801e3d6:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 801e4a4 <__ieee754_powf+0x580>
 801e3da:	ee17 3a10 	vmov	r3, s14
 801e3de:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801e3e2:	f023 030f 	bic.w	r3, r3, #15
 801e3e6:	ee07 3a10 	vmov	s14, r3
 801e3ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e3ee:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801e3f2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801e3f6:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 801e4a8 <__ieee754_powf+0x584>
 801e3fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e3fe:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801e402:	eef0 6a67 	vmov.f32	s13, s15
 801e406:	eee7 6a06 	vfma.f32	s13, s14, s12
 801e40a:	eef0 5a66 	vmov.f32	s11, s13
 801e40e:	eee7 5a46 	vfms.f32	s11, s14, s12
 801e412:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801e416:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801e41a:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 801e4ac <__ieee754_powf+0x588>
 801e41e:	eddf 5a24 	vldr	s11, [pc, #144]	@ 801e4b0 <__ieee754_powf+0x58c>
 801e422:	eea7 6a25 	vfma.f32	s12, s14, s11
 801e426:	eddf 5a23 	vldr	s11, [pc, #140]	@ 801e4b4 <__ieee754_powf+0x590>
 801e42a:	eee6 5a07 	vfma.f32	s11, s12, s14
 801e42e:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 801e4b8 <__ieee754_powf+0x594>
 801e432:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e436:	eddf 5a21 	vldr	s11, [pc, #132]	@ 801e4bc <__ieee754_powf+0x598>
 801e43a:	eee6 5a07 	vfma.f32	s11, s12, s14
 801e43e:	eeb0 6a66 	vmov.f32	s12, s13
 801e442:	eea5 6ac7 	vfms.f32	s12, s11, s14
 801e446:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801e44a:	ee66 5a86 	vmul.f32	s11, s13, s12
 801e44e:	ee36 6a47 	vsub.f32	s12, s12, s14
 801e452:	eee6 7aa7 	vfma.f32	s15, s13, s15
 801e456:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801e45a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e45e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e462:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e466:	ee10 3a10 	vmov	r3, s0
 801e46a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801e46e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801e472:	da06      	bge.n	801e482 <__ieee754_powf+0x55e>
 801e474:	f000 fa2a 	bl	801e8cc <scalbnf>
 801e478:	ee20 0a08 	vmul.f32	s0, s0, s16
 801e47c:	e56a      	b.n	801df54 <__ieee754_powf+0x30>
 801e47e:	2000      	movs	r0, #0
 801e480:	e7a5      	b.n	801e3ce <__ieee754_powf+0x4aa>
 801e482:	ee00 3a10 	vmov	s0, r3
 801e486:	e7f7      	b.n	801e478 <__ieee754_powf+0x554>
 801e488:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801e48c:	e562      	b.n	801df54 <__ieee754_powf+0x30>
 801e48e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 801e4c0 <__ieee754_powf+0x59c>
 801e492:	e55f      	b.n	801df54 <__ieee754_powf+0x30>
 801e494:	eeb0 0a48 	vmov.f32	s0, s16
 801e498:	e55c      	b.n	801df54 <__ieee754_powf+0x30>
 801e49a:	bf00      	nop
 801e49c:	ff800000 	.word	0xff800000
 801e4a0:	3f317218 	.word	0x3f317218
 801e4a4:	3f317200 	.word	0x3f317200
 801e4a8:	35bfbe8c 	.word	0x35bfbe8c
 801e4ac:	b5ddea0e 	.word	0xb5ddea0e
 801e4b0:	3331bb4c 	.word	0x3331bb4c
 801e4b4:	388ab355 	.word	0x388ab355
 801e4b8:	bb360b61 	.word	0xbb360b61
 801e4bc:	3e2aaaab 	.word	0x3e2aaaab
 801e4c0:	00000000 	.word	0x00000000

0801e4c4 <__ieee754_rem_pio2f>:
 801e4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e4c6:	ee10 6a10 	vmov	r6, s0
 801e4ca:	4b88      	ldr	r3, [pc, #544]	@ (801e6ec <__ieee754_rem_pio2f+0x228>)
 801e4cc:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801e4d0:	429d      	cmp	r5, r3
 801e4d2:	b087      	sub	sp, #28
 801e4d4:	4604      	mov	r4, r0
 801e4d6:	d805      	bhi.n	801e4e4 <__ieee754_rem_pio2f+0x20>
 801e4d8:	2300      	movs	r3, #0
 801e4da:	ed80 0a00 	vstr	s0, [r0]
 801e4de:	6043      	str	r3, [r0, #4]
 801e4e0:	2000      	movs	r0, #0
 801e4e2:	e022      	b.n	801e52a <__ieee754_rem_pio2f+0x66>
 801e4e4:	4b82      	ldr	r3, [pc, #520]	@ (801e6f0 <__ieee754_rem_pio2f+0x22c>)
 801e4e6:	429d      	cmp	r5, r3
 801e4e8:	d83a      	bhi.n	801e560 <__ieee754_rem_pio2f+0x9c>
 801e4ea:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801e4ee:	2e00      	cmp	r6, #0
 801e4f0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801e6f4 <__ieee754_rem_pio2f+0x230>
 801e4f4:	4a80      	ldr	r2, [pc, #512]	@ (801e6f8 <__ieee754_rem_pio2f+0x234>)
 801e4f6:	f023 030f 	bic.w	r3, r3, #15
 801e4fa:	dd18      	ble.n	801e52e <__ieee754_rem_pio2f+0x6a>
 801e4fc:	4293      	cmp	r3, r2
 801e4fe:	ee70 7a47 	vsub.f32	s15, s0, s14
 801e502:	bf09      	itett	eq
 801e504:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801e6fc <__ieee754_rem_pio2f+0x238>
 801e508:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801e700 <__ieee754_rem_pio2f+0x23c>
 801e50c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801e704 <__ieee754_rem_pio2f+0x240>
 801e510:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801e514:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801e518:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e51c:	ed80 7a00 	vstr	s14, [r0]
 801e520:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e524:	edc0 7a01 	vstr	s15, [r0, #4]
 801e528:	2001      	movs	r0, #1
 801e52a:	b007      	add	sp, #28
 801e52c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e52e:	4293      	cmp	r3, r2
 801e530:	ee70 7a07 	vadd.f32	s15, s0, s14
 801e534:	bf09      	itett	eq
 801e536:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801e6fc <__ieee754_rem_pio2f+0x238>
 801e53a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801e700 <__ieee754_rem_pio2f+0x23c>
 801e53e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801e704 <__ieee754_rem_pio2f+0x240>
 801e542:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801e546:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801e54a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e54e:	ed80 7a00 	vstr	s14, [r0]
 801e552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e556:	edc0 7a01 	vstr	s15, [r0, #4]
 801e55a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e55e:	e7e4      	b.n	801e52a <__ieee754_rem_pio2f+0x66>
 801e560:	4b69      	ldr	r3, [pc, #420]	@ (801e708 <__ieee754_rem_pio2f+0x244>)
 801e562:	429d      	cmp	r5, r3
 801e564:	d873      	bhi.n	801e64e <__ieee754_rem_pio2f+0x18a>
 801e566:	f7fe fbf5 	bl	801cd54 <fabsf>
 801e56a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801e70c <__ieee754_rem_pio2f+0x248>
 801e56e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801e572:	eee0 7a07 	vfma.f32	s15, s0, s14
 801e576:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e57a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e57e:	ee17 0a90 	vmov	r0, s15
 801e582:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801e6f4 <__ieee754_rem_pio2f+0x230>
 801e586:	eea7 0a67 	vfms.f32	s0, s14, s15
 801e58a:	281f      	cmp	r0, #31
 801e58c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801e700 <__ieee754_rem_pio2f+0x23c>
 801e590:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e594:	eeb1 6a47 	vneg.f32	s12, s14
 801e598:	ee70 6a67 	vsub.f32	s13, s0, s15
 801e59c:	ee16 1a90 	vmov	r1, s13
 801e5a0:	dc09      	bgt.n	801e5b6 <__ieee754_rem_pio2f+0xf2>
 801e5a2:	4a5b      	ldr	r2, [pc, #364]	@ (801e710 <__ieee754_rem_pio2f+0x24c>)
 801e5a4:	1e47      	subs	r7, r0, #1
 801e5a6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801e5aa:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801e5ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801e5b2:	4293      	cmp	r3, r2
 801e5b4:	d107      	bne.n	801e5c6 <__ieee754_rem_pio2f+0x102>
 801e5b6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801e5ba:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801e5be:	2a08      	cmp	r2, #8
 801e5c0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801e5c4:	dc14      	bgt.n	801e5f0 <__ieee754_rem_pio2f+0x12c>
 801e5c6:	6021      	str	r1, [r4, #0]
 801e5c8:	ed94 7a00 	vldr	s14, [r4]
 801e5cc:	ee30 0a47 	vsub.f32	s0, s0, s14
 801e5d0:	2e00      	cmp	r6, #0
 801e5d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e5d6:	ed84 0a01 	vstr	s0, [r4, #4]
 801e5da:	daa6      	bge.n	801e52a <__ieee754_rem_pio2f+0x66>
 801e5dc:	eeb1 7a47 	vneg.f32	s14, s14
 801e5e0:	eeb1 0a40 	vneg.f32	s0, s0
 801e5e4:	ed84 7a00 	vstr	s14, [r4]
 801e5e8:	ed84 0a01 	vstr	s0, [r4, #4]
 801e5ec:	4240      	negs	r0, r0
 801e5ee:	e79c      	b.n	801e52a <__ieee754_rem_pio2f+0x66>
 801e5f0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801e6fc <__ieee754_rem_pio2f+0x238>
 801e5f4:	eef0 6a40 	vmov.f32	s13, s0
 801e5f8:	eee6 6a25 	vfma.f32	s13, s12, s11
 801e5fc:	ee70 7a66 	vsub.f32	s15, s0, s13
 801e600:	eee6 7a25 	vfma.f32	s15, s12, s11
 801e604:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801e704 <__ieee754_rem_pio2f+0x240>
 801e608:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801e60c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801e610:	ee15 2a90 	vmov	r2, s11
 801e614:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801e618:	1a5b      	subs	r3, r3, r1
 801e61a:	2b19      	cmp	r3, #25
 801e61c:	dc04      	bgt.n	801e628 <__ieee754_rem_pio2f+0x164>
 801e61e:	edc4 5a00 	vstr	s11, [r4]
 801e622:	eeb0 0a66 	vmov.f32	s0, s13
 801e626:	e7cf      	b.n	801e5c8 <__ieee754_rem_pio2f+0x104>
 801e628:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801e714 <__ieee754_rem_pio2f+0x250>
 801e62c:	eeb0 0a66 	vmov.f32	s0, s13
 801e630:	eea6 0a25 	vfma.f32	s0, s12, s11
 801e634:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801e638:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801e718 <__ieee754_rem_pio2f+0x254>
 801e63c:	eee6 7a25 	vfma.f32	s15, s12, s11
 801e640:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801e644:	ee30 7a67 	vsub.f32	s14, s0, s15
 801e648:	ed84 7a00 	vstr	s14, [r4]
 801e64c:	e7bc      	b.n	801e5c8 <__ieee754_rem_pio2f+0x104>
 801e64e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801e652:	d306      	bcc.n	801e662 <__ieee754_rem_pio2f+0x19e>
 801e654:	ee70 7a40 	vsub.f32	s15, s0, s0
 801e658:	edc0 7a01 	vstr	s15, [r0, #4]
 801e65c:	edc0 7a00 	vstr	s15, [r0]
 801e660:	e73e      	b.n	801e4e0 <__ieee754_rem_pio2f+0x1c>
 801e662:	15ea      	asrs	r2, r5, #23
 801e664:	3a86      	subs	r2, #134	@ 0x86
 801e666:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801e66a:	ee07 3a90 	vmov	s15, r3
 801e66e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801e672:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801e71c <__ieee754_rem_pio2f+0x258>
 801e676:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e67a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e67e:	ed8d 7a03 	vstr	s14, [sp, #12]
 801e682:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e686:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801e68a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e68e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e692:	ed8d 7a04 	vstr	s14, [sp, #16]
 801e696:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e69a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801e69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6a2:	edcd 7a05 	vstr	s15, [sp, #20]
 801e6a6:	d11e      	bne.n	801e6e6 <__ieee754_rem_pio2f+0x222>
 801e6a8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801e6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6b0:	bf0c      	ite	eq
 801e6b2:	2301      	moveq	r3, #1
 801e6b4:	2302      	movne	r3, #2
 801e6b6:	491a      	ldr	r1, [pc, #104]	@ (801e720 <__ieee754_rem_pio2f+0x25c>)
 801e6b8:	9101      	str	r1, [sp, #4]
 801e6ba:	2102      	movs	r1, #2
 801e6bc:	9100      	str	r1, [sp, #0]
 801e6be:	a803      	add	r0, sp, #12
 801e6c0:	4621      	mov	r1, r4
 801e6c2:	f000 f993 	bl	801e9ec <__kernel_rem_pio2f>
 801e6c6:	2e00      	cmp	r6, #0
 801e6c8:	f6bf af2f 	bge.w	801e52a <__ieee754_rem_pio2f+0x66>
 801e6cc:	edd4 7a00 	vldr	s15, [r4]
 801e6d0:	eef1 7a67 	vneg.f32	s15, s15
 801e6d4:	edc4 7a00 	vstr	s15, [r4]
 801e6d8:	edd4 7a01 	vldr	s15, [r4, #4]
 801e6dc:	eef1 7a67 	vneg.f32	s15, s15
 801e6e0:	edc4 7a01 	vstr	s15, [r4, #4]
 801e6e4:	e782      	b.n	801e5ec <__ieee754_rem_pio2f+0x128>
 801e6e6:	2303      	movs	r3, #3
 801e6e8:	e7e5      	b.n	801e6b6 <__ieee754_rem_pio2f+0x1f2>
 801e6ea:	bf00      	nop
 801e6ec:	3f490fd8 	.word	0x3f490fd8
 801e6f0:	4016cbe3 	.word	0x4016cbe3
 801e6f4:	3fc90f80 	.word	0x3fc90f80
 801e6f8:	3fc90fd0 	.word	0x3fc90fd0
 801e6fc:	37354400 	.word	0x37354400
 801e700:	37354443 	.word	0x37354443
 801e704:	2e85a308 	.word	0x2e85a308
 801e708:	43490f80 	.word	0x43490f80
 801e70c:	3f22f984 	.word	0x3f22f984
 801e710:	08022708 	.word	0x08022708
 801e714:	2e85a300 	.word	0x2e85a300
 801e718:	248d3132 	.word	0x248d3132
 801e71c:	43800000 	.word	0x43800000
 801e720:	08022788 	.word	0x08022788

0801e724 <atanf>:
 801e724:	b538      	push	{r3, r4, r5, lr}
 801e726:	ee10 5a10 	vmov	r5, s0
 801e72a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801e72e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801e732:	eef0 7a40 	vmov.f32	s15, s0
 801e736:	d310      	bcc.n	801e75a <atanf+0x36>
 801e738:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801e73c:	d904      	bls.n	801e748 <atanf+0x24>
 801e73e:	ee70 7a00 	vadd.f32	s15, s0, s0
 801e742:	eeb0 0a67 	vmov.f32	s0, s15
 801e746:	bd38      	pop	{r3, r4, r5, pc}
 801e748:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 801e880 <atanf+0x15c>
 801e74c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 801e884 <atanf+0x160>
 801e750:	2d00      	cmp	r5, #0
 801e752:	bfc8      	it	gt
 801e754:	eef0 7a47 	vmovgt.f32	s15, s14
 801e758:	e7f3      	b.n	801e742 <atanf+0x1e>
 801e75a:	4b4b      	ldr	r3, [pc, #300]	@ (801e888 <atanf+0x164>)
 801e75c:	429c      	cmp	r4, r3
 801e75e:	d810      	bhi.n	801e782 <atanf+0x5e>
 801e760:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801e764:	d20a      	bcs.n	801e77c <atanf+0x58>
 801e766:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801e88c <atanf+0x168>
 801e76a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801e76e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e772:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801e776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e77a:	dce2      	bgt.n	801e742 <atanf+0x1e>
 801e77c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e780:	e013      	b.n	801e7aa <atanf+0x86>
 801e782:	f7fe fae7 	bl	801cd54 <fabsf>
 801e786:	4b42      	ldr	r3, [pc, #264]	@ (801e890 <atanf+0x16c>)
 801e788:	429c      	cmp	r4, r3
 801e78a:	d84f      	bhi.n	801e82c <atanf+0x108>
 801e78c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 801e790:	429c      	cmp	r4, r3
 801e792:	d841      	bhi.n	801e818 <atanf+0xf4>
 801e794:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801e798:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801e79c:	eea0 7a27 	vfma.f32	s14, s0, s15
 801e7a0:	2300      	movs	r3, #0
 801e7a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e7a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e7aa:	1c5a      	adds	r2, r3, #1
 801e7ac:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801e7b0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 801e894 <atanf+0x170>
 801e7b4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 801e898 <atanf+0x174>
 801e7b8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 801e89c <atanf+0x178>
 801e7bc:	ee66 6a06 	vmul.f32	s13, s12, s12
 801e7c0:	eee6 5a87 	vfma.f32	s11, s13, s14
 801e7c4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 801e8a0 <atanf+0x17c>
 801e7c8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801e7cc:	eddf 5a35 	vldr	s11, [pc, #212]	@ 801e8a4 <atanf+0x180>
 801e7d0:	eee7 5a26 	vfma.f32	s11, s14, s13
 801e7d4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801e8a8 <atanf+0x184>
 801e7d8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801e7dc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801e8ac <atanf+0x188>
 801e7e0:	eee7 5a26 	vfma.f32	s11, s14, s13
 801e7e4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 801e8b0 <atanf+0x18c>
 801e7e8:	eea6 5a87 	vfma.f32	s10, s13, s14
 801e7ec:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801e8b4 <atanf+0x190>
 801e7f0:	eea5 7a26 	vfma.f32	s14, s10, s13
 801e7f4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 801e8b8 <atanf+0x194>
 801e7f8:	eea7 5a26 	vfma.f32	s10, s14, s13
 801e7fc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 801e8bc <atanf+0x198>
 801e800:	eea5 7a26 	vfma.f32	s14, s10, s13
 801e804:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e808:	eea5 7a86 	vfma.f32	s14, s11, s12
 801e80c:	ee27 7a87 	vmul.f32	s14, s15, s14
 801e810:	d121      	bne.n	801e856 <atanf+0x132>
 801e812:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e816:	e794      	b.n	801e742 <atanf+0x1e>
 801e818:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801e81c:	ee30 7a67 	vsub.f32	s14, s0, s15
 801e820:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e824:	2301      	movs	r3, #1
 801e826:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e82a:	e7be      	b.n	801e7aa <atanf+0x86>
 801e82c:	4b24      	ldr	r3, [pc, #144]	@ (801e8c0 <atanf+0x19c>)
 801e82e:	429c      	cmp	r4, r3
 801e830:	d80b      	bhi.n	801e84a <atanf+0x126>
 801e832:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801e836:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e83a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801e83e:	2302      	movs	r3, #2
 801e840:	ee70 6a67 	vsub.f32	s13, s0, s15
 801e844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e848:	e7af      	b.n	801e7aa <atanf+0x86>
 801e84a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801e84e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e852:	2303      	movs	r3, #3
 801e854:	e7a9      	b.n	801e7aa <atanf+0x86>
 801e856:	4a1b      	ldr	r2, [pc, #108]	@ (801e8c4 <atanf+0x1a0>)
 801e858:	491b      	ldr	r1, [pc, #108]	@ (801e8c8 <atanf+0x1a4>)
 801e85a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801e85e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e862:	edd3 6a00 	vldr	s13, [r3]
 801e866:	ee37 7a66 	vsub.f32	s14, s14, s13
 801e86a:	2d00      	cmp	r5, #0
 801e86c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e870:	edd2 7a00 	vldr	s15, [r2]
 801e874:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e878:	bfb8      	it	lt
 801e87a:	eef1 7a67 	vneglt.f32	s15, s15
 801e87e:	e760      	b.n	801e742 <atanf+0x1e>
 801e880:	bfc90fdb 	.word	0xbfc90fdb
 801e884:	3fc90fdb 	.word	0x3fc90fdb
 801e888:	3edfffff 	.word	0x3edfffff
 801e88c:	7149f2ca 	.word	0x7149f2ca
 801e890:	3f97ffff 	.word	0x3f97ffff
 801e894:	3c8569d7 	.word	0x3c8569d7
 801e898:	3d4bda59 	.word	0x3d4bda59
 801e89c:	bd6ef16b 	.word	0xbd6ef16b
 801e8a0:	3d886b35 	.word	0x3d886b35
 801e8a4:	3dba2e6e 	.word	0x3dba2e6e
 801e8a8:	3e124925 	.word	0x3e124925
 801e8ac:	3eaaaaab 	.word	0x3eaaaaab
 801e8b0:	bd15a221 	.word	0xbd15a221
 801e8b4:	bd9d8795 	.word	0xbd9d8795
 801e8b8:	bde38e38 	.word	0xbde38e38
 801e8bc:	be4ccccd 	.word	0xbe4ccccd
 801e8c0:	401bffff 	.word	0x401bffff
 801e8c4:	08022ab0 	.word	0x08022ab0
 801e8c8:	08022aa0 	.word	0x08022aa0

0801e8cc <scalbnf>:
 801e8cc:	ee10 3a10 	vmov	r3, s0
 801e8d0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801e8d4:	d02b      	beq.n	801e92e <scalbnf+0x62>
 801e8d6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801e8da:	d302      	bcc.n	801e8e2 <scalbnf+0x16>
 801e8dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 801e8e0:	4770      	bx	lr
 801e8e2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801e8e6:	d123      	bne.n	801e930 <scalbnf+0x64>
 801e8e8:	4b24      	ldr	r3, [pc, #144]	@ (801e97c <scalbnf+0xb0>)
 801e8ea:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801e980 <scalbnf+0xb4>
 801e8ee:	4298      	cmp	r0, r3
 801e8f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801e8f4:	db17      	blt.n	801e926 <scalbnf+0x5a>
 801e8f6:	ee10 3a10 	vmov	r3, s0
 801e8fa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801e8fe:	3a19      	subs	r2, #25
 801e900:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801e904:	4288      	cmp	r0, r1
 801e906:	dd15      	ble.n	801e934 <scalbnf+0x68>
 801e908:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801e984 <scalbnf+0xb8>
 801e90c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801e988 <scalbnf+0xbc>
 801e910:	ee10 3a10 	vmov	r3, s0
 801e914:	eeb0 7a67 	vmov.f32	s14, s15
 801e918:	2b00      	cmp	r3, #0
 801e91a:	bfb8      	it	lt
 801e91c:	eef0 7a66 	vmovlt.f32	s15, s13
 801e920:	ee27 0a87 	vmul.f32	s0, s15, s14
 801e924:	4770      	bx	lr
 801e926:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801e98c <scalbnf+0xc0>
 801e92a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801e92e:	4770      	bx	lr
 801e930:	0dd2      	lsrs	r2, r2, #23
 801e932:	e7e5      	b.n	801e900 <scalbnf+0x34>
 801e934:	4410      	add	r0, r2
 801e936:	28fe      	cmp	r0, #254	@ 0xfe
 801e938:	dce6      	bgt.n	801e908 <scalbnf+0x3c>
 801e93a:	2800      	cmp	r0, #0
 801e93c:	dd06      	ble.n	801e94c <scalbnf+0x80>
 801e93e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801e942:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801e946:	ee00 3a10 	vmov	s0, r3
 801e94a:	4770      	bx	lr
 801e94c:	f110 0f16 	cmn.w	r0, #22
 801e950:	da09      	bge.n	801e966 <scalbnf+0x9a>
 801e952:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801e98c <scalbnf+0xc0>
 801e956:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801e990 <scalbnf+0xc4>
 801e95a:	ee10 3a10 	vmov	r3, s0
 801e95e:	eeb0 7a67 	vmov.f32	s14, s15
 801e962:	2b00      	cmp	r3, #0
 801e964:	e7d9      	b.n	801e91a <scalbnf+0x4e>
 801e966:	3019      	adds	r0, #25
 801e968:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801e96c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801e970:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801e994 <scalbnf+0xc8>
 801e974:	ee07 3a90 	vmov	s15, r3
 801e978:	e7d7      	b.n	801e92a <scalbnf+0x5e>
 801e97a:	bf00      	nop
 801e97c:	ffff3cb0 	.word	0xffff3cb0
 801e980:	4c000000 	.word	0x4c000000
 801e984:	7149f2ca 	.word	0x7149f2ca
 801e988:	f149f2ca 	.word	0xf149f2ca
 801e98c:	0da24260 	.word	0x0da24260
 801e990:	8da24260 	.word	0x8da24260
 801e994:	33000000 	.word	0x33000000

0801e998 <with_errnof>:
 801e998:	b510      	push	{r4, lr}
 801e99a:	ed2d 8b02 	vpush	{d8}
 801e99e:	eeb0 8a40 	vmov.f32	s16, s0
 801e9a2:	4604      	mov	r4, r0
 801e9a4:	f001 fa2c 	bl	801fe00 <__errno>
 801e9a8:	eeb0 0a48 	vmov.f32	s0, s16
 801e9ac:	ecbd 8b02 	vpop	{d8}
 801e9b0:	6004      	str	r4, [r0, #0]
 801e9b2:	bd10      	pop	{r4, pc}

0801e9b4 <xflowf>:
 801e9b4:	b130      	cbz	r0, 801e9c4 <xflowf+0x10>
 801e9b6:	eef1 7a40 	vneg.f32	s15, s0
 801e9ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 801e9be:	2022      	movs	r0, #34	@ 0x22
 801e9c0:	f7ff bfea 	b.w	801e998 <with_errnof>
 801e9c4:	eef0 7a40 	vmov.f32	s15, s0
 801e9c8:	e7f7      	b.n	801e9ba <xflowf+0x6>
	...

0801e9cc <__math_uflowf>:
 801e9cc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801e9d4 <__math_uflowf+0x8>
 801e9d0:	f7ff bff0 	b.w	801e9b4 <xflowf>
 801e9d4:	10000000 	.word	0x10000000

0801e9d8 <__math_oflowf>:
 801e9d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801e9e0 <__math_oflowf+0x8>
 801e9dc:	f7ff bfea 	b.w	801e9b4 <xflowf>
 801e9e0:	70000000 	.word	0x70000000

0801e9e4 <__ieee754_sqrtf>:
 801e9e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801e9e8:	4770      	bx	lr
	...

0801e9ec <__kernel_rem_pio2f>:
 801e9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9f0:	ed2d 8b04 	vpush	{d8-d9}
 801e9f4:	b0d9      	sub	sp, #356	@ 0x164
 801e9f6:	4690      	mov	r8, r2
 801e9f8:	9001      	str	r0, [sp, #4]
 801e9fa:	4ab9      	ldr	r2, [pc, #740]	@ (801ece0 <__kernel_rem_pio2f+0x2f4>)
 801e9fc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801e9fe:	f118 0f04 	cmn.w	r8, #4
 801ea02:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801ea06:	460f      	mov	r7, r1
 801ea08:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801ea0c:	db27      	blt.n	801ea5e <__kernel_rem_pio2f+0x72>
 801ea0e:	f1b8 0203 	subs.w	r2, r8, #3
 801ea12:	bf48      	it	mi
 801ea14:	f108 0204 	addmi.w	r2, r8, #4
 801ea18:	10d2      	asrs	r2, r2, #3
 801ea1a:	1c55      	adds	r5, r2, #1
 801ea1c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801ea1e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801ecf0 <__kernel_rem_pio2f+0x304>
 801ea22:	00e8      	lsls	r0, r5, #3
 801ea24:	eba2 060b 	sub.w	r6, r2, fp
 801ea28:	9002      	str	r0, [sp, #8]
 801ea2a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801ea2e:	eb0a 0c0b 	add.w	ip, sl, fp
 801ea32:	ac1c      	add	r4, sp, #112	@ 0x70
 801ea34:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801ea38:	2000      	movs	r0, #0
 801ea3a:	4560      	cmp	r0, ip
 801ea3c:	dd11      	ble.n	801ea62 <__kernel_rem_pio2f+0x76>
 801ea3e:	a91c      	add	r1, sp, #112	@ 0x70
 801ea40:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801ea44:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801ea48:	f04f 0c00 	mov.w	ip, #0
 801ea4c:	45d4      	cmp	ip, sl
 801ea4e:	dc27      	bgt.n	801eaa0 <__kernel_rem_pio2f+0xb4>
 801ea50:	f8dd e004 	ldr.w	lr, [sp, #4]
 801ea54:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801ecf0 <__kernel_rem_pio2f+0x304>
 801ea58:	4606      	mov	r6, r0
 801ea5a:	2400      	movs	r4, #0
 801ea5c:	e016      	b.n	801ea8c <__kernel_rem_pio2f+0xa0>
 801ea5e:	2200      	movs	r2, #0
 801ea60:	e7db      	b.n	801ea1a <__kernel_rem_pio2f+0x2e>
 801ea62:	42c6      	cmn	r6, r0
 801ea64:	bf5d      	ittte	pl
 801ea66:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801ea6a:	ee07 1a90 	vmovpl	s15, r1
 801ea6e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801ea72:	eef0 7a47 	vmovmi.f32	s15, s14
 801ea76:	ece4 7a01 	vstmia	r4!, {s15}
 801ea7a:	3001      	adds	r0, #1
 801ea7c:	e7dd      	b.n	801ea3a <__kernel_rem_pio2f+0x4e>
 801ea7e:	ecfe 6a01 	vldmia	lr!, {s13}
 801ea82:	ed96 7a00 	vldr	s14, [r6]
 801ea86:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ea8a:	3401      	adds	r4, #1
 801ea8c:	455c      	cmp	r4, fp
 801ea8e:	f1a6 0604 	sub.w	r6, r6, #4
 801ea92:	ddf4      	ble.n	801ea7e <__kernel_rem_pio2f+0x92>
 801ea94:	ece9 7a01 	vstmia	r9!, {s15}
 801ea98:	f10c 0c01 	add.w	ip, ip, #1
 801ea9c:	3004      	adds	r0, #4
 801ea9e:	e7d5      	b.n	801ea4c <__kernel_rem_pio2f+0x60>
 801eaa0:	a908      	add	r1, sp, #32
 801eaa2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801eaa6:	9104      	str	r1, [sp, #16]
 801eaa8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801eaaa:	eddf 8a90 	vldr	s17, [pc, #576]	@ 801ecec <__kernel_rem_pio2f+0x300>
 801eaae:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 801ece8 <__kernel_rem_pio2f+0x2fc>
 801eab2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801eab6:	9203      	str	r2, [sp, #12]
 801eab8:	4654      	mov	r4, sl
 801eaba:	00a2      	lsls	r2, r4, #2
 801eabc:	9205      	str	r2, [sp, #20]
 801eabe:	aa58      	add	r2, sp, #352	@ 0x160
 801eac0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801eac4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801eac8:	a944      	add	r1, sp, #272	@ 0x110
 801eaca:	aa08      	add	r2, sp, #32
 801eacc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801ead0:	4694      	mov	ip, r2
 801ead2:	4626      	mov	r6, r4
 801ead4:	2e00      	cmp	r6, #0
 801ead6:	f1a0 0004 	sub.w	r0, r0, #4
 801eada:	dc4c      	bgt.n	801eb76 <__kernel_rem_pio2f+0x18a>
 801eadc:	4628      	mov	r0, r5
 801eade:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801eae2:	f7ff fef3 	bl	801e8cc <scalbnf>
 801eae6:	eeb0 8a40 	vmov.f32	s16, s0
 801eaea:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801eaee:	ee28 0a00 	vmul.f32	s0, s16, s0
 801eaf2:	f000 f9ed 	bl	801eed0 <floorf>
 801eaf6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801eafa:	eea0 8a67 	vfms.f32	s16, s0, s15
 801eafe:	2d00      	cmp	r5, #0
 801eb00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801eb04:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801eb08:	ee17 9a90 	vmov	r9, s15
 801eb0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801eb10:	ee38 8a67 	vsub.f32	s16, s16, s15
 801eb14:	dd41      	ble.n	801eb9a <__kernel_rem_pio2f+0x1ae>
 801eb16:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801eb1a:	a908      	add	r1, sp, #32
 801eb1c:	f1c5 0e08 	rsb	lr, r5, #8
 801eb20:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801eb24:	fa46 f00e 	asr.w	r0, r6, lr
 801eb28:	4481      	add	r9, r0
 801eb2a:	fa00 f00e 	lsl.w	r0, r0, lr
 801eb2e:	1a36      	subs	r6, r6, r0
 801eb30:	f1c5 0007 	rsb	r0, r5, #7
 801eb34:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801eb38:	4106      	asrs	r6, r0
 801eb3a:	2e00      	cmp	r6, #0
 801eb3c:	dd3c      	ble.n	801ebb8 <__kernel_rem_pio2f+0x1cc>
 801eb3e:	f04f 0e00 	mov.w	lr, #0
 801eb42:	f109 0901 	add.w	r9, r9, #1
 801eb46:	4670      	mov	r0, lr
 801eb48:	4574      	cmp	r4, lr
 801eb4a:	dc68      	bgt.n	801ec1e <__kernel_rem_pio2f+0x232>
 801eb4c:	2d00      	cmp	r5, #0
 801eb4e:	dd03      	ble.n	801eb58 <__kernel_rem_pio2f+0x16c>
 801eb50:	2d01      	cmp	r5, #1
 801eb52:	d074      	beq.n	801ec3e <__kernel_rem_pio2f+0x252>
 801eb54:	2d02      	cmp	r5, #2
 801eb56:	d07d      	beq.n	801ec54 <__kernel_rem_pio2f+0x268>
 801eb58:	2e02      	cmp	r6, #2
 801eb5a:	d12d      	bne.n	801ebb8 <__kernel_rem_pio2f+0x1cc>
 801eb5c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801eb60:	ee30 8a48 	vsub.f32	s16, s0, s16
 801eb64:	b340      	cbz	r0, 801ebb8 <__kernel_rem_pio2f+0x1cc>
 801eb66:	4628      	mov	r0, r5
 801eb68:	9306      	str	r3, [sp, #24]
 801eb6a:	f7ff feaf 	bl	801e8cc <scalbnf>
 801eb6e:	9b06      	ldr	r3, [sp, #24]
 801eb70:	ee38 8a40 	vsub.f32	s16, s16, s0
 801eb74:	e020      	b.n	801ebb8 <__kernel_rem_pio2f+0x1cc>
 801eb76:	ee60 7a28 	vmul.f32	s15, s0, s17
 801eb7a:	3e01      	subs	r6, #1
 801eb7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801eb80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801eb84:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801eb88:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801eb8c:	ecac 0a01 	vstmia	ip!, {s0}
 801eb90:	ed90 0a00 	vldr	s0, [r0]
 801eb94:	ee37 0a80 	vadd.f32	s0, s15, s0
 801eb98:	e79c      	b.n	801ead4 <__kernel_rem_pio2f+0xe8>
 801eb9a:	d105      	bne.n	801eba8 <__kernel_rem_pio2f+0x1bc>
 801eb9c:	1e60      	subs	r0, r4, #1
 801eb9e:	a908      	add	r1, sp, #32
 801eba0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801eba4:	11f6      	asrs	r6, r6, #7
 801eba6:	e7c8      	b.n	801eb3a <__kernel_rem_pio2f+0x14e>
 801eba8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801ebac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801ebb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ebb4:	da31      	bge.n	801ec1a <__kernel_rem_pio2f+0x22e>
 801ebb6:	2600      	movs	r6, #0
 801ebb8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801ebbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ebc0:	f040 8098 	bne.w	801ecf4 <__kernel_rem_pio2f+0x308>
 801ebc4:	1e60      	subs	r0, r4, #1
 801ebc6:	2200      	movs	r2, #0
 801ebc8:	4550      	cmp	r0, sl
 801ebca:	da4b      	bge.n	801ec64 <__kernel_rem_pio2f+0x278>
 801ebcc:	2a00      	cmp	r2, #0
 801ebce:	d065      	beq.n	801ec9c <__kernel_rem_pio2f+0x2b0>
 801ebd0:	3c01      	subs	r4, #1
 801ebd2:	ab08      	add	r3, sp, #32
 801ebd4:	3d08      	subs	r5, #8
 801ebd6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801ebda:	2b00      	cmp	r3, #0
 801ebdc:	d0f8      	beq.n	801ebd0 <__kernel_rem_pio2f+0x1e4>
 801ebde:	4628      	mov	r0, r5
 801ebe0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801ebe4:	f7ff fe72 	bl	801e8cc <scalbnf>
 801ebe8:	1c63      	adds	r3, r4, #1
 801ebea:	aa44      	add	r2, sp, #272	@ 0x110
 801ebec:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801ecec <__kernel_rem_pio2f+0x300>
 801ebf0:	0099      	lsls	r1, r3, #2
 801ebf2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801ebf6:	4623      	mov	r3, r4
 801ebf8:	2b00      	cmp	r3, #0
 801ebfa:	f280 80a9 	bge.w	801ed50 <__kernel_rem_pio2f+0x364>
 801ebfe:	4623      	mov	r3, r4
 801ec00:	2b00      	cmp	r3, #0
 801ec02:	f2c0 80c7 	blt.w	801ed94 <__kernel_rem_pio2f+0x3a8>
 801ec06:	aa44      	add	r2, sp, #272	@ 0x110
 801ec08:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801ec0c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801ece4 <__kernel_rem_pio2f+0x2f8>
 801ec10:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801ecf0 <__kernel_rem_pio2f+0x304>
 801ec14:	2000      	movs	r0, #0
 801ec16:	1ae2      	subs	r2, r4, r3
 801ec18:	e0b1      	b.n	801ed7e <__kernel_rem_pio2f+0x392>
 801ec1a:	2602      	movs	r6, #2
 801ec1c:	e78f      	b.n	801eb3e <__kernel_rem_pio2f+0x152>
 801ec1e:	f852 1b04 	ldr.w	r1, [r2], #4
 801ec22:	b948      	cbnz	r0, 801ec38 <__kernel_rem_pio2f+0x24c>
 801ec24:	b121      	cbz	r1, 801ec30 <__kernel_rem_pio2f+0x244>
 801ec26:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801ec2a:	f842 1c04 	str.w	r1, [r2, #-4]
 801ec2e:	2101      	movs	r1, #1
 801ec30:	f10e 0e01 	add.w	lr, lr, #1
 801ec34:	4608      	mov	r0, r1
 801ec36:	e787      	b.n	801eb48 <__kernel_rem_pio2f+0x15c>
 801ec38:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801ec3c:	e7f5      	b.n	801ec2a <__kernel_rem_pio2f+0x23e>
 801ec3e:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801ec42:	aa08      	add	r2, sp, #32
 801ec44:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801ec48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801ec4c:	a908      	add	r1, sp, #32
 801ec4e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801ec52:	e781      	b.n	801eb58 <__kernel_rem_pio2f+0x16c>
 801ec54:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801ec58:	aa08      	add	r2, sp, #32
 801ec5a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801ec5e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801ec62:	e7f3      	b.n	801ec4c <__kernel_rem_pio2f+0x260>
 801ec64:	a908      	add	r1, sp, #32
 801ec66:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801ec6a:	3801      	subs	r0, #1
 801ec6c:	430a      	orrs	r2, r1
 801ec6e:	e7ab      	b.n	801ebc8 <__kernel_rem_pio2f+0x1dc>
 801ec70:	3201      	adds	r2, #1
 801ec72:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801ec76:	2e00      	cmp	r6, #0
 801ec78:	d0fa      	beq.n	801ec70 <__kernel_rem_pio2f+0x284>
 801ec7a:	9905      	ldr	r1, [sp, #20]
 801ec7c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801ec80:	eb0d 0001 	add.w	r0, sp, r1
 801ec84:	18e6      	adds	r6, r4, r3
 801ec86:	a91c      	add	r1, sp, #112	@ 0x70
 801ec88:	f104 0c01 	add.w	ip, r4, #1
 801ec8c:	384c      	subs	r0, #76	@ 0x4c
 801ec8e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801ec92:	4422      	add	r2, r4
 801ec94:	4562      	cmp	r2, ip
 801ec96:	da04      	bge.n	801eca2 <__kernel_rem_pio2f+0x2b6>
 801ec98:	4614      	mov	r4, r2
 801ec9a:	e70e      	b.n	801eaba <__kernel_rem_pio2f+0xce>
 801ec9c:	9804      	ldr	r0, [sp, #16]
 801ec9e:	2201      	movs	r2, #1
 801eca0:	e7e7      	b.n	801ec72 <__kernel_rem_pio2f+0x286>
 801eca2:	9903      	ldr	r1, [sp, #12]
 801eca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 801eca8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801ecac:	9105      	str	r1, [sp, #20]
 801ecae:	ee07 1a90 	vmov	s15, r1
 801ecb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ecb6:	2400      	movs	r4, #0
 801ecb8:	ece6 7a01 	vstmia	r6!, {s15}
 801ecbc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801ecf0 <__kernel_rem_pio2f+0x304>
 801ecc0:	46b1      	mov	r9, r6
 801ecc2:	455c      	cmp	r4, fp
 801ecc4:	dd04      	ble.n	801ecd0 <__kernel_rem_pio2f+0x2e4>
 801ecc6:	ece0 7a01 	vstmia	r0!, {s15}
 801ecca:	f10c 0c01 	add.w	ip, ip, #1
 801ecce:	e7e1      	b.n	801ec94 <__kernel_rem_pio2f+0x2a8>
 801ecd0:	ecfe 6a01 	vldmia	lr!, {s13}
 801ecd4:	ed39 7a01 	vldmdb	r9!, {s14}
 801ecd8:	3401      	adds	r4, #1
 801ecda:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ecde:	e7f0      	b.n	801ecc2 <__kernel_rem_pio2f+0x2d6>
 801ece0:	08022aec 	.word	0x08022aec
 801ece4:	08022ac0 	.word	0x08022ac0
 801ece8:	43800000 	.word	0x43800000
 801ecec:	3b800000 	.word	0x3b800000
 801ecf0:	00000000 	.word	0x00000000
 801ecf4:	9b02      	ldr	r3, [sp, #8]
 801ecf6:	eeb0 0a48 	vmov.f32	s0, s16
 801ecfa:	eba3 0008 	sub.w	r0, r3, r8
 801ecfe:	f7ff fde5 	bl	801e8cc <scalbnf>
 801ed02:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801ece8 <__kernel_rem_pio2f+0x2fc>
 801ed06:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801ed0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed0e:	db19      	blt.n	801ed44 <__kernel_rem_pio2f+0x358>
 801ed10:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801ecec <__kernel_rem_pio2f+0x300>
 801ed14:	ee60 7a27 	vmul.f32	s15, s0, s15
 801ed18:	aa08      	add	r2, sp, #32
 801ed1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ed1e:	3508      	adds	r5, #8
 801ed20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ed24:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801ed28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ed2c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801ed30:	ee10 3a10 	vmov	r3, s0
 801ed34:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801ed38:	ee17 3a90 	vmov	r3, s15
 801ed3c:	3401      	adds	r4, #1
 801ed3e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801ed42:	e74c      	b.n	801ebde <__kernel_rem_pio2f+0x1f2>
 801ed44:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801ed48:	aa08      	add	r2, sp, #32
 801ed4a:	ee10 3a10 	vmov	r3, s0
 801ed4e:	e7f6      	b.n	801ed3e <__kernel_rem_pio2f+0x352>
 801ed50:	a808      	add	r0, sp, #32
 801ed52:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801ed56:	9001      	str	r0, [sp, #4]
 801ed58:	ee07 0a90 	vmov	s15, r0
 801ed5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ed60:	3b01      	subs	r3, #1
 801ed62:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ed66:	ee20 0a07 	vmul.f32	s0, s0, s14
 801ed6a:	ed62 7a01 	vstmdb	r2!, {s15}
 801ed6e:	e743      	b.n	801ebf8 <__kernel_rem_pio2f+0x20c>
 801ed70:	ecfc 6a01 	vldmia	ip!, {s13}
 801ed74:	ecb5 7a01 	vldmia	r5!, {s14}
 801ed78:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ed7c:	3001      	adds	r0, #1
 801ed7e:	4550      	cmp	r0, sl
 801ed80:	dc01      	bgt.n	801ed86 <__kernel_rem_pio2f+0x39a>
 801ed82:	4282      	cmp	r2, r0
 801ed84:	daf4      	bge.n	801ed70 <__kernel_rem_pio2f+0x384>
 801ed86:	a858      	add	r0, sp, #352	@ 0x160
 801ed88:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801ed8c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801ed90:	3b01      	subs	r3, #1
 801ed92:	e735      	b.n	801ec00 <__kernel_rem_pio2f+0x214>
 801ed94:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801ed96:	2b02      	cmp	r3, #2
 801ed98:	dc09      	bgt.n	801edae <__kernel_rem_pio2f+0x3c2>
 801ed9a:	2b00      	cmp	r3, #0
 801ed9c:	dc2b      	bgt.n	801edf6 <__kernel_rem_pio2f+0x40a>
 801ed9e:	d044      	beq.n	801ee2a <__kernel_rem_pio2f+0x43e>
 801eda0:	f009 0007 	and.w	r0, r9, #7
 801eda4:	b059      	add	sp, #356	@ 0x164
 801eda6:	ecbd 8b04 	vpop	{d8-d9}
 801edaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edae:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801edb0:	2b03      	cmp	r3, #3
 801edb2:	d1f5      	bne.n	801eda0 <__kernel_rem_pio2f+0x3b4>
 801edb4:	aa30      	add	r2, sp, #192	@ 0xc0
 801edb6:	1f0b      	subs	r3, r1, #4
 801edb8:	4413      	add	r3, r2
 801edba:	461a      	mov	r2, r3
 801edbc:	4620      	mov	r0, r4
 801edbe:	2800      	cmp	r0, #0
 801edc0:	f1a2 0204 	sub.w	r2, r2, #4
 801edc4:	dc52      	bgt.n	801ee6c <__kernel_rem_pio2f+0x480>
 801edc6:	4622      	mov	r2, r4
 801edc8:	2a01      	cmp	r2, #1
 801edca:	f1a3 0304 	sub.w	r3, r3, #4
 801edce:	dc5d      	bgt.n	801ee8c <__kernel_rem_pio2f+0x4a0>
 801edd0:	ab30      	add	r3, sp, #192	@ 0xc0
 801edd2:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801ecf0 <__kernel_rem_pio2f+0x304>
 801edd6:	440b      	add	r3, r1
 801edd8:	2c01      	cmp	r4, #1
 801edda:	dc67      	bgt.n	801eeac <__kernel_rem_pio2f+0x4c0>
 801eddc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801ede0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801ede4:	2e00      	cmp	r6, #0
 801ede6:	d167      	bne.n	801eeb8 <__kernel_rem_pio2f+0x4cc>
 801ede8:	edc7 6a00 	vstr	s13, [r7]
 801edec:	ed87 7a01 	vstr	s14, [r7, #4]
 801edf0:	edc7 7a02 	vstr	s15, [r7, #8]
 801edf4:	e7d4      	b.n	801eda0 <__kernel_rem_pio2f+0x3b4>
 801edf6:	ab30      	add	r3, sp, #192	@ 0xc0
 801edf8:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801ecf0 <__kernel_rem_pio2f+0x304>
 801edfc:	440b      	add	r3, r1
 801edfe:	4622      	mov	r2, r4
 801ee00:	2a00      	cmp	r2, #0
 801ee02:	da24      	bge.n	801ee4e <__kernel_rem_pio2f+0x462>
 801ee04:	b34e      	cbz	r6, 801ee5a <__kernel_rem_pio2f+0x46e>
 801ee06:	eef1 7a47 	vneg.f32	s15, s14
 801ee0a:	edc7 7a00 	vstr	s15, [r7]
 801ee0e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801ee12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ee16:	aa31      	add	r2, sp, #196	@ 0xc4
 801ee18:	2301      	movs	r3, #1
 801ee1a:	429c      	cmp	r4, r3
 801ee1c:	da20      	bge.n	801ee60 <__kernel_rem_pio2f+0x474>
 801ee1e:	b10e      	cbz	r6, 801ee24 <__kernel_rem_pio2f+0x438>
 801ee20:	eef1 7a67 	vneg.f32	s15, s15
 801ee24:	edc7 7a01 	vstr	s15, [r7, #4]
 801ee28:	e7ba      	b.n	801eda0 <__kernel_rem_pio2f+0x3b4>
 801ee2a:	ab30      	add	r3, sp, #192	@ 0xc0
 801ee2c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801ecf0 <__kernel_rem_pio2f+0x304>
 801ee30:	440b      	add	r3, r1
 801ee32:	2c00      	cmp	r4, #0
 801ee34:	da05      	bge.n	801ee42 <__kernel_rem_pio2f+0x456>
 801ee36:	b10e      	cbz	r6, 801ee3c <__kernel_rem_pio2f+0x450>
 801ee38:	eef1 7a67 	vneg.f32	s15, s15
 801ee3c:	edc7 7a00 	vstr	s15, [r7]
 801ee40:	e7ae      	b.n	801eda0 <__kernel_rem_pio2f+0x3b4>
 801ee42:	ed33 7a01 	vldmdb	r3!, {s14}
 801ee46:	3c01      	subs	r4, #1
 801ee48:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ee4c:	e7f1      	b.n	801ee32 <__kernel_rem_pio2f+0x446>
 801ee4e:	ed73 7a01 	vldmdb	r3!, {s15}
 801ee52:	3a01      	subs	r2, #1
 801ee54:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ee58:	e7d2      	b.n	801ee00 <__kernel_rem_pio2f+0x414>
 801ee5a:	eef0 7a47 	vmov.f32	s15, s14
 801ee5e:	e7d4      	b.n	801ee0a <__kernel_rem_pio2f+0x41e>
 801ee60:	ecb2 7a01 	vldmia	r2!, {s14}
 801ee64:	3301      	adds	r3, #1
 801ee66:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ee6a:	e7d6      	b.n	801ee1a <__kernel_rem_pio2f+0x42e>
 801ee6c:	edd2 7a00 	vldr	s15, [r2]
 801ee70:	edd2 6a01 	vldr	s13, [r2, #4]
 801ee74:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ee78:	3801      	subs	r0, #1
 801ee7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ee7e:	ed82 7a00 	vstr	s14, [r2]
 801ee82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ee86:	edc2 7a01 	vstr	s15, [r2, #4]
 801ee8a:	e798      	b.n	801edbe <__kernel_rem_pio2f+0x3d2>
 801ee8c:	edd3 7a00 	vldr	s15, [r3]
 801ee90:	edd3 6a01 	vldr	s13, [r3, #4]
 801ee94:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ee98:	3a01      	subs	r2, #1
 801ee9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ee9e:	ed83 7a00 	vstr	s14, [r3]
 801eea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801eea6:	edc3 7a01 	vstr	s15, [r3, #4]
 801eeaa:	e78d      	b.n	801edc8 <__kernel_rem_pio2f+0x3dc>
 801eeac:	ed33 7a01 	vldmdb	r3!, {s14}
 801eeb0:	3c01      	subs	r4, #1
 801eeb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801eeb6:	e78f      	b.n	801edd8 <__kernel_rem_pio2f+0x3ec>
 801eeb8:	eef1 6a66 	vneg.f32	s13, s13
 801eebc:	eeb1 7a47 	vneg.f32	s14, s14
 801eec0:	edc7 6a00 	vstr	s13, [r7]
 801eec4:	ed87 7a01 	vstr	s14, [r7, #4]
 801eec8:	eef1 7a67 	vneg.f32	s15, s15
 801eecc:	e790      	b.n	801edf0 <__kernel_rem_pio2f+0x404>
 801eece:	bf00      	nop

0801eed0 <floorf>:
 801eed0:	ee10 3a10 	vmov	r3, s0
 801eed4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801eed8:	3a7f      	subs	r2, #127	@ 0x7f
 801eeda:	2a16      	cmp	r2, #22
 801eedc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801eee0:	dc2b      	bgt.n	801ef3a <floorf+0x6a>
 801eee2:	2a00      	cmp	r2, #0
 801eee4:	da12      	bge.n	801ef0c <floorf+0x3c>
 801eee6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801ef4c <floorf+0x7c>
 801eeea:	ee30 0a27 	vadd.f32	s0, s0, s15
 801eeee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801eef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eef6:	dd06      	ble.n	801ef06 <floorf+0x36>
 801eef8:	2b00      	cmp	r3, #0
 801eefa:	da24      	bge.n	801ef46 <floorf+0x76>
 801eefc:	2900      	cmp	r1, #0
 801eefe:	4b14      	ldr	r3, [pc, #80]	@ (801ef50 <floorf+0x80>)
 801ef00:	bf08      	it	eq
 801ef02:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801ef06:	ee00 3a10 	vmov	s0, r3
 801ef0a:	4770      	bx	lr
 801ef0c:	4911      	ldr	r1, [pc, #68]	@ (801ef54 <floorf+0x84>)
 801ef0e:	4111      	asrs	r1, r2
 801ef10:	420b      	tst	r3, r1
 801ef12:	d0fa      	beq.n	801ef0a <floorf+0x3a>
 801ef14:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801ef4c <floorf+0x7c>
 801ef18:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ef1c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ef20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef24:	ddef      	ble.n	801ef06 <floorf+0x36>
 801ef26:	2b00      	cmp	r3, #0
 801ef28:	bfbe      	ittt	lt
 801ef2a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801ef2e:	fa40 f202 	asrlt.w	r2, r0, r2
 801ef32:	189b      	addlt	r3, r3, r2
 801ef34:	ea23 0301 	bic.w	r3, r3, r1
 801ef38:	e7e5      	b.n	801ef06 <floorf+0x36>
 801ef3a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801ef3e:	d3e4      	bcc.n	801ef0a <floorf+0x3a>
 801ef40:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ef44:	4770      	bx	lr
 801ef46:	2300      	movs	r3, #0
 801ef48:	e7dd      	b.n	801ef06 <floorf+0x36>
 801ef4a:	bf00      	nop
 801ef4c:	7149f2ca 	.word	0x7149f2ca
 801ef50:	bf800000 	.word	0xbf800000
 801ef54:	007fffff 	.word	0x007fffff

0801ef58 <abort>:
 801ef58:	b508      	push	{r3, lr}
 801ef5a:	2006      	movs	r0, #6
 801ef5c:	f000 fe84 	bl	801fc68 <raise>
 801ef60:	2001      	movs	r0, #1
 801ef62:	f7e6 f8fb 	bl	800515c <_exit>
	...

0801ef68 <malloc>:
 801ef68:	4b02      	ldr	r3, [pc, #8]	@ (801ef74 <malloc+0xc>)
 801ef6a:	4601      	mov	r1, r0
 801ef6c:	6818      	ldr	r0, [r3, #0]
 801ef6e:	f000 b82d 	b.w	801efcc <_malloc_r>
 801ef72:	bf00      	nop
 801ef74:	200001b4 	.word	0x200001b4

0801ef78 <free>:
 801ef78:	4b02      	ldr	r3, [pc, #8]	@ (801ef84 <free+0xc>)
 801ef7a:	4601      	mov	r1, r0
 801ef7c:	6818      	ldr	r0, [r3, #0]
 801ef7e:	f001 bdc7 	b.w	8020b10 <_free_r>
 801ef82:	bf00      	nop
 801ef84:	200001b4 	.word	0x200001b4

0801ef88 <sbrk_aligned>:
 801ef88:	b570      	push	{r4, r5, r6, lr}
 801ef8a:	4e0f      	ldr	r6, [pc, #60]	@ (801efc8 <sbrk_aligned+0x40>)
 801ef8c:	460c      	mov	r4, r1
 801ef8e:	6831      	ldr	r1, [r6, #0]
 801ef90:	4605      	mov	r5, r0
 801ef92:	b911      	cbnz	r1, 801ef9a <sbrk_aligned+0x12>
 801ef94:	f000 ff12 	bl	801fdbc <_sbrk_r>
 801ef98:	6030      	str	r0, [r6, #0]
 801ef9a:	4621      	mov	r1, r4
 801ef9c:	4628      	mov	r0, r5
 801ef9e:	f000 ff0d 	bl	801fdbc <_sbrk_r>
 801efa2:	1c43      	adds	r3, r0, #1
 801efa4:	d103      	bne.n	801efae <sbrk_aligned+0x26>
 801efa6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801efaa:	4620      	mov	r0, r4
 801efac:	bd70      	pop	{r4, r5, r6, pc}
 801efae:	1cc4      	adds	r4, r0, #3
 801efb0:	f024 0403 	bic.w	r4, r4, #3
 801efb4:	42a0      	cmp	r0, r4
 801efb6:	d0f8      	beq.n	801efaa <sbrk_aligned+0x22>
 801efb8:	1a21      	subs	r1, r4, r0
 801efba:	4628      	mov	r0, r5
 801efbc:	f000 fefe 	bl	801fdbc <_sbrk_r>
 801efc0:	3001      	adds	r0, #1
 801efc2:	d1f2      	bne.n	801efaa <sbrk_aligned+0x22>
 801efc4:	e7ef      	b.n	801efa6 <sbrk_aligned+0x1e>
 801efc6:	bf00      	nop
 801efc8:	20017ba8 	.word	0x20017ba8

0801efcc <_malloc_r>:
 801efcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801efd0:	1ccd      	adds	r5, r1, #3
 801efd2:	f025 0503 	bic.w	r5, r5, #3
 801efd6:	3508      	adds	r5, #8
 801efd8:	2d0c      	cmp	r5, #12
 801efda:	bf38      	it	cc
 801efdc:	250c      	movcc	r5, #12
 801efde:	2d00      	cmp	r5, #0
 801efe0:	4606      	mov	r6, r0
 801efe2:	db01      	blt.n	801efe8 <_malloc_r+0x1c>
 801efe4:	42a9      	cmp	r1, r5
 801efe6:	d904      	bls.n	801eff2 <_malloc_r+0x26>
 801efe8:	230c      	movs	r3, #12
 801efea:	6033      	str	r3, [r6, #0]
 801efec:	2000      	movs	r0, #0
 801efee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eff2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801f0c8 <_malloc_r+0xfc>
 801eff6:	f000 f869 	bl	801f0cc <__malloc_lock>
 801effa:	f8d8 3000 	ldr.w	r3, [r8]
 801effe:	461c      	mov	r4, r3
 801f000:	bb44      	cbnz	r4, 801f054 <_malloc_r+0x88>
 801f002:	4629      	mov	r1, r5
 801f004:	4630      	mov	r0, r6
 801f006:	f7ff ffbf 	bl	801ef88 <sbrk_aligned>
 801f00a:	1c43      	adds	r3, r0, #1
 801f00c:	4604      	mov	r4, r0
 801f00e:	d158      	bne.n	801f0c2 <_malloc_r+0xf6>
 801f010:	f8d8 4000 	ldr.w	r4, [r8]
 801f014:	4627      	mov	r7, r4
 801f016:	2f00      	cmp	r7, #0
 801f018:	d143      	bne.n	801f0a2 <_malloc_r+0xd6>
 801f01a:	2c00      	cmp	r4, #0
 801f01c:	d04b      	beq.n	801f0b6 <_malloc_r+0xea>
 801f01e:	6823      	ldr	r3, [r4, #0]
 801f020:	4639      	mov	r1, r7
 801f022:	4630      	mov	r0, r6
 801f024:	eb04 0903 	add.w	r9, r4, r3
 801f028:	f000 fec8 	bl	801fdbc <_sbrk_r>
 801f02c:	4581      	cmp	r9, r0
 801f02e:	d142      	bne.n	801f0b6 <_malloc_r+0xea>
 801f030:	6821      	ldr	r1, [r4, #0]
 801f032:	1a6d      	subs	r5, r5, r1
 801f034:	4629      	mov	r1, r5
 801f036:	4630      	mov	r0, r6
 801f038:	f7ff ffa6 	bl	801ef88 <sbrk_aligned>
 801f03c:	3001      	adds	r0, #1
 801f03e:	d03a      	beq.n	801f0b6 <_malloc_r+0xea>
 801f040:	6823      	ldr	r3, [r4, #0]
 801f042:	442b      	add	r3, r5
 801f044:	6023      	str	r3, [r4, #0]
 801f046:	f8d8 3000 	ldr.w	r3, [r8]
 801f04a:	685a      	ldr	r2, [r3, #4]
 801f04c:	bb62      	cbnz	r2, 801f0a8 <_malloc_r+0xdc>
 801f04e:	f8c8 7000 	str.w	r7, [r8]
 801f052:	e00f      	b.n	801f074 <_malloc_r+0xa8>
 801f054:	6822      	ldr	r2, [r4, #0]
 801f056:	1b52      	subs	r2, r2, r5
 801f058:	d420      	bmi.n	801f09c <_malloc_r+0xd0>
 801f05a:	2a0b      	cmp	r2, #11
 801f05c:	d917      	bls.n	801f08e <_malloc_r+0xc2>
 801f05e:	1961      	adds	r1, r4, r5
 801f060:	42a3      	cmp	r3, r4
 801f062:	6025      	str	r5, [r4, #0]
 801f064:	bf18      	it	ne
 801f066:	6059      	strne	r1, [r3, #4]
 801f068:	6863      	ldr	r3, [r4, #4]
 801f06a:	bf08      	it	eq
 801f06c:	f8c8 1000 	streq.w	r1, [r8]
 801f070:	5162      	str	r2, [r4, r5]
 801f072:	604b      	str	r3, [r1, #4]
 801f074:	4630      	mov	r0, r6
 801f076:	f000 f82f 	bl	801f0d8 <__malloc_unlock>
 801f07a:	f104 000b 	add.w	r0, r4, #11
 801f07e:	1d23      	adds	r3, r4, #4
 801f080:	f020 0007 	bic.w	r0, r0, #7
 801f084:	1ac2      	subs	r2, r0, r3
 801f086:	bf1c      	itt	ne
 801f088:	1a1b      	subne	r3, r3, r0
 801f08a:	50a3      	strne	r3, [r4, r2]
 801f08c:	e7af      	b.n	801efee <_malloc_r+0x22>
 801f08e:	6862      	ldr	r2, [r4, #4]
 801f090:	42a3      	cmp	r3, r4
 801f092:	bf0c      	ite	eq
 801f094:	f8c8 2000 	streq.w	r2, [r8]
 801f098:	605a      	strne	r2, [r3, #4]
 801f09a:	e7eb      	b.n	801f074 <_malloc_r+0xa8>
 801f09c:	4623      	mov	r3, r4
 801f09e:	6864      	ldr	r4, [r4, #4]
 801f0a0:	e7ae      	b.n	801f000 <_malloc_r+0x34>
 801f0a2:	463c      	mov	r4, r7
 801f0a4:	687f      	ldr	r7, [r7, #4]
 801f0a6:	e7b6      	b.n	801f016 <_malloc_r+0x4a>
 801f0a8:	461a      	mov	r2, r3
 801f0aa:	685b      	ldr	r3, [r3, #4]
 801f0ac:	42a3      	cmp	r3, r4
 801f0ae:	d1fb      	bne.n	801f0a8 <_malloc_r+0xdc>
 801f0b0:	2300      	movs	r3, #0
 801f0b2:	6053      	str	r3, [r2, #4]
 801f0b4:	e7de      	b.n	801f074 <_malloc_r+0xa8>
 801f0b6:	230c      	movs	r3, #12
 801f0b8:	6033      	str	r3, [r6, #0]
 801f0ba:	4630      	mov	r0, r6
 801f0bc:	f000 f80c 	bl	801f0d8 <__malloc_unlock>
 801f0c0:	e794      	b.n	801efec <_malloc_r+0x20>
 801f0c2:	6005      	str	r5, [r0, #0]
 801f0c4:	e7d6      	b.n	801f074 <_malloc_r+0xa8>
 801f0c6:	bf00      	nop
 801f0c8:	20017bac 	.word	0x20017bac

0801f0cc <__malloc_lock>:
 801f0cc:	4801      	ldr	r0, [pc, #4]	@ (801f0d4 <__malloc_lock+0x8>)
 801f0ce:	f000 bec2 	b.w	801fe56 <__retarget_lock_acquire_recursive>
 801f0d2:	bf00      	nop
 801f0d4:	20017cf0 	.word	0x20017cf0

0801f0d8 <__malloc_unlock>:
 801f0d8:	4801      	ldr	r0, [pc, #4]	@ (801f0e0 <__malloc_unlock+0x8>)
 801f0da:	f000 bebd 	b.w	801fe58 <__retarget_lock_release_recursive>
 801f0de:	bf00      	nop
 801f0e0:	20017cf0 	.word	0x20017cf0

0801f0e4 <__cvt>:
 801f0e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f0e8:	ec57 6b10 	vmov	r6, r7, d0
 801f0ec:	2f00      	cmp	r7, #0
 801f0ee:	460c      	mov	r4, r1
 801f0f0:	4619      	mov	r1, r3
 801f0f2:	463b      	mov	r3, r7
 801f0f4:	bfbb      	ittet	lt
 801f0f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801f0fa:	461f      	movlt	r7, r3
 801f0fc:	2300      	movge	r3, #0
 801f0fe:	232d      	movlt	r3, #45	@ 0x2d
 801f100:	700b      	strb	r3, [r1, #0]
 801f102:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f104:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801f108:	4691      	mov	r9, r2
 801f10a:	f023 0820 	bic.w	r8, r3, #32
 801f10e:	bfbc      	itt	lt
 801f110:	4632      	movlt	r2, r6
 801f112:	4616      	movlt	r6, r2
 801f114:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801f118:	d005      	beq.n	801f126 <__cvt+0x42>
 801f11a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801f11e:	d100      	bne.n	801f122 <__cvt+0x3e>
 801f120:	3401      	adds	r4, #1
 801f122:	2102      	movs	r1, #2
 801f124:	e000      	b.n	801f128 <__cvt+0x44>
 801f126:	2103      	movs	r1, #3
 801f128:	ab03      	add	r3, sp, #12
 801f12a:	9301      	str	r3, [sp, #4]
 801f12c:	ab02      	add	r3, sp, #8
 801f12e:	9300      	str	r3, [sp, #0]
 801f130:	ec47 6b10 	vmov	d0, r6, r7
 801f134:	4653      	mov	r3, sl
 801f136:	4622      	mov	r2, r4
 801f138:	f000 ff26 	bl	801ff88 <_dtoa_r>
 801f13c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801f140:	4605      	mov	r5, r0
 801f142:	d119      	bne.n	801f178 <__cvt+0x94>
 801f144:	f019 0f01 	tst.w	r9, #1
 801f148:	d00e      	beq.n	801f168 <__cvt+0x84>
 801f14a:	eb00 0904 	add.w	r9, r0, r4
 801f14e:	2200      	movs	r2, #0
 801f150:	2300      	movs	r3, #0
 801f152:	4630      	mov	r0, r6
 801f154:	4639      	mov	r1, r7
 801f156:	f7e1 fcdf 	bl	8000b18 <__aeabi_dcmpeq>
 801f15a:	b108      	cbz	r0, 801f160 <__cvt+0x7c>
 801f15c:	f8cd 900c 	str.w	r9, [sp, #12]
 801f160:	2230      	movs	r2, #48	@ 0x30
 801f162:	9b03      	ldr	r3, [sp, #12]
 801f164:	454b      	cmp	r3, r9
 801f166:	d31e      	bcc.n	801f1a6 <__cvt+0xc2>
 801f168:	9b03      	ldr	r3, [sp, #12]
 801f16a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f16c:	1b5b      	subs	r3, r3, r5
 801f16e:	4628      	mov	r0, r5
 801f170:	6013      	str	r3, [r2, #0]
 801f172:	b004      	add	sp, #16
 801f174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f178:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801f17c:	eb00 0904 	add.w	r9, r0, r4
 801f180:	d1e5      	bne.n	801f14e <__cvt+0x6a>
 801f182:	7803      	ldrb	r3, [r0, #0]
 801f184:	2b30      	cmp	r3, #48	@ 0x30
 801f186:	d10a      	bne.n	801f19e <__cvt+0xba>
 801f188:	2200      	movs	r2, #0
 801f18a:	2300      	movs	r3, #0
 801f18c:	4630      	mov	r0, r6
 801f18e:	4639      	mov	r1, r7
 801f190:	f7e1 fcc2 	bl	8000b18 <__aeabi_dcmpeq>
 801f194:	b918      	cbnz	r0, 801f19e <__cvt+0xba>
 801f196:	f1c4 0401 	rsb	r4, r4, #1
 801f19a:	f8ca 4000 	str.w	r4, [sl]
 801f19e:	f8da 3000 	ldr.w	r3, [sl]
 801f1a2:	4499      	add	r9, r3
 801f1a4:	e7d3      	b.n	801f14e <__cvt+0x6a>
 801f1a6:	1c59      	adds	r1, r3, #1
 801f1a8:	9103      	str	r1, [sp, #12]
 801f1aa:	701a      	strb	r2, [r3, #0]
 801f1ac:	e7d9      	b.n	801f162 <__cvt+0x7e>

0801f1ae <__exponent>:
 801f1ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f1b0:	2900      	cmp	r1, #0
 801f1b2:	bfba      	itte	lt
 801f1b4:	4249      	neglt	r1, r1
 801f1b6:	232d      	movlt	r3, #45	@ 0x2d
 801f1b8:	232b      	movge	r3, #43	@ 0x2b
 801f1ba:	2909      	cmp	r1, #9
 801f1bc:	7002      	strb	r2, [r0, #0]
 801f1be:	7043      	strb	r3, [r0, #1]
 801f1c0:	dd29      	ble.n	801f216 <__exponent+0x68>
 801f1c2:	f10d 0307 	add.w	r3, sp, #7
 801f1c6:	461d      	mov	r5, r3
 801f1c8:	270a      	movs	r7, #10
 801f1ca:	461a      	mov	r2, r3
 801f1cc:	fbb1 f6f7 	udiv	r6, r1, r7
 801f1d0:	fb07 1416 	mls	r4, r7, r6, r1
 801f1d4:	3430      	adds	r4, #48	@ 0x30
 801f1d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 801f1da:	460c      	mov	r4, r1
 801f1dc:	2c63      	cmp	r4, #99	@ 0x63
 801f1de:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801f1e2:	4631      	mov	r1, r6
 801f1e4:	dcf1      	bgt.n	801f1ca <__exponent+0x1c>
 801f1e6:	3130      	adds	r1, #48	@ 0x30
 801f1e8:	1e94      	subs	r4, r2, #2
 801f1ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 801f1ee:	1c41      	adds	r1, r0, #1
 801f1f0:	4623      	mov	r3, r4
 801f1f2:	42ab      	cmp	r3, r5
 801f1f4:	d30a      	bcc.n	801f20c <__exponent+0x5e>
 801f1f6:	f10d 0309 	add.w	r3, sp, #9
 801f1fa:	1a9b      	subs	r3, r3, r2
 801f1fc:	42ac      	cmp	r4, r5
 801f1fe:	bf88      	it	hi
 801f200:	2300      	movhi	r3, #0
 801f202:	3302      	adds	r3, #2
 801f204:	4403      	add	r3, r0
 801f206:	1a18      	subs	r0, r3, r0
 801f208:	b003      	add	sp, #12
 801f20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f20c:	f813 6b01 	ldrb.w	r6, [r3], #1
 801f210:	f801 6f01 	strb.w	r6, [r1, #1]!
 801f214:	e7ed      	b.n	801f1f2 <__exponent+0x44>
 801f216:	2330      	movs	r3, #48	@ 0x30
 801f218:	3130      	adds	r1, #48	@ 0x30
 801f21a:	7083      	strb	r3, [r0, #2]
 801f21c:	70c1      	strb	r1, [r0, #3]
 801f21e:	1d03      	adds	r3, r0, #4
 801f220:	e7f1      	b.n	801f206 <__exponent+0x58>
	...

0801f224 <_printf_float>:
 801f224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f228:	b08d      	sub	sp, #52	@ 0x34
 801f22a:	460c      	mov	r4, r1
 801f22c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801f230:	4616      	mov	r6, r2
 801f232:	461f      	mov	r7, r3
 801f234:	4605      	mov	r5, r0
 801f236:	f000 fd1f 	bl	801fc78 <_localeconv_r>
 801f23a:	6803      	ldr	r3, [r0, #0]
 801f23c:	9304      	str	r3, [sp, #16]
 801f23e:	4618      	mov	r0, r3
 801f240:	f7e1 f83e 	bl	80002c0 <strlen>
 801f244:	2300      	movs	r3, #0
 801f246:	930a      	str	r3, [sp, #40]	@ 0x28
 801f248:	f8d8 3000 	ldr.w	r3, [r8]
 801f24c:	9005      	str	r0, [sp, #20]
 801f24e:	3307      	adds	r3, #7
 801f250:	f023 0307 	bic.w	r3, r3, #7
 801f254:	f103 0208 	add.w	r2, r3, #8
 801f258:	f894 a018 	ldrb.w	sl, [r4, #24]
 801f25c:	f8d4 b000 	ldr.w	fp, [r4]
 801f260:	f8c8 2000 	str.w	r2, [r8]
 801f264:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f268:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801f26c:	9307      	str	r3, [sp, #28]
 801f26e:	f8cd 8018 	str.w	r8, [sp, #24]
 801f272:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801f276:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f27a:	4b9c      	ldr	r3, [pc, #624]	@ (801f4ec <_printf_float+0x2c8>)
 801f27c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801f280:	f7e1 fc7c 	bl	8000b7c <__aeabi_dcmpun>
 801f284:	bb70      	cbnz	r0, 801f2e4 <_printf_float+0xc0>
 801f286:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f28a:	4b98      	ldr	r3, [pc, #608]	@ (801f4ec <_printf_float+0x2c8>)
 801f28c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801f290:	f7e1 fc56 	bl	8000b40 <__aeabi_dcmple>
 801f294:	bb30      	cbnz	r0, 801f2e4 <_printf_float+0xc0>
 801f296:	2200      	movs	r2, #0
 801f298:	2300      	movs	r3, #0
 801f29a:	4640      	mov	r0, r8
 801f29c:	4649      	mov	r1, r9
 801f29e:	f7e1 fc45 	bl	8000b2c <__aeabi_dcmplt>
 801f2a2:	b110      	cbz	r0, 801f2aa <_printf_float+0x86>
 801f2a4:	232d      	movs	r3, #45	@ 0x2d
 801f2a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801f2aa:	4a91      	ldr	r2, [pc, #580]	@ (801f4f0 <_printf_float+0x2cc>)
 801f2ac:	4b91      	ldr	r3, [pc, #580]	@ (801f4f4 <_printf_float+0x2d0>)
 801f2ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801f2b2:	bf94      	ite	ls
 801f2b4:	4690      	movls	r8, r2
 801f2b6:	4698      	movhi	r8, r3
 801f2b8:	2303      	movs	r3, #3
 801f2ba:	6123      	str	r3, [r4, #16]
 801f2bc:	f02b 0304 	bic.w	r3, fp, #4
 801f2c0:	6023      	str	r3, [r4, #0]
 801f2c2:	f04f 0900 	mov.w	r9, #0
 801f2c6:	9700      	str	r7, [sp, #0]
 801f2c8:	4633      	mov	r3, r6
 801f2ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 801f2cc:	4621      	mov	r1, r4
 801f2ce:	4628      	mov	r0, r5
 801f2d0:	f000 f9d2 	bl	801f678 <_printf_common>
 801f2d4:	3001      	adds	r0, #1
 801f2d6:	f040 808d 	bne.w	801f3f4 <_printf_float+0x1d0>
 801f2da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f2de:	b00d      	add	sp, #52	@ 0x34
 801f2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2e4:	4642      	mov	r2, r8
 801f2e6:	464b      	mov	r3, r9
 801f2e8:	4640      	mov	r0, r8
 801f2ea:	4649      	mov	r1, r9
 801f2ec:	f7e1 fc46 	bl	8000b7c <__aeabi_dcmpun>
 801f2f0:	b140      	cbz	r0, 801f304 <_printf_float+0xe0>
 801f2f2:	464b      	mov	r3, r9
 801f2f4:	2b00      	cmp	r3, #0
 801f2f6:	bfbc      	itt	lt
 801f2f8:	232d      	movlt	r3, #45	@ 0x2d
 801f2fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801f2fe:	4a7e      	ldr	r2, [pc, #504]	@ (801f4f8 <_printf_float+0x2d4>)
 801f300:	4b7e      	ldr	r3, [pc, #504]	@ (801f4fc <_printf_float+0x2d8>)
 801f302:	e7d4      	b.n	801f2ae <_printf_float+0x8a>
 801f304:	6863      	ldr	r3, [r4, #4]
 801f306:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801f30a:	9206      	str	r2, [sp, #24]
 801f30c:	1c5a      	adds	r2, r3, #1
 801f30e:	d13b      	bne.n	801f388 <_printf_float+0x164>
 801f310:	2306      	movs	r3, #6
 801f312:	6063      	str	r3, [r4, #4]
 801f314:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801f318:	2300      	movs	r3, #0
 801f31a:	6022      	str	r2, [r4, #0]
 801f31c:	9303      	str	r3, [sp, #12]
 801f31e:	ab0a      	add	r3, sp, #40	@ 0x28
 801f320:	e9cd a301 	strd	sl, r3, [sp, #4]
 801f324:	ab09      	add	r3, sp, #36	@ 0x24
 801f326:	9300      	str	r3, [sp, #0]
 801f328:	6861      	ldr	r1, [r4, #4]
 801f32a:	ec49 8b10 	vmov	d0, r8, r9
 801f32e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801f332:	4628      	mov	r0, r5
 801f334:	f7ff fed6 	bl	801f0e4 <__cvt>
 801f338:	9b06      	ldr	r3, [sp, #24]
 801f33a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f33c:	2b47      	cmp	r3, #71	@ 0x47
 801f33e:	4680      	mov	r8, r0
 801f340:	d129      	bne.n	801f396 <_printf_float+0x172>
 801f342:	1cc8      	adds	r0, r1, #3
 801f344:	db02      	blt.n	801f34c <_printf_float+0x128>
 801f346:	6863      	ldr	r3, [r4, #4]
 801f348:	4299      	cmp	r1, r3
 801f34a:	dd41      	ble.n	801f3d0 <_printf_float+0x1ac>
 801f34c:	f1aa 0a02 	sub.w	sl, sl, #2
 801f350:	fa5f fa8a 	uxtb.w	sl, sl
 801f354:	3901      	subs	r1, #1
 801f356:	4652      	mov	r2, sl
 801f358:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801f35c:	9109      	str	r1, [sp, #36]	@ 0x24
 801f35e:	f7ff ff26 	bl	801f1ae <__exponent>
 801f362:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f364:	1813      	adds	r3, r2, r0
 801f366:	2a01      	cmp	r2, #1
 801f368:	4681      	mov	r9, r0
 801f36a:	6123      	str	r3, [r4, #16]
 801f36c:	dc02      	bgt.n	801f374 <_printf_float+0x150>
 801f36e:	6822      	ldr	r2, [r4, #0]
 801f370:	07d2      	lsls	r2, r2, #31
 801f372:	d501      	bpl.n	801f378 <_printf_float+0x154>
 801f374:	3301      	adds	r3, #1
 801f376:	6123      	str	r3, [r4, #16]
 801f378:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801f37c:	2b00      	cmp	r3, #0
 801f37e:	d0a2      	beq.n	801f2c6 <_printf_float+0xa2>
 801f380:	232d      	movs	r3, #45	@ 0x2d
 801f382:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801f386:	e79e      	b.n	801f2c6 <_printf_float+0xa2>
 801f388:	9a06      	ldr	r2, [sp, #24]
 801f38a:	2a47      	cmp	r2, #71	@ 0x47
 801f38c:	d1c2      	bne.n	801f314 <_printf_float+0xf0>
 801f38e:	2b00      	cmp	r3, #0
 801f390:	d1c0      	bne.n	801f314 <_printf_float+0xf0>
 801f392:	2301      	movs	r3, #1
 801f394:	e7bd      	b.n	801f312 <_printf_float+0xee>
 801f396:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801f39a:	d9db      	bls.n	801f354 <_printf_float+0x130>
 801f39c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801f3a0:	d118      	bne.n	801f3d4 <_printf_float+0x1b0>
 801f3a2:	2900      	cmp	r1, #0
 801f3a4:	6863      	ldr	r3, [r4, #4]
 801f3a6:	dd0b      	ble.n	801f3c0 <_printf_float+0x19c>
 801f3a8:	6121      	str	r1, [r4, #16]
 801f3aa:	b913      	cbnz	r3, 801f3b2 <_printf_float+0x18e>
 801f3ac:	6822      	ldr	r2, [r4, #0]
 801f3ae:	07d0      	lsls	r0, r2, #31
 801f3b0:	d502      	bpl.n	801f3b8 <_printf_float+0x194>
 801f3b2:	3301      	adds	r3, #1
 801f3b4:	440b      	add	r3, r1
 801f3b6:	6123      	str	r3, [r4, #16]
 801f3b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 801f3ba:	f04f 0900 	mov.w	r9, #0
 801f3be:	e7db      	b.n	801f378 <_printf_float+0x154>
 801f3c0:	b913      	cbnz	r3, 801f3c8 <_printf_float+0x1a4>
 801f3c2:	6822      	ldr	r2, [r4, #0]
 801f3c4:	07d2      	lsls	r2, r2, #31
 801f3c6:	d501      	bpl.n	801f3cc <_printf_float+0x1a8>
 801f3c8:	3302      	adds	r3, #2
 801f3ca:	e7f4      	b.n	801f3b6 <_printf_float+0x192>
 801f3cc:	2301      	movs	r3, #1
 801f3ce:	e7f2      	b.n	801f3b6 <_printf_float+0x192>
 801f3d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801f3d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f3d6:	4299      	cmp	r1, r3
 801f3d8:	db05      	blt.n	801f3e6 <_printf_float+0x1c2>
 801f3da:	6823      	ldr	r3, [r4, #0]
 801f3dc:	6121      	str	r1, [r4, #16]
 801f3de:	07d8      	lsls	r0, r3, #31
 801f3e0:	d5ea      	bpl.n	801f3b8 <_printf_float+0x194>
 801f3e2:	1c4b      	adds	r3, r1, #1
 801f3e4:	e7e7      	b.n	801f3b6 <_printf_float+0x192>
 801f3e6:	2900      	cmp	r1, #0
 801f3e8:	bfd4      	ite	le
 801f3ea:	f1c1 0202 	rsble	r2, r1, #2
 801f3ee:	2201      	movgt	r2, #1
 801f3f0:	4413      	add	r3, r2
 801f3f2:	e7e0      	b.n	801f3b6 <_printf_float+0x192>
 801f3f4:	6823      	ldr	r3, [r4, #0]
 801f3f6:	055a      	lsls	r2, r3, #21
 801f3f8:	d407      	bmi.n	801f40a <_printf_float+0x1e6>
 801f3fa:	6923      	ldr	r3, [r4, #16]
 801f3fc:	4642      	mov	r2, r8
 801f3fe:	4631      	mov	r1, r6
 801f400:	4628      	mov	r0, r5
 801f402:	47b8      	blx	r7
 801f404:	3001      	adds	r0, #1
 801f406:	d12b      	bne.n	801f460 <_printf_float+0x23c>
 801f408:	e767      	b.n	801f2da <_printf_float+0xb6>
 801f40a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801f40e:	f240 80dd 	bls.w	801f5cc <_printf_float+0x3a8>
 801f412:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801f416:	2200      	movs	r2, #0
 801f418:	2300      	movs	r3, #0
 801f41a:	f7e1 fb7d 	bl	8000b18 <__aeabi_dcmpeq>
 801f41e:	2800      	cmp	r0, #0
 801f420:	d033      	beq.n	801f48a <_printf_float+0x266>
 801f422:	4a37      	ldr	r2, [pc, #220]	@ (801f500 <_printf_float+0x2dc>)
 801f424:	2301      	movs	r3, #1
 801f426:	4631      	mov	r1, r6
 801f428:	4628      	mov	r0, r5
 801f42a:	47b8      	blx	r7
 801f42c:	3001      	adds	r0, #1
 801f42e:	f43f af54 	beq.w	801f2da <_printf_float+0xb6>
 801f432:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801f436:	4543      	cmp	r3, r8
 801f438:	db02      	blt.n	801f440 <_printf_float+0x21c>
 801f43a:	6823      	ldr	r3, [r4, #0]
 801f43c:	07d8      	lsls	r0, r3, #31
 801f43e:	d50f      	bpl.n	801f460 <_printf_float+0x23c>
 801f440:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f444:	4631      	mov	r1, r6
 801f446:	4628      	mov	r0, r5
 801f448:	47b8      	blx	r7
 801f44a:	3001      	adds	r0, #1
 801f44c:	f43f af45 	beq.w	801f2da <_printf_float+0xb6>
 801f450:	f04f 0900 	mov.w	r9, #0
 801f454:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801f458:	f104 0a1a 	add.w	sl, r4, #26
 801f45c:	45c8      	cmp	r8, r9
 801f45e:	dc09      	bgt.n	801f474 <_printf_float+0x250>
 801f460:	6823      	ldr	r3, [r4, #0]
 801f462:	079b      	lsls	r3, r3, #30
 801f464:	f100 8103 	bmi.w	801f66e <_printf_float+0x44a>
 801f468:	68e0      	ldr	r0, [r4, #12]
 801f46a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f46c:	4298      	cmp	r0, r3
 801f46e:	bfb8      	it	lt
 801f470:	4618      	movlt	r0, r3
 801f472:	e734      	b.n	801f2de <_printf_float+0xba>
 801f474:	2301      	movs	r3, #1
 801f476:	4652      	mov	r2, sl
 801f478:	4631      	mov	r1, r6
 801f47a:	4628      	mov	r0, r5
 801f47c:	47b8      	blx	r7
 801f47e:	3001      	adds	r0, #1
 801f480:	f43f af2b 	beq.w	801f2da <_printf_float+0xb6>
 801f484:	f109 0901 	add.w	r9, r9, #1
 801f488:	e7e8      	b.n	801f45c <_printf_float+0x238>
 801f48a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	dc39      	bgt.n	801f504 <_printf_float+0x2e0>
 801f490:	4a1b      	ldr	r2, [pc, #108]	@ (801f500 <_printf_float+0x2dc>)
 801f492:	2301      	movs	r3, #1
 801f494:	4631      	mov	r1, r6
 801f496:	4628      	mov	r0, r5
 801f498:	47b8      	blx	r7
 801f49a:	3001      	adds	r0, #1
 801f49c:	f43f af1d 	beq.w	801f2da <_printf_float+0xb6>
 801f4a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801f4a4:	ea59 0303 	orrs.w	r3, r9, r3
 801f4a8:	d102      	bne.n	801f4b0 <_printf_float+0x28c>
 801f4aa:	6823      	ldr	r3, [r4, #0]
 801f4ac:	07d9      	lsls	r1, r3, #31
 801f4ae:	d5d7      	bpl.n	801f460 <_printf_float+0x23c>
 801f4b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f4b4:	4631      	mov	r1, r6
 801f4b6:	4628      	mov	r0, r5
 801f4b8:	47b8      	blx	r7
 801f4ba:	3001      	adds	r0, #1
 801f4bc:	f43f af0d 	beq.w	801f2da <_printf_float+0xb6>
 801f4c0:	f04f 0a00 	mov.w	sl, #0
 801f4c4:	f104 0b1a 	add.w	fp, r4, #26
 801f4c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4ca:	425b      	negs	r3, r3
 801f4cc:	4553      	cmp	r3, sl
 801f4ce:	dc01      	bgt.n	801f4d4 <_printf_float+0x2b0>
 801f4d0:	464b      	mov	r3, r9
 801f4d2:	e793      	b.n	801f3fc <_printf_float+0x1d8>
 801f4d4:	2301      	movs	r3, #1
 801f4d6:	465a      	mov	r2, fp
 801f4d8:	4631      	mov	r1, r6
 801f4da:	4628      	mov	r0, r5
 801f4dc:	47b8      	blx	r7
 801f4de:	3001      	adds	r0, #1
 801f4e0:	f43f aefb 	beq.w	801f2da <_printf_float+0xb6>
 801f4e4:	f10a 0a01 	add.w	sl, sl, #1
 801f4e8:	e7ee      	b.n	801f4c8 <_printf_float+0x2a4>
 801f4ea:	bf00      	nop
 801f4ec:	7fefffff 	.word	0x7fefffff
 801f4f0:	08022af8 	.word	0x08022af8
 801f4f4:	08022afc 	.word	0x08022afc
 801f4f8:	08022b00 	.word	0x08022b00
 801f4fc:	08022b04 	.word	0x08022b04
 801f500:	08022b08 	.word	0x08022b08
 801f504:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801f506:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801f50a:	4553      	cmp	r3, sl
 801f50c:	bfa8      	it	ge
 801f50e:	4653      	movge	r3, sl
 801f510:	2b00      	cmp	r3, #0
 801f512:	4699      	mov	r9, r3
 801f514:	dc36      	bgt.n	801f584 <_printf_float+0x360>
 801f516:	f04f 0b00 	mov.w	fp, #0
 801f51a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f51e:	f104 021a 	add.w	r2, r4, #26
 801f522:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801f524:	9306      	str	r3, [sp, #24]
 801f526:	eba3 0309 	sub.w	r3, r3, r9
 801f52a:	455b      	cmp	r3, fp
 801f52c:	dc31      	bgt.n	801f592 <_printf_float+0x36e>
 801f52e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f530:	459a      	cmp	sl, r3
 801f532:	dc3a      	bgt.n	801f5aa <_printf_float+0x386>
 801f534:	6823      	ldr	r3, [r4, #0]
 801f536:	07da      	lsls	r2, r3, #31
 801f538:	d437      	bmi.n	801f5aa <_printf_float+0x386>
 801f53a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f53c:	ebaa 0903 	sub.w	r9, sl, r3
 801f540:	9b06      	ldr	r3, [sp, #24]
 801f542:	ebaa 0303 	sub.w	r3, sl, r3
 801f546:	4599      	cmp	r9, r3
 801f548:	bfa8      	it	ge
 801f54a:	4699      	movge	r9, r3
 801f54c:	f1b9 0f00 	cmp.w	r9, #0
 801f550:	dc33      	bgt.n	801f5ba <_printf_float+0x396>
 801f552:	f04f 0800 	mov.w	r8, #0
 801f556:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f55a:	f104 0b1a 	add.w	fp, r4, #26
 801f55e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f560:	ebaa 0303 	sub.w	r3, sl, r3
 801f564:	eba3 0309 	sub.w	r3, r3, r9
 801f568:	4543      	cmp	r3, r8
 801f56a:	f77f af79 	ble.w	801f460 <_printf_float+0x23c>
 801f56e:	2301      	movs	r3, #1
 801f570:	465a      	mov	r2, fp
 801f572:	4631      	mov	r1, r6
 801f574:	4628      	mov	r0, r5
 801f576:	47b8      	blx	r7
 801f578:	3001      	adds	r0, #1
 801f57a:	f43f aeae 	beq.w	801f2da <_printf_float+0xb6>
 801f57e:	f108 0801 	add.w	r8, r8, #1
 801f582:	e7ec      	b.n	801f55e <_printf_float+0x33a>
 801f584:	4642      	mov	r2, r8
 801f586:	4631      	mov	r1, r6
 801f588:	4628      	mov	r0, r5
 801f58a:	47b8      	blx	r7
 801f58c:	3001      	adds	r0, #1
 801f58e:	d1c2      	bne.n	801f516 <_printf_float+0x2f2>
 801f590:	e6a3      	b.n	801f2da <_printf_float+0xb6>
 801f592:	2301      	movs	r3, #1
 801f594:	4631      	mov	r1, r6
 801f596:	4628      	mov	r0, r5
 801f598:	9206      	str	r2, [sp, #24]
 801f59a:	47b8      	blx	r7
 801f59c:	3001      	adds	r0, #1
 801f59e:	f43f ae9c 	beq.w	801f2da <_printf_float+0xb6>
 801f5a2:	9a06      	ldr	r2, [sp, #24]
 801f5a4:	f10b 0b01 	add.w	fp, fp, #1
 801f5a8:	e7bb      	b.n	801f522 <_printf_float+0x2fe>
 801f5aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f5ae:	4631      	mov	r1, r6
 801f5b0:	4628      	mov	r0, r5
 801f5b2:	47b8      	blx	r7
 801f5b4:	3001      	adds	r0, #1
 801f5b6:	d1c0      	bne.n	801f53a <_printf_float+0x316>
 801f5b8:	e68f      	b.n	801f2da <_printf_float+0xb6>
 801f5ba:	9a06      	ldr	r2, [sp, #24]
 801f5bc:	464b      	mov	r3, r9
 801f5be:	4442      	add	r2, r8
 801f5c0:	4631      	mov	r1, r6
 801f5c2:	4628      	mov	r0, r5
 801f5c4:	47b8      	blx	r7
 801f5c6:	3001      	adds	r0, #1
 801f5c8:	d1c3      	bne.n	801f552 <_printf_float+0x32e>
 801f5ca:	e686      	b.n	801f2da <_printf_float+0xb6>
 801f5cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801f5d0:	f1ba 0f01 	cmp.w	sl, #1
 801f5d4:	dc01      	bgt.n	801f5da <_printf_float+0x3b6>
 801f5d6:	07db      	lsls	r3, r3, #31
 801f5d8:	d536      	bpl.n	801f648 <_printf_float+0x424>
 801f5da:	2301      	movs	r3, #1
 801f5dc:	4642      	mov	r2, r8
 801f5de:	4631      	mov	r1, r6
 801f5e0:	4628      	mov	r0, r5
 801f5e2:	47b8      	blx	r7
 801f5e4:	3001      	adds	r0, #1
 801f5e6:	f43f ae78 	beq.w	801f2da <_printf_float+0xb6>
 801f5ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f5ee:	4631      	mov	r1, r6
 801f5f0:	4628      	mov	r0, r5
 801f5f2:	47b8      	blx	r7
 801f5f4:	3001      	adds	r0, #1
 801f5f6:	f43f ae70 	beq.w	801f2da <_printf_float+0xb6>
 801f5fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801f5fe:	2200      	movs	r2, #0
 801f600:	2300      	movs	r3, #0
 801f602:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801f606:	f7e1 fa87 	bl	8000b18 <__aeabi_dcmpeq>
 801f60a:	b9c0      	cbnz	r0, 801f63e <_printf_float+0x41a>
 801f60c:	4653      	mov	r3, sl
 801f60e:	f108 0201 	add.w	r2, r8, #1
 801f612:	4631      	mov	r1, r6
 801f614:	4628      	mov	r0, r5
 801f616:	47b8      	blx	r7
 801f618:	3001      	adds	r0, #1
 801f61a:	d10c      	bne.n	801f636 <_printf_float+0x412>
 801f61c:	e65d      	b.n	801f2da <_printf_float+0xb6>
 801f61e:	2301      	movs	r3, #1
 801f620:	465a      	mov	r2, fp
 801f622:	4631      	mov	r1, r6
 801f624:	4628      	mov	r0, r5
 801f626:	47b8      	blx	r7
 801f628:	3001      	adds	r0, #1
 801f62a:	f43f ae56 	beq.w	801f2da <_printf_float+0xb6>
 801f62e:	f108 0801 	add.w	r8, r8, #1
 801f632:	45d0      	cmp	r8, sl
 801f634:	dbf3      	blt.n	801f61e <_printf_float+0x3fa>
 801f636:	464b      	mov	r3, r9
 801f638:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801f63c:	e6df      	b.n	801f3fe <_printf_float+0x1da>
 801f63e:	f04f 0800 	mov.w	r8, #0
 801f642:	f104 0b1a 	add.w	fp, r4, #26
 801f646:	e7f4      	b.n	801f632 <_printf_float+0x40e>
 801f648:	2301      	movs	r3, #1
 801f64a:	4642      	mov	r2, r8
 801f64c:	e7e1      	b.n	801f612 <_printf_float+0x3ee>
 801f64e:	2301      	movs	r3, #1
 801f650:	464a      	mov	r2, r9
 801f652:	4631      	mov	r1, r6
 801f654:	4628      	mov	r0, r5
 801f656:	47b8      	blx	r7
 801f658:	3001      	adds	r0, #1
 801f65a:	f43f ae3e 	beq.w	801f2da <_printf_float+0xb6>
 801f65e:	f108 0801 	add.w	r8, r8, #1
 801f662:	68e3      	ldr	r3, [r4, #12]
 801f664:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f666:	1a5b      	subs	r3, r3, r1
 801f668:	4543      	cmp	r3, r8
 801f66a:	dcf0      	bgt.n	801f64e <_printf_float+0x42a>
 801f66c:	e6fc      	b.n	801f468 <_printf_float+0x244>
 801f66e:	f04f 0800 	mov.w	r8, #0
 801f672:	f104 0919 	add.w	r9, r4, #25
 801f676:	e7f4      	b.n	801f662 <_printf_float+0x43e>

0801f678 <_printf_common>:
 801f678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f67c:	4616      	mov	r6, r2
 801f67e:	4698      	mov	r8, r3
 801f680:	688a      	ldr	r2, [r1, #8]
 801f682:	690b      	ldr	r3, [r1, #16]
 801f684:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801f688:	4293      	cmp	r3, r2
 801f68a:	bfb8      	it	lt
 801f68c:	4613      	movlt	r3, r2
 801f68e:	6033      	str	r3, [r6, #0]
 801f690:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801f694:	4607      	mov	r7, r0
 801f696:	460c      	mov	r4, r1
 801f698:	b10a      	cbz	r2, 801f69e <_printf_common+0x26>
 801f69a:	3301      	adds	r3, #1
 801f69c:	6033      	str	r3, [r6, #0]
 801f69e:	6823      	ldr	r3, [r4, #0]
 801f6a0:	0699      	lsls	r1, r3, #26
 801f6a2:	bf42      	ittt	mi
 801f6a4:	6833      	ldrmi	r3, [r6, #0]
 801f6a6:	3302      	addmi	r3, #2
 801f6a8:	6033      	strmi	r3, [r6, #0]
 801f6aa:	6825      	ldr	r5, [r4, #0]
 801f6ac:	f015 0506 	ands.w	r5, r5, #6
 801f6b0:	d106      	bne.n	801f6c0 <_printf_common+0x48>
 801f6b2:	f104 0a19 	add.w	sl, r4, #25
 801f6b6:	68e3      	ldr	r3, [r4, #12]
 801f6b8:	6832      	ldr	r2, [r6, #0]
 801f6ba:	1a9b      	subs	r3, r3, r2
 801f6bc:	42ab      	cmp	r3, r5
 801f6be:	dc26      	bgt.n	801f70e <_printf_common+0x96>
 801f6c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801f6c4:	6822      	ldr	r2, [r4, #0]
 801f6c6:	3b00      	subs	r3, #0
 801f6c8:	bf18      	it	ne
 801f6ca:	2301      	movne	r3, #1
 801f6cc:	0692      	lsls	r2, r2, #26
 801f6ce:	d42b      	bmi.n	801f728 <_printf_common+0xb0>
 801f6d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801f6d4:	4641      	mov	r1, r8
 801f6d6:	4638      	mov	r0, r7
 801f6d8:	47c8      	blx	r9
 801f6da:	3001      	adds	r0, #1
 801f6dc:	d01e      	beq.n	801f71c <_printf_common+0xa4>
 801f6de:	6823      	ldr	r3, [r4, #0]
 801f6e0:	6922      	ldr	r2, [r4, #16]
 801f6e2:	f003 0306 	and.w	r3, r3, #6
 801f6e6:	2b04      	cmp	r3, #4
 801f6e8:	bf02      	ittt	eq
 801f6ea:	68e5      	ldreq	r5, [r4, #12]
 801f6ec:	6833      	ldreq	r3, [r6, #0]
 801f6ee:	1aed      	subeq	r5, r5, r3
 801f6f0:	68a3      	ldr	r3, [r4, #8]
 801f6f2:	bf0c      	ite	eq
 801f6f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f6f8:	2500      	movne	r5, #0
 801f6fa:	4293      	cmp	r3, r2
 801f6fc:	bfc4      	itt	gt
 801f6fe:	1a9b      	subgt	r3, r3, r2
 801f700:	18ed      	addgt	r5, r5, r3
 801f702:	2600      	movs	r6, #0
 801f704:	341a      	adds	r4, #26
 801f706:	42b5      	cmp	r5, r6
 801f708:	d11a      	bne.n	801f740 <_printf_common+0xc8>
 801f70a:	2000      	movs	r0, #0
 801f70c:	e008      	b.n	801f720 <_printf_common+0xa8>
 801f70e:	2301      	movs	r3, #1
 801f710:	4652      	mov	r2, sl
 801f712:	4641      	mov	r1, r8
 801f714:	4638      	mov	r0, r7
 801f716:	47c8      	blx	r9
 801f718:	3001      	adds	r0, #1
 801f71a:	d103      	bne.n	801f724 <_printf_common+0xac>
 801f71c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f724:	3501      	adds	r5, #1
 801f726:	e7c6      	b.n	801f6b6 <_printf_common+0x3e>
 801f728:	18e1      	adds	r1, r4, r3
 801f72a:	1c5a      	adds	r2, r3, #1
 801f72c:	2030      	movs	r0, #48	@ 0x30
 801f72e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801f732:	4422      	add	r2, r4
 801f734:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801f738:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801f73c:	3302      	adds	r3, #2
 801f73e:	e7c7      	b.n	801f6d0 <_printf_common+0x58>
 801f740:	2301      	movs	r3, #1
 801f742:	4622      	mov	r2, r4
 801f744:	4641      	mov	r1, r8
 801f746:	4638      	mov	r0, r7
 801f748:	47c8      	blx	r9
 801f74a:	3001      	adds	r0, #1
 801f74c:	d0e6      	beq.n	801f71c <_printf_common+0xa4>
 801f74e:	3601      	adds	r6, #1
 801f750:	e7d9      	b.n	801f706 <_printf_common+0x8e>
	...

0801f754 <_printf_i>:
 801f754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f758:	7e0f      	ldrb	r7, [r1, #24]
 801f75a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801f75c:	2f78      	cmp	r7, #120	@ 0x78
 801f75e:	4691      	mov	r9, r2
 801f760:	4680      	mov	r8, r0
 801f762:	460c      	mov	r4, r1
 801f764:	469a      	mov	sl, r3
 801f766:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801f76a:	d807      	bhi.n	801f77c <_printf_i+0x28>
 801f76c:	2f62      	cmp	r7, #98	@ 0x62
 801f76e:	d80a      	bhi.n	801f786 <_printf_i+0x32>
 801f770:	2f00      	cmp	r7, #0
 801f772:	f000 80d2 	beq.w	801f91a <_printf_i+0x1c6>
 801f776:	2f58      	cmp	r7, #88	@ 0x58
 801f778:	f000 80b9 	beq.w	801f8ee <_printf_i+0x19a>
 801f77c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801f780:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801f784:	e03a      	b.n	801f7fc <_printf_i+0xa8>
 801f786:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801f78a:	2b15      	cmp	r3, #21
 801f78c:	d8f6      	bhi.n	801f77c <_printf_i+0x28>
 801f78e:	a101      	add	r1, pc, #4	@ (adr r1, 801f794 <_printf_i+0x40>)
 801f790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f794:	0801f7ed 	.word	0x0801f7ed
 801f798:	0801f801 	.word	0x0801f801
 801f79c:	0801f77d 	.word	0x0801f77d
 801f7a0:	0801f77d 	.word	0x0801f77d
 801f7a4:	0801f77d 	.word	0x0801f77d
 801f7a8:	0801f77d 	.word	0x0801f77d
 801f7ac:	0801f801 	.word	0x0801f801
 801f7b0:	0801f77d 	.word	0x0801f77d
 801f7b4:	0801f77d 	.word	0x0801f77d
 801f7b8:	0801f77d 	.word	0x0801f77d
 801f7bc:	0801f77d 	.word	0x0801f77d
 801f7c0:	0801f901 	.word	0x0801f901
 801f7c4:	0801f82b 	.word	0x0801f82b
 801f7c8:	0801f8bb 	.word	0x0801f8bb
 801f7cc:	0801f77d 	.word	0x0801f77d
 801f7d0:	0801f77d 	.word	0x0801f77d
 801f7d4:	0801f923 	.word	0x0801f923
 801f7d8:	0801f77d 	.word	0x0801f77d
 801f7dc:	0801f82b 	.word	0x0801f82b
 801f7e0:	0801f77d 	.word	0x0801f77d
 801f7e4:	0801f77d 	.word	0x0801f77d
 801f7e8:	0801f8c3 	.word	0x0801f8c3
 801f7ec:	6833      	ldr	r3, [r6, #0]
 801f7ee:	1d1a      	adds	r2, r3, #4
 801f7f0:	681b      	ldr	r3, [r3, #0]
 801f7f2:	6032      	str	r2, [r6, #0]
 801f7f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801f7f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801f7fc:	2301      	movs	r3, #1
 801f7fe:	e09d      	b.n	801f93c <_printf_i+0x1e8>
 801f800:	6833      	ldr	r3, [r6, #0]
 801f802:	6820      	ldr	r0, [r4, #0]
 801f804:	1d19      	adds	r1, r3, #4
 801f806:	6031      	str	r1, [r6, #0]
 801f808:	0606      	lsls	r6, r0, #24
 801f80a:	d501      	bpl.n	801f810 <_printf_i+0xbc>
 801f80c:	681d      	ldr	r5, [r3, #0]
 801f80e:	e003      	b.n	801f818 <_printf_i+0xc4>
 801f810:	0645      	lsls	r5, r0, #25
 801f812:	d5fb      	bpl.n	801f80c <_printf_i+0xb8>
 801f814:	f9b3 5000 	ldrsh.w	r5, [r3]
 801f818:	2d00      	cmp	r5, #0
 801f81a:	da03      	bge.n	801f824 <_printf_i+0xd0>
 801f81c:	232d      	movs	r3, #45	@ 0x2d
 801f81e:	426d      	negs	r5, r5
 801f820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801f824:	4859      	ldr	r0, [pc, #356]	@ (801f98c <_printf_i+0x238>)
 801f826:	230a      	movs	r3, #10
 801f828:	e011      	b.n	801f84e <_printf_i+0xfa>
 801f82a:	6821      	ldr	r1, [r4, #0]
 801f82c:	6833      	ldr	r3, [r6, #0]
 801f82e:	0608      	lsls	r0, r1, #24
 801f830:	f853 5b04 	ldr.w	r5, [r3], #4
 801f834:	d402      	bmi.n	801f83c <_printf_i+0xe8>
 801f836:	0649      	lsls	r1, r1, #25
 801f838:	bf48      	it	mi
 801f83a:	b2ad      	uxthmi	r5, r5
 801f83c:	2f6f      	cmp	r7, #111	@ 0x6f
 801f83e:	4853      	ldr	r0, [pc, #332]	@ (801f98c <_printf_i+0x238>)
 801f840:	6033      	str	r3, [r6, #0]
 801f842:	bf14      	ite	ne
 801f844:	230a      	movne	r3, #10
 801f846:	2308      	moveq	r3, #8
 801f848:	2100      	movs	r1, #0
 801f84a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801f84e:	6866      	ldr	r6, [r4, #4]
 801f850:	60a6      	str	r6, [r4, #8]
 801f852:	2e00      	cmp	r6, #0
 801f854:	bfa2      	ittt	ge
 801f856:	6821      	ldrge	r1, [r4, #0]
 801f858:	f021 0104 	bicge.w	r1, r1, #4
 801f85c:	6021      	strge	r1, [r4, #0]
 801f85e:	b90d      	cbnz	r5, 801f864 <_printf_i+0x110>
 801f860:	2e00      	cmp	r6, #0
 801f862:	d04b      	beq.n	801f8fc <_printf_i+0x1a8>
 801f864:	4616      	mov	r6, r2
 801f866:	fbb5 f1f3 	udiv	r1, r5, r3
 801f86a:	fb03 5711 	mls	r7, r3, r1, r5
 801f86e:	5dc7      	ldrb	r7, [r0, r7]
 801f870:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801f874:	462f      	mov	r7, r5
 801f876:	42bb      	cmp	r3, r7
 801f878:	460d      	mov	r5, r1
 801f87a:	d9f4      	bls.n	801f866 <_printf_i+0x112>
 801f87c:	2b08      	cmp	r3, #8
 801f87e:	d10b      	bne.n	801f898 <_printf_i+0x144>
 801f880:	6823      	ldr	r3, [r4, #0]
 801f882:	07df      	lsls	r7, r3, #31
 801f884:	d508      	bpl.n	801f898 <_printf_i+0x144>
 801f886:	6923      	ldr	r3, [r4, #16]
 801f888:	6861      	ldr	r1, [r4, #4]
 801f88a:	4299      	cmp	r1, r3
 801f88c:	bfde      	ittt	le
 801f88e:	2330      	movle	r3, #48	@ 0x30
 801f890:	f806 3c01 	strble.w	r3, [r6, #-1]
 801f894:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801f898:	1b92      	subs	r2, r2, r6
 801f89a:	6122      	str	r2, [r4, #16]
 801f89c:	f8cd a000 	str.w	sl, [sp]
 801f8a0:	464b      	mov	r3, r9
 801f8a2:	aa03      	add	r2, sp, #12
 801f8a4:	4621      	mov	r1, r4
 801f8a6:	4640      	mov	r0, r8
 801f8a8:	f7ff fee6 	bl	801f678 <_printf_common>
 801f8ac:	3001      	adds	r0, #1
 801f8ae:	d14a      	bne.n	801f946 <_printf_i+0x1f2>
 801f8b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f8b4:	b004      	add	sp, #16
 801f8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f8ba:	6823      	ldr	r3, [r4, #0]
 801f8bc:	f043 0320 	orr.w	r3, r3, #32
 801f8c0:	6023      	str	r3, [r4, #0]
 801f8c2:	4833      	ldr	r0, [pc, #204]	@ (801f990 <_printf_i+0x23c>)
 801f8c4:	2778      	movs	r7, #120	@ 0x78
 801f8c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801f8ca:	6823      	ldr	r3, [r4, #0]
 801f8cc:	6831      	ldr	r1, [r6, #0]
 801f8ce:	061f      	lsls	r7, r3, #24
 801f8d0:	f851 5b04 	ldr.w	r5, [r1], #4
 801f8d4:	d402      	bmi.n	801f8dc <_printf_i+0x188>
 801f8d6:	065f      	lsls	r7, r3, #25
 801f8d8:	bf48      	it	mi
 801f8da:	b2ad      	uxthmi	r5, r5
 801f8dc:	6031      	str	r1, [r6, #0]
 801f8de:	07d9      	lsls	r1, r3, #31
 801f8e0:	bf44      	itt	mi
 801f8e2:	f043 0320 	orrmi.w	r3, r3, #32
 801f8e6:	6023      	strmi	r3, [r4, #0]
 801f8e8:	b11d      	cbz	r5, 801f8f2 <_printf_i+0x19e>
 801f8ea:	2310      	movs	r3, #16
 801f8ec:	e7ac      	b.n	801f848 <_printf_i+0xf4>
 801f8ee:	4827      	ldr	r0, [pc, #156]	@ (801f98c <_printf_i+0x238>)
 801f8f0:	e7e9      	b.n	801f8c6 <_printf_i+0x172>
 801f8f2:	6823      	ldr	r3, [r4, #0]
 801f8f4:	f023 0320 	bic.w	r3, r3, #32
 801f8f8:	6023      	str	r3, [r4, #0]
 801f8fa:	e7f6      	b.n	801f8ea <_printf_i+0x196>
 801f8fc:	4616      	mov	r6, r2
 801f8fe:	e7bd      	b.n	801f87c <_printf_i+0x128>
 801f900:	6833      	ldr	r3, [r6, #0]
 801f902:	6825      	ldr	r5, [r4, #0]
 801f904:	6961      	ldr	r1, [r4, #20]
 801f906:	1d18      	adds	r0, r3, #4
 801f908:	6030      	str	r0, [r6, #0]
 801f90a:	062e      	lsls	r6, r5, #24
 801f90c:	681b      	ldr	r3, [r3, #0]
 801f90e:	d501      	bpl.n	801f914 <_printf_i+0x1c0>
 801f910:	6019      	str	r1, [r3, #0]
 801f912:	e002      	b.n	801f91a <_printf_i+0x1c6>
 801f914:	0668      	lsls	r0, r5, #25
 801f916:	d5fb      	bpl.n	801f910 <_printf_i+0x1bc>
 801f918:	8019      	strh	r1, [r3, #0]
 801f91a:	2300      	movs	r3, #0
 801f91c:	6123      	str	r3, [r4, #16]
 801f91e:	4616      	mov	r6, r2
 801f920:	e7bc      	b.n	801f89c <_printf_i+0x148>
 801f922:	6833      	ldr	r3, [r6, #0]
 801f924:	1d1a      	adds	r2, r3, #4
 801f926:	6032      	str	r2, [r6, #0]
 801f928:	681e      	ldr	r6, [r3, #0]
 801f92a:	6862      	ldr	r2, [r4, #4]
 801f92c:	2100      	movs	r1, #0
 801f92e:	4630      	mov	r0, r6
 801f930:	f7e0 fc76 	bl	8000220 <memchr>
 801f934:	b108      	cbz	r0, 801f93a <_printf_i+0x1e6>
 801f936:	1b80      	subs	r0, r0, r6
 801f938:	6060      	str	r0, [r4, #4]
 801f93a:	6863      	ldr	r3, [r4, #4]
 801f93c:	6123      	str	r3, [r4, #16]
 801f93e:	2300      	movs	r3, #0
 801f940:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801f944:	e7aa      	b.n	801f89c <_printf_i+0x148>
 801f946:	6923      	ldr	r3, [r4, #16]
 801f948:	4632      	mov	r2, r6
 801f94a:	4649      	mov	r1, r9
 801f94c:	4640      	mov	r0, r8
 801f94e:	47d0      	blx	sl
 801f950:	3001      	adds	r0, #1
 801f952:	d0ad      	beq.n	801f8b0 <_printf_i+0x15c>
 801f954:	6823      	ldr	r3, [r4, #0]
 801f956:	079b      	lsls	r3, r3, #30
 801f958:	d413      	bmi.n	801f982 <_printf_i+0x22e>
 801f95a:	68e0      	ldr	r0, [r4, #12]
 801f95c:	9b03      	ldr	r3, [sp, #12]
 801f95e:	4298      	cmp	r0, r3
 801f960:	bfb8      	it	lt
 801f962:	4618      	movlt	r0, r3
 801f964:	e7a6      	b.n	801f8b4 <_printf_i+0x160>
 801f966:	2301      	movs	r3, #1
 801f968:	4632      	mov	r2, r6
 801f96a:	4649      	mov	r1, r9
 801f96c:	4640      	mov	r0, r8
 801f96e:	47d0      	blx	sl
 801f970:	3001      	adds	r0, #1
 801f972:	d09d      	beq.n	801f8b0 <_printf_i+0x15c>
 801f974:	3501      	adds	r5, #1
 801f976:	68e3      	ldr	r3, [r4, #12]
 801f978:	9903      	ldr	r1, [sp, #12]
 801f97a:	1a5b      	subs	r3, r3, r1
 801f97c:	42ab      	cmp	r3, r5
 801f97e:	dcf2      	bgt.n	801f966 <_printf_i+0x212>
 801f980:	e7eb      	b.n	801f95a <_printf_i+0x206>
 801f982:	2500      	movs	r5, #0
 801f984:	f104 0619 	add.w	r6, r4, #25
 801f988:	e7f5      	b.n	801f976 <_printf_i+0x222>
 801f98a:	bf00      	nop
 801f98c:	08022b0a 	.word	0x08022b0a
 801f990:	08022b1b 	.word	0x08022b1b

0801f994 <std>:
 801f994:	2300      	movs	r3, #0
 801f996:	b510      	push	{r4, lr}
 801f998:	4604      	mov	r4, r0
 801f99a:	e9c0 3300 	strd	r3, r3, [r0]
 801f99e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f9a2:	6083      	str	r3, [r0, #8]
 801f9a4:	8181      	strh	r1, [r0, #12]
 801f9a6:	6643      	str	r3, [r0, #100]	@ 0x64
 801f9a8:	81c2      	strh	r2, [r0, #14]
 801f9aa:	6183      	str	r3, [r0, #24]
 801f9ac:	4619      	mov	r1, r3
 801f9ae:	2208      	movs	r2, #8
 801f9b0:	305c      	adds	r0, #92	@ 0x5c
 801f9b2:	f000 f928 	bl	801fc06 <memset>
 801f9b6:	4b0d      	ldr	r3, [pc, #52]	@ (801f9ec <std+0x58>)
 801f9b8:	6263      	str	r3, [r4, #36]	@ 0x24
 801f9ba:	4b0d      	ldr	r3, [pc, #52]	@ (801f9f0 <std+0x5c>)
 801f9bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 801f9be:	4b0d      	ldr	r3, [pc, #52]	@ (801f9f4 <std+0x60>)
 801f9c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801f9c2:	4b0d      	ldr	r3, [pc, #52]	@ (801f9f8 <std+0x64>)
 801f9c4:	6323      	str	r3, [r4, #48]	@ 0x30
 801f9c6:	4b0d      	ldr	r3, [pc, #52]	@ (801f9fc <std+0x68>)
 801f9c8:	6224      	str	r4, [r4, #32]
 801f9ca:	429c      	cmp	r4, r3
 801f9cc:	d006      	beq.n	801f9dc <std+0x48>
 801f9ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801f9d2:	4294      	cmp	r4, r2
 801f9d4:	d002      	beq.n	801f9dc <std+0x48>
 801f9d6:	33d0      	adds	r3, #208	@ 0xd0
 801f9d8:	429c      	cmp	r4, r3
 801f9da:	d105      	bne.n	801f9e8 <std+0x54>
 801f9dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801f9e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f9e4:	f000 ba36 	b.w	801fe54 <__retarget_lock_init_recursive>
 801f9e8:	bd10      	pop	{r4, pc}
 801f9ea:	bf00      	nop
 801f9ec:	0801fb81 	.word	0x0801fb81
 801f9f0:	0801fba3 	.word	0x0801fba3
 801f9f4:	0801fbdb 	.word	0x0801fbdb
 801f9f8:	0801fbff 	.word	0x0801fbff
 801f9fc:	20017bb0 	.word	0x20017bb0

0801fa00 <stdio_exit_handler>:
 801fa00:	4a02      	ldr	r2, [pc, #8]	@ (801fa0c <stdio_exit_handler+0xc>)
 801fa02:	4903      	ldr	r1, [pc, #12]	@ (801fa10 <stdio_exit_handler+0x10>)
 801fa04:	4803      	ldr	r0, [pc, #12]	@ (801fa14 <stdio_exit_handler+0x14>)
 801fa06:	f000 b869 	b.w	801fadc <_fwalk_sglue>
 801fa0a:	bf00      	nop
 801fa0c:	200001a8 	.word	0x200001a8
 801fa10:	08021661 	.word	0x08021661
 801fa14:	200001b8 	.word	0x200001b8

0801fa18 <cleanup_stdio>:
 801fa18:	6841      	ldr	r1, [r0, #4]
 801fa1a:	4b0c      	ldr	r3, [pc, #48]	@ (801fa4c <cleanup_stdio+0x34>)
 801fa1c:	4299      	cmp	r1, r3
 801fa1e:	b510      	push	{r4, lr}
 801fa20:	4604      	mov	r4, r0
 801fa22:	d001      	beq.n	801fa28 <cleanup_stdio+0x10>
 801fa24:	f001 fe1c 	bl	8021660 <_fflush_r>
 801fa28:	68a1      	ldr	r1, [r4, #8]
 801fa2a:	4b09      	ldr	r3, [pc, #36]	@ (801fa50 <cleanup_stdio+0x38>)
 801fa2c:	4299      	cmp	r1, r3
 801fa2e:	d002      	beq.n	801fa36 <cleanup_stdio+0x1e>
 801fa30:	4620      	mov	r0, r4
 801fa32:	f001 fe15 	bl	8021660 <_fflush_r>
 801fa36:	68e1      	ldr	r1, [r4, #12]
 801fa38:	4b06      	ldr	r3, [pc, #24]	@ (801fa54 <cleanup_stdio+0x3c>)
 801fa3a:	4299      	cmp	r1, r3
 801fa3c:	d004      	beq.n	801fa48 <cleanup_stdio+0x30>
 801fa3e:	4620      	mov	r0, r4
 801fa40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fa44:	f001 be0c 	b.w	8021660 <_fflush_r>
 801fa48:	bd10      	pop	{r4, pc}
 801fa4a:	bf00      	nop
 801fa4c:	20017bb0 	.word	0x20017bb0
 801fa50:	20017c18 	.word	0x20017c18
 801fa54:	20017c80 	.word	0x20017c80

0801fa58 <global_stdio_init.part.0>:
 801fa58:	b510      	push	{r4, lr}
 801fa5a:	4b0b      	ldr	r3, [pc, #44]	@ (801fa88 <global_stdio_init.part.0+0x30>)
 801fa5c:	4c0b      	ldr	r4, [pc, #44]	@ (801fa8c <global_stdio_init.part.0+0x34>)
 801fa5e:	4a0c      	ldr	r2, [pc, #48]	@ (801fa90 <global_stdio_init.part.0+0x38>)
 801fa60:	601a      	str	r2, [r3, #0]
 801fa62:	4620      	mov	r0, r4
 801fa64:	2200      	movs	r2, #0
 801fa66:	2104      	movs	r1, #4
 801fa68:	f7ff ff94 	bl	801f994 <std>
 801fa6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801fa70:	2201      	movs	r2, #1
 801fa72:	2109      	movs	r1, #9
 801fa74:	f7ff ff8e 	bl	801f994 <std>
 801fa78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801fa7c:	2202      	movs	r2, #2
 801fa7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fa82:	2112      	movs	r1, #18
 801fa84:	f7ff bf86 	b.w	801f994 <std>
 801fa88:	20017ce8 	.word	0x20017ce8
 801fa8c:	20017bb0 	.word	0x20017bb0
 801fa90:	0801fa01 	.word	0x0801fa01

0801fa94 <__sfp_lock_acquire>:
 801fa94:	4801      	ldr	r0, [pc, #4]	@ (801fa9c <__sfp_lock_acquire+0x8>)
 801fa96:	f000 b9de 	b.w	801fe56 <__retarget_lock_acquire_recursive>
 801fa9a:	bf00      	nop
 801fa9c:	20017cf1 	.word	0x20017cf1

0801faa0 <__sfp_lock_release>:
 801faa0:	4801      	ldr	r0, [pc, #4]	@ (801faa8 <__sfp_lock_release+0x8>)
 801faa2:	f000 b9d9 	b.w	801fe58 <__retarget_lock_release_recursive>
 801faa6:	bf00      	nop
 801faa8:	20017cf1 	.word	0x20017cf1

0801faac <__sinit>:
 801faac:	b510      	push	{r4, lr}
 801faae:	4604      	mov	r4, r0
 801fab0:	f7ff fff0 	bl	801fa94 <__sfp_lock_acquire>
 801fab4:	6a23      	ldr	r3, [r4, #32]
 801fab6:	b11b      	cbz	r3, 801fac0 <__sinit+0x14>
 801fab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fabc:	f7ff bff0 	b.w	801faa0 <__sfp_lock_release>
 801fac0:	4b04      	ldr	r3, [pc, #16]	@ (801fad4 <__sinit+0x28>)
 801fac2:	6223      	str	r3, [r4, #32]
 801fac4:	4b04      	ldr	r3, [pc, #16]	@ (801fad8 <__sinit+0x2c>)
 801fac6:	681b      	ldr	r3, [r3, #0]
 801fac8:	2b00      	cmp	r3, #0
 801faca:	d1f5      	bne.n	801fab8 <__sinit+0xc>
 801facc:	f7ff ffc4 	bl	801fa58 <global_stdio_init.part.0>
 801fad0:	e7f2      	b.n	801fab8 <__sinit+0xc>
 801fad2:	bf00      	nop
 801fad4:	0801fa19 	.word	0x0801fa19
 801fad8:	20017ce8 	.word	0x20017ce8

0801fadc <_fwalk_sglue>:
 801fadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fae0:	4607      	mov	r7, r0
 801fae2:	4688      	mov	r8, r1
 801fae4:	4614      	mov	r4, r2
 801fae6:	2600      	movs	r6, #0
 801fae8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801faec:	f1b9 0901 	subs.w	r9, r9, #1
 801faf0:	d505      	bpl.n	801fafe <_fwalk_sglue+0x22>
 801faf2:	6824      	ldr	r4, [r4, #0]
 801faf4:	2c00      	cmp	r4, #0
 801faf6:	d1f7      	bne.n	801fae8 <_fwalk_sglue+0xc>
 801faf8:	4630      	mov	r0, r6
 801fafa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fafe:	89ab      	ldrh	r3, [r5, #12]
 801fb00:	2b01      	cmp	r3, #1
 801fb02:	d907      	bls.n	801fb14 <_fwalk_sglue+0x38>
 801fb04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fb08:	3301      	adds	r3, #1
 801fb0a:	d003      	beq.n	801fb14 <_fwalk_sglue+0x38>
 801fb0c:	4629      	mov	r1, r5
 801fb0e:	4638      	mov	r0, r7
 801fb10:	47c0      	blx	r8
 801fb12:	4306      	orrs	r6, r0
 801fb14:	3568      	adds	r5, #104	@ 0x68
 801fb16:	e7e9      	b.n	801faec <_fwalk_sglue+0x10>

0801fb18 <sniprintf>:
 801fb18:	b40c      	push	{r2, r3}
 801fb1a:	b530      	push	{r4, r5, lr}
 801fb1c:	4b17      	ldr	r3, [pc, #92]	@ (801fb7c <sniprintf+0x64>)
 801fb1e:	1e0c      	subs	r4, r1, #0
 801fb20:	681d      	ldr	r5, [r3, #0]
 801fb22:	b09d      	sub	sp, #116	@ 0x74
 801fb24:	da08      	bge.n	801fb38 <sniprintf+0x20>
 801fb26:	238b      	movs	r3, #139	@ 0x8b
 801fb28:	602b      	str	r3, [r5, #0]
 801fb2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fb2e:	b01d      	add	sp, #116	@ 0x74
 801fb30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fb34:	b002      	add	sp, #8
 801fb36:	4770      	bx	lr
 801fb38:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801fb3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801fb40:	bf14      	ite	ne
 801fb42:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801fb46:	4623      	moveq	r3, r4
 801fb48:	9304      	str	r3, [sp, #16]
 801fb4a:	9307      	str	r3, [sp, #28]
 801fb4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801fb50:	9002      	str	r0, [sp, #8]
 801fb52:	9006      	str	r0, [sp, #24]
 801fb54:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fb58:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801fb5a:	ab21      	add	r3, sp, #132	@ 0x84
 801fb5c:	a902      	add	r1, sp, #8
 801fb5e:	4628      	mov	r0, r5
 801fb60:	9301      	str	r3, [sp, #4]
 801fb62:	f001 fbfd 	bl	8021360 <_svfiprintf_r>
 801fb66:	1c43      	adds	r3, r0, #1
 801fb68:	bfbc      	itt	lt
 801fb6a:	238b      	movlt	r3, #139	@ 0x8b
 801fb6c:	602b      	strlt	r3, [r5, #0]
 801fb6e:	2c00      	cmp	r4, #0
 801fb70:	d0dd      	beq.n	801fb2e <sniprintf+0x16>
 801fb72:	9b02      	ldr	r3, [sp, #8]
 801fb74:	2200      	movs	r2, #0
 801fb76:	701a      	strb	r2, [r3, #0]
 801fb78:	e7d9      	b.n	801fb2e <sniprintf+0x16>
 801fb7a:	bf00      	nop
 801fb7c:	200001b4 	.word	0x200001b4

0801fb80 <__sread>:
 801fb80:	b510      	push	{r4, lr}
 801fb82:	460c      	mov	r4, r1
 801fb84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fb88:	f000 f8f2 	bl	801fd70 <_read_r>
 801fb8c:	2800      	cmp	r0, #0
 801fb8e:	bfab      	itete	ge
 801fb90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801fb92:	89a3      	ldrhlt	r3, [r4, #12]
 801fb94:	181b      	addge	r3, r3, r0
 801fb96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801fb9a:	bfac      	ite	ge
 801fb9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801fb9e:	81a3      	strhlt	r3, [r4, #12]
 801fba0:	bd10      	pop	{r4, pc}

0801fba2 <__swrite>:
 801fba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fba6:	461f      	mov	r7, r3
 801fba8:	898b      	ldrh	r3, [r1, #12]
 801fbaa:	05db      	lsls	r3, r3, #23
 801fbac:	4605      	mov	r5, r0
 801fbae:	460c      	mov	r4, r1
 801fbb0:	4616      	mov	r6, r2
 801fbb2:	d505      	bpl.n	801fbc0 <__swrite+0x1e>
 801fbb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fbb8:	2302      	movs	r3, #2
 801fbba:	2200      	movs	r2, #0
 801fbbc:	f000 f8c6 	bl	801fd4c <_lseek_r>
 801fbc0:	89a3      	ldrh	r3, [r4, #12]
 801fbc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fbc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801fbca:	81a3      	strh	r3, [r4, #12]
 801fbcc:	4632      	mov	r2, r6
 801fbce:	463b      	mov	r3, r7
 801fbd0:	4628      	mov	r0, r5
 801fbd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fbd6:	f000 b901 	b.w	801fddc <_write_r>

0801fbda <__sseek>:
 801fbda:	b510      	push	{r4, lr}
 801fbdc:	460c      	mov	r4, r1
 801fbde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fbe2:	f000 f8b3 	bl	801fd4c <_lseek_r>
 801fbe6:	1c43      	adds	r3, r0, #1
 801fbe8:	89a3      	ldrh	r3, [r4, #12]
 801fbea:	bf15      	itete	ne
 801fbec:	6560      	strne	r0, [r4, #84]	@ 0x54
 801fbee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801fbf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801fbf6:	81a3      	strheq	r3, [r4, #12]
 801fbf8:	bf18      	it	ne
 801fbfa:	81a3      	strhne	r3, [r4, #12]
 801fbfc:	bd10      	pop	{r4, pc}

0801fbfe <__sclose>:
 801fbfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fc02:	f000 b83d 	b.w	801fc80 <_close_r>

0801fc06 <memset>:
 801fc06:	4402      	add	r2, r0
 801fc08:	4603      	mov	r3, r0
 801fc0a:	4293      	cmp	r3, r2
 801fc0c:	d100      	bne.n	801fc10 <memset+0xa>
 801fc0e:	4770      	bx	lr
 801fc10:	f803 1b01 	strb.w	r1, [r3], #1
 801fc14:	e7f9      	b.n	801fc0a <memset+0x4>

0801fc16 <_raise_r>:
 801fc16:	291f      	cmp	r1, #31
 801fc18:	b538      	push	{r3, r4, r5, lr}
 801fc1a:	4605      	mov	r5, r0
 801fc1c:	460c      	mov	r4, r1
 801fc1e:	d904      	bls.n	801fc2a <_raise_r+0x14>
 801fc20:	2316      	movs	r3, #22
 801fc22:	6003      	str	r3, [r0, #0]
 801fc24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fc28:	bd38      	pop	{r3, r4, r5, pc}
 801fc2a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801fc2c:	b112      	cbz	r2, 801fc34 <_raise_r+0x1e>
 801fc2e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fc32:	b94b      	cbnz	r3, 801fc48 <_raise_r+0x32>
 801fc34:	4628      	mov	r0, r5
 801fc36:	f000 f8bf 	bl	801fdb8 <_getpid_r>
 801fc3a:	4622      	mov	r2, r4
 801fc3c:	4601      	mov	r1, r0
 801fc3e:	4628      	mov	r0, r5
 801fc40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fc44:	f000 b8a6 	b.w	801fd94 <_kill_r>
 801fc48:	2b01      	cmp	r3, #1
 801fc4a:	d00a      	beq.n	801fc62 <_raise_r+0x4c>
 801fc4c:	1c59      	adds	r1, r3, #1
 801fc4e:	d103      	bne.n	801fc58 <_raise_r+0x42>
 801fc50:	2316      	movs	r3, #22
 801fc52:	6003      	str	r3, [r0, #0]
 801fc54:	2001      	movs	r0, #1
 801fc56:	e7e7      	b.n	801fc28 <_raise_r+0x12>
 801fc58:	2100      	movs	r1, #0
 801fc5a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801fc5e:	4620      	mov	r0, r4
 801fc60:	4798      	blx	r3
 801fc62:	2000      	movs	r0, #0
 801fc64:	e7e0      	b.n	801fc28 <_raise_r+0x12>
	...

0801fc68 <raise>:
 801fc68:	4b02      	ldr	r3, [pc, #8]	@ (801fc74 <raise+0xc>)
 801fc6a:	4601      	mov	r1, r0
 801fc6c:	6818      	ldr	r0, [r3, #0]
 801fc6e:	f7ff bfd2 	b.w	801fc16 <_raise_r>
 801fc72:	bf00      	nop
 801fc74:	200001b4 	.word	0x200001b4

0801fc78 <_localeconv_r>:
 801fc78:	4800      	ldr	r0, [pc, #0]	@ (801fc7c <_localeconv_r+0x4>)
 801fc7a:	4770      	bx	lr
 801fc7c:	200002f4 	.word	0x200002f4

0801fc80 <_close_r>:
 801fc80:	b538      	push	{r3, r4, r5, lr}
 801fc82:	4d06      	ldr	r5, [pc, #24]	@ (801fc9c <_close_r+0x1c>)
 801fc84:	2300      	movs	r3, #0
 801fc86:	4604      	mov	r4, r0
 801fc88:	4608      	mov	r0, r1
 801fc8a:	602b      	str	r3, [r5, #0]
 801fc8c:	f7e5 faaa 	bl	80051e4 <_close>
 801fc90:	1c43      	adds	r3, r0, #1
 801fc92:	d102      	bne.n	801fc9a <_close_r+0x1a>
 801fc94:	682b      	ldr	r3, [r5, #0]
 801fc96:	b103      	cbz	r3, 801fc9a <_close_r+0x1a>
 801fc98:	6023      	str	r3, [r4, #0]
 801fc9a:	bd38      	pop	{r3, r4, r5, pc}
 801fc9c:	20017cec 	.word	0x20017cec

0801fca0 <_reclaim_reent>:
 801fca0:	4b29      	ldr	r3, [pc, #164]	@ (801fd48 <_reclaim_reent+0xa8>)
 801fca2:	681b      	ldr	r3, [r3, #0]
 801fca4:	4283      	cmp	r3, r0
 801fca6:	b570      	push	{r4, r5, r6, lr}
 801fca8:	4604      	mov	r4, r0
 801fcaa:	d04b      	beq.n	801fd44 <_reclaim_reent+0xa4>
 801fcac:	69c3      	ldr	r3, [r0, #28]
 801fcae:	b1ab      	cbz	r3, 801fcdc <_reclaim_reent+0x3c>
 801fcb0:	68db      	ldr	r3, [r3, #12]
 801fcb2:	b16b      	cbz	r3, 801fcd0 <_reclaim_reent+0x30>
 801fcb4:	2500      	movs	r5, #0
 801fcb6:	69e3      	ldr	r3, [r4, #28]
 801fcb8:	68db      	ldr	r3, [r3, #12]
 801fcba:	5959      	ldr	r1, [r3, r5]
 801fcbc:	2900      	cmp	r1, #0
 801fcbe:	d13b      	bne.n	801fd38 <_reclaim_reent+0x98>
 801fcc0:	3504      	adds	r5, #4
 801fcc2:	2d80      	cmp	r5, #128	@ 0x80
 801fcc4:	d1f7      	bne.n	801fcb6 <_reclaim_reent+0x16>
 801fcc6:	69e3      	ldr	r3, [r4, #28]
 801fcc8:	4620      	mov	r0, r4
 801fcca:	68d9      	ldr	r1, [r3, #12]
 801fccc:	f000 ff20 	bl	8020b10 <_free_r>
 801fcd0:	69e3      	ldr	r3, [r4, #28]
 801fcd2:	6819      	ldr	r1, [r3, #0]
 801fcd4:	b111      	cbz	r1, 801fcdc <_reclaim_reent+0x3c>
 801fcd6:	4620      	mov	r0, r4
 801fcd8:	f000 ff1a 	bl	8020b10 <_free_r>
 801fcdc:	6961      	ldr	r1, [r4, #20]
 801fcde:	b111      	cbz	r1, 801fce6 <_reclaim_reent+0x46>
 801fce0:	4620      	mov	r0, r4
 801fce2:	f000 ff15 	bl	8020b10 <_free_r>
 801fce6:	69e1      	ldr	r1, [r4, #28]
 801fce8:	b111      	cbz	r1, 801fcf0 <_reclaim_reent+0x50>
 801fcea:	4620      	mov	r0, r4
 801fcec:	f000 ff10 	bl	8020b10 <_free_r>
 801fcf0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801fcf2:	b111      	cbz	r1, 801fcfa <_reclaim_reent+0x5a>
 801fcf4:	4620      	mov	r0, r4
 801fcf6:	f000 ff0b 	bl	8020b10 <_free_r>
 801fcfa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801fcfc:	b111      	cbz	r1, 801fd04 <_reclaim_reent+0x64>
 801fcfe:	4620      	mov	r0, r4
 801fd00:	f000 ff06 	bl	8020b10 <_free_r>
 801fd04:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801fd06:	b111      	cbz	r1, 801fd0e <_reclaim_reent+0x6e>
 801fd08:	4620      	mov	r0, r4
 801fd0a:	f000 ff01 	bl	8020b10 <_free_r>
 801fd0e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801fd10:	b111      	cbz	r1, 801fd18 <_reclaim_reent+0x78>
 801fd12:	4620      	mov	r0, r4
 801fd14:	f000 fefc 	bl	8020b10 <_free_r>
 801fd18:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801fd1a:	b111      	cbz	r1, 801fd22 <_reclaim_reent+0x82>
 801fd1c:	4620      	mov	r0, r4
 801fd1e:	f000 fef7 	bl	8020b10 <_free_r>
 801fd22:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801fd24:	b111      	cbz	r1, 801fd2c <_reclaim_reent+0x8c>
 801fd26:	4620      	mov	r0, r4
 801fd28:	f000 fef2 	bl	8020b10 <_free_r>
 801fd2c:	6a23      	ldr	r3, [r4, #32]
 801fd2e:	b14b      	cbz	r3, 801fd44 <_reclaim_reent+0xa4>
 801fd30:	4620      	mov	r0, r4
 801fd32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fd36:	4718      	bx	r3
 801fd38:	680e      	ldr	r6, [r1, #0]
 801fd3a:	4620      	mov	r0, r4
 801fd3c:	f000 fee8 	bl	8020b10 <_free_r>
 801fd40:	4631      	mov	r1, r6
 801fd42:	e7bb      	b.n	801fcbc <_reclaim_reent+0x1c>
 801fd44:	bd70      	pop	{r4, r5, r6, pc}
 801fd46:	bf00      	nop
 801fd48:	200001b4 	.word	0x200001b4

0801fd4c <_lseek_r>:
 801fd4c:	b538      	push	{r3, r4, r5, lr}
 801fd4e:	4d07      	ldr	r5, [pc, #28]	@ (801fd6c <_lseek_r+0x20>)
 801fd50:	4604      	mov	r4, r0
 801fd52:	4608      	mov	r0, r1
 801fd54:	4611      	mov	r1, r2
 801fd56:	2200      	movs	r2, #0
 801fd58:	602a      	str	r2, [r5, #0]
 801fd5a:	461a      	mov	r2, r3
 801fd5c:	f7e5 fa69 	bl	8005232 <_lseek>
 801fd60:	1c43      	adds	r3, r0, #1
 801fd62:	d102      	bne.n	801fd6a <_lseek_r+0x1e>
 801fd64:	682b      	ldr	r3, [r5, #0]
 801fd66:	b103      	cbz	r3, 801fd6a <_lseek_r+0x1e>
 801fd68:	6023      	str	r3, [r4, #0]
 801fd6a:	bd38      	pop	{r3, r4, r5, pc}
 801fd6c:	20017cec 	.word	0x20017cec

0801fd70 <_read_r>:
 801fd70:	b538      	push	{r3, r4, r5, lr}
 801fd72:	4d07      	ldr	r5, [pc, #28]	@ (801fd90 <_read_r+0x20>)
 801fd74:	4604      	mov	r4, r0
 801fd76:	4608      	mov	r0, r1
 801fd78:	4611      	mov	r1, r2
 801fd7a:	2200      	movs	r2, #0
 801fd7c:	602a      	str	r2, [r5, #0]
 801fd7e:	461a      	mov	r2, r3
 801fd80:	f7e5 f9f7 	bl	8005172 <_read>
 801fd84:	1c43      	adds	r3, r0, #1
 801fd86:	d102      	bne.n	801fd8e <_read_r+0x1e>
 801fd88:	682b      	ldr	r3, [r5, #0]
 801fd8a:	b103      	cbz	r3, 801fd8e <_read_r+0x1e>
 801fd8c:	6023      	str	r3, [r4, #0]
 801fd8e:	bd38      	pop	{r3, r4, r5, pc}
 801fd90:	20017cec 	.word	0x20017cec

0801fd94 <_kill_r>:
 801fd94:	b538      	push	{r3, r4, r5, lr}
 801fd96:	4d07      	ldr	r5, [pc, #28]	@ (801fdb4 <_kill_r+0x20>)
 801fd98:	2300      	movs	r3, #0
 801fd9a:	4604      	mov	r4, r0
 801fd9c:	4608      	mov	r0, r1
 801fd9e:	4611      	mov	r1, r2
 801fda0:	602b      	str	r3, [r5, #0]
 801fda2:	f7e5 f9cb 	bl	800513c <_kill>
 801fda6:	1c43      	adds	r3, r0, #1
 801fda8:	d102      	bne.n	801fdb0 <_kill_r+0x1c>
 801fdaa:	682b      	ldr	r3, [r5, #0]
 801fdac:	b103      	cbz	r3, 801fdb0 <_kill_r+0x1c>
 801fdae:	6023      	str	r3, [r4, #0]
 801fdb0:	bd38      	pop	{r3, r4, r5, pc}
 801fdb2:	bf00      	nop
 801fdb4:	20017cec 	.word	0x20017cec

0801fdb8 <_getpid_r>:
 801fdb8:	f7e5 b9b8 	b.w	800512c <_getpid>

0801fdbc <_sbrk_r>:
 801fdbc:	b538      	push	{r3, r4, r5, lr}
 801fdbe:	4d06      	ldr	r5, [pc, #24]	@ (801fdd8 <_sbrk_r+0x1c>)
 801fdc0:	2300      	movs	r3, #0
 801fdc2:	4604      	mov	r4, r0
 801fdc4:	4608      	mov	r0, r1
 801fdc6:	602b      	str	r3, [r5, #0]
 801fdc8:	f7e5 fa40 	bl	800524c <_sbrk>
 801fdcc:	1c43      	adds	r3, r0, #1
 801fdce:	d102      	bne.n	801fdd6 <_sbrk_r+0x1a>
 801fdd0:	682b      	ldr	r3, [r5, #0]
 801fdd2:	b103      	cbz	r3, 801fdd6 <_sbrk_r+0x1a>
 801fdd4:	6023      	str	r3, [r4, #0]
 801fdd6:	bd38      	pop	{r3, r4, r5, pc}
 801fdd8:	20017cec 	.word	0x20017cec

0801fddc <_write_r>:
 801fddc:	b538      	push	{r3, r4, r5, lr}
 801fdde:	4d07      	ldr	r5, [pc, #28]	@ (801fdfc <_write_r+0x20>)
 801fde0:	4604      	mov	r4, r0
 801fde2:	4608      	mov	r0, r1
 801fde4:	4611      	mov	r1, r2
 801fde6:	2200      	movs	r2, #0
 801fde8:	602a      	str	r2, [r5, #0]
 801fdea:	461a      	mov	r2, r3
 801fdec:	f7e5 f9de 	bl	80051ac <_write>
 801fdf0:	1c43      	adds	r3, r0, #1
 801fdf2:	d102      	bne.n	801fdfa <_write_r+0x1e>
 801fdf4:	682b      	ldr	r3, [r5, #0]
 801fdf6:	b103      	cbz	r3, 801fdfa <_write_r+0x1e>
 801fdf8:	6023      	str	r3, [r4, #0]
 801fdfa:	bd38      	pop	{r3, r4, r5, pc}
 801fdfc:	20017cec 	.word	0x20017cec

0801fe00 <__errno>:
 801fe00:	4b01      	ldr	r3, [pc, #4]	@ (801fe08 <__errno+0x8>)
 801fe02:	6818      	ldr	r0, [r3, #0]
 801fe04:	4770      	bx	lr
 801fe06:	bf00      	nop
 801fe08:	200001b4 	.word	0x200001b4

0801fe0c <__libc_init_array>:
 801fe0c:	b570      	push	{r4, r5, r6, lr}
 801fe0e:	4d0d      	ldr	r5, [pc, #52]	@ (801fe44 <__libc_init_array+0x38>)
 801fe10:	4c0d      	ldr	r4, [pc, #52]	@ (801fe48 <__libc_init_array+0x3c>)
 801fe12:	1b64      	subs	r4, r4, r5
 801fe14:	10a4      	asrs	r4, r4, #2
 801fe16:	2600      	movs	r6, #0
 801fe18:	42a6      	cmp	r6, r4
 801fe1a:	d109      	bne.n	801fe30 <__libc_init_array+0x24>
 801fe1c:	4d0b      	ldr	r5, [pc, #44]	@ (801fe4c <__libc_init_array+0x40>)
 801fe1e:	4c0c      	ldr	r4, [pc, #48]	@ (801fe50 <__libc_init_array+0x44>)
 801fe20:	f001 ff54 	bl	8021ccc <_init>
 801fe24:	1b64      	subs	r4, r4, r5
 801fe26:	10a4      	asrs	r4, r4, #2
 801fe28:	2600      	movs	r6, #0
 801fe2a:	42a6      	cmp	r6, r4
 801fe2c:	d105      	bne.n	801fe3a <__libc_init_array+0x2e>
 801fe2e:	bd70      	pop	{r4, r5, r6, pc}
 801fe30:	f855 3b04 	ldr.w	r3, [r5], #4
 801fe34:	4798      	blx	r3
 801fe36:	3601      	adds	r6, #1
 801fe38:	e7ee      	b.n	801fe18 <__libc_init_array+0xc>
 801fe3a:	f855 3b04 	ldr.w	r3, [r5], #4
 801fe3e:	4798      	blx	r3
 801fe40:	3601      	adds	r6, #1
 801fe42:	e7f2      	b.n	801fe2a <__libc_init_array+0x1e>
 801fe44:	08022e70 	.word	0x08022e70
 801fe48:	08022e70 	.word	0x08022e70
 801fe4c:	08022e70 	.word	0x08022e70
 801fe50:	08022e78 	.word	0x08022e78

0801fe54 <__retarget_lock_init_recursive>:
 801fe54:	4770      	bx	lr

0801fe56 <__retarget_lock_acquire_recursive>:
 801fe56:	4770      	bx	lr

0801fe58 <__retarget_lock_release_recursive>:
 801fe58:	4770      	bx	lr

0801fe5a <memcpy>:
 801fe5a:	440a      	add	r2, r1
 801fe5c:	4291      	cmp	r1, r2
 801fe5e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801fe62:	d100      	bne.n	801fe66 <memcpy+0xc>
 801fe64:	4770      	bx	lr
 801fe66:	b510      	push	{r4, lr}
 801fe68:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fe6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801fe70:	4291      	cmp	r1, r2
 801fe72:	d1f9      	bne.n	801fe68 <memcpy+0xe>
 801fe74:	bd10      	pop	{r4, pc}

0801fe76 <quorem>:
 801fe76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe7a:	6903      	ldr	r3, [r0, #16]
 801fe7c:	690c      	ldr	r4, [r1, #16]
 801fe7e:	42a3      	cmp	r3, r4
 801fe80:	4607      	mov	r7, r0
 801fe82:	db7e      	blt.n	801ff82 <quorem+0x10c>
 801fe84:	3c01      	subs	r4, #1
 801fe86:	f101 0814 	add.w	r8, r1, #20
 801fe8a:	00a3      	lsls	r3, r4, #2
 801fe8c:	f100 0514 	add.w	r5, r0, #20
 801fe90:	9300      	str	r3, [sp, #0]
 801fe92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fe96:	9301      	str	r3, [sp, #4]
 801fe98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801fe9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fea0:	3301      	adds	r3, #1
 801fea2:	429a      	cmp	r2, r3
 801fea4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801fea8:	fbb2 f6f3 	udiv	r6, r2, r3
 801feac:	d32e      	bcc.n	801ff0c <quorem+0x96>
 801feae:	f04f 0a00 	mov.w	sl, #0
 801feb2:	46c4      	mov	ip, r8
 801feb4:	46ae      	mov	lr, r5
 801feb6:	46d3      	mov	fp, sl
 801feb8:	f85c 3b04 	ldr.w	r3, [ip], #4
 801febc:	b298      	uxth	r0, r3
 801febe:	fb06 a000 	mla	r0, r6, r0, sl
 801fec2:	0c02      	lsrs	r2, r0, #16
 801fec4:	0c1b      	lsrs	r3, r3, #16
 801fec6:	fb06 2303 	mla	r3, r6, r3, r2
 801feca:	f8de 2000 	ldr.w	r2, [lr]
 801fece:	b280      	uxth	r0, r0
 801fed0:	b292      	uxth	r2, r2
 801fed2:	1a12      	subs	r2, r2, r0
 801fed4:	445a      	add	r2, fp
 801fed6:	f8de 0000 	ldr.w	r0, [lr]
 801feda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801fede:	b29b      	uxth	r3, r3
 801fee0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801fee4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801fee8:	b292      	uxth	r2, r2
 801feea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801feee:	45e1      	cmp	r9, ip
 801fef0:	f84e 2b04 	str.w	r2, [lr], #4
 801fef4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801fef8:	d2de      	bcs.n	801feb8 <quorem+0x42>
 801fefa:	9b00      	ldr	r3, [sp, #0]
 801fefc:	58eb      	ldr	r3, [r5, r3]
 801fefe:	b92b      	cbnz	r3, 801ff0c <quorem+0x96>
 801ff00:	9b01      	ldr	r3, [sp, #4]
 801ff02:	3b04      	subs	r3, #4
 801ff04:	429d      	cmp	r5, r3
 801ff06:	461a      	mov	r2, r3
 801ff08:	d32f      	bcc.n	801ff6a <quorem+0xf4>
 801ff0a:	613c      	str	r4, [r7, #16]
 801ff0c:	4638      	mov	r0, r7
 801ff0e:	f001 f8c3 	bl	8021098 <__mcmp>
 801ff12:	2800      	cmp	r0, #0
 801ff14:	db25      	blt.n	801ff62 <quorem+0xec>
 801ff16:	4629      	mov	r1, r5
 801ff18:	2000      	movs	r0, #0
 801ff1a:	f858 2b04 	ldr.w	r2, [r8], #4
 801ff1e:	f8d1 c000 	ldr.w	ip, [r1]
 801ff22:	fa1f fe82 	uxth.w	lr, r2
 801ff26:	fa1f f38c 	uxth.w	r3, ip
 801ff2a:	eba3 030e 	sub.w	r3, r3, lr
 801ff2e:	4403      	add	r3, r0
 801ff30:	0c12      	lsrs	r2, r2, #16
 801ff32:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801ff36:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801ff3a:	b29b      	uxth	r3, r3
 801ff3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ff40:	45c1      	cmp	r9, r8
 801ff42:	f841 3b04 	str.w	r3, [r1], #4
 801ff46:	ea4f 4022 	mov.w	r0, r2, asr #16
 801ff4a:	d2e6      	bcs.n	801ff1a <quorem+0xa4>
 801ff4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ff50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ff54:	b922      	cbnz	r2, 801ff60 <quorem+0xea>
 801ff56:	3b04      	subs	r3, #4
 801ff58:	429d      	cmp	r5, r3
 801ff5a:	461a      	mov	r2, r3
 801ff5c:	d30b      	bcc.n	801ff76 <quorem+0x100>
 801ff5e:	613c      	str	r4, [r7, #16]
 801ff60:	3601      	adds	r6, #1
 801ff62:	4630      	mov	r0, r6
 801ff64:	b003      	add	sp, #12
 801ff66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff6a:	6812      	ldr	r2, [r2, #0]
 801ff6c:	3b04      	subs	r3, #4
 801ff6e:	2a00      	cmp	r2, #0
 801ff70:	d1cb      	bne.n	801ff0a <quorem+0x94>
 801ff72:	3c01      	subs	r4, #1
 801ff74:	e7c6      	b.n	801ff04 <quorem+0x8e>
 801ff76:	6812      	ldr	r2, [r2, #0]
 801ff78:	3b04      	subs	r3, #4
 801ff7a:	2a00      	cmp	r2, #0
 801ff7c:	d1ef      	bne.n	801ff5e <quorem+0xe8>
 801ff7e:	3c01      	subs	r4, #1
 801ff80:	e7ea      	b.n	801ff58 <quorem+0xe2>
 801ff82:	2000      	movs	r0, #0
 801ff84:	e7ee      	b.n	801ff64 <quorem+0xee>
	...

0801ff88 <_dtoa_r>:
 801ff88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff8c:	69c7      	ldr	r7, [r0, #28]
 801ff8e:	b099      	sub	sp, #100	@ 0x64
 801ff90:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ff94:	ec55 4b10 	vmov	r4, r5, d0
 801ff98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801ff9a:	9109      	str	r1, [sp, #36]	@ 0x24
 801ff9c:	4683      	mov	fp, r0
 801ff9e:	920e      	str	r2, [sp, #56]	@ 0x38
 801ffa0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ffa2:	b97f      	cbnz	r7, 801ffc4 <_dtoa_r+0x3c>
 801ffa4:	2010      	movs	r0, #16
 801ffa6:	f7fe ffdf 	bl	801ef68 <malloc>
 801ffaa:	4602      	mov	r2, r0
 801ffac:	f8cb 001c 	str.w	r0, [fp, #28]
 801ffb0:	b920      	cbnz	r0, 801ffbc <_dtoa_r+0x34>
 801ffb2:	4ba7      	ldr	r3, [pc, #668]	@ (8020250 <_dtoa_r+0x2c8>)
 801ffb4:	21ef      	movs	r1, #239	@ 0xef
 801ffb6:	48a7      	ldr	r0, [pc, #668]	@ (8020254 <_dtoa_r+0x2cc>)
 801ffb8:	f001 fb94 	bl	80216e4 <__assert_func>
 801ffbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801ffc0:	6007      	str	r7, [r0, #0]
 801ffc2:	60c7      	str	r7, [r0, #12]
 801ffc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ffc8:	6819      	ldr	r1, [r3, #0]
 801ffca:	b159      	cbz	r1, 801ffe4 <_dtoa_r+0x5c>
 801ffcc:	685a      	ldr	r2, [r3, #4]
 801ffce:	604a      	str	r2, [r1, #4]
 801ffd0:	2301      	movs	r3, #1
 801ffd2:	4093      	lsls	r3, r2
 801ffd4:	608b      	str	r3, [r1, #8]
 801ffd6:	4658      	mov	r0, fp
 801ffd8:	f000 fe24 	bl	8020c24 <_Bfree>
 801ffdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ffe0:	2200      	movs	r2, #0
 801ffe2:	601a      	str	r2, [r3, #0]
 801ffe4:	1e2b      	subs	r3, r5, #0
 801ffe6:	bfb9      	ittee	lt
 801ffe8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801ffec:	9303      	strlt	r3, [sp, #12]
 801ffee:	2300      	movge	r3, #0
 801fff0:	6033      	strge	r3, [r6, #0]
 801fff2:	9f03      	ldr	r7, [sp, #12]
 801fff4:	4b98      	ldr	r3, [pc, #608]	@ (8020258 <_dtoa_r+0x2d0>)
 801fff6:	bfbc      	itt	lt
 801fff8:	2201      	movlt	r2, #1
 801fffa:	6032      	strlt	r2, [r6, #0]
 801fffc:	43bb      	bics	r3, r7
 801fffe:	d112      	bne.n	8020026 <_dtoa_r+0x9e>
 8020000:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020002:	f242 730f 	movw	r3, #9999	@ 0x270f
 8020006:	6013      	str	r3, [r2, #0]
 8020008:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802000c:	4323      	orrs	r3, r4
 802000e:	f000 854d 	beq.w	8020aac <_dtoa_r+0xb24>
 8020012:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020014:	f8df a254 	ldr.w	sl, [pc, #596]	@ 802026c <_dtoa_r+0x2e4>
 8020018:	2b00      	cmp	r3, #0
 802001a:	f000 854f 	beq.w	8020abc <_dtoa_r+0xb34>
 802001e:	f10a 0303 	add.w	r3, sl, #3
 8020022:	f000 bd49 	b.w	8020ab8 <_dtoa_r+0xb30>
 8020026:	ed9d 7b02 	vldr	d7, [sp, #8]
 802002a:	2200      	movs	r2, #0
 802002c:	ec51 0b17 	vmov	r0, r1, d7
 8020030:	2300      	movs	r3, #0
 8020032:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8020036:	f7e0 fd6f 	bl	8000b18 <__aeabi_dcmpeq>
 802003a:	4680      	mov	r8, r0
 802003c:	b158      	cbz	r0, 8020056 <_dtoa_r+0xce>
 802003e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020040:	2301      	movs	r3, #1
 8020042:	6013      	str	r3, [r2, #0]
 8020044:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020046:	b113      	cbz	r3, 802004e <_dtoa_r+0xc6>
 8020048:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802004a:	4b84      	ldr	r3, [pc, #528]	@ (802025c <_dtoa_r+0x2d4>)
 802004c:	6013      	str	r3, [r2, #0]
 802004e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8020270 <_dtoa_r+0x2e8>
 8020052:	f000 bd33 	b.w	8020abc <_dtoa_r+0xb34>
 8020056:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802005a:	aa16      	add	r2, sp, #88	@ 0x58
 802005c:	a917      	add	r1, sp, #92	@ 0x5c
 802005e:	4658      	mov	r0, fp
 8020060:	f001 f8ca 	bl	80211f8 <__d2b>
 8020064:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8020068:	4681      	mov	r9, r0
 802006a:	2e00      	cmp	r6, #0
 802006c:	d077      	beq.n	802015e <_dtoa_r+0x1d6>
 802006e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020070:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8020074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020078:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802007c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8020080:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8020084:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8020088:	4619      	mov	r1, r3
 802008a:	2200      	movs	r2, #0
 802008c:	4b74      	ldr	r3, [pc, #464]	@ (8020260 <_dtoa_r+0x2d8>)
 802008e:	f7e0 f923 	bl	80002d8 <__aeabi_dsub>
 8020092:	a369      	add	r3, pc, #420	@ (adr r3, 8020238 <_dtoa_r+0x2b0>)
 8020094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020098:	f7e0 fad6 	bl	8000648 <__aeabi_dmul>
 802009c:	a368      	add	r3, pc, #416	@ (adr r3, 8020240 <_dtoa_r+0x2b8>)
 802009e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200a2:	f7e0 f91b 	bl	80002dc <__adddf3>
 80200a6:	4604      	mov	r4, r0
 80200a8:	4630      	mov	r0, r6
 80200aa:	460d      	mov	r5, r1
 80200ac:	f7e0 fa62 	bl	8000574 <__aeabi_i2d>
 80200b0:	a365      	add	r3, pc, #404	@ (adr r3, 8020248 <_dtoa_r+0x2c0>)
 80200b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200b6:	f7e0 fac7 	bl	8000648 <__aeabi_dmul>
 80200ba:	4602      	mov	r2, r0
 80200bc:	460b      	mov	r3, r1
 80200be:	4620      	mov	r0, r4
 80200c0:	4629      	mov	r1, r5
 80200c2:	f7e0 f90b 	bl	80002dc <__adddf3>
 80200c6:	4604      	mov	r4, r0
 80200c8:	460d      	mov	r5, r1
 80200ca:	f7e0 fd6d 	bl	8000ba8 <__aeabi_d2iz>
 80200ce:	2200      	movs	r2, #0
 80200d0:	4607      	mov	r7, r0
 80200d2:	2300      	movs	r3, #0
 80200d4:	4620      	mov	r0, r4
 80200d6:	4629      	mov	r1, r5
 80200d8:	f7e0 fd28 	bl	8000b2c <__aeabi_dcmplt>
 80200dc:	b140      	cbz	r0, 80200f0 <_dtoa_r+0x168>
 80200de:	4638      	mov	r0, r7
 80200e0:	f7e0 fa48 	bl	8000574 <__aeabi_i2d>
 80200e4:	4622      	mov	r2, r4
 80200e6:	462b      	mov	r3, r5
 80200e8:	f7e0 fd16 	bl	8000b18 <__aeabi_dcmpeq>
 80200ec:	b900      	cbnz	r0, 80200f0 <_dtoa_r+0x168>
 80200ee:	3f01      	subs	r7, #1
 80200f0:	2f16      	cmp	r7, #22
 80200f2:	d851      	bhi.n	8020198 <_dtoa_r+0x210>
 80200f4:	4b5b      	ldr	r3, [pc, #364]	@ (8020264 <_dtoa_r+0x2dc>)
 80200f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80200fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020102:	f7e0 fd13 	bl	8000b2c <__aeabi_dcmplt>
 8020106:	2800      	cmp	r0, #0
 8020108:	d048      	beq.n	802019c <_dtoa_r+0x214>
 802010a:	3f01      	subs	r7, #1
 802010c:	2300      	movs	r3, #0
 802010e:	9312      	str	r3, [sp, #72]	@ 0x48
 8020110:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020112:	1b9b      	subs	r3, r3, r6
 8020114:	1e5a      	subs	r2, r3, #1
 8020116:	bf44      	itt	mi
 8020118:	f1c3 0801 	rsbmi	r8, r3, #1
 802011c:	2300      	movmi	r3, #0
 802011e:	9208      	str	r2, [sp, #32]
 8020120:	bf54      	ite	pl
 8020122:	f04f 0800 	movpl.w	r8, #0
 8020126:	9308      	strmi	r3, [sp, #32]
 8020128:	2f00      	cmp	r7, #0
 802012a:	db39      	blt.n	80201a0 <_dtoa_r+0x218>
 802012c:	9b08      	ldr	r3, [sp, #32]
 802012e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8020130:	443b      	add	r3, r7
 8020132:	9308      	str	r3, [sp, #32]
 8020134:	2300      	movs	r3, #0
 8020136:	930a      	str	r3, [sp, #40]	@ 0x28
 8020138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802013a:	2b09      	cmp	r3, #9
 802013c:	d864      	bhi.n	8020208 <_dtoa_r+0x280>
 802013e:	2b05      	cmp	r3, #5
 8020140:	bfc4      	itt	gt
 8020142:	3b04      	subgt	r3, #4
 8020144:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8020146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020148:	f1a3 0302 	sub.w	r3, r3, #2
 802014c:	bfcc      	ite	gt
 802014e:	2400      	movgt	r4, #0
 8020150:	2401      	movle	r4, #1
 8020152:	2b03      	cmp	r3, #3
 8020154:	d863      	bhi.n	802021e <_dtoa_r+0x296>
 8020156:	e8df f003 	tbb	[pc, r3]
 802015a:	372a      	.short	0x372a
 802015c:	5535      	.short	0x5535
 802015e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8020162:	441e      	add	r6, r3
 8020164:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8020168:	2b20      	cmp	r3, #32
 802016a:	bfc1      	itttt	gt
 802016c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8020170:	409f      	lslgt	r7, r3
 8020172:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8020176:	fa24 f303 	lsrgt.w	r3, r4, r3
 802017a:	bfd6      	itet	le
 802017c:	f1c3 0320 	rsble	r3, r3, #32
 8020180:	ea47 0003 	orrgt.w	r0, r7, r3
 8020184:	fa04 f003 	lslle.w	r0, r4, r3
 8020188:	f7e0 f9e4 	bl	8000554 <__aeabi_ui2d>
 802018c:	2201      	movs	r2, #1
 802018e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8020192:	3e01      	subs	r6, #1
 8020194:	9214      	str	r2, [sp, #80]	@ 0x50
 8020196:	e777      	b.n	8020088 <_dtoa_r+0x100>
 8020198:	2301      	movs	r3, #1
 802019a:	e7b8      	b.n	802010e <_dtoa_r+0x186>
 802019c:	9012      	str	r0, [sp, #72]	@ 0x48
 802019e:	e7b7      	b.n	8020110 <_dtoa_r+0x188>
 80201a0:	427b      	negs	r3, r7
 80201a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80201a4:	2300      	movs	r3, #0
 80201a6:	eba8 0807 	sub.w	r8, r8, r7
 80201aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80201ac:	e7c4      	b.n	8020138 <_dtoa_r+0x1b0>
 80201ae:	2300      	movs	r3, #0
 80201b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80201b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80201b4:	2b00      	cmp	r3, #0
 80201b6:	dc35      	bgt.n	8020224 <_dtoa_r+0x29c>
 80201b8:	2301      	movs	r3, #1
 80201ba:	9300      	str	r3, [sp, #0]
 80201bc:	9307      	str	r3, [sp, #28]
 80201be:	461a      	mov	r2, r3
 80201c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80201c2:	e00b      	b.n	80201dc <_dtoa_r+0x254>
 80201c4:	2301      	movs	r3, #1
 80201c6:	e7f3      	b.n	80201b0 <_dtoa_r+0x228>
 80201c8:	2300      	movs	r3, #0
 80201ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80201cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80201ce:	18fb      	adds	r3, r7, r3
 80201d0:	9300      	str	r3, [sp, #0]
 80201d2:	3301      	adds	r3, #1
 80201d4:	2b01      	cmp	r3, #1
 80201d6:	9307      	str	r3, [sp, #28]
 80201d8:	bfb8      	it	lt
 80201da:	2301      	movlt	r3, #1
 80201dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80201e0:	2100      	movs	r1, #0
 80201e2:	2204      	movs	r2, #4
 80201e4:	f102 0514 	add.w	r5, r2, #20
 80201e8:	429d      	cmp	r5, r3
 80201ea:	d91f      	bls.n	802022c <_dtoa_r+0x2a4>
 80201ec:	6041      	str	r1, [r0, #4]
 80201ee:	4658      	mov	r0, fp
 80201f0:	f000 fcd8 	bl	8020ba4 <_Balloc>
 80201f4:	4682      	mov	sl, r0
 80201f6:	2800      	cmp	r0, #0
 80201f8:	d13c      	bne.n	8020274 <_dtoa_r+0x2ec>
 80201fa:	4b1b      	ldr	r3, [pc, #108]	@ (8020268 <_dtoa_r+0x2e0>)
 80201fc:	4602      	mov	r2, r0
 80201fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8020202:	e6d8      	b.n	801ffb6 <_dtoa_r+0x2e>
 8020204:	2301      	movs	r3, #1
 8020206:	e7e0      	b.n	80201ca <_dtoa_r+0x242>
 8020208:	2401      	movs	r4, #1
 802020a:	2300      	movs	r3, #0
 802020c:	9309      	str	r3, [sp, #36]	@ 0x24
 802020e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020210:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020214:	9300      	str	r3, [sp, #0]
 8020216:	9307      	str	r3, [sp, #28]
 8020218:	2200      	movs	r2, #0
 802021a:	2312      	movs	r3, #18
 802021c:	e7d0      	b.n	80201c0 <_dtoa_r+0x238>
 802021e:	2301      	movs	r3, #1
 8020220:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020222:	e7f5      	b.n	8020210 <_dtoa_r+0x288>
 8020224:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020226:	9300      	str	r3, [sp, #0]
 8020228:	9307      	str	r3, [sp, #28]
 802022a:	e7d7      	b.n	80201dc <_dtoa_r+0x254>
 802022c:	3101      	adds	r1, #1
 802022e:	0052      	lsls	r2, r2, #1
 8020230:	e7d8      	b.n	80201e4 <_dtoa_r+0x25c>
 8020232:	bf00      	nop
 8020234:	f3af 8000 	nop.w
 8020238:	636f4361 	.word	0x636f4361
 802023c:	3fd287a7 	.word	0x3fd287a7
 8020240:	8b60c8b3 	.word	0x8b60c8b3
 8020244:	3fc68a28 	.word	0x3fc68a28
 8020248:	509f79fb 	.word	0x509f79fb
 802024c:	3fd34413 	.word	0x3fd34413
 8020250:	08022b39 	.word	0x08022b39
 8020254:	08022b50 	.word	0x08022b50
 8020258:	7ff00000 	.word	0x7ff00000
 802025c:	08022b09 	.word	0x08022b09
 8020260:	3ff80000 	.word	0x3ff80000
 8020264:	08022c48 	.word	0x08022c48
 8020268:	08022ba8 	.word	0x08022ba8
 802026c:	08022b35 	.word	0x08022b35
 8020270:	08022b08 	.word	0x08022b08
 8020274:	f8db 301c 	ldr.w	r3, [fp, #28]
 8020278:	6018      	str	r0, [r3, #0]
 802027a:	9b07      	ldr	r3, [sp, #28]
 802027c:	2b0e      	cmp	r3, #14
 802027e:	f200 80a4 	bhi.w	80203ca <_dtoa_r+0x442>
 8020282:	2c00      	cmp	r4, #0
 8020284:	f000 80a1 	beq.w	80203ca <_dtoa_r+0x442>
 8020288:	2f00      	cmp	r7, #0
 802028a:	dd33      	ble.n	80202f4 <_dtoa_r+0x36c>
 802028c:	4bad      	ldr	r3, [pc, #692]	@ (8020544 <_dtoa_r+0x5bc>)
 802028e:	f007 020f 	and.w	r2, r7, #15
 8020292:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020296:	ed93 7b00 	vldr	d7, [r3]
 802029a:	05f8      	lsls	r0, r7, #23
 802029c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80202a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80202a4:	d516      	bpl.n	80202d4 <_dtoa_r+0x34c>
 80202a6:	4ba8      	ldr	r3, [pc, #672]	@ (8020548 <_dtoa_r+0x5c0>)
 80202a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80202ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80202b0:	f7e0 faf4 	bl	800089c <__aeabi_ddiv>
 80202b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80202b8:	f004 040f 	and.w	r4, r4, #15
 80202bc:	2603      	movs	r6, #3
 80202be:	4da2      	ldr	r5, [pc, #648]	@ (8020548 <_dtoa_r+0x5c0>)
 80202c0:	b954      	cbnz	r4, 80202d8 <_dtoa_r+0x350>
 80202c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80202c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80202ca:	f7e0 fae7 	bl	800089c <__aeabi_ddiv>
 80202ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80202d2:	e028      	b.n	8020326 <_dtoa_r+0x39e>
 80202d4:	2602      	movs	r6, #2
 80202d6:	e7f2      	b.n	80202be <_dtoa_r+0x336>
 80202d8:	07e1      	lsls	r1, r4, #31
 80202da:	d508      	bpl.n	80202ee <_dtoa_r+0x366>
 80202dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80202e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80202e4:	f7e0 f9b0 	bl	8000648 <__aeabi_dmul>
 80202e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80202ec:	3601      	adds	r6, #1
 80202ee:	1064      	asrs	r4, r4, #1
 80202f0:	3508      	adds	r5, #8
 80202f2:	e7e5      	b.n	80202c0 <_dtoa_r+0x338>
 80202f4:	f000 80d2 	beq.w	802049c <_dtoa_r+0x514>
 80202f8:	427c      	negs	r4, r7
 80202fa:	4b92      	ldr	r3, [pc, #584]	@ (8020544 <_dtoa_r+0x5bc>)
 80202fc:	4d92      	ldr	r5, [pc, #584]	@ (8020548 <_dtoa_r+0x5c0>)
 80202fe:	f004 020f 	and.w	r2, r4, #15
 8020302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020306:	e9d3 2300 	ldrd	r2, r3, [r3]
 802030a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802030e:	f7e0 f99b 	bl	8000648 <__aeabi_dmul>
 8020312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020316:	1124      	asrs	r4, r4, #4
 8020318:	2300      	movs	r3, #0
 802031a:	2602      	movs	r6, #2
 802031c:	2c00      	cmp	r4, #0
 802031e:	f040 80b2 	bne.w	8020486 <_dtoa_r+0x4fe>
 8020322:	2b00      	cmp	r3, #0
 8020324:	d1d3      	bne.n	80202ce <_dtoa_r+0x346>
 8020326:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020328:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802032c:	2b00      	cmp	r3, #0
 802032e:	f000 80b7 	beq.w	80204a0 <_dtoa_r+0x518>
 8020332:	4b86      	ldr	r3, [pc, #536]	@ (802054c <_dtoa_r+0x5c4>)
 8020334:	2200      	movs	r2, #0
 8020336:	4620      	mov	r0, r4
 8020338:	4629      	mov	r1, r5
 802033a:	f7e0 fbf7 	bl	8000b2c <__aeabi_dcmplt>
 802033e:	2800      	cmp	r0, #0
 8020340:	f000 80ae 	beq.w	80204a0 <_dtoa_r+0x518>
 8020344:	9b07      	ldr	r3, [sp, #28]
 8020346:	2b00      	cmp	r3, #0
 8020348:	f000 80aa 	beq.w	80204a0 <_dtoa_r+0x518>
 802034c:	9b00      	ldr	r3, [sp, #0]
 802034e:	2b00      	cmp	r3, #0
 8020350:	dd37      	ble.n	80203c2 <_dtoa_r+0x43a>
 8020352:	1e7b      	subs	r3, r7, #1
 8020354:	9304      	str	r3, [sp, #16]
 8020356:	4620      	mov	r0, r4
 8020358:	4b7d      	ldr	r3, [pc, #500]	@ (8020550 <_dtoa_r+0x5c8>)
 802035a:	2200      	movs	r2, #0
 802035c:	4629      	mov	r1, r5
 802035e:	f7e0 f973 	bl	8000648 <__aeabi_dmul>
 8020362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020366:	9c00      	ldr	r4, [sp, #0]
 8020368:	3601      	adds	r6, #1
 802036a:	4630      	mov	r0, r6
 802036c:	f7e0 f902 	bl	8000574 <__aeabi_i2d>
 8020370:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020374:	f7e0 f968 	bl	8000648 <__aeabi_dmul>
 8020378:	4b76      	ldr	r3, [pc, #472]	@ (8020554 <_dtoa_r+0x5cc>)
 802037a:	2200      	movs	r2, #0
 802037c:	f7df ffae 	bl	80002dc <__adddf3>
 8020380:	4605      	mov	r5, r0
 8020382:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8020386:	2c00      	cmp	r4, #0
 8020388:	f040 808d 	bne.w	80204a6 <_dtoa_r+0x51e>
 802038c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020390:	4b71      	ldr	r3, [pc, #452]	@ (8020558 <_dtoa_r+0x5d0>)
 8020392:	2200      	movs	r2, #0
 8020394:	f7df ffa0 	bl	80002d8 <__aeabi_dsub>
 8020398:	4602      	mov	r2, r0
 802039a:	460b      	mov	r3, r1
 802039c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80203a0:	462a      	mov	r2, r5
 80203a2:	4633      	mov	r3, r6
 80203a4:	f7e0 fbe0 	bl	8000b68 <__aeabi_dcmpgt>
 80203a8:	2800      	cmp	r0, #0
 80203aa:	f040 828b 	bne.w	80208c4 <_dtoa_r+0x93c>
 80203ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80203b2:	462a      	mov	r2, r5
 80203b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80203b8:	f7e0 fbb8 	bl	8000b2c <__aeabi_dcmplt>
 80203bc:	2800      	cmp	r0, #0
 80203be:	f040 8128 	bne.w	8020612 <_dtoa_r+0x68a>
 80203c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80203c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80203ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80203cc:	2b00      	cmp	r3, #0
 80203ce:	f2c0 815a 	blt.w	8020686 <_dtoa_r+0x6fe>
 80203d2:	2f0e      	cmp	r7, #14
 80203d4:	f300 8157 	bgt.w	8020686 <_dtoa_r+0x6fe>
 80203d8:	4b5a      	ldr	r3, [pc, #360]	@ (8020544 <_dtoa_r+0x5bc>)
 80203da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80203de:	ed93 7b00 	vldr	d7, [r3]
 80203e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80203e4:	2b00      	cmp	r3, #0
 80203e6:	ed8d 7b00 	vstr	d7, [sp]
 80203ea:	da03      	bge.n	80203f4 <_dtoa_r+0x46c>
 80203ec:	9b07      	ldr	r3, [sp, #28]
 80203ee:	2b00      	cmp	r3, #0
 80203f0:	f340 8101 	ble.w	80205f6 <_dtoa_r+0x66e>
 80203f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80203f8:	4656      	mov	r6, sl
 80203fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80203fe:	4620      	mov	r0, r4
 8020400:	4629      	mov	r1, r5
 8020402:	f7e0 fa4b 	bl	800089c <__aeabi_ddiv>
 8020406:	f7e0 fbcf 	bl	8000ba8 <__aeabi_d2iz>
 802040a:	4680      	mov	r8, r0
 802040c:	f7e0 f8b2 	bl	8000574 <__aeabi_i2d>
 8020410:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020414:	f7e0 f918 	bl	8000648 <__aeabi_dmul>
 8020418:	4602      	mov	r2, r0
 802041a:	460b      	mov	r3, r1
 802041c:	4620      	mov	r0, r4
 802041e:	4629      	mov	r1, r5
 8020420:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8020424:	f7df ff58 	bl	80002d8 <__aeabi_dsub>
 8020428:	f806 4b01 	strb.w	r4, [r6], #1
 802042c:	9d07      	ldr	r5, [sp, #28]
 802042e:	eba6 040a 	sub.w	r4, r6, sl
 8020432:	42a5      	cmp	r5, r4
 8020434:	4602      	mov	r2, r0
 8020436:	460b      	mov	r3, r1
 8020438:	f040 8117 	bne.w	802066a <_dtoa_r+0x6e2>
 802043c:	f7df ff4e 	bl	80002dc <__adddf3>
 8020440:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020444:	4604      	mov	r4, r0
 8020446:	460d      	mov	r5, r1
 8020448:	f7e0 fb8e 	bl	8000b68 <__aeabi_dcmpgt>
 802044c:	2800      	cmp	r0, #0
 802044e:	f040 80f9 	bne.w	8020644 <_dtoa_r+0x6bc>
 8020452:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020456:	4620      	mov	r0, r4
 8020458:	4629      	mov	r1, r5
 802045a:	f7e0 fb5d 	bl	8000b18 <__aeabi_dcmpeq>
 802045e:	b118      	cbz	r0, 8020468 <_dtoa_r+0x4e0>
 8020460:	f018 0f01 	tst.w	r8, #1
 8020464:	f040 80ee 	bne.w	8020644 <_dtoa_r+0x6bc>
 8020468:	4649      	mov	r1, r9
 802046a:	4658      	mov	r0, fp
 802046c:	f000 fbda 	bl	8020c24 <_Bfree>
 8020470:	2300      	movs	r3, #0
 8020472:	7033      	strb	r3, [r6, #0]
 8020474:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020476:	3701      	adds	r7, #1
 8020478:	601f      	str	r7, [r3, #0]
 802047a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802047c:	2b00      	cmp	r3, #0
 802047e:	f000 831d 	beq.w	8020abc <_dtoa_r+0xb34>
 8020482:	601e      	str	r6, [r3, #0]
 8020484:	e31a      	b.n	8020abc <_dtoa_r+0xb34>
 8020486:	07e2      	lsls	r2, r4, #31
 8020488:	d505      	bpl.n	8020496 <_dtoa_r+0x50e>
 802048a:	e9d5 2300 	ldrd	r2, r3, [r5]
 802048e:	f7e0 f8db 	bl	8000648 <__aeabi_dmul>
 8020492:	3601      	adds	r6, #1
 8020494:	2301      	movs	r3, #1
 8020496:	1064      	asrs	r4, r4, #1
 8020498:	3508      	adds	r5, #8
 802049a:	e73f      	b.n	802031c <_dtoa_r+0x394>
 802049c:	2602      	movs	r6, #2
 802049e:	e742      	b.n	8020326 <_dtoa_r+0x39e>
 80204a0:	9c07      	ldr	r4, [sp, #28]
 80204a2:	9704      	str	r7, [sp, #16]
 80204a4:	e761      	b.n	802036a <_dtoa_r+0x3e2>
 80204a6:	4b27      	ldr	r3, [pc, #156]	@ (8020544 <_dtoa_r+0x5bc>)
 80204a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80204aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80204ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80204b2:	4454      	add	r4, sl
 80204b4:	2900      	cmp	r1, #0
 80204b6:	d053      	beq.n	8020560 <_dtoa_r+0x5d8>
 80204b8:	4928      	ldr	r1, [pc, #160]	@ (802055c <_dtoa_r+0x5d4>)
 80204ba:	2000      	movs	r0, #0
 80204bc:	f7e0 f9ee 	bl	800089c <__aeabi_ddiv>
 80204c0:	4633      	mov	r3, r6
 80204c2:	462a      	mov	r2, r5
 80204c4:	f7df ff08 	bl	80002d8 <__aeabi_dsub>
 80204c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80204cc:	4656      	mov	r6, sl
 80204ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80204d2:	f7e0 fb69 	bl	8000ba8 <__aeabi_d2iz>
 80204d6:	4605      	mov	r5, r0
 80204d8:	f7e0 f84c 	bl	8000574 <__aeabi_i2d>
 80204dc:	4602      	mov	r2, r0
 80204de:	460b      	mov	r3, r1
 80204e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80204e4:	f7df fef8 	bl	80002d8 <__aeabi_dsub>
 80204e8:	3530      	adds	r5, #48	@ 0x30
 80204ea:	4602      	mov	r2, r0
 80204ec:	460b      	mov	r3, r1
 80204ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80204f2:	f806 5b01 	strb.w	r5, [r6], #1
 80204f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80204fa:	f7e0 fb17 	bl	8000b2c <__aeabi_dcmplt>
 80204fe:	2800      	cmp	r0, #0
 8020500:	d171      	bne.n	80205e6 <_dtoa_r+0x65e>
 8020502:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020506:	4911      	ldr	r1, [pc, #68]	@ (802054c <_dtoa_r+0x5c4>)
 8020508:	2000      	movs	r0, #0
 802050a:	f7df fee5 	bl	80002d8 <__aeabi_dsub>
 802050e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8020512:	f7e0 fb0b 	bl	8000b2c <__aeabi_dcmplt>
 8020516:	2800      	cmp	r0, #0
 8020518:	f040 8095 	bne.w	8020646 <_dtoa_r+0x6be>
 802051c:	42a6      	cmp	r6, r4
 802051e:	f43f af50 	beq.w	80203c2 <_dtoa_r+0x43a>
 8020522:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8020526:	4b0a      	ldr	r3, [pc, #40]	@ (8020550 <_dtoa_r+0x5c8>)
 8020528:	2200      	movs	r2, #0
 802052a:	f7e0 f88d 	bl	8000648 <__aeabi_dmul>
 802052e:	4b08      	ldr	r3, [pc, #32]	@ (8020550 <_dtoa_r+0x5c8>)
 8020530:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8020534:	2200      	movs	r2, #0
 8020536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802053a:	f7e0 f885 	bl	8000648 <__aeabi_dmul>
 802053e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020542:	e7c4      	b.n	80204ce <_dtoa_r+0x546>
 8020544:	08022c48 	.word	0x08022c48
 8020548:	08022c20 	.word	0x08022c20
 802054c:	3ff00000 	.word	0x3ff00000
 8020550:	40240000 	.word	0x40240000
 8020554:	401c0000 	.word	0x401c0000
 8020558:	40140000 	.word	0x40140000
 802055c:	3fe00000 	.word	0x3fe00000
 8020560:	4631      	mov	r1, r6
 8020562:	4628      	mov	r0, r5
 8020564:	f7e0 f870 	bl	8000648 <__aeabi_dmul>
 8020568:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802056c:	9415      	str	r4, [sp, #84]	@ 0x54
 802056e:	4656      	mov	r6, sl
 8020570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020574:	f7e0 fb18 	bl	8000ba8 <__aeabi_d2iz>
 8020578:	4605      	mov	r5, r0
 802057a:	f7df fffb 	bl	8000574 <__aeabi_i2d>
 802057e:	4602      	mov	r2, r0
 8020580:	460b      	mov	r3, r1
 8020582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020586:	f7df fea7 	bl	80002d8 <__aeabi_dsub>
 802058a:	3530      	adds	r5, #48	@ 0x30
 802058c:	f806 5b01 	strb.w	r5, [r6], #1
 8020590:	4602      	mov	r2, r0
 8020592:	460b      	mov	r3, r1
 8020594:	42a6      	cmp	r6, r4
 8020596:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802059a:	f04f 0200 	mov.w	r2, #0
 802059e:	d124      	bne.n	80205ea <_dtoa_r+0x662>
 80205a0:	4bac      	ldr	r3, [pc, #688]	@ (8020854 <_dtoa_r+0x8cc>)
 80205a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80205a6:	f7df fe99 	bl	80002dc <__adddf3>
 80205aa:	4602      	mov	r2, r0
 80205ac:	460b      	mov	r3, r1
 80205ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80205b2:	f7e0 fad9 	bl	8000b68 <__aeabi_dcmpgt>
 80205b6:	2800      	cmp	r0, #0
 80205b8:	d145      	bne.n	8020646 <_dtoa_r+0x6be>
 80205ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80205be:	49a5      	ldr	r1, [pc, #660]	@ (8020854 <_dtoa_r+0x8cc>)
 80205c0:	2000      	movs	r0, #0
 80205c2:	f7df fe89 	bl	80002d8 <__aeabi_dsub>
 80205c6:	4602      	mov	r2, r0
 80205c8:	460b      	mov	r3, r1
 80205ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80205ce:	f7e0 faad 	bl	8000b2c <__aeabi_dcmplt>
 80205d2:	2800      	cmp	r0, #0
 80205d4:	f43f aef5 	beq.w	80203c2 <_dtoa_r+0x43a>
 80205d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80205da:	1e73      	subs	r3, r6, #1
 80205dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80205de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80205e2:	2b30      	cmp	r3, #48	@ 0x30
 80205e4:	d0f8      	beq.n	80205d8 <_dtoa_r+0x650>
 80205e6:	9f04      	ldr	r7, [sp, #16]
 80205e8:	e73e      	b.n	8020468 <_dtoa_r+0x4e0>
 80205ea:	4b9b      	ldr	r3, [pc, #620]	@ (8020858 <_dtoa_r+0x8d0>)
 80205ec:	f7e0 f82c 	bl	8000648 <__aeabi_dmul>
 80205f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80205f4:	e7bc      	b.n	8020570 <_dtoa_r+0x5e8>
 80205f6:	d10c      	bne.n	8020612 <_dtoa_r+0x68a>
 80205f8:	4b98      	ldr	r3, [pc, #608]	@ (802085c <_dtoa_r+0x8d4>)
 80205fa:	2200      	movs	r2, #0
 80205fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020600:	f7e0 f822 	bl	8000648 <__aeabi_dmul>
 8020604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020608:	f7e0 faa4 	bl	8000b54 <__aeabi_dcmpge>
 802060c:	2800      	cmp	r0, #0
 802060e:	f000 8157 	beq.w	80208c0 <_dtoa_r+0x938>
 8020612:	2400      	movs	r4, #0
 8020614:	4625      	mov	r5, r4
 8020616:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020618:	43db      	mvns	r3, r3
 802061a:	9304      	str	r3, [sp, #16]
 802061c:	4656      	mov	r6, sl
 802061e:	2700      	movs	r7, #0
 8020620:	4621      	mov	r1, r4
 8020622:	4658      	mov	r0, fp
 8020624:	f000 fafe 	bl	8020c24 <_Bfree>
 8020628:	2d00      	cmp	r5, #0
 802062a:	d0dc      	beq.n	80205e6 <_dtoa_r+0x65e>
 802062c:	b12f      	cbz	r7, 802063a <_dtoa_r+0x6b2>
 802062e:	42af      	cmp	r7, r5
 8020630:	d003      	beq.n	802063a <_dtoa_r+0x6b2>
 8020632:	4639      	mov	r1, r7
 8020634:	4658      	mov	r0, fp
 8020636:	f000 faf5 	bl	8020c24 <_Bfree>
 802063a:	4629      	mov	r1, r5
 802063c:	4658      	mov	r0, fp
 802063e:	f000 faf1 	bl	8020c24 <_Bfree>
 8020642:	e7d0      	b.n	80205e6 <_dtoa_r+0x65e>
 8020644:	9704      	str	r7, [sp, #16]
 8020646:	4633      	mov	r3, r6
 8020648:	461e      	mov	r6, r3
 802064a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802064e:	2a39      	cmp	r2, #57	@ 0x39
 8020650:	d107      	bne.n	8020662 <_dtoa_r+0x6da>
 8020652:	459a      	cmp	sl, r3
 8020654:	d1f8      	bne.n	8020648 <_dtoa_r+0x6c0>
 8020656:	9a04      	ldr	r2, [sp, #16]
 8020658:	3201      	adds	r2, #1
 802065a:	9204      	str	r2, [sp, #16]
 802065c:	2230      	movs	r2, #48	@ 0x30
 802065e:	f88a 2000 	strb.w	r2, [sl]
 8020662:	781a      	ldrb	r2, [r3, #0]
 8020664:	3201      	adds	r2, #1
 8020666:	701a      	strb	r2, [r3, #0]
 8020668:	e7bd      	b.n	80205e6 <_dtoa_r+0x65e>
 802066a:	4b7b      	ldr	r3, [pc, #492]	@ (8020858 <_dtoa_r+0x8d0>)
 802066c:	2200      	movs	r2, #0
 802066e:	f7df ffeb 	bl	8000648 <__aeabi_dmul>
 8020672:	2200      	movs	r2, #0
 8020674:	2300      	movs	r3, #0
 8020676:	4604      	mov	r4, r0
 8020678:	460d      	mov	r5, r1
 802067a:	f7e0 fa4d 	bl	8000b18 <__aeabi_dcmpeq>
 802067e:	2800      	cmp	r0, #0
 8020680:	f43f aebb 	beq.w	80203fa <_dtoa_r+0x472>
 8020684:	e6f0      	b.n	8020468 <_dtoa_r+0x4e0>
 8020686:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020688:	2a00      	cmp	r2, #0
 802068a:	f000 80db 	beq.w	8020844 <_dtoa_r+0x8bc>
 802068e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020690:	2a01      	cmp	r2, #1
 8020692:	f300 80bf 	bgt.w	8020814 <_dtoa_r+0x88c>
 8020696:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020698:	2a00      	cmp	r2, #0
 802069a:	f000 80b7 	beq.w	802080c <_dtoa_r+0x884>
 802069e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80206a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80206a4:	4646      	mov	r6, r8
 80206a6:	9a08      	ldr	r2, [sp, #32]
 80206a8:	2101      	movs	r1, #1
 80206aa:	441a      	add	r2, r3
 80206ac:	4658      	mov	r0, fp
 80206ae:	4498      	add	r8, r3
 80206b0:	9208      	str	r2, [sp, #32]
 80206b2:	f000 fb6b 	bl	8020d8c <__i2b>
 80206b6:	4605      	mov	r5, r0
 80206b8:	b15e      	cbz	r6, 80206d2 <_dtoa_r+0x74a>
 80206ba:	9b08      	ldr	r3, [sp, #32]
 80206bc:	2b00      	cmp	r3, #0
 80206be:	dd08      	ble.n	80206d2 <_dtoa_r+0x74a>
 80206c0:	42b3      	cmp	r3, r6
 80206c2:	9a08      	ldr	r2, [sp, #32]
 80206c4:	bfa8      	it	ge
 80206c6:	4633      	movge	r3, r6
 80206c8:	eba8 0803 	sub.w	r8, r8, r3
 80206cc:	1af6      	subs	r6, r6, r3
 80206ce:	1ad3      	subs	r3, r2, r3
 80206d0:	9308      	str	r3, [sp, #32]
 80206d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80206d4:	b1f3      	cbz	r3, 8020714 <_dtoa_r+0x78c>
 80206d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80206d8:	2b00      	cmp	r3, #0
 80206da:	f000 80b7 	beq.w	802084c <_dtoa_r+0x8c4>
 80206de:	b18c      	cbz	r4, 8020704 <_dtoa_r+0x77c>
 80206e0:	4629      	mov	r1, r5
 80206e2:	4622      	mov	r2, r4
 80206e4:	4658      	mov	r0, fp
 80206e6:	f000 fc11 	bl	8020f0c <__pow5mult>
 80206ea:	464a      	mov	r2, r9
 80206ec:	4601      	mov	r1, r0
 80206ee:	4605      	mov	r5, r0
 80206f0:	4658      	mov	r0, fp
 80206f2:	f000 fb61 	bl	8020db8 <__multiply>
 80206f6:	4649      	mov	r1, r9
 80206f8:	9004      	str	r0, [sp, #16]
 80206fa:	4658      	mov	r0, fp
 80206fc:	f000 fa92 	bl	8020c24 <_Bfree>
 8020700:	9b04      	ldr	r3, [sp, #16]
 8020702:	4699      	mov	r9, r3
 8020704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020706:	1b1a      	subs	r2, r3, r4
 8020708:	d004      	beq.n	8020714 <_dtoa_r+0x78c>
 802070a:	4649      	mov	r1, r9
 802070c:	4658      	mov	r0, fp
 802070e:	f000 fbfd 	bl	8020f0c <__pow5mult>
 8020712:	4681      	mov	r9, r0
 8020714:	2101      	movs	r1, #1
 8020716:	4658      	mov	r0, fp
 8020718:	f000 fb38 	bl	8020d8c <__i2b>
 802071c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802071e:	4604      	mov	r4, r0
 8020720:	2b00      	cmp	r3, #0
 8020722:	f000 81cf 	beq.w	8020ac4 <_dtoa_r+0xb3c>
 8020726:	461a      	mov	r2, r3
 8020728:	4601      	mov	r1, r0
 802072a:	4658      	mov	r0, fp
 802072c:	f000 fbee 	bl	8020f0c <__pow5mult>
 8020730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020732:	2b01      	cmp	r3, #1
 8020734:	4604      	mov	r4, r0
 8020736:	f300 8095 	bgt.w	8020864 <_dtoa_r+0x8dc>
 802073a:	9b02      	ldr	r3, [sp, #8]
 802073c:	2b00      	cmp	r3, #0
 802073e:	f040 8087 	bne.w	8020850 <_dtoa_r+0x8c8>
 8020742:	9b03      	ldr	r3, [sp, #12]
 8020744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020748:	2b00      	cmp	r3, #0
 802074a:	f040 8089 	bne.w	8020860 <_dtoa_r+0x8d8>
 802074e:	9b03      	ldr	r3, [sp, #12]
 8020750:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8020754:	0d1b      	lsrs	r3, r3, #20
 8020756:	051b      	lsls	r3, r3, #20
 8020758:	b12b      	cbz	r3, 8020766 <_dtoa_r+0x7de>
 802075a:	9b08      	ldr	r3, [sp, #32]
 802075c:	3301      	adds	r3, #1
 802075e:	9308      	str	r3, [sp, #32]
 8020760:	f108 0801 	add.w	r8, r8, #1
 8020764:	2301      	movs	r3, #1
 8020766:	930a      	str	r3, [sp, #40]	@ 0x28
 8020768:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802076a:	2b00      	cmp	r3, #0
 802076c:	f000 81b0 	beq.w	8020ad0 <_dtoa_r+0xb48>
 8020770:	6923      	ldr	r3, [r4, #16]
 8020772:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8020776:	6918      	ldr	r0, [r3, #16]
 8020778:	f000 fabc 	bl	8020cf4 <__hi0bits>
 802077c:	f1c0 0020 	rsb	r0, r0, #32
 8020780:	9b08      	ldr	r3, [sp, #32]
 8020782:	4418      	add	r0, r3
 8020784:	f010 001f 	ands.w	r0, r0, #31
 8020788:	d077      	beq.n	802087a <_dtoa_r+0x8f2>
 802078a:	f1c0 0320 	rsb	r3, r0, #32
 802078e:	2b04      	cmp	r3, #4
 8020790:	dd6b      	ble.n	802086a <_dtoa_r+0x8e2>
 8020792:	9b08      	ldr	r3, [sp, #32]
 8020794:	f1c0 001c 	rsb	r0, r0, #28
 8020798:	4403      	add	r3, r0
 802079a:	4480      	add	r8, r0
 802079c:	4406      	add	r6, r0
 802079e:	9308      	str	r3, [sp, #32]
 80207a0:	f1b8 0f00 	cmp.w	r8, #0
 80207a4:	dd05      	ble.n	80207b2 <_dtoa_r+0x82a>
 80207a6:	4649      	mov	r1, r9
 80207a8:	4642      	mov	r2, r8
 80207aa:	4658      	mov	r0, fp
 80207ac:	f000 fc08 	bl	8020fc0 <__lshift>
 80207b0:	4681      	mov	r9, r0
 80207b2:	9b08      	ldr	r3, [sp, #32]
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	dd05      	ble.n	80207c4 <_dtoa_r+0x83c>
 80207b8:	4621      	mov	r1, r4
 80207ba:	461a      	mov	r2, r3
 80207bc:	4658      	mov	r0, fp
 80207be:	f000 fbff 	bl	8020fc0 <__lshift>
 80207c2:	4604      	mov	r4, r0
 80207c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80207c6:	2b00      	cmp	r3, #0
 80207c8:	d059      	beq.n	802087e <_dtoa_r+0x8f6>
 80207ca:	4621      	mov	r1, r4
 80207cc:	4648      	mov	r0, r9
 80207ce:	f000 fc63 	bl	8021098 <__mcmp>
 80207d2:	2800      	cmp	r0, #0
 80207d4:	da53      	bge.n	802087e <_dtoa_r+0x8f6>
 80207d6:	1e7b      	subs	r3, r7, #1
 80207d8:	9304      	str	r3, [sp, #16]
 80207da:	4649      	mov	r1, r9
 80207dc:	2300      	movs	r3, #0
 80207de:	220a      	movs	r2, #10
 80207e0:	4658      	mov	r0, fp
 80207e2:	f000 fa41 	bl	8020c68 <__multadd>
 80207e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80207e8:	4681      	mov	r9, r0
 80207ea:	2b00      	cmp	r3, #0
 80207ec:	f000 8172 	beq.w	8020ad4 <_dtoa_r+0xb4c>
 80207f0:	2300      	movs	r3, #0
 80207f2:	4629      	mov	r1, r5
 80207f4:	220a      	movs	r2, #10
 80207f6:	4658      	mov	r0, fp
 80207f8:	f000 fa36 	bl	8020c68 <__multadd>
 80207fc:	9b00      	ldr	r3, [sp, #0]
 80207fe:	2b00      	cmp	r3, #0
 8020800:	4605      	mov	r5, r0
 8020802:	dc67      	bgt.n	80208d4 <_dtoa_r+0x94c>
 8020804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020806:	2b02      	cmp	r3, #2
 8020808:	dc41      	bgt.n	802088e <_dtoa_r+0x906>
 802080a:	e063      	b.n	80208d4 <_dtoa_r+0x94c>
 802080c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802080e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8020812:	e746      	b.n	80206a2 <_dtoa_r+0x71a>
 8020814:	9b07      	ldr	r3, [sp, #28]
 8020816:	1e5c      	subs	r4, r3, #1
 8020818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802081a:	42a3      	cmp	r3, r4
 802081c:	bfbf      	itttt	lt
 802081e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8020820:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8020822:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8020824:	1ae3      	sublt	r3, r4, r3
 8020826:	bfb4      	ite	lt
 8020828:	18d2      	addlt	r2, r2, r3
 802082a:	1b1c      	subge	r4, r3, r4
 802082c:	9b07      	ldr	r3, [sp, #28]
 802082e:	bfbc      	itt	lt
 8020830:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8020832:	2400      	movlt	r4, #0
 8020834:	2b00      	cmp	r3, #0
 8020836:	bfb5      	itete	lt
 8020838:	eba8 0603 	sublt.w	r6, r8, r3
 802083c:	9b07      	ldrge	r3, [sp, #28]
 802083e:	2300      	movlt	r3, #0
 8020840:	4646      	movge	r6, r8
 8020842:	e730      	b.n	80206a6 <_dtoa_r+0x71e>
 8020844:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020846:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8020848:	4646      	mov	r6, r8
 802084a:	e735      	b.n	80206b8 <_dtoa_r+0x730>
 802084c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802084e:	e75c      	b.n	802070a <_dtoa_r+0x782>
 8020850:	2300      	movs	r3, #0
 8020852:	e788      	b.n	8020766 <_dtoa_r+0x7de>
 8020854:	3fe00000 	.word	0x3fe00000
 8020858:	40240000 	.word	0x40240000
 802085c:	40140000 	.word	0x40140000
 8020860:	9b02      	ldr	r3, [sp, #8]
 8020862:	e780      	b.n	8020766 <_dtoa_r+0x7de>
 8020864:	2300      	movs	r3, #0
 8020866:	930a      	str	r3, [sp, #40]	@ 0x28
 8020868:	e782      	b.n	8020770 <_dtoa_r+0x7e8>
 802086a:	d099      	beq.n	80207a0 <_dtoa_r+0x818>
 802086c:	9a08      	ldr	r2, [sp, #32]
 802086e:	331c      	adds	r3, #28
 8020870:	441a      	add	r2, r3
 8020872:	4498      	add	r8, r3
 8020874:	441e      	add	r6, r3
 8020876:	9208      	str	r2, [sp, #32]
 8020878:	e792      	b.n	80207a0 <_dtoa_r+0x818>
 802087a:	4603      	mov	r3, r0
 802087c:	e7f6      	b.n	802086c <_dtoa_r+0x8e4>
 802087e:	9b07      	ldr	r3, [sp, #28]
 8020880:	9704      	str	r7, [sp, #16]
 8020882:	2b00      	cmp	r3, #0
 8020884:	dc20      	bgt.n	80208c8 <_dtoa_r+0x940>
 8020886:	9300      	str	r3, [sp, #0]
 8020888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802088a:	2b02      	cmp	r3, #2
 802088c:	dd1e      	ble.n	80208cc <_dtoa_r+0x944>
 802088e:	9b00      	ldr	r3, [sp, #0]
 8020890:	2b00      	cmp	r3, #0
 8020892:	f47f aec0 	bne.w	8020616 <_dtoa_r+0x68e>
 8020896:	4621      	mov	r1, r4
 8020898:	2205      	movs	r2, #5
 802089a:	4658      	mov	r0, fp
 802089c:	f000 f9e4 	bl	8020c68 <__multadd>
 80208a0:	4601      	mov	r1, r0
 80208a2:	4604      	mov	r4, r0
 80208a4:	4648      	mov	r0, r9
 80208a6:	f000 fbf7 	bl	8021098 <__mcmp>
 80208aa:	2800      	cmp	r0, #0
 80208ac:	f77f aeb3 	ble.w	8020616 <_dtoa_r+0x68e>
 80208b0:	4656      	mov	r6, sl
 80208b2:	2331      	movs	r3, #49	@ 0x31
 80208b4:	f806 3b01 	strb.w	r3, [r6], #1
 80208b8:	9b04      	ldr	r3, [sp, #16]
 80208ba:	3301      	adds	r3, #1
 80208bc:	9304      	str	r3, [sp, #16]
 80208be:	e6ae      	b.n	802061e <_dtoa_r+0x696>
 80208c0:	9c07      	ldr	r4, [sp, #28]
 80208c2:	9704      	str	r7, [sp, #16]
 80208c4:	4625      	mov	r5, r4
 80208c6:	e7f3      	b.n	80208b0 <_dtoa_r+0x928>
 80208c8:	9b07      	ldr	r3, [sp, #28]
 80208ca:	9300      	str	r3, [sp, #0]
 80208cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80208ce:	2b00      	cmp	r3, #0
 80208d0:	f000 8104 	beq.w	8020adc <_dtoa_r+0xb54>
 80208d4:	2e00      	cmp	r6, #0
 80208d6:	dd05      	ble.n	80208e4 <_dtoa_r+0x95c>
 80208d8:	4629      	mov	r1, r5
 80208da:	4632      	mov	r2, r6
 80208dc:	4658      	mov	r0, fp
 80208de:	f000 fb6f 	bl	8020fc0 <__lshift>
 80208e2:	4605      	mov	r5, r0
 80208e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80208e6:	2b00      	cmp	r3, #0
 80208e8:	d05a      	beq.n	80209a0 <_dtoa_r+0xa18>
 80208ea:	6869      	ldr	r1, [r5, #4]
 80208ec:	4658      	mov	r0, fp
 80208ee:	f000 f959 	bl	8020ba4 <_Balloc>
 80208f2:	4606      	mov	r6, r0
 80208f4:	b928      	cbnz	r0, 8020902 <_dtoa_r+0x97a>
 80208f6:	4b84      	ldr	r3, [pc, #528]	@ (8020b08 <_dtoa_r+0xb80>)
 80208f8:	4602      	mov	r2, r0
 80208fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80208fe:	f7ff bb5a 	b.w	801ffb6 <_dtoa_r+0x2e>
 8020902:	692a      	ldr	r2, [r5, #16]
 8020904:	3202      	adds	r2, #2
 8020906:	0092      	lsls	r2, r2, #2
 8020908:	f105 010c 	add.w	r1, r5, #12
 802090c:	300c      	adds	r0, #12
 802090e:	f7ff faa4 	bl	801fe5a <memcpy>
 8020912:	2201      	movs	r2, #1
 8020914:	4631      	mov	r1, r6
 8020916:	4658      	mov	r0, fp
 8020918:	f000 fb52 	bl	8020fc0 <__lshift>
 802091c:	f10a 0301 	add.w	r3, sl, #1
 8020920:	9307      	str	r3, [sp, #28]
 8020922:	9b00      	ldr	r3, [sp, #0]
 8020924:	4453      	add	r3, sl
 8020926:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020928:	9b02      	ldr	r3, [sp, #8]
 802092a:	f003 0301 	and.w	r3, r3, #1
 802092e:	462f      	mov	r7, r5
 8020930:	930a      	str	r3, [sp, #40]	@ 0x28
 8020932:	4605      	mov	r5, r0
 8020934:	9b07      	ldr	r3, [sp, #28]
 8020936:	4621      	mov	r1, r4
 8020938:	3b01      	subs	r3, #1
 802093a:	4648      	mov	r0, r9
 802093c:	9300      	str	r3, [sp, #0]
 802093e:	f7ff fa9a 	bl	801fe76 <quorem>
 8020942:	4639      	mov	r1, r7
 8020944:	9002      	str	r0, [sp, #8]
 8020946:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802094a:	4648      	mov	r0, r9
 802094c:	f000 fba4 	bl	8021098 <__mcmp>
 8020950:	462a      	mov	r2, r5
 8020952:	9008      	str	r0, [sp, #32]
 8020954:	4621      	mov	r1, r4
 8020956:	4658      	mov	r0, fp
 8020958:	f000 fbba 	bl	80210d0 <__mdiff>
 802095c:	68c2      	ldr	r2, [r0, #12]
 802095e:	4606      	mov	r6, r0
 8020960:	bb02      	cbnz	r2, 80209a4 <_dtoa_r+0xa1c>
 8020962:	4601      	mov	r1, r0
 8020964:	4648      	mov	r0, r9
 8020966:	f000 fb97 	bl	8021098 <__mcmp>
 802096a:	4602      	mov	r2, r0
 802096c:	4631      	mov	r1, r6
 802096e:	4658      	mov	r0, fp
 8020970:	920e      	str	r2, [sp, #56]	@ 0x38
 8020972:	f000 f957 	bl	8020c24 <_Bfree>
 8020976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020978:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802097a:	9e07      	ldr	r6, [sp, #28]
 802097c:	ea43 0102 	orr.w	r1, r3, r2
 8020980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020982:	4319      	orrs	r1, r3
 8020984:	d110      	bne.n	80209a8 <_dtoa_r+0xa20>
 8020986:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802098a:	d029      	beq.n	80209e0 <_dtoa_r+0xa58>
 802098c:	9b08      	ldr	r3, [sp, #32]
 802098e:	2b00      	cmp	r3, #0
 8020990:	dd02      	ble.n	8020998 <_dtoa_r+0xa10>
 8020992:	9b02      	ldr	r3, [sp, #8]
 8020994:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8020998:	9b00      	ldr	r3, [sp, #0]
 802099a:	f883 8000 	strb.w	r8, [r3]
 802099e:	e63f      	b.n	8020620 <_dtoa_r+0x698>
 80209a0:	4628      	mov	r0, r5
 80209a2:	e7bb      	b.n	802091c <_dtoa_r+0x994>
 80209a4:	2201      	movs	r2, #1
 80209a6:	e7e1      	b.n	802096c <_dtoa_r+0x9e4>
 80209a8:	9b08      	ldr	r3, [sp, #32]
 80209aa:	2b00      	cmp	r3, #0
 80209ac:	db04      	blt.n	80209b8 <_dtoa_r+0xa30>
 80209ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80209b0:	430b      	orrs	r3, r1
 80209b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80209b4:	430b      	orrs	r3, r1
 80209b6:	d120      	bne.n	80209fa <_dtoa_r+0xa72>
 80209b8:	2a00      	cmp	r2, #0
 80209ba:	dded      	ble.n	8020998 <_dtoa_r+0xa10>
 80209bc:	4649      	mov	r1, r9
 80209be:	2201      	movs	r2, #1
 80209c0:	4658      	mov	r0, fp
 80209c2:	f000 fafd 	bl	8020fc0 <__lshift>
 80209c6:	4621      	mov	r1, r4
 80209c8:	4681      	mov	r9, r0
 80209ca:	f000 fb65 	bl	8021098 <__mcmp>
 80209ce:	2800      	cmp	r0, #0
 80209d0:	dc03      	bgt.n	80209da <_dtoa_r+0xa52>
 80209d2:	d1e1      	bne.n	8020998 <_dtoa_r+0xa10>
 80209d4:	f018 0f01 	tst.w	r8, #1
 80209d8:	d0de      	beq.n	8020998 <_dtoa_r+0xa10>
 80209da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80209de:	d1d8      	bne.n	8020992 <_dtoa_r+0xa0a>
 80209e0:	9a00      	ldr	r2, [sp, #0]
 80209e2:	2339      	movs	r3, #57	@ 0x39
 80209e4:	7013      	strb	r3, [r2, #0]
 80209e6:	4633      	mov	r3, r6
 80209e8:	461e      	mov	r6, r3
 80209ea:	3b01      	subs	r3, #1
 80209ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80209f0:	2a39      	cmp	r2, #57	@ 0x39
 80209f2:	d052      	beq.n	8020a9a <_dtoa_r+0xb12>
 80209f4:	3201      	adds	r2, #1
 80209f6:	701a      	strb	r2, [r3, #0]
 80209f8:	e612      	b.n	8020620 <_dtoa_r+0x698>
 80209fa:	2a00      	cmp	r2, #0
 80209fc:	dd07      	ble.n	8020a0e <_dtoa_r+0xa86>
 80209fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8020a02:	d0ed      	beq.n	80209e0 <_dtoa_r+0xa58>
 8020a04:	9a00      	ldr	r2, [sp, #0]
 8020a06:	f108 0301 	add.w	r3, r8, #1
 8020a0a:	7013      	strb	r3, [r2, #0]
 8020a0c:	e608      	b.n	8020620 <_dtoa_r+0x698>
 8020a0e:	9b07      	ldr	r3, [sp, #28]
 8020a10:	9a07      	ldr	r2, [sp, #28]
 8020a12:	f803 8c01 	strb.w	r8, [r3, #-1]
 8020a16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020a18:	4293      	cmp	r3, r2
 8020a1a:	d028      	beq.n	8020a6e <_dtoa_r+0xae6>
 8020a1c:	4649      	mov	r1, r9
 8020a1e:	2300      	movs	r3, #0
 8020a20:	220a      	movs	r2, #10
 8020a22:	4658      	mov	r0, fp
 8020a24:	f000 f920 	bl	8020c68 <__multadd>
 8020a28:	42af      	cmp	r7, r5
 8020a2a:	4681      	mov	r9, r0
 8020a2c:	f04f 0300 	mov.w	r3, #0
 8020a30:	f04f 020a 	mov.w	r2, #10
 8020a34:	4639      	mov	r1, r7
 8020a36:	4658      	mov	r0, fp
 8020a38:	d107      	bne.n	8020a4a <_dtoa_r+0xac2>
 8020a3a:	f000 f915 	bl	8020c68 <__multadd>
 8020a3e:	4607      	mov	r7, r0
 8020a40:	4605      	mov	r5, r0
 8020a42:	9b07      	ldr	r3, [sp, #28]
 8020a44:	3301      	adds	r3, #1
 8020a46:	9307      	str	r3, [sp, #28]
 8020a48:	e774      	b.n	8020934 <_dtoa_r+0x9ac>
 8020a4a:	f000 f90d 	bl	8020c68 <__multadd>
 8020a4e:	4629      	mov	r1, r5
 8020a50:	4607      	mov	r7, r0
 8020a52:	2300      	movs	r3, #0
 8020a54:	220a      	movs	r2, #10
 8020a56:	4658      	mov	r0, fp
 8020a58:	f000 f906 	bl	8020c68 <__multadd>
 8020a5c:	4605      	mov	r5, r0
 8020a5e:	e7f0      	b.n	8020a42 <_dtoa_r+0xaba>
 8020a60:	9b00      	ldr	r3, [sp, #0]
 8020a62:	2b00      	cmp	r3, #0
 8020a64:	bfcc      	ite	gt
 8020a66:	461e      	movgt	r6, r3
 8020a68:	2601      	movle	r6, #1
 8020a6a:	4456      	add	r6, sl
 8020a6c:	2700      	movs	r7, #0
 8020a6e:	4649      	mov	r1, r9
 8020a70:	2201      	movs	r2, #1
 8020a72:	4658      	mov	r0, fp
 8020a74:	f000 faa4 	bl	8020fc0 <__lshift>
 8020a78:	4621      	mov	r1, r4
 8020a7a:	4681      	mov	r9, r0
 8020a7c:	f000 fb0c 	bl	8021098 <__mcmp>
 8020a80:	2800      	cmp	r0, #0
 8020a82:	dcb0      	bgt.n	80209e6 <_dtoa_r+0xa5e>
 8020a84:	d102      	bne.n	8020a8c <_dtoa_r+0xb04>
 8020a86:	f018 0f01 	tst.w	r8, #1
 8020a8a:	d1ac      	bne.n	80209e6 <_dtoa_r+0xa5e>
 8020a8c:	4633      	mov	r3, r6
 8020a8e:	461e      	mov	r6, r3
 8020a90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020a94:	2a30      	cmp	r2, #48	@ 0x30
 8020a96:	d0fa      	beq.n	8020a8e <_dtoa_r+0xb06>
 8020a98:	e5c2      	b.n	8020620 <_dtoa_r+0x698>
 8020a9a:	459a      	cmp	sl, r3
 8020a9c:	d1a4      	bne.n	80209e8 <_dtoa_r+0xa60>
 8020a9e:	9b04      	ldr	r3, [sp, #16]
 8020aa0:	3301      	adds	r3, #1
 8020aa2:	9304      	str	r3, [sp, #16]
 8020aa4:	2331      	movs	r3, #49	@ 0x31
 8020aa6:	f88a 3000 	strb.w	r3, [sl]
 8020aaa:	e5b9      	b.n	8020620 <_dtoa_r+0x698>
 8020aac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020aae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8020b0c <_dtoa_r+0xb84>
 8020ab2:	b11b      	cbz	r3, 8020abc <_dtoa_r+0xb34>
 8020ab4:	f10a 0308 	add.w	r3, sl, #8
 8020ab8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8020aba:	6013      	str	r3, [r2, #0]
 8020abc:	4650      	mov	r0, sl
 8020abe:	b019      	add	sp, #100	@ 0x64
 8020ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ac6:	2b01      	cmp	r3, #1
 8020ac8:	f77f ae37 	ble.w	802073a <_dtoa_r+0x7b2>
 8020acc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020ace:	930a      	str	r3, [sp, #40]	@ 0x28
 8020ad0:	2001      	movs	r0, #1
 8020ad2:	e655      	b.n	8020780 <_dtoa_r+0x7f8>
 8020ad4:	9b00      	ldr	r3, [sp, #0]
 8020ad6:	2b00      	cmp	r3, #0
 8020ad8:	f77f aed6 	ble.w	8020888 <_dtoa_r+0x900>
 8020adc:	4656      	mov	r6, sl
 8020ade:	4621      	mov	r1, r4
 8020ae0:	4648      	mov	r0, r9
 8020ae2:	f7ff f9c8 	bl	801fe76 <quorem>
 8020ae6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8020aea:	f806 8b01 	strb.w	r8, [r6], #1
 8020aee:	9b00      	ldr	r3, [sp, #0]
 8020af0:	eba6 020a 	sub.w	r2, r6, sl
 8020af4:	4293      	cmp	r3, r2
 8020af6:	ddb3      	ble.n	8020a60 <_dtoa_r+0xad8>
 8020af8:	4649      	mov	r1, r9
 8020afa:	2300      	movs	r3, #0
 8020afc:	220a      	movs	r2, #10
 8020afe:	4658      	mov	r0, fp
 8020b00:	f000 f8b2 	bl	8020c68 <__multadd>
 8020b04:	4681      	mov	r9, r0
 8020b06:	e7ea      	b.n	8020ade <_dtoa_r+0xb56>
 8020b08:	08022ba8 	.word	0x08022ba8
 8020b0c:	08022b2c 	.word	0x08022b2c

08020b10 <_free_r>:
 8020b10:	b538      	push	{r3, r4, r5, lr}
 8020b12:	4605      	mov	r5, r0
 8020b14:	2900      	cmp	r1, #0
 8020b16:	d041      	beq.n	8020b9c <_free_r+0x8c>
 8020b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020b1c:	1f0c      	subs	r4, r1, #4
 8020b1e:	2b00      	cmp	r3, #0
 8020b20:	bfb8      	it	lt
 8020b22:	18e4      	addlt	r4, r4, r3
 8020b24:	f7fe fad2 	bl	801f0cc <__malloc_lock>
 8020b28:	4a1d      	ldr	r2, [pc, #116]	@ (8020ba0 <_free_r+0x90>)
 8020b2a:	6813      	ldr	r3, [r2, #0]
 8020b2c:	b933      	cbnz	r3, 8020b3c <_free_r+0x2c>
 8020b2e:	6063      	str	r3, [r4, #4]
 8020b30:	6014      	str	r4, [r2, #0]
 8020b32:	4628      	mov	r0, r5
 8020b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020b38:	f7fe bace 	b.w	801f0d8 <__malloc_unlock>
 8020b3c:	42a3      	cmp	r3, r4
 8020b3e:	d908      	bls.n	8020b52 <_free_r+0x42>
 8020b40:	6820      	ldr	r0, [r4, #0]
 8020b42:	1821      	adds	r1, r4, r0
 8020b44:	428b      	cmp	r3, r1
 8020b46:	bf01      	itttt	eq
 8020b48:	6819      	ldreq	r1, [r3, #0]
 8020b4a:	685b      	ldreq	r3, [r3, #4]
 8020b4c:	1809      	addeq	r1, r1, r0
 8020b4e:	6021      	streq	r1, [r4, #0]
 8020b50:	e7ed      	b.n	8020b2e <_free_r+0x1e>
 8020b52:	461a      	mov	r2, r3
 8020b54:	685b      	ldr	r3, [r3, #4]
 8020b56:	b10b      	cbz	r3, 8020b5c <_free_r+0x4c>
 8020b58:	42a3      	cmp	r3, r4
 8020b5a:	d9fa      	bls.n	8020b52 <_free_r+0x42>
 8020b5c:	6811      	ldr	r1, [r2, #0]
 8020b5e:	1850      	adds	r0, r2, r1
 8020b60:	42a0      	cmp	r0, r4
 8020b62:	d10b      	bne.n	8020b7c <_free_r+0x6c>
 8020b64:	6820      	ldr	r0, [r4, #0]
 8020b66:	4401      	add	r1, r0
 8020b68:	1850      	adds	r0, r2, r1
 8020b6a:	4283      	cmp	r3, r0
 8020b6c:	6011      	str	r1, [r2, #0]
 8020b6e:	d1e0      	bne.n	8020b32 <_free_r+0x22>
 8020b70:	6818      	ldr	r0, [r3, #0]
 8020b72:	685b      	ldr	r3, [r3, #4]
 8020b74:	6053      	str	r3, [r2, #4]
 8020b76:	4408      	add	r0, r1
 8020b78:	6010      	str	r0, [r2, #0]
 8020b7a:	e7da      	b.n	8020b32 <_free_r+0x22>
 8020b7c:	d902      	bls.n	8020b84 <_free_r+0x74>
 8020b7e:	230c      	movs	r3, #12
 8020b80:	602b      	str	r3, [r5, #0]
 8020b82:	e7d6      	b.n	8020b32 <_free_r+0x22>
 8020b84:	6820      	ldr	r0, [r4, #0]
 8020b86:	1821      	adds	r1, r4, r0
 8020b88:	428b      	cmp	r3, r1
 8020b8a:	bf04      	itt	eq
 8020b8c:	6819      	ldreq	r1, [r3, #0]
 8020b8e:	685b      	ldreq	r3, [r3, #4]
 8020b90:	6063      	str	r3, [r4, #4]
 8020b92:	bf04      	itt	eq
 8020b94:	1809      	addeq	r1, r1, r0
 8020b96:	6021      	streq	r1, [r4, #0]
 8020b98:	6054      	str	r4, [r2, #4]
 8020b9a:	e7ca      	b.n	8020b32 <_free_r+0x22>
 8020b9c:	bd38      	pop	{r3, r4, r5, pc}
 8020b9e:	bf00      	nop
 8020ba0:	20017bac 	.word	0x20017bac

08020ba4 <_Balloc>:
 8020ba4:	b570      	push	{r4, r5, r6, lr}
 8020ba6:	69c6      	ldr	r6, [r0, #28]
 8020ba8:	4604      	mov	r4, r0
 8020baa:	460d      	mov	r5, r1
 8020bac:	b976      	cbnz	r6, 8020bcc <_Balloc+0x28>
 8020bae:	2010      	movs	r0, #16
 8020bb0:	f7fe f9da 	bl	801ef68 <malloc>
 8020bb4:	4602      	mov	r2, r0
 8020bb6:	61e0      	str	r0, [r4, #28]
 8020bb8:	b920      	cbnz	r0, 8020bc4 <_Balloc+0x20>
 8020bba:	4b18      	ldr	r3, [pc, #96]	@ (8020c1c <_Balloc+0x78>)
 8020bbc:	4818      	ldr	r0, [pc, #96]	@ (8020c20 <_Balloc+0x7c>)
 8020bbe:	216b      	movs	r1, #107	@ 0x6b
 8020bc0:	f000 fd90 	bl	80216e4 <__assert_func>
 8020bc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020bc8:	6006      	str	r6, [r0, #0]
 8020bca:	60c6      	str	r6, [r0, #12]
 8020bcc:	69e6      	ldr	r6, [r4, #28]
 8020bce:	68f3      	ldr	r3, [r6, #12]
 8020bd0:	b183      	cbz	r3, 8020bf4 <_Balloc+0x50>
 8020bd2:	69e3      	ldr	r3, [r4, #28]
 8020bd4:	68db      	ldr	r3, [r3, #12]
 8020bd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020bda:	b9b8      	cbnz	r0, 8020c0c <_Balloc+0x68>
 8020bdc:	2101      	movs	r1, #1
 8020bde:	fa01 f605 	lsl.w	r6, r1, r5
 8020be2:	1d72      	adds	r2, r6, #5
 8020be4:	0092      	lsls	r2, r2, #2
 8020be6:	4620      	mov	r0, r4
 8020be8:	f000 fd9a 	bl	8021720 <_calloc_r>
 8020bec:	b160      	cbz	r0, 8020c08 <_Balloc+0x64>
 8020bee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020bf2:	e00e      	b.n	8020c12 <_Balloc+0x6e>
 8020bf4:	2221      	movs	r2, #33	@ 0x21
 8020bf6:	2104      	movs	r1, #4
 8020bf8:	4620      	mov	r0, r4
 8020bfa:	f000 fd91 	bl	8021720 <_calloc_r>
 8020bfe:	69e3      	ldr	r3, [r4, #28]
 8020c00:	60f0      	str	r0, [r6, #12]
 8020c02:	68db      	ldr	r3, [r3, #12]
 8020c04:	2b00      	cmp	r3, #0
 8020c06:	d1e4      	bne.n	8020bd2 <_Balloc+0x2e>
 8020c08:	2000      	movs	r0, #0
 8020c0a:	bd70      	pop	{r4, r5, r6, pc}
 8020c0c:	6802      	ldr	r2, [r0, #0]
 8020c0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020c12:	2300      	movs	r3, #0
 8020c14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020c18:	e7f7      	b.n	8020c0a <_Balloc+0x66>
 8020c1a:	bf00      	nop
 8020c1c:	08022b39 	.word	0x08022b39
 8020c20:	08022bb9 	.word	0x08022bb9

08020c24 <_Bfree>:
 8020c24:	b570      	push	{r4, r5, r6, lr}
 8020c26:	69c6      	ldr	r6, [r0, #28]
 8020c28:	4605      	mov	r5, r0
 8020c2a:	460c      	mov	r4, r1
 8020c2c:	b976      	cbnz	r6, 8020c4c <_Bfree+0x28>
 8020c2e:	2010      	movs	r0, #16
 8020c30:	f7fe f99a 	bl	801ef68 <malloc>
 8020c34:	4602      	mov	r2, r0
 8020c36:	61e8      	str	r0, [r5, #28]
 8020c38:	b920      	cbnz	r0, 8020c44 <_Bfree+0x20>
 8020c3a:	4b09      	ldr	r3, [pc, #36]	@ (8020c60 <_Bfree+0x3c>)
 8020c3c:	4809      	ldr	r0, [pc, #36]	@ (8020c64 <_Bfree+0x40>)
 8020c3e:	218f      	movs	r1, #143	@ 0x8f
 8020c40:	f000 fd50 	bl	80216e4 <__assert_func>
 8020c44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020c48:	6006      	str	r6, [r0, #0]
 8020c4a:	60c6      	str	r6, [r0, #12]
 8020c4c:	b13c      	cbz	r4, 8020c5e <_Bfree+0x3a>
 8020c4e:	69eb      	ldr	r3, [r5, #28]
 8020c50:	6862      	ldr	r2, [r4, #4]
 8020c52:	68db      	ldr	r3, [r3, #12]
 8020c54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020c58:	6021      	str	r1, [r4, #0]
 8020c5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020c5e:	bd70      	pop	{r4, r5, r6, pc}
 8020c60:	08022b39 	.word	0x08022b39
 8020c64:	08022bb9 	.word	0x08022bb9

08020c68 <__multadd>:
 8020c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020c6c:	690d      	ldr	r5, [r1, #16]
 8020c6e:	4607      	mov	r7, r0
 8020c70:	460c      	mov	r4, r1
 8020c72:	461e      	mov	r6, r3
 8020c74:	f101 0c14 	add.w	ip, r1, #20
 8020c78:	2000      	movs	r0, #0
 8020c7a:	f8dc 3000 	ldr.w	r3, [ip]
 8020c7e:	b299      	uxth	r1, r3
 8020c80:	fb02 6101 	mla	r1, r2, r1, r6
 8020c84:	0c1e      	lsrs	r6, r3, #16
 8020c86:	0c0b      	lsrs	r3, r1, #16
 8020c88:	fb02 3306 	mla	r3, r2, r6, r3
 8020c8c:	b289      	uxth	r1, r1
 8020c8e:	3001      	adds	r0, #1
 8020c90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8020c94:	4285      	cmp	r5, r0
 8020c96:	f84c 1b04 	str.w	r1, [ip], #4
 8020c9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8020c9e:	dcec      	bgt.n	8020c7a <__multadd+0x12>
 8020ca0:	b30e      	cbz	r6, 8020ce6 <__multadd+0x7e>
 8020ca2:	68a3      	ldr	r3, [r4, #8]
 8020ca4:	42ab      	cmp	r3, r5
 8020ca6:	dc19      	bgt.n	8020cdc <__multadd+0x74>
 8020ca8:	6861      	ldr	r1, [r4, #4]
 8020caa:	4638      	mov	r0, r7
 8020cac:	3101      	adds	r1, #1
 8020cae:	f7ff ff79 	bl	8020ba4 <_Balloc>
 8020cb2:	4680      	mov	r8, r0
 8020cb4:	b928      	cbnz	r0, 8020cc2 <__multadd+0x5a>
 8020cb6:	4602      	mov	r2, r0
 8020cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8020cec <__multadd+0x84>)
 8020cba:	480d      	ldr	r0, [pc, #52]	@ (8020cf0 <__multadd+0x88>)
 8020cbc:	21ba      	movs	r1, #186	@ 0xba
 8020cbe:	f000 fd11 	bl	80216e4 <__assert_func>
 8020cc2:	6922      	ldr	r2, [r4, #16]
 8020cc4:	3202      	adds	r2, #2
 8020cc6:	f104 010c 	add.w	r1, r4, #12
 8020cca:	0092      	lsls	r2, r2, #2
 8020ccc:	300c      	adds	r0, #12
 8020cce:	f7ff f8c4 	bl	801fe5a <memcpy>
 8020cd2:	4621      	mov	r1, r4
 8020cd4:	4638      	mov	r0, r7
 8020cd6:	f7ff ffa5 	bl	8020c24 <_Bfree>
 8020cda:	4644      	mov	r4, r8
 8020cdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8020ce0:	3501      	adds	r5, #1
 8020ce2:	615e      	str	r6, [r3, #20]
 8020ce4:	6125      	str	r5, [r4, #16]
 8020ce6:	4620      	mov	r0, r4
 8020ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020cec:	08022ba8 	.word	0x08022ba8
 8020cf0:	08022bb9 	.word	0x08022bb9

08020cf4 <__hi0bits>:
 8020cf4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8020cf8:	4603      	mov	r3, r0
 8020cfa:	bf36      	itet	cc
 8020cfc:	0403      	lslcc	r3, r0, #16
 8020cfe:	2000      	movcs	r0, #0
 8020d00:	2010      	movcc	r0, #16
 8020d02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8020d06:	bf3c      	itt	cc
 8020d08:	021b      	lslcc	r3, r3, #8
 8020d0a:	3008      	addcc	r0, #8
 8020d0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8020d10:	bf3c      	itt	cc
 8020d12:	011b      	lslcc	r3, r3, #4
 8020d14:	3004      	addcc	r0, #4
 8020d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020d1a:	bf3c      	itt	cc
 8020d1c:	009b      	lslcc	r3, r3, #2
 8020d1e:	3002      	addcc	r0, #2
 8020d20:	2b00      	cmp	r3, #0
 8020d22:	db05      	blt.n	8020d30 <__hi0bits+0x3c>
 8020d24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8020d28:	f100 0001 	add.w	r0, r0, #1
 8020d2c:	bf08      	it	eq
 8020d2e:	2020      	moveq	r0, #32
 8020d30:	4770      	bx	lr

08020d32 <__lo0bits>:
 8020d32:	6803      	ldr	r3, [r0, #0]
 8020d34:	4602      	mov	r2, r0
 8020d36:	f013 0007 	ands.w	r0, r3, #7
 8020d3a:	d00b      	beq.n	8020d54 <__lo0bits+0x22>
 8020d3c:	07d9      	lsls	r1, r3, #31
 8020d3e:	d421      	bmi.n	8020d84 <__lo0bits+0x52>
 8020d40:	0798      	lsls	r0, r3, #30
 8020d42:	bf49      	itett	mi
 8020d44:	085b      	lsrmi	r3, r3, #1
 8020d46:	089b      	lsrpl	r3, r3, #2
 8020d48:	2001      	movmi	r0, #1
 8020d4a:	6013      	strmi	r3, [r2, #0]
 8020d4c:	bf5c      	itt	pl
 8020d4e:	6013      	strpl	r3, [r2, #0]
 8020d50:	2002      	movpl	r0, #2
 8020d52:	4770      	bx	lr
 8020d54:	b299      	uxth	r1, r3
 8020d56:	b909      	cbnz	r1, 8020d5c <__lo0bits+0x2a>
 8020d58:	0c1b      	lsrs	r3, r3, #16
 8020d5a:	2010      	movs	r0, #16
 8020d5c:	b2d9      	uxtb	r1, r3
 8020d5e:	b909      	cbnz	r1, 8020d64 <__lo0bits+0x32>
 8020d60:	3008      	adds	r0, #8
 8020d62:	0a1b      	lsrs	r3, r3, #8
 8020d64:	0719      	lsls	r1, r3, #28
 8020d66:	bf04      	itt	eq
 8020d68:	091b      	lsreq	r3, r3, #4
 8020d6a:	3004      	addeq	r0, #4
 8020d6c:	0799      	lsls	r1, r3, #30
 8020d6e:	bf04      	itt	eq
 8020d70:	089b      	lsreq	r3, r3, #2
 8020d72:	3002      	addeq	r0, #2
 8020d74:	07d9      	lsls	r1, r3, #31
 8020d76:	d403      	bmi.n	8020d80 <__lo0bits+0x4e>
 8020d78:	085b      	lsrs	r3, r3, #1
 8020d7a:	f100 0001 	add.w	r0, r0, #1
 8020d7e:	d003      	beq.n	8020d88 <__lo0bits+0x56>
 8020d80:	6013      	str	r3, [r2, #0]
 8020d82:	4770      	bx	lr
 8020d84:	2000      	movs	r0, #0
 8020d86:	4770      	bx	lr
 8020d88:	2020      	movs	r0, #32
 8020d8a:	4770      	bx	lr

08020d8c <__i2b>:
 8020d8c:	b510      	push	{r4, lr}
 8020d8e:	460c      	mov	r4, r1
 8020d90:	2101      	movs	r1, #1
 8020d92:	f7ff ff07 	bl	8020ba4 <_Balloc>
 8020d96:	4602      	mov	r2, r0
 8020d98:	b928      	cbnz	r0, 8020da6 <__i2b+0x1a>
 8020d9a:	4b05      	ldr	r3, [pc, #20]	@ (8020db0 <__i2b+0x24>)
 8020d9c:	4805      	ldr	r0, [pc, #20]	@ (8020db4 <__i2b+0x28>)
 8020d9e:	f240 1145 	movw	r1, #325	@ 0x145
 8020da2:	f000 fc9f 	bl	80216e4 <__assert_func>
 8020da6:	2301      	movs	r3, #1
 8020da8:	6144      	str	r4, [r0, #20]
 8020daa:	6103      	str	r3, [r0, #16]
 8020dac:	bd10      	pop	{r4, pc}
 8020dae:	bf00      	nop
 8020db0:	08022ba8 	.word	0x08022ba8
 8020db4:	08022bb9 	.word	0x08022bb9

08020db8 <__multiply>:
 8020db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dbc:	4614      	mov	r4, r2
 8020dbe:	690a      	ldr	r2, [r1, #16]
 8020dc0:	6923      	ldr	r3, [r4, #16]
 8020dc2:	429a      	cmp	r2, r3
 8020dc4:	bfa8      	it	ge
 8020dc6:	4623      	movge	r3, r4
 8020dc8:	460f      	mov	r7, r1
 8020dca:	bfa4      	itt	ge
 8020dcc:	460c      	movge	r4, r1
 8020dce:	461f      	movge	r7, r3
 8020dd0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8020dd4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8020dd8:	68a3      	ldr	r3, [r4, #8]
 8020dda:	6861      	ldr	r1, [r4, #4]
 8020ddc:	eb0a 0609 	add.w	r6, sl, r9
 8020de0:	42b3      	cmp	r3, r6
 8020de2:	b085      	sub	sp, #20
 8020de4:	bfb8      	it	lt
 8020de6:	3101      	addlt	r1, #1
 8020de8:	f7ff fedc 	bl	8020ba4 <_Balloc>
 8020dec:	b930      	cbnz	r0, 8020dfc <__multiply+0x44>
 8020dee:	4602      	mov	r2, r0
 8020df0:	4b44      	ldr	r3, [pc, #272]	@ (8020f04 <__multiply+0x14c>)
 8020df2:	4845      	ldr	r0, [pc, #276]	@ (8020f08 <__multiply+0x150>)
 8020df4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8020df8:	f000 fc74 	bl	80216e4 <__assert_func>
 8020dfc:	f100 0514 	add.w	r5, r0, #20
 8020e00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8020e04:	462b      	mov	r3, r5
 8020e06:	2200      	movs	r2, #0
 8020e08:	4543      	cmp	r3, r8
 8020e0a:	d321      	bcc.n	8020e50 <__multiply+0x98>
 8020e0c:	f107 0114 	add.w	r1, r7, #20
 8020e10:	f104 0214 	add.w	r2, r4, #20
 8020e14:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8020e18:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8020e1c:	9302      	str	r3, [sp, #8]
 8020e1e:	1b13      	subs	r3, r2, r4
 8020e20:	3b15      	subs	r3, #21
 8020e22:	f023 0303 	bic.w	r3, r3, #3
 8020e26:	3304      	adds	r3, #4
 8020e28:	f104 0715 	add.w	r7, r4, #21
 8020e2c:	42ba      	cmp	r2, r7
 8020e2e:	bf38      	it	cc
 8020e30:	2304      	movcc	r3, #4
 8020e32:	9301      	str	r3, [sp, #4]
 8020e34:	9b02      	ldr	r3, [sp, #8]
 8020e36:	9103      	str	r1, [sp, #12]
 8020e38:	428b      	cmp	r3, r1
 8020e3a:	d80c      	bhi.n	8020e56 <__multiply+0x9e>
 8020e3c:	2e00      	cmp	r6, #0
 8020e3e:	dd03      	ble.n	8020e48 <__multiply+0x90>
 8020e40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8020e44:	2b00      	cmp	r3, #0
 8020e46:	d05b      	beq.n	8020f00 <__multiply+0x148>
 8020e48:	6106      	str	r6, [r0, #16]
 8020e4a:	b005      	add	sp, #20
 8020e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e50:	f843 2b04 	str.w	r2, [r3], #4
 8020e54:	e7d8      	b.n	8020e08 <__multiply+0x50>
 8020e56:	f8b1 a000 	ldrh.w	sl, [r1]
 8020e5a:	f1ba 0f00 	cmp.w	sl, #0
 8020e5e:	d024      	beq.n	8020eaa <__multiply+0xf2>
 8020e60:	f104 0e14 	add.w	lr, r4, #20
 8020e64:	46a9      	mov	r9, r5
 8020e66:	f04f 0c00 	mov.w	ip, #0
 8020e6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8020e6e:	f8d9 3000 	ldr.w	r3, [r9]
 8020e72:	fa1f fb87 	uxth.w	fp, r7
 8020e76:	b29b      	uxth	r3, r3
 8020e78:	fb0a 330b 	mla	r3, sl, fp, r3
 8020e7c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8020e80:	f8d9 7000 	ldr.w	r7, [r9]
 8020e84:	4463      	add	r3, ip
 8020e86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8020e8a:	fb0a c70b 	mla	r7, sl, fp, ip
 8020e8e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8020e92:	b29b      	uxth	r3, r3
 8020e94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8020e98:	4572      	cmp	r2, lr
 8020e9a:	f849 3b04 	str.w	r3, [r9], #4
 8020e9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8020ea2:	d8e2      	bhi.n	8020e6a <__multiply+0xb2>
 8020ea4:	9b01      	ldr	r3, [sp, #4]
 8020ea6:	f845 c003 	str.w	ip, [r5, r3]
 8020eaa:	9b03      	ldr	r3, [sp, #12]
 8020eac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8020eb0:	3104      	adds	r1, #4
 8020eb2:	f1b9 0f00 	cmp.w	r9, #0
 8020eb6:	d021      	beq.n	8020efc <__multiply+0x144>
 8020eb8:	682b      	ldr	r3, [r5, #0]
 8020eba:	f104 0c14 	add.w	ip, r4, #20
 8020ebe:	46ae      	mov	lr, r5
 8020ec0:	f04f 0a00 	mov.w	sl, #0
 8020ec4:	f8bc b000 	ldrh.w	fp, [ip]
 8020ec8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8020ecc:	fb09 770b 	mla	r7, r9, fp, r7
 8020ed0:	4457      	add	r7, sl
 8020ed2:	b29b      	uxth	r3, r3
 8020ed4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8020ed8:	f84e 3b04 	str.w	r3, [lr], #4
 8020edc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8020ee0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8020ee4:	f8be 3000 	ldrh.w	r3, [lr]
 8020ee8:	fb09 330a 	mla	r3, r9, sl, r3
 8020eec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8020ef0:	4562      	cmp	r2, ip
 8020ef2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8020ef6:	d8e5      	bhi.n	8020ec4 <__multiply+0x10c>
 8020ef8:	9f01      	ldr	r7, [sp, #4]
 8020efa:	51eb      	str	r3, [r5, r7]
 8020efc:	3504      	adds	r5, #4
 8020efe:	e799      	b.n	8020e34 <__multiply+0x7c>
 8020f00:	3e01      	subs	r6, #1
 8020f02:	e79b      	b.n	8020e3c <__multiply+0x84>
 8020f04:	08022ba8 	.word	0x08022ba8
 8020f08:	08022bb9 	.word	0x08022bb9

08020f0c <__pow5mult>:
 8020f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020f10:	4615      	mov	r5, r2
 8020f12:	f012 0203 	ands.w	r2, r2, #3
 8020f16:	4607      	mov	r7, r0
 8020f18:	460e      	mov	r6, r1
 8020f1a:	d007      	beq.n	8020f2c <__pow5mult+0x20>
 8020f1c:	4c25      	ldr	r4, [pc, #148]	@ (8020fb4 <__pow5mult+0xa8>)
 8020f1e:	3a01      	subs	r2, #1
 8020f20:	2300      	movs	r3, #0
 8020f22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020f26:	f7ff fe9f 	bl	8020c68 <__multadd>
 8020f2a:	4606      	mov	r6, r0
 8020f2c:	10ad      	asrs	r5, r5, #2
 8020f2e:	d03d      	beq.n	8020fac <__pow5mult+0xa0>
 8020f30:	69fc      	ldr	r4, [r7, #28]
 8020f32:	b97c      	cbnz	r4, 8020f54 <__pow5mult+0x48>
 8020f34:	2010      	movs	r0, #16
 8020f36:	f7fe f817 	bl	801ef68 <malloc>
 8020f3a:	4602      	mov	r2, r0
 8020f3c:	61f8      	str	r0, [r7, #28]
 8020f3e:	b928      	cbnz	r0, 8020f4c <__pow5mult+0x40>
 8020f40:	4b1d      	ldr	r3, [pc, #116]	@ (8020fb8 <__pow5mult+0xac>)
 8020f42:	481e      	ldr	r0, [pc, #120]	@ (8020fbc <__pow5mult+0xb0>)
 8020f44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8020f48:	f000 fbcc 	bl	80216e4 <__assert_func>
 8020f4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8020f50:	6004      	str	r4, [r0, #0]
 8020f52:	60c4      	str	r4, [r0, #12]
 8020f54:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8020f58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8020f5c:	b94c      	cbnz	r4, 8020f72 <__pow5mult+0x66>
 8020f5e:	f240 2171 	movw	r1, #625	@ 0x271
 8020f62:	4638      	mov	r0, r7
 8020f64:	f7ff ff12 	bl	8020d8c <__i2b>
 8020f68:	2300      	movs	r3, #0
 8020f6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8020f6e:	4604      	mov	r4, r0
 8020f70:	6003      	str	r3, [r0, #0]
 8020f72:	f04f 0900 	mov.w	r9, #0
 8020f76:	07eb      	lsls	r3, r5, #31
 8020f78:	d50a      	bpl.n	8020f90 <__pow5mult+0x84>
 8020f7a:	4631      	mov	r1, r6
 8020f7c:	4622      	mov	r2, r4
 8020f7e:	4638      	mov	r0, r7
 8020f80:	f7ff ff1a 	bl	8020db8 <__multiply>
 8020f84:	4631      	mov	r1, r6
 8020f86:	4680      	mov	r8, r0
 8020f88:	4638      	mov	r0, r7
 8020f8a:	f7ff fe4b 	bl	8020c24 <_Bfree>
 8020f8e:	4646      	mov	r6, r8
 8020f90:	106d      	asrs	r5, r5, #1
 8020f92:	d00b      	beq.n	8020fac <__pow5mult+0xa0>
 8020f94:	6820      	ldr	r0, [r4, #0]
 8020f96:	b938      	cbnz	r0, 8020fa8 <__pow5mult+0x9c>
 8020f98:	4622      	mov	r2, r4
 8020f9a:	4621      	mov	r1, r4
 8020f9c:	4638      	mov	r0, r7
 8020f9e:	f7ff ff0b 	bl	8020db8 <__multiply>
 8020fa2:	6020      	str	r0, [r4, #0]
 8020fa4:	f8c0 9000 	str.w	r9, [r0]
 8020fa8:	4604      	mov	r4, r0
 8020faa:	e7e4      	b.n	8020f76 <__pow5mult+0x6a>
 8020fac:	4630      	mov	r0, r6
 8020fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020fb2:	bf00      	nop
 8020fb4:	08022c14 	.word	0x08022c14
 8020fb8:	08022b39 	.word	0x08022b39
 8020fbc:	08022bb9 	.word	0x08022bb9

08020fc0 <__lshift>:
 8020fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020fc4:	460c      	mov	r4, r1
 8020fc6:	6849      	ldr	r1, [r1, #4]
 8020fc8:	6923      	ldr	r3, [r4, #16]
 8020fca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8020fce:	68a3      	ldr	r3, [r4, #8]
 8020fd0:	4607      	mov	r7, r0
 8020fd2:	4691      	mov	r9, r2
 8020fd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8020fd8:	f108 0601 	add.w	r6, r8, #1
 8020fdc:	42b3      	cmp	r3, r6
 8020fde:	db0b      	blt.n	8020ff8 <__lshift+0x38>
 8020fe0:	4638      	mov	r0, r7
 8020fe2:	f7ff fddf 	bl	8020ba4 <_Balloc>
 8020fe6:	4605      	mov	r5, r0
 8020fe8:	b948      	cbnz	r0, 8020ffe <__lshift+0x3e>
 8020fea:	4602      	mov	r2, r0
 8020fec:	4b28      	ldr	r3, [pc, #160]	@ (8021090 <__lshift+0xd0>)
 8020fee:	4829      	ldr	r0, [pc, #164]	@ (8021094 <__lshift+0xd4>)
 8020ff0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8020ff4:	f000 fb76 	bl	80216e4 <__assert_func>
 8020ff8:	3101      	adds	r1, #1
 8020ffa:	005b      	lsls	r3, r3, #1
 8020ffc:	e7ee      	b.n	8020fdc <__lshift+0x1c>
 8020ffe:	2300      	movs	r3, #0
 8021000:	f100 0114 	add.w	r1, r0, #20
 8021004:	f100 0210 	add.w	r2, r0, #16
 8021008:	4618      	mov	r0, r3
 802100a:	4553      	cmp	r3, sl
 802100c:	db33      	blt.n	8021076 <__lshift+0xb6>
 802100e:	6920      	ldr	r0, [r4, #16]
 8021010:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021014:	f104 0314 	add.w	r3, r4, #20
 8021018:	f019 091f 	ands.w	r9, r9, #31
 802101c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021020:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8021024:	d02b      	beq.n	802107e <__lshift+0xbe>
 8021026:	f1c9 0e20 	rsb	lr, r9, #32
 802102a:	468a      	mov	sl, r1
 802102c:	2200      	movs	r2, #0
 802102e:	6818      	ldr	r0, [r3, #0]
 8021030:	fa00 f009 	lsl.w	r0, r0, r9
 8021034:	4310      	orrs	r0, r2
 8021036:	f84a 0b04 	str.w	r0, [sl], #4
 802103a:	f853 2b04 	ldr.w	r2, [r3], #4
 802103e:	459c      	cmp	ip, r3
 8021040:	fa22 f20e 	lsr.w	r2, r2, lr
 8021044:	d8f3      	bhi.n	802102e <__lshift+0x6e>
 8021046:	ebac 0304 	sub.w	r3, ip, r4
 802104a:	3b15      	subs	r3, #21
 802104c:	f023 0303 	bic.w	r3, r3, #3
 8021050:	3304      	adds	r3, #4
 8021052:	f104 0015 	add.w	r0, r4, #21
 8021056:	4584      	cmp	ip, r0
 8021058:	bf38      	it	cc
 802105a:	2304      	movcc	r3, #4
 802105c:	50ca      	str	r2, [r1, r3]
 802105e:	b10a      	cbz	r2, 8021064 <__lshift+0xa4>
 8021060:	f108 0602 	add.w	r6, r8, #2
 8021064:	3e01      	subs	r6, #1
 8021066:	4638      	mov	r0, r7
 8021068:	612e      	str	r6, [r5, #16]
 802106a:	4621      	mov	r1, r4
 802106c:	f7ff fdda 	bl	8020c24 <_Bfree>
 8021070:	4628      	mov	r0, r5
 8021072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021076:	f842 0f04 	str.w	r0, [r2, #4]!
 802107a:	3301      	adds	r3, #1
 802107c:	e7c5      	b.n	802100a <__lshift+0x4a>
 802107e:	3904      	subs	r1, #4
 8021080:	f853 2b04 	ldr.w	r2, [r3], #4
 8021084:	f841 2f04 	str.w	r2, [r1, #4]!
 8021088:	459c      	cmp	ip, r3
 802108a:	d8f9      	bhi.n	8021080 <__lshift+0xc0>
 802108c:	e7ea      	b.n	8021064 <__lshift+0xa4>
 802108e:	bf00      	nop
 8021090:	08022ba8 	.word	0x08022ba8
 8021094:	08022bb9 	.word	0x08022bb9

08021098 <__mcmp>:
 8021098:	690a      	ldr	r2, [r1, #16]
 802109a:	4603      	mov	r3, r0
 802109c:	6900      	ldr	r0, [r0, #16]
 802109e:	1a80      	subs	r0, r0, r2
 80210a0:	b530      	push	{r4, r5, lr}
 80210a2:	d10e      	bne.n	80210c2 <__mcmp+0x2a>
 80210a4:	3314      	adds	r3, #20
 80210a6:	3114      	adds	r1, #20
 80210a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80210ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80210b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80210b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80210b8:	4295      	cmp	r5, r2
 80210ba:	d003      	beq.n	80210c4 <__mcmp+0x2c>
 80210bc:	d205      	bcs.n	80210ca <__mcmp+0x32>
 80210be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80210c2:	bd30      	pop	{r4, r5, pc}
 80210c4:	42a3      	cmp	r3, r4
 80210c6:	d3f3      	bcc.n	80210b0 <__mcmp+0x18>
 80210c8:	e7fb      	b.n	80210c2 <__mcmp+0x2a>
 80210ca:	2001      	movs	r0, #1
 80210cc:	e7f9      	b.n	80210c2 <__mcmp+0x2a>
	...

080210d0 <__mdiff>:
 80210d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210d4:	4689      	mov	r9, r1
 80210d6:	4606      	mov	r6, r0
 80210d8:	4611      	mov	r1, r2
 80210da:	4648      	mov	r0, r9
 80210dc:	4614      	mov	r4, r2
 80210de:	f7ff ffdb 	bl	8021098 <__mcmp>
 80210e2:	1e05      	subs	r5, r0, #0
 80210e4:	d112      	bne.n	802110c <__mdiff+0x3c>
 80210e6:	4629      	mov	r1, r5
 80210e8:	4630      	mov	r0, r6
 80210ea:	f7ff fd5b 	bl	8020ba4 <_Balloc>
 80210ee:	4602      	mov	r2, r0
 80210f0:	b928      	cbnz	r0, 80210fe <__mdiff+0x2e>
 80210f2:	4b3f      	ldr	r3, [pc, #252]	@ (80211f0 <__mdiff+0x120>)
 80210f4:	f240 2137 	movw	r1, #567	@ 0x237
 80210f8:	483e      	ldr	r0, [pc, #248]	@ (80211f4 <__mdiff+0x124>)
 80210fa:	f000 faf3 	bl	80216e4 <__assert_func>
 80210fe:	2301      	movs	r3, #1
 8021100:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021104:	4610      	mov	r0, r2
 8021106:	b003      	add	sp, #12
 8021108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802110c:	bfbc      	itt	lt
 802110e:	464b      	movlt	r3, r9
 8021110:	46a1      	movlt	r9, r4
 8021112:	4630      	mov	r0, r6
 8021114:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8021118:	bfba      	itte	lt
 802111a:	461c      	movlt	r4, r3
 802111c:	2501      	movlt	r5, #1
 802111e:	2500      	movge	r5, #0
 8021120:	f7ff fd40 	bl	8020ba4 <_Balloc>
 8021124:	4602      	mov	r2, r0
 8021126:	b918      	cbnz	r0, 8021130 <__mdiff+0x60>
 8021128:	4b31      	ldr	r3, [pc, #196]	@ (80211f0 <__mdiff+0x120>)
 802112a:	f240 2145 	movw	r1, #581	@ 0x245
 802112e:	e7e3      	b.n	80210f8 <__mdiff+0x28>
 8021130:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8021134:	6926      	ldr	r6, [r4, #16]
 8021136:	60c5      	str	r5, [r0, #12]
 8021138:	f109 0310 	add.w	r3, r9, #16
 802113c:	f109 0514 	add.w	r5, r9, #20
 8021140:	f104 0e14 	add.w	lr, r4, #20
 8021144:	f100 0b14 	add.w	fp, r0, #20
 8021148:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802114c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8021150:	9301      	str	r3, [sp, #4]
 8021152:	46d9      	mov	r9, fp
 8021154:	f04f 0c00 	mov.w	ip, #0
 8021158:	9b01      	ldr	r3, [sp, #4]
 802115a:	f85e 0b04 	ldr.w	r0, [lr], #4
 802115e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8021162:	9301      	str	r3, [sp, #4]
 8021164:	fa1f f38a 	uxth.w	r3, sl
 8021168:	4619      	mov	r1, r3
 802116a:	b283      	uxth	r3, r0
 802116c:	1acb      	subs	r3, r1, r3
 802116e:	0c00      	lsrs	r0, r0, #16
 8021170:	4463      	add	r3, ip
 8021172:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8021176:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802117a:	b29b      	uxth	r3, r3
 802117c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8021180:	4576      	cmp	r6, lr
 8021182:	f849 3b04 	str.w	r3, [r9], #4
 8021186:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802118a:	d8e5      	bhi.n	8021158 <__mdiff+0x88>
 802118c:	1b33      	subs	r3, r6, r4
 802118e:	3b15      	subs	r3, #21
 8021190:	f023 0303 	bic.w	r3, r3, #3
 8021194:	3415      	adds	r4, #21
 8021196:	3304      	adds	r3, #4
 8021198:	42a6      	cmp	r6, r4
 802119a:	bf38      	it	cc
 802119c:	2304      	movcc	r3, #4
 802119e:	441d      	add	r5, r3
 80211a0:	445b      	add	r3, fp
 80211a2:	461e      	mov	r6, r3
 80211a4:	462c      	mov	r4, r5
 80211a6:	4544      	cmp	r4, r8
 80211a8:	d30e      	bcc.n	80211c8 <__mdiff+0xf8>
 80211aa:	f108 0103 	add.w	r1, r8, #3
 80211ae:	1b49      	subs	r1, r1, r5
 80211b0:	f021 0103 	bic.w	r1, r1, #3
 80211b4:	3d03      	subs	r5, #3
 80211b6:	45a8      	cmp	r8, r5
 80211b8:	bf38      	it	cc
 80211ba:	2100      	movcc	r1, #0
 80211bc:	440b      	add	r3, r1
 80211be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80211c2:	b191      	cbz	r1, 80211ea <__mdiff+0x11a>
 80211c4:	6117      	str	r7, [r2, #16]
 80211c6:	e79d      	b.n	8021104 <__mdiff+0x34>
 80211c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80211cc:	46e6      	mov	lr, ip
 80211ce:	0c08      	lsrs	r0, r1, #16
 80211d0:	fa1c fc81 	uxtah	ip, ip, r1
 80211d4:	4471      	add	r1, lr
 80211d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80211da:	b289      	uxth	r1, r1
 80211dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80211e0:	f846 1b04 	str.w	r1, [r6], #4
 80211e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80211e8:	e7dd      	b.n	80211a6 <__mdiff+0xd6>
 80211ea:	3f01      	subs	r7, #1
 80211ec:	e7e7      	b.n	80211be <__mdiff+0xee>
 80211ee:	bf00      	nop
 80211f0:	08022ba8 	.word	0x08022ba8
 80211f4:	08022bb9 	.word	0x08022bb9

080211f8 <__d2b>:
 80211f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80211fc:	460f      	mov	r7, r1
 80211fe:	2101      	movs	r1, #1
 8021200:	ec59 8b10 	vmov	r8, r9, d0
 8021204:	4616      	mov	r6, r2
 8021206:	f7ff fccd 	bl	8020ba4 <_Balloc>
 802120a:	4604      	mov	r4, r0
 802120c:	b930      	cbnz	r0, 802121c <__d2b+0x24>
 802120e:	4602      	mov	r2, r0
 8021210:	4b23      	ldr	r3, [pc, #140]	@ (80212a0 <__d2b+0xa8>)
 8021212:	4824      	ldr	r0, [pc, #144]	@ (80212a4 <__d2b+0xac>)
 8021214:	f240 310f 	movw	r1, #783	@ 0x30f
 8021218:	f000 fa64 	bl	80216e4 <__assert_func>
 802121c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8021220:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021224:	b10d      	cbz	r5, 802122a <__d2b+0x32>
 8021226:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802122a:	9301      	str	r3, [sp, #4]
 802122c:	f1b8 0300 	subs.w	r3, r8, #0
 8021230:	d023      	beq.n	802127a <__d2b+0x82>
 8021232:	4668      	mov	r0, sp
 8021234:	9300      	str	r3, [sp, #0]
 8021236:	f7ff fd7c 	bl	8020d32 <__lo0bits>
 802123a:	e9dd 1200 	ldrd	r1, r2, [sp]
 802123e:	b1d0      	cbz	r0, 8021276 <__d2b+0x7e>
 8021240:	f1c0 0320 	rsb	r3, r0, #32
 8021244:	fa02 f303 	lsl.w	r3, r2, r3
 8021248:	430b      	orrs	r3, r1
 802124a:	40c2      	lsrs	r2, r0
 802124c:	6163      	str	r3, [r4, #20]
 802124e:	9201      	str	r2, [sp, #4]
 8021250:	9b01      	ldr	r3, [sp, #4]
 8021252:	61a3      	str	r3, [r4, #24]
 8021254:	2b00      	cmp	r3, #0
 8021256:	bf0c      	ite	eq
 8021258:	2201      	moveq	r2, #1
 802125a:	2202      	movne	r2, #2
 802125c:	6122      	str	r2, [r4, #16]
 802125e:	b1a5      	cbz	r5, 802128a <__d2b+0x92>
 8021260:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8021264:	4405      	add	r5, r0
 8021266:	603d      	str	r5, [r7, #0]
 8021268:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 802126c:	6030      	str	r0, [r6, #0]
 802126e:	4620      	mov	r0, r4
 8021270:	b003      	add	sp, #12
 8021272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021276:	6161      	str	r1, [r4, #20]
 8021278:	e7ea      	b.n	8021250 <__d2b+0x58>
 802127a:	a801      	add	r0, sp, #4
 802127c:	f7ff fd59 	bl	8020d32 <__lo0bits>
 8021280:	9b01      	ldr	r3, [sp, #4]
 8021282:	6163      	str	r3, [r4, #20]
 8021284:	3020      	adds	r0, #32
 8021286:	2201      	movs	r2, #1
 8021288:	e7e8      	b.n	802125c <__d2b+0x64>
 802128a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802128e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8021292:	6038      	str	r0, [r7, #0]
 8021294:	6918      	ldr	r0, [r3, #16]
 8021296:	f7ff fd2d 	bl	8020cf4 <__hi0bits>
 802129a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802129e:	e7e5      	b.n	802126c <__d2b+0x74>
 80212a0:	08022ba8 	.word	0x08022ba8
 80212a4:	08022bb9 	.word	0x08022bb9

080212a8 <__ssputs_r>:
 80212a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80212ac:	688e      	ldr	r6, [r1, #8]
 80212ae:	461f      	mov	r7, r3
 80212b0:	42be      	cmp	r6, r7
 80212b2:	680b      	ldr	r3, [r1, #0]
 80212b4:	4682      	mov	sl, r0
 80212b6:	460c      	mov	r4, r1
 80212b8:	4690      	mov	r8, r2
 80212ba:	d82d      	bhi.n	8021318 <__ssputs_r+0x70>
 80212bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80212c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80212c4:	d026      	beq.n	8021314 <__ssputs_r+0x6c>
 80212c6:	6965      	ldr	r5, [r4, #20]
 80212c8:	6909      	ldr	r1, [r1, #16]
 80212ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80212ce:	eba3 0901 	sub.w	r9, r3, r1
 80212d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80212d6:	1c7b      	adds	r3, r7, #1
 80212d8:	444b      	add	r3, r9
 80212da:	106d      	asrs	r5, r5, #1
 80212dc:	429d      	cmp	r5, r3
 80212de:	bf38      	it	cc
 80212e0:	461d      	movcc	r5, r3
 80212e2:	0553      	lsls	r3, r2, #21
 80212e4:	d527      	bpl.n	8021336 <__ssputs_r+0x8e>
 80212e6:	4629      	mov	r1, r5
 80212e8:	f7fd fe70 	bl	801efcc <_malloc_r>
 80212ec:	4606      	mov	r6, r0
 80212ee:	b360      	cbz	r0, 802134a <__ssputs_r+0xa2>
 80212f0:	6921      	ldr	r1, [r4, #16]
 80212f2:	464a      	mov	r2, r9
 80212f4:	f7fe fdb1 	bl	801fe5a <memcpy>
 80212f8:	89a3      	ldrh	r3, [r4, #12]
 80212fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80212fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021302:	81a3      	strh	r3, [r4, #12]
 8021304:	6126      	str	r6, [r4, #16]
 8021306:	6165      	str	r5, [r4, #20]
 8021308:	444e      	add	r6, r9
 802130a:	eba5 0509 	sub.w	r5, r5, r9
 802130e:	6026      	str	r6, [r4, #0]
 8021310:	60a5      	str	r5, [r4, #8]
 8021312:	463e      	mov	r6, r7
 8021314:	42be      	cmp	r6, r7
 8021316:	d900      	bls.n	802131a <__ssputs_r+0x72>
 8021318:	463e      	mov	r6, r7
 802131a:	6820      	ldr	r0, [r4, #0]
 802131c:	4632      	mov	r2, r6
 802131e:	4641      	mov	r1, r8
 8021320:	f000 f9c6 	bl	80216b0 <memmove>
 8021324:	68a3      	ldr	r3, [r4, #8]
 8021326:	1b9b      	subs	r3, r3, r6
 8021328:	60a3      	str	r3, [r4, #8]
 802132a:	6823      	ldr	r3, [r4, #0]
 802132c:	4433      	add	r3, r6
 802132e:	6023      	str	r3, [r4, #0]
 8021330:	2000      	movs	r0, #0
 8021332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021336:	462a      	mov	r2, r5
 8021338:	f000 fa18 	bl	802176c <_realloc_r>
 802133c:	4606      	mov	r6, r0
 802133e:	2800      	cmp	r0, #0
 8021340:	d1e0      	bne.n	8021304 <__ssputs_r+0x5c>
 8021342:	6921      	ldr	r1, [r4, #16]
 8021344:	4650      	mov	r0, sl
 8021346:	f7ff fbe3 	bl	8020b10 <_free_r>
 802134a:	230c      	movs	r3, #12
 802134c:	f8ca 3000 	str.w	r3, [sl]
 8021350:	89a3      	ldrh	r3, [r4, #12]
 8021352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021356:	81a3      	strh	r3, [r4, #12]
 8021358:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802135c:	e7e9      	b.n	8021332 <__ssputs_r+0x8a>
	...

08021360 <_svfiprintf_r>:
 8021360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021364:	4698      	mov	r8, r3
 8021366:	898b      	ldrh	r3, [r1, #12]
 8021368:	061b      	lsls	r3, r3, #24
 802136a:	b09d      	sub	sp, #116	@ 0x74
 802136c:	4607      	mov	r7, r0
 802136e:	460d      	mov	r5, r1
 8021370:	4614      	mov	r4, r2
 8021372:	d510      	bpl.n	8021396 <_svfiprintf_r+0x36>
 8021374:	690b      	ldr	r3, [r1, #16]
 8021376:	b973      	cbnz	r3, 8021396 <_svfiprintf_r+0x36>
 8021378:	2140      	movs	r1, #64	@ 0x40
 802137a:	f7fd fe27 	bl	801efcc <_malloc_r>
 802137e:	6028      	str	r0, [r5, #0]
 8021380:	6128      	str	r0, [r5, #16]
 8021382:	b930      	cbnz	r0, 8021392 <_svfiprintf_r+0x32>
 8021384:	230c      	movs	r3, #12
 8021386:	603b      	str	r3, [r7, #0]
 8021388:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802138c:	b01d      	add	sp, #116	@ 0x74
 802138e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021392:	2340      	movs	r3, #64	@ 0x40
 8021394:	616b      	str	r3, [r5, #20]
 8021396:	2300      	movs	r3, #0
 8021398:	9309      	str	r3, [sp, #36]	@ 0x24
 802139a:	2320      	movs	r3, #32
 802139c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80213a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80213a4:	2330      	movs	r3, #48	@ 0x30
 80213a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8021544 <_svfiprintf_r+0x1e4>
 80213aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80213ae:	f04f 0901 	mov.w	r9, #1
 80213b2:	4623      	mov	r3, r4
 80213b4:	469a      	mov	sl, r3
 80213b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80213ba:	b10a      	cbz	r2, 80213c0 <_svfiprintf_r+0x60>
 80213bc:	2a25      	cmp	r2, #37	@ 0x25
 80213be:	d1f9      	bne.n	80213b4 <_svfiprintf_r+0x54>
 80213c0:	ebba 0b04 	subs.w	fp, sl, r4
 80213c4:	d00b      	beq.n	80213de <_svfiprintf_r+0x7e>
 80213c6:	465b      	mov	r3, fp
 80213c8:	4622      	mov	r2, r4
 80213ca:	4629      	mov	r1, r5
 80213cc:	4638      	mov	r0, r7
 80213ce:	f7ff ff6b 	bl	80212a8 <__ssputs_r>
 80213d2:	3001      	adds	r0, #1
 80213d4:	f000 80a7 	beq.w	8021526 <_svfiprintf_r+0x1c6>
 80213d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80213da:	445a      	add	r2, fp
 80213dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80213de:	f89a 3000 	ldrb.w	r3, [sl]
 80213e2:	2b00      	cmp	r3, #0
 80213e4:	f000 809f 	beq.w	8021526 <_svfiprintf_r+0x1c6>
 80213e8:	2300      	movs	r3, #0
 80213ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80213ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80213f2:	f10a 0a01 	add.w	sl, sl, #1
 80213f6:	9304      	str	r3, [sp, #16]
 80213f8:	9307      	str	r3, [sp, #28]
 80213fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80213fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8021400:	4654      	mov	r4, sl
 8021402:	2205      	movs	r2, #5
 8021404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021408:	484e      	ldr	r0, [pc, #312]	@ (8021544 <_svfiprintf_r+0x1e4>)
 802140a:	f7de ff09 	bl	8000220 <memchr>
 802140e:	9a04      	ldr	r2, [sp, #16]
 8021410:	b9d8      	cbnz	r0, 802144a <_svfiprintf_r+0xea>
 8021412:	06d0      	lsls	r0, r2, #27
 8021414:	bf44      	itt	mi
 8021416:	2320      	movmi	r3, #32
 8021418:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802141c:	0711      	lsls	r1, r2, #28
 802141e:	bf44      	itt	mi
 8021420:	232b      	movmi	r3, #43	@ 0x2b
 8021422:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021426:	f89a 3000 	ldrb.w	r3, [sl]
 802142a:	2b2a      	cmp	r3, #42	@ 0x2a
 802142c:	d015      	beq.n	802145a <_svfiprintf_r+0xfa>
 802142e:	9a07      	ldr	r2, [sp, #28]
 8021430:	4654      	mov	r4, sl
 8021432:	2000      	movs	r0, #0
 8021434:	f04f 0c0a 	mov.w	ip, #10
 8021438:	4621      	mov	r1, r4
 802143a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802143e:	3b30      	subs	r3, #48	@ 0x30
 8021440:	2b09      	cmp	r3, #9
 8021442:	d94b      	bls.n	80214dc <_svfiprintf_r+0x17c>
 8021444:	b1b0      	cbz	r0, 8021474 <_svfiprintf_r+0x114>
 8021446:	9207      	str	r2, [sp, #28]
 8021448:	e014      	b.n	8021474 <_svfiprintf_r+0x114>
 802144a:	eba0 0308 	sub.w	r3, r0, r8
 802144e:	fa09 f303 	lsl.w	r3, r9, r3
 8021452:	4313      	orrs	r3, r2
 8021454:	9304      	str	r3, [sp, #16]
 8021456:	46a2      	mov	sl, r4
 8021458:	e7d2      	b.n	8021400 <_svfiprintf_r+0xa0>
 802145a:	9b03      	ldr	r3, [sp, #12]
 802145c:	1d19      	adds	r1, r3, #4
 802145e:	681b      	ldr	r3, [r3, #0]
 8021460:	9103      	str	r1, [sp, #12]
 8021462:	2b00      	cmp	r3, #0
 8021464:	bfbb      	ittet	lt
 8021466:	425b      	neglt	r3, r3
 8021468:	f042 0202 	orrlt.w	r2, r2, #2
 802146c:	9307      	strge	r3, [sp, #28]
 802146e:	9307      	strlt	r3, [sp, #28]
 8021470:	bfb8      	it	lt
 8021472:	9204      	strlt	r2, [sp, #16]
 8021474:	7823      	ldrb	r3, [r4, #0]
 8021476:	2b2e      	cmp	r3, #46	@ 0x2e
 8021478:	d10a      	bne.n	8021490 <_svfiprintf_r+0x130>
 802147a:	7863      	ldrb	r3, [r4, #1]
 802147c:	2b2a      	cmp	r3, #42	@ 0x2a
 802147e:	d132      	bne.n	80214e6 <_svfiprintf_r+0x186>
 8021480:	9b03      	ldr	r3, [sp, #12]
 8021482:	1d1a      	adds	r2, r3, #4
 8021484:	681b      	ldr	r3, [r3, #0]
 8021486:	9203      	str	r2, [sp, #12]
 8021488:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802148c:	3402      	adds	r4, #2
 802148e:	9305      	str	r3, [sp, #20]
 8021490:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8021554 <_svfiprintf_r+0x1f4>
 8021494:	7821      	ldrb	r1, [r4, #0]
 8021496:	2203      	movs	r2, #3
 8021498:	4650      	mov	r0, sl
 802149a:	f7de fec1 	bl	8000220 <memchr>
 802149e:	b138      	cbz	r0, 80214b0 <_svfiprintf_r+0x150>
 80214a0:	9b04      	ldr	r3, [sp, #16]
 80214a2:	eba0 000a 	sub.w	r0, r0, sl
 80214a6:	2240      	movs	r2, #64	@ 0x40
 80214a8:	4082      	lsls	r2, r0
 80214aa:	4313      	orrs	r3, r2
 80214ac:	3401      	adds	r4, #1
 80214ae:	9304      	str	r3, [sp, #16]
 80214b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80214b4:	4824      	ldr	r0, [pc, #144]	@ (8021548 <_svfiprintf_r+0x1e8>)
 80214b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80214ba:	2206      	movs	r2, #6
 80214bc:	f7de feb0 	bl	8000220 <memchr>
 80214c0:	2800      	cmp	r0, #0
 80214c2:	d036      	beq.n	8021532 <_svfiprintf_r+0x1d2>
 80214c4:	4b21      	ldr	r3, [pc, #132]	@ (802154c <_svfiprintf_r+0x1ec>)
 80214c6:	bb1b      	cbnz	r3, 8021510 <_svfiprintf_r+0x1b0>
 80214c8:	9b03      	ldr	r3, [sp, #12]
 80214ca:	3307      	adds	r3, #7
 80214cc:	f023 0307 	bic.w	r3, r3, #7
 80214d0:	3308      	adds	r3, #8
 80214d2:	9303      	str	r3, [sp, #12]
 80214d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80214d6:	4433      	add	r3, r6
 80214d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80214da:	e76a      	b.n	80213b2 <_svfiprintf_r+0x52>
 80214dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80214e0:	460c      	mov	r4, r1
 80214e2:	2001      	movs	r0, #1
 80214e4:	e7a8      	b.n	8021438 <_svfiprintf_r+0xd8>
 80214e6:	2300      	movs	r3, #0
 80214e8:	3401      	adds	r4, #1
 80214ea:	9305      	str	r3, [sp, #20]
 80214ec:	4619      	mov	r1, r3
 80214ee:	f04f 0c0a 	mov.w	ip, #10
 80214f2:	4620      	mov	r0, r4
 80214f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80214f8:	3a30      	subs	r2, #48	@ 0x30
 80214fa:	2a09      	cmp	r2, #9
 80214fc:	d903      	bls.n	8021506 <_svfiprintf_r+0x1a6>
 80214fe:	2b00      	cmp	r3, #0
 8021500:	d0c6      	beq.n	8021490 <_svfiprintf_r+0x130>
 8021502:	9105      	str	r1, [sp, #20]
 8021504:	e7c4      	b.n	8021490 <_svfiprintf_r+0x130>
 8021506:	fb0c 2101 	mla	r1, ip, r1, r2
 802150a:	4604      	mov	r4, r0
 802150c:	2301      	movs	r3, #1
 802150e:	e7f0      	b.n	80214f2 <_svfiprintf_r+0x192>
 8021510:	ab03      	add	r3, sp, #12
 8021512:	9300      	str	r3, [sp, #0]
 8021514:	462a      	mov	r2, r5
 8021516:	4b0e      	ldr	r3, [pc, #56]	@ (8021550 <_svfiprintf_r+0x1f0>)
 8021518:	a904      	add	r1, sp, #16
 802151a:	4638      	mov	r0, r7
 802151c:	f7fd fe82 	bl	801f224 <_printf_float>
 8021520:	1c42      	adds	r2, r0, #1
 8021522:	4606      	mov	r6, r0
 8021524:	d1d6      	bne.n	80214d4 <_svfiprintf_r+0x174>
 8021526:	89ab      	ldrh	r3, [r5, #12]
 8021528:	065b      	lsls	r3, r3, #25
 802152a:	f53f af2d 	bmi.w	8021388 <_svfiprintf_r+0x28>
 802152e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021530:	e72c      	b.n	802138c <_svfiprintf_r+0x2c>
 8021532:	ab03      	add	r3, sp, #12
 8021534:	9300      	str	r3, [sp, #0]
 8021536:	462a      	mov	r2, r5
 8021538:	4b05      	ldr	r3, [pc, #20]	@ (8021550 <_svfiprintf_r+0x1f0>)
 802153a:	a904      	add	r1, sp, #16
 802153c:	4638      	mov	r0, r7
 802153e:	f7fe f909 	bl	801f754 <_printf_i>
 8021542:	e7ed      	b.n	8021520 <_svfiprintf_r+0x1c0>
 8021544:	08022d10 	.word	0x08022d10
 8021548:	08022d1a 	.word	0x08022d1a
 802154c:	0801f225 	.word	0x0801f225
 8021550:	080212a9 	.word	0x080212a9
 8021554:	08022d16 	.word	0x08022d16

08021558 <__sflush_r>:
 8021558:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802155c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021560:	0716      	lsls	r6, r2, #28
 8021562:	4605      	mov	r5, r0
 8021564:	460c      	mov	r4, r1
 8021566:	d454      	bmi.n	8021612 <__sflush_r+0xba>
 8021568:	684b      	ldr	r3, [r1, #4]
 802156a:	2b00      	cmp	r3, #0
 802156c:	dc02      	bgt.n	8021574 <__sflush_r+0x1c>
 802156e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8021570:	2b00      	cmp	r3, #0
 8021572:	dd48      	ble.n	8021606 <__sflush_r+0xae>
 8021574:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021576:	2e00      	cmp	r6, #0
 8021578:	d045      	beq.n	8021606 <__sflush_r+0xae>
 802157a:	2300      	movs	r3, #0
 802157c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8021580:	682f      	ldr	r7, [r5, #0]
 8021582:	6a21      	ldr	r1, [r4, #32]
 8021584:	602b      	str	r3, [r5, #0]
 8021586:	d030      	beq.n	80215ea <__sflush_r+0x92>
 8021588:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802158a:	89a3      	ldrh	r3, [r4, #12]
 802158c:	0759      	lsls	r1, r3, #29
 802158e:	d505      	bpl.n	802159c <__sflush_r+0x44>
 8021590:	6863      	ldr	r3, [r4, #4]
 8021592:	1ad2      	subs	r2, r2, r3
 8021594:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021596:	b10b      	cbz	r3, 802159c <__sflush_r+0x44>
 8021598:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802159a:	1ad2      	subs	r2, r2, r3
 802159c:	2300      	movs	r3, #0
 802159e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80215a0:	6a21      	ldr	r1, [r4, #32]
 80215a2:	4628      	mov	r0, r5
 80215a4:	47b0      	blx	r6
 80215a6:	1c43      	adds	r3, r0, #1
 80215a8:	89a3      	ldrh	r3, [r4, #12]
 80215aa:	d106      	bne.n	80215ba <__sflush_r+0x62>
 80215ac:	6829      	ldr	r1, [r5, #0]
 80215ae:	291d      	cmp	r1, #29
 80215b0:	d82b      	bhi.n	802160a <__sflush_r+0xb2>
 80215b2:	4a2a      	ldr	r2, [pc, #168]	@ (802165c <__sflush_r+0x104>)
 80215b4:	410a      	asrs	r2, r1
 80215b6:	07d6      	lsls	r6, r2, #31
 80215b8:	d427      	bmi.n	802160a <__sflush_r+0xb2>
 80215ba:	2200      	movs	r2, #0
 80215bc:	6062      	str	r2, [r4, #4]
 80215be:	04d9      	lsls	r1, r3, #19
 80215c0:	6922      	ldr	r2, [r4, #16]
 80215c2:	6022      	str	r2, [r4, #0]
 80215c4:	d504      	bpl.n	80215d0 <__sflush_r+0x78>
 80215c6:	1c42      	adds	r2, r0, #1
 80215c8:	d101      	bne.n	80215ce <__sflush_r+0x76>
 80215ca:	682b      	ldr	r3, [r5, #0]
 80215cc:	b903      	cbnz	r3, 80215d0 <__sflush_r+0x78>
 80215ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80215d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80215d2:	602f      	str	r7, [r5, #0]
 80215d4:	b1b9      	cbz	r1, 8021606 <__sflush_r+0xae>
 80215d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80215da:	4299      	cmp	r1, r3
 80215dc:	d002      	beq.n	80215e4 <__sflush_r+0x8c>
 80215de:	4628      	mov	r0, r5
 80215e0:	f7ff fa96 	bl	8020b10 <_free_r>
 80215e4:	2300      	movs	r3, #0
 80215e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80215e8:	e00d      	b.n	8021606 <__sflush_r+0xae>
 80215ea:	2301      	movs	r3, #1
 80215ec:	4628      	mov	r0, r5
 80215ee:	47b0      	blx	r6
 80215f0:	4602      	mov	r2, r0
 80215f2:	1c50      	adds	r0, r2, #1
 80215f4:	d1c9      	bne.n	802158a <__sflush_r+0x32>
 80215f6:	682b      	ldr	r3, [r5, #0]
 80215f8:	2b00      	cmp	r3, #0
 80215fa:	d0c6      	beq.n	802158a <__sflush_r+0x32>
 80215fc:	2b1d      	cmp	r3, #29
 80215fe:	d001      	beq.n	8021604 <__sflush_r+0xac>
 8021600:	2b16      	cmp	r3, #22
 8021602:	d11e      	bne.n	8021642 <__sflush_r+0xea>
 8021604:	602f      	str	r7, [r5, #0]
 8021606:	2000      	movs	r0, #0
 8021608:	e022      	b.n	8021650 <__sflush_r+0xf8>
 802160a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802160e:	b21b      	sxth	r3, r3
 8021610:	e01b      	b.n	802164a <__sflush_r+0xf2>
 8021612:	690f      	ldr	r7, [r1, #16]
 8021614:	2f00      	cmp	r7, #0
 8021616:	d0f6      	beq.n	8021606 <__sflush_r+0xae>
 8021618:	0793      	lsls	r3, r2, #30
 802161a:	680e      	ldr	r6, [r1, #0]
 802161c:	bf08      	it	eq
 802161e:	694b      	ldreq	r3, [r1, #20]
 8021620:	600f      	str	r7, [r1, #0]
 8021622:	bf18      	it	ne
 8021624:	2300      	movne	r3, #0
 8021626:	eba6 0807 	sub.w	r8, r6, r7
 802162a:	608b      	str	r3, [r1, #8]
 802162c:	f1b8 0f00 	cmp.w	r8, #0
 8021630:	dde9      	ble.n	8021606 <__sflush_r+0xae>
 8021632:	6a21      	ldr	r1, [r4, #32]
 8021634:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8021636:	4643      	mov	r3, r8
 8021638:	463a      	mov	r2, r7
 802163a:	4628      	mov	r0, r5
 802163c:	47b0      	blx	r6
 802163e:	2800      	cmp	r0, #0
 8021640:	dc08      	bgt.n	8021654 <__sflush_r+0xfc>
 8021642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802164a:	81a3      	strh	r3, [r4, #12]
 802164c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021654:	4407      	add	r7, r0
 8021656:	eba8 0800 	sub.w	r8, r8, r0
 802165a:	e7e7      	b.n	802162c <__sflush_r+0xd4>
 802165c:	dfbffffe 	.word	0xdfbffffe

08021660 <_fflush_r>:
 8021660:	b538      	push	{r3, r4, r5, lr}
 8021662:	690b      	ldr	r3, [r1, #16]
 8021664:	4605      	mov	r5, r0
 8021666:	460c      	mov	r4, r1
 8021668:	b913      	cbnz	r3, 8021670 <_fflush_r+0x10>
 802166a:	2500      	movs	r5, #0
 802166c:	4628      	mov	r0, r5
 802166e:	bd38      	pop	{r3, r4, r5, pc}
 8021670:	b118      	cbz	r0, 802167a <_fflush_r+0x1a>
 8021672:	6a03      	ldr	r3, [r0, #32]
 8021674:	b90b      	cbnz	r3, 802167a <_fflush_r+0x1a>
 8021676:	f7fe fa19 	bl	801faac <__sinit>
 802167a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802167e:	2b00      	cmp	r3, #0
 8021680:	d0f3      	beq.n	802166a <_fflush_r+0xa>
 8021682:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021684:	07d0      	lsls	r0, r2, #31
 8021686:	d404      	bmi.n	8021692 <_fflush_r+0x32>
 8021688:	0599      	lsls	r1, r3, #22
 802168a:	d402      	bmi.n	8021692 <_fflush_r+0x32>
 802168c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802168e:	f7fe fbe2 	bl	801fe56 <__retarget_lock_acquire_recursive>
 8021692:	4628      	mov	r0, r5
 8021694:	4621      	mov	r1, r4
 8021696:	f7ff ff5f 	bl	8021558 <__sflush_r>
 802169a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802169c:	07da      	lsls	r2, r3, #31
 802169e:	4605      	mov	r5, r0
 80216a0:	d4e4      	bmi.n	802166c <_fflush_r+0xc>
 80216a2:	89a3      	ldrh	r3, [r4, #12]
 80216a4:	059b      	lsls	r3, r3, #22
 80216a6:	d4e1      	bmi.n	802166c <_fflush_r+0xc>
 80216a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80216aa:	f7fe fbd5 	bl	801fe58 <__retarget_lock_release_recursive>
 80216ae:	e7dd      	b.n	802166c <_fflush_r+0xc>

080216b0 <memmove>:
 80216b0:	4288      	cmp	r0, r1
 80216b2:	b510      	push	{r4, lr}
 80216b4:	eb01 0402 	add.w	r4, r1, r2
 80216b8:	d902      	bls.n	80216c0 <memmove+0x10>
 80216ba:	4284      	cmp	r4, r0
 80216bc:	4623      	mov	r3, r4
 80216be:	d807      	bhi.n	80216d0 <memmove+0x20>
 80216c0:	1e43      	subs	r3, r0, #1
 80216c2:	42a1      	cmp	r1, r4
 80216c4:	d008      	beq.n	80216d8 <memmove+0x28>
 80216c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80216ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80216ce:	e7f8      	b.n	80216c2 <memmove+0x12>
 80216d0:	4402      	add	r2, r0
 80216d2:	4601      	mov	r1, r0
 80216d4:	428a      	cmp	r2, r1
 80216d6:	d100      	bne.n	80216da <memmove+0x2a>
 80216d8:	bd10      	pop	{r4, pc}
 80216da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80216de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80216e2:	e7f7      	b.n	80216d4 <memmove+0x24>

080216e4 <__assert_func>:
 80216e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80216e6:	4614      	mov	r4, r2
 80216e8:	461a      	mov	r2, r3
 80216ea:	4b09      	ldr	r3, [pc, #36]	@ (8021710 <__assert_func+0x2c>)
 80216ec:	681b      	ldr	r3, [r3, #0]
 80216ee:	4605      	mov	r5, r0
 80216f0:	68d8      	ldr	r0, [r3, #12]
 80216f2:	b954      	cbnz	r4, 802170a <__assert_func+0x26>
 80216f4:	4b07      	ldr	r3, [pc, #28]	@ (8021714 <__assert_func+0x30>)
 80216f6:	461c      	mov	r4, r3
 80216f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80216fc:	9100      	str	r1, [sp, #0]
 80216fe:	462b      	mov	r3, r5
 8021700:	4905      	ldr	r1, [pc, #20]	@ (8021718 <__assert_func+0x34>)
 8021702:	f000 f86f 	bl	80217e4 <fiprintf>
 8021706:	f7fd fc27 	bl	801ef58 <abort>
 802170a:	4b04      	ldr	r3, [pc, #16]	@ (802171c <__assert_func+0x38>)
 802170c:	e7f4      	b.n	80216f8 <__assert_func+0x14>
 802170e:	bf00      	nop
 8021710:	200001b4 	.word	0x200001b4
 8021714:	08022d66 	.word	0x08022d66
 8021718:	08022d38 	.word	0x08022d38
 802171c:	08022d2b 	.word	0x08022d2b

08021720 <_calloc_r>:
 8021720:	b570      	push	{r4, r5, r6, lr}
 8021722:	fba1 5402 	umull	r5, r4, r1, r2
 8021726:	b93c      	cbnz	r4, 8021738 <_calloc_r+0x18>
 8021728:	4629      	mov	r1, r5
 802172a:	f7fd fc4f 	bl	801efcc <_malloc_r>
 802172e:	4606      	mov	r6, r0
 8021730:	b928      	cbnz	r0, 802173e <_calloc_r+0x1e>
 8021732:	2600      	movs	r6, #0
 8021734:	4630      	mov	r0, r6
 8021736:	bd70      	pop	{r4, r5, r6, pc}
 8021738:	220c      	movs	r2, #12
 802173a:	6002      	str	r2, [r0, #0]
 802173c:	e7f9      	b.n	8021732 <_calloc_r+0x12>
 802173e:	462a      	mov	r2, r5
 8021740:	4621      	mov	r1, r4
 8021742:	f7fe fa60 	bl	801fc06 <memset>
 8021746:	e7f5      	b.n	8021734 <_calloc_r+0x14>

08021748 <__ascii_mbtowc>:
 8021748:	b082      	sub	sp, #8
 802174a:	b901      	cbnz	r1, 802174e <__ascii_mbtowc+0x6>
 802174c:	a901      	add	r1, sp, #4
 802174e:	b142      	cbz	r2, 8021762 <__ascii_mbtowc+0x1a>
 8021750:	b14b      	cbz	r3, 8021766 <__ascii_mbtowc+0x1e>
 8021752:	7813      	ldrb	r3, [r2, #0]
 8021754:	600b      	str	r3, [r1, #0]
 8021756:	7812      	ldrb	r2, [r2, #0]
 8021758:	1e10      	subs	r0, r2, #0
 802175a:	bf18      	it	ne
 802175c:	2001      	movne	r0, #1
 802175e:	b002      	add	sp, #8
 8021760:	4770      	bx	lr
 8021762:	4610      	mov	r0, r2
 8021764:	e7fb      	b.n	802175e <__ascii_mbtowc+0x16>
 8021766:	f06f 0001 	mvn.w	r0, #1
 802176a:	e7f8      	b.n	802175e <__ascii_mbtowc+0x16>

0802176c <_realloc_r>:
 802176c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021770:	4680      	mov	r8, r0
 8021772:	4615      	mov	r5, r2
 8021774:	460c      	mov	r4, r1
 8021776:	b921      	cbnz	r1, 8021782 <_realloc_r+0x16>
 8021778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802177c:	4611      	mov	r1, r2
 802177e:	f7fd bc25 	b.w	801efcc <_malloc_r>
 8021782:	b92a      	cbnz	r2, 8021790 <_realloc_r+0x24>
 8021784:	f7ff f9c4 	bl	8020b10 <_free_r>
 8021788:	2400      	movs	r4, #0
 802178a:	4620      	mov	r0, r4
 802178c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021790:	f000 f83a 	bl	8021808 <_malloc_usable_size_r>
 8021794:	4285      	cmp	r5, r0
 8021796:	4606      	mov	r6, r0
 8021798:	d802      	bhi.n	80217a0 <_realloc_r+0x34>
 802179a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802179e:	d8f4      	bhi.n	802178a <_realloc_r+0x1e>
 80217a0:	4629      	mov	r1, r5
 80217a2:	4640      	mov	r0, r8
 80217a4:	f7fd fc12 	bl	801efcc <_malloc_r>
 80217a8:	4607      	mov	r7, r0
 80217aa:	2800      	cmp	r0, #0
 80217ac:	d0ec      	beq.n	8021788 <_realloc_r+0x1c>
 80217ae:	42b5      	cmp	r5, r6
 80217b0:	462a      	mov	r2, r5
 80217b2:	4621      	mov	r1, r4
 80217b4:	bf28      	it	cs
 80217b6:	4632      	movcs	r2, r6
 80217b8:	f7fe fb4f 	bl	801fe5a <memcpy>
 80217bc:	4621      	mov	r1, r4
 80217be:	4640      	mov	r0, r8
 80217c0:	f7ff f9a6 	bl	8020b10 <_free_r>
 80217c4:	463c      	mov	r4, r7
 80217c6:	e7e0      	b.n	802178a <_realloc_r+0x1e>

080217c8 <__ascii_wctomb>:
 80217c8:	4603      	mov	r3, r0
 80217ca:	4608      	mov	r0, r1
 80217cc:	b141      	cbz	r1, 80217e0 <__ascii_wctomb+0x18>
 80217ce:	2aff      	cmp	r2, #255	@ 0xff
 80217d0:	d904      	bls.n	80217dc <__ascii_wctomb+0x14>
 80217d2:	228a      	movs	r2, #138	@ 0x8a
 80217d4:	601a      	str	r2, [r3, #0]
 80217d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80217da:	4770      	bx	lr
 80217dc:	700a      	strb	r2, [r1, #0]
 80217de:	2001      	movs	r0, #1
 80217e0:	4770      	bx	lr
	...

080217e4 <fiprintf>:
 80217e4:	b40e      	push	{r1, r2, r3}
 80217e6:	b503      	push	{r0, r1, lr}
 80217e8:	4601      	mov	r1, r0
 80217ea:	ab03      	add	r3, sp, #12
 80217ec:	4805      	ldr	r0, [pc, #20]	@ (8021804 <fiprintf+0x20>)
 80217ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80217f2:	6800      	ldr	r0, [r0, #0]
 80217f4:	9301      	str	r3, [sp, #4]
 80217f6:	f000 f839 	bl	802186c <_vfiprintf_r>
 80217fa:	b002      	add	sp, #8
 80217fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8021800:	b003      	add	sp, #12
 8021802:	4770      	bx	lr
 8021804:	200001b4 	.word	0x200001b4

08021808 <_malloc_usable_size_r>:
 8021808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802180c:	1f18      	subs	r0, r3, #4
 802180e:	2b00      	cmp	r3, #0
 8021810:	bfbc      	itt	lt
 8021812:	580b      	ldrlt	r3, [r1, r0]
 8021814:	18c0      	addlt	r0, r0, r3
 8021816:	4770      	bx	lr

08021818 <__sfputc_r>:
 8021818:	6893      	ldr	r3, [r2, #8]
 802181a:	3b01      	subs	r3, #1
 802181c:	2b00      	cmp	r3, #0
 802181e:	b410      	push	{r4}
 8021820:	6093      	str	r3, [r2, #8]
 8021822:	da08      	bge.n	8021836 <__sfputc_r+0x1e>
 8021824:	6994      	ldr	r4, [r2, #24]
 8021826:	42a3      	cmp	r3, r4
 8021828:	db01      	blt.n	802182e <__sfputc_r+0x16>
 802182a:	290a      	cmp	r1, #10
 802182c:	d103      	bne.n	8021836 <__sfputc_r+0x1e>
 802182e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021832:	f000 b933 	b.w	8021a9c <__swbuf_r>
 8021836:	6813      	ldr	r3, [r2, #0]
 8021838:	1c58      	adds	r0, r3, #1
 802183a:	6010      	str	r0, [r2, #0]
 802183c:	7019      	strb	r1, [r3, #0]
 802183e:	4608      	mov	r0, r1
 8021840:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021844:	4770      	bx	lr

08021846 <__sfputs_r>:
 8021846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021848:	4606      	mov	r6, r0
 802184a:	460f      	mov	r7, r1
 802184c:	4614      	mov	r4, r2
 802184e:	18d5      	adds	r5, r2, r3
 8021850:	42ac      	cmp	r4, r5
 8021852:	d101      	bne.n	8021858 <__sfputs_r+0x12>
 8021854:	2000      	movs	r0, #0
 8021856:	e007      	b.n	8021868 <__sfputs_r+0x22>
 8021858:	f814 1b01 	ldrb.w	r1, [r4], #1
 802185c:	463a      	mov	r2, r7
 802185e:	4630      	mov	r0, r6
 8021860:	f7ff ffda 	bl	8021818 <__sfputc_r>
 8021864:	1c43      	adds	r3, r0, #1
 8021866:	d1f3      	bne.n	8021850 <__sfputs_r+0xa>
 8021868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802186c <_vfiprintf_r>:
 802186c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021870:	460d      	mov	r5, r1
 8021872:	b09d      	sub	sp, #116	@ 0x74
 8021874:	4614      	mov	r4, r2
 8021876:	4698      	mov	r8, r3
 8021878:	4606      	mov	r6, r0
 802187a:	b118      	cbz	r0, 8021884 <_vfiprintf_r+0x18>
 802187c:	6a03      	ldr	r3, [r0, #32]
 802187e:	b90b      	cbnz	r3, 8021884 <_vfiprintf_r+0x18>
 8021880:	f7fe f914 	bl	801faac <__sinit>
 8021884:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021886:	07d9      	lsls	r1, r3, #31
 8021888:	d405      	bmi.n	8021896 <_vfiprintf_r+0x2a>
 802188a:	89ab      	ldrh	r3, [r5, #12]
 802188c:	059a      	lsls	r2, r3, #22
 802188e:	d402      	bmi.n	8021896 <_vfiprintf_r+0x2a>
 8021890:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021892:	f7fe fae0 	bl	801fe56 <__retarget_lock_acquire_recursive>
 8021896:	89ab      	ldrh	r3, [r5, #12]
 8021898:	071b      	lsls	r3, r3, #28
 802189a:	d501      	bpl.n	80218a0 <_vfiprintf_r+0x34>
 802189c:	692b      	ldr	r3, [r5, #16]
 802189e:	b99b      	cbnz	r3, 80218c8 <_vfiprintf_r+0x5c>
 80218a0:	4629      	mov	r1, r5
 80218a2:	4630      	mov	r0, r6
 80218a4:	f000 f938 	bl	8021b18 <__swsetup_r>
 80218a8:	b170      	cbz	r0, 80218c8 <_vfiprintf_r+0x5c>
 80218aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80218ac:	07dc      	lsls	r4, r3, #31
 80218ae:	d504      	bpl.n	80218ba <_vfiprintf_r+0x4e>
 80218b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80218b4:	b01d      	add	sp, #116	@ 0x74
 80218b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218ba:	89ab      	ldrh	r3, [r5, #12]
 80218bc:	0598      	lsls	r0, r3, #22
 80218be:	d4f7      	bmi.n	80218b0 <_vfiprintf_r+0x44>
 80218c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80218c2:	f7fe fac9 	bl	801fe58 <__retarget_lock_release_recursive>
 80218c6:	e7f3      	b.n	80218b0 <_vfiprintf_r+0x44>
 80218c8:	2300      	movs	r3, #0
 80218ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80218cc:	2320      	movs	r3, #32
 80218ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80218d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80218d6:	2330      	movs	r3, #48	@ 0x30
 80218d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8021a88 <_vfiprintf_r+0x21c>
 80218dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80218e0:	f04f 0901 	mov.w	r9, #1
 80218e4:	4623      	mov	r3, r4
 80218e6:	469a      	mov	sl, r3
 80218e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80218ec:	b10a      	cbz	r2, 80218f2 <_vfiprintf_r+0x86>
 80218ee:	2a25      	cmp	r2, #37	@ 0x25
 80218f0:	d1f9      	bne.n	80218e6 <_vfiprintf_r+0x7a>
 80218f2:	ebba 0b04 	subs.w	fp, sl, r4
 80218f6:	d00b      	beq.n	8021910 <_vfiprintf_r+0xa4>
 80218f8:	465b      	mov	r3, fp
 80218fa:	4622      	mov	r2, r4
 80218fc:	4629      	mov	r1, r5
 80218fe:	4630      	mov	r0, r6
 8021900:	f7ff ffa1 	bl	8021846 <__sfputs_r>
 8021904:	3001      	adds	r0, #1
 8021906:	f000 80a7 	beq.w	8021a58 <_vfiprintf_r+0x1ec>
 802190a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802190c:	445a      	add	r2, fp
 802190e:	9209      	str	r2, [sp, #36]	@ 0x24
 8021910:	f89a 3000 	ldrb.w	r3, [sl]
 8021914:	2b00      	cmp	r3, #0
 8021916:	f000 809f 	beq.w	8021a58 <_vfiprintf_r+0x1ec>
 802191a:	2300      	movs	r3, #0
 802191c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021920:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021924:	f10a 0a01 	add.w	sl, sl, #1
 8021928:	9304      	str	r3, [sp, #16]
 802192a:	9307      	str	r3, [sp, #28]
 802192c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021930:	931a      	str	r3, [sp, #104]	@ 0x68
 8021932:	4654      	mov	r4, sl
 8021934:	2205      	movs	r2, #5
 8021936:	f814 1b01 	ldrb.w	r1, [r4], #1
 802193a:	4853      	ldr	r0, [pc, #332]	@ (8021a88 <_vfiprintf_r+0x21c>)
 802193c:	f7de fc70 	bl	8000220 <memchr>
 8021940:	9a04      	ldr	r2, [sp, #16]
 8021942:	b9d8      	cbnz	r0, 802197c <_vfiprintf_r+0x110>
 8021944:	06d1      	lsls	r1, r2, #27
 8021946:	bf44      	itt	mi
 8021948:	2320      	movmi	r3, #32
 802194a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802194e:	0713      	lsls	r3, r2, #28
 8021950:	bf44      	itt	mi
 8021952:	232b      	movmi	r3, #43	@ 0x2b
 8021954:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021958:	f89a 3000 	ldrb.w	r3, [sl]
 802195c:	2b2a      	cmp	r3, #42	@ 0x2a
 802195e:	d015      	beq.n	802198c <_vfiprintf_r+0x120>
 8021960:	9a07      	ldr	r2, [sp, #28]
 8021962:	4654      	mov	r4, sl
 8021964:	2000      	movs	r0, #0
 8021966:	f04f 0c0a 	mov.w	ip, #10
 802196a:	4621      	mov	r1, r4
 802196c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021970:	3b30      	subs	r3, #48	@ 0x30
 8021972:	2b09      	cmp	r3, #9
 8021974:	d94b      	bls.n	8021a0e <_vfiprintf_r+0x1a2>
 8021976:	b1b0      	cbz	r0, 80219a6 <_vfiprintf_r+0x13a>
 8021978:	9207      	str	r2, [sp, #28]
 802197a:	e014      	b.n	80219a6 <_vfiprintf_r+0x13a>
 802197c:	eba0 0308 	sub.w	r3, r0, r8
 8021980:	fa09 f303 	lsl.w	r3, r9, r3
 8021984:	4313      	orrs	r3, r2
 8021986:	9304      	str	r3, [sp, #16]
 8021988:	46a2      	mov	sl, r4
 802198a:	e7d2      	b.n	8021932 <_vfiprintf_r+0xc6>
 802198c:	9b03      	ldr	r3, [sp, #12]
 802198e:	1d19      	adds	r1, r3, #4
 8021990:	681b      	ldr	r3, [r3, #0]
 8021992:	9103      	str	r1, [sp, #12]
 8021994:	2b00      	cmp	r3, #0
 8021996:	bfbb      	ittet	lt
 8021998:	425b      	neglt	r3, r3
 802199a:	f042 0202 	orrlt.w	r2, r2, #2
 802199e:	9307      	strge	r3, [sp, #28]
 80219a0:	9307      	strlt	r3, [sp, #28]
 80219a2:	bfb8      	it	lt
 80219a4:	9204      	strlt	r2, [sp, #16]
 80219a6:	7823      	ldrb	r3, [r4, #0]
 80219a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80219aa:	d10a      	bne.n	80219c2 <_vfiprintf_r+0x156>
 80219ac:	7863      	ldrb	r3, [r4, #1]
 80219ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80219b0:	d132      	bne.n	8021a18 <_vfiprintf_r+0x1ac>
 80219b2:	9b03      	ldr	r3, [sp, #12]
 80219b4:	1d1a      	adds	r2, r3, #4
 80219b6:	681b      	ldr	r3, [r3, #0]
 80219b8:	9203      	str	r2, [sp, #12]
 80219ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80219be:	3402      	adds	r4, #2
 80219c0:	9305      	str	r3, [sp, #20]
 80219c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8021a98 <_vfiprintf_r+0x22c>
 80219c6:	7821      	ldrb	r1, [r4, #0]
 80219c8:	2203      	movs	r2, #3
 80219ca:	4650      	mov	r0, sl
 80219cc:	f7de fc28 	bl	8000220 <memchr>
 80219d0:	b138      	cbz	r0, 80219e2 <_vfiprintf_r+0x176>
 80219d2:	9b04      	ldr	r3, [sp, #16]
 80219d4:	eba0 000a 	sub.w	r0, r0, sl
 80219d8:	2240      	movs	r2, #64	@ 0x40
 80219da:	4082      	lsls	r2, r0
 80219dc:	4313      	orrs	r3, r2
 80219de:	3401      	adds	r4, #1
 80219e0:	9304      	str	r3, [sp, #16]
 80219e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80219e6:	4829      	ldr	r0, [pc, #164]	@ (8021a8c <_vfiprintf_r+0x220>)
 80219e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80219ec:	2206      	movs	r2, #6
 80219ee:	f7de fc17 	bl	8000220 <memchr>
 80219f2:	2800      	cmp	r0, #0
 80219f4:	d03f      	beq.n	8021a76 <_vfiprintf_r+0x20a>
 80219f6:	4b26      	ldr	r3, [pc, #152]	@ (8021a90 <_vfiprintf_r+0x224>)
 80219f8:	bb1b      	cbnz	r3, 8021a42 <_vfiprintf_r+0x1d6>
 80219fa:	9b03      	ldr	r3, [sp, #12]
 80219fc:	3307      	adds	r3, #7
 80219fe:	f023 0307 	bic.w	r3, r3, #7
 8021a02:	3308      	adds	r3, #8
 8021a04:	9303      	str	r3, [sp, #12]
 8021a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021a08:	443b      	add	r3, r7
 8021a0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8021a0c:	e76a      	b.n	80218e4 <_vfiprintf_r+0x78>
 8021a0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8021a12:	460c      	mov	r4, r1
 8021a14:	2001      	movs	r0, #1
 8021a16:	e7a8      	b.n	802196a <_vfiprintf_r+0xfe>
 8021a18:	2300      	movs	r3, #0
 8021a1a:	3401      	adds	r4, #1
 8021a1c:	9305      	str	r3, [sp, #20]
 8021a1e:	4619      	mov	r1, r3
 8021a20:	f04f 0c0a 	mov.w	ip, #10
 8021a24:	4620      	mov	r0, r4
 8021a26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021a2a:	3a30      	subs	r2, #48	@ 0x30
 8021a2c:	2a09      	cmp	r2, #9
 8021a2e:	d903      	bls.n	8021a38 <_vfiprintf_r+0x1cc>
 8021a30:	2b00      	cmp	r3, #0
 8021a32:	d0c6      	beq.n	80219c2 <_vfiprintf_r+0x156>
 8021a34:	9105      	str	r1, [sp, #20]
 8021a36:	e7c4      	b.n	80219c2 <_vfiprintf_r+0x156>
 8021a38:	fb0c 2101 	mla	r1, ip, r1, r2
 8021a3c:	4604      	mov	r4, r0
 8021a3e:	2301      	movs	r3, #1
 8021a40:	e7f0      	b.n	8021a24 <_vfiprintf_r+0x1b8>
 8021a42:	ab03      	add	r3, sp, #12
 8021a44:	9300      	str	r3, [sp, #0]
 8021a46:	462a      	mov	r2, r5
 8021a48:	4b12      	ldr	r3, [pc, #72]	@ (8021a94 <_vfiprintf_r+0x228>)
 8021a4a:	a904      	add	r1, sp, #16
 8021a4c:	4630      	mov	r0, r6
 8021a4e:	f7fd fbe9 	bl	801f224 <_printf_float>
 8021a52:	4607      	mov	r7, r0
 8021a54:	1c78      	adds	r0, r7, #1
 8021a56:	d1d6      	bne.n	8021a06 <_vfiprintf_r+0x19a>
 8021a58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021a5a:	07d9      	lsls	r1, r3, #31
 8021a5c:	d405      	bmi.n	8021a6a <_vfiprintf_r+0x1fe>
 8021a5e:	89ab      	ldrh	r3, [r5, #12]
 8021a60:	059a      	lsls	r2, r3, #22
 8021a62:	d402      	bmi.n	8021a6a <_vfiprintf_r+0x1fe>
 8021a64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021a66:	f7fe f9f7 	bl	801fe58 <__retarget_lock_release_recursive>
 8021a6a:	89ab      	ldrh	r3, [r5, #12]
 8021a6c:	065b      	lsls	r3, r3, #25
 8021a6e:	f53f af1f 	bmi.w	80218b0 <_vfiprintf_r+0x44>
 8021a72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021a74:	e71e      	b.n	80218b4 <_vfiprintf_r+0x48>
 8021a76:	ab03      	add	r3, sp, #12
 8021a78:	9300      	str	r3, [sp, #0]
 8021a7a:	462a      	mov	r2, r5
 8021a7c:	4b05      	ldr	r3, [pc, #20]	@ (8021a94 <_vfiprintf_r+0x228>)
 8021a7e:	a904      	add	r1, sp, #16
 8021a80:	4630      	mov	r0, r6
 8021a82:	f7fd fe67 	bl	801f754 <_printf_i>
 8021a86:	e7e4      	b.n	8021a52 <_vfiprintf_r+0x1e6>
 8021a88:	08022d10 	.word	0x08022d10
 8021a8c:	08022d1a 	.word	0x08022d1a
 8021a90:	0801f225 	.word	0x0801f225
 8021a94:	08021847 	.word	0x08021847
 8021a98:	08022d16 	.word	0x08022d16

08021a9c <__swbuf_r>:
 8021a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a9e:	460e      	mov	r6, r1
 8021aa0:	4614      	mov	r4, r2
 8021aa2:	4605      	mov	r5, r0
 8021aa4:	b118      	cbz	r0, 8021aae <__swbuf_r+0x12>
 8021aa6:	6a03      	ldr	r3, [r0, #32]
 8021aa8:	b90b      	cbnz	r3, 8021aae <__swbuf_r+0x12>
 8021aaa:	f7fd ffff 	bl	801faac <__sinit>
 8021aae:	69a3      	ldr	r3, [r4, #24]
 8021ab0:	60a3      	str	r3, [r4, #8]
 8021ab2:	89a3      	ldrh	r3, [r4, #12]
 8021ab4:	071a      	lsls	r2, r3, #28
 8021ab6:	d501      	bpl.n	8021abc <__swbuf_r+0x20>
 8021ab8:	6923      	ldr	r3, [r4, #16]
 8021aba:	b943      	cbnz	r3, 8021ace <__swbuf_r+0x32>
 8021abc:	4621      	mov	r1, r4
 8021abe:	4628      	mov	r0, r5
 8021ac0:	f000 f82a 	bl	8021b18 <__swsetup_r>
 8021ac4:	b118      	cbz	r0, 8021ace <__swbuf_r+0x32>
 8021ac6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8021aca:	4638      	mov	r0, r7
 8021acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021ace:	6823      	ldr	r3, [r4, #0]
 8021ad0:	6922      	ldr	r2, [r4, #16]
 8021ad2:	1a98      	subs	r0, r3, r2
 8021ad4:	6963      	ldr	r3, [r4, #20]
 8021ad6:	b2f6      	uxtb	r6, r6
 8021ad8:	4283      	cmp	r3, r0
 8021ada:	4637      	mov	r7, r6
 8021adc:	dc05      	bgt.n	8021aea <__swbuf_r+0x4e>
 8021ade:	4621      	mov	r1, r4
 8021ae0:	4628      	mov	r0, r5
 8021ae2:	f7ff fdbd 	bl	8021660 <_fflush_r>
 8021ae6:	2800      	cmp	r0, #0
 8021ae8:	d1ed      	bne.n	8021ac6 <__swbuf_r+0x2a>
 8021aea:	68a3      	ldr	r3, [r4, #8]
 8021aec:	3b01      	subs	r3, #1
 8021aee:	60a3      	str	r3, [r4, #8]
 8021af0:	6823      	ldr	r3, [r4, #0]
 8021af2:	1c5a      	adds	r2, r3, #1
 8021af4:	6022      	str	r2, [r4, #0]
 8021af6:	701e      	strb	r6, [r3, #0]
 8021af8:	6962      	ldr	r2, [r4, #20]
 8021afa:	1c43      	adds	r3, r0, #1
 8021afc:	429a      	cmp	r2, r3
 8021afe:	d004      	beq.n	8021b0a <__swbuf_r+0x6e>
 8021b00:	89a3      	ldrh	r3, [r4, #12]
 8021b02:	07db      	lsls	r3, r3, #31
 8021b04:	d5e1      	bpl.n	8021aca <__swbuf_r+0x2e>
 8021b06:	2e0a      	cmp	r6, #10
 8021b08:	d1df      	bne.n	8021aca <__swbuf_r+0x2e>
 8021b0a:	4621      	mov	r1, r4
 8021b0c:	4628      	mov	r0, r5
 8021b0e:	f7ff fda7 	bl	8021660 <_fflush_r>
 8021b12:	2800      	cmp	r0, #0
 8021b14:	d0d9      	beq.n	8021aca <__swbuf_r+0x2e>
 8021b16:	e7d6      	b.n	8021ac6 <__swbuf_r+0x2a>

08021b18 <__swsetup_r>:
 8021b18:	b538      	push	{r3, r4, r5, lr}
 8021b1a:	4b29      	ldr	r3, [pc, #164]	@ (8021bc0 <__swsetup_r+0xa8>)
 8021b1c:	4605      	mov	r5, r0
 8021b1e:	6818      	ldr	r0, [r3, #0]
 8021b20:	460c      	mov	r4, r1
 8021b22:	b118      	cbz	r0, 8021b2c <__swsetup_r+0x14>
 8021b24:	6a03      	ldr	r3, [r0, #32]
 8021b26:	b90b      	cbnz	r3, 8021b2c <__swsetup_r+0x14>
 8021b28:	f7fd ffc0 	bl	801faac <__sinit>
 8021b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021b30:	0719      	lsls	r1, r3, #28
 8021b32:	d422      	bmi.n	8021b7a <__swsetup_r+0x62>
 8021b34:	06da      	lsls	r2, r3, #27
 8021b36:	d407      	bmi.n	8021b48 <__swsetup_r+0x30>
 8021b38:	2209      	movs	r2, #9
 8021b3a:	602a      	str	r2, [r5, #0]
 8021b3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021b40:	81a3      	strh	r3, [r4, #12]
 8021b42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021b46:	e033      	b.n	8021bb0 <__swsetup_r+0x98>
 8021b48:	0758      	lsls	r0, r3, #29
 8021b4a:	d512      	bpl.n	8021b72 <__swsetup_r+0x5a>
 8021b4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021b4e:	b141      	cbz	r1, 8021b62 <__swsetup_r+0x4a>
 8021b50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021b54:	4299      	cmp	r1, r3
 8021b56:	d002      	beq.n	8021b5e <__swsetup_r+0x46>
 8021b58:	4628      	mov	r0, r5
 8021b5a:	f7fe ffd9 	bl	8020b10 <_free_r>
 8021b5e:	2300      	movs	r3, #0
 8021b60:	6363      	str	r3, [r4, #52]	@ 0x34
 8021b62:	89a3      	ldrh	r3, [r4, #12]
 8021b64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8021b68:	81a3      	strh	r3, [r4, #12]
 8021b6a:	2300      	movs	r3, #0
 8021b6c:	6063      	str	r3, [r4, #4]
 8021b6e:	6923      	ldr	r3, [r4, #16]
 8021b70:	6023      	str	r3, [r4, #0]
 8021b72:	89a3      	ldrh	r3, [r4, #12]
 8021b74:	f043 0308 	orr.w	r3, r3, #8
 8021b78:	81a3      	strh	r3, [r4, #12]
 8021b7a:	6923      	ldr	r3, [r4, #16]
 8021b7c:	b94b      	cbnz	r3, 8021b92 <__swsetup_r+0x7a>
 8021b7e:	89a3      	ldrh	r3, [r4, #12]
 8021b80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8021b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021b88:	d003      	beq.n	8021b92 <__swsetup_r+0x7a>
 8021b8a:	4621      	mov	r1, r4
 8021b8c:	4628      	mov	r0, r5
 8021b8e:	f000 f83f 	bl	8021c10 <__smakebuf_r>
 8021b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021b96:	f013 0201 	ands.w	r2, r3, #1
 8021b9a:	d00a      	beq.n	8021bb2 <__swsetup_r+0x9a>
 8021b9c:	2200      	movs	r2, #0
 8021b9e:	60a2      	str	r2, [r4, #8]
 8021ba0:	6962      	ldr	r2, [r4, #20]
 8021ba2:	4252      	negs	r2, r2
 8021ba4:	61a2      	str	r2, [r4, #24]
 8021ba6:	6922      	ldr	r2, [r4, #16]
 8021ba8:	b942      	cbnz	r2, 8021bbc <__swsetup_r+0xa4>
 8021baa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8021bae:	d1c5      	bne.n	8021b3c <__swsetup_r+0x24>
 8021bb0:	bd38      	pop	{r3, r4, r5, pc}
 8021bb2:	0799      	lsls	r1, r3, #30
 8021bb4:	bf58      	it	pl
 8021bb6:	6962      	ldrpl	r2, [r4, #20]
 8021bb8:	60a2      	str	r2, [r4, #8]
 8021bba:	e7f4      	b.n	8021ba6 <__swsetup_r+0x8e>
 8021bbc:	2000      	movs	r0, #0
 8021bbe:	e7f7      	b.n	8021bb0 <__swsetup_r+0x98>
 8021bc0:	200001b4 	.word	0x200001b4

08021bc4 <__swhatbuf_r>:
 8021bc4:	b570      	push	{r4, r5, r6, lr}
 8021bc6:	460c      	mov	r4, r1
 8021bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021bcc:	2900      	cmp	r1, #0
 8021bce:	b096      	sub	sp, #88	@ 0x58
 8021bd0:	4615      	mov	r5, r2
 8021bd2:	461e      	mov	r6, r3
 8021bd4:	da0d      	bge.n	8021bf2 <__swhatbuf_r+0x2e>
 8021bd6:	89a3      	ldrh	r3, [r4, #12]
 8021bd8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021bdc:	f04f 0100 	mov.w	r1, #0
 8021be0:	bf14      	ite	ne
 8021be2:	2340      	movne	r3, #64	@ 0x40
 8021be4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021be8:	2000      	movs	r0, #0
 8021bea:	6031      	str	r1, [r6, #0]
 8021bec:	602b      	str	r3, [r5, #0]
 8021bee:	b016      	add	sp, #88	@ 0x58
 8021bf0:	bd70      	pop	{r4, r5, r6, pc}
 8021bf2:	466a      	mov	r2, sp
 8021bf4:	f000 f848 	bl	8021c88 <_fstat_r>
 8021bf8:	2800      	cmp	r0, #0
 8021bfa:	dbec      	blt.n	8021bd6 <__swhatbuf_r+0x12>
 8021bfc:	9901      	ldr	r1, [sp, #4]
 8021bfe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8021c02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8021c06:	4259      	negs	r1, r3
 8021c08:	4159      	adcs	r1, r3
 8021c0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021c0e:	e7eb      	b.n	8021be8 <__swhatbuf_r+0x24>

08021c10 <__smakebuf_r>:
 8021c10:	898b      	ldrh	r3, [r1, #12]
 8021c12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021c14:	079d      	lsls	r5, r3, #30
 8021c16:	4606      	mov	r6, r0
 8021c18:	460c      	mov	r4, r1
 8021c1a:	d507      	bpl.n	8021c2c <__smakebuf_r+0x1c>
 8021c1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021c20:	6023      	str	r3, [r4, #0]
 8021c22:	6123      	str	r3, [r4, #16]
 8021c24:	2301      	movs	r3, #1
 8021c26:	6163      	str	r3, [r4, #20]
 8021c28:	b003      	add	sp, #12
 8021c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021c2c:	ab01      	add	r3, sp, #4
 8021c2e:	466a      	mov	r2, sp
 8021c30:	f7ff ffc8 	bl	8021bc4 <__swhatbuf_r>
 8021c34:	9f00      	ldr	r7, [sp, #0]
 8021c36:	4605      	mov	r5, r0
 8021c38:	4639      	mov	r1, r7
 8021c3a:	4630      	mov	r0, r6
 8021c3c:	f7fd f9c6 	bl	801efcc <_malloc_r>
 8021c40:	b948      	cbnz	r0, 8021c56 <__smakebuf_r+0x46>
 8021c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021c46:	059a      	lsls	r2, r3, #22
 8021c48:	d4ee      	bmi.n	8021c28 <__smakebuf_r+0x18>
 8021c4a:	f023 0303 	bic.w	r3, r3, #3
 8021c4e:	f043 0302 	orr.w	r3, r3, #2
 8021c52:	81a3      	strh	r3, [r4, #12]
 8021c54:	e7e2      	b.n	8021c1c <__smakebuf_r+0xc>
 8021c56:	89a3      	ldrh	r3, [r4, #12]
 8021c58:	6020      	str	r0, [r4, #0]
 8021c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021c5e:	81a3      	strh	r3, [r4, #12]
 8021c60:	9b01      	ldr	r3, [sp, #4]
 8021c62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8021c66:	b15b      	cbz	r3, 8021c80 <__smakebuf_r+0x70>
 8021c68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021c6c:	4630      	mov	r0, r6
 8021c6e:	f000 f81d 	bl	8021cac <_isatty_r>
 8021c72:	b128      	cbz	r0, 8021c80 <__smakebuf_r+0x70>
 8021c74:	89a3      	ldrh	r3, [r4, #12]
 8021c76:	f023 0303 	bic.w	r3, r3, #3
 8021c7a:	f043 0301 	orr.w	r3, r3, #1
 8021c7e:	81a3      	strh	r3, [r4, #12]
 8021c80:	89a3      	ldrh	r3, [r4, #12]
 8021c82:	431d      	orrs	r5, r3
 8021c84:	81a5      	strh	r5, [r4, #12]
 8021c86:	e7cf      	b.n	8021c28 <__smakebuf_r+0x18>

08021c88 <_fstat_r>:
 8021c88:	b538      	push	{r3, r4, r5, lr}
 8021c8a:	4d07      	ldr	r5, [pc, #28]	@ (8021ca8 <_fstat_r+0x20>)
 8021c8c:	2300      	movs	r3, #0
 8021c8e:	4604      	mov	r4, r0
 8021c90:	4608      	mov	r0, r1
 8021c92:	4611      	mov	r1, r2
 8021c94:	602b      	str	r3, [r5, #0]
 8021c96:	f7e3 fab1 	bl	80051fc <_fstat>
 8021c9a:	1c43      	adds	r3, r0, #1
 8021c9c:	d102      	bne.n	8021ca4 <_fstat_r+0x1c>
 8021c9e:	682b      	ldr	r3, [r5, #0]
 8021ca0:	b103      	cbz	r3, 8021ca4 <_fstat_r+0x1c>
 8021ca2:	6023      	str	r3, [r4, #0]
 8021ca4:	bd38      	pop	{r3, r4, r5, pc}
 8021ca6:	bf00      	nop
 8021ca8:	20017cec 	.word	0x20017cec

08021cac <_isatty_r>:
 8021cac:	b538      	push	{r3, r4, r5, lr}
 8021cae:	4d06      	ldr	r5, [pc, #24]	@ (8021cc8 <_isatty_r+0x1c>)
 8021cb0:	2300      	movs	r3, #0
 8021cb2:	4604      	mov	r4, r0
 8021cb4:	4608      	mov	r0, r1
 8021cb6:	602b      	str	r3, [r5, #0]
 8021cb8:	f7e3 fab0 	bl	800521c <_isatty>
 8021cbc:	1c43      	adds	r3, r0, #1
 8021cbe:	d102      	bne.n	8021cc6 <_isatty_r+0x1a>
 8021cc0:	682b      	ldr	r3, [r5, #0]
 8021cc2:	b103      	cbz	r3, 8021cc6 <_isatty_r+0x1a>
 8021cc4:	6023      	str	r3, [r4, #0]
 8021cc6:	bd38      	pop	{r3, r4, r5, pc}
 8021cc8:	20017cec 	.word	0x20017cec

08021ccc <_init>:
 8021ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021cce:	bf00      	nop
 8021cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021cd2:	bc08      	pop	{r3}
 8021cd4:	469e      	mov	lr, r3
 8021cd6:	4770      	bx	lr

08021cd8 <_fini>:
 8021cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021cda:	bf00      	nop
 8021cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021cde:	bc08      	pop	{r3}
 8021ce0:	469e      	mov	lr, r3
 8021ce2:	4770      	bx	lr
