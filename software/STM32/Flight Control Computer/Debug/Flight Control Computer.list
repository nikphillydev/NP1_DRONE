
Flight Control Computer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ab8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003c90  08003c90  00013c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cd0  08003cd0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003cd0  08003cd0  00013cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cd8  08003cd8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cd8  08003cd8  00013cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cdc  08003cdc  00013cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  2000000c  08003cec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08003cec  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017816  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033a1  00000000  00000000  00037895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  0003ac38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ef2  00000000  00000000  0003bfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000392f  00000000  00000000  0003ce92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019122  00000000  00000000  000407c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f340b  00000000  00000000  000598e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000050e4  00000000  00000000  0014ccf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00151dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003c78 	.word	0x08003c78

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003c78 	.word	0x08003c78

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000518:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <MX_FDCAN1_Init+0x84>)
 800051a:	4a20      	ldr	r2, [pc, #128]	; (800059c <MX_FDCAN1_Init+0x88>)
 800051c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800051e:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <MX_FDCAN1_Init+0x84>)
 8000520:	2200      	movs	r2, #0
 8000522:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000524:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <MX_FDCAN1_Init+0x84>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800052a:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <MX_FDCAN1_Init+0x84>)
 800052c:	2200      	movs	r2, #0
 800052e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000530:	4b19      	ldr	r3, [pc, #100]	; (8000598 <MX_FDCAN1_Init+0x84>)
 8000532:	2200      	movs	r2, #0
 8000534:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000536:	4b18      	ldr	r3, [pc, #96]	; (8000598 <MX_FDCAN1_Init+0x84>)
 8000538:	2200      	movs	r2, #0
 800053a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800053c:	4b16      	ldr	r3, [pc, #88]	; (8000598 <MX_FDCAN1_Init+0x84>)
 800053e:	2200      	movs	r2, #0
 8000540:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <MX_FDCAN1_Init+0x84>)
 8000544:	2210      	movs	r2, #16
 8000546:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <MX_FDCAN1_Init+0x84>)
 800054a:	2201      	movs	r2, #1
 800054c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <MX_FDCAN1_Init+0x84>)
 8000550:	2202      	movs	r2, #2
 8000552:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000554:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MX_FDCAN1_Init+0x84>)
 8000556:	2202      	movs	r2, #2
 8000558:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <MX_FDCAN1_Init+0x84>)
 800055c:	2201      	movs	r2, #1
 800055e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000560:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <MX_FDCAN1_Init+0x84>)
 8000562:	2201      	movs	r2, #1
 8000564:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_FDCAN1_Init+0x84>)
 8000568:	2201      	movs	r2, #1
 800056a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <MX_FDCAN1_Init+0x84>)
 800056e:	2201      	movs	r2, #1
 8000570:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_FDCAN1_Init+0x84>)
 8000574:	2200      	movs	r2, #0
 8000576:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000578:	4b07      	ldr	r3, [pc, #28]	; (8000598 <MX_FDCAN1_Init+0x84>)
 800057a:	2200      	movs	r2, #0
 800057c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_FDCAN1_Init+0x84>)
 8000580:	2200      	movs	r2, #0
 8000582:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000584:	4804      	ldr	r0, [pc, #16]	; (8000598 <MX_FDCAN1_Init+0x84>)
 8000586:	f000 fe41 	bl	800120c <HAL_FDCAN_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000590:	f000 fab7 	bl	8000b02 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000028 	.word	0x20000028
 800059c:	40006400 	.word	0x40006400

080005a0 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <MX_FDCAN2_Init+0x84>)
 80005a6:	4a20      	ldr	r2, [pc, #128]	; (8000628 <MX_FDCAN2_Init+0x88>)
 80005a8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80005aa:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <MX_FDCAN2_Init+0x84>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <MX_FDCAN2_Init+0x84>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80005b6:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <MX_FDCAN2_Init+0x84>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <MX_FDCAN2_Init+0x84>)
 80005be:	2200      	movs	r2, #0
 80005c0:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_FDCAN2_Init+0x84>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_FDCAN2_Init+0x84>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <MX_FDCAN2_Init+0x84>)
 80005d0:	2210      	movs	r2, #16
 80005d2:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_FDCAN2_Init+0x84>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80005da:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_FDCAN2_Init+0x84>)
 80005dc:	2202      	movs	r2, #2
 80005de:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <MX_FDCAN2_Init+0x84>)
 80005e2:	2202      	movs	r2, #2
 80005e4:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_FDCAN2_Init+0x84>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <MX_FDCAN2_Init+0x84>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_FDCAN2_Init+0x84>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <MX_FDCAN2_Init+0x84>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_FDCAN2_Init+0x84>)
 8000600:	2200      	movs	r2, #0
 8000602:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <MX_FDCAN2_Init+0x84>)
 8000606:	2200      	movs	r2, #0
 8000608:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_FDCAN2_Init+0x84>)
 800060c:	2200      	movs	r2, #0
 800060e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_FDCAN2_Init+0x84>)
 8000612:	f000 fdfb 	bl	800120c <HAL_FDCAN_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 800061c:	f000 fa71 	bl	8000b02 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	2000008c 	.word	0x2000008c
 8000628:	40006800 	.word	0x40006800

0800062c <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b0a0      	sub	sp, #128	; 0x80
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000644:	f107 0318 	add.w	r3, r7, #24
 8000648:	2254      	movs	r2, #84	; 0x54
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f003 fae6 	bl	8003c1e <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a48      	ldr	r2, [pc, #288]	; (8000778 <HAL_FDCAN_MspInit+0x14c>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d142      	bne.n	80006e2 <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800065c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000660:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000666:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000668:	f107 0318 	add.w	r3, r7, #24
 800066c:	4618      	mov	r0, r3
 800066e:	f002 f935 	bl	80028dc <HAL_RCCEx_PeriphCLKConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000678:	f000 fa43 	bl	8000b02 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <HAL_FDCAN_MspInit+0x150>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	3301      	adds	r3, #1
 8000682:	4a3e      	ldr	r2, [pc, #248]	; (800077c <HAL_FDCAN_MspInit+0x150>)
 8000684:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000686:	4b3d      	ldr	r3, [pc, #244]	; (800077c <HAL_FDCAN_MspInit+0x150>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d10b      	bne.n	80006a6 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800068e:	4b3c      	ldr	r3, [pc, #240]	; (8000780 <HAL_FDCAN_MspInit+0x154>)
 8000690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000692:	4a3b      	ldr	r2, [pc, #236]	; (8000780 <HAL_FDCAN_MspInit+0x154>)
 8000694:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000698:	6593      	str	r3, [r2, #88]	; 0x58
 800069a:	4b39      	ldr	r3, [pc, #228]	; (8000780 <HAL_FDCAN_MspInit+0x154>)
 800069c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800069e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b36      	ldr	r3, [pc, #216]	; (8000780 <HAL_FDCAN_MspInit+0x154>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a35      	ldr	r2, [pc, #212]	; (8000780 <HAL_FDCAN_MspInit+0x154>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b33      	ldr	r3, [pc, #204]	; (8000780 <HAL_FDCAN_MspInit+0x154>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80006d0:	2309      	movs	r3, #9
 80006d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006d8:	4619      	mov	r1, r3
 80006da:	482a      	ldr	r0, [pc, #168]	; (8000784 <HAL_FDCAN_MspInit+0x158>)
 80006dc:	f000 ff5c 	bl	8001598 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 80006e0:	e045      	b.n	800076e <HAL_FDCAN_MspInit+0x142>
  else if(fdcanHandle->Instance==FDCAN2)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a28      	ldr	r2, [pc, #160]	; (8000788 <HAL_FDCAN_MspInit+0x15c>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d140      	bne.n	800076e <HAL_FDCAN_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80006ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80006f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006f6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f8:	f107 0318 	add.w	r3, r7, #24
 80006fc:	4618      	mov	r0, r3
 80006fe:	f002 f8ed 	bl	80028dc <HAL_RCCEx_PeriphCLKConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <HAL_FDCAN_MspInit+0xe0>
      Error_Handler();
 8000708:	f000 f9fb 	bl	8000b02 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <HAL_FDCAN_MspInit+0x150>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	4a1a      	ldr	r2, [pc, #104]	; (800077c <HAL_FDCAN_MspInit+0x150>)
 8000714:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <HAL_FDCAN_MspInit+0x150>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d10b      	bne.n	8000736 <HAL_FDCAN_MspInit+0x10a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <HAL_FDCAN_MspInit+0x154>)
 8000720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000722:	4a17      	ldr	r2, [pc, #92]	; (8000780 <HAL_FDCAN_MspInit+0x154>)
 8000724:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000728:	6593      	str	r3, [r2, #88]	; 0x58
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <HAL_FDCAN_MspInit+0x154>)
 800072c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_FDCAN_MspInit+0x154>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a11      	ldr	r2, [pc, #68]	; (8000780 <HAL_FDCAN_MspInit+0x154>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <HAL_FDCAN_MspInit+0x154>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800074e:	2360      	movs	r3, #96	; 0x60
 8000750:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800075e:	2309      	movs	r3, #9
 8000760:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000766:	4619      	mov	r1, r3
 8000768:	4806      	ldr	r0, [pc, #24]	; (8000784 <HAL_FDCAN_MspInit+0x158>)
 800076a:	f000 ff15 	bl	8001598 <HAL_GPIO_Init>
}
 800076e:	bf00      	nop
 8000770:	3780      	adds	r7, #128	; 0x80
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40006400 	.word	0x40006400
 800077c:	200000f0 	.word	0x200000f0
 8000780:	40021000 	.word	0x40021000
 8000784:	48000400 	.word	0x48000400
 8000788:	40006800 	.word	0x40006800

0800078c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	4b4e      	ldr	r3, [pc, #312]	; (80008dc <MX_GPIO_Init+0x150>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a4d      	ldr	r2, [pc, #308]	; (80008dc <MX_GPIO_Init+0x150>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b4b      	ldr	r3, [pc, #300]	; (80008dc <MX_GPIO_Init+0x150>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ba:	4b48      	ldr	r3, [pc, #288]	; (80008dc <MX_GPIO_Init+0x150>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a47      	ldr	r2, [pc, #284]	; (80008dc <MX_GPIO_Init+0x150>)
 80007c0:	f043 0320 	orr.w	r3, r3, #32
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b45      	ldr	r3, [pc, #276]	; (80008dc <MX_GPIO_Init+0x150>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0320 	and.w	r3, r3, #32
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b42      	ldr	r3, [pc, #264]	; (80008dc <MX_GPIO_Init+0x150>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a41      	ldr	r2, [pc, #260]	; (80008dc <MX_GPIO_Init+0x150>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b3f      	ldr	r3, [pc, #252]	; (80008dc <MX_GPIO_Init+0x150>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	4b3c      	ldr	r3, [pc, #240]	; (80008dc <MX_GPIO_Init+0x150>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a3b      	ldr	r2, [pc, #236]	; (80008dc <MX_GPIO_Init+0x150>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b39      	ldr	r3, [pc, #228]	; (80008dc <MX_GPIO_Init+0x150>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO2_Pin|GPIO3_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000808:	4835      	ldr	r0, [pc, #212]	; (80008e0 <MX_GPIO_Init+0x154>)
 800080a:	f001 f847 	bl	800189c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GYRO_CS_Pin|ACCEL_CS_Pin|GPIO6_Pin|GPIO5_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f248 4111 	movw	r1, #33809	; 0x8411
 8000814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000818:	f001 f840 	bl	800189c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CC2500_CS_Pin|GPIO8_Pin|GPIO9_Pin|GPIO7_Pin
 800081c:	2200      	movs	r2, #0
 800081e:	f648 4192 	movw	r1, #35986	; 0x8c92
 8000822:	4830      	ldr	r0, [pc, #192]	; (80008e4 <MX_GPIO_Init+0x158>)
 8000824:	f001 f83a 	bl	800189c <HAL_GPIO_WritePin>
                          |GPIO4_Pin|GPIO1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO3_Pin;
 8000828:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	4827      	ldr	r0, [pc, #156]	; (80008e0 <MX_GPIO_Init+0x154>)
 8000842:	f000 fea9 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin;
 8000846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_INT_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	4821      	ldr	r0, [pc, #132]	; (80008e0 <MX_GPIO_Init+0x154>)
 800085c:	f000 fe9c 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin|ACCEL_CS_Pin|GPIO6_Pin|GPIO5_Pin;
 8000860:	f248 4311 	movw	r3, #33809	; 0x8411
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087c:	f000 fe8c 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8000880:	2302      	movs	r3, #2
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f000 fe7f 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = CC2500_GDO0_Pin|CC2500_GDO2_Pin|MAG_DRDY_Pin|MAG_INT_Pin
 800089a:	f247 0305 	movw	r3, #28677	; 0x7005
 800089e:	617b      	str	r3, [r7, #20]
                          |BMP_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	480d      	ldr	r0, [pc, #52]	; (80008e4 <MX_GPIO_Init+0x158>)
 80008b0:	f000 fe72 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = CC2500_CS_Pin|GPIO8_Pin|GPIO9_Pin|GPIO7_Pin
 80008b4:	f648 4392 	movw	r3, #35986	; 0x8c92
 80008b8:	617b      	str	r3, [r7, #20]
                          |GPIO4_Pin|GPIO1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_GPIO_Init+0x158>)
 80008ce:	f000 fe63 	bl	8001598 <HAL_GPIO_Init>

}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000
 80008e0:	48000800 	.word	0x48000800
 80008e4:	48000400 	.word	0x48000400

080008e8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_I2C2_Init+0x74>)
 80008ee:	4a1c      	ldr	r2, [pc, #112]	; (8000960 <MX_I2C2_Init+0x78>)
 80008f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_I2C2_Init+0x74>)
 80008f4:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <MX_I2C2_Init+0x7c>)
 80008f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_I2C2_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_I2C2_Init+0x74>)
 8000900:	2201      	movs	r2, #1
 8000902:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_I2C2_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_I2C2_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_I2C2_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_I2C2_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_I2C2_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000922:	480e      	ldr	r0, [pc, #56]	; (800095c <MX_I2C2_Init+0x74>)
 8000924:	f000 ffd2 	bl	80018cc <HAL_I2C_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800092e:	f000 f8e8 	bl	8000b02 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000932:	2100      	movs	r1, #0
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <MX_I2C2_Init+0x74>)
 8000936:	f001 f864 	bl	8001a02 <HAL_I2CEx_ConfigAnalogFilter>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000940:	f000 f8df 	bl	8000b02 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000944:	2100      	movs	r1, #0
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_I2C2_Init+0x74>)
 8000948:	f001 f8a6 	bl	8001a98 <HAL_I2CEx_ConfigDigitalFilter>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000952:	f000 f8d6 	bl	8000b02 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200000f4 	.word	0x200000f4
 8000960:	40005800 	.word	0x40005800
 8000964:	30a0a7fb 	.word	0x30a0a7fb

08000968 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b09e      	sub	sp, #120	; 0x78
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	2254      	movs	r2, #84	; 0x54
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f003 f948 	bl	8003c1e <memset>
  if(i2cHandle->Instance==I2C2)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a1f      	ldr	r2, [pc, #124]	; (8000a10 <HAL_I2C_MspInit+0xa8>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d137      	bne.n	8000a08 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800099c:	2300      	movs	r3, #0
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 ff99 	bl	80028dc <HAL_RCCEx_PeriphCLKConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009b0:	f000 f8a7 	bl	8000b02 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <HAL_I2C_MspInit+0xac>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b8:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <HAL_I2C_MspInit+0xac>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <HAL_I2C_MspInit+0xac>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009d0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d2:	2312      	movs	r3, #18
 80009d4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009de:	2304      	movs	r3, #4
 80009e0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009e6:	4619      	mov	r1, r3
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ec:	f000 fdd4 	bl	8001598 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <HAL_I2C_MspInit+0xac>)
 80009f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f4:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <HAL_I2C_MspInit+0xac>)
 80009f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009fa:	6593      	str	r3, [r2, #88]	; 0x58
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_I2C_MspInit+0xac>)
 80009fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a08:	bf00      	nop
 8000a0a:	3778      	adds	r7, #120	; 0x78
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40005800 	.word	0x40005800
 8000a14:	40021000 	.word	0x40021000

08000a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1c:	f000 fa7f 	bl	8000f1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a20:	f000 f824 	bl	8000a6c <SystemClock_Config>
//  HAL_Delay(1);

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a24:	f7ff feb2 	bl	800078c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000a28:	f7ff fd74 	bl	8000514 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000a2c:	f7ff fdb8 	bl	80005a0 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8000a30:	f7ff ff5a 	bl	80008e8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000a34:	f000 f86a 	bl	8000b0c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000a38:	f000 f948 	bl	8000ccc <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 8000a3c:	f000 f9ea 	bl	8000e14 <MX_USB_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	4808      	ldr	r0, [pc, #32]	; (8000a68 <main+0x50>)
 8000a46:	f000 ff29 	bl	800189c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000a4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a4e:	f000 fad7 	bl	8001000 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2180      	movs	r1, #128	; 0x80
 8000a56:	4804      	ldr	r0, [pc, #16]	; (8000a68 <main+0x50>)
 8000a58:	f000 ff20 	bl	800189c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000a5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a60:	f000 face 	bl	8001000 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, SET);
 8000a64:	e7ec      	b.n	8000a40 <main+0x28>
 8000a66:	bf00      	nop
 8000a68:	48000400 	.word	0x48000400

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b094      	sub	sp, #80	; 0x50
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0318 	add.w	r3, r7, #24
 8000a76:	2238      	movs	r2, #56	; 0x38
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f003 f8cf 	bl	8003c1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f001 f946 	bl	8001d20 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a94:	2321      	movs	r3, #33	; 0x21
 8000a96:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a9c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000aae:	2355      	movs	r3, #85	; 0x55
 8000ab0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abe:	f107 0318 	add.w	r3, r7, #24
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 f9e0 	bl	8001e88 <HAL_RCC_OscConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ace:	f000 f818 	bl	8000b02 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad2:	230f      	movs	r3, #15
 8000ad4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2104      	movs	r1, #4
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 fcde 	bl	80024ac <HAL_RCC_ClockConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000af6:	f000 f804 	bl	8000b02 <Error_Handler>
  }
}
 8000afa:	bf00      	nop
 8000afc:	3750      	adds	r7, #80	; 0x50
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b06:	b672      	cpsid	i
}
 8000b08:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <Error_Handler+0x8>

08000b0c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b12:	4a1c      	ldr	r2, [pc, #112]	; (8000b84 <MX_SPI1_Init+0x78>)
 8000b14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b26:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b2a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b3e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b42:	2220      	movs	r2, #32
 8000b44:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b5a:	2207      	movs	r2, #7
 8000b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b66:	2208      	movs	r2, #8
 8000b68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_SPI1_Init+0x74>)
 8000b6c:	f002 f904 	bl	8002d78 <HAL_SPI_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b76:	f7ff ffc4 	bl	8000b02 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000148 	.word	0x20000148
 8000b84:	40013000 	.word	0x40013000

08000b88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <HAL_SPI_MspInit+0x7c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d128      	bne.n	8000bfc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <HAL_SPI_MspInit+0x80>)
 8000bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bae:	4a16      	ldr	r2, [pc, #88]	; (8000c08 <HAL_SPI_MspInit+0x80>)
 8000bb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb4:	6613      	str	r3, [r2, #96]	; 0x60
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_SPI_MspInit+0x80>)
 8000bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_SPI_MspInit+0x80>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <HAL_SPI_MspInit+0x80>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_SPI_MspInit+0x80>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bda:	23e0      	movs	r3, #224	; 0xe0
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bea:	2305      	movs	r3, #5
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf8:	f000 fcce 	bl	8001598 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	3728      	adds	r7, #40	; 0x28
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40013000 	.word	0x40013000
 8000c08:	40021000 	.word	0x40021000

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_MspInit+0x44>)
 8000c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c16:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <HAL_MspInit+0x44>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <HAL_MspInit+0x44>)
 8000c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_MspInit+0x44>)
 8000c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_MspInit+0x44>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	6593      	str	r3, [r2, #88]	; 0x58
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_MspInit+0x44>)
 8000c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c42:	f001 f911 	bl	8001e68 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c58:	e7fe      	b.n	8000c58 <NMI_Handler+0x4>

08000c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <MemManage_Handler+0x4>

08000c66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca0:	f000 f990 	bl	8000fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <SystemInit+0x20>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <SystemInit+0x20>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000cd2:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <MX_USART2_UART_Init+0x94>)
 8000cd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cde:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d02:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d14:	4811      	ldr	r0, [pc, #68]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d16:	f002 f8da 	bl	8002ece <HAL_UART_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d20:	f7ff feef 	bl	8000b02 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d24:	2100      	movs	r1, #0
 8000d26:	480d      	ldr	r0, [pc, #52]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d28:	f002 fe76 	bl	8003a18 <HAL_UARTEx_SetTxFifoThreshold>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d32:	f7ff fee6 	bl	8000b02 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d36:	2100      	movs	r1, #0
 8000d38:	4808      	ldr	r0, [pc, #32]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d3a:	f002 feab 	bl	8003a94 <HAL_UARTEx_SetRxFifoThreshold>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d44:	f7ff fedd 	bl	8000b02 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d48:	4804      	ldr	r0, [pc, #16]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d4a:	f002 fe2c 	bl	80039a6 <HAL_UARTEx_DisableFifoMode>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d54:	f7ff fed5 	bl	8000b02 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200001ac 	.word	0x200001ac
 8000d60:	40004400 	.word	0x40004400

08000d64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b09e      	sub	sp, #120	; 0x78
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	2254      	movs	r2, #84	; 0x54
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 ff4a 	bl	8003c1e <memset>
  if(uartHandle->Instance==USART2)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a1f      	ldr	r2, [pc, #124]	; (8000e0c <HAL_UART_MspInit+0xa8>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d136      	bne.n	8000e02 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fd9b 	bl	80028dc <HAL_RCCEx_PeriphCLKConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dac:	f7ff fea9 	bl	8000b02 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <HAL_UART_MspInit+0xac>)
 8000db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db4:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <HAL_UART_MspInit+0xac>)
 8000db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dba:	6593      	str	r3, [r2, #88]	; 0x58
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <HAL_UART_MspInit+0xac>)
 8000dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <HAL_UART_MspInit+0xac>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <HAL_UART_MspInit+0xac>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_UART_MspInit+0xac>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000de0:	230c      	movs	r3, #12
 8000de2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df0:	2307      	movs	r3, #7
 8000df2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfe:	f000 fbcb 	bl	8001598 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e02:	bf00      	nop
 8000e04:	3778      	adds	r7, #120	; 0x78
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40004400 	.word	0x40004400
 8000e10:	40021000 	.word	0x40021000

08000e14 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000e18:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <MX_USB_PCD_Init+0x48>)
 8000e1a:	4a11      	ldr	r2, [pc, #68]	; (8000e60 <MX_USB_PCD_Init+0x4c>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_USB_PCD_Init+0x48>)
 8000e20:	2208      	movs	r2, #8
 8000e22:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000e24:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <MX_USB_PCD_Init+0x48>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_USB_PCD_Init+0x48>)
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <MX_USB_PCD_Init+0x48>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_USB_PCD_Init+0x48>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <MX_USB_PCD_Init+0x48>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_USB_PCD_Init+0x48>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <MX_USB_PCD_Init+0x48>)
 8000e4a:	f000 fe71 	bl	8001b30 <HAL_PCD_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000e54:	f7ff fe55 	bl	8000b02 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000240 	.word	0x20000240
 8000e60:	40005c00 	.word	0x40005c00

08000e64 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b098      	sub	sp, #96	; 0x60
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	2254      	movs	r2, #84	; 0x54
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f002 fed2 	bl	8003c1e <memset>
  if(pcdHandle->Instance==USB)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a11      	ldr	r2, [pc, #68]	; (8000ec4 <HAL_PCD_MspInit+0x60>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d11a      	bne.n	8000eba <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e88:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	4618      	mov	r0, r3
 8000e94:	f001 fd22 	bl	80028dc <HAL_RCCEx_PeriphCLKConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8000e9e:	f7ff fe30 	bl	8000b02 <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_PCD_MspInit+0x64>)
 8000ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea6:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <HAL_PCD_MspInit+0x64>)
 8000ea8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000eac:	6593      	str	r3, [r2, #88]	; 0x58
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_PCD_MspInit+0x64>)
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000eba:	bf00      	nop
 8000ebc:	3760      	adds	r7, #96	; 0x60
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40005c00 	.word	0x40005c00
 8000ec8:	40021000 	.word	0x40021000

08000ecc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ece:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ed0:	f7ff feea 	bl	8000ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed4:	480c      	ldr	r0, [pc, #48]	; (8000f08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ed6:	490d      	ldr	r1, [pc, #52]	; (8000f0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <LoopForever+0xe>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000edc:	e002      	b.n	8000ee4 <LoopCopyDataInit>

08000ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee2:	3304      	adds	r3, #4

08000ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee8:	d3f9      	bcc.n	8000ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eec:	4c0a      	ldr	r4, [pc, #40]	; (8000f18 <LoopForever+0x16>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef0:	e001      	b.n	8000ef6 <LoopFillZerobss>

08000ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef4:	3204      	adds	r2, #4

08000ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef8:	d3fb      	bcc.n	8000ef2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000efa:	f002 fe99 	bl	8003c30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000efe:	f7ff fd8b 	bl	8000a18 <main>

08000f02 <LoopForever>:

LoopForever:
    b LoopForever
 8000f02:	e7fe      	b.n	8000f02 <LoopForever>
  ldr   r0, =_estack
 8000f04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f10:	08003ce0 	.word	0x08003ce0
  ldr r2, =_sbss
 8000f14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f18:	20000520 	.word	0x20000520

08000f1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC1_2_IRQHandler>

08000f1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 f93d 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f2e:	200f      	movs	r0, #15
 8000f30:	f000 f80e 	bl	8000f50 <HAL_InitTick>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	71fb      	strb	r3, [r7, #7]
 8000f3e:	e001      	b.n	8000f44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f40:	f7ff fe64 	bl	8000c0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f44:	79fb      	ldrb	r3, [r7, #7]

}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <HAL_InitTick+0x68>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d022      	beq.n	8000faa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_InitTick+0x6c>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <HAL_InitTick+0x68>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 f93a 	bl	80011f2 <HAL_SYSTICK_Config>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d10f      	bne.n	8000fa4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b0f      	cmp	r3, #15
 8000f88:	d809      	bhi.n	8000f9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f92:	f000 f914 	bl	80011be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <HAL_InitTick+0x70>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	e007      	b.n	8000fae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	e004      	b.n	8000fae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
 8000fa8:	e001      	b.n	8000fae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000004 	.word	0x20000004

08000fc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_IncTick+0x1c>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a03      	ldr	r2, [pc, #12]	; (8000fe0 <HAL_IncTick+0x1c>)
 8000fd4:	6013      	str	r3, [r2, #0]
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	2000051c 	.word	0x2000051c
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	2000051c 	.word	0x2000051c

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff ffee 	bl	8000fe8 <HAL_GetTick>
 800100c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001018:	d004      	beq.n	8001024 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <HAL_Delay+0x40>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	4413      	add	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001024:	bf00      	nop
 8001026:	f7ff ffdf 	bl	8000fe8 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	429a      	cmp	r2, r3
 8001034:	d8f7      	bhi.n	8001026 <HAL_Delay+0x26>
  {
  }
}
 8001036:	bf00      	nop
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000008 	.word	0x20000008

08001044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800106c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	60d3      	str	r3, [r2, #12]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	f003 0307 	and.w	r3, r3, #7
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
         );
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001174:	d301      	bcc.n	800117a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <SysTick_Config+0x40>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001182:	210f      	movs	r1, #15
 8001184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001188:	f7ff ff8e 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Config+0x40>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff47 	bl	8001044 <__NVIC_SetPriorityGrouping>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011cc:	f7ff ff5e 	bl	800108c <__NVIC_GetPriorityGrouping>
 80011d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	6978      	ldr	r0, [r7, #20]
 80011d8:	f7ff ff90 	bl	80010fc <NVIC_EncodePriority>
 80011dc:	4602      	mov	r2, r0
 80011de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e2:	4611      	mov	r1, r2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff5f 	bl	80010a8 <__NVIC_SetPriority>
}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffb2 	bl	8001164 <SysTick_Config>
 8001200:	4603      	mov	r3, r0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e147      	b.n	80014ae <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d106      	bne.n	8001238 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff f9fa 	bl	800062c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	699a      	ldr	r2, [r3, #24]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0210 	bic.w	r2, r2, #16
 8001246:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001248:	f7ff fece 	bl	8000fe8 <HAL_GetTick>
 800124c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800124e:	e012      	b.n	8001276 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001250:	f7ff feca 	bl	8000fe8 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b0a      	cmp	r3, #10
 800125c:	d90b      	bls.n	8001276 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001262:	f043 0201 	orr.w	r2, r3, #1
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2203      	movs	r2, #3
 800126e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e11b      	b.n	80014ae <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	2b08      	cmp	r3, #8
 8001282:	d0e5      	beq.n	8001250 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	699a      	ldr	r2, [r3, #24]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0201 	orr.w	r2, r2, #1
 8001292:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001294:	f7ff fea8 	bl	8000fe8 <HAL_GetTick>
 8001298:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800129a:	e012      	b.n	80012c2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800129c:	f7ff fea4 	bl	8000fe8 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b0a      	cmp	r3, #10
 80012a8:	d90b      	bls.n	80012c2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ae:	f043 0201 	orr.w	r2, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2203      	movs	r2, #3
 80012ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e0f5      	b.n	80014ae <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0e5      	beq.n	800129c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	699a      	ldr	r2, [r3, #24]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 0202 	orr.w	r2, r2, #2
 80012de:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a74      	ldr	r2, [pc, #464]	; (80014b8 <HAL_FDCAN_Init+0x2ac>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d103      	bne.n	80012f2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80012ea:	4a74      	ldr	r2, [pc, #464]	; (80014bc <HAL_FDCAN_Init+0x2b0>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	7c1b      	ldrb	r3, [r3, #16]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d108      	bne.n	800130c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	699a      	ldr	r2, [r3, #24]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001308:	619a      	str	r2, [r3, #24]
 800130a:	e007      	b.n	800131c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	699a      	ldr	r2, [r3, #24]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800131a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	7c5b      	ldrb	r3, [r3, #17]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d108      	bne.n	8001336 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	699a      	ldr	r2, [r3, #24]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001332:	619a      	str	r2, [r3, #24]
 8001334:	e007      	b.n	8001346 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	699a      	ldr	r2, [r3, #24]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001344:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7c9b      	ldrb	r3, [r3, #18]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d108      	bne.n	8001360 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	699a      	ldr	r2, [r3, #24]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800135c:	619a      	str	r2, [r3, #24]
 800135e:	e007      	b.n	8001370 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	699a      	ldr	r2, [r3, #24]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800136e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	699a      	ldr	r2, [r3, #24]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001394:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0210 	bic.w	r2, r2, #16
 80013a4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d108      	bne.n	80013c0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	699a      	ldr	r2, [r3, #24]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f042 0204 	orr.w	r2, r2, #4
 80013bc:	619a      	str	r2, [r3, #24]
 80013be:	e02c      	b.n	800141a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d028      	beq.n	800141a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d01c      	beq.n	800140a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	699a      	ldr	r2, [r3, #24]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013de:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	691a      	ldr	r2, [r3, #16]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0210 	orr.w	r2, r2, #16
 80013ee:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	d110      	bne.n	800141a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	699a      	ldr	r2, [r3, #24]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f042 0220 	orr.w	r2, r2, #32
 8001406:	619a      	str	r2, [r3, #24]
 8001408:	e007      	b.n	800141a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	699a      	ldr	r2, [r3, #24]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f042 0220 	orr.w	r2, r2, #32
 8001418:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	3b01      	subs	r3, #1
 8001420:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	3b01      	subs	r3, #1
 8001428:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800142a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001432:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	3b01      	subs	r3, #1
 800143c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001442:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001444:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800144e:	d115      	bne.n	800147c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145a:	3b01      	subs	r3, #1
 800145c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800145e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	3b01      	subs	r3, #1
 8001466:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001468:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001470:	3b01      	subs	r3, #1
 8001472:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001478:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800147a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 f814 	bl	80014c0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40006400 	.word	0x40006400
 80014bc:	40006500 	.word	0x40006500

080014c0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80014c8:	4b30      	ldr	r3, [pc, #192]	; (800158c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80014ca:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a2f      	ldr	r2, [pc, #188]	; (8001590 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d103      	bne.n	80014de <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80014dc:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a2c      	ldr	r2, [pc, #176]	; (8001594 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d103      	bne.n	80014f0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80014ee:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014fe:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001506:	041a      	lsls	r2, r3, #16
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001524:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152c:	061a      	lsls	r2, r3, #24
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	e005      	b.n	8001572 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3304      	adds	r3, #4
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	429a      	cmp	r2, r3
 800157c:	d3f3      	bcc.n	8001566 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800157e:	bf00      	nop
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	4000a400 	.word	0x4000a400
 8001590:	40006800 	.word	0x40006800
 8001594:	40006c00 	.word	0x40006c00

08001598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001598:	b480      	push	{r7}
 800159a:	b087      	sub	sp, #28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015a6:	e15a      	b.n	800185e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	4013      	ands	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 814c 	beq.w	8001858 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d005      	beq.n	80015d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d130      	bne.n	800163a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800160e:	2201      	movs	r2, #1
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	f003 0201 	and.w	r2, r3, #1
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	2b03      	cmp	r3, #3
 8001644:	d017      	beq.n	8001676 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d123      	bne.n	80016ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	6939      	ldr	r1, [r7, #16]
 80016c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0203 	and.w	r2, r3, #3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 80a6 	beq.w	8001858 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170c:	4b5b      	ldr	r3, [pc, #364]	; (800187c <HAL_GPIO_Init+0x2e4>)
 800170e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001710:	4a5a      	ldr	r2, [pc, #360]	; (800187c <HAL_GPIO_Init+0x2e4>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6613      	str	r3, [r2, #96]	; 0x60
 8001718:	4b58      	ldr	r3, [pc, #352]	; (800187c <HAL_GPIO_Init+0x2e4>)
 800171a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001724:	4a56      	ldr	r2, [pc, #344]	; (8001880 <HAL_GPIO_Init+0x2e8>)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	3302      	adds	r3, #2
 800172c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	220f      	movs	r2, #15
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800174e:	d01f      	beq.n	8001790 <HAL_GPIO_Init+0x1f8>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a4c      	ldr	r2, [pc, #304]	; (8001884 <HAL_GPIO_Init+0x2ec>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d019      	beq.n	800178c <HAL_GPIO_Init+0x1f4>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a4b      	ldr	r2, [pc, #300]	; (8001888 <HAL_GPIO_Init+0x2f0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d013      	beq.n	8001788 <HAL_GPIO_Init+0x1f0>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a4a      	ldr	r2, [pc, #296]	; (800188c <HAL_GPIO_Init+0x2f4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d00d      	beq.n	8001784 <HAL_GPIO_Init+0x1ec>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a49      	ldr	r2, [pc, #292]	; (8001890 <HAL_GPIO_Init+0x2f8>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d007      	beq.n	8001780 <HAL_GPIO_Init+0x1e8>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a48      	ldr	r2, [pc, #288]	; (8001894 <HAL_GPIO_Init+0x2fc>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d101      	bne.n	800177c <HAL_GPIO_Init+0x1e4>
 8001778:	2305      	movs	r3, #5
 800177a:	e00a      	b.n	8001792 <HAL_GPIO_Init+0x1fa>
 800177c:	2306      	movs	r3, #6
 800177e:	e008      	b.n	8001792 <HAL_GPIO_Init+0x1fa>
 8001780:	2304      	movs	r3, #4
 8001782:	e006      	b.n	8001792 <HAL_GPIO_Init+0x1fa>
 8001784:	2303      	movs	r3, #3
 8001786:	e004      	b.n	8001792 <HAL_GPIO_Init+0x1fa>
 8001788:	2302      	movs	r3, #2
 800178a:	e002      	b.n	8001792 <HAL_GPIO_Init+0x1fa>
 800178c:	2301      	movs	r3, #1
 800178e:	e000      	b.n	8001792 <HAL_GPIO_Init+0x1fa>
 8001790:	2300      	movs	r3, #0
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	f002 0203 	and.w	r2, r2, #3
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	4093      	lsls	r3, r2
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a2:	4937      	ldr	r1, [pc, #220]	; (8001880 <HAL_GPIO_Init+0x2e8>)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	3302      	adds	r3, #2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017b0:	4b39      	ldr	r3, [pc, #228]	; (8001898 <HAL_GPIO_Init+0x300>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017d4:	4a30      	ldr	r2, [pc, #192]	; (8001898 <HAL_GPIO_Init+0x300>)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017da:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <HAL_GPIO_Init+0x300>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017fe:	4a26      	ldr	r2, [pc, #152]	; (8001898 <HAL_GPIO_Init+0x300>)
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001804:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_GPIO_Init+0x300>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001828:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <HAL_GPIO_Init+0x300>)
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_GPIO_Init+0x300>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001852:	4a11      	ldr	r2, [pc, #68]	; (8001898 <HAL_GPIO_Init+0x300>)
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	3301      	adds	r3, #1
 800185c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	fa22 f303 	lsr.w	r3, r2, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	f47f ae9d 	bne.w	80015a8 <HAL_GPIO_Init+0x10>
  }
}
 800186e:	bf00      	nop
 8001870:	bf00      	nop
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	40021000 	.word	0x40021000
 8001880:	40010000 	.word	0x40010000
 8001884:	48000400 	.word	0x48000400
 8001888:	48000800 	.word	0x48000800
 800188c:	48000c00 	.word	0x48000c00
 8001890:	48001000 	.word	0x48001000
 8001894:	48001400 	.word	0x48001400
 8001898:	40010400 	.word	0x40010400

0800189c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	807b      	strh	r3, [r7, #2]
 80018a8:	4613      	mov	r3, r2
 80018aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018ac:	787b      	ldrb	r3, [r7, #1]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018b2:	887a      	ldrh	r2, [r7, #2]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018b8:	e002      	b.n	80018c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ba:	887a      	ldrh	r2, [r7, #2]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e08d      	b.n	80019fa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d106      	bne.n	80018f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff f838 	bl	8000968 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2224      	movs	r2, #36	; 0x24
 80018fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0201 	bic.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800191c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800192c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d107      	bne.n	8001946 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	e006      	b.n	8001954 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001952:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d108      	bne.n	800196e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	e007      	b.n	800197e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800197c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800198c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001990:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691a      	ldr	r2, [r3, #16]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69d9      	ldr	r1, [r3, #28]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1a      	ldr	r2, [r3, #32]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0201 	orr.w	r2, r2, #1
 80019da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2220      	movs	r2, #32
 80019e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b20      	cmp	r3, #32
 8001a16:	d138      	bne.n	8001a8a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e032      	b.n	8001a8c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2224      	movs	r2, #36	; 0x24
 8001a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0201 	bic.w	r2, r2, #1
 8001a44:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a54:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6819      	ldr	r1, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0201 	orr.w	r2, r2, #1
 8001a74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2220      	movs	r2, #32
 8001a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e000      	b.n	8001a8c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a8a:	2302      	movs	r3, #2
  }
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b20      	cmp	r3, #32
 8001aac:	d139      	bne.n	8001b22 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e033      	b.n	8001b24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2224      	movs	r2, #36	; 0x24
 8001ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001aea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f042 0201 	orr.w	r2, r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2220      	movs	r2, #32
 8001b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e000      	b.n	8001b24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b22:	2302      	movs	r3, #2
  }
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e0c0      	b.n	8001cc4 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff f984 	bl	8000e64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2203      	movs	r2, #3
 8001b60:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f002 f81f 	bl	8003bac <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	73fb      	strb	r3, [r7, #15]
 8001b72:	e03e      	b.n	8001bf2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b74:	7bfa      	ldrb	r2, [r7, #15]
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	440b      	add	r3, r1
 8001b82:	3311      	adds	r3, #17
 8001b84:	2201      	movs	r2, #1
 8001b86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b88:	7bfa      	ldrb	r2, [r7, #15]
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	3310      	adds	r3, #16
 8001b98:	7bfa      	ldrb	r2, [r7, #15]
 8001b9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	3313      	adds	r3, #19
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3320      	adds	r3, #32
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	440b      	add	r3, r1
 8001bd2:	3324      	adds	r3, #36	; 0x24
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	440b      	add	r3, r1
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	791b      	ldrb	r3, [r3, #4]
 8001bf6:	7bfa      	ldrb	r2, [r7, #15]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d3bb      	bcc.n	8001b74 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	e044      	b.n	8001c8c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	440b      	add	r3, r1
 8001c10:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001c2a:	7bfa      	ldrb	r2, [r7, #15]
 8001c2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	440b      	add	r3, r1
 8001c52:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	440b      	add	r3, r1
 8001c68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	440b      	add	r3, r1
 8001c7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	791b      	ldrb	r3, [r3, #4]
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d3b5      	bcc.n	8001c02 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ca2:	f001 ff9e 	bl	8003be2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	7a9b      	ldrb	r3, [r3, #10]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d102      	bne.n	8001cc2 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f805 	bl	8001ccc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f043 0302 	orr.w	r3, r3, #2
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d141      	bne.n	8001db2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d2e:	4b4b      	ldr	r3, [pc, #300]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d3a:	d131      	bne.n	8001da0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d3c:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d42:	4a46      	ldr	r2, [pc, #280]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d4c:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d54:	4a41      	ldr	r2, [pc, #260]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d5c:	4b40      	ldr	r3, [pc, #256]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2232      	movs	r2, #50	; 0x32
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	4a3f      	ldr	r2, [pc, #252]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	0c9b      	lsrs	r3, r3, #18
 8001d6e:	3301      	adds	r3, #1
 8001d70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d72:	e002      	b.n	8001d7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d7a:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d86:	d102      	bne.n	8001d8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f2      	bne.n	8001d74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d8e:	4b33      	ldr	r3, [pc, #204]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9a:	d158      	bne.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e057      	b.n	8001e50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001da0:	4b2e      	ldr	r3, [pc, #184]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001da6:	4a2d      	ldr	r2, [pc, #180]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001db0:	e04d      	b.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001db8:	d141      	bne.n	8001e3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dba:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc6:	d131      	bne.n	8001e2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dc8:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dce:	4a23      	ldr	r2, [pc, #140]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dd8:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001de0:	4a1e      	ldr	r2, [pc, #120]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001de6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001de8:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2232      	movs	r2, #50	; 0x32
 8001dee:	fb02 f303 	mul.w	r3, r2, r3
 8001df2:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001df4:	fba2 2303 	umull	r2, r3, r2, r3
 8001df8:	0c9b      	lsrs	r3, r3, #18
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dfe:	e002      	b.n	8001e06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e12:	d102      	bne.n	8001e1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f2      	bne.n	8001e00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e26:	d112      	bne.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e011      	b.n	8001e50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e3c:	e007      	b.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e4c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	20000000 	.word	0x20000000
 8001e64:	431bde83 	.word	0x431bde83

08001e68 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e76:	6093      	str	r3, [r2, #8]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40007000 	.word	0x40007000

08001e88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e2fe      	b.n	8002498 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d075      	beq.n	8001f92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ea6:	4b97      	ldr	r3, [pc, #604]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eb0:	4b94      	ldr	r3, [pc, #592]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	2b0c      	cmp	r3, #12
 8001ebe:	d102      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x3e>
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d002      	beq.n	8001ecc <HAL_RCC_OscConfig+0x44>
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d10b      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	4b8d      	ldr	r3, [pc, #564]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d05b      	beq.n	8001f90 <HAL_RCC_OscConfig+0x108>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d157      	bne.n	8001f90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e2d9      	b.n	8002498 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eec:	d106      	bne.n	8001efc <HAL_RCC_OscConfig+0x74>
 8001eee:	4b85      	ldr	r3, [pc, #532]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a84      	ldr	r2, [pc, #528]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e01d      	b.n	8001f38 <HAL_RCC_OscConfig+0xb0>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x98>
 8001f06:	4b7f      	ldr	r3, [pc, #508]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a7e      	ldr	r2, [pc, #504]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b7c      	ldr	r3, [pc, #496]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a7b      	ldr	r2, [pc, #492]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e00b      	b.n	8001f38 <HAL_RCC_OscConfig+0xb0>
 8001f20:	4b78      	ldr	r3, [pc, #480]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a77      	ldr	r2, [pc, #476]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4b75      	ldr	r3, [pc, #468]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a74      	ldr	r2, [pc, #464]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7ff f852 	bl	8000fe8 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f48:	f7ff f84e 	bl	8000fe8 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	; 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e29e      	b.n	8002498 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f5a:	4b6a      	ldr	r3, [pc, #424]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0xc0>
 8001f66:	e014      	b.n	8001f92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7ff f83e 	bl	8000fe8 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f70:	f7ff f83a 	bl	8000fe8 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e28a      	b.n	8002498 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f82:	4b60      	ldr	r3, [pc, #384]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0xe8>
 8001f8e:	e000      	b.n	8001f92 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d075      	beq.n	800208a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f9e:	4b59      	ldr	r3, [pc, #356]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fa8:	4b56      	ldr	r3, [pc, #344]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	2b0c      	cmp	r3, #12
 8001fb6:	d102      	bne.n	8001fbe <HAL_RCC_OscConfig+0x136>
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d002      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x13c>
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d11f      	bne.n	8002004 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fc4:	4b4f      	ldr	r3, [pc, #316]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_OscConfig+0x154>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e25d      	b.n	8002498 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fdc:	4b49      	ldr	r3, [pc, #292]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	061b      	lsls	r3, r3, #24
 8001fea:	4946      	ldr	r1, [pc, #280]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ff0:	4b45      	ldr	r3, [pc, #276]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe ffab 	bl	8000f50 <HAL_InitTick>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d043      	beq.n	8002088 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e249      	b.n	8002498 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d023      	beq.n	8002054 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800200c:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a3c      	ldr	r2, [pc, #240]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8002012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7fe ffe6 	bl	8000fe8 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002020:	f7fe ffe2 	bl	8000fe8 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e232      	b.n	8002498 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002032:	4b34      	ldr	r3, [pc, #208]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203e:	4b31      	ldr	r3, [pc, #196]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	061b      	lsls	r3, r3, #24
 800204c:	492d      	ldr	r1, [pc, #180]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 800204e:	4313      	orrs	r3, r2
 8002050:	604b      	str	r3, [r1, #4]
 8002052:	e01a      	b.n	800208a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002054:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a2a      	ldr	r2, [pc, #168]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 800205a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800205e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7fe ffc2 	bl	8000fe8 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002068:	f7fe ffbe 	bl	8000fe8 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e20e      	b.n	8002498 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800207a:	4b22      	ldr	r3, [pc, #136]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x1e0>
 8002086:	e000      	b.n	800208a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002088:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d041      	beq.n	800211a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d01c      	beq.n	80020d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209e:	4b19      	ldr	r3, [pc, #100]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 80020a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a4:	4a17      	ldr	r2, [pc, #92]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ae:	f7fe ff9b 	bl	8000fe8 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b6:	f7fe ff97 	bl	8000fe8 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e1e7      	b.n	8002498 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c8:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 80020ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0ef      	beq.n	80020b6 <HAL_RCC_OscConfig+0x22e>
 80020d6:	e020      	b.n	800211a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 80020da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020de:	4a09      	ldr	r2, [pc, #36]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 80020e0:	f023 0301 	bic.w	r3, r3, #1
 80020e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e8:	f7fe ff7e 	bl	8000fe8 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020ee:	e00d      	b.n	800210c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f0:	f7fe ff7a 	bl	8000fe8 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d906      	bls.n	800210c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e1ca      	b.n	8002498 <HAL_RCC_OscConfig+0x610>
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800210c:	4b8c      	ldr	r3, [pc, #560]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 800210e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1ea      	bne.n	80020f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80a6 	beq.w	8002274 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002128:	2300      	movs	r3, #0
 800212a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800212c:	4b84      	ldr	r3, [pc, #528]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_RCC_OscConfig+0x2b4>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <HAL_RCC_OscConfig+0x2b6>
 800213c:	2300      	movs	r3, #0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00d      	beq.n	800215e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002142:	4b7f      	ldr	r3, [pc, #508]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	4a7e      	ldr	r2, [pc, #504]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 8002148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214c:	6593      	str	r3, [r2, #88]	; 0x58
 800214e:	4b7c      	ldr	r3, [pc, #496]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800215a:	2301      	movs	r3, #1
 800215c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800215e:	4b79      	ldr	r3, [pc, #484]	; (8002344 <HAL_RCC_OscConfig+0x4bc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002166:	2b00      	cmp	r3, #0
 8002168:	d118      	bne.n	800219c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800216a:	4b76      	ldr	r3, [pc, #472]	; (8002344 <HAL_RCC_OscConfig+0x4bc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a75      	ldr	r2, [pc, #468]	; (8002344 <HAL_RCC_OscConfig+0x4bc>)
 8002170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002176:	f7fe ff37 	bl	8000fe8 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217e:	f7fe ff33 	bl	8000fe8 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e183      	b.n	8002498 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002190:	4b6c      	ldr	r3, [pc, #432]	; (8002344 <HAL_RCC_OscConfig+0x4bc>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d108      	bne.n	80021b6 <HAL_RCC_OscConfig+0x32e>
 80021a4:	4b66      	ldr	r3, [pc, #408]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 80021a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021aa:	4a65      	ldr	r2, [pc, #404]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021b4:	e024      	b.n	8002200 <HAL_RCC_OscConfig+0x378>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b05      	cmp	r3, #5
 80021bc:	d110      	bne.n	80021e0 <HAL_RCC_OscConfig+0x358>
 80021be:	4b60      	ldr	r3, [pc, #384]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c4:	4a5e      	ldr	r2, [pc, #376]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 80021c6:	f043 0304 	orr.w	r3, r3, #4
 80021ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021ce:	4b5c      	ldr	r3, [pc, #368]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 80021d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d4:	4a5a      	ldr	r2, [pc, #360]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021de:	e00f      	b.n	8002200 <HAL_RCC_OscConfig+0x378>
 80021e0:	4b57      	ldr	r3, [pc, #348]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e6:	4a56      	ldr	r2, [pc, #344]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021f0:	4b53      	ldr	r3, [pc, #332]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	4a52      	ldr	r2, [pc, #328]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 80021f8:	f023 0304 	bic.w	r3, r3, #4
 80021fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d016      	beq.n	8002236 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002208:	f7fe feee 	bl	8000fe8 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800220e:	e00a      	b.n	8002226 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002210:	f7fe feea 	bl	8000fe8 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	; 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e138      	b.n	8002498 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002226:	4b46      	ldr	r3, [pc, #280]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0ed      	beq.n	8002210 <HAL_RCC_OscConfig+0x388>
 8002234:	e015      	b.n	8002262 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002236:	f7fe fed7 	bl	8000fe8 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800223c:	e00a      	b.n	8002254 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7fe fed3 	bl	8000fe8 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	; 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e121      	b.n	8002498 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002254:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 8002256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1ed      	bne.n	800223e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002262:	7ffb      	ldrb	r3, [r7, #31]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d105      	bne.n	8002274 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002268:	4b35      	ldr	r3, [pc, #212]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	4a34      	ldr	r2, [pc, #208]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 800226e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002272:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b00      	cmp	r3, #0
 800227e:	d03c      	beq.n	80022fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d01c      	beq.n	80022c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002288:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 800228a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800228e:	4a2c      	ldr	r2, [pc, #176]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002298:	f7fe fea6 	bl	8000fe8 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022a0:	f7fe fea2 	bl	8000fe8 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e0f2      	b.n	8002498 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022b2:	4b23      	ldr	r3, [pc, #140]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 80022b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0ef      	beq.n	80022a0 <HAL_RCC_OscConfig+0x418>
 80022c0:	e01b      	b.n	80022fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022c2:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 80022c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022c8:	4a1d      	ldr	r2, [pc, #116]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d2:	f7fe fe89 	bl	8000fe8 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022da:	f7fe fe85 	bl	8000fe8 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e0d5      	b.n	8002498 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022ec:	4b14      	ldr	r3, [pc, #80]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 80022ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1ef      	bne.n	80022da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80c9 	beq.w	8002496 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 030c 	and.w	r3, r3, #12
 800230c:	2b0c      	cmp	r3, #12
 800230e:	f000 8083 	beq.w	8002418 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d15e      	bne.n	80023d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231a:	4b09      	ldr	r3, [pc, #36]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a08      	ldr	r2, [pc, #32]	; (8002340 <HAL_RCC_OscConfig+0x4b8>)
 8002320:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002326:	f7fe fe5f 	bl	8000fe8 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800232c:	e00c      	b.n	8002348 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232e:	f7fe fe5b 	bl	8000fe8 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d905      	bls.n	8002348 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e0ab      	b.n	8002498 <HAL_RCC_OscConfig+0x610>
 8002340:	40021000 	.word	0x40021000
 8002344:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002348:	4b55      	ldr	r3, [pc, #340]	; (80024a0 <HAL_RCC_OscConfig+0x618>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1ec      	bne.n	800232e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002354:	4b52      	ldr	r3, [pc, #328]	; (80024a0 <HAL_RCC_OscConfig+0x618>)
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	4b52      	ldr	r3, [pc, #328]	; (80024a4 <HAL_RCC_OscConfig+0x61c>)
 800235a:	4013      	ands	r3, r2
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6a11      	ldr	r1, [r2, #32]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002364:	3a01      	subs	r2, #1
 8002366:	0112      	lsls	r2, r2, #4
 8002368:	4311      	orrs	r1, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800236e:	0212      	lsls	r2, r2, #8
 8002370:	4311      	orrs	r1, r2
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002376:	0852      	lsrs	r2, r2, #1
 8002378:	3a01      	subs	r2, #1
 800237a:	0552      	lsls	r2, r2, #21
 800237c:	4311      	orrs	r1, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002382:	0852      	lsrs	r2, r2, #1
 8002384:	3a01      	subs	r2, #1
 8002386:	0652      	lsls	r2, r2, #25
 8002388:	4311      	orrs	r1, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800238e:	06d2      	lsls	r2, r2, #27
 8002390:	430a      	orrs	r2, r1
 8002392:	4943      	ldr	r1, [pc, #268]	; (80024a0 <HAL_RCC_OscConfig+0x618>)
 8002394:	4313      	orrs	r3, r2
 8002396:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002398:	4b41      	ldr	r3, [pc, #260]	; (80024a0 <HAL_RCC_OscConfig+0x618>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a40      	ldr	r2, [pc, #256]	; (80024a0 <HAL_RCC_OscConfig+0x618>)
 800239e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023a4:	4b3e      	ldr	r3, [pc, #248]	; (80024a0 <HAL_RCC_OscConfig+0x618>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4a3d      	ldr	r2, [pc, #244]	; (80024a0 <HAL_RCC_OscConfig+0x618>)
 80023aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b0:	f7fe fe1a 	bl	8000fe8 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b8:	f7fe fe16 	bl	8000fe8 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e066      	b.n	8002498 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ca:	4b35      	ldr	r3, [pc, #212]	; (80024a0 <HAL_RCC_OscConfig+0x618>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x530>
 80023d6:	e05e      	b.n	8002496 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d8:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <HAL_RCC_OscConfig+0x618>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a30      	ldr	r2, [pc, #192]	; (80024a0 <HAL_RCC_OscConfig+0x618>)
 80023de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e4:	f7fe fe00 	bl	8000fe8 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ec:	f7fe fdfc 	bl	8000fe8 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e04c      	b.n	8002498 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023fe:	4b28      	ldr	r3, [pc, #160]	; (80024a0 <HAL_RCC_OscConfig+0x618>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800240a:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <HAL_RCC_OscConfig+0x618>)
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	4924      	ldr	r1, [pc, #144]	; (80024a0 <HAL_RCC_OscConfig+0x618>)
 8002410:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <HAL_RCC_OscConfig+0x620>)
 8002412:	4013      	ands	r3, r2
 8002414:	60cb      	str	r3, [r1, #12]
 8002416:	e03e      	b.n	8002496 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e039      	b.n	8002498 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002424:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <HAL_RCC_OscConfig+0x618>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f003 0203 	and.w	r2, r3, #3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	429a      	cmp	r2, r3
 8002436:	d12c      	bne.n	8002492 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	3b01      	subs	r3, #1
 8002444:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d123      	bne.n	8002492 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002456:	429a      	cmp	r2, r3
 8002458:	d11b      	bne.n	8002492 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002466:	429a      	cmp	r2, r3
 8002468:	d113      	bne.n	8002492 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	085b      	lsrs	r3, r3, #1
 8002476:	3b01      	subs	r3, #1
 8002478:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800247a:	429a      	cmp	r2, r3
 800247c:	d109      	bne.n	8002492 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002488:	085b      	lsrs	r3, r3, #1
 800248a:	3b01      	subs	r3, #1
 800248c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800248e:	429a      	cmp	r2, r3
 8002490:	d001      	beq.n	8002496 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3720      	adds	r7, #32
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40021000 	.word	0x40021000
 80024a4:	019f800c 	.word	0x019f800c
 80024a8:	feeefffc 	.word	0xfeeefffc

080024ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e11e      	b.n	8002702 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c4:	4b91      	ldr	r3, [pc, #580]	; (800270c <HAL_RCC_ClockConfig+0x260>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 030f 	and.w	r3, r3, #15
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d910      	bls.n	80024f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d2:	4b8e      	ldr	r3, [pc, #568]	; (800270c <HAL_RCC_ClockConfig+0x260>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 020f 	bic.w	r2, r3, #15
 80024da:	498c      	ldr	r1, [pc, #560]	; (800270c <HAL_RCC_ClockConfig+0x260>)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b8a      	ldr	r3, [pc, #552]	; (800270c <HAL_RCC_ClockConfig+0x260>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e106      	b.n	8002702 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d073      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b03      	cmp	r3, #3
 8002506:	d129      	bne.n	800255c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002508:	4b81      	ldr	r3, [pc, #516]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0f4      	b.n	8002702 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002518:	f000 f99c 	bl	8002854 <RCC_GetSysClockFreqFromPLLSource>
 800251c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4a7c      	ldr	r2, [pc, #496]	; (8002714 <HAL_RCC_ClockConfig+0x268>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d93f      	bls.n	80025a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002526:	4b7a      	ldr	r3, [pc, #488]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800253a:	2b00      	cmp	r3, #0
 800253c:	d033      	beq.n	80025a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002542:	2b00      	cmp	r3, #0
 8002544:	d12f      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002546:	4b72      	ldr	r3, [pc, #456]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800254e:	4a70      	ldr	r2, [pc, #448]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 8002550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002554:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	e024      	b.n	80025a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b02      	cmp	r3, #2
 8002562:	d107      	bne.n	8002574 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002564:	4b6a      	ldr	r3, [pc, #424]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d109      	bne.n	8002584 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0c6      	b.n	8002702 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002574:	4b66      	ldr	r3, [pc, #408]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0be      	b.n	8002702 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002584:	f000 f8ce 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 8002588:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4a61      	ldr	r2, [pc, #388]	; (8002714 <HAL_RCC_ClockConfig+0x268>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d909      	bls.n	80025a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002592:	4b5f      	ldr	r3, [pc, #380]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800259a:	4a5d      	ldr	r2, [pc, #372]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 800259c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025a6:	4b5a      	ldr	r3, [pc, #360]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f023 0203 	bic.w	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4957      	ldr	r1, [pc, #348]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b8:	f7fe fd16 	bl	8000fe8 <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c0:	f7fe fd12 	bl	8000fe8 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e095      	b.n	8002702 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	4b4e      	ldr	r3, [pc, #312]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 020c 	and.w	r2, r3, #12
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d1eb      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d023      	beq.n	800263c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002600:	4b43      	ldr	r3, [pc, #268]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	4a42      	ldr	r2, [pc, #264]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 8002606:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800260a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b00      	cmp	r3, #0
 8002616:	d007      	beq.n	8002628 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002618:	4b3d      	ldr	r3, [pc, #244]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002620:	4a3b      	ldr	r2, [pc, #236]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 8002622:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002626:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002628:	4b39      	ldr	r3, [pc, #228]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4936      	ldr	r1, [pc, #216]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
 800263a:	e008      	b.n	800264e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2b80      	cmp	r3, #128	; 0x80
 8002640:	d105      	bne.n	800264e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002642:	4b33      	ldr	r3, [pc, #204]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	4a32      	ldr	r2, [pc, #200]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 8002648:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800264c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800264e:	4b2f      	ldr	r3, [pc, #188]	; (800270c <HAL_RCC_ClockConfig+0x260>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d21d      	bcs.n	8002698 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265c:	4b2b      	ldr	r3, [pc, #172]	; (800270c <HAL_RCC_ClockConfig+0x260>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f023 020f 	bic.w	r2, r3, #15
 8002664:	4929      	ldr	r1, [pc, #164]	; (800270c <HAL_RCC_ClockConfig+0x260>)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	4313      	orrs	r3, r2
 800266a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800266c:	f7fe fcbc 	bl	8000fe8 <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	e00a      	b.n	800268a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002674:	f7fe fcb8 	bl	8000fe8 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e03b      	b.n	8002702 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268a:	4b20      	ldr	r3, [pc, #128]	; (800270c <HAL_RCC_ClockConfig+0x260>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d1ed      	bne.n	8002674 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a4:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4917      	ldr	r1, [pc, #92]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d009      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026c2:	4b13      	ldr	r3, [pc, #76]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	490f      	ldr	r1, [pc, #60]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026d6:	f000 f825 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 80026da:	4602      	mov	r2, r0
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <HAL_RCC_ClockConfig+0x264>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	490c      	ldr	r1, [pc, #48]	; (8002718 <HAL_RCC_ClockConfig+0x26c>)
 80026e8:	5ccb      	ldrb	r3, [r1, r3]
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	fa22 f303 	lsr.w	r3, r2, r3
 80026f2:	4a0a      	ldr	r2, [pc, #40]	; (800271c <HAL_RCC_ClockConfig+0x270>)
 80026f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <HAL_RCC_ClockConfig+0x274>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe fc28 	bl	8000f50 <HAL_InitTick>
 8002700:	4603      	mov	r3, r0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40022000 	.word	0x40022000
 8002710:	40021000 	.word	0x40021000
 8002714:	04c4b400 	.word	0x04c4b400
 8002718:	08003c90 	.word	0x08003c90
 800271c:	20000000 	.word	0x20000000
 8002720:	20000004 	.word	0x20000004

08002724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800272a:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b04      	cmp	r3, #4
 8002734:	d102      	bne.n	800273c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002736:	4b2a      	ldr	r3, [pc, #168]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	e047      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800273c:	4b27      	ldr	r3, [pc, #156]	; (80027dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b08      	cmp	r3, #8
 8002746:	d102      	bne.n	800274e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002748:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	e03e      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800274e:	4b23      	ldr	r3, [pc, #140]	; (80027dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	2b0c      	cmp	r3, #12
 8002758:	d136      	bne.n	80027c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800275a:	4b20      	ldr	r3, [pc, #128]	; (80027dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002764:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	3301      	adds	r3, #1
 8002770:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2b03      	cmp	r3, #3
 8002776:	d10c      	bne.n	8002792 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002778:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002780:	4a16      	ldr	r2, [pc, #88]	; (80027dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002782:	68d2      	ldr	r2, [r2, #12]
 8002784:	0a12      	lsrs	r2, r2, #8
 8002786:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	617b      	str	r3, [r7, #20]
      break;
 8002790:	e00c      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002792:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	fbb2 f3f3 	udiv	r3, r2, r3
 800279a:	4a10      	ldr	r2, [pc, #64]	; (80027dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800279c:	68d2      	ldr	r2, [r2, #12]
 800279e:	0a12      	lsrs	r2, r2, #8
 80027a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027a4:	fb02 f303 	mul.w	r3, r2, r3
 80027a8:	617b      	str	r3, [r7, #20]
      break;
 80027aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0e5b      	lsrs	r3, r3, #25
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	3301      	adds	r3, #1
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	e001      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80027cc:	693b      	ldr	r3, [r7, #16]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000
 80027e0:	00f42400 	.word	0x00f42400

080027e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000000 	.word	0x20000000

080027fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002800:	f7ff fff0 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4904      	ldr	r1, [pc, #16]	; (8002824 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800281c:	4618      	mov	r0, r3
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021000 	.word	0x40021000
 8002824:	08003ca0 	.word	0x08003ca0

08002828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800282c:	f7ff ffda 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 8002830:	4602      	mov	r2, r0
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	0adb      	lsrs	r3, r3, #11
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	4904      	ldr	r1, [pc, #16]	; (8002850 <HAL_RCC_GetPCLK2Freq+0x28>)
 800283e:	5ccb      	ldrb	r3, [r1, r3]
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002848:	4618      	mov	r0, r3
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40021000 	.word	0x40021000
 8002850:	08003ca0 	.word	0x08003ca0

08002854 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800285a:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002864:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	3301      	adds	r3, #1
 8002870:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b03      	cmp	r3, #3
 8002876:	d10c      	bne.n	8002892 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002878:	4a17      	ldr	r2, [pc, #92]	; (80028d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002882:	68d2      	ldr	r2, [r2, #12]
 8002884:	0a12      	lsrs	r2, r2, #8
 8002886:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	617b      	str	r3, [r7, #20]
    break;
 8002890:	e00c      	b.n	80028ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002892:	4a11      	ldr	r2, [pc, #68]	; (80028d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	4a0e      	ldr	r2, [pc, #56]	; (80028d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800289c:	68d2      	ldr	r2, [r2, #12]
 800289e:	0a12      	lsrs	r2, r2, #8
 80028a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028a4:	fb02 f303 	mul.w	r3, r2, r3
 80028a8:	617b      	str	r3, [r7, #20]
    break;
 80028aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0e5b      	lsrs	r3, r3, #25
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	3301      	adds	r3, #1
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80028c6:	687b      	ldr	r3, [r7, #4]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	40021000 	.word	0x40021000
 80028d8:	00f42400 	.word	0x00f42400

080028dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028e4:	2300      	movs	r3, #0
 80028e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028e8:	2300      	movs	r3, #0
 80028ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 8098 	beq.w	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028fa:	2300      	movs	r3, #0
 80028fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028fe:	4b43      	ldr	r3, [pc, #268]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10d      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800290a:	4b40      	ldr	r3, [pc, #256]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800290c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290e:	4a3f      	ldr	r2, [pc, #252]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002914:	6593      	str	r3, [r2, #88]	; 0x58
 8002916:	4b3d      	ldr	r3, [pc, #244]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002922:	2301      	movs	r3, #1
 8002924:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002926:	4b3a      	ldr	r3, [pc, #232]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a39      	ldr	r2, [pc, #228]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800292c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002930:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002932:	f7fe fb59 	bl	8000fe8 <HAL_GetTick>
 8002936:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002938:	e009      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293a:	f7fe fb55 	bl	8000fe8 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d902      	bls.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	74fb      	strb	r3, [r7, #19]
        break;
 800294c:	e005      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800294e:	4b30      	ldr	r3, [pc, #192]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0ef      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800295a:	7cfb      	ldrb	r3, [r7, #19]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d159      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002960:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01e      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	429a      	cmp	r2, r3
 800297a:	d019      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800297c:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002986:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002988:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800298a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298e:	4a1f      	ldr	r2, [pc, #124]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002998:	4b1c      	ldr	r3, [pc, #112]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299e:	4a1b      	ldr	r2, [pc, #108]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029a8:	4a18      	ldr	r2, [pc, #96]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d016      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ba:	f7fe fb15 	bl	8000fe8 <HAL_GetTick>
 80029be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c0:	e00b      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7fe fb11 	bl	8000fe8 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d902      	bls.n	80029da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	74fb      	strb	r3, [r7, #19]
            break;
 80029d8:	e006      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029da:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0ec      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80029e8:	7cfb      	ldrb	r3, [r7, #19]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10b      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ee:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029fc:	4903      	ldr	r1, [pc, #12]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a04:	e008      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a06:	7cfb      	ldrb	r3, [r7, #19]
 8002a08:	74bb      	strb	r3, [r7, #18]
 8002a0a:	e005      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a18:	7c7b      	ldrb	r3, [r7, #17]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d105      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1e:	4ba7      	ldr	r3, [pc, #668]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	4aa6      	ldr	r2, [pc, #664]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a36:	4ba1      	ldr	r3, [pc, #644]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3c:	f023 0203 	bic.w	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	499d      	ldr	r1, [pc, #628]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a58:	4b98      	ldr	r3, [pc, #608]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	f023 020c 	bic.w	r2, r3, #12
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	4995      	ldr	r1, [pc, #596]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a7a:	4b90      	ldr	r3, [pc, #576]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	498c      	ldr	r1, [pc, #560]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a9c:	4b87      	ldr	r3, [pc, #540]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	4984      	ldr	r1, [pc, #528]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002abe:	4b7f      	ldr	r3, [pc, #508]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	497b      	ldr	r1, [pc, #492]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ae0:	4b76      	ldr	r3, [pc, #472]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	4973      	ldr	r1, [pc, #460]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b02:	4b6e      	ldr	r3, [pc, #440]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	496a      	ldr	r1, [pc, #424]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b24:	4b65      	ldr	r3, [pc, #404]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4962      	ldr	r1, [pc, #392]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b46:	4b5d      	ldr	r3, [pc, #372]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	4959      	ldr	r1, [pc, #356]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b68:	4b54      	ldr	r3, [pc, #336]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b6e:	f023 0203 	bic.w	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	4951      	ldr	r1, [pc, #324]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b8a:	4b4c      	ldr	r3, [pc, #304]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	4948      	ldr	r1, [pc, #288]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d015      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bac:	4b43      	ldr	r3, [pc, #268]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4940      	ldr	r1, [pc, #256]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bca:	d105      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bcc:	4b3b      	ldr	r3, [pc, #236]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4a3a      	ldr	r2, [pc, #232]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bd6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d015      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002be4:	4b35      	ldr	r3, [pc, #212]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf2:	4932      	ldr	r1, [pc, #200]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c02:	d105      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c04:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4a2c      	ldr	r2, [pc, #176]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c0e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d015      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c1c:	4b27      	ldr	r3, [pc, #156]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	4924      	ldr	r1, [pc, #144]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c3a:	d105      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c3c:	4b1f      	ldr	r3, [pc, #124]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4a1e      	ldr	r2, [pc, #120]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c46:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d015      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c62:	4916      	ldr	r1, [pc, #88]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c72:	d105      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c74:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4a10      	ldr	r2, [pc, #64]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c7e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d019      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	4908      	ldr	r1, [pc, #32]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002caa:	d109      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4a02      	ldr	r2, [pc, #8]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cb6:	60d3      	str	r3, [r2, #12]
 8002cb8:	e002      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d015      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ccc:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	4926      	ldr	r1, [pc, #152]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cea:	d105      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cec:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4a20      	ldr	r2, [pc, #128]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d015      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d12:	4918      	ldr	r1, [pc, #96]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d22:	d105      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d24:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4a12      	ldr	r2, [pc, #72]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d015      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d3c:	4b0d      	ldr	r3, [pc, #52]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4a:	490a      	ldr	r1, [pc, #40]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d5a:	d105      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d66:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002d68:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40021000 	.word	0x40021000

08002d78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e09d      	b.n	8002ec6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d108      	bne.n	8002da4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d9a:	d009      	beq.n	8002db0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	61da      	str	r2, [r3, #28]
 8002da2:	e005      	b.n	8002db0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fd fedc 	bl	8000b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002de6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002df0:	d902      	bls.n	8002df8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	e002      	b.n	8002dfe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dfc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002e06:	d007      	beq.n	8002e18 <HAL_SPI_Init+0xa0>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e10:	d002      	beq.n	8002e18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5a:	ea42 0103 	orr.w	r1, r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	0c1b      	lsrs	r3, r3, #16
 8002e74:	f003 0204 	and.w	r2, r3, #4
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002e94:	ea42 0103 	orr.w	r1, r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69da      	ldr	r2, [r3, #28]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e042      	b.n	8002f66 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fd ff36 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2224      	movs	r2, #36	; 0x24
 8002efc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fb25 	bl	8003568 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f826 	bl	8002f70 <UART_SetConfig>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e01b      	b.n	8002f66 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f3c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f4c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0201 	orr.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fba4 	bl	80036ac <UART_CheckIdleState>
 8002f64:	4603      	mov	r3, r0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f74:	b08c      	sub	sp, #48	; 0x30
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4baa      	ldr	r3, [pc, #680]	; (8003248 <UART_SetConfig+0x2d8>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a9f      	ldr	r2, [pc, #636]	; (800324c <UART_SetConfig+0x2dc>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d004      	beq.n	8002fdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002fe6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffa:	f023 010f 	bic.w	r1, r3, #15
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a90      	ldr	r2, [pc, #576]	; (8003250 <UART_SetConfig+0x2e0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d125      	bne.n	8003060 <UART_SetConfig+0xf0>
 8003014:	4b8f      	ldr	r3, [pc, #572]	; (8003254 <UART_SetConfig+0x2e4>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b03      	cmp	r3, #3
 8003020:	d81a      	bhi.n	8003058 <UART_SetConfig+0xe8>
 8003022:	a201      	add	r2, pc, #4	; (adr r2, 8003028 <UART_SetConfig+0xb8>)
 8003024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003028:	08003039 	.word	0x08003039
 800302c:	08003049 	.word	0x08003049
 8003030:	08003041 	.word	0x08003041
 8003034:	08003051 	.word	0x08003051
 8003038:	2301      	movs	r3, #1
 800303a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800303e:	e116      	b.n	800326e <UART_SetConfig+0x2fe>
 8003040:	2302      	movs	r3, #2
 8003042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003046:	e112      	b.n	800326e <UART_SetConfig+0x2fe>
 8003048:	2304      	movs	r3, #4
 800304a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800304e:	e10e      	b.n	800326e <UART_SetConfig+0x2fe>
 8003050:	2308      	movs	r3, #8
 8003052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003056:	e10a      	b.n	800326e <UART_SetConfig+0x2fe>
 8003058:	2310      	movs	r3, #16
 800305a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800305e:	e106      	b.n	800326e <UART_SetConfig+0x2fe>
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a7c      	ldr	r2, [pc, #496]	; (8003258 <UART_SetConfig+0x2e8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d138      	bne.n	80030dc <UART_SetConfig+0x16c>
 800306a:	4b7a      	ldr	r3, [pc, #488]	; (8003254 <UART_SetConfig+0x2e4>)
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b0c      	cmp	r3, #12
 8003076:	d82d      	bhi.n	80030d4 <UART_SetConfig+0x164>
 8003078:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <UART_SetConfig+0x110>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	080030b5 	.word	0x080030b5
 8003084:	080030d5 	.word	0x080030d5
 8003088:	080030d5 	.word	0x080030d5
 800308c:	080030d5 	.word	0x080030d5
 8003090:	080030c5 	.word	0x080030c5
 8003094:	080030d5 	.word	0x080030d5
 8003098:	080030d5 	.word	0x080030d5
 800309c:	080030d5 	.word	0x080030d5
 80030a0:	080030bd 	.word	0x080030bd
 80030a4:	080030d5 	.word	0x080030d5
 80030a8:	080030d5 	.word	0x080030d5
 80030ac:	080030d5 	.word	0x080030d5
 80030b0:	080030cd 	.word	0x080030cd
 80030b4:	2300      	movs	r3, #0
 80030b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ba:	e0d8      	b.n	800326e <UART_SetConfig+0x2fe>
 80030bc:	2302      	movs	r3, #2
 80030be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030c2:	e0d4      	b.n	800326e <UART_SetConfig+0x2fe>
 80030c4:	2304      	movs	r3, #4
 80030c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ca:	e0d0      	b.n	800326e <UART_SetConfig+0x2fe>
 80030cc:	2308      	movs	r3, #8
 80030ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030d2:	e0cc      	b.n	800326e <UART_SetConfig+0x2fe>
 80030d4:	2310      	movs	r3, #16
 80030d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030da:	e0c8      	b.n	800326e <UART_SetConfig+0x2fe>
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a5e      	ldr	r2, [pc, #376]	; (800325c <UART_SetConfig+0x2ec>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d125      	bne.n	8003132 <UART_SetConfig+0x1c2>
 80030e6:	4b5b      	ldr	r3, [pc, #364]	; (8003254 <UART_SetConfig+0x2e4>)
 80030e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030f0:	2b30      	cmp	r3, #48	; 0x30
 80030f2:	d016      	beq.n	8003122 <UART_SetConfig+0x1b2>
 80030f4:	2b30      	cmp	r3, #48	; 0x30
 80030f6:	d818      	bhi.n	800312a <UART_SetConfig+0x1ba>
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d00a      	beq.n	8003112 <UART_SetConfig+0x1a2>
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d814      	bhi.n	800312a <UART_SetConfig+0x1ba>
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <UART_SetConfig+0x19a>
 8003104:	2b10      	cmp	r3, #16
 8003106:	d008      	beq.n	800311a <UART_SetConfig+0x1aa>
 8003108:	e00f      	b.n	800312a <UART_SetConfig+0x1ba>
 800310a:	2300      	movs	r3, #0
 800310c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003110:	e0ad      	b.n	800326e <UART_SetConfig+0x2fe>
 8003112:	2302      	movs	r3, #2
 8003114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003118:	e0a9      	b.n	800326e <UART_SetConfig+0x2fe>
 800311a:	2304      	movs	r3, #4
 800311c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003120:	e0a5      	b.n	800326e <UART_SetConfig+0x2fe>
 8003122:	2308      	movs	r3, #8
 8003124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003128:	e0a1      	b.n	800326e <UART_SetConfig+0x2fe>
 800312a:	2310      	movs	r3, #16
 800312c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003130:	e09d      	b.n	800326e <UART_SetConfig+0x2fe>
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a4a      	ldr	r2, [pc, #296]	; (8003260 <UART_SetConfig+0x2f0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d125      	bne.n	8003188 <UART_SetConfig+0x218>
 800313c:	4b45      	ldr	r3, [pc, #276]	; (8003254 <UART_SetConfig+0x2e4>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003142:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003146:	2bc0      	cmp	r3, #192	; 0xc0
 8003148:	d016      	beq.n	8003178 <UART_SetConfig+0x208>
 800314a:	2bc0      	cmp	r3, #192	; 0xc0
 800314c:	d818      	bhi.n	8003180 <UART_SetConfig+0x210>
 800314e:	2b80      	cmp	r3, #128	; 0x80
 8003150:	d00a      	beq.n	8003168 <UART_SetConfig+0x1f8>
 8003152:	2b80      	cmp	r3, #128	; 0x80
 8003154:	d814      	bhi.n	8003180 <UART_SetConfig+0x210>
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <UART_SetConfig+0x1f0>
 800315a:	2b40      	cmp	r3, #64	; 0x40
 800315c:	d008      	beq.n	8003170 <UART_SetConfig+0x200>
 800315e:	e00f      	b.n	8003180 <UART_SetConfig+0x210>
 8003160:	2300      	movs	r3, #0
 8003162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003166:	e082      	b.n	800326e <UART_SetConfig+0x2fe>
 8003168:	2302      	movs	r3, #2
 800316a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800316e:	e07e      	b.n	800326e <UART_SetConfig+0x2fe>
 8003170:	2304      	movs	r3, #4
 8003172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003176:	e07a      	b.n	800326e <UART_SetConfig+0x2fe>
 8003178:	2308      	movs	r3, #8
 800317a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800317e:	e076      	b.n	800326e <UART_SetConfig+0x2fe>
 8003180:	2310      	movs	r3, #16
 8003182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003186:	e072      	b.n	800326e <UART_SetConfig+0x2fe>
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a35      	ldr	r2, [pc, #212]	; (8003264 <UART_SetConfig+0x2f4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d12a      	bne.n	80031e8 <UART_SetConfig+0x278>
 8003192:	4b30      	ldr	r3, [pc, #192]	; (8003254 <UART_SetConfig+0x2e4>)
 8003194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003198:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031a0:	d01a      	beq.n	80031d8 <UART_SetConfig+0x268>
 80031a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031a6:	d81b      	bhi.n	80031e0 <UART_SetConfig+0x270>
 80031a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ac:	d00c      	beq.n	80031c8 <UART_SetConfig+0x258>
 80031ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b2:	d815      	bhi.n	80031e0 <UART_SetConfig+0x270>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <UART_SetConfig+0x250>
 80031b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031bc:	d008      	beq.n	80031d0 <UART_SetConfig+0x260>
 80031be:	e00f      	b.n	80031e0 <UART_SetConfig+0x270>
 80031c0:	2300      	movs	r3, #0
 80031c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031c6:	e052      	b.n	800326e <UART_SetConfig+0x2fe>
 80031c8:	2302      	movs	r3, #2
 80031ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ce:	e04e      	b.n	800326e <UART_SetConfig+0x2fe>
 80031d0:	2304      	movs	r3, #4
 80031d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031d6:	e04a      	b.n	800326e <UART_SetConfig+0x2fe>
 80031d8:	2308      	movs	r3, #8
 80031da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031de:	e046      	b.n	800326e <UART_SetConfig+0x2fe>
 80031e0:	2310      	movs	r3, #16
 80031e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031e6:	e042      	b.n	800326e <UART_SetConfig+0x2fe>
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a17      	ldr	r2, [pc, #92]	; (800324c <UART_SetConfig+0x2dc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d13a      	bne.n	8003268 <UART_SetConfig+0x2f8>
 80031f2:	4b18      	ldr	r3, [pc, #96]	; (8003254 <UART_SetConfig+0x2e4>)
 80031f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003200:	d01a      	beq.n	8003238 <UART_SetConfig+0x2c8>
 8003202:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003206:	d81b      	bhi.n	8003240 <UART_SetConfig+0x2d0>
 8003208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800320c:	d00c      	beq.n	8003228 <UART_SetConfig+0x2b8>
 800320e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003212:	d815      	bhi.n	8003240 <UART_SetConfig+0x2d0>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <UART_SetConfig+0x2b0>
 8003218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321c:	d008      	beq.n	8003230 <UART_SetConfig+0x2c0>
 800321e:	e00f      	b.n	8003240 <UART_SetConfig+0x2d0>
 8003220:	2300      	movs	r3, #0
 8003222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003226:	e022      	b.n	800326e <UART_SetConfig+0x2fe>
 8003228:	2302      	movs	r3, #2
 800322a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800322e:	e01e      	b.n	800326e <UART_SetConfig+0x2fe>
 8003230:	2304      	movs	r3, #4
 8003232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003236:	e01a      	b.n	800326e <UART_SetConfig+0x2fe>
 8003238:	2308      	movs	r3, #8
 800323a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800323e:	e016      	b.n	800326e <UART_SetConfig+0x2fe>
 8003240:	2310      	movs	r3, #16
 8003242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003246:	e012      	b.n	800326e <UART_SetConfig+0x2fe>
 8003248:	cfff69f3 	.word	0xcfff69f3
 800324c:	40008000 	.word	0x40008000
 8003250:	40013800 	.word	0x40013800
 8003254:	40021000 	.word	0x40021000
 8003258:	40004400 	.word	0x40004400
 800325c:	40004800 	.word	0x40004800
 8003260:	40004c00 	.word	0x40004c00
 8003264:	40005000 	.word	0x40005000
 8003268:	2310      	movs	r3, #16
 800326a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4aae      	ldr	r2, [pc, #696]	; (800352c <UART_SetConfig+0x5bc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	f040 8097 	bne.w	80033a8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800327a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800327e:	2b08      	cmp	r3, #8
 8003280:	d823      	bhi.n	80032ca <UART_SetConfig+0x35a>
 8003282:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <UART_SetConfig+0x318>)
 8003284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003288:	080032ad 	.word	0x080032ad
 800328c:	080032cb 	.word	0x080032cb
 8003290:	080032b5 	.word	0x080032b5
 8003294:	080032cb 	.word	0x080032cb
 8003298:	080032bb 	.word	0x080032bb
 800329c:	080032cb 	.word	0x080032cb
 80032a0:	080032cb 	.word	0x080032cb
 80032a4:	080032cb 	.word	0x080032cb
 80032a8:	080032c3 	.word	0x080032c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ac:	f7ff faa6 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 80032b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032b2:	e010      	b.n	80032d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032b4:	4b9e      	ldr	r3, [pc, #632]	; (8003530 <UART_SetConfig+0x5c0>)
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032b8:	e00d      	b.n	80032d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ba:	f7ff fa33 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 80032be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032c0:	e009      	b.n	80032d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032c8:	e005      	b.n	80032d6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80032d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8130 	beq.w	800353e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	4a94      	ldr	r2, [pc, #592]	; (8003534 <UART_SetConfig+0x5c4>)
 80032e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032e8:	461a      	mov	r2, r3
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4413      	add	r3, r2
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d305      	bcc.n	800330e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	429a      	cmp	r2, r3
 800330c:	d903      	bls.n	8003316 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003314:	e113      	b.n	800353e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	2200      	movs	r2, #0
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	60fa      	str	r2, [r7, #12]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	4a84      	ldr	r2, [pc, #528]	; (8003534 <UART_SetConfig+0x5c4>)
 8003324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003328:	b29b      	uxth	r3, r3
 800332a:	2200      	movs	r2, #0
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003334:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003338:	f7fc ff6e 	bl	8000218 <__aeabi_uldivmod>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4610      	mov	r0, r2
 8003342:	4619      	mov	r1, r3
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	020b      	lsls	r3, r1, #8
 800334e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003352:	0202      	lsls	r2, r0, #8
 8003354:	6979      	ldr	r1, [r7, #20]
 8003356:	6849      	ldr	r1, [r1, #4]
 8003358:	0849      	lsrs	r1, r1, #1
 800335a:	2000      	movs	r0, #0
 800335c:	460c      	mov	r4, r1
 800335e:	4605      	mov	r5, r0
 8003360:	eb12 0804 	adds.w	r8, r2, r4
 8003364:	eb43 0905 	adc.w	r9, r3, r5
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	469a      	mov	sl, r3
 8003370:	4693      	mov	fp, r2
 8003372:	4652      	mov	r2, sl
 8003374:	465b      	mov	r3, fp
 8003376:	4640      	mov	r0, r8
 8003378:	4649      	mov	r1, r9
 800337a:	f7fc ff4d 	bl	8000218 <__aeabi_uldivmod>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4613      	mov	r3, r2
 8003384:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800338c:	d308      	bcc.n	80033a0 <UART_SetConfig+0x430>
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003394:	d204      	bcs.n	80033a0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6a3a      	ldr	r2, [r7, #32]
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	e0ce      	b.n	800353e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80033a6:	e0ca      	b.n	800353e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b0:	d166      	bne.n	8003480 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80033b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d827      	bhi.n	800340a <UART_SetConfig+0x49a>
 80033ba:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <UART_SetConfig+0x450>)
 80033bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c0:	080033e5 	.word	0x080033e5
 80033c4:	080033ed 	.word	0x080033ed
 80033c8:	080033f5 	.word	0x080033f5
 80033cc:	0800340b 	.word	0x0800340b
 80033d0:	080033fb 	.word	0x080033fb
 80033d4:	0800340b 	.word	0x0800340b
 80033d8:	0800340b 	.word	0x0800340b
 80033dc:	0800340b 	.word	0x0800340b
 80033e0:	08003403 	.word	0x08003403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033e4:	f7ff fa0a 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 80033e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033ea:	e014      	b.n	8003416 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033ec:	f7ff fa1c 	bl	8002828 <HAL_RCC_GetPCLK2Freq>
 80033f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033f2:	e010      	b.n	8003416 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033f4:	4b4e      	ldr	r3, [pc, #312]	; (8003530 <UART_SetConfig+0x5c0>)
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033f8:	e00d      	b.n	8003416 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033fa:	f7ff f993 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 80033fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003400:	e009      	b.n	8003416 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003408:	e005      	b.n	8003416 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003414:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8090 	beq.w	800353e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	4a44      	ldr	r2, [pc, #272]	; (8003534 <UART_SetConfig+0x5c4>)
 8003424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003428:	461a      	mov	r2, r3
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003430:	005a      	lsls	r2, r3, #1
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	085b      	lsrs	r3, r3, #1
 8003438:	441a      	add	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003442:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	2b0f      	cmp	r3, #15
 8003448:	d916      	bls.n	8003478 <UART_SetConfig+0x508>
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003450:	d212      	bcs.n	8003478 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	b29b      	uxth	r3, r3
 8003456:	f023 030f 	bic.w	r3, r3, #15
 800345a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	085b      	lsrs	r3, r3, #1
 8003460:	b29b      	uxth	r3, r3
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	b29a      	uxth	r2, r3
 8003468:	8bfb      	ldrh	r3, [r7, #30]
 800346a:	4313      	orrs	r3, r2
 800346c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	8bfa      	ldrh	r2, [r7, #30]
 8003474:	60da      	str	r2, [r3, #12]
 8003476:	e062      	b.n	800353e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800347e:	e05e      	b.n	800353e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003480:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003484:	2b08      	cmp	r3, #8
 8003486:	d828      	bhi.n	80034da <UART_SetConfig+0x56a>
 8003488:	a201      	add	r2, pc, #4	; (adr r2, 8003490 <UART_SetConfig+0x520>)
 800348a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348e:	bf00      	nop
 8003490:	080034b5 	.word	0x080034b5
 8003494:	080034bd 	.word	0x080034bd
 8003498:	080034c5 	.word	0x080034c5
 800349c:	080034db 	.word	0x080034db
 80034a0:	080034cb 	.word	0x080034cb
 80034a4:	080034db 	.word	0x080034db
 80034a8:	080034db 	.word	0x080034db
 80034ac:	080034db 	.word	0x080034db
 80034b0:	080034d3 	.word	0x080034d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034b4:	f7ff f9a2 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 80034b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034ba:	e014      	b.n	80034e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034bc:	f7ff f9b4 	bl	8002828 <HAL_RCC_GetPCLK2Freq>
 80034c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034c2:	e010      	b.n	80034e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034c4:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <UART_SetConfig+0x5c0>)
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034c8:	e00d      	b.n	80034e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ca:	f7ff f92b 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 80034ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034d0:	e009      	b.n	80034e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034d8:	e005      	b.n	80034e6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80034e4:	bf00      	nop
    }

    if (pclk != 0U)
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d028      	beq.n	800353e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	4a10      	ldr	r2, [pc, #64]	; (8003534 <UART_SetConfig+0x5c4>)
 80034f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034f6:	461a      	mov	r2, r3
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	085b      	lsrs	r3, r3, #1
 8003504:	441a      	add	r2, r3
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	2b0f      	cmp	r3, #15
 8003514:	d910      	bls.n	8003538 <UART_SetConfig+0x5c8>
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351c:	d20c      	bcs.n	8003538 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	b29a      	uxth	r2, r3
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60da      	str	r2, [r3, #12]
 8003528:	e009      	b.n	800353e <UART_SetConfig+0x5ce>
 800352a:	bf00      	nop
 800352c:	40008000 	.word	0x40008000
 8003530:	00f42400 	.word	0x00f42400
 8003534:	08003ca8 	.word	0x08003ca8
      }
      else
      {
        ret = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2201      	movs	r2, #1
 8003542:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2201      	movs	r2, #1
 800354a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2200      	movs	r2, #0
 8003552:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2200      	movs	r2, #0
 8003558:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800355a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800355e:	4618      	mov	r0, r3
 8003560:	3730      	adds	r7, #48	; 0x30
 8003562:	46bd      	mov	sp, r7
 8003564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01a      	beq.n	800367e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003666:	d10a      	bne.n	800367e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	605a      	str	r2, [r3, #4]
  }
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b098      	sub	sp, #96	; 0x60
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036bc:	f7fd fc94 	bl	8000fe8 <HAL_GetTick>
 80036c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d12f      	bne.n	8003730 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d8:	2200      	movs	r2, #0
 80036da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f88e 	bl	8003800 <UART_WaitOnFlagUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d022      	beq.n	8003730 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f2:	e853 3f00 	ldrex	r3, [r3]
 80036f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036fe:	653b      	str	r3, [r7, #80]	; 0x50
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003708:	647b      	str	r3, [r7, #68]	; 0x44
 800370a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800370e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003710:	e841 2300 	strex	r3, r2, [r1]
 8003714:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1e6      	bne.n	80036ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e063      	b.n	80037f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b04      	cmp	r3, #4
 800373c:	d149      	bne.n	80037d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800373e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003746:	2200      	movs	r2, #0
 8003748:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f857 	bl	8003800 <UART_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d03c      	beq.n	80037d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	e853 3f00 	ldrex	r3, [r3]
 8003764:	623b      	str	r3, [r7, #32]
   return(result);
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800376c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003776:	633b      	str	r3, [r7, #48]	; 0x30
 8003778:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800377c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800377e:	e841 2300 	strex	r3, r2, [r1]
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1e6      	bne.n	8003758 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3308      	adds	r3, #8
 8003790:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	e853 3f00 	ldrex	r3, [r3]
 8003798:	60fb      	str	r3, [r7, #12]
   return(result);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f023 0301 	bic.w	r3, r3, #1
 80037a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3308      	adds	r3, #8
 80037a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037aa:	61fa      	str	r2, [r7, #28]
 80037ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ae:	69b9      	ldr	r1, [r7, #24]
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	617b      	str	r3, [r7, #20]
   return(result);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1e5      	bne.n	800378a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e012      	b.n	80037f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3758      	adds	r7, #88	; 0x58
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	4613      	mov	r3, r2
 800380e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003810:	e04f      	b.n	80038b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003818:	d04b      	beq.n	80038b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381a:	f7fd fbe5 	bl	8000fe8 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	429a      	cmp	r2, r3
 8003828:	d302      	bcc.n	8003830 <UART_WaitOnFlagUntilTimeout+0x30>
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e04e      	b.n	80038d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	d037      	beq.n	80038b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b80      	cmp	r3, #128	; 0x80
 8003846:	d034      	beq.n	80038b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b40      	cmp	r3, #64	; 0x40
 800384c:	d031      	beq.n	80038b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b08      	cmp	r3, #8
 800385a:	d110      	bne.n	800387e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2208      	movs	r2, #8
 8003862:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f838 	bl	80038da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2208      	movs	r2, #8
 800386e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e029      	b.n	80038d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800388c:	d111      	bne.n	80038b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003896:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f81e 	bl	80038da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e00f      	b.n	80038d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69da      	ldr	r2, [r3, #28]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	4013      	ands	r3, r2
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	429a      	cmp	r2, r3
 80038c0:	bf0c      	ite	eq
 80038c2:	2301      	moveq	r3, #1
 80038c4:	2300      	movne	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d0a0      	beq.n	8003812 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038da:	b480      	push	{r7}
 80038dc:	b095      	sub	sp, #84	; 0x54
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ea:	e853 3f00 	ldrex	r3, [r3]
 80038ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003900:	643b      	str	r3, [r7, #64]	; 0x40
 8003902:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003904:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003906:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003908:	e841 2300 	strex	r3, r2, [r1]
 800390c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e6      	bne.n	80038e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3308      	adds	r3, #8
 800391a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	e853 3f00 	ldrex	r3, [r3]
 8003922:	61fb      	str	r3, [r7, #28]
   return(result);
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392a:	f023 0301 	bic.w	r3, r3, #1
 800392e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3308      	adds	r3, #8
 8003936:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003938:	62fa      	str	r2, [r7, #44]	; 0x2c
 800393a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800393e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003940:	e841 2300 	strex	r3, r2, [r1]
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e3      	bne.n	8003914 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003950:	2b01      	cmp	r3, #1
 8003952:	d118      	bne.n	8003986 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	60bb      	str	r3, [r7, #8]
   return(result);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f023 0310 	bic.w	r3, r3, #16
 8003968:	647b      	str	r3, [r7, #68]	; 0x44
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	6979      	ldr	r1, [r7, #20]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	613b      	str	r3, [r7, #16]
   return(result);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e6      	bne.n	8003954 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	675a      	str	r2, [r3, #116]	; 0x74
}
 800399a:	bf00      	nop
 800399c:	3754      	adds	r7, #84	; 0x54
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b085      	sub	sp, #20
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_UARTEx_DisableFifoMode+0x16>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e027      	b.n	8003a0c <HAL_UARTEx_DisableFifoMode+0x66>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2224      	movs	r2, #36	; 0x24
 80039c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0201 	bic.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80039ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e02d      	b.n	8003a8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2224      	movs	r2, #36	; 0x24
 8003a3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f84f 	bl	8003b10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e02d      	b.n	8003b08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2224      	movs	r2, #36	; 0x24
 8003ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f811 	bl	8003b10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d108      	bne.n	8003b32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b30:	e031      	b.n	8003b96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b32:	2308      	movs	r3, #8
 8003b34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b36:	2308      	movs	r3, #8
 8003b38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	0e5b      	lsrs	r3, r3, #25
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	0f5b      	lsrs	r3, r3, #29
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b5a:	7bbb      	ldrb	r3, [r7, #14]
 8003b5c:	7b3a      	ldrb	r2, [r7, #12]
 8003b5e:	4911      	ldr	r1, [pc, #68]	; (8003ba4 <UARTEx_SetNbDataToProcess+0x94>)
 8003b60:	5c8a      	ldrb	r2, [r1, r2]
 8003b62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b66:	7b3a      	ldrb	r2, [r7, #12]
 8003b68:	490f      	ldr	r1, [pc, #60]	; (8003ba8 <UARTEx_SetNbDataToProcess+0x98>)
 8003b6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	7b7a      	ldrb	r2, [r7, #13]
 8003b7c:	4909      	ldr	r1, [pc, #36]	; (8003ba4 <UARTEx_SetNbDataToProcess+0x94>)
 8003b7e:	5c8a      	ldrb	r2, [r1, r2]
 8003b80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b84:	7b7a      	ldrb	r2, [r7, #13]
 8003b86:	4908      	ldr	r1, [pc, #32]	; (8003ba8 <UARTEx_SetNbDataToProcess+0x98>)
 8003b88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003b96:	bf00      	nop
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	08003cc0 	.word	0x08003cc0
 8003ba8:	08003cc8 	.word	0x08003cc8

08003bac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003bb4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003bb8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	4013      	ands	r3, r2
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b085      	sub	sp, #20
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	1d3b      	adds	r3, r7, #4
 8003bec:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <memset>:
 8003c1e:	4402      	add	r2, r0
 8003c20:	4603      	mov	r3, r0
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d100      	bne.n	8003c28 <memset+0xa>
 8003c26:	4770      	bx	lr
 8003c28:	f803 1b01 	strb.w	r1, [r3], #1
 8003c2c:	e7f9      	b.n	8003c22 <memset+0x4>
	...

08003c30 <__libc_init_array>:
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	4d0d      	ldr	r5, [pc, #52]	; (8003c68 <__libc_init_array+0x38>)
 8003c34:	4c0d      	ldr	r4, [pc, #52]	; (8003c6c <__libc_init_array+0x3c>)
 8003c36:	1b64      	subs	r4, r4, r5
 8003c38:	10a4      	asrs	r4, r4, #2
 8003c3a:	2600      	movs	r6, #0
 8003c3c:	42a6      	cmp	r6, r4
 8003c3e:	d109      	bne.n	8003c54 <__libc_init_array+0x24>
 8003c40:	4d0b      	ldr	r5, [pc, #44]	; (8003c70 <__libc_init_array+0x40>)
 8003c42:	4c0c      	ldr	r4, [pc, #48]	; (8003c74 <__libc_init_array+0x44>)
 8003c44:	f000 f818 	bl	8003c78 <_init>
 8003c48:	1b64      	subs	r4, r4, r5
 8003c4a:	10a4      	asrs	r4, r4, #2
 8003c4c:	2600      	movs	r6, #0
 8003c4e:	42a6      	cmp	r6, r4
 8003c50:	d105      	bne.n	8003c5e <__libc_init_array+0x2e>
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c58:	4798      	blx	r3
 8003c5a:	3601      	adds	r6, #1
 8003c5c:	e7ee      	b.n	8003c3c <__libc_init_array+0xc>
 8003c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c62:	4798      	blx	r3
 8003c64:	3601      	adds	r6, #1
 8003c66:	e7f2      	b.n	8003c4e <__libc_init_array+0x1e>
 8003c68:	08003cd8 	.word	0x08003cd8
 8003c6c:	08003cd8 	.word	0x08003cd8
 8003c70:	08003cd8 	.word	0x08003cd8
 8003c74:	08003cdc 	.word	0x08003cdc

08003c78 <_init>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	bf00      	nop
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr

08003c84 <_fini>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	bf00      	nop
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr
