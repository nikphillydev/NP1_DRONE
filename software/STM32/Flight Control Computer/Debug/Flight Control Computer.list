
Flight Control Computer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a18  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000944  08014bf8  08014bf8  00024bf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801553c  0801553c  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  0801553c  0801553c  0002553c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015544  08015544  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015544  08015544  00025544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015548  08015548  00025548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0801554c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005790  20000350  0801589c  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005ae0  0801589c  00035ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
 13 .debug_info   000335b7  00000000  00000000  000303c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006ea5  00000000  00000000  0006397a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000027b0  00000000  00000000  0006a820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e86  00000000  00000000  0006cfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030c98  00000000  00000000  0006ee56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000332b0  00000000  00000000  0009faee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00118f6f  00000000  00000000  000d2d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ba2c  00000000  00000000  001ebd10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001f773c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014be0 	.word	0x08014be0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	08014be0 	.word	0x08014be0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <BMI088_Init>:
 *
 */

uint8_t BMI088_Init(BMI088* imu, SPI_HandleTypeDef* spi_handle, osMutexId_t* spi_mutex, GPIO_TypeDef* acc_cs_port, GPIO_TypeDef* gyro_cs_port,
		uint16_t acc_cs_pin, uint16_t gyro_cs_pin, uint16_t acc_irq_pin, uint16_t gyro_irq_pin)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	603b      	str	r3, [r7, #0]
	imu->spi_handle = spi_handle;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	601a      	str	r2, [r3, #0]
	imu->spi_mutex = spi_mutex;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	605a      	str	r2, [r3, #4]
	imu->acc_cs_port = acc_cs_port;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	609a      	str	r2, [r3, #8]
	imu->gyro_cs_port = gyro_cs_port;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6a3a      	ldr	r2, [r7, #32]
 8000f18:	60da      	str	r2, [r3, #12]
	imu->acc_cs_pin = acc_cs_pin;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f1e:	821a      	strh	r2, [r3, #16]
	imu->gyro_cs_pin = gyro_cs_pin;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000f24:	825a      	strh	r2, [r3, #18]
	imu->acc_irq_pin = acc_irq_pin;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000f2a:	829a      	strh	r2, [r3, #20]
	imu->gyro_irq_pin = gyro_irq_pin;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000f30:	82da      	strh	r2, [r3, #22]
	imu->accel_x = 0.0;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
	imu->accel_y = 0.0;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
	imu->accel_z = 0.0;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	621a      	str	r2, [r3, #32]
	imu->rate_x = 0.0;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
	imu->rate_y = 0.0;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f04f 0200 	mov.w	r2, #0
 8000f58:	629a      	str	r2, [r3, #40]	; 0x28
	imu->rate_z = 0.0;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	62da      	str	r2, [r3, #44]	; 0x2c
	imu->temperature = 0.0;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	631a      	str	r2, [r3, #48]	; 0x30
	imu->acc_conversion = 9.80665 / 32768.0f * 2.0f * 1.5f; /* Based on +-3g range */
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4a86      	ldr	r2, [pc, #536]	; (8001188 <BMI088_Init+0x294>)
 8000f6e:	635a      	str	r2, [r3, #52]	; 0x34
	imu->gyro_conversion = M_PI / 180.0f * 500.0f / 32768.0f; /* Based on +-500 deg/s range */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4a86      	ldr	r2, [pc, #536]	; (800118c <BMI088_Init+0x298>)
 8000f74:	639a      	str	r2, [r3, #56]	; 0x38
	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];

	// Perform soft-reset of accelerometer (switch to SPI mode first)
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_RESET);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	6898      	ldr	r0, [r3, #8]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	8a1b      	ldrh	r3, [r3, #16]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4619      	mov	r1, r3
 8000f82:	f002 fe67 	bl	8003c54 <HAL_GPIO_WritePin>
	osDelay(10);
 8000f86:	200a      	movs	r0, #10
 8000f88:	f00c faa9 	bl	800d4de <osDelay>
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_SET);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6898      	ldr	r0, [r3, #8]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	8a1b      	ldrh	r3, [r3, #16]
 8000f94:	2201      	movs	r2, #1
 8000f96:	4619      	mov	r1, r3
 8000f98:	f002 fe5c 	bl	8003c54 <HAL_GPIO_WritePin>
	osDelay(10);
 8000f9c:	200a      	movs	r0, #10
 8000f9e:	f00c fa9e 	bl	800d4de <osDelay>
	tx_data[0] = 0xB6;
 8000fa2:	23b6      	movs	r3, #182	; 0xb6
 8000fa4:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, ACC_SOFTRESET, tx_data, 1);
 8000fa6:	f107 0214 	add.w	r2, r7, #20
 8000faa:	2301      	movs	r3, #1
 8000fac:	217e      	movs	r1, #126	; 0x7e
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f000 fb28 	bl	8001604 <BMI088_WriteAccRegister>
	osDelay(10);
 8000fb4:	200a      	movs	r0, #10
 8000fb6:	f00c fa92 	bl	800d4de <osDelay>

	// Perform soft-reset of gyroscope
	tx_data[0] = 0xB6;
 8000fba:	23b6      	movs	r3, #182	; 0xb6
 8000fbc:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, GYRO_SOFTRESET, tx_data, 1);
 8000fbe:	f107 0214 	add.w	r2, r7, #20
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	2114      	movs	r1, #20
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f000 fc76 	bl	80018b8 <BMI088_WriteGyroRegister>
	osDelay(10);
 8000fcc:	200a      	movs	r0, #10
 8000fce:	f00c fa86 	bl	800d4de <osDelay>
	/*
	 * ACCELEROMETER SETUP
	 */

	// Accelerometer requires rising edge on CS pin to switch to SPI mode
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_RESET);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6898      	ldr	r0, [r3, #8]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	8a1b      	ldrh	r3, [r3, #16]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f002 fe39 	bl	8003c54 <HAL_GPIO_WritePin>
	osDelay(10);
 8000fe2:	200a      	movs	r0, #10
 8000fe4:	f00c fa7b 	bl	800d4de <osDelay>
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_SET);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6898      	ldr	r0, [r3, #8]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	8a1b      	ldrh	r3, [r3, #16]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f002 fe2e 	bl	8003c54 <HAL_GPIO_WritePin>
	osDelay(10);
 8000ff8:	200a      	movs	r0, #10
 8000ffa:	f00c fa70 	bl	800d4de <osDelay>

	// Check accelerometer chip ID
	rx_data[0] = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	743b      	strb	r3, [r7, #16]
	BMI088_ReadAccRegister(imu, ACC_CHIP_ID, rx_data, 1);
 8001002:	f107 0210 	add.w	r2, r7, #16
 8001006:	2301      	movs	r3, #1
 8001008:	2100      	movs	r1, #0
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f000 fa2c 	bl	8001468 <BMI088_ReadAccRegister>
	if (rx_data[0] == 0x1E)
 8001010:	7c3b      	ldrb	r3, [r7, #16]
 8001012:	2b1e      	cmp	r3, #30
 8001014:	d15f      	bne.n	80010d6 <BMI088_Init+0x1e2>
	{
		USB_Log("Found BMI088 accelerometer, starting initialization.", INFO);
 8001016:	2100      	movs	r1, #0
 8001018:	485d      	ldr	r0, [pc, #372]	; (8001190 <BMI088_Init+0x29c>)
 800101a:	f001 f92b 	bl	8002274 <USB_Log>
	else
	{
		USB_Log("Failed to find BMI088 accelerometer. Initialization failed.", ERR);
		return 0;
	}
	osDelay(10);
 800101e:	200a      	movs	r0, #10
 8001020:	f00c fa5d 	bl	800d4de <osDelay>

	// Set 100Hz ODR, no over-sampling (40Hz BW)
	tx_data[0] = 0xA8;
 8001024:	23a8      	movs	r3, #168	; 0xa8
 8001026:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, ACC_CONF, tx_data, 1);
 8001028:	f107 0214 	add.w	r2, r7, #20
 800102c:	2301      	movs	r3, #1
 800102e:	2140      	movs	r1, #64	; 0x40
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f000 fae7 	bl	8001604 <BMI088_WriteAccRegister>
	osDelay(10);
 8001036:	200a      	movs	r0, #10
 8001038:	f00c fa51 	bl	800d4de <osDelay>

	// Set +-3g range (10920 LSB/g)
	tx_data[0] = 0x00;
 800103c:	2300      	movs	r3, #0
 800103e:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, ACC_RANGE, tx_data, 1);
 8001040:	f107 0214 	add.w	r2, r7, #20
 8001044:	2301      	movs	r3, #1
 8001046:	2141      	movs	r1, #65	; 0x41
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f000 fadb 	bl	8001604 <BMI088_WriteAccRegister>
	osDelay(10);
 800104e:	200a      	movs	r0, #10
 8001050:	f00c fa45 	bl	800d4de <osDelay>

	// Configure INT1 (output, push-pull, active high)
	tx_data[0] = 0x0A;
 8001054:	230a      	movs	r3, #10
 8001056:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, INT1_IO_CTRL, tx_data, 1);
 8001058:	f107 0214 	add.w	r2, r7, #20
 800105c:	2301      	movs	r3, #1
 800105e:	2153      	movs	r1, #83	; 0x53
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f000 facf 	bl	8001604 <BMI088_WriteAccRegister>
	osDelay(10);
 8001066:	200a      	movs	r0, #10
 8001068:	f00c fa39 	bl	800d4de <osDelay>

	// Map accelerometer data ready interrupt to INT1
	tx_data[0] = 0x04;
 800106c:	2304      	movs	r3, #4
 800106e:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, INT_MAP_DATA, tx_data, 1);
 8001070:	f107 0214 	add.w	r2, r7, #20
 8001074:	2301      	movs	r3, #1
 8001076:	2158      	movs	r1, #88	; 0x58
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f000 fac3 	bl	8001604 <BMI088_WriteAccRegister>
	osDelay(10);
 800107e:	200a      	movs	r0, #10
 8001080:	f00c fa2d 	bl	800d4de <osDelay>

	// Switch accelerometer into active mode (enable data acquisition)
	tx_data[0] = 0x00;
 8001084:	2300      	movs	r3, #0
 8001086:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, ACC_PWR_CONF, tx_data, 1);
 8001088:	f107 0214 	add.w	r2, r7, #20
 800108c:	2301      	movs	r3, #1
 800108e:	217c      	movs	r1, #124	; 0x7c
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f000 fab7 	bl	8001604 <BMI088_WriteAccRegister>
	osDelay(10);
 8001096:	200a      	movs	r0, #10
 8001098:	f00c fa21 	bl	800d4de <osDelay>

	// Turn accelerometer ON
	tx_data[0] = 0x04;
 800109c:	2304      	movs	r3, #4
 800109e:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, ACC_PWR_CTRL, tx_data, 1);
 80010a0:	f107 0214 	add.w	r2, r7, #20
 80010a4:	2301      	movs	r3, #1
 80010a6:	217d      	movs	r1, #125	; 0x7d
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f000 faab 	bl	8001604 <BMI088_WriteAccRegister>
	osDelay(10);
 80010ae:	200a      	movs	r0, #10
 80010b0:	f00c fa15 	bl	800d4de <osDelay>

	USB_Log("BMI088 accelerometer initialized OK.", INFO);
 80010b4:	2100      	movs	r1, #0
 80010b6:	4837      	ldr	r0, [pc, #220]	; (8001194 <BMI088_Init+0x2a0>)
 80010b8:	f001 f8dc 	bl	8002274 <USB_Log>
	/*
	 * GYROSCOPE SETUP
	 */

	// Check gyroscope chip ID
	rx_data[0] = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	743b      	strb	r3, [r7, #16]
	BMI088_ReadGyroRegister(imu, GYRO_CHIP_ID, rx_data, 1);
 80010c0:	f107 0210 	add.w	r2, r7, #16
 80010c4:	2301      	movs	r3, #1
 80010c6:	2100      	movs	r1, #0
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 fb27 	bl	800171c <BMI088_ReadGyroRegister>
	if (rx_data[0] == 0x0F)
 80010ce:	7c3b      	ldrb	r3, [r7, #16]
 80010d0:	2b0f      	cmp	r3, #15
 80010d2:	d14f      	bne.n	8001174 <BMI088_Init+0x280>
 80010d4:	e005      	b.n	80010e2 <BMI088_Init+0x1ee>
		USB_Log("Failed to find BMI088 accelerometer. Initialization failed.", ERR);
 80010d6:	2102      	movs	r1, #2
 80010d8:	482f      	ldr	r0, [pc, #188]	; (8001198 <BMI088_Init+0x2a4>)
 80010da:	f001 f8cb 	bl	8002274 <USB_Log>
		return 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	e04d      	b.n	800117e <BMI088_Init+0x28a>
	{
		USB_Log("Found BMI088 gyroscope, starting initialization.", INFO);
 80010e2:	2100      	movs	r1, #0
 80010e4:	482d      	ldr	r0, [pc, #180]	; (800119c <BMI088_Init+0x2a8>)
 80010e6:	f001 f8c5 	bl	8002274 <USB_Log>
	else
	{
		USB_Log("Failed to find BMI088 gyroscope. Initialization failed.", ERR);
		return 0;
	}
	osDelay(10);
 80010ea:	200a      	movs	r0, #10
 80010ec:	f00c f9f7 	bl	800d4de <osDelay>

	// Set 100Hz ODR (32Hz BW)
	tx_data[0] = 0x07;
 80010f0:	2307      	movs	r3, #7
 80010f2:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, GYRO_BANDWIDTH, tx_data, 1);
 80010f4:	f107 0214 	add.w	r2, r7, #20
 80010f8:	2301      	movs	r3, #1
 80010fa:	2110      	movs	r1, #16
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f000 fbdb 	bl	80018b8 <BMI088_WriteGyroRegister>
	osDelay(10);
 8001102:	200a      	movs	r0, #10
 8001104:	f00c f9eb 	bl	800d4de <osDelay>

	// Set +-500 deg/s range (65.536 LSB/deg/s)
	tx_data[0] = 0x02;
 8001108:	2302      	movs	r3, #2
 800110a:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, GYRO_RANGE, tx_data, 1);
 800110c:	f107 0214 	add.w	r2, r7, #20
 8001110:	2301      	movs	r3, #1
 8001112:	210f      	movs	r1, #15
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f000 fbcf 	bl	80018b8 <BMI088_WriteGyroRegister>
	osDelay(10);
 800111a:	200a      	movs	r0, #10
 800111c:	f00c f9df 	bl	800d4de <osDelay>

	// Configure INT3 (push-pull, active high)
	tx_data[0] = 0x01;
 8001120:	2301      	movs	r3, #1
 8001122:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, INT3_INT4_IO_CONF, tx_data, 1);
 8001124:	f107 0214 	add.w	r2, r7, #20
 8001128:	2301      	movs	r3, #1
 800112a:	2116      	movs	r1, #22
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f000 fbc3 	bl	80018b8 <BMI088_WriteGyroRegister>
	osDelay(10);
 8001132:	200a      	movs	r0, #10
 8001134:	f00c f9d3 	bl	800d4de <osDelay>

	// Map gyroscope data ready interrupt to INT3
	tx_data[0] = 0x01;
 8001138:	2301      	movs	r3, #1
 800113a:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, INT3_INT4_IO_MAP, tx_data, 1);
 800113c:	f107 0214 	add.w	r2, r7, #20
 8001140:	2301      	movs	r3, #1
 8001142:	2118      	movs	r1, #24
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f000 fbb7 	bl	80018b8 <BMI088_WriteGyroRegister>
	osDelay(10);
 800114a:	200a      	movs	r0, #10
 800114c:	f00c f9c7 	bl	800d4de <osDelay>

	// Enable gyroscope new data interrupt
	tx_data[0] = 0x80;
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, GYRO_INT_CTRL, tx_data, 1);
 8001154:	f107 0214 	add.w	r2, r7, #20
 8001158:	2301      	movs	r3, #1
 800115a:	2115      	movs	r1, #21
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f000 fbab 	bl	80018b8 <BMI088_WriteGyroRegister>
	osDelay(10);
 8001162:	200a      	movs	r0, #10
 8001164:	f00c f9bb 	bl	800d4de <osDelay>

	USB_Log("BMI088 gyroscope initialized OK.", INFO);
 8001168:	2100      	movs	r1, #0
 800116a:	480d      	ldr	r0, [pc, #52]	; (80011a0 <BMI088_Init+0x2ac>)
 800116c:	f001 f882 	bl	8002274 <USB_Log>

	return 1;
 8001170:	2301      	movs	r3, #1
 8001172:	e004      	b.n	800117e <BMI088_Init+0x28a>
		USB_Log("Failed to find BMI088 gyroscope. Initialization failed.", ERR);
 8001174:	2102      	movs	r1, #2
 8001176:	480b      	ldr	r0, [pc, #44]	; (80011a4 <BMI088_Init+0x2b0>)
 8001178:	f001 f87c 	bl	8002274 <USB_Log>
		return 0;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	3a6b5c0f 	.word	0x3a6b5c0f
 800118c:	398ba058 	.word	0x398ba058
 8001190:	08014bf8 	.word	0x08014bf8
 8001194:	08014c6c 	.word	0x08014c6c
 8001198:	08014c30 	.word	0x08014c30
 800119c:	08014c94 	.word	0x08014c94
 80011a0:	08014d00 	.word	0x08014d00
 80011a4:	08014cc8 	.word	0x08014cc8

080011a8 <BMI088_ReadAccData>:

uint8_t BMI088_ReadAccData(BMI088* imu)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	// Read raw accelerometer data
	uint8_t rx_data[6];
	uint8_t status = BMI088_ReadAccRegister(imu, ACC_X_LSB, rx_data, sizeof(rx_data));
 80011b0:	f107 0208 	add.w	r2, r7, #8
 80011b4:	2306      	movs	r3, #6
 80011b6:	2112      	movs	r1, #18
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f955 	bl	8001468 <BMI088_ReadAccRegister>
 80011be:	4603      	mov	r3, r0
 80011c0:	75fb      	strb	r3, [r7, #23]

	if (status)
 80011c2:	7dfb      	ldrb	r3, [r7, #23]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d045      	beq.n	8001254 <BMI088_ReadAccData+0xac>
	{
		// Convert raw data into engineering units
		int16_t accel_x_int16 = (rx_data[1] << 8) | rx_data[0];
 80011c8:	7a7b      	ldrb	r3, [r7, #9]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	7a3b      	ldrb	r3, [r7, #8]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	82bb      	strh	r3, [r7, #20]
		int16_t accel_y_int16 = (rx_data[3] << 8) | rx_data[2];
 80011d6:	7afb      	ldrb	r3, [r7, #11]
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	b21a      	sxth	r2, r3
 80011dc:	7abb      	ldrb	r3, [r7, #10]
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	827b      	strh	r3, [r7, #18]
		int16_t accel_z_int16 = (rx_data[5] << 8) | rx_data[4];
 80011e4:	7b7b      	ldrb	r3, [r7, #13]
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	7b3b      	ldrb	r3, [r7, #12]
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	823b      	strh	r3, [r7, #16]

		imu->accel_x = accel_x_int16 * imu->acc_conversion;
 80011f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	edc3 7a06 	vstr	s15, [r3, #24]
		imu->accel_y = accel_y_int16 * imu->acc_conversion;
 800120e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	edc3 7a07 	vstr	s15, [r3, #28]
		imu->accel_z = accel_z_int16 * imu->acc_conversion;
 800122a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800122e:	ee07 3a90 	vmov	s15, r3
 8001232:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800123c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	edc3 7a08 	vstr	s15, [r3, #32]

		// Clear data ready interrupt
		BMI088_ReadAccRegister(imu, ACC_INT_STAT_1, rx_data, 1);
 8001246:	f107 0208 	add.w	r2, r7, #8
 800124a:	2301      	movs	r3, #1
 800124c:	211d      	movs	r1, #29
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 f90a 	bl	8001468 <BMI088_ReadAccRegister>
	}

	return status;
 8001254:	7dfb      	ldrb	r3, [r7, #23]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <BMI088_ReadGyroData>:

uint8_t BMI088_ReadGyroData(BMI088* imu)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
	// Read raw gyroscope data
	uint8_t rx_data[6];
	uint8_t status = BMI088_ReadGyroRegister(imu, RATE_X_LSB, rx_data, sizeof(rx_data));
 8001266:	f107 0208 	add.w	r2, r7, #8
 800126a:	2306      	movs	r3, #6
 800126c:	2102      	movs	r1, #2
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 fa54 	bl	800171c <BMI088_ReadGyroRegister>
 8001274:	4603      	mov	r3, r0
 8001276:	75fb      	strb	r3, [r7, #23]

	if (status)
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d03e      	beq.n	80012fc <BMI088_ReadGyroData+0x9e>
	{
		// Convert raw data into engineering units
		int16_t rate_x_int16 = (rx_data[1] << 8) | rx_data[0];
 800127e:	7a7b      	ldrb	r3, [r7, #9]
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	b21a      	sxth	r2, r3
 8001284:	7a3b      	ldrb	r3, [r7, #8]
 8001286:	b21b      	sxth	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	82bb      	strh	r3, [r7, #20]
		int16_t rate_y_int16 = (rx_data[3] << 8) | rx_data[2];
 800128c:	7afb      	ldrb	r3, [r7, #11]
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	b21a      	sxth	r2, r3
 8001292:	7abb      	ldrb	r3, [r7, #10]
 8001294:	b21b      	sxth	r3, r3
 8001296:	4313      	orrs	r3, r2
 8001298:	827b      	strh	r3, [r7, #18]
		int16_t rate_z_int16 = (rx_data[5] << 8) | rx_data[4];
 800129a:	7b7b      	ldrb	r3, [r7, #13]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b21a      	sxth	r2, r3
 80012a0:	7b3b      	ldrb	r3, [r7, #12]
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	823b      	strh	r3, [r7, #16]

		imu->rate_x = rate_x_int16 * imu->gyro_conversion;
 80012a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80012ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		imu->rate_y = rate_y_int16 * imu->gyro_conversion;
 80012c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80012d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		imu->rate_z = rate_z_int16 * imu->gyro_conversion;
 80012e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80012f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

		// Interrupt cleared automatically after 280-400us
	}

	return status;
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <BMI088_ReadTempData>:

uint8_t BMI088_ReadTempData(BMI088* imu)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b084      	sub	sp, #16
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
	// Read raw temperature data
	uint8_t rx_data[2];
	uint8_t status = BMI088_ReadAccRegister(imu, TEMP_MSB, rx_data, sizeof(rx_data));
 800130e:	f107 0208 	add.w	r2, r7, #8
 8001312:	2302      	movs	r3, #2
 8001314:	2122      	movs	r1, #34	; 0x22
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 f8a6 	bl	8001468 <BMI088_ReadAccRegister>
 800131c:	4603      	mov	r3, r0
 800131e:	737b      	strb	r3, [r7, #13]

	if (status)
 8001320:	7b7b      	ldrb	r3, [r7, #13]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d028      	beq.n	8001378 <BMI088_ReadTempData+0x72>
	{
		// Convert raw data into engineering units
		uint16_t temp_uint11 = (rx_data[0] << 3) | (rx_data[1] >> 5);
 8001326:	7a3b      	ldrb	r3, [r7, #8]
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	b21a      	sxth	r2, r3
 800132c:	7a7b      	ldrb	r3, [r7, #9]
 800132e:	095b      	lsrs	r3, r3, #5
 8001330:	b2db      	uxtb	r3, r3
 8001332:	b21b      	sxth	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b21b      	sxth	r3, r3
 8001338:	817b      	strh	r3, [r7, #10]
		int16_t temp_int11 = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	81fb      	strh	r3, [r7, #14]
		if (temp_uint11 > 1023)
 800133e:	897b      	ldrh	r3, [r7, #10]
 8001340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001344:	d305      	bcc.n	8001352 <BMI088_ReadTempData+0x4c>
		{
			temp_int11 = temp_uint11 - 2048;
 8001346:	897b      	ldrh	r3, [r7, #10]
 8001348:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800134c:	b29b      	uxth	r3, r3
 800134e:	81fb      	strh	r3, [r7, #14]
 8001350:	e001      	b.n	8001356 <BMI088_ReadTempData+0x50>
		}
		else
		{
			temp_int11 = temp_uint11;
 8001352:	897b      	ldrh	r3, [r7, #10]
 8001354:	81fb      	strh	r3, [r7, #14]
		}
		imu->temperature = temp_int11 * 0.125f + 23.0f;
 8001356:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001362:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8001366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136a:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 800136e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	}

	return status;
 8001378:	7b7b      	ldrb	r3, [r7, #13]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <BMI088_LogAccData>:

uint8_t BMI088_LogAccData(BMI088* imu)
{
 8001384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001388:	b0aa      	sub	sp, #168	; 0xa8
 800138a:	af08      	add	r7, sp, #32
 800138c:	6078      	str	r0, [r7, #4]
	char string[128];
	snprintf(string, 128, "ACC %.2f %.2f %.2f %.2f", imu->accel_x, imu->accel_y, imu->accel_z, imu->temperature);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f900 	bl	8000598 <__aeabi_f2d>
 8001398:	4604      	mov	r4, r0
 800139a:	460d      	mov	r5, r1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f8f9 	bl	8000598 <__aeabi_f2d>
 80013a6:	4680      	mov	r8, r0
 80013a8:	4689      	mov	r9, r1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8f2 	bl	8000598 <__aeabi_f2d>
 80013b4:	4682      	mov	sl, r0
 80013b6:	468b      	mov	fp, r1
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f8eb 	bl	8000598 <__aeabi_f2d>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	f107 0008 	add.w	r0, r7, #8
 80013ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80013ce:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80013d2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80013d6:	e9cd 4500 	strd	r4, r5, [sp]
 80013da:	4a08      	ldr	r2, [pc, #32]	; (80013fc <BMI088_LogAccData+0x78>)
 80013dc:	2180      	movs	r1, #128	; 0x80
 80013de:	f010 fe77 	bl	80120d0 <sniprintf>
	return USB_Log(string, SENSOR);
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	2103      	movs	r1, #3
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 ff43 	bl	8002274 <USB_Log>
 80013ee:	4603      	mov	r3, r0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3788      	adds	r7, #136	; 0x88
 80013f4:	46bd      	mov	sp, r7
 80013f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013fa:	bf00      	nop
 80013fc:	08014d24 	.word	0x08014d24

08001400 <BMI088_LogGyroData>:

uint8_t BMI088_LogGyroData(BMI088* imu)
{
 8001400:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001404:	b0a8      	sub	sp, #160	; 0xa0
 8001406:	af06      	add	r7, sp, #24
 8001408:	6078      	str	r0, [r7, #4]
	char string[128];
	snprintf(string, 128, "GYRO %.2f %.2f %.2f", imu->rate_x, imu->rate_y, imu->rate_z);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f8c2 	bl	8000598 <__aeabi_f2d>
 8001414:	4604      	mov	r4, r0
 8001416:	460d      	mov	r5, r1
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f8bb 	bl	8000598 <__aeabi_f2d>
 8001422:	4680      	mov	r8, r0
 8001424:	4689      	mov	r9, r1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f8b4 	bl	8000598 <__aeabi_f2d>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	f107 0008 	add.w	r0, r7, #8
 8001438:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800143c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001440:	e9cd 4500 	strd	r4, r5, [sp]
 8001444:	4a07      	ldr	r2, [pc, #28]	; (8001464 <BMI088_LogGyroData+0x64>)
 8001446:	2180      	movs	r1, #128	; 0x80
 8001448:	f010 fe42 	bl	80120d0 <sniprintf>
	return USB_Log(string, SENSOR);
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	2103      	movs	r1, #3
 8001452:	4618      	mov	r0, r3
 8001454:	f000 ff0e 	bl	8002274 <USB_Log>
 8001458:	4603      	mov	r3, r0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3788      	adds	r7, #136	; 0x88
 800145e:	46bd      	mov	sp, r7
 8001460:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001464:	08014d3c 	.word	0x08014d3c

08001468 <BMI088_ReadAccRegister>:
 * BMI088 LOW-LEVEL REGISTER FUNCTIONS
 *
 */

uint8_t BMI088_ReadAccRegister(BMI088* imu, uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 8001468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800146c:	b091      	sub	sp, #68	; 0x44
 800146e:	af02      	add	r7, sp, #8
 8001470:	6178      	str	r0, [r7, #20]
 8001472:	60fa      	str	r2, [r7, #12]
 8001474:	461a      	mov	r2, r3
 8001476:	460b      	mov	r3, r1
 8001478:	74fb      	strb	r3, [r7, #19]
 800147a:	4613      	mov	r3, r2
 800147c:	823b      	strh	r3, [r7, #16]
 800147e:	466b      	mov	r3, sp
 8001480:	461e      	mov	r6, r3
	uint16_t num_bytes = data_len + 2;
 8001482:	8a3b      	ldrh	r3, [r7, #16]
 8001484:	3302      	adds	r3, #2
 8001486:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint8_t tx_buffer[num_bytes];
 8001488:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800148a:	460b      	mov	r3, r1
 800148c:	3b01      	subs	r3, #1
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001490:	b28b      	uxth	r3, r1
 8001492:	2200      	movs	r2, #0
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	00c3      	lsls	r3, r0, #3
 80014a4:	6838      	ldr	r0, [r7, #0]
 80014a6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80014aa:	6838      	ldr	r0, [r7, #0]
 80014ac:	00c2      	lsls	r2, r0, #3
 80014ae:	b28b      	uxth	r3, r1
 80014b0:	2200      	movs	r2, #0
 80014b2:	469a      	mov	sl, r3
 80014b4:	4693      	mov	fp, r2
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80014c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80014c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80014ca:	460b      	mov	r3, r1
 80014cc:	3307      	adds	r3, #7
 80014ce:	08db      	lsrs	r3, r3, #3
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	ebad 0d03 	sub.w	sp, sp, r3
 80014d6:	ab02      	add	r3, sp, #8
 80014d8:	3300      	adds	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t rx_buffer[num_bytes];
 80014dc:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80014de:	460b      	mov	r3, r1
 80014e0:	3b01      	subs	r3, #1
 80014e2:	623b      	str	r3, [r7, #32]
 80014e4:	b28b      	uxth	r3, r1
 80014e6:	2200      	movs	r2, #0
 80014e8:	4698      	mov	r8, r3
 80014ea:	4691      	mov	r9, r2
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001500:	b28b      	uxth	r3, r1
 8001502:	2200      	movs	r2, #0
 8001504:	461c      	mov	r4, r3
 8001506:	4615      	mov	r5, r2
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	00eb      	lsls	r3, r5, #3
 8001512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001516:	00e2      	lsls	r2, r4, #3
 8001518:	460b      	mov	r3, r1
 800151a:	3307      	adds	r3, #7
 800151c:	08db      	lsrs	r3, r3, #3
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	ebad 0d03 	sub.w	sp, sp, r3
 8001524:	ab02      	add	r3, sp, #8
 8001526:	3300      	adds	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < num_bytes; i++)
 800152a:	2300      	movs	r3, #0
 800152c:	637b      	str	r3, [r7, #52]	; 0x34
 800152e:	e00c      	b.n	800154a <BMI088_ReadAccRegister+0xe2>
	{
		tx_buffer[i] = 0;
 8001530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001534:	4413      	add	r3, r2
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = 0;
 800153a:	69fa      	ldr	r2, [r7, #28]
 800153c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153e:	4413      	add	r3, r2
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_bytes; i++)
 8001544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001546:	3301      	adds	r3, #1
 8001548:	637b      	str	r3, [r7, #52]	; 0x34
 800154a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800154c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800154e:	429a      	cmp	r2, r3
 8001550:	dbee      	blt.n	8001530 <BMI088_ReadAccRegister+0xc8>
	}

	tx_buffer[0] = 0x80 | reg_addr;	// Read operation
 8001552:	7cfb      	ldrb	r3, [r7, #19]
 8001554:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001558:	b2da      	uxtb	r2, r3
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	701a      	strb	r2, [r3, #0]

	osMutexAcquire(*imu->spi_mutex, osWaitForever);
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001568:	4618      	mov	r0, r3
 800156a:	f00c f859 	bl	800d620 <osMutexAcquire>
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_RESET);
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	6898      	ldr	r0, [r3, #8]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	8a1b      	ldrh	r3, [r3, #16]
 8001576:	2200      	movs	r2, #0
 8001578:	4619      	mov	r1, r3
 800157a:	f002 fb6b 	bl	8003c54 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spi_handle, tx_buffer, rx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	6818      	ldr	r0, [r3, #0]
 8001582:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001588:	9200      	str	r2, [sp, #0]
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800158e:	f006 f967 	bl	8007860 <HAL_SPI_TransmitReceive>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf0c      	ite	eq
 8001598:	2301      	moveq	r3, #1
 800159a:	2300      	movne	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	76fb      	strb	r3, [r7, #27]
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_SET);
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	6898      	ldr	r0, [r3, #8]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	8a1b      	ldrh	r3, [r3, #16]
 80015a8:	2201      	movs	r2, #1
 80015aa:	4619      	mov	r1, r3
 80015ac:	f002 fb52 	bl	8003c54 <HAL_GPIO_WritePin>
	osMutexRelease(*imu->spi_mutex);
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f00c f87d 	bl	800d6b6 <osMutexRelease>

	if (status)
 80015bc:	7efb      	ldrb	r3, [r7, #27]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d013      	beq.n	80015ea <BMI088_ReadAccRegister+0x182>
	{
		// The first received byte is a dummy byte (ignore index i=1)
		for (int i = 2; i < num_bytes; i++)
 80015c2:	2302      	movs	r3, #2
 80015c4:	633b      	str	r3, [r7, #48]	; 0x30
 80015c6:	e00b      	b.n	80015e0 <BMI088_ReadAccRegister+0x178>
		{
			rx_data[i - 2] = rx_buffer[i];
 80015c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ca:	3b02      	subs	r3, #2
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	69f9      	ldr	r1, [r7, #28]
 80015d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015d4:	440a      	add	r2, r1
 80015d6:	7812      	ldrb	r2, [r2, #0]
 80015d8:	701a      	strb	r2, [r3, #0]
		for (int i = 2; i < num_bytes; i++)
 80015da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015dc:	3301      	adds	r3, #1
 80015de:	633b      	str	r3, [r7, #48]	; 0x30
 80015e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbef      	blt.n	80015c8 <BMI088_ReadAccRegister+0x160>
 80015e8:	e003      	b.n	80015f2 <BMI088_ReadAccRegister+0x18a>
		}
	}
	else
	{
		USB_Log("BMI088 accelerometer register read failed.\n", ERR);
 80015ea:	2102      	movs	r1, #2
 80015ec:	4804      	ldr	r0, [pc, #16]	; (8001600 <BMI088_ReadAccRegister+0x198>)
 80015ee:	f000 fe41 	bl	8002274 <USB_Log>
	}

	return status;
 80015f2:	7efb      	ldrb	r3, [r7, #27]
 80015f4:	46b5      	mov	sp, r6
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	373c      	adds	r7, #60	; 0x3c
 80015fa:	46bd      	mov	sp, r7
 80015fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001600:	08014d50 	.word	0x08014d50

08001604 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088* imu, uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8001604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001608:	b08b      	sub	sp, #44	; 0x2c
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	461a      	mov	r2, r3
 8001612:	460b      	mov	r3, r1
 8001614:	72fb      	strb	r3, [r7, #11]
 8001616:	4613      	mov	r3, r2
 8001618:	813b      	strh	r3, [r7, #8]
 800161a:	466b      	mov	r3, sp
 800161c:	461e      	mov	r6, r3
	uint16_t num_bytes = data_len + 1;
 800161e:	893b      	ldrh	r3, [r7, #8]
 8001620:	3301      	adds	r3, #1
 8001622:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t tx_buffer[num_bytes];
 8001624:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001626:	460b      	mov	r3, r1
 8001628:	3b01      	subs	r3, #1
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	b28b      	uxth	r3, r1
 800162e:	2200      	movs	r2, #0
 8001630:	4698      	mov	r8, r3
 8001632:	4691      	mov	r9, r2
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001640:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001644:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001648:	b28b      	uxth	r3, r1
 800164a:	2200      	movs	r2, #0
 800164c:	461c      	mov	r4, r3
 800164e:	4615      	mov	r5, r2
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	00eb      	lsls	r3, r5, #3
 800165a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800165e:	00e2      	lsls	r2, r4, #3
 8001660:	460b      	mov	r3, r1
 8001662:	3307      	adds	r3, #7
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	ebad 0d03 	sub.w	sp, sp, r3
 800166c:	466b      	mov	r3, sp
 800166e:	3300      	adds	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]

	tx_buffer[0] = reg_addr;	// Write operation
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	7afa      	ldrb	r2, [r7, #11]
 8001676:	701a      	strb	r2, [r3, #0]

	for (int i = 1; i < num_bytes; i++)
 8001678:	2301      	movs	r3, #1
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
 800167c:	e00c      	b.n	8001698 <BMI088_WriteAccRegister+0x94>
	{
		tx_buffer[i] = tx_data[i - 1];
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	3b01      	subs	r3, #1
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	7819      	ldrb	r1, [r3, #0]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	4413      	add	r3, r2
 800168e:	460a      	mov	r2, r1
 8001690:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	3301      	adds	r3, #1
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
 8001698:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800169a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169c:	429a      	cmp	r2, r3
 800169e:	dbee      	blt.n	800167e <BMI088_WriteAccRegister+0x7a>
	}

	osMutexAcquire(*imu->spi_mutex, osWaitForever);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016aa:	4618      	mov	r0, r3
 80016ac:	f00b ffb8 	bl	800d620 <osMutexAcquire>
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_RESET);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6898      	ldr	r0, [r3, #8]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8a1b      	ldrh	r3, [r3, #16]
 80016b8:	2200      	movs	r2, #0
 80016ba:	4619      	mov	r1, r3
 80016bc:	f002 faca 	bl	8003c54 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spi_handle, tx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ca:	69b9      	ldr	r1, [r7, #24]
 80016cc:	f005 ff53 	bl	8007576 <HAL_SPI_Transmit>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	bf0c      	ite	eq
 80016d6:	2301      	moveq	r3, #1
 80016d8:	2300      	movne	r3, #0
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_SET);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6898      	ldr	r0, [r3, #8]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8a1b      	ldrh	r3, [r3, #16]
 80016e6:	2201      	movs	r2, #1
 80016e8:	4619      	mov	r1, r3
 80016ea:	f002 fab3 	bl	8003c54 <HAL_GPIO_WritePin>
	osMutexRelease(*imu->spi_mutex);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00b ffde 	bl	800d6b6 <osMutexRelease>

	if (!status)
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d103      	bne.n	8001708 <BMI088_WriteAccRegister+0x104>
	{
		USB_Log("BMI088 accelerometer register write failed.\n", ERR);
 8001700:	2102      	movs	r1, #2
 8001702:	4805      	ldr	r0, [pc, #20]	; (8001718 <BMI088_WriteAccRegister+0x114>)
 8001704:	f000 fdb6 	bl	8002274 <USB_Log>
	}

	return status;
 8001708:	7dfb      	ldrb	r3, [r7, #23]
 800170a:	46b5      	mov	sp, r6
}
 800170c:	4618      	mov	r0, r3
 800170e:	372c      	adds	r7, #44	; 0x2c
 8001710:	46bd      	mov	sp, r7
 8001712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001716:	bf00      	nop
 8001718:	08014d7c 	.word	0x08014d7c

0800171c <BMI088_ReadGyroRegister>:

uint8_t BMI088_ReadGyroRegister(BMI088* imu, uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 800171c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001720:	b091      	sub	sp, #68	; 0x44
 8001722:	af02      	add	r7, sp, #8
 8001724:	6178      	str	r0, [r7, #20]
 8001726:	60fa      	str	r2, [r7, #12]
 8001728:	461a      	mov	r2, r3
 800172a:	460b      	mov	r3, r1
 800172c:	74fb      	strb	r3, [r7, #19]
 800172e:	4613      	mov	r3, r2
 8001730:	823b      	strh	r3, [r7, #16]
 8001732:	466b      	mov	r3, sp
 8001734:	461e      	mov	r6, r3
	uint16_t num_bytes = data_len + 1;
 8001736:	8a3b      	ldrh	r3, [r7, #16]
 8001738:	3301      	adds	r3, #1
 800173a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint8_t tx_buffer[num_bytes];
 800173c:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800173e:	460b      	mov	r3, r1
 8001740:	3b01      	subs	r3, #1
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
 8001744:	b28b      	uxth	r3, r1
 8001746:	2200      	movs	r2, #0
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	00c3      	lsls	r3, r0, #3
 8001758:	6838      	ldr	r0, [r7, #0]
 800175a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800175e:	6838      	ldr	r0, [r7, #0]
 8001760:	00c2      	lsls	r2, r0, #3
 8001762:	b28b      	uxth	r3, r1
 8001764:	2200      	movs	r2, #0
 8001766:	469a      	mov	sl, r3
 8001768:	4693      	mov	fp, r2
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001776:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800177a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800177e:	460b      	mov	r3, r1
 8001780:	3307      	adds	r3, #7
 8001782:	08db      	lsrs	r3, r3, #3
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	ebad 0d03 	sub.w	sp, sp, r3
 800178a:	ab02      	add	r3, sp, #8
 800178c:	3300      	adds	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t rx_buffer[num_bytes];
 8001790:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8001792:	460b      	mov	r3, r1
 8001794:	3b01      	subs	r3, #1
 8001796:	623b      	str	r3, [r7, #32]
 8001798:	b28b      	uxth	r3, r1
 800179a:	2200      	movs	r2, #0
 800179c:	4698      	mov	r8, r3
 800179e:	4691      	mov	r9, r2
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017b4:	b28b      	uxth	r3, r1
 80017b6:	2200      	movs	r2, #0
 80017b8:	461c      	mov	r4, r3
 80017ba:	4615      	mov	r5, r2
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	00eb      	lsls	r3, r5, #3
 80017c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017ca:	00e2      	lsls	r2, r4, #3
 80017cc:	460b      	mov	r3, r1
 80017ce:	3307      	adds	r3, #7
 80017d0:	08db      	lsrs	r3, r3, #3
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	ebad 0d03 	sub.w	sp, sp, r3
 80017d8:	ab02      	add	r3, sp, #8
 80017da:	3300      	adds	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < num_bytes; i++)
 80017de:	2300      	movs	r3, #0
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
 80017e2:	e00c      	b.n	80017fe <BMI088_ReadGyroRegister+0xe2>
	{
		tx_buffer[i] = 0;
 80017e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e8:	4413      	add	r3, r2
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = 0;
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f2:	4413      	add	r3, r2
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_bytes; i++)
 80017f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017fa:	3301      	adds	r3, #1
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34
 80017fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001802:	429a      	cmp	r2, r3
 8001804:	dbee      	blt.n	80017e4 <BMI088_ReadGyroRegister+0xc8>
	}

	tx_buffer[0] = 0x80 | reg_addr;	// Read operation
 8001806:	7cfb      	ldrb	r3, [r7, #19]
 8001808:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800180c:	b2da      	uxtb	r2, r3
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	701a      	strb	r2, [r3, #0]

	osMutexAcquire(*imu->spi_mutex, osWaitForever);
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800181c:	4618      	mov	r0, r3
 800181e:	f00b feff 	bl	800d620 <osMutexAcquire>
	HAL_GPIO_WritePin(imu->gyro_cs_port, imu->gyro_cs_pin, GPIO_PIN_RESET);
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	68d8      	ldr	r0, [r3, #12]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	8a5b      	ldrh	r3, [r3, #18]
 800182a:	2200      	movs	r2, #0
 800182c:	4619      	mov	r1, r3
 800182e:	f002 fa11 	bl	8003c54 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spi_handle, tx_buffer, rx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800183c:	9200      	str	r2, [sp, #0]
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001842:	f006 f80d 	bl	8007860 <HAL_SPI_TransmitReceive>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	bf0c      	ite	eq
 800184c:	2301      	moveq	r3, #1
 800184e:	2300      	movne	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	76fb      	strb	r3, [r7, #27]
	HAL_GPIO_WritePin(imu->gyro_cs_port, imu->gyro_cs_pin, GPIO_PIN_SET);
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	68d8      	ldr	r0, [r3, #12]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	8a5b      	ldrh	r3, [r3, #18]
 800185c:	2201      	movs	r2, #1
 800185e:	4619      	mov	r1, r3
 8001860:	f002 f9f8 	bl	8003c54 <HAL_GPIO_WritePin>
	osMutexRelease(*imu->spi_mutex);
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f00b ff23 	bl	800d6b6 <osMutexRelease>

	if (status)
 8001870:	7efb      	ldrb	r3, [r7, #27]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d013      	beq.n	800189e <BMI088_ReadGyroRegister+0x182>
	{
		for (int i = 1; i < num_bytes; i++)
 8001876:	2301      	movs	r3, #1
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
 800187a:	e00b      	b.n	8001894 <BMI088_ReadGyroRegister+0x178>
		{
			rx_data[i - 1] = rx_buffer[i];
 800187c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187e:	3b01      	subs	r3, #1
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	69f9      	ldr	r1, [r7, #28]
 8001886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001888:	440a      	add	r2, r1
 800188a:	7812      	ldrb	r2, [r2, #0]
 800188c:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < num_bytes; i++)
 800188e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001890:	3301      	adds	r3, #1
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
 8001894:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001898:	429a      	cmp	r2, r3
 800189a:	dbef      	blt.n	800187c <BMI088_ReadGyroRegister+0x160>
 800189c:	e003      	b.n	80018a6 <BMI088_ReadGyroRegister+0x18a>
		}
	}
	else
	{
		USB_Log("BMI088 gyroscope register read failed.\n", ERR);
 800189e:	2102      	movs	r1, #2
 80018a0:	4804      	ldr	r0, [pc, #16]	; (80018b4 <BMI088_ReadGyroRegister+0x198>)
 80018a2:	f000 fce7 	bl	8002274 <USB_Log>
	}

	return status;
 80018a6:	7efb      	ldrb	r3, [r7, #27]
 80018a8:	46b5      	mov	sp, r6
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	373c      	adds	r7, #60	; 0x3c
 80018ae:	46bd      	mov	sp, r7
 80018b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018b4:	08014dac 	.word	0x08014dac

080018b8 <BMI088_WriteGyroRegister>:

uint8_t BMI088_WriteGyroRegister(BMI088* imu, uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 80018b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018bc:	b08b      	sub	sp, #44	; 0x2c
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	461a      	mov	r2, r3
 80018c6:	460b      	mov	r3, r1
 80018c8:	72fb      	strb	r3, [r7, #11]
 80018ca:	4613      	mov	r3, r2
 80018cc:	813b      	strh	r3, [r7, #8]
 80018ce:	466b      	mov	r3, sp
 80018d0:	461e      	mov	r6, r3
	uint16_t num_bytes = data_len + 1;
 80018d2:	893b      	ldrh	r3, [r7, #8]
 80018d4:	3301      	adds	r3, #1
 80018d6:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t tx_buffer[num_bytes];
 80018d8:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80018da:	460b      	mov	r3, r1
 80018dc:	3b01      	subs	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	b28b      	uxth	r3, r1
 80018e2:	2200      	movs	r2, #0
 80018e4:	4698      	mov	r8, r3
 80018e6:	4691      	mov	r9, r2
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018fc:	b28b      	uxth	r3, r1
 80018fe:	2200      	movs	r2, #0
 8001900:	461c      	mov	r4, r3
 8001902:	4615      	mov	r5, r2
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	00eb      	lsls	r3, r5, #3
 800190e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001912:	00e2      	lsls	r2, r4, #3
 8001914:	460b      	mov	r3, r1
 8001916:	3307      	adds	r3, #7
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	ebad 0d03 	sub.w	sp, sp, r3
 8001920:	466b      	mov	r3, sp
 8001922:	3300      	adds	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]

	tx_buffer[0] = reg_addr;	// Write operation
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	7afa      	ldrb	r2, [r7, #11]
 800192a:	701a      	strb	r2, [r3, #0]

	for (int i = 1; i < num_bytes; i++)
 800192c:	2301      	movs	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
 8001930:	e00c      	b.n	800194c <BMI088_WriteGyroRegister+0x94>
	{
		tx_buffer[i] = tx_data[i - 1];
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	3b01      	subs	r3, #1
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	7819      	ldrb	r1, [r3, #0]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	4413      	add	r3, r2
 8001942:	460a      	mov	r2, r1
 8001944:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	3301      	adds	r3, #1
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
 800194c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800194e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001950:	429a      	cmp	r2, r3
 8001952:	dbee      	blt.n	8001932 <BMI088_WriteGyroRegister+0x7a>
	}

	osMutexAcquire(*imu->spi_mutex, osWaitForever);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800195e:	4618      	mov	r0, r3
 8001960:	f00b fe5e 	bl	800d620 <osMutexAcquire>
	HAL_GPIO_WritePin(imu->gyro_cs_port, imu->gyro_cs_pin, GPIO_PIN_RESET);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	68d8      	ldr	r0, [r3, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8a5b      	ldrh	r3, [r3, #18]
 800196c:	2200      	movs	r2, #0
 800196e:	4619      	mov	r1, r3
 8001970:	f002 f970 	bl	8003c54 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spi_handle, tx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800197a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800197e:	69b9      	ldr	r1, [r7, #24]
 8001980:	f005 fdf9 	bl	8007576 <HAL_SPI_Transmit>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	bf0c      	ite	eq
 800198a:	2301      	moveq	r3, #1
 800198c:	2300      	movne	r3, #0
 800198e:	b2db      	uxtb	r3, r3
 8001990:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->gyro_cs_port, imu->gyro_cs_pin, GPIO_PIN_SET);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	68d8      	ldr	r0, [r3, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8a5b      	ldrh	r3, [r3, #18]
 800199a:	2201      	movs	r2, #1
 800199c:	4619      	mov	r1, r3
 800199e:	f002 f959 	bl	8003c54 <HAL_GPIO_WritePin>
	osMutexRelease(*imu->spi_mutex);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f00b fe84 	bl	800d6b6 <osMutexRelease>

	if (!status)
 80019ae:	7dfb      	ldrb	r3, [r7, #23]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d103      	bne.n	80019bc <BMI088_WriteGyroRegister+0x104>
	{
		USB_Log("BMI088 gyroscope register write failed.\n", ERR);
 80019b4:	2102      	movs	r1, #2
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <BMI088_WriteGyroRegister+0x114>)
 80019b8:	f000 fc5c 	bl	8002274 <USB_Log>
	}

	return status;
 80019bc:	7dfb      	ldrb	r3, [r7, #23]
 80019be:	46b5      	mov	sp, r6
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	372c      	adds	r7, #44	; 0x2c
 80019c4:	46bd      	mov	sp, r7
 80019c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019ca:	bf00      	nop
 80019cc:	08014dd4 	.word	0x08014dd4

080019d0 <BMP388_Init>:
 *
 * BMP388 INTERFACE
 *
 */
uint8_t BMP388_Init(BMP388* sensor, BMP388_CalibrationData* calib_data, I2C_HandleTypeDef* i2c_handle, osMutexId_t* i2c_mutex, uint16_t irq_pin)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
	sensor->calib_data = calib_data;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	601a      	str	r2, [r3, #0]
	sensor->i2c_handle = i2c_handle;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	605a      	str	r2, [r3, #4]
	sensor->i2c_mutex = i2c_mutex;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	609a      	str	r2, [r3, #8]
	sensor->irq_pin = irq_pin;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8c3a      	ldrh	r2, [r7, #32]
 80019f4:	819a      	strh	r2, [r3, #12]
	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];

	// Check chip ID
	rx_data[0] = 0x00;
 80019f6:	2300      	movs	r3, #0
 80019f8:	743b      	strb	r3, [r7, #16]
	BMP388_ReadRegister(sensor, REG_CHIP_ID, rx_data, 1);
 80019fa:	f107 0210 	add.w	r2, r7, #16
 80019fe:	2301      	movs	r3, #1
 8001a00:	2100      	movs	r1, #0
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 f9f4 	bl	8001df0 <BMP388_ReadRegister>
	if (rx_data[0] == 0x50)
 8001a08:	7c3b      	ldrb	r3, [r7, #16]
 8001a0a:	2b50      	cmp	r3, #80	; 0x50
 8001a0c:	d153      	bne.n	8001ab6 <BMP388_Init+0xe6>
	{
		USB_Log("Found BMP388, starting initialization.", INFO);
 8001a0e:	2100      	movs	r1, #0
 8001a10:	482d      	ldr	r0, [pc, #180]	; (8001ac8 <BMP388_Init+0xf8>)
 8001a12:	f000 fc2f 	bl	8002274 <USB_Log>
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
		return 0;
	}

	// Perform soft-reset of device
	tx_data[0] = 0xB6;
 8001a16:	23b6      	movs	r3, #182	; 0xb6
 8001a18:	753b      	strb	r3, [r7, #20]
	BMP388_WriteRegister(sensor, REG_CMD, tx_data, 1);
 8001a1a:	f107 0214 	add.w	r2, r7, #20
 8001a1e:	2301      	movs	r3, #1
 8001a20:	217e      	movs	r1, #126	; 0x7e
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 fa20 	bl	8001e68 <BMP388_WriteRegister>
	osDelay(10);
 8001a28:	200a      	movs	r0, #10
 8001a2a:	f00b fd58 	bl	800d4de <osDelay>

	// Read, calculate, and store calibration coefficients
	BMP388_ReadCalibrationData(sensor);
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 fa56 	bl	8001ee0 <BMP388_ReadCalibrationData>

	// Set pressure measurement to ultra-high resolution (x16 over-sampling, 20 bit / 0.17 Pa),
	// set temperature measurement to low power (x2 over-sampling, 17 bit / 0.0025 degC)
	tx_data[0] = 0x0C;
 8001a34:	230c      	movs	r3, #12
 8001a36:	753b      	strb	r3, [r7, #20]
	BMP388_WriteRegister(sensor, REG_OSR, tx_data, 1);
 8001a38:	f107 0214 	add.w	r2, r7, #20
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	211c      	movs	r1, #28
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f000 fa11 	bl	8001e68 <BMP388_WriteRegister>
	osDelay(10);
 8001a46:	200a      	movs	r0, #10
 8001a48:	f00b fd49 	bl	800d4de <osDelay>

	// Set 25Hz ODR
	tx_data[0] = 0x03;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	753b      	strb	r3, [r7, #20]
	BMP388_WriteRegister(sensor, REG_ODR, tx_data, 1);
 8001a50:	f107 0214 	add.w	r2, r7, #20
 8001a54:	2301      	movs	r3, #1
 8001a56:	211d      	movs	r1, #29
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 fa05 	bl	8001e68 <BMP388_WriteRegister>
	osDelay(10);
 8001a5e:	200a      	movs	r0, #10
 8001a60:	f00b fd3d 	bl	800d4de <osDelay>

	// Set IIR filter coefficient to 15
	tx_data[0] = 0x04;
 8001a64:	2304      	movs	r3, #4
 8001a66:	753b      	strb	r3, [r7, #20]
	BMP388_WriteRegister(sensor, REG_CONFIG, tx_data, 1);
 8001a68:	f107 0214 	add.w	r2, r7, #20
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	211f      	movs	r1, #31
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 f9f9 	bl	8001e68 <BMP388_WriteRegister>
	osDelay(10);
 8001a76:	200a      	movs	r0, #10
 8001a78:	f00b fd31 	bl	800d4de <osDelay>

	// Compute startup pressure for initial altitude reference
	BMP388_ComputeStartupPressure(sensor);
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 fbbd 	bl	80021fc <BMP388_ComputeStartupPressure>

	// Switch device into normal mode and enable pressure, temperature sensor
	tx_data[0] = 0x33;
 8001a82:	2333      	movs	r3, #51	; 0x33
 8001a84:	753b      	strb	r3, [r7, #20]
	BMP388_WriteRegister(sensor, REG_PWR_CTRL, tx_data, 1);
 8001a86:	f107 0214 	add.w	r2, r7, #20
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	211b      	movs	r1, #27
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 f9ea 	bl	8001e68 <BMP388_WriteRegister>
	osDelay(10);
 8001a94:	200a      	movs	r0, #10
 8001a96:	f00b fd22 	bl	800d4de <osDelay>

	// Enable data ready interrupt (temperature and pressure) and configure INT pin (active high, push-pull)
	tx_data[0] = 0x42;
 8001a9a:	2342      	movs	r3, #66	; 0x42
 8001a9c:	753b      	strb	r3, [r7, #20]
	BMP388_WriteRegister(sensor, REG_INT_CTRL, tx_data, 1);
 8001a9e:	f107 0214 	add.w	r2, r7, #20
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	2119      	movs	r1, #25
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f000 f9de 	bl	8001e68 <BMP388_WriteRegister>
	osDelay(10);
 8001aac:	200a      	movs	r0, #10
 8001aae:	f00b fd16 	bl	800d4de <osDelay>

	return 1;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e004      	b.n	8001ac0 <BMP388_Init+0xf0>
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
 8001ab6:	2102      	movs	r1, #2
 8001ab8:	4804      	ldr	r0, [pc, #16]	; (8001acc <BMP388_Init+0xfc>)
 8001aba:	f000 fbdb 	bl	8002274 <USB_Log>
		return 0;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	08014e00 	.word	0x08014e00
 8001acc:	08014e28 	.word	0x08014e28

08001ad0 <BMP388_ReadData>:

uint8_t BMP388_ReadData(BMP388* sensor)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08e      	sub	sp, #56	; 0x38
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	// Compute compensated temperature

	uint8_t rx_temp_data[3];
	BMP388_ReadRegister(sensor, REG_DATA_3, rx_temp_data, 3);
 8001ad8:	f107 020c 	add.w	r2, r7, #12
 8001adc:	2303      	movs	r3, #3
 8001ade:	2107      	movs	r1, #7
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f985 	bl	8001df0 <BMP388_ReadRegister>
	uint32_t temp_raw = (rx_temp_data[2] << 16) | (rx_temp_data[1] << 8) | rx_temp_data[0];
 8001ae6:	7bbb      	ldrb	r3, [r7, #14]
 8001ae8:	041a      	lsls	r2, r3, #16
 8001aea:	7b7b      	ldrb	r3, [r7, #13]
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	4313      	orrs	r3, r2
 8001af0:	7b3a      	ldrb	r2, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	637b      	str	r3, [r7, #52]	; 0x34

	float temp_partial_data1 = (float)temp_raw - sensor->calib_data->par_t1;
 8001af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af8:	ee07 3a90 	vmov	s15, r3
 8001afc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b0c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float temp_partial_data2 = temp_partial_data1 * sensor->calib_data->par_t2;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b18:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b20:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	sensor->temperature = temp_partial_data2 + (temp_partial_data1 * temp_partial_data1) * sensor->calib_data->par_t3;
 8001b24:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b28:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b38:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	edc3 7a04 	vstr	s15, [r3, #16]

	// Compute compensated pressure

	uint8_t rx_press_data[3];
	BMP388_ReadRegister(sensor, REG_DATA_0, rx_press_data, 3);
 8001b46:	f107 0208 	add.w	r2, r7, #8
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	2104      	movs	r1, #4
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f94e 	bl	8001df0 <BMP388_ReadRegister>
	uint32_t press_raw = (rx_press_data[2] << 16) | (rx_press_data[1] << 8) | rx_press_data[0];
 8001b54:	7abb      	ldrb	r3, [r7, #10]
 8001b56:	041a      	lsls	r2, r3, #16
 8001b58:	7a7b      	ldrb	r3, [r7, #9]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	7a3a      	ldrb	r2, [r7, #8]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28

	float press_partial_data1 = sensor->calib_data->par_p6 * sensor->temperature;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b76:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float press_partial_data2 = sensor->calib_data->par_p7 * (sensor->temperature * sensor->temperature);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	edd3 6a04 	vldr	s13, [r3, #16]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b96:	edc7 7a08 	vstr	s15, [r7, #32]
	float press_partial_data3 = sensor->calib_data->par_p8 * (sensor->temperature * sensor->temperature * sensor->temperature);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	edd3 6a04 	vldr	s13, [r3, #16]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc0:	edc7 7a07 	vstr	s15, [r7, #28]
	float press_partial_out1 = sensor->calib_data->par_p5 + press_partial_data1 + press_partial_data2 + press_partial_data3;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	ed93 7a07 	vldr	s14, [r3, #28]
 8001bcc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bd4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bdc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be4:	edc7 7a06 	vstr	s15, [r7, #24]

	press_partial_data1 = sensor->calib_data->par_p2 * sensor->temperature;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	ed93 7a04 	vldr	s14, [r3, #16]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	press_partial_data2 = sensor->calib_data->par_p3 * (sensor->temperature * sensor->temperature);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	edd3 6a04 	vldr	s13, [r3, #16]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c1a:	edc7 7a08 	vstr	s15, [r7, #32]
	press_partial_data3 = sensor->calib_data->par_p4 * (sensor->temperature * sensor->temperature * sensor->temperature);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	ed93 7a06 	vldr	s14, [r3, #24]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	edd3 6a04 	vldr	s13, [r3, #16]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c32:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c44:	edc7 7a07 	vstr	s15, [r7, #28]
	float press_partial_out2 = (float)press_raw * (sensor->calib_data->par_p1 + press_partial_data1 + press_partial_data2 + press_partial_data3);
 8001c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4a:	ee07 3a90 	vmov	s15, r3
 8001c4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c5e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c62:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c66:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c76:	edc7 7a05 	vstr	s15, [r7, #20]

	press_partial_data1 = (float)press_raw * (float)press_raw;
 8001c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c86:	ee07 3a90 	vmov	s15, r3
 8001c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c92:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	press_partial_data2 = sensor->calib_data->par_p9 + sensor->calib_data->par_p10 * sensor->temperature;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb4:	edc7 7a08 	vstr	s15, [r7, #32]
	press_partial_data3 = press_partial_data1 *	press_partial_data2;
 8001cb8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001cbc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc4:	edc7 7a07 	vstr	s15, [r7, #28]
	float press_partial_out3 = press_partial_data3 + ((float)press_raw * (float)press_raw * (float)press_raw) * sensor->calib_data->par_p11;
 8001cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cca:	ee07 3a90 	vmov	s15, r3
 8001cce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd4:	ee07 3a90 	vmov	s15, r3
 8001cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cfa:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d02:	edc7 7a04 	vstr	s15, [r7, #16]

	sensor->pressure = press_partial_out1 + press_partial_out2 + press_partial_out3;
 8001d06:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d12:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	edc3 7a05 	vstr	s15, [r3, #20]

	// Compute altitude

	if (sensor->pressure && sensor->startup_pressure)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2e:	d022      	beq.n	8001d76 <BMP388_ReadData+0x2a6>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3e:	d01a      	beq.n	8001d76 <BMP388_ReadData+0x2a6>
	{
		sensor->altitude = 44330 * (1 - powf(sensor->pressure / sensor->startup_pressure, 1.0 / 5.25579));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d4c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d50:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001d80 <BMP388_ReadData+0x2b0>
 8001d54:	eeb0 0a66 	vmov.f32	s0, s13
 8001d58:	f012 fb80 	bl	801445c <powf>
 8001d5c:	eef0 7a40 	vmov.f32	s15, s0
 8001d60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d68:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001d84 <BMP388_ReadData+0x2b4>
 8001d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	edc3 7a07 	vstr	s15, [r3, #28]
	}

	// Data ready INT cleared automatically 2.5 ms after the interrupt assertion

	return 1;
 8001d76:	2301      	movs	r3, #1
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3738      	adds	r7, #56	; 0x38
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	3e42d52f 	.word	0x3e42d52f
 8001d84:	472d2a00 	.word	0x472d2a00

08001d88 <BMP388_LogData>:

uint8_t BMP388_LogData(BMP388* sensor)
{
 8001d88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d8c:	b0a8      	sub	sp, #160	; 0xa0
 8001d8e:	af06      	add	r7, sp, #24
 8001d90:	6078      	str	r0, [r7, #4]
	char string[128];
	snprintf(string, 128, "BAR %.2f %.2f %.2f", sensor->pressure, sensor->temperature, sensor->altitude);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fbfe 	bl	8000598 <__aeabi_f2d>
 8001d9c:	4604      	mov	r4, r0
 8001d9e:	460d      	mov	r5, r1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fbf7 	bl	8000598 <__aeabi_f2d>
 8001daa:	4680      	mov	r8, r0
 8001dac:	4689      	mov	r9, r1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fbf0 	bl	8000598 <__aeabi_f2d>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	f107 0008 	add.w	r0, r7, #8
 8001dc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001dc4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001dc8:	e9cd 4500 	strd	r4, r5, [sp]
 8001dcc:	4a07      	ldr	r2, [pc, #28]	; (8001dec <BMP388_LogData+0x64>)
 8001dce:	2180      	movs	r1, #128	; 0x80
 8001dd0:	f010 f97e 	bl	80120d0 <sniprintf>
	return USB_Log(string, SENSOR);
 8001dd4:	f107 0308 	add.w	r3, r7, #8
 8001dd8:	2103      	movs	r1, #3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 fa4a 	bl	8002274 <USB_Log>
 8001de0:	4603      	mov	r3, r0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3788      	adds	r7, #136	; 0x88
 8001de6:	46bd      	mov	sp, r7
 8001de8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dec:	08014e58 	.word	0x08014e58

08001df0 <BMP388_ReadRegister>:
 *
 * BMP388 LOW LEVEL REGISTER FUNCTIONS
 *
 */
uint8_t BMP388_ReadRegister(BMP388* sensor, uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af04      	add	r7, sp, #16
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	72fb      	strb	r3, [r7, #11]
 8001e00:	4613      	mov	r3, r2
 8001e02:	813b      	strh	r3, [r7, #8]
	osMutexAcquire(*sensor->i2c_mutex, osWaitForever);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f00b fc06 	bl	800d620 <osMutexAcquire>
	uint8_t status = (HAL_I2C_Mem_Read(sensor->i2c_handle, (SLAVE_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, rx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6858      	ldr	r0, [r3, #4]
 8001e18:	7afb      	ldrb	r3, [r7, #11]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e20:	9302      	str	r3, [sp, #8]
 8001e22:	893b      	ldrh	r3, [r7, #8]
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	21ec      	movs	r1, #236	; 0xec
 8001e2e:	f002 f8f1 	bl	8004014 <HAL_I2C_Mem_Read>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bf0c      	ite	eq
 8001e38:	2301      	moveq	r3, #1
 8001e3a:	2300      	movne	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	75fb      	strb	r3, [r7, #23]
	osMutexRelease(*sensor->i2c_mutex);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f00b fc35 	bl	800d6b6 <osMutexRelease>

	if (!status)
 8001e4c:	7dfb      	ldrb	r3, [r7, #23]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d103      	bne.n	8001e5a <BMP388_ReadRegister+0x6a>
	{
		USB_Log("BMP388 register read failed.\n", ERR);
 8001e52:	2102      	movs	r1, #2
 8001e54:	4803      	ldr	r0, [pc, #12]	; (8001e64 <BMP388_ReadRegister+0x74>)
 8001e56:	f000 fa0d 	bl	8002274 <USB_Log>
	}

	return status;
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	08014e6c 	.word	0x08014e6c

08001e68 <BMP388_WriteRegister>:

uint8_t BMP388_WriteRegister(BMP388* sensor, uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af04      	add	r7, sp, #16
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	461a      	mov	r2, r3
 8001e74:	460b      	mov	r3, r1
 8001e76:	72fb      	strb	r3, [r7, #11]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	813b      	strh	r3, [r7, #8]
	osMutexAcquire(*sensor->i2c_mutex, osWaitForever);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e86:	4618      	mov	r0, r3
 8001e88:	f00b fbca 	bl	800d620 <osMutexAcquire>
	uint8_t status = (HAL_I2C_Mem_Write(sensor->i2c_handle, (SLAVE_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, tx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6858      	ldr	r0, [r3, #4]
 8001e90:	7afb      	ldrb	r3, [r7, #11]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e98:	9302      	str	r3, [sp, #8]
 8001e9a:	893b      	ldrh	r3, [r7, #8]
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	21ec      	movs	r1, #236	; 0xec
 8001ea6:	f001 ffa1 	bl	8003dec <HAL_I2C_Mem_Write>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf0c      	ite	eq
 8001eb0:	2301      	moveq	r3, #1
 8001eb2:	2300      	movne	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	75fb      	strb	r3, [r7, #23]
	osMutexRelease(*sensor->i2c_mutex);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f00b fbf9 	bl	800d6b6 <osMutexRelease>

	if (!status)
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d103      	bne.n	8001ed2 <BMP388_WriteRegister+0x6a>
	{
		USB_Log("BMP388 register write failed.\n", ERR);
 8001eca:	2102      	movs	r1, #2
 8001ecc:	4803      	ldr	r0, [pc, #12]	; (8001edc <BMP388_WriteRegister+0x74>)
 8001ece:	f000 f9d1 	bl	8002274 <USB_Log>
	}

	return status;
 8001ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	08014e8c 	.word	0x08014e8c

08001ee0 <BMP388_ReadCalibrationData>:

uint8_t BMP388_ReadCalibrationData(BMP388* sensor)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	uint8_t rx_data[2];

	// PAR T1
	BMP388_ReadRegister(sensor, NVM_PAR_T1_LSB, rx_data, 2);
 8001ee8:	f107 0208 	add.w	r2, r7, #8
 8001eec:	2302      	movs	r3, #2
 8001eee:	2131      	movs	r1, #49	; 0x31
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ff7d 	bl	8001df0 <BMP388_ReadRegister>
	uint16_t par_t1_raw = (rx_data[1] << 8) | rx_data[0];
 8001ef6:	7a7b      	ldrb	r3, [r7, #9]
 8001ef8:	021b      	lsls	r3, r3, #8
 8001efa:	b21a      	sxth	r2, r3
 8001efc:	7a3b      	ldrb	r3, [r7, #8]
 8001efe:	b21b      	sxth	r3, r3
 8001f00:	4313      	orrs	r3, r2
 8001f02:	b21b      	sxth	r3, r3
 8001f04:	83fb      	strh	r3, [r7, #30]
	sensor->calib_data->par_t1 = (float)par_t1_raw / powf(2, -8);
 8001f06:	8bfb      	ldrh	r3, [r7, #30]
 8001f08:	ee07 3a90 	vmov	s15, r3
 8001f0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	eddf 6aad 	vldr	s13, [pc, #692]	; 80021cc <BMP388_ReadCalibrationData+0x2ec>
 8001f18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f1c:	edc3 7a00 	vstr	s15, [r3]

	// PAR T2
	BMP388_ReadRegister(sensor, NVM_PAR_T2_LSB, rx_data, 2);
 8001f20:	f107 0208 	add.w	r2, r7, #8
 8001f24:	2302      	movs	r3, #2
 8001f26:	2133      	movs	r1, #51	; 0x33
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ff61 	bl	8001df0 <BMP388_ReadRegister>
	uint16_t par_t2_raw = (rx_data[1] << 8) | rx_data[0];
 8001f2e:	7a7b      	ldrb	r3, [r7, #9]
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	b21a      	sxth	r2, r3
 8001f34:	7a3b      	ldrb	r3, [r7, #8]
 8001f36:	b21b      	sxth	r3, r3
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	b21b      	sxth	r3, r3
 8001f3c:	83bb      	strh	r3, [r7, #28]
	sensor->calib_data->par_t2 = (float)par_t2_raw / powf(2, 30);
 8001f3e:	8bbb      	ldrh	r3, [r7, #28]
 8001f40:	ee07 3a90 	vmov	s15, r3
 8001f44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	eddf 6aa0 	vldr	s13, [pc, #640]	; 80021d0 <BMP388_ReadCalibrationData+0x2f0>
 8001f50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f54:	edc3 7a01 	vstr	s15, [r3, #4]

	// PAR T3
	BMP388_ReadRegister(sensor, NVM_PAR_T3, rx_data, 1);
 8001f58:	f107 0208 	add.w	r2, r7, #8
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	2135      	movs	r1, #53	; 0x35
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff ff45 	bl	8001df0 <BMP388_ReadRegister>
	int8_t par_t3_raw = rx_data[0];
 8001f66:	7a3b      	ldrb	r3, [r7, #8]
 8001f68:	76fb      	strb	r3, [r7, #27]
	sensor->calib_data->par_t3 = (float)par_t3_raw / powf(2, 48);
 8001f6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	eddf 6a96 	vldr	s13, [pc, #600]	; 80021d4 <BMP388_ReadCalibrationData+0x2f4>
 8001f7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f82:	edc3 7a02 	vstr	s15, [r3, #8]

	// PAR P1
	BMP388_ReadRegister(sensor, NVM_PAR_P1_LSB, rx_data, 2);
 8001f86:	f107 0208 	add.w	r2, r7, #8
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	2136      	movs	r1, #54	; 0x36
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ff2e 	bl	8001df0 <BMP388_ReadRegister>
	int16_t par_p1_raw = (rx_data[1] << 8) | rx_data[0];
 8001f94:	7a7b      	ldrb	r3, [r7, #9]
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	b21a      	sxth	r2, r3
 8001f9a:	7a3b      	ldrb	r3, [r7, #8]
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	833b      	strh	r3, [r7, #24]
	sensor->calib_data->par_p1 = ((float)par_p1_raw - powf(2, 14)) / powf(2, 20);
 8001fa2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001fa6:	ee07 3a90 	vmov	s15, r3
 8001faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fae:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80021d8 <BMP388_ReadCalibrationData+0x2f8>
 8001fb2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	eddf 6a88 	vldr	s13, [pc, #544]	; 80021dc <BMP388_ReadCalibrationData+0x2fc>
 8001fbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fc2:	edc3 7a03 	vstr	s15, [r3, #12]

	// PAR P2
	BMP388_ReadRegister(sensor, NVM_PAR_P2_LSB, rx_data, 2);
 8001fc6:	f107 0208 	add.w	r2, r7, #8
 8001fca:	2302      	movs	r3, #2
 8001fcc:	2138      	movs	r1, #56	; 0x38
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff ff0e 	bl	8001df0 <BMP388_ReadRegister>
	int16_t par_p2_raw = (rx_data[1] << 8) | rx_data[0];
 8001fd4:	7a7b      	ldrb	r3, [r7, #9]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	7a3b      	ldrb	r3, [r7, #8]
 8001fdc:	b21b      	sxth	r3, r3
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	82fb      	strh	r3, [r7, #22]
	sensor->calib_data->par_p2 = ((float)par_p2_raw - powf(2, 14)) / powf(2, 29);
 8001fe2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fee:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80021d8 <BMP388_ReadCalibrationData+0x2f8>
 8001ff2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	eddf 6a79 	vldr	s13, [pc, #484]	; 80021e0 <BMP388_ReadCalibrationData+0x300>
 8001ffe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002002:	edc3 7a04 	vstr	s15, [r3, #16]

	// PAR P3
	BMP388_ReadRegister(sensor, NVM_PAR_P3, rx_data, 1);
 8002006:	f107 0208 	add.w	r2, r7, #8
 800200a:	2301      	movs	r3, #1
 800200c:	213a      	movs	r1, #58	; 0x3a
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff feee 	bl	8001df0 <BMP388_ReadRegister>
	int8_t par_p3_raw = rx_data[0];
 8002014:	7a3b      	ldrb	r3, [r7, #8]
 8002016:	757b      	strb	r3, [r7, #21]
	sensor->calib_data->par_p3 = (float)par_p3_raw / powf(2, 32);
 8002018:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800201c:	ee07 3a90 	vmov	s15, r3
 8002020:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80021e4 <BMP388_ReadCalibrationData+0x304>
 800202c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002030:	edc3 7a05 	vstr	s15, [r3, #20]

	// PAR P4
	BMP388_ReadRegister(sensor, NVM_PAR_P4, rx_data, 1);
 8002034:	f107 0208 	add.w	r2, r7, #8
 8002038:	2301      	movs	r3, #1
 800203a:	213b      	movs	r1, #59	; 0x3b
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff fed7 	bl	8001df0 <BMP388_ReadRegister>
	int8_t par_p4_raw = rx_data[0];
 8002042:	7a3b      	ldrb	r3, [r7, #8]
 8002044:	753b      	strb	r3, [r7, #20]
	sensor->calib_data->par_p4 = (float)par_p4_raw / powf(2, 37);
 8002046:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800204a:	ee07 3a90 	vmov	s15, r3
 800204e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	eddf 6a64 	vldr	s13, [pc, #400]	; 80021e8 <BMP388_ReadCalibrationData+0x308>
 800205a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800205e:	edc3 7a06 	vstr	s15, [r3, #24]

	// PAR P5
	BMP388_ReadRegister(sensor, NVM_PAR_P5_LSB, rx_data, 2);
 8002062:	f107 0208 	add.w	r2, r7, #8
 8002066:	2302      	movs	r3, #2
 8002068:	213c      	movs	r1, #60	; 0x3c
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff fec0 	bl	8001df0 <BMP388_ReadRegister>
	uint16_t par_p5_raw = (rx_data[1] << 8) | rx_data[0];
 8002070:	7a7b      	ldrb	r3, [r7, #9]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	b21a      	sxth	r2, r3
 8002076:	7a3b      	ldrb	r3, [r7, #8]
 8002078:	b21b      	sxth	r3, r3
 800207a:	4313      	orrs	r3, r2
 800207c:	b21b      	sxth	r3, r3
 800207e:	827b      	strh	r3, [r7, #18]
	sensor->calib_data->par_p5 = (float)par_p5_raw / powf(2, -3);
 8002080:	8a7b      	ldrh	r3, [r7, #18]
 8002082:	ee07 3a90 	vmov	s15, r3
 8002086:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
 8002092:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002096:	edc3 7a07 	vstr	s15, [r3, #28]

	// PAR P6
	BMP388_ReadRegister(sensor, NVM_PAR_P6_LSB, rx_data, 2);
 800209a:	f107 0208 	add.w	r2, r7, #8
 800209e:	2302      	movs	r3, #2
 80020a0:	213e      	movs	r1, #62	; 0x3e
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff fea4 	bl	8001df0 <BMP388_ReadRegister>
	uint16_t par_p6_raw = (rx_data[1] << 8) | rx_data[0];
 80020a8:	7a7b      	ldrb	r3, [r7, #9]
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	b21a      	sxth	r2, r3
 80020ae:	7a3b      	ldrb	r3, [r7, #8]
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	4313      	orrs	r3, r2
 80020b4:	b21b      	sxth	r3, r3
 80020b6:	823b      	strh	r3, [r7, #16]
	sensor->calib_data->par_p6 = (float)par_p6_raw / powf(2, 6);
 80020b8:	8a3b      	ldrh	r3, [r7, #16]
 80020ba:	ee07 3a90 	vmov	s15, r3
 80020be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	eddf 6a49 	vldr	s13, [pc, #292]	; 80021ec <BMP388_ReadCalibrationData+0x30c>
 80020ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ce:	edc3 7a08 	vstr	s15, [r3, #32]

	// PAR P7
	BMP388_ReadRegister(sensor, NVM_PAR_P7, rx_data, 1);
 80020d2:	f107 0208 	add.w	r2, r7, #8
 80020d6:	2301      	movs	r3, #1
 80020d8:	2140      	movs	r1, #64	; 0x40
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff fe88 	bl	8001df0 <BMP388_ReadRegister>
	int8_t par_p7_raw = rx_data[0];
 80020e0:	7a3b      	ldrb	r3, [r7, #8]
 80020e2:	73fb      	strb	r3, [r7, #15]
	sensor->calib_data->par_p7 = (float)par_p7_raw / powf(2, 8);
 80020e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e8:	ee07 3a90 	vmov	s15, r3
 80020ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80021f0 <BMP388_ReadCalibrationData+0x310>
 80020f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020fc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// PAR P8
	BMP388_ReadRegister(sensor, NVM_PAR_P8, rx_data, 1);
 8002100:	f107 0208 	add.w	r2, r7, #8
 8002104:	2301      	movs	r3, #1
 8002106:	2141      	movs	r1, #65	; 0x41
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff fe71 	bl	8001df0 <BMP388_ReadRegister>
	int8_t par_p8_raw = rx_data[0];
 800210e:	7a3b      	ldrb	r3, [r7, #8]
 8002110:	73bb      	strb	r3, [r7, #14]
	sensor->calib_data->par_p8 = (float)par_p8_raw / powf(2, 15);
 8002112:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002116:	ee07 3a90 	vmov	s15, r3
 800211a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	eddf 6a34 	vldr	s13, [pc, #208]	; 80021f4 <BMP388_ReadCalibrationData+0x314>
 8002126:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800212a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	// PAR P9
	BMP388_ReadRegister(sensor, NVM_PAR_P9_LSB, rx_data, 2);
 800212e:	f107 0208 	add.w	r2, r7, #8
 8002132:	2302      	movs	r3, #2
 8002134:	2142      	movs	r1, #66	; 0x42
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff fe5a 	bl	8001df0 <BMP388_ReadRegister>
	int16_t par_p9_raw = (rx_data[1] << 8) | rx_data[0];
 800213c:	7a7b      	ldrb	r3, [r7, #9]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	b21a      	sxth	r2, r3
 8002142:	7a3b      	ldrb	r3, [r7, #8]
 8002144:	b21b      	sxth	r3, r3
 8002146:	4313      	orrs	r3, r2
 8002148:	81bb      	strh	r3, [r7, #12]
	sensor->calib_data->par_p9 = (float)par_p9_raw / powf(2, 48);
 800214a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800214e:	ee07 3a90 	vmov	s15, r3
 8002152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80021d4 <BMP388_ReadCalibrationData+0x2f4>
 800215e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002162:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	// PAR P10
	BMP388_ReadRegister(sensor, NVM_PAR_P10, rx_data, 1);
 8002166:	f107 0208 	add.w	r2, r7, #8
 800216a:	2301      	movs	r3, #1
 800216c:	2144      	movs	r1, #68	; 0x44
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff fe3e 	bl	8001df0 <BMP388_ReadRegister>
	int8_t par_p10_raw = rx_data[0];
 8002174:	7a3b      	ldrb	r3, [r7, #8]
 8002176:	72fb      	strb	r3, [r7, #11]
	sensor->calib_data->par_p10 = (float)par_p10_raw / powf(2, 48);
 8002178:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800217c:	ee07 3a90 	vmov	s15, r3
 8002180:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	eddf 6a12 	vldr	s13, [pc, #72]	; 80021d4 <BMP388_ReadCalibrationData+0x2f4>
 800218c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002190:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	// PAR P11
	BMP388_ReadRegister(sensor, NVM_PAR_P11, rx_data, 1);
 8002194:	f107 0208 	add.w	r2, r7, #8
 8002198:	2301      	movs	r3, #1
 800219a:	2145      	movs	r1, #69	; 0x45
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff fe27 	bl	8001df0 <BMP388_ReadRegister>
	int8_t par_p11_raw = rx_data[0];
 80021a2:	7a3b      	ldrb	r3, [r7, #8]
 80021a4:	72bb      	strb	r3, [r7, #10]
	sensor->calib_data->par_p11 = (float)par_p11_raw / powf(2, 65);
 80021a6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80021aa:	ee07 3a90 	vmov	s15, r3
 80021ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	eddf 6a10 	vldr	s13, [pc, #64]	; 80021f8 <BMP388_ReadCalibrationData+0x318>
 80021ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021be:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	return 1;
 80021c2:	2301      	movs	r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3720      	adds	r7, #32
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	3b800000 	.word	0x3b800000
 80021d0:	4e800000 	.word	0x4e800000
 80021d4:	57800000 	.word	0x57800000
 80021d8:	46800000 	.word	0x46800000
 80021dc:	49800000 	.word	0x49800000
 80021e0:	4e000000 	.word	0x4e000000
 80021e4:	4f800000 	.word	0x4f800000
 80021e8:	52000000 	.word	0x52000000
 80021ec:	42800000 	.word	0x42800000
 80021f0:	43800000 	.word	0x43800000
 80021f4:	47000000 	.word	0x47000000
 80021f8:	60000000 	.word	0x60000000

080021fc <BMP388_ComputeStartupPressure>:

uint8_t BMP388_ComputeStartupPressure(BMP388* sensor)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	/*
	 * Compute the average current pressure (for initial altitude reference)
	 */

	uint8_t tx_data[2];
	uint8_t sample_num = 50;
 8002204:	2332      	movs	r3, #50	; 0x32
 8002206:	73fb      	strb	r3, [r7, #15]
	float running_pressure = 0;
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < sample_num; i++)
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	e01a      	b.n	800224a <BMP388_ComputeStartupPressure+0x4e>
	{
		// Switch sensor into forced mode (take one reading, return to sleep)
		tx_data[0] = 0x13;
 8002214:	2313      	movs	r3, #19
 8002216:	733b      	strb	r3, [r7, #12]
		BMP388_WriteRegister(sensor, REG_PWR_CTRL, tx_data, 1);
 8002218:	f107 020c 	add.w	r2, r7, #12
 800221c:	2301      	movs	r3, #1
 800221e:	211b      	movs	r1, #27
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff fe21 	bl	8001e68 <BMP388_WriteRegister>
		osDelay(40);
 8002226:	2028      	movs	r0, #40	; 0x28
 8002228:	f00b f959 	bl	800d4de <osDelay>
		BMP388_ReadData(sensor);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff fc4f 	bl	8001ad0 <BMP388_ReadData>
		running_pressure += sensor->pressure;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	edd3 7a05 	vldr	s15, [r3, #20]
 8002238:	ed97 7a05 	vldr	s14, [r7, #20]
 800223c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002240:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < sample_num; i++)
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	3301      	adds	r3, #1
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	429a      	cmp	r2, r3
 8002250:	dbe0      	blt.n	8002214 <BMP388_ComputeStartupPressure+0x18>
	}

	sensor->startup_pressure = running_pressure / sample_num;
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	ee07 3a90 	vmov	s15, r3
 8002258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800225c:	edd7 6a05 	vldr	s13, [r7, #20]
 8002260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	edc3 7a06 	vstr	s15, [r3, #24]
	return 1;
 800226a:	2301      	movs	r3, #1
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <USB_Log>:
#include "cmsis_os.h"
#include "usbd_cdc_if.h"
#include "usbd_def.h"

uint8_t USB_Log(const char* string, Log_Level level)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	ed2d 8b02 	vpush	{d8}
 800227a:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800227e:	af04      	add	r7, sp, #16
 8002280:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002284:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002288:	6018      	str	r0, [r3, #0]
 800228a:	460a      	mov	r2, r1
 800228c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002290:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8002294:	701a      	strb	r2, [r3, #0]
	char str[512];
	float seconds = (float)osKernelGetTickCount() / (float)osKernelGetTickFreq();
 8002296:	f00b f871 	bl	800d37c <osKernelGetTickCount>
 800229a:	ee07 0a90 	vmov	s15, r0
 800229e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80022a2:	f00b f880 	bl	800d3a6 <osKernelGetTickFreq>
 80022a6:	ee07 0a90 	vmov	s15, r0
 80022aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022ae:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80022b2:	edc7 7a82 	vstr	s15, [r7, #520]	; 0x208

	switch (level) {
 80022b6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80022ba:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d863      	bhi.n	800238c <USB_Log+0x118>
 80022c4:	a201      	add	r2, pc, #4	; (adr r2, 80022cc <USB_Log+0x58>)
 80022c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ca:	bf00      	nop
 80022cc:	080022dd 	.word	0x080022dd
 80022d0:	08002309 	.word	0x08002309
 80022d4:	08002335 	.word	0x08002335
 80022d8:	08002361 	.word	0x08002361
		case INFO:
			snprintf(str, 256, "LOG %.2f INFO %s\n", seconds, string);
 80022dc:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 80022e0:	f7fe f95a 	bl	8000598 <__aeabi_f2d>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	f107 0008 	add.w	r0, r7, #8
 80022ec:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80022f0:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 80022f4:	6809      	ldr	r1, [r1, #0]
 80022f6:	9102      	str	r1, [sp, #8]
 80022f8:	e9cd 2300 	strd	r2, r3, [sp]
 80022fc:	4a4d      	ldr	r2, [pc, #308]	; (8002434 <USB_Log+0x1c0>)
 80022fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002302:	f00f fee5 	bl	80120d0 <sniprintf>
			break;
 8002306:	e057      	b.n	80023b8 <USB_Log+0x144>
		case WARN:
			snprintf(str, 256, "LOG %.2f WARN %s\n", seconds, string);
 8002308:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 800230c:	f7fe f944 	bl	8000598 <__aeabi_f2d>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	f107 0008 	add.w	r0, r7, #8
 8002318:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800231c:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 8002320:	6809      	ldr	r1, [r1, #0]
 8002322:	9102      	str	r1, [sp, #8]
 8002324:	e9cd 2300 	strd	r2, r3, [sp]
 8002328:	4a43      	ldr	r2, [pc, #268]	; (8002438 <USB_Log+0x1c4>)
 800232a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800232e:	f00f fecf 	bl	80120d0 <sniprintf>
			break;
 8002332:	e041      	b.n	80023b8 <USB_Log+0x144>
		case ERR:
			snprintf(str, 256, "LOG %.2f ERR %s\n", seconds, string);
 8002334:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8002338:	f7fe f92e 	bl	8000598 <__aeabi_f2d>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	f107 0008 	add.w	r0, r7, #8
 8002344:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8002348:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 800234c:	6809      	ldr	r1, [r1, #0]
 800234e:	9102      	str	r1, [sp, #8]
 8002350:	e9cd 2300 	strd	r2, r3, [sp]
 8002354:	4a39      	ldr	r2, [pc, #228]	; (800243c <USB_Log+0x1c8>)
 8002356:	f44f 7180 	mov.w	r1, #256	; 0x100
 800235a:	f00f feb9 	bl	80120d0 <sniprintf>
			break;
 800235e:	e02b      	b.n	80023b8 <USB_Log+0x144>
		case SENSOR:
			snprintf(str, 256, "SENSOR %.2f %s\n", seconds, string);
 8002360:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8002364:	f7fe f918 	bl	8000598 <__aeabi_f2d>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	f107 0008 	add.w	r0, r7, #8
 8002370:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8002374:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 8002378:	6809      	ldr	r1, [r1, #0]
 800237a:	9102      	str	r1, [sp, #8]
 800237c:	e9cd 2300 	strd	r2, r3, [sp]
 8002380:	4a2f      	ldr	r2, [pc, #188]	; (8002440 <USB_Log+0x1cc>)
 8002382:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002386:	f00f fea3 	bl	80120d0 <sniprintf>
			break;
 800238a:	e015      	b.n	80023b8 <USB_Log+0x144>
		default:
			snprintf(str, 256, "LOG %.2f ERR INVALID LOG FORMATTING: %s\n", seconds, string);
 800238c:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8002390:	f7fe f902 	bl	8000598 <__aeabi_f2d>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	f107 0008 	add.w	r0, r7, #8
 800239c:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80023a0:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 80023a4:	6809      	ldr	r1, [r1, #0]
 80023a6:	9102      	str	r1, [sp, #8]
 80023a8:	e9cd 2300 	strd	r2, r3, [sp]
 80023ac:	4a25      	ldr	r2, [pc, #148]	; (8002444 <USB_Log+0x1d0>)
 80023ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023b2:	f00f fe8d 	bl	80120d0 <sniprintf>
			break;
 80023b6:	bf00      	nop
	}

	// Get USB mutex (shared resource)
	osMutexAcquire(usbMutexHandle, osWaitForever);
 80023b8:	4b23      	ldr	r3, [pc, #140]	; (8002448 <USB_Log+0x1d4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023c0:	4618      	mov	r0, r3
 80023c2:	f00b f92d 	bl	800d620 <osMutexAcquire>
	uint8_t status = CDC_Transmit_FS((uint8_t*)str, strlen(str));
 80023c6:	f107 0308 	add.w	r3, r7, #8
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fd ff78 	bl	80002c0 <strlen>
 80023d0:	4603      	mov	r3, r0
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	f107 0308 	add.w	r3, r7, #8
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f00e fd04 	bl	8010de8 <CDC_Transmit_FS>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	while (status == USBD_BUSY)
 80023e6:	e012      	b.n	800240e <USB_Log+0x19a>
	{
		osDelay(1);
 80023e8:	2001      	movs	r0, #1
 80023ea:	f00b f878 	bl	800d4de <osDelay>
		status = CDC_Transmit_FS((uint8_t*)str, strlen(str));
 80023ee:	f107 0308 	add.w	r3, r7, #8
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fd ff64 	bl	80002c0 <strlen>
 80023f8:	4603      	mov	r3, r0
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	f107 0308 	add.w	r3, r7, #8
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f00e fcf0 	bl	8010de8 <CDC_Transmit_FS>
 8002408:	4603      	mov	r3, r0
 800240a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	while (status == USBD_BUSY)
 800240e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002412:	2b01      	cmp	r3, #1
 8002414:	d0e8      	beq.n	80023e8 <USB_Log+0x174>
	}
	osMutexRelease(usbMutexHandle);
 8002416:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <USB_Log+0x1d4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f00b f94b 	bl	800d6b6 <osMutexRelease>

	return status;
 8002420:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 8002424:	4618      	mov	r0, r3
 8002426:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800242a:	46bd      	mov	sp, r7
 800242c:	ecbd 8b02 	vpop	{d8}
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	08014eac 	.word	0x08014eac
 8002438:	08014ec0 	.word	0x08014ec0
 800243c:	08014ed4 	.word	0x08014ed4
 8002440:	08014ee8 	.word	0x08014ee8
 8002444:	08014ef8 	.word	0x08014ef8
 8002448:	200023c4 	.word	0x200023c4

0800244c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of spi1Mutex */
  spi1MutexHandle = osMutexNew(&spi1Mutex_attributes);
 8002450:	4829      	ldr	r0, [pc, #164]	; (80024f8 <MX_FREERTOS_Init+0xac>)
 8002452:	f00b f85f 	bl	800d514 <osMutexNew>
 8002456:	4603      	mov	r3, r0
 8002458:	4a28      	ldr	r2, [pc, #160]	; (80024fc <MX_FREERTOS_Init+0xb0>)
 800245a:	6013      	str	r3, [r2, #0]

  /* creation of usbMutex */
  usbMutexHandle = osMutexNew(&usbMutex_attributes);
 800245c:	4828      	ldr	r0, [pc, #160]	; (8002500 <MX_FREERTOS_Init+0xb4>)
 800245e:	f00b f859 	bl	800d514 <osMutexNew>
 8002462:	4603      	mov	r3, r0
 8002464:	4a27      	ldr	r2, [pc, #156]	; (8002504 <MX_FREERTOS_Init+0xb8>)
 8002466:	6013      	str	r3, [r2, #0]

  /* creation of i2c2Mutex */
  i2c2MutexHandle = osMutexNew(&i2c2Mutex_attributes);
 8002468:	4827      	ldr	r0, [pc, #156]	; (8002508 <MX_FREERTOS_Init+0xbc>)
 800246a:	f00b f853 	bl	800d514 <osMutexNew>
 800246e:	4603      	mov	r3, r0
 8002470:	4a26      	ldr	r2, [pc, #152]	; (800250c <MX_FREERTOS_Init+0xc0>)
 8002472:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of accIRQSemaphore */
  accIRQSemaphoreHandle = osSemaphoreNew(64, 0, &accIRQSemaphore_attributes);
 8002474:	4a26      	ldr	r2, [pc, #152]	; (8002510 <MX_FREERTOS_Init+0xc4>)
 8002476:	2100      	movs	r1, #0
 8002478:	2040      	movs	r0, #64	; 0x40
 800247a:	f00b f959 	bl	800d730 <osSemaphoreNew>
 800247e:	4603      	mov	r3, r0
 8002480:	4a24      	ldr	r2, [pc, #144]	; (8002514 <MX_FREERTOS_Init+0xc8>)
 8002482:	6013      	str	r3, [r2, #0]

  /* creation of gyroIRQSemaphore */
  gyroIRQSemaphoreHandle = osSemaphoreNew(64, 0, &gyroIRQSemaphore_attributes);
 8002484:	4a24      	ldr	r2, [pc, #144]	; (8002518 <MX_FREERTOS_Init+0xcc>)
 8002486:	2100      	movs	r1, #0
 8002488:	2040      	movs	r0, #64	; 0x40
 800248a:	f00b f951 	bl	800d730 <osSemaphoreNew>
 800248e:	4603      	mov	r3, r0
 8002490:	4a22      	ldr	r2, [pc, #136]	; (800251c <MX_FREERTOS_Init+0xd0>)
 8002492:	6013      	str	r3, [r2, #0]

  /* creation of pressureIRQSemaphore */
  pressureIRQSemaphoreHandle = osSemaphoreNew(64, 0, &pressureIRQSemaphore_attributes);
 8002494:	4a22      	ldr	r2, [pc, #136]	; (8002520 <MX_FREERTOS_Init+0xd4>)
 8002496:	2100      	movs	r1, #0
 8002498:	2040      	movs	r0, #64	; 0x40
 800249a:	f00b f949 	bl	800d730 <osSemaphoreNew>
 800249e:	4603      	mov	r3, r0
 80024a0:	4a20      	ldr	r2, [pc, #128]	; (8002524 <MX_FREERTOS_Init+0xd8>)
 80024a2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of applicationTask */
  applicationTaskHandle = osThreadNew(start_application_task, NULL, &applicationTask_attributes);
 80024a4:	4a20      	ldr	r2, [pc, #128]	; (8002528 <MX_FREERTOS_Init+0xdc>)
 80024a6:	2100      	movs	r1, #0
 80024a8:	4820      	ldr	r0, [pc, #128]	; (800252c <MX_FREERTOS_Init+0xe0>)
 80024aa:	f00a ff85 	bl	800d3b8 <osThreadNew>
 80024ae:	4603      	mov	r3, r0
 80024b0:	4a1f      	ldr	r2, [pc, #124]	; (8002530 <MX_FREERTOS_Init+0xe4>)
 80024b2:	6013      	str	r3, [r2, #0]

  /* creation of accIRQTask */
  accIRQTaskHandle = osThreadNew(start_acc_irq_task, NULL, &accIRQTask_attributes);
 80024b4:	4a1f      	ldr	r2, [pc, #124]	; (8002534 <MX_FREERTOS_Init+0xe8>)
 80024b6:	2100      	movs	r1, #0
 80024b8:	481f      	ldr	r0, [pc, #124]	; (8002538 <MX_FREERTOS_Init+0xec>)
 80024ba:	f00a ff7d 	bl	800d3b8 <osThreadNew>
 80024be:	4603      	mov	r3, r0
 80024c0:	4a1e      	ldr	r2, [pc, #120]	; (800253c <MX_FREERTOS_Init+0xf0>)
 80024c2:	6013      	str	r3, [r2, #0]

  /* creation of gyroIRQTask */
  gyroIRQTaskHandle = osThreadNew(start_gyro_irq_task, NULL, &gyroIRQTask_attributes);
 80024c4:	4a1e      	ldr	r2, [pc, #120]	; (8002540 <MX_FREERTOS_Init+0xf4>)
 80024c6:	2100      	movs	r1, #0
 80024c8:	481e      	ldr	r0, [pc, #120]	; (8002544 <MX_FREERTOS_Init+0xf8>)
 80024ca:	f00a ff75 	bl	800d3b8 <osThreadNew>
 80024ce:	4603      	mov	r3, r0
 80024d0:	4a1d      	ldr	r2, [pc, #116]	; (8002548 <MX_FREERTOS_Init+0xfc>)
 80024d2:	6013      	str	r3, [r2, #0]

  /* creation of loggingTask */
  loggingTaskHandle = osThreadNew(start_logging_task, NULL, &loggingTask_attributes);
 80024d4:	4a1d      	ldr	r2, [pc, #116]	; (800254c <MX_FREERTOS_Init+0x100>)
 80024d6:	2100      	movs	r1, #0
 80024d8:	481d      	ldr	r0, [pc, #116]	; (8002550 <MX_FREERTOS_Init+0x104>)
 80024da:	f00a ff6d 	bl	800d3b8 <osThreadNew>
 80024de:	4603      	mov	r3, r0
 80024e0:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <MX_FREERTOS_Init+0x108>)
 80024e2:	6013      	str	r3, [r2, #0]

  /* creation of pressureIRQTask */
  pressureIRQTaskHandle = osThreadNew(start_pressure_irq_task, NULL, &pressureIRQTask_attributes);
 80024e4:	4a1c      	ldr	r2, [pc, #112]	; (8002558 <MX_FREERTOS_Init+0x10c>)
 80024e6:	2100      	movs	r1, #0
 80024e8:	481c      	ldr	r0, [pc, #112]	; (800255c <MX_FREERTOS_Init+0x110>)
 80024ea:	f00a ff65 	bl	800d3b8 <osThreadNew>
 80024ee:	4603      	mov	r3, r0
 80024f0:	4a1b      	ldr	r2, [pc, #108]	; (8002560 <MX_FREERTOS_Init+0x114>)
 80024f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	08015110 	.word	0x08015110
 80024fc:	20002370 	.word	0x20002370
 8002500:	08015120 	.word	0x08015120
 8002504:	200023c4 	.word	0x200023c4
 8002508:	08015130 	.word	0x08015130
 800250c:	20002418 	.word	0x20002418
 8002510:	08015140 	.word	0x08015140
 8002514:	2000246c 	.word	0x2000246c
 8002518:	08015150 	.word	0x08015150
 800251c:	200024c0 	.word	0x200024c0
 8002520:	08015160 	.word	0x08015160
 8002524:	20002514 	.word	0x20002514
 8002528:	0801505c 	.word	0x0801505c
 800252c:	08002565 	.word	0x08002565
 8002530:	20000400 	.word	0x20000400
 8002534:	08015080 	.word	0x08015080
 8002538:	080025f9 	.word	0x080025f9
 800253c:	20000cb0 	.word	0x20000cb0
 8002540:	080150a4 	.word	0x080150a4
 8002544:	08002625 	.word	0x08002625
 8002548:	20001160 	.word	0x20001160
 800254c:	080150c8 	.word	0x080150c8
 8002550:	0800264d 	.word	0x0800264d
 8002554:	20001610 	.word	0x20001610
 8002558:	080150ec 	.word	0x080150ec
 800255c:	08002685 	.word	0x08002685
 8002560:	20001ec0 	.word	0x20001ec0

08002564 <start_application_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_application_task */
void start_application_task(void *argument)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af06      	add	r7, sp, #24
 800256a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_application_task */

	BMI088_Init(&imu, &hspi1, &spi1MutexHandle, ACCEL_CS_GPIO_Port, GYRO_CS_GPIO_Port, ACCEL_CS_Pin, GYRO_CS_Pin, ACCEL_INT_Pin, GYRO_INT_Pin);
 800256c:	2302      	movs	r3, #2
 800256e:	9304      	str	r3, [sp, #16]
 8002570:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002574:	9303      	str	r3, [sp, #12]
 8002576:	2301      	movs	r3, #1
 8002578:	9302      	str	r3, [sp, #8]
 800257a:	2310      	movs	r3, #16
 800257c:	9301      	str	r3, [sp, #4]
 800257e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002588:	4a11      	ldr	r2, [pc, #68]	; (80025d0 <start_application_task+0x6c>)
 800258a:	4912      	ldr	r1, [pc, #72]	; (80025d4 <start_application_task+0x70>)
 800258c:	4812      	ldr	r0, [pc, #72]	; (80025d8 <start_application_task+0x74>)
 800258e:	f7fe fcb1 	bl	8000ef4 <BMI088_Init>
	BMP388_Init(&press_sensor, &calib_data, &hi2c2, &i2c2MutexHandle, BMP_INT_Pin);
 8002592:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	4b10      	ldr	r3, [pc, #64]	; (80025dc <start_application_task+0x78>)
 800259a:	4a11      	ldr	r2, [pc, #68]	; (80025e0 <start_application_task+0x7c>)
 800259c:	4911      	ldr	r1, [pc, #68]	; (80025e4 <start_application_task+0x80>)
 800259e:	4812      	ldr	r0, [pc, #72]	; (80025e8 <start_application_task+0x84>)
 80025a0:	f7ff fa16 	bl	80019d0 <BMP388_Init>

	/* Infinite loop */
	for(;;)
	{
		osDelay(100);
 80025a4:	2064      	movs	r0, #100	; 0x64
 80025a6:	f00a ff9a 	bl	800d4de <osDelay>
		USB_Log("nikolai info", INFO);
 80025aa:	2100      	movs	r1, #0
 80025ac:	480f      	ldr	r0, [pc, #60]	; (80025ec <start_application_task+0x88>)
 80025ae:	f7ff fe61 	bl	8002274 <USB_Log>
		osDelay(100);
 80025b2:	2064      	movs	r0, #100	; 0x64
 80025b4:	f00a ff93 	bl	800d4de <osDelay>
		USB_Log("nikolai warning", WARN);
 80025b8:	2101      	movs	r1, #1
 80025ba:	480d      	ldr	r0, [pc, #52]	; (80025f0 <start_application_task+0x8c>)
 80025bc:	f7ff fe5a 	bl	8002274 <USB_Log>
		osDelay(100);
 80025c0:	2064      	movs	r0, #100	; 0x64
 80025c2:	f00a ff8c 	bl	800d4de <osDelay>
		USB_Log("nikolai error", ERR);
 80025c6:	2102      	movs	r1, #2
 80025c8:	480a      	ldr	r0, [pc, #40]	; (80025f4 <start_application_task+0x90>)
 80025ca:	f7ff fe53 	bl	8002274 <USB_Log>
		osDelay(100);
 80025ce:	e7e9      	b.n	80025a4 <start_application_task+0x40>
 80025d0:	20002370 	.word	0x20002370
 80025d4:	20002688 	.word	0x20002688
 80025d8:	2000036c 	.word	0x2000036c
 80025dc:	20002418 	.word	0x20002418
 80025e0:	20002634 	.word	0x20002634
 80025e4:	200003c8 	.word	0x200003c8
 80025e8:	200003a8 	.word	0x200003a8
 80025ec:	08014fc8 	.word	0x08014fc8
 80025f0:	08014fd8 	.word	0x08014fd8
 80025f4:	08014fe8 	.word	0x08014fe8

080025f8 <start_acc_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_acc_irq_task */
void start_acc_irq_task(void *argument)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_acc_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(accIRQSemaphoreHandle, osWaitForever);
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <start_acc_irq_task+0x24>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002608:	4618      	mov	r0, r3
 800260a:	f00b f91b 	bl	800d844 <osSemaphoreAcquire>
		BMI088_ReadAccData(&imu);
 800260e:	4804      	ldr	r0, [pc, #16]	; (8002620 <start_acc_irq_task+0x28>)
 8002610:	f7fe fdca 	bl	80011a8 <BMI088_ReadAccData>
		BMI088_ReadTempData(&imu); // TODO put this somewhere else?
 8002614:	4802      	ldr	r0, [pc, #8]	; (8002620 <start_acc_irq_task+0x28>)
 8002616:	f7fe fe76 	bl	8001306 <BMI088_ReadTempData>
		osSemaphoreAcquire(accIRQSemaphoreHandle, osWaitForever);
 800261a:	e7f1      	b.n	8002600 <start_acc_irq_task+0x8>
 800261c:	2000246c 	.word	0x2000246c
 8002620:	2000036c 	.word	0x2000036c

08002624 <start_gyro_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_gyro_irq_task */
void start_gyro_irq_task(void *argument)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_gyro_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(gyroIRQSemaphoreHandle, osWaitForever);
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <start_gyro_irq_task+0x20>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002634:	4618      	mov	r0, r3
 8002636:	f00b f905 	bl	800d844 <osSemaphoreAcquire>
		BMI088_ReadGyroData(&imu);
 800263a:	4803      	ldr	r0, [pc, #12]	; (8002648 <start_gyro_irq_task+0x24>)
 800263c:	f7fe fe0f 	bl	800125e <BMI088_ReadGyroData>
		osSemaphoreAcquire(gyroIRQSemaphoreHandle, osWaitForever);
 8002640:	e7f4      	b.n	800262c <start_gyro_irq_task+0x8>
 8002642:	bf00      	nop
 8002644:	200024c0 	.word	0x200024c0
 8002648:	2000036c 	.word	0x2000036c

0800264c <start_logging_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_logging_task */
void start_logging_task(void *argument)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_logging_task */
	/* Infinite loop */
	for(;;)
	{
		BMI088_LogAccData(&imu);
 8002654:	4809      	ldr	r0, [pc, #36]	; (800267c <start_logging_task+0x30>)
 8002656:	f7fe fe95 	bl	8001384 <BMI088_LogAccData>
		osDelay(2);
 800265a:	2002      	movs	r0, #2
 800265c:	f00a ff3f 	bl	800d4de <osDelay>
		BMI088_LogGyroData(&imu);
 8002660:	4806      	ldr	r0, [pc, #24]	; (800267c <start_logging_task+0x30>)
 8002662:	f7fe fecd 	bl	8001400 <BMI088_LogGyroData>
		osDelay(2);
 8002666:	2002      	movs	r0, #2
 8002668:	f00a ff39 	bl	800d4de <osDelay>
//		BMI088_LogTempData(&imu);
//		osDelay(10);
		BMP388_LogData(&press_sensor);
 800266c:	4804      	ldr	r0, [pc, #16]	; (8002680 <start_logging_task+0x34>)
 800266e:	f7ff fb8b 	bl	8001d88 <BMP388_LogData>
		osDelay(2);
 8002672:	2002      	movs	r0, #2
 8002674:	f00a ff33 	bl	800d4de <osDelay>
		BMI088_LogAccData(&imu);
 8002678:	e7ec      	b.n	8002654 <start_logging_task+0x8>
 800267a:	bf00      	nop
 800267c:	2000036c 	.word	0x2000036c
 8002680:	200003a8 	.word	0x200003a8

08002684 <start_pressure_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_pressure_irq_task */
void start_pressure_irq_task(void *argument)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN start_pressure_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(pressureIRQSemaphoreHandle, osWaitForever);
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <start_pressure_irq_task+0x20>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002694:	4618      	mov	r0, r3
 8002696:	f00b f8d5 	bl	800d844 <osSemaphoreAcquire>
		BMP388_ReadData(&press_sensor);
 800269a:	4803      	ldr	r0, [pc, #12]	; (80026a8 <start_pressure_irq_task+0x24>)
 800269c:	f7ff fa18 	bl	8001ad0 <BMP388_ReadData>
		osSemaphoreAcquire(pressureIRQSemaphoreHandle, osWaitForever);
 80026a0:	e7f4      	b.n	800268c <start_pressure_irq_task+0x8>
 80026a2:	bf00      	nop
 80026a4:	20002514 	.word	0x20002514
 80026a8:	200003a8 	.word	0x200003a8

080026ac <HAL_GPIO_EXTI_Callback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == imu.acc_irq_pin)
 80026b6:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_GPIO_EXTI_Callback+0x54>)
 80026b8:	8a9b      	ldrh	r3, [r3, #20]
 80026ba:	88fa      	ldrh	r2, [r7, #6]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d105      	bne.n	80026cc <HAL_GPIO_EXTI_Callback+0x20>
	{
		osSemaphoreRelease(accIRQSemaphoreHandle);
 80026c0:	4b10      	ldr	r3, [pc, #64]	; (8002704 <HAL_GPIO_EXTI_Callback+0x58>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f00b f90f 	bl	800d8e8 <osSemaphoreRelease>
	}
	else if (GPIO_Pin == press_sensor.irq_pin)
	{
		osSemaphoreRelease(pressureIRQSemaphoreHandle);
	}
}
 80026ca:	e014      	b.n	80026f6 <HAL_GPIO_EXTI_Callback+0x4a>
	else if (GPIO_Pin == imu.gyro_irq_pin)
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_GPIO_EXTI_Callback+0x54>)
 80026ce:	8adb      	ldrh	r3, [r3, #22]
 80026d0:	88fa      	ldrh	r2, [r7, #6]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d105      	bne.n	80026e2 <HAL_GPIO_EXTI_Callback+0x36>
		osSemaphoreRelease(gyroIRQSemaphoreHandle);
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <HAL_GPIO_EXTI_Callback+0x5c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f00b f904 	bl	800d8e8 <osSemaphoreRelease>
}
 80026e0:	e009      	b.n	80026f6 <HAL_GPIO_EXTI_Callback+0x4a>
	else if (GPIO_Pin == press_sensor.irq_pin)
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_GPIO_EXTI_Callback+0x60>)
 80026e4:	899b      	ldrh	r3, [r3, #12]
 80026e6:	88fa      	ldrh	r2, [r7, #6]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d104      	bne.n	80026f6 <HAL_GPIO_EXTI_Callback+0x4a>
		osSemaphoreRelease(pressureIRQSemaphoreHandle);
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <HAL_GPIO_EXTI_Callback+0x64>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f00b f8f9 	bl	800d8e8 <osSemaphoreRelease>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	2000036c 	.word	0x2000036c
 8002704:	2000246c 	.word	0x2000246c
 8002708:	200024c0 	.word	0x200024c0
 800270c:	200003a8 	.word	0x200003a8
 8002710:	20002514 	.word	0x20002514

08002714 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002718:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <MX_FDCAN1_Init+0x84>)
 800271a:	4a20      	ldr	r2, [pc, #128]	; (800279c <MX_FDCAN1_Init+0x88>)
 800271c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800271e:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <MX_FDCAN1_Init+0x84>)
 8002720:	2200      	movs	r2, #0
 8002722:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002724:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <MX_FDCAN1_Init+0x84>)
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <MX_FDCAN1_Init+0x84>)
 800272c:	2200      	movs	r2, #0
 800272e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <MX_FDCAN1_Init+0x84>)
 8002732:	2201      	movs	r2, #1
 8002734:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8002736:	4b18      	ldr	r3, [pc, #96]	; (8002798 <MX_FDCAN1_Init+0x84>)
 8002738:	2201      	movs	r2, #1
 800273a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800273c:	4b16      	ldr	r3, [pc, #88]	; (8002798 <MX_FDCAN1_Init+0x84>)
 800273e:	2200      	movs	r2, #0
 8002740:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <MX_FDCAN1_Init+0x84>)
 8002744:	2210      	movs	r2, #16
 8002746:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002748:	4b13      	ldr	r3, [pc, #76]	; (8002798 <MX_FDCAN1_Init+0x84>)
 800274a:	2201      	movs	r2, #1
 800274c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <MX_FDCAN1_Init+0x84>)
 8002750:	2202      	movs	r2, #2
 8002752:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <MX_FDCAN1_Init+0x84>)
 8002756:	2202      	movs	r2, #2
 8002758:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800275a:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <MX_FDCAN1_Init+0x84>)
 800275c:	2201      	movs	r2, #1
 800275e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002760:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <MX_FDCAN1_Init+0x84>)
 8002762:	2201      	movs	r2, #1
 8002764:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <MX_FDCAN1_Init+0x84>)
 8002768:	2201      	movs	r2, #1
 800276a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <MX_FDCAN1_Init+0x84>)
 800276e:	2201      	movs	r2, #1
 8002770:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <MX_FDCAN1_Init+0x84>)
 8002774:	2200      	movs	r2, #0
 8002776:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002778:	4b07      	ldr	r3, [pc, #28]	; (8002798 <MX_FDCAN1_Init+0x84>)
 800277a:	2200      	movs	r2, #0
 800277c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <MX_FDCAN1_Init+0x84>)
 8002780:	2200      	movs	r2, #0
 8002782:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002784:	4804      	ldr	r0, [pc, #16]	; (8002798 <MX_FDCAN1_Init+0x84>)
 8002786:	f000 ff1d 	bl	80035c4 <HAL_FDCAN_Init>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8002790:	f000 fb02 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20002568 	.word	0x20002568
 800279c:	40006400 	.word	0x40006400

080027a0 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80027a4:	4b1f      	ldr	r3, [pc, #124]	; (8002824 <MX_FDCAN2_Init+0x84>)
 80027a6:	4a20      	ldr	r2, [pc, #128]	; (8002828 <MX_FDCAN2_Init+0x88>)
 80027a8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80027aa:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <MX_FDCAN2_Init+0x84>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80027b0:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <MX_FDCAN2_Init+0x84>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80027b6:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <MX_FDCAN2_Init+0x84>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <MX_FDCAN2_Init+0x84>)
 80027be:	2201      	movs	r2, #1
 80027c0:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = ENABLE;
 80027c2:	4b18      	ldr	r3, [pc, #96]	; (8002824 <MX_FDCAN2_Init+0x84>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80027c8:	4b16      	ldr	r3, [pc, #88]	; (8002824 <MX_FDCAN2_Init+0x84>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <MX_FDCAN2_Init+0x84>)
 80027d0:	2210      	movs	r2, #16
 80027d2:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <MX_FDCAN2_Init+0x84>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <MX_FDCAN2_Init+0x84>)
 80027dc:	2202      	movs	r2, #2
 80027de:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80027e0:	4b10      	ldr	r3, [pc, #64]	; (8002824 <MX_FDCAN2_Init+0x84>)
 80027e2:	2202      	movs	r2, #2
 80027e4:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80027e6:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <MX_FDCAN2_Init+0x84>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80027ec:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <MX_FDCAN2_Init+0x84>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80027f2:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <MX_FDCAN2_Init+0x84>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <MX_FDCAN2_Init+0x84>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <MX_FDCAN2_Init+0x84>)
 8002800:	2200      	movs	r2, #0
 8002802:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002804:	4b07      	ldr	r3, [pc, #28]	; (8002824 <MX_FDCAN2_Init+0x84>)
 8002806:	2200      	movs	r2, #0
 8002808:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <MX_FDCAN2_Init+0x84>)
 800280c:	2200      	movs	r2, #0
 800280e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002810:	4804      	ldr	r0, [pc, #16]	; (8002824 <MX_FDCAN2_Init+0x84>)
 8002812:	f000 fed7 	bl	80035c4 <HAL_FDCAN_Init>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 800281c:	f000 fabc 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}
 8002824:	200025cc 	.word	0x200025cc
 8002828:	40006800 	.word	0x40006800

0800282c <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b0a0      	sub	sp, #128	; 0x80
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002844:	f107 0318 	add.w	r3, r7, #24
 8002848:	2254      	movs	r2, #84	; 0x54
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f00f fcb6 	bl	80121be <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a48      	ldr	r2, [pc, #288]	; (8002978 <HAL_FDCAN_MspInit+0x14c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d142      	bne.n	80028e2 <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800285c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002860:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002866:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002868:	f107 0318 	add.w	r3, r7, #24
 800286c:	4618      	mov	r0, r3
 800286e:	f004 fb89 	bl	8006f84 <HAL_RCCEx_PeriphCLKConfig>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002878:	f000 fa8e 	bl	8002d98 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800287c:	4b3f      	ldr	r3, [pc, #252]	; (800297c <HAL_FDCAN_MspInit+0x150>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	3301      	adds	r3, #1
 8002882:	4a3e      	ldr	r2, [pc, #248]	; (800297c <HAL_FDCAN_MspInit+0x150>)
 8002884:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002886:	4b3d      	ldr	r3, [pc, #244]	; (800297c <HAL_FDCAN_MspInit+0x150>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d10b      	bne.n	80028a6 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800288e:	4b3c      	ldr	r3, [pc, #240]	; (8002980 <HAL_FDCAN_MspInit+0x154>)
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	4a3b      	ldr	r2, [pc, #236]	; (8002980 <HAL_FDCAN_MspInit+0x154>)
 8002894:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002898:	6593      	str	r3, [r2, #88]	; 0x58
 800289a:	4b39      	ldr	r3, [pc, #228]	; (8002980 <HAL_FDCAN_MspInit+0x154>)
 800289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a6:	4b36      	ldr	r3, [pc, #216]	; (8002980 <HAL_FDCAN_MspInit+0x154>)
 80028a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028aa:	4a35      	ldr	r2, [pc, #212]	; (8002980 <HAL_FDCAN_MspInit+0x154>)
 80028ac:	f043 0302 	orr.w	r3, r3, #2
 80028b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028b2:	4b33      	ldr	r3, [pc, #204]	; (8002980 <HAL_FDCAN_MspInit+0x154>)
 80028b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028cc:	2300      	movs	r3, #0
 80028ce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80028d0:	2309      	movs	r3, #9
 80028d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028d8:	4619      	mov	r1, r3
 80028da:	482a      	ldr	r0, [pc, #168]	; (8002984 <HAL_FDCAN_MspInit+0x158>)
 80028dc:	f001 f838 	bl	8003950 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 80028e0:	e045      	b.n	800296e <HAL_FDCAN_MspInit+0x142>
  else if(fdcanHandle->Instance==FDCAN2)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a28      	ldr	r2, [pc, #160]	; (8002988 <HAL_FDCAN_MspInit+0x15c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d140      	bne.n	800296e <HAL_FDCAN_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80028ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80028f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028f6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028f8:	f107 0318 	add.w	r3, r7, #24
 80028fc:	4618      	mov	r0, r3
 80028fe:	f004 fb41 	bl	8006f84 <HAL_RCCEx_PeriphCLKConfig>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_FDCAN_MspInit+0xe0>
      Error_Handler();
 8002908:	f000 fa46 	bl	8002d98 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_FDCAN_MspInit+0x150>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3301      	adds	r3, #1
 8002912:	4a1a      	ldr	r2, [pc, #104]	; (800297c <HAL_FDCAN_MspInit+0x150>)
 8002914:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002916:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_FDCAN_MspInit+0x150>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d10b      	bne.n	8002936 <HAL_FDCAN_MspInit+0x10a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800291e:	4b18      	ldr	r3, [pc, #96]	; (8002980 <HAL_FDCAN_MspInit+0x154>)
 8002920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002922:	4a17      	ldr	r2, [pc, #92]	; (8002980 <HAL_FDCAN_MspInit+0x154>)
 8002924:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002928:	6593      	str	r3, [r2, #88]	; 0x58
 800292a:	4b15      	ldr	r3, [pc, #84]	; (8002980 <HAL_FDCAN_MspInit+0x154>)
 800292c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002936:	4b12      	ldr	r3, [pc, #72]	; (8002980 <HAL_FDCAN_MspInit+0x154>)
 8002938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293a:	4a11      	ldr	r2, [pc, #68]	; (8002980 <HAL_FDCAN_MspInit+0x154>)
 800293c:	f043 0302 	orr.w	r3, r3, #2
 8002940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002942:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <HAL_FDCAN_MspInit+0x154>)
 8002944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800294e:	2360      	movs	r3, #96	; 0x60
 8002950:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002952:	2302      	movs	r3, #2
 8002954:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295a:	2300      	movs	r3, #0
 800295c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800295e:	2309      	movs	r3, #9
 8002960:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002962:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002966:	4619      	mov	r1, r3
 8002968:	4806      	ldr	r0, [pc, #24]	; (8002984 <HAL_FDCAN_MspInit+0x158>)
 800296a:	f000 fff1 	bl	8003950 <HAL_GPIO_Init>
}
 800296e:	bf00      	nop
 8002970:	3780      	adds	r7, #128	; 0x80
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40006400 	.word	0x40006400
 800297c:	20002630 	.word	0x20002630
 8002980:	40021000 	.word	0x40021000
 8002984:	48000400 	.word	0x48000400
 8002988:	40006800 	.word	0x40006800

0800298c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	; 0x28
 8002990:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002992:	f107 0314 	add.w	r3, r7, #20
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	609a      	str	r2, [r3, #8]
 800299e:	60da      	str	r2, [r3, #12]
 80029a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a2:	4b72      	ldr	r3, [pc, #456]	; (8002b6c <MX_GPIO_Init+0x1e0>)
 80029a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a6:	4a71      	ldr	r2, [pc, #452]	; (8002b6c <MX_GPIO_Init+0x1e0>)
 80029a8:	f043 0304 	orr.w	r3, r3, #4
 80029ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ae:	4b6f      	ldr	r3, [pc, #444]	; (8002b6c <MX_GPIO_Init+0x1e0>)
 80029b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029ba:	4b6c      	ldr	r3, [pc, #432]	; (8002b6c <MX_GPIO_Init+0x1e0>)
 80029bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029be:	4a6b      	ldr	r2, [pc, #428]	; (8002b6c <MX_GPIO_Init+0x1e0>)
 80029c0:	f043 0320 	orr.w	r3, r3, #32
 80029c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029c6:	4b69      	ldr	r3, [pc, #420]	; (8002b6c <MX_GPIO_Init+0x1e0>)
 80029c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d2:	4b66      	ldr	r3, [pc, #408]	; (8002b6c <MX_GPIO_Init+0x1e0>)
 80029d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d6:	4a65      	ldr	r2, [pc, #404]	; (8002b6c <MX_GPIO_Init+0x1e0>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029de:	4b63      	ldr	r3, [pc, #396]	; (8002b6c <MX_GPIO_Init+0x1e0>)
 80029e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ea:	4b60      	ldr	r3, [pc, #384]	; (8002b6c <MX_GPIO_Init+0x1e0>)
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ee:	4a5f      	ldr	r2, [pc, #380]	; (8002b6c <MX_GPIO_Init+0x1e0>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029f6:	4b5d      	ldr	r3, [pc, #372]	; (8002b6c <MX_GPIO_Init+0x1e0>)
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	607b      	str	r3, [r7, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO2_Pin|GPIO3_Pin, GPIO_PIN_RESET);
 8002a02:	2200      	movs	r2, #0
 8002a04:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002a08:	4859      	ldr	r0, [pc, #356]	; (8002b70 <MX_GPIO_Init+0x1e4>)
 8002a0a:	f001 f923 	bl	8003c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GYRO_CS_Pin|ACCEL_CS_Pin, GPIO_PIN_SET);
 8002a0e:	2201      	movs	r2, #1
 8002a10:	2111      	movs	r1, #17
 8002a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a16:	f001 f91d 	bl	8003c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CC2500_CS_GPIO_Port, CC2500_CS_Pin, GPIO_PIN_SET);
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	2102      	movs	r1, #2
 8002a1e:	4855      	ldr	r0, [pc, #340]	; (8002b74 <MX_GPIO_Init+0x1e8>)
 8002a20:	f001 f918 	bl	8003c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO8_Pin|GPIO9_Pin|GPIO7_Pin|GPIO4_Pin
 8002a24:	2200      	movs	r2, #0
 8002a26:	f648 4190 	movw	r1, #35984	; 0x8c90
 8002a2a:	4852      	ldr	r0, [pc, #328]	; (8002b74 <MX_GPIO_Init+0x1e8>)
 8002a2c:	f001 f912 	bl	8003c54 <HAL_GPIO_WritePin>
                          |GPIO1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO6_Pin|GPIO5_Pin, GPIO_PIN_RESET);
 8002a30:	2200      	movs	r2, #0
 8002a32:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8002a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a3a:	f001 f90b 	bl	8003c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO3_Pin;
 8002a3e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a44:	2301      	movs	r3, #1
 8002a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a50:	f107 0314 	add.w	r3, r7, #20
 8002a54:	4619      	mov	r1, r3
 8002a56:	4846      	ldr	r0, [pc, #280]	; (8002b70 <MX_GPIO_Init+0x1e4>)
 8002a58:	f000 ff7a 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin;
 8002a5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_INT_GPIO_Port, &GPIO_InitStruct);
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	4619      	mov	r1, r3
 8002a72:	483f      	ldr	r0, [pc, #252]	; (8002b70 <MX_GPIO_Init+0x1e4>)
 8002a74:	f000 ff6c 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin|ACCEL_CS_Pin;
 8002a78:	2311      	movs	r3, #17
 8002a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a80:	2301      	movs	r3, #1
 8002a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a84:	2300      	movs	r3, #0
 8002a86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a92:	f000 ff5d 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8002a96:	2302      	movs	r3, #2
 8002a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aae:	f000 ff4f 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CC2500_GDO0_Pin|CC2500_GDO2_Pin|MAG_DRDY_Pin|MAG_INT_Pin;
 8002ab2:	f243 0305 	movw	r3, #12293	; 0x3005
 8002ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	482b      	ldr	r0, [pc, #172]	; (8002b74 <MX_GPIO_Init+0x1e8>)
 8002ac8:	f000 ff42 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CC2500_CS_Pin;
 8002acc:	2302      	movs	r3, #2
 8002ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CC2500_CS_GPIO_Port, &GPIO_InitStruct);
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4824      	ldr	r0, [pc, #144]	; (8002b74 <MX_GPIO_Init+0x1e8>)
 8002ae4:	f000 ff34 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = GPIO8_Pin|GPIO9_Pin|GPIO7_Pin|GPIO4_Pin
 8002ae8:	f648 4390 	movw	r3, #35984	; 0x8c90
 8002aec:	617b      	str	r3, [r7, #20]
                          |GPIO1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aee:	2301      	movs	r3, #1
 8002af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af6:	2300      	movs	r3, #0
 8002af8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afa:	f107 0314 	add.w	r3, r7, #20
 8002afe:	4619      	mov	r1, r3
 8002b00:	481c      	ldr	r0, [pc, #112]	; (8002b74 <MX_GPIO_Init+0x1e8>)
 8002b02:	f000 ff25 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP_INT_Pin;
 8002b06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b12:	2302      	movs	r3, #2
 8002b14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BMP_INT_GPIO_Port, &GPIO_InitStruct);
 8002b16:	f107 0314 	add.w	r3, r7, #20
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4815      	ldr	r0, [pc, #84]	; (8002b74 <MX_GPIO_Init+0x1e8>)
 8002b1e:	f000 ff17 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO6_Pin|GPIO5_Pin;
 8002b22:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8002b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b30:	2300      	movs	r3, #0
 8002b32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b34:	f107 0314 	add.w	r3, r7, #20
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b3e:	f000 ff07 	bl	8003950 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2105      	movs	r1, #5
 8002b46:	2007      	movs	r0, #7
 8002b48:	f000 fd14 	bl	8003574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002b4c:	2007      	movs	r0, #7
 8002b4e:	f000 fd2b 	bl	80035a8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2105      	movs	r1, #5
 8002b56:	2028      	movs	r0, #40	; 0x28
 8002b58:	f000 fd0c 	bl	8003574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b5c:	2028      	movs	r0, #40	; 0x28
 8002b5e:	f000 fd23 	bl	80035a8 <HAL_NVIC_EnableIRQ>

}
 8002b62:	bf00      	nop
 8002b64:	3728      	adds	r7, #40	; 0x28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	48000800 	.word	0x48000800
 8002b74:	48000400 	.word	0x48000400

08002b78 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <MX_I2C2_Init+0x74>)
 8002b7e:	4a1c      	ldr	r2, [pc, #112]	; (8002bf0 <MX_I2C2_Init+0x78>)
 8002b80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10802D9B;
 8002b82:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <MX_I2C2_Init+0x74>)
 8002b84:	4a1b      	ldr	r2, [pc, #108]	; (8002bf4 <MX_I2C2_Init+0x7c>)
 8002b86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002b88:	4b18      	ldr	r3, [pc, #96]	; (8002bec <MX_I2C2_Init+0x74>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b8e:	4b17      	ldr	r3, [pc, #92]	; (8002bec <MX_I2C2_Init+0x74>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b94:	4b15      	ldr	r3, [pc, #84]	; (8002bec <MX_I2C2_Init+0x74>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002b9a:	4b14      	ldr	r3, [pc, #80]	; (8002bec <MX_I2C2_Init+0x74>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ba0:	4b12      	ldr	r3, [pc, #72]	; (8002bec <MX_I2C2_Init+0x74>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ba6:	4b11      	ldr	r3, [pc, #68]	; (8002bec <MX_I2C2_Init+0x74>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bac:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <MX_I2C2_Init+0x74>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002bb2:	480e      	ldr	r0, [pc, #56]	; (8002bec <MX_I2C2_Init+0x74>)
 8002bb4:	f001 f87e 	bl	8003cb4 <HAL_I2C_Init>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002bbe:	f000 f8eb 	bl	8002d98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	4809      	ldr	r0, [pc, #36]	; (8002bec <MX_I2C2_Init+0x74>)
 8002bc6:	f001 fe01 	bl	80047cc <HAL_I2CEx_ConfigAnalogFilter>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002bd0:	f000 f8e2 	bl	8002d98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4805      	ldr	r0, [pc, #20]	; (8002bec <MX_I2C2_Init+0x74>)
 8002bd8:	f001 fe43 	bl	8004862 <HAL_I2CEx_ConfigDigitalFilter>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002be2:	f000 f8d9 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20002634 	.word	0x20002634
 8002bf0:	40005800 	.word	0x40005800
 8002bf4:	10802d9b 	.word	0x10802d9b

08002bf8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b09e      	sub	sp, #120	; 0x78
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c10:	f107 0310 	add.w	r3, r7, #16
 8002c14:	2254      	movs	r2, #84	; 0x54
 8002c16:	2100      	movs	r1, #0
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f00f fad0 	bl	80121be <memset>
  if(i2cHandle->Instance==I2C2)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a1f      	ldr	r2, [pc, #124]	; (8002ca0 <HAL_I2C_MspInit+0xa8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d137      	bne.n	8002c98 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c30:	f107 0310 	add.w	r3, r7, #16
 8002c34:	4618      	mov	r0, r3
 8002c36:	f004 f9a5 	bl	8006f84 <HAL_RCCEx_PeriphCLKConfig>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002c40:	f000 f8aa 	bl	8002d98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c44:	4b17      	ldr	r3, [pc, #92]	; (8002ca4 <HAL_I2C_MspInit+0xac>)
 8002c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c48:	4a16      	ldr	r2, [pc, #88]	; (8002ca4 <HAL_I2C_MspInit+0xac>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c50:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <HAL_I2C_MspInit+0xac>)
 8002c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c60:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c62:	2312      	movs	r3, #18
 8002c64:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c6e:	2304      	movs	r3, #4
 8002c70:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c72:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c76:	4619      	mov	r1, r3
 8002c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c7c:	f000 fe68 	bl	8003950 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c80:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <HAL_I2C_MspInit+0xac>)
 8002c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c84:	4a07      	ldr	r2, [pc, #28]	; (8002ca4 <HAL_I2C_MspInit+0xac>)
 8002c86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c8c:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_I2C_MspInit+0xac>)
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002c98:	bf00      	nop
 8002c9a:	3778      	adds	r7, #120	; 0x78
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40005800 	.word	0x40005800
 8002ca4:	40021000 	.word	0x40021000

08002ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cac:	f000 fb73 	bl	8003396 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cb0:	f000 f815 	bl	8002cde <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cb4:	f7ff fe6a 	bl	800298c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8002cb8:	f7ff fd2c 	bl	8002714 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8002cbc:	f7ff fd70 	bl	80027a0 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8002cc0:	f7ff ff5a 	bl	8002b78 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002cc4:	f000 f86e 	bl	8002da4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002cc8:	f000 fa98 	bl	80031fc <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 8002ccc:	f00d ffce 	bl	8010c6c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002cd0:	f00a fb0a 	bl	800d2e8 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002cd4:	f7ff fbba 	bl	800244c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002cd8:	f00a fb2a 	bl	800d330 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002cdc:	e7fe      	b.n	8002cdc <main+0x34>

08002cde <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b094      	sub	sp, #80	; 0x50
 8002ce2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ce4:	f107 0318 	add.w	r3, r7, #24
 8002ce8:	2238      	movs	r2, #56	; 0x38
 8002cea:	2100      	movs	r1, #0
 8002cec:	4618      	mov	r0, r3
 8002cee:	f00f fa66 	bl	80121be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002d00:	2000      	movs	r0, #0
 8002d02:	f003 fb2f 	bl	8006364 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002d06:	2321      	movs	r3, #33	; 0x21
 8002d08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002d10:	2301      	movs	r3, #1
 8002d12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d14:	2302      	movs	r3, #2
 8002d16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002d20:	2355      	movs	r3, #85	; 0x55
 8002d22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d24:	2302      	movs	r3, #2
 8002d26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8002d28:	2308      	movs	r3, #8
 8002d2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d30:	f107 0318 	add.w	r3, r7, #24
 8002d34:	4618      	mov	r0, r3
 8002d36:	f003 fbc9 	bl	80064cc <HAL_RCC_OscConfig>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002d40:	f000 f82a 	bl	8002d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d44:	230f      	movs	r3, #15
 8002d46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d50:	2300      	movs	r3, #0
 8002d52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002d58:	1d3b      	adds	r3, r7, #4
 8002d5a:	2104      	movs	r1, #4
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f003 fec7 	bl	8006af0 <HAL_RCC_ClockConfig>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002d68:	f000 f816 	bl	8002d98 <Error_Handler>
  }
}
 8002d6c:	bf00      	nop
 8002d6e:	3750      	adds	r7, #80	; 0x50
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d86:	f000 fb1f 	bl	80033c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40001000 	.word	0x40001000

08002d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d9c:	b672      	cpsid	i
}
 8002d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002da0:	e7fe      	b.n	8002da0 <Error_Handler+0x8>
	...

08002da4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002da8:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <MX_SPI1_Init+0x74>)
 8002daa:	4a1c      	ldr	r2, [pc, #112]	; (8002e1c <MX_SPI1_Init+0x78>)
 8002dac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002dae:	4b1a      	ldr	r3, [pc, #104]	; (8002e18 <MX_SPI1_Init+0x74>)
 8002db0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002db4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002db6:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <MX_SPI1_Init+0x74>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dbc:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <MX_SPI1_Init+0x74>)
 8002dbe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002dc2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dc4:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <MX_SPI1_Init+0x74>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002dca:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <MX_SPI1_Init+0x74>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <MX_SPI1_Init+0x74>)
 8002dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <MX_SPI1_Init+0x74>)
 8002dda:	2218      	movs	r2, #24
 8002ddc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dde:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <MX_SPI1_Init+0x74>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <MX_SPI1_Init+0x74>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <MX_SPI1_Init+0x74>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002df0:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <MX_SPI1_Init+0x74>)
 8002df2:	2207      	movs	r2, #7
 8002df4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <MX_SPI1_Init+0x74>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <MX_SPI1_Init+0x74>)
 8002dfe:	2208      	movs	r2, #8
 8002e00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e02:	4805      	ldr	r0, [pc, #20]	; (8002e18 <MX_SPI1_Init+0x74>)
 8002e04:	f004 fb0c 	bl	8007420 <HAL_SPI_Init>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002e0e:	f7ff ffc3 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20002688 	.word	0x20002688
 8002e1c:	40013000 	.word	0x40013000

08002e20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <HAL_SPI_MspInit+0x7c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d128      	bne.n	8002e94 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e42:	4b17      	ldr	r3, [pc, #92]	; (8002ea0 <HAL_SPI_MspInit+0x80>)
 8002e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e46:	4a16      	ldr	r2, [pc, #88]	; (8002ea0 <HAL_SPI_MspInit+0x80>)
 8002e48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e4c:	6613      	str	r3, [r2, #96]	; 0x60
 8002e4e:	4b14      	ldr	r3, [pc, #80]	; (8002ea0 <HAL_SPI_MspInit+0x80>)
 8002e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5a:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <HAL_SPI_MspInit+0x80>)
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5e:	4a10      	ldr	r2, [pc, #64]	; (8002ea0 <HAL_SPI_MspInit+0x80>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e66:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <HAL_SPI_MspInit+0x80>)
 8002e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e72:	23e0      	movs	r3, #224	; 0xe0
 8002e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e76:	2302      	movs	r3, #2
 8002e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e82:	2305      	movs	r3, #5
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e86:	f107 0314 	add.w	r3, r7, #20
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e90:	f000 fd5e 	bl	8003950 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002e94:	bf00      	nop
 8002e96:	3728      	adds	r7, #40	; 0x28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40013000 	.word	0x40013000
 8002ea0:	40021000 	.word	0x40021000

08002ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eaa:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <HAL_MspInit+0x50>)
 8002eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eae:	4a11      	ldr	r2, [pc, #68]	; (8002ef4 <HAL_MspInit+0x50>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6613      	str	r3, [r2, #96]	; 0x60
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <HAL_MspInit+0x50>)
 8002eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <HAL_MspInit+0x50>)
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec6:	4a0b      	ldr	r2, [pc, #44]	; (8002ef4 <HAL_MspInit+0x50>)
 8002ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_MspInit+0x50>)
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002eda:	2200      	movs	r2, #0
 8002edc:	210f      	movs	r1, #15
 8002ede:	f06f 0001 	mvn.w	r0, #1
 8002ee2:	f000 fb47 	bl	8003574 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002ee6:	f003 fae1 	bl	80064ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40021000 	.word	0x40021000

08002ef8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08c      	sub	sp, #48	; 0x30
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f08:	4b2c      	ldr	r3, [pc, #176]	; (8002fbc <HAL_InitTick+0xc4>)
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0c:	4a2b      	ldr	r2, [pc, #172]	; (8002fbc <HAL_InitTick+0xc4>)
 8002f0e:	f043 0310 	orr.w	r3, r3, #16
 8002f12:	6593      	str	r3, [r2, #88]	; 0x58
 8002f14:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <HAL_InitTick+0xc4>)
 8002f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f20:	f107 020c 	add.w	r2, r7, #12
 8002f24:	f107 0310 	add.w	r3, r7, #16
 8002f28:	4611      	mov	r1, r2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f003 ffb4 	bl	8006e98 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002f30:	f003 ff86 	bl	8006e40 <HAL_RCC_GetPCLK1Freq>
 8002f34:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	4a21      	ldr	r2, [pc, #132]	; (8002fc0 <HAL_InitTick+0xc8>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	0c9b      	lsrs	r3, r3, #18
 8002f40:	3b01      	subs	r3, #1
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002f44:	4b1f      	ldr	r3, [pc, #124]	; (8002fc4 <HAL_InitTick+0xcc>)
 8002f46:	4a20      	ldr	r2, [pc, #128]	; (8002fc8 <HAL_InitTick+0xd0>)
 8002f48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	; (8002fc4 <HAL_InitTick+0xcc>)
 8002f4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f50:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002f52:	4a1c      	ldr	r2, [pc, #112]	; (8002fc4 <HAL_InitTick+0xcc>)
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002f58:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <HAL_InitTick+0xcc>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f5e:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <HAL_InitTick+0xcc>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002f64:	4817      	ldr	r0, [pc, #92]	; (8002fc4 <HAL_InitTick+0xcc>)
 8002f66:	f005 f801 	bl	8007f6c <HAL_TIM_Base_Init>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002f70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d11b      	bne.n	8002fb0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002f78:	4812      	ldr	r0, [pc, #72]	; (8002fc4 <HAL_InitTick+0xcc>)
 8002f7a:	f005 f859 	bl	8008030 <HAL_TIM_Base_Start_IT>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002f84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d111      	bne.n	8002fb0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f8c:	2036      	movs	r0, #54	; 0x36
 8002f8e:	f000 fb0b 	bl	80035a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b0f      	cmp	r3, #15
 8002f96:	d808      	bhi.n	8002faa <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	2036      	movs	r0, #54	; 0x36
 8002f9e:	f000 fae9 	bl	8003574 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fa2:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <HAL_InitTick+0xd4>)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	e002      	b.n	8002fb0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002fb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3730      	adds	r7, #48	; 0x30
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	431bde83 	.word	0x431bde83
 8002fc4:	200026ec 	.word	0x200026ec
 8002fc8:	40001000 	.word	0x40001000
 8002fcc:	20000004 	.word	0x20000004

08002fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fd4:	e7fe      	b.n	8002fd4 <NMI_Handler+0x4>

08002fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fda:	e7fe      	b.n	8002fda <HardFault_Handler+0x4>

08002fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fe0:	e7fe      	b.n	8002fe0 <MemManage_Handler+0x4>

08002fe2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fe6:	e7fe      	b.n	8002fe6 <BusFault_Handler+0x4>

08002fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fec:	e7fe      	b.n	8002fec <UsageFault_Handler+0x4>

08002fee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT_Pin);
 8003000:	2002      	movs	r0, #2
 8003002:	f000 fe3f 	bl	8003c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003010:	4802      	ldr	r0, [pc, #8]	; (800301c <USB_LP_IRQHandler+0x10>)
 8003012:	f001 fd62 	bl	8004ada <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20005498 	.word	0x20005498

08003020 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BMP_INT_Pin);
 8003024:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003028:	f000 fe2c 	bl	8003c84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INT_Pin);
 800302c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003030:	f000 fe28 	bl	8003c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}

08003038 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800303c:	4802      	ldr	r0, [pc, #8]	; (8003048 <TIM6_DAC_IRQHandler+0x10>)
 800303e:	f005 f86f 	bl	8008120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	200026ec 	.word	0x200026ec

0800304c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return 1;
 8003050:	2301      	movs	r3, #1
}
 8003052:	4618      	mov	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <_kill>:

int _kill(int pid, int sig)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003066:	f00f f953 	bl	8012310 <__errno>
 800306a:	4603      	mov	r3, r0
 800306c:	2216      	movs	r2, #22
 800306e:	601a      	str	r2, [r3, #0]
  return -1;
 8003070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <_exit>:

void _exit (int status)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003084:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff ffe7 	bl	800305c <_kill>
  while (1) {}    /* Make sure we hang here */
 800308e:	e7fe      	b.n	800308e <_exit+0x12>

08003090 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	e00a      	b.n	80030b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030a2:	f3af 8000 	nop.w
 80030a6:	4601      	mov	r1, r0
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	60ba      	str	r2, [r7, #8]
 80030ae:	b2ca      	uxtb	r2, r1
 80030b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	3301      	adds	r3, #1
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	429a      	cmp	r2, r3
 80030be:	dbf0      	blt.n	80030a2 <_read+0x12>
  }

  return len;
 80030c0:	687b      	ldr	r3, [r7, #4]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b086      	sub	sp, #24
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	e009      	b.n	80030f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	60ba      	str	r2, [r7, #8]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	3301      	adds	r3, #1
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	dbf1      	blt.n	80030dc <_write+0x12>
  }
  return len;
 80030f8:	687b      	ldr	r3, [r7, #4]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <_close>:

int _close(int file)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800310a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800310e:	4618      	mov	r0, r3
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800312a:	605a      	str	r2, [r3, #4]
  return 0;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <_isatty>:

int _isatty(int file)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003142:	2301      	movs	r3, #1
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003174:	4a14      	ldr	r2, [pc, #80]	; (80031c8 <_sbrk+0x5c>)
 8003176:	4b15      	ldr	r3, [pc, #84]	; (80031cc <_sbrk+0x60>)
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003180:	4b13      	ldr	r3, [pc, #76]	; (80031d0 <_sbrk+0x64>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d102      	bne.n	800318e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003188:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <_sbrk+0x64>)
 800318a:	4a12      	ldr	r2, [pc, #72]	; (80031d4 <_sbrk+0x68>)
 800318c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800318e:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <_sbrk+0x64>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4413      	add	r3, r2
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	429a      	cmp	r2, r3
 800319a:	d207      	bcs.n	80031ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800319c:	f00f f8b8 	bl	8012310 <__errno>
 80031a0:	4603      	mov	r3, r0
 80031a2:	220c      	movs	r2, #12
 80031a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031aa:	e009      	b.n	80031c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031ac:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <_sbrk+0x64>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031b2:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <_sbrk+0x64>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4413      	add	r3, r2
 80031ba:	4a05      	ldr	r2, [pc, #20]	; (80031d0 <_sbrk+0x64>)
 80031bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031be:	68fb      	ldr	r3, [r7, #12]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20020000 	.word	0x20020000
 80031cc:	00000400 	.word	0x00000400
 80031d0:	20002738 	.word	0x20002738
 80031d4:	20005ae0 	.word	0x20005ae0

080031d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80031dc:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <SystemInit+0x20>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	4a05      	ldr	r2, [pc, #20]	; (80031f8 <SystemInit+0x20>)
 80031e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003200:	4b22      	ldr	r3, [pc, #136]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003202:	4a23      	ldr	r2, [pc, #140]	; (8003290 <MX_USART2_UART_Init+0x94>)
 8003204:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003206:	4b21      	ldr	r3, [pc, #132]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800320c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800320e:	4b1f      	ldr	r3, [pc, #124]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003210:	2200      	movs	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003214:	4b1d      	ldr	r3, [pc, #116]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003216:	2200      	movs	r2, #0
 8003218:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800321a:	4b1c      	ldr	r3, [pc, #112]	; (800328c <MX_USART2_UART_Init+0x90>)
 800321c:	2200      	movs	r2, #0
 800321e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003220:	4b1a      	ldr	r3, [pc, #104]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003222:	220c      	movs	r2, #12
 8003224:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003226:	4b19      	ldr	r3, [pc, #100]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003228:	2200      	movs	r2, #0
 800322a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800322c:	4b17      	ldr	r3, [pc, #92]	; (800328c <MX_USART2_UART_Init+0x90>)
 800322e:	2200      	movs	r2, #0
 8003230:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003232:	4b16      	ldr	r3, [pc, #88]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003234:	2200      	movs	r2, #0
 8003236:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <MX_USART2_UART_Init+0x90>)
 800323a:	2200      	movs	r2, #0
 800323c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003240:	2200      	movs	r2, #0
 8003242:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003244:	4811      	ldr	r0, [pc, #68]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003246:	f005 f9dd 	bl	8008604 <HAL_UART_Init>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003250:	f7ff fda2 	bl	8002d98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003254:	2100      	movs	r1, #0
 8003256:	480d      	ldr	r0, [pc, #52]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003258:	f005 ff78 	bl	800914c <HAL_UARTEx_SetTxFifoThreshold>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003262:	f7ff fd99 	bl	8002d98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003266:	2100      	movs	r1, #0
 8003268:	4808      	ldr	r0, [pc, #32]	; (800328c <MX_USART2_UART_Init+0x90>)
 800326a:	f005 ffad 	bl	80091c8 <HAL_UARTEx_SetRxFifoThreshold>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003274:	f7ff fd90 	bl	8002d98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003278:	4804      	ldr	r0, [pc, #16]	; (800328c <MX_USART2_UART_Init+0x90>)
 800327a:	f005 ff2e 	bl	80090da <HAL_UARTEx_DisableFifoMode>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003284:	f7ff fd88 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003288:	bf00      	nop
 800328a:	bd80      	pop	{r7, pc}
 800328c:	2000273c 	.word	0x2000273c
 8003290:	40004400 	.word	0x40004400

08003294 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b09e      	sub	sp, #120	; 0x78
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032ac:	f107 0310 	add.w	r3, r7, #16
 80032b0:	2254      	movs	r2, #84	; 0x54
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f00e ff82 	bl	80121be <memset>
  if(uartHandle->Instance==USART2)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1f      	ldr	r2, [pc, #124]	; (800333c <HAL_UART_MspInit+0xa8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d136      	bne.n	8003332 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80032c4:	2302      	movs	r3, #2
 80032c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032cc:	f107 0310 	add.w	r3, r7, #16
 80032d0:	4618      	mov	r0, r3
 80032d2:	f003 fe57 	bl	8006f84 <HAL_RCCEx_PeriphCLKConfig>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80032dc:	f7ff fd5c 	bl	8002d98 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032e0:	4b17      	ldr	r3, [pc, #92]	; (8003340 <HAL_UART_MspInit+0xac>)
 80032e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e4:	4a16      	ldr	r2, [pc, #88]	; (8003340 <HAL_UART_MspInit+0xac>)
 80032e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ea:	6593      	str	r3, [r2, #88]	; 0x58
 80032ec:	4b14      	ldr	r3, [pc, #80]	; (8003340 <HAL_UART_MspInit+0xac>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_UART_MspInit+0xac>)
 80032fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fc:	4a10      	ldr	r2, [pc, #64]	; (8003340 <HAL_UART_MspInit+0xac>)
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003304:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <HAL_UART_MspInit+0xac>)
 8003306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003310:	230c      	movs	r3, #12
 8003312:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003314:	2302      	movs	r3, #2
 8003316:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331c:	2300      	movs	r3, #0
 800331e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003320:	2307      	movs	r3, #7
 8003322:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003324:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003328:	4619      	mov	r1, r3
 800332a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800332e:	f000 fb0f 	bl	8003950 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003332:	bf00      	nop
 8003334:	3778      	adds	r7, #120	; 0x78
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40004400 	.word	0x40004400
 8003340:	40021000 	.word	0x40021000

08003344 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003344:	480d      	ldr	r0, [pc, #52]	; (800337c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003346:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003348:	f7ff ff46 	bl	80031d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800334c:	480c      	ldr	r0, [pc, #48]	; (8003380 <LoopForever+0x6>)
  ldr r1, =_edata
 800334e:	490d      	ldr	r1, [pc, #52]	; (8003384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003350:	4a0d      	ldr	r2, [pc, #52]	; (8003388 <LoopForever+0xe>)
  movs r3, #0
 8003352:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003354:	e002      	b.n	800335c <LoopCopyDataInit>

08003356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800335a:	3304      	adds	r3, #4

0800335c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800335c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800335e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003360:	d3f9      	bcc.n	8003356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003362:	4a0a      	ldr	r2, [pc, #40]	; (800338c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003364:	4c0a      	ldr	r4, [pc, #40]	; (8003390 <LoopForever+0x16>)
  movs r3, #0
 8003366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003368:	e001      	b.n	800336e <LoopFillZerobss>

0800336a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800336a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800336c:	3204      	adds	r2, #4

0800336e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800336e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003370:	d3fb      	bcc.n	800336a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003372:	f00e ffd3 	bl	801231c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003376:	f7ff fc97 	bl	8002ca8 <main>

0800337a <LoopForever>:

LoopForever:
    b LoopForever
 800337a:	e7fe      	b.n	800337a <LoopForever>
  ldr   r0, =_estack
 800337c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003384:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8003388:	0801554c 	.word	0x0801554c
  ldr r2, =_sbss
 800338c:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8003390:	20005ae0 	.word	0x20005ae0

08003394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003394:	e7fe      	b.n	8003394 <ADC1_2_IRQHandler>

08003396 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033a0:	2003      	movs	r0, #3
 80033a2:	f000 f8dc 	bl	800355e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033a6:	200f      	movs	r0, #15
 80033a8:	f7ff fda6 	bl	8002ef8 <HAL_InitTick>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	71fb      	strb	r3, [r7, #7]
 80033b6:	e001      	b.n	80033bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033b8:	f7ff fd74 	bl	8002ea4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033bc:	79fb      	ldrb	r3, [r7, #7]

}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_IncTick+0x1c>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_IncTick+0x20>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4413      	add	r3, r2
 80033d6:	4a03      	ldr	r2, [pc, #12]	; (80033e4 <HAL_IncTick+0x1c>)
 80033d8:	6013      	str	r3, [r2, #0]
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	200027d0 	.word	0x200027d0
 80033e8:	20000008 	.word	0x20000008

080033ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return uwTick;
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <HAL_GetTick+0x14>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	200027d0 	.word	0x200027d0

08003404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <__NVIC_SetPriorityGrouping+0x44>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003420:	4013      	ands	r3, r2
 8003422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800342c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003436:	4a04      	ldr	r2, [pc, #16]	; (8003448 <__NVIC_SetPriorityGrouping+0x44>)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	60d3      	str	r3, [r2, #12]
}
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <__NVIC_GetPriorityGrouping+0x18>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	0a1b      	lsrs	r3, r3, #8
 8003456:	f003 0307 	and.w	r3, r3, #7
}
 800345a:	4618      	mov	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	2b00      	cmp	r3, #0
 8003478:	db0b      	blt.n	8003492 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	f003 021f 	and.w	r2, r3, #31
 8003480:	4907      	ldr	r1, [pc, #28]	; (80034a0 <__NVIC_EnableIRQ+0x38>)
 8003482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	2001      	movs	r0, #1
 800348a:	fa00 f202 	lsl.w	r2, r0, r2
 800348e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	e000e100 	.word	0xe000e100

080034a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	6039      	str	r1, [r7, #0]
 80034ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	db0a      	blt.n	80034ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	490c      	ldr	r1, [pc, #48]	; (80034f0 <__NVIC_SetPriority+0x4c>)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	0112      	lsls	r2, r2, #4
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	440b      	add	r3, r1
 80034c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034cc:	e00a      	b.n	80034e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	4908      	ldr	r1, [pc, #32]	; (80034f4 <__NVIC_SetPriority+0x50>)
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	3b04      	subs	r3, #4
 80034dc:	0112      	lsls	r2, r2, #4
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	440b      	add	r3, r1
 80034e2:	761a      	strb	r2, [r3, #24]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000e100 	.word	0xe000e100
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b089      	sub	sp, #36	; 0x24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f1c3 0307 	rsb	r3, r3, #7
 8003512:	2b04      	cmp	r3, #4
 8003514:	bf28      	it	cs
 8003516:	2304      	movcs	r3, #4
 8003518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3304      	adds	r3, #4
 800351e:	2b06      	cmp	r3, #6
 8003520:	d902      	bls.n	8003528 <NVIC_EncodePriority+0x30>
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3b03      	subs	r3, #3
 8003526:	e000      	b.n	800352a <NVIC_EncodePriority+0x32>
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800352c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43da      	mvns	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	401a      	ands	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003540:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	43d9      	mvns	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003550:	4313      	orrs	r3, r2
         );
}
 8003552:	4618      	mov	r0, r3
 8003554:	3724      	adds	r7, #36	; 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff ff4c 	bl	8003404 <__NVIC_SetPriorityGrouping>
}
 800356c:	bf00      	nop
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003582:	f7ff ff63 	bl	800344c <__NVIC_GetPriorityGrouping>
 8003586:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	68b9      	ldr	r1, [r7, #8]
 800358c:	6978      	ldr	r0, [r7, #20]
 800358e:	f7ff ffb3 	bl	80034f8 <NVIC_EncodePriority>
 8003592:	4602      	mov	r2, r0
 8003594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003598:	4611      	mov	r1, r2
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff ff82 	bl	80034a4 <__NVIC_SetPriority>
}
 80035a0:	bf00      	nop
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ff56 	bl	8003468 <__NVIC_EnableIRQ>
}
 80035bc:	bf00      	nop
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e147      	b.n	8003866 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff f91e 	bl	800282c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699a      	ldr	r2, [r3, #24]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0210 	bic.w	r2, r2, #16
 80035fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003600:	f7ff fef4 	bl	80033ec <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003606:	e012      	b.n	800362e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003608:	f7ff fef0 	bl	80033ec <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b0a      	cmp	r3, #10
 8003614:	d90b      	bls.n	800362e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800361a:	f043 0201 	orr.w	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2203      	movs	r2, #3
 8003626:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e11b      	b.n	8003866 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b08      	cmp	r3, #8
 800363a:	d0e5      	beq.n	8003608 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699a      	ldr	r2, [r3, #24]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800364c:	f7ff fece 	bl	80033ec <HAL_GetTick>
 8003650:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003652:	e012      	b.n	800367a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003654:	f7ff feca 	bl	80033ec <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b0a      	cmp	r3, #10
 8003660:	d90b      	bls.n	800367a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003666:	f043 0201 	orr.w	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2203      	movs	r2, #3
 8003672:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e0f5      	b.n	8003866 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0e5      	beq.n	8003654 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699a      	ldr	r2, [r3, #24]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0202 	orr.w	r2, r2, #2
 8003696:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a74      	ldr	r2, [pc, #464]	; (8003870 <HAL_FDCAN_Init+0x2ac>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d103      	bne.n	80036aa <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80036a2:	4a74      	ldr	r2, [pc, #464]	; (8003874 <HAL_FDCAN_Init+0x2b0>)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	7c1b      	ldrb	r3, [r3, #16]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d108      	bne.n	80036c4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699a      	ldr	r2, [r3, #24]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036c0:	619a      	str	r2, [r3, #24]
 80036c2:	e007      	b.n	80036d4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699a      	ldr	r2, [r3, #24]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036d2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	7c5b      	ldrb	r3, [r3, #17]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d108      	bne.n	80036ee <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036ea:	619a      	str	r2, [r3, #24]
 80036ec:	e007      	b.n	80036fe <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699a      	ldr	r2, [r3, #24]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036fc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	7c9b      	ldrb	r3, [r3, #18]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d108      	bne.n	8003718 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699a      	ldr	r2, [r3, #24]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003714:	619a      	str	r2, [r3, #24]
 8003716:	e007      	b.n	8003728 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003726:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699a      	ldr	r2, [r3, #24]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800374c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0210 	bic.w	r2, r2, #16
 800375c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d108      	bne.n	8003778 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699a      	ldr	r2, [r3, #24]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f042 0204 	orr.w	r2, r2, #4
 8003774:	619a      	str	r2, [r3, #24]
 8003776:	e02c      	b.n	80037d2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d028      	beq.n	80037d2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d01c      	beq.n	80037c2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003796:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691a      	ldr	r2, [r3, #16]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0210 	orr.w	r2, r2, #16
 80037a6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d110      	bne.n	80037d2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0220 	orr.w	r2, r2, #32
 80037be:	619a      	str	r2, [r3, #24]
 80037c0:	e007      	b.n	80037d2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699a      	ldr	r2, [r3, #24]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f042 0220 	orr.w	r2, r2, #32
 80037d0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	3b01      	subs	r3, #1
 80037e0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037e2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80037ea:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80037fa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037fc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003806:	d115      	bne.n	8003834 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003812:	3b01      	subs	r3, #1
 8003814:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003816:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	3b01      	subs	r3, #1
 800381e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003820:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	3b01      	subs	r3, #1
 800382a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003830:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003832:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f814 	bl	8003878 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40006400 	.word	0x40006400
 8003874:	40006500 	.word	0x40006500

08003878 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003880:	4b30      	ldr	r3, [pc, #192]	; (8003944 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003882:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a2f      	ldr	r2, [pc, #188]	; (8003948 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d103      	bne.n	8003896 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003894:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a2c      	ldr	r2, [pc, #176]	; (800394c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d103      	bne.n	80038a8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80038a6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038b6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038be:	041a      	lsls	r2, r3, #16
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038dc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	061a      	lsls	r2, r3, #24
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	e005      	b.n	800392a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	3304      	adds	r3, #4
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	429a      	cmp	r2, r3
 8003934:	d3f3      	bcc.n	800391e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8003936:	bf00      	nop
 8003938:	bf00      	nop
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	4000a400 	.word	0x4000a400
 8003948:	40006800 	.word	0x40006800
 800394c:	40006c00 	.word	0x40006c00

08003950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800395e:	e15a      	b.n	8003c16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	2101      	movs	r1, #1
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	fa01 f303 	lsl.w	r3, r1, r3
 800396c:	4013      	ands	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 814c 	beq.w	8003c10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d005      	beq.n	8003990 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800398c:	2b02      	cmp	r3, #2
 800398e:	d130      	bne.n	80039f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	2203      	movs	r2, #3
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4013      	ands	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039c6:	2201      	movs	r2, #1
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43db      	mvns	r3, r3
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4013      	ands	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	091b      	lsrs	r3, r3, #4
 80039dc:	f003 0201 	and.w	r2, r3, #1
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	d017      	beq.n	8003a2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	2203      	movs	r2, #3
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4013      	ands	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d123      	bne.n	8003a82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	08da      	lsrs	r2, r3, #3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3208      	adds	r2, #8
 8003a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	220f      	movs	r2, #15
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	08da      	lsrs	r2, r3, #3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3208      	adds	r2, #8
 8003a7c:	6939      	ldr	r1, [r7, #16]
 8003a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43db      	mvns	r3, r3
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4013      	ands	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f003 0203 	and.w	r2, r3, #3
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 80a6 	beq.w	8003c10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ac4:	4b5b      	ldr	r3, [pc, #364]	; (8003c34 <HAL_GPIO_Init+0x2e4>)
 8003ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac8:	4a5a      	ldr	r2, [pc, #360]	; (8003c34 <HAL_GPIO_Init+0x2e4>)
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	6613      	str	r3, [r2, #96]	; 0x60
 8003ad0:	4b58      	ldr	r3, [pc, #352]	; (8003c34 <HAL_GPIO_Init+0x2e4>)
 8003ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003adc:	4a56      	ldr	r2, [pc, #344]	; (8003c38 <HAL_GPIO_Init+0x2e8>)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	3302      	adds	r3, #2
 8003ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	220f      	movs	r2, #15
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4013      	ands	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b06:	d01f      	beq.n	8003b48 <HAL_GPIO_Init+0x1f8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a4c      	ldr	r2, [pc, #304]	; (8003c3c <HAL_GPIO_Init+0x2ec>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d019      	beq.n	8003b44 <HAL_GPIO_Init+0x1f4>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a4b      	ldr	r2, [pc, #300]	; (8003c40 <HAL_GPIO_Init+0x2f0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d013      	beq.n	8003b40 <HAL_GPIO_Init+0x1f0>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a4a      	ldr	r2, [pc, #296]	; (8003c44 <HAL_GPIO_Init+0x2f4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00d      	beq.n	8003b3c <HAL_GPIO_Init+0x1ec>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a49      	ldr	r2, [pc, #292]	; (8003c48 <HAL_GPIO_Init+0x2f8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d007      	beq.n	8003b38 <HAL_GPIO_Init+0x1e8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a48      	ldr	r2, [pc, #288]	; (8003c4c <HAL_GPIO_Init+0x2fc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d101      	bne.n	8003b34 <HAL_GPIO_Init+0x1e4>
 8003b30:	2305      	movs	r3, #5
 8003b32:	e00a      	b.n	8003b4a <HAL_GPIO_Init+0x1fa>
 8003b34:	2306      	movs	r3, #6
 8003b36:	e008      	b.n	8003b4a <HAL_GPIO_Init+0x1fa>
 8003b38:	2304      	movs	r3, #4
 8003b3a:	e006      	b.n	8003b4a <HAL_GPIO_Init+0x1fa>
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e004      	b.n	8003b4a <HAL_GPIO_Init+0x1fa>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e002      	b.n	8003b4a <HAL_GPIO_Init+0x1fa>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <HAL_GPIO_Init+0x1fa>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	f002 0203 	and.w	r2, r2, #3
 8003b50:	0092      	lsls	r2, r2, #2
 8003b52:	4093      	lsls	r3, r2
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b5a:	4937      	ldr	r1, [pc, #220]	; (8003c38 <HAL_GPIO_Init+0x2e8>)
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	089b      	lsrs	r3, r3, #2
 8003b60:	3302      	adds	r3, #2
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b68:	4b39      	ldr	r3, [pc, #228]	; (8003c50 <HAL_GPIO_Init+0x300>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	43db      	mvns	r3, r3
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b8c:	4a30      	ldr	r2, [pc, #192]	; (8003c50 <HAL_GPIO_Init+0x300>)
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b92:	4b2f      	ldr	r3, [pc, #188]	; (8003c50 <HAL_GPIO_Init+0x300>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bb6:	4a26      	ldr	r2, [pc, #152]	; (8003c50 <HAL_GPIO_Init+0x300>)
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003bbc:	4b24      	ldr	r3, [pc, #144]	; (8003c50 <HAL_GPIO_Init+0x300>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003be0:	4a1b      	ldr	r2, [pc, #108]	; (8003c50 <HAL_GPIO_Init+0x300>)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003be6:	4b1a      	ldr	r3, [pc, #104]	; (8003c50 <HAL_GPIO_Init+0x300>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c0a:	4a11      	ldr	r2, [pc, #68]	; (8003c50 <HAL_GPIO_Init+0x300>)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	3301      	adds	r3, #1
 8003c14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f47f ae9d 	bne.w	8003960 <HAL_GPIO_Init+0x10>
  }
}
 8003c26:	bf00      	nop
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40010000 	.word	0x40010000
 8003c3c:	48000400 	.word	0x48000400
 8003c40:	48000800 	.word	0x48000800
 8003c44:	48000c00 	.word	0x48000c00
 8003c48:	48001000 	.word	0x48001000
 8003c4c:	48001400 	.word	0x48001400
 8003c50:	40010400 	.word	0x40010400

08003c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	807b      	strh	r3, [r7, #2]
 8003c60:	4613      	mov	r3, r2
 8003c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c64:	787b      	ldrb	r3, [r7, #1]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c6a:	887a      	ldrh	r2, [r7, #2]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c70:	e002      	b.n	8003c78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c72:	887a      	ldrh	r2, [r7, #2]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c8e:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d006      	beq.n	8003ca8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c9a:	4a05      	ldr	r2, [pc, #20]	; (8003cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c9c:	88fb      	ldrh	r3, [r7, #6]
 8003c9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ca0:	88fb      	ldrh	r3, [r7, #6]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fe fd02 	bl	80026ac <HAL_GPIO_EXTI_Callback>
  }
}
 8003ca8:	bf00      	nop
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40010400 	.word	0x40010400

08003cb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e08d      	b.n	8003de2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fe ff8c 	bl	8002bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2224      	movs	r2, #36	; 0x24
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0201 	bic.w	r2, r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d107      	bne.n	8003d2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	e006      	b.n	8003d3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d108      	bne.n	8003d56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d52:	605a      	str	r2, [r3, #4]
 8003d54:	e007      	b.n	8003d66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6812      	ldr	r2, [r2, #0]
 8003d70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69d9      	ldr	r1, [r3, #28]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1a      	ldr	r2, [r3, #32]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	4608      	mov	r0, r1
 8003df6:	4611      	mov	r1, r2
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	817b      	strh	r3, [r7, #10]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	813b      	strh	r3, [r7, #8]
 8003e02:	4613      	mov	r3, r2
 8003e04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	f040 80f9 	bne.w	8004006 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HAL_I2C_Mem_Write+0x34>
 8003e1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d105      	bne.n	8003e2c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0ed      	b.n	8004008 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_I2C_Mem_Write+0x4e>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e0e6      	b.n	8004008 <HAL_I2C_Mem_Write+0x21c>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e42:	f7ff fad3 	bl	80033ec <HAL_GetTick>
 8003e46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	2319      	movs	r3, #25
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 fac3 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0d1      	b.n	8004008 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2221      	movs	r2, #33	; 0x21
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2240      	movs	r2, #64	; 0x40
 8003e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a3a      	ldr	r2, [r7, #32]
 8003e7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e8c:	88f8      	ldrh	r0, [r7, #6]
 8003e8e:	893a      	ldrh	r2, [r7, #8]
 8003e90:	8979      	ldrh	r1, [r7, #10]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	9301      	str	r3, [sp, #4]
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f9d3 	bl	8004248 <I2C_RequestMemoryWrite>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0a9      	b.n	8004008 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2bff      	cmp	r3, #255	; 0xff
 8003ebc:	d90e      	bls.n	8003edc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	22ff      	movs	r2, #255	; 0xff
 8003ec2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	8979      	ldrh	r1, [r7, #10]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 fc47 	bl	8004768 <I2C_TransferConfig>
 8003eda:	e00f      	b.n	8003efc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	8979      	ldrh	r1, [r7, #10]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 fc36 	bl	8004768 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 fac6 	bl	8004492 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e07b      	b.n	8004008 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	781a      	ldrb	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d034      	beq.n	8003fb4 <HAL_I2C_Mem_Write+0x1c8>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d130      	bne.n	8003fb4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2180      	movs	r1, #128	; 0x80
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 fa3f 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e04d      	b.n	8004008 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2bff      	cmp	r3, #255	; 0xff
 8003f74:	d90e      	bls.n	8003f94 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	22ff      	movs	r2, #255	; 0xff
 8003f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	8979      	ldrh	r1, [r7, #10]
 8003f84:	2300      	movs	r3, #0
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fbeb 	bl	8004768 <I2C_TransferConfig>
 8003f92:	e00f      	b.n	8003fb4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	8979      	ldrh	r1, [r7, #10]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 fbda 	bl	8004768 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d19e      	bne.n	8003efc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 faac 	bl	8004520 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e01a      	b.n	8004008 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6859      	ldr	r1, [r3, #4]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <HAL_I2C_Mem_Write+0x224>)
 8003fe6:	400b      	ands	r3, r1
 8003fe8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	e000      	b.n	8004008 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004006:	2302      	movs	r3, #2
  }
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	fe00e800 	.word	0xfe00e800

08004014 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af02      	add	r7, sp, #8
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	4608      	mov	r0, r1
 800401e:	4611      	mov	r1, r2
 8004020:	461a      	mov	r2, r3
 8004022:	4603      	mov	r3, r0
 8004024:	817b      	strh	r3, [r7, #10]
 8004026:	460b      	mov	r3, r1
 8004028:	813b      	strh	r3, [r7, #8]
 800402a:	4613      	mov	r3, r2
 800402c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b20      	cmp	r3, #32
 8004038:	f040 80fd 	bne.w	8004236 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_I2C_Mem_Read+0x34>
 8004042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004044:	2b00      	cmp	r3, #0
 8004046:	d105      	bne.n	8004054 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800404e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0f1      	b.n	8004238 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_I2C_Mem_Read+0x4e>
 800405e:	2302      	movs	r3, #2
 8004060:	e0ea      	b.n	8004238 <HAL_I2C_Mem_Read+0x224>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800406a:	f7ff f9bf 	bl	80033ec <HAL_GetTick>
 800406e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	2319      	movs	r3, #25
 8004076:	2201      	movs	r2, #1
 8004078:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f9af 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0d5      	b.n	8004238 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2222      	movs	r2, #34	; 0x22
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2240      	movs	r2, #64	; 0x40
 8004098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a3a      	ldr	r2, [r7, #32]
 80040a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040b4:	88f8      	ldrh	r0, [r7, #6]
 80040b6:	893a      	ldrh	r2, [r7, #8]
 80040b8:	8979      	ldrh	r1, [r7, #10]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	9301      	str	r3, [sp, #4]
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	4603      	mov	r3, r0
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f913 	bl	80042f0 <I2C_RequestMemoryRead>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0ad      	b.n	8004238 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2bff      	cmp	r3, #255	; 0xff
 80040e4:	d90e      	bls.n	8004104 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	22ff      	movs	r2, #255	; 0xff
 80040ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	8979      	ldrh	r1, [r7, #10]
 80040f4:	4b52      	ldr	r3, [pc, #328]	; (8004240 <HAL_I2C_Mem_Read+0x22c>)
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 fb33 	bl	8004768 <I2C_TransferConfig>
 8004102:	e00f      	b.n	8004124 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004112:	b2da      	uxtb	r2, r3
 8004114:	8979      	ldrh	r1, [r7, #10]
 8004116:	4b4a      	ldr	r3, [pc, #296]	; (8004240 <HAL_I2C_Mem_Read+0x22c>)
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 fb22 	bl	8004768 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	2200      	movs	r2, #0
 800412c:	2104      	movs	r1, #4
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f956 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e07c      	b.n	8004238 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d034      	beq.n	80041e4 <HAL_I2C_Mem_Read+0x1d0>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417e:	2b00      	cmp	r3, #0
 8004180:	d130      	bne.n	80041e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	2200      	movs	r2, #0
 800418a:	2180      	movs	r1, #128	; 0x80
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f927 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e04d      	b.n	8004238 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2bff      	cmp	r3, #255	; 0xff
 80041a4:	d90e      	bls.n	80041c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	22ff      	movs	r2, #255	; 0xff
 80041aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	8979      	ldrh	r1, [r7, #10]
 80041b4:	2300      	movs	r3, #0
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 fad3 	bl	8004768 <I2C_TransferConfig>
 80041c2:	e00f      	b.n	80041e4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	8979      	ldrh	r1, [r7, #10]
 80041d6:	2300      	movs	r3, #0
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fac2 	bl	8004768 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d19a      	bne.n	8004124 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f994 	bl	8004520 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e01a      	b.n	8004238 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2220      	movs	r2, #32
 8004208:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6859      	ldr	r1, [r3, #4]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <HAL_I2C_Mem_Read+0x230>)
 8004216:	400b      	ands	r3, r1
 8004218:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	e000      	b.n	8004238 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004236:	2302      	movs	r3, #2
  }
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	80002400 	.word	0x80002400
 8004244:	fe00e800 	.word	0xfe00e800

08004248 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af02      	add	r7, sp, #8
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	4608      	mov	r0, r1
 8004252:	4611      	mov	r1, r2
 8004254:	461a      	mov	r2, r3
 8004256:	4603      	mov	r3, r0
 8004258:	817b      	strh	r3, [r7, #10]
 800425a:	460b      	mov	r3, r1
 800425c:	813b      	strh	r3, [r7, #8]
 800425e:	4613      	mov	r3, r2
 8004260:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	b2da      	uxtb	r2, r3
 8004266:	8979      	ldrh	r1, [r7, #10]
 8004268:	4b20      	ldr	r3, [pc, #128]	; (80042ec <I2C_RequestMemoryWrite+0xa4>)
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 fa79 	bl	8004768 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	69b9      	ldr	r1, [r7, #24]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f909 	bl	8004492 <I2C_WaitOnTXISFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e02c      	b.n	80042e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d105      	bne.n	800429c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004290:	893b      	ldrh	r3, [r7, #8]
 8004292:	b2da      	uxtb	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	629a      	str	r2, [r3, #40]	; 0x28
 800429a:	e015      	b.n	80042c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800429c:	893b      	ldrh	r3, [r7, #8]
 800429e:	0a1b      	lsrs	r3, r3, #8
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	69b9      	ldr	r1, [r7, #24]
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f8ef 	bl	8004492 <I2C_WaitOnTXISFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e012      	b.n	80042e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042be:	893b      	ldrh	r3, [r7, #8]
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2200      	movs	r2, #0
 80042d0:	2180      	movs	r1, #128	; 0x80
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 f884 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	80002000 	.word	0x80002000

080042f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	4608      	mov	r0, r1
 80042fa:	4611      	mov	r1, r2
 80042fc:	461a      	mov	r2, r3
 80042fe:	4603      	mov	r3, r0
 8004300:	817b      	strh	r3, [r7, #10]
 8004302:	460b      	mov	r3, r1
 8004304:	813b      	strh	r3, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	b2da      	uxtb	r2, r3
 800430e:	8979      	ldrh	r1, [r7, #10]
 8004310:	4b20      	ldr	r3, [pc, #128]	; (8004394 <I2C_RequestMemoryRead+0xa4>)
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	2300      	movs	r3, #0
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 fa26 	bl	8004768 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	69b9      	ldr	r1, [r7, #24]
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f8b6 	bl	8004492 <I2C_WaitOnTXISFlagUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e02c      	b.n	800438a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004330:	88fb      	ldrh	r3, [r7, #6]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d105      	bne.n	8004342 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004336:	893b      	ldrh	r3, [r7, #8]
 8004338:	b2da      	uxtb	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	629a      	str	r2, [r3, #40]	; 0x28
 8004340:	e015      	b.n	800436e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004342:	893b      	ldrh	r3, [r7, #8]
 8004344:	0a1b      	lsrs	r3, r3, #8
 8004346:	b29b      	uxth	r3, r3
 8004348:	b2da      	uxtb	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	69b9      	ldr	r1, [r7, #24]
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 f89c 	bl	8004492 <I2C_WaitOnTXISFlagUntilTimeout>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e012      	b.n	800438a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004364:	893b      	ldrh	r3, [r7, #8]
 8004366:	b2da      	uxtb	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	2200      	movs	r2, #0
 8004376:	2140      	movs	r1, #64	; 0x40
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 f831 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e000      	b.n	800438a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	80002000 	.word	0x80002000

08004398 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d103      	bne.n	80043b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2200      	movs	r2, #0
 80043b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d007      	beq.n	80043d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	619a      	str	r2, [r3, #24]
  }
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	4613      	mov	r3, r2
 80043ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043f0:	e03b      	b.n	800446a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	6839      	ldr	r1, [r7, #0]
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f8d6 	bl	80045a8 <I2C_IsErrorOccurred>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e041      	b.n	800448a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800440c:	d02d      	beq.n	800446a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440e:	f7fe ffed 	bl	80033ec <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d302      	bcc.n	8004424 <I2C_WaitOnFlagUntilTimeout+0x44>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d122      	bne.n	800446a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	4013      	ands	r3, r2
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	429a      	cmp	r2, r3
 8004432:	bf0c      	ite	eq
 8004434:	2301      	moveq	r3, #1
 8004436:	2300      	movne	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	429a      	cmp	r2, r3
 8004440:	d113      	bne.n	800446a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	f043 0220 	orr.w	r2, r3, #32
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e00f      	b.n	800448a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699a      	ldr	r2, [r3, #24]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4013      	ands	r3, r2
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	429a      	cmp	r2, r3
 8004478:	bf0c      	ite	eq
 800447a:	2301      	moveq	r3, #1
 800447c:	2300      	movne	r3, #0
 800447e:	b2db      	uxtb	r3, r3
 8004480:	461a      	mov	r2, r3
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	429a      	cmp	r2, r3
 8004486:	d0b4      	beq.n	80043f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800449e:	e033      	b.n	8004508 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	68b9      	ldr	r1, [r7, #8]
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f87f 	bl	80045a8 <I2C_IsErrorOccurred>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e031      	b.n	8004518 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ba:	d025      	beq.n	8004508 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044bc:	f7fe ff96 	bl	80033ec <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d302      	bcc.n	80044d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d11a      	bne.n	8004508 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d013      	beq.n	8004508 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e4:	f043 0220 	orr.w	r2, r3, #32
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e007      	b.n	8004518 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b02      	cmp	r3, #2
 8004514:	d1c4      	bne.n	80044a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800452c:	e02f      	b.n	800458e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f838 	bl	80045a8 <I2C_IsErrorOccurred>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e02d      	b.n	800459e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004542:	f7fe ff53 	bl	80033ec <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	429a      	cmp	r2, r3
 8004550:	d302      	bcc.n	8004558 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d11a      	bne.n	800458e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b20      	cmp	r3, #32
 8004564:	d013      	beq.n	800458e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456a:	f043 0220 	orr.w	r2, r3, #32
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e007      	b.n	800459e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b20      	cmp	r3, #32
 800459a:	d1c8      	bne.n	800452e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08a      	sub	sp, #40	; 0x28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d068      	beq.n	80046a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2210      	movs	r2, #16
 80045da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045dc:	e049      	b.n	8004672 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045e4:	d045      	beq.n	8004672 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045e6:	f7fe ff01 	bl	80033ec <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d302      	bcc.n	80045fc <I2C_IsErrorOccurred+0x54>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d13a      	bne.n	8004672 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004606:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800460e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800461a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800461e:	d121      	bne.n	8004664 <I2C_IsErrorOccurred+0xbc>
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004626:	d01d      	beq.n	8004664 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004628:	7cfb      	ldrb	r3, [r7, #19]
 800462a:	2b20      	cmp	r3, #32
 800462c:	d01a      	beq.n	8004664 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800463c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800463e:	f7fe fed5 	bl	80033ec <HAL_GetTick>
 8004642:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004644:	e00e      	b.n	8004664 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004646:	f7fe fed1 	bl	80033ec <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b19      	cmp	r3, #25
 8004652:	d907      	bls.n	8004664 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	f043 0320 	orr.w	r3, r3, #32
 800465a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004662:	e006      	b.n	8004672 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b20      	cmp	r3, #32
 8004670:	d1e9      	bne.n	8004646 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b20      	cmp	r3, #32
 800467e:	d003      	beq.n	8004688 <I2C_IsErrorOccurred+0xe0>
 8004680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0aa      	beq.n	80045de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800468c:	2b00      	cmp	r3, #0
 800468e:	d103      	bne.n	8004698 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2220      	movs	r2, #32
 8004696:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	f043 0304 	orr.w	r3, r3, #4
 800469e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00b      	beq.n	80046d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	f043 0301 	orr.w	r3, r3, #1
 80046be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00b      	beq.n	80046f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	f043 0308 	orr.w	r3, r3, #8
 80046e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00b      	beq.n	8004714 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	f043 0302 	orr.w	r3, r3, #2
 8004702:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800470c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01c      	beq.n	8004756 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f7ff fe3b 	bl	8004398 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6859      	ldr	r1, [r3, #4]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	4b0d      	ldr	r3, [pc, #52]	; (8004764 <I2C_IsErrorOccurred+0x1bc>)
 800472e:	400b      	ands	r3, r1
 8004730:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	431a      	orrs	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800475a:	4618      	mov	r0, r3
 800475c:	3728      	adds	r7, #40	; 0x28
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	fe00e800 	.word	0xfe00e800

08004768 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	607b      	str	r3, [r7, #4]
 8004772:	460b      	mov	r3, r1
 8004774:	817b      	strh	r3, [r7, #10]
 8004776:	4613      	mov	r3, r2
 8004778:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800477a:	897b      	ldrh	r3, [r7, #10]
 800477c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004780:	7a7b      	ldrb	r3, [r7, #9]
 8004782:	041b      	lsls	r3, r3, #16
 8004784:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004788:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	4313      	orrs	r3, r2
 8004792:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004796:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	0d5b      	lsrs	r3, r3, #21
 80047a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80047a6:	4b08      	ldr	r3, [pc, #32]	; (80047c8 <I2C_TransferConfig+0x60>)
 80047a8:	430b      	orrs	r3, r1
 80047aa:	43db      	mvns	r3, r3
 80047ac:	ea02 0103 	and.w	r1, r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	03ff63ff 	.word	0x03ff63ff

080047cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d138      	bne.n	8004854 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e032      	b.n	8004856 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2224      	movs	r2, #36	; 0x24
 80047fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800481e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6819      	ldr	r1, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0201 	orr.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	e000      	b.n	8004856 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004854:	2302      	movs	r3, #2
  }
}
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b20      	cmp	r3, #32
 8004876:	d139      	bne.n	80048ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004882:	2302      	movs	r3, #2
 8004884:	e033      	b.n	80048ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2224      	movs	r2, #36	; 0x24
 8004892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0201 	bic.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80048b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	021b      	lsls	r3, r3, #8
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048e8:	2300      	movs	r3, #0
 80048ea:	e000      	b.n	80048ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048ec:	2302      	movs	r3, #2
  }
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b084      	sub	sp, #16
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e0c0      	b.n	8004a8e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d106      	bne.n	8004926 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f00c fba9 	bl	8011078 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2203      	movs	r2, #3
 800492a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f004 fceb 	bl	800930e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004938:	2300      	movs	r3, #0
 800493a:	73fb      	strb	r3, [r7, #15]
 800493c:	e03e      	b.n	80049bc <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800493e:	7bfa      	ldrb	r2, [r7, #15]
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	440b      	add	r3, r1
 800494c:	3311      	adds	r3, #17
 800494e:	2201      	movs	r2, #1
 8004950:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004952:	7bfa      	ldrb	r2, [r7, #15]
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	440b      	add	r3, r1
 8004960:	3310      	adds	r3, #16
 8004962:	7bfa      	ldrb	r2, [r7, #15]
 8004964:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004966:	7bfa      	ldrb	r2, [r7, #15]
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	440b      	add	r3, r1
 8004974:	3313      	adds	r3, #19
 8004976:	2200      	movs	r2, #0
 8004978:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800497a:	7bfa      	ldrb	r2, [r7, #15]
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	4613      	mov	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	440b      	add	r3, r1
 8004988:	3320      	adds	r3, #32
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800498e:	7bfa      	ldrb	r2, [r7, #15]
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	440b      	add	r3, r1
 800499c:	3324      	adds	r3, #36	; 0x24
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	4613      	mov	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	440b      	add	r3, r1
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	3301      	adds	r3, #1
 80049ba:	73fb      	strb	r3, [r7, #15]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	791b      	ldrb	r3, [r3, #4]
 80049c0:	7bfa      	ldrb	r2, [r7, #15]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d3bb      	bcc.n	800493e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049c6:	2300      	movs	r3, #0
 80049c8:	73fb      	strb	r3, [r7, #15]
 80049ca:	e044      	b.n	8004a56 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049cc:	7bfa      	ldrb	r2, [r7, #15]
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	440b      	add	r3, r1
 80049da:	f203 1351 	addw	r3, r3, #337	; 0x151
 80049de:	2200      	movs	r2, #0
 80049e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80049e2:	7bfa      	ldrb	r2, [r7, #15]
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	440b      	add	r3, r1
 80049f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80049f4:	7bfa      	ldrb	r2, [r7, #15]
 80049f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80049f8:	7bfa      	ldrb	r2, [r7, #15]
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	440b      	add	r3, r1
 8004a06:	f203 1353 	addw	r3, r3, #339	; 0x153
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a0e:	7bfa      	ldrb	r2, [r7, #15]
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	440b      	add	r3, r1
 8004a1c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a24:	7bfa      	ldrb	r2, [r7, #15]
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	440b      	add	r3, r1
 8004a32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a3a:	7bfa      	ldrb	r2, [r7, #15]
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	440b      	add	r3, r1
 8004a48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	3301      	adds	r3, #1
 8004a54:	73fb      	strb	r3, [r7, #15]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	791b      	ldrb	r3, [r3, #4]
 8004a5a:	7bfa      	ldrb	r2, [r7, #15]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d3b5      	bcc.n	80049cc <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3304      	adds	r3, #4
 8004a68:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004a6c:	f004 fc6a 	bl	8009344 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	7a9b      	ldrb	r3, [r3, #10]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d102      	bne.n	8004a8c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f001 fc41 	bl	800630e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b082      	sub	sp, #8
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_PCD_Start+0x16>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e012      	b.n	8004ad2 <HAL_PCD_Start+0x3c>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f004 fc11 	bl	80092e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f006 fed1 	bl	800b86a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f006 fed6 	bl	800b898 <USB_ReadInterrupts>
 8004aec:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 fb04 	bl	8005106 <PCD_EP_ISR_Handler>

    return;
 8004afe:	e110      	b.n	8004d22 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d013      	beq.n	8004b32 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1c:	b292      	uxth	r2, r2
 8004b1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f00c fb39 	bl	801119a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004b28:	2100      	movs	r1, #0
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f8fc 	bl	8004d28 <HAL_PCD_SetAddress>

    return;
 8004b30:	e0f7      	b.n	8004d22 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00c      	beq.n	8004b56 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b4e:	b292      	uxth	r2, r2
 8004b50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004b54:	e0e5      	b.n	8004d22 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00c      	beq.n	8004b7a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b72:	b292      	uxth	r2, r2
 8004b74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004b78:	e0d3      	b.n	8004d22 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d034      	beq.n	8004bee <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0204 	bic.w	r2, r2, #4
 8004b96:	b292      	uxth	r2, r2
 8004b98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0208 	bic.w	r2, r2, #8
 8004bae:	b292      	uxth	r2, r2
 8004bb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d107      	bne.n	8004bce <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f00c fcd9 	bl	8011580 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f00c fb1c 	bl	801120c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004be6:	b292      	uxth	r2, r2
 8004be8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004bec:	e099      	b.n	8004d22 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d027      	beq.n	8004c48 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0208 	orr.w	r2, r2, #8
 8004c0a:	b292      	uxth	r2, r2
 8004c0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c22:	b292      	uxth	r2, r2
 8004c24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0204 	orr.w	r2, r2, #4
 8004c3a:	b292      	uxth	r2, r2
 8004c3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f00c fac9 	bl	80111d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004c46:	e06c      	b.n	8004d22 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d040      	beq.n	8004cd4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c64:	b292      	uxth	r2, r2
 8004c66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d12b      	bne.n	8004ccc <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0204 	orr.w	r2, r2, #4
 8004c86:	b292      	uxth	r2, r2
 8004c88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0208 	orr.w	r2, r2, #8
 8004c9e:	b292      	uxth	r2, r2
 8004ca0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	089b      	lsrs	r3, r3, #2
 8004cb8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f00c fc5b 	bl	8011580 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004cca:	e02a      	b.n	8004d22 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f00c fa83 	bl	80111d8 <HAL_PCD_SuspendCallback>
    return;
 8004cd2:	e026      	b.n	8004d22 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00f      	beq.n	8004cfe <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004cf0:	b292      	uxth	r2, r2
 8004cf2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f00c fa41 	bl	801117e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004cfc:	e011      	b.n	8004d22 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00c      	beq.n	8004d22 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d1a:	b292      	uxth	r2, r2
 8004d1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004d20:	bf00      	nop
  }
}
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	460b      	mov	r3, r1
 8004d32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d101      	bne.n	8004d42 <HAL_PCD_SetAddress+0x1a>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	e012      	b.n	8004d68 <HAL_PCD_SetAddress+0x40>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	78fa      	ldrb	r2, [r7, #3]
 8004d4e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	78fa      	ldrb	r2, [r7, #3]
 8004d56:	4611      	mov	r1, r2
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f006 fd72 	bl	800b842 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	4608      	mov	r0, r1
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4603      	mov	r3, r0
 8004d80:	70fb      	strb	r3, [r7, #3]
 8004d82:	460b      	mov	r3, r1
 8004d84:	803b      	strh	r3, [r7, #0]
 8004d86:	4613      	mov	r3, r2
 8004d88:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	da0e      	bge.n	8004db4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d96:	78fb      	ldrb	r3, [r7, #3]
 8004d98:	f003 0207 	and.w	r2, r3, #7
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	3310      	adds	r3, #16
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	4413      	add	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2201      	movs	r2, #1
 8004db0:	705a      	strb	r2, [r3, #1]
 8004db2:	e00e      	b.n	8004dd2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004db4:	78fb      	ldrb	r3, [r7, #3]
 8004db6:	f003 0207 	and.w	r2, r3, #7
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	4413      	add	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004dd2:	78fb      	ldrb	r3, [r7, #3]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004dde:	883a      	ldrh	r2, [r7, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	78ba      	ldrb	r2, [r7, #2]
 8004de8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004dea:	78bb      	ldrb	r3, [r7, #2]
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d102      	bne.n	8004df6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d101      	bne.n	8004e04 <HAL_PCD_EP_Open+0x94>
 8004e00:	2302      	movs	r3, #2
 8004e02:	e00e      	b.n	8004e22 <HAL_PCD_EP_Open+0xb2>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68f9      	ldr	r1, [r7, #12]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f004 fab4 	bl	8009380 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8004e20:	7afb      	ldrb	r3, [r7, #11]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	460b      	mov	r3, r1
 8004e34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	da0e      	bge.n	8004e5c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e3e:	78fb      	ldrb	r3, [r7, #3]
 8004e40:	f003 0207 	and.w	r2, r3, #7
 8004e44:	4613      	mov	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	3310      	adds	r3, #16
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	4413      	add	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	705a      	strb	r2, [r3, #1]
 8004e5a:	e00e      	b.n	8004e7a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e5c:	78fb      	ldrb	r3, [r7, #3]
 8004e5e:	f003 0207 	and.w	r2, r3, #7
 8004e62:	4613      	mov	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	4413      	add	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d101      	bne.n	8004e94 <HAL_PCD_EP_Close+0x6a>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e00e      	b.n	8004eb2 <HAL_PCD_EP_Close+0x88>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68f9      	ldr	r1, [r7, #12]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f004 fe30 	bl	8009b08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b086      	sub	sp, #24
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	603b      	str	r3, [r7, #0]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eca:	7afb      	ldrb	r3, [r7, #11]
 8004ecc:	f003 0207 	and.w	r2, r3, #7
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004efa:	7afb      	ldrb	r3, [r7, #11]
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6979      	ldr	r1, [r7, #20]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f004 ffe8 	bl	8009ee2 <USB_EPStartXfer>

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f28:	78fb      	ldrb	r3, [r7, #3]
 8004f2a:	f003 0207 	and.w	r2, r3, #7
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	440b      	add	r3, r1
 8004f3a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8004f3e:	681b      	ldr	r3, [r3, #0]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	607a      	str	r2, [r7, #4]
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f5c:	7afb      	ldrb	r3, [r7, #11]
 8004f5e:	f003 0207 	and.w	r2, r3, #7
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	3310      	adds	r3, #16
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2201      	movs	r2, #1
 8004f96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f98:	7afb      	ldrb	r3, [r7, #11]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6979      	ldr	r1, [r7, #20]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f004 ff99 	bl	8009ee2 <USB_EPStartXfer>

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fc6:	78fb      	ldrb	r3, [r7, #3]
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	7912      	ldrb	r2, [r2, #4]
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e03e      	b.n	8005056 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	da0e      	bge.n	8004ffe <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	f003 0207 	and.w	r2, r3, #7
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	3310      	adds	r3, #16
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	705a      	strb	r2, [r3, #1]
 8004ffc:	e00c      	b.n	8005018 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ffe:	78fa      	ldrb	r2, [r7, #3]
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	4413      	add	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2201      	movs	r2, #1
 800501c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800501e:	78fb      	ldrb	r3, [r7, #3]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	b2da      	uxtb	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_PCD_EP_SetStall+0x7e>
 8005034:	2302      	movs	r3, #2
 8005036:	e00e      	b.n	8005056 <HAL_PCD_EP_SetStall+0x9c>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68f9      	ldr	r1, [r7, #12]
 8005046:	4618      	mov	r0, r3
 8005048:	f006 fafc 	bl	800b644 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	460b      	mov	r3, r1
 8005068:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800506a:	78fb      	ldrb	r3, [r7, #3]
 800506c:	f003 030f 	and.w	r3, r3, #15
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	7912      	ldrb	r2, [r2, #4]
 8005074:	4293      	cmp	r3, r2
 8005076:	d901      	bls.n	800507c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e040      	b.n	80050fe <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800507c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005080:	2b00      	cmp	r3, #0
 8005082:	da0e      	bge.n	80050a2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	f003 0207 	and.w	r2, r3, #7
 800508a:	4613      	mov	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	3310      	adds	r3, #16
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	4413      	add	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2201      	movs	r2, #1
 800509e:	705a      	strb	r2, [r3, #1]
 80050a0:	e00e      	b.n	80050c0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	f003 0207 	and.w	r2, r3, #7
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	4413      	add	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050c6:	78fb      	ldrb	r3, [r7, #3]
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d101      	bne.n	80050e0 <HAL_PCD_EP_ClrStall+0x82>
 80050dc:	2302      	movs	r3, #2
 80050de:	e00e      	b.n	80050fe <HAL_PCD_EP_ClrStall+0xa0>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68f9      	ldr	r1, [r7, #12]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f006 faf9 	bl	800b6e6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b096      	sub	sp, #88	; 0x58
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800510e:	e3ae      	b.n	800586e <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005118:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800511c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005120:	b2db      	uxtb	r3, r3
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800512a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800512e:	2b00      	cmp	r3, #0
 8005130:	f040 8170 	bne.w	8005414 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005134:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	2b00      	cmp	r3, #0
 800513e:	d14d      	bne.n	80051dc <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800514c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005150:	81fb      	strh	r3, [r7, #14]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	89fb      	ldrh	r3, [r7, #14]
 8005158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800515c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005160:	b29b      	uxth	r3, r3
 8005162:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3310      	adds	r3, #16
 8005168:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005172:	b29b      	uxth	r3, r3
 8005174:	461a      	mov	r2, r3
 8005176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	4413      	add	r3, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6812      	ldr	r2, [r2, #0]
 8005182:	4413      	add	r3, r2
 8005184:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800518e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005190:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005194:	695a      	ldr	r2, [r3, #20]
 8005196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	441a      	add	r2, r3
 800519c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800519e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80051a0:	2100      	movs	r1, #0
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f00b ffd1 	bl	801114a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	7b1b      	ldrb	r3, [r3, #12]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 835d 	beq.w	800586e <PCD_EP_ISR_Handler+0x768>
 80051b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f040 8358 	bne.w	800586e <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	7b1b      	ldrb	r3, [r3, #12]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	b292      	uxth	r2, r2
 80051d0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	731a      	strb	r2, [r3, #12]
 80051da:	e348      	b.n	800586e <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80051e2:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80051ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80051f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d032      	beq.n	8005260 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005202:	b29b      	uxth	r3, r3
 8005204:	461a      	mov	r2, r3
 8005206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	4413      	add	r3, r2
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6812      	ldr	r2, [r2, #0]
 8005212:	4413      	add	r3, r2
 8005214:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800521e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005220:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800522c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800522e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005232:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005234:	b29b      	uxth	r3, r3
 8005236:	f006 fb81 	bl	800b93c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	b29a      	uxth	r2, r3
 8005242:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005246:	4013      	ands	r3, r2
 8005248:	823b      	strh	r3, [r7, #16]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	8a3a      	ldrh	r2, [r7, #16]
 8005250:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005254:	b292      	uxth	r2, r2
 8005256:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f00b ff49 	bl	80110f0 <HAL_PCD_SetupStageCallback>
 800525e:	e306      	b.n	800586e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005260:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005264:	2b00      	cmp	r3, #0
 8005266:	f280 8302 	bge.w	800586e <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	b29a      	uxth	r2, r3
 8005272:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005276:	4013      	ands	r3, r2
 8005278:	83fb      	strh	r3, [r7, #30]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	8bfa      	ldrh	r2, [r7, #30]
 8005280:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005284:	b292      	uxth	r2, r2
 8005286:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005290:	b29b      	uxth	r3, r3
 8005292:	461a      	mov	r2, r3
 8005294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	4413      	add	r3, r2
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6812      	ldr	r2, [r2, #0]
 80052a0:	4413      	add	r3, r2
 80052a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052a6:	881b      	ldrh	r3, [r3, #0]
 80052a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80052b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d019      	beq.n	80052ec <PCD_EP_ISR_Handler+0x1e6>
 80052b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d015      	beq.n	80052ec <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6818      	ldr	r0, [r3, #0]
 80052c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052c6:	6959      	ldr	r1, [r3, #20]
 80052c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80052cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f006 fb33 	bl	800b93c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80052d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052d8:	695a      	ldr	r2, [r3, #20]
 80052da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	441a      	add	r2, r3
 80052e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80052e4:	2100      	movs	r1, #0
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f00b ff14 	bl	8011114 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80052f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80052fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f040 82b5 	bne.w	800586e <PCD_EP_ISR_Handler+0x768>
 8005304:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005308:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800530c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005310:	f000 82ad 	beq.w	800586e <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005322:	b29b      	uxth	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	4413      	add	r3, r2
 800532a:	61bb      	str	r3, [r7, #24]
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	b29b      	uxth	r3, r3
 800533a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800533e:	b29a      	uxth	r2, r3
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	801a      	strh	r2, [r3, #0]
 8005344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	2b3e      	cmp	r3, #62	; 0x3e
 800534a:	d91d      	bls.n	8005388 <PCD_EP_ISR_Handler+0x282>
 800534c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	095b      	lsrs	r3, r3, #5
 8005352:	647b      	str	r3, [r7, #68]	; 0x44
 8005354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f003 031f 	and.w	r3, r3, #31
 800535c:	2b00      	cmp	r3, #0
 800535e:	d102      	bne.n	8005366 <PCD_EP_ISR_Handler+0x260>
 8005360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005362:	3b01      	subs	r3, #1
 8005364:	647b      	str	r3, [r7, #68]	; 0x44
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b29a      	uxth	r2, r3
 800536c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800536e:	b29b      	uxth	r3, r3
 8005370:	029b      	lsls	r3, r3, #10
 8005372:	b29b      	uxth	r3, r3
 8005374:	4313      	orrs	r3, r2
 8005376:	b29b      	uxth	r3, r3
 8005378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800537c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005380:	b29a      	uxth	r2, r3
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	801a      	strh	r2, [r3, #0]
 8005386:	e026      	b.n	80053d6 <PCD_EP_ISR_Handler+0x2d0>
 8005388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10a      	bne.n	80053a6 <PCD_EP_ISR_Handler+0x2a0>
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	b29b      	uxth	r3, r3
 8005396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800539e:	b29a      	uxth	r2, r3
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	801a      	strh	r2, [r3, #0]
 80053a4:	e017      	b.n	80053d6 <PCD_EP_ISR_Handler+0x2d0>
 80053a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	085b      	lsrs	r3, r3, #1
 80053ac:	647b      	str	r3, [r7, #68]	; 0x44
 80053ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <PCD_EP_ISR_Handler+0x2ba>
 80053ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053bc:	3301      	adds	r3, #1
 80053be:	647b      	str	r3, [r7, #68]	; 0x44
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	029b      	lsls	r3, r3, #10
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	4313      	orrs	r3, r2
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e6:	827b      	strh	r3, [r7, #18]
 80053e8:	8a7b      	ldrh	r3, [r7, #18]
 80053ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80053ee:	827b      	strh	r3, [r7, #18]
 80053f0:	8a7b      	ldrh	r3, [r7, #18]
 80053f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053f6:	827b      	strh	r3, [r7, #18]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	8a7b      	ldrh	r3, [r7, #18]
 80053fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800540a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800540e:	b29b      	uxth	r3, r3
 8005410:	8013      	strh	r3, [r2, #0]
 8005412:	e22c      	b.n	800586e <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	461a      	mov	r2, r3
 800541a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005428:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800542c:	2b00      	cmp	r3, #0
 800542e:	f280 80f6 	bge.w	800561e <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	b29a      	uxth	r2, r3
 8005444:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005448:	4013      	ands	r3, r2
 800544a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005460:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005464:	b292      	uxth	r2, r2
 8005466:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005468:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	4413      	add	r3, r2
 800547c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800547e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005480:	7b1b      	ldrb	r3, [r3, #12]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d123      	bne.n	80054ce <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800548e:	b29b      	uxth	r3, r3
 8005490:	461a      	mov	r2, r3
 8005492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	4413      	add	r3, r2
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6812      	ldr	r2, [r2, #0]
 800549e:	4413      	add	r3, r2
 80054a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054aa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80054ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 808e 	beq.w	80055d4 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6818      	ldr	r0, [r3, #0]
 80054bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054be:	6959      	ldr	r1, [r3, #20]
 80054c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054c2:	88da      	ldrh	r2, [r3, #6]
 80054c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80054c8:	f006 fa38 	bl	800b93c <USB_ReadPMA>
 80054cc:	e082      	b.n	80055d4 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80054ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054d0:	78db      	ldrb	r3, [r3, #3]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d10a      	bne.n	80054ec <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80054d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80054da:	461a      	mov	r2, r3
 80054dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f9d3 	bl	800588a <HAL_PCD_EP_DB_Receive>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80054ea:	e073      	b.n	80055d4 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005506:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	441a      	add	r2, r3
 8005518:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800551c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005528:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800552c:	b29b      	uxth	r3, r3
 800552e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	461a      	mov	r2, r3
 8005536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	b29b      	uxth	r3, r3
 8005542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d022      	beq.n	8005590 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005552:	b29b      	uxth	r3, r3
 8005554:	461a      	mov	r2, r3
 8005556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	4413      	add	r3, r2
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6812      	ldr	r2, [r2, #0]
 8005562:	4413      	add	r3, r2
 8005564:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800556e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005572:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005576:	2b00      	cmp	r3, #0
 8005578:	d02c      	beq.n	80055d4 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005580:	6959      	ldr	r1, [r3, #20]
 8005582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005584:	891a      	ldrh	r2, [r3, #8]
 8005586:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800558a:	f006 f9d7 	bl	800b93c <USB_ReadPMA>
 800558e:	e021      	b.n	80055d4 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005598:	b29b      	uxth	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	4413      	add	r3, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6812      	ldr	r2, [r2, #0]
 80055a8:	4413      	add	r3, r2
 80055aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055b4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80055b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d009      	beq.n	80055d4 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6818      	ldr	r0, [r3, #0]
 80055c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055c6:	6959      	ldr	r1, [r3, #20]
 80055c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ca:	895a      	ldrh	r2, [r3, #10]
 80055cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80055d0:	f006 f9b4 	bl	800b93c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80055d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055d6:	69da      	ldr	r2, [r3, #28]
 80055d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80055dc:	441a      	add	r2, r3
 80055de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055e0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80055e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055e4:	695a      	ldr	r2, [r3, #20]
 80055e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80055ea:	441a      	add	r2, r3
 80055ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80055f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d005      	beq.n	8005604 <PCD_EP_ISR_Handler+0x4fe>
 80055f8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80055fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	429a      	cmp	r2, r3
 8005602:	d206      	bcs.n	8005612 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	4619      	mov	r1, r3
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f00b fd82 	bl	8011114 <HAL_PCD_DataOutStageCallback>
 8005610:	e005      	b.n	800561e <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005618:	4618      	mov	r0, r3
 800561a:	f004 fc62 	bl	8009ee2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800561e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 8121 	beq.w	800586e <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800562c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	3310      	adds	r3, #16
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	4413      	add	r3, r2
 800563e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	461a      	mov	r2, r3
 8005664:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	441a      	add	r2, r3
 800566c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005678:	b29b      	uxth	r3, r3
 800567a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800567c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800567e:	78db      	ldrb	r3, [r3, #3]
 8005680:	2b01      	cmp	r3, #1
 8005682:	f040 80a2 	bne.w	80057ca <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8005686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005688:	2200      	movs	r2, #0
 800568a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800568c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800568e:	7b1b      	ldrb	r3, [r3, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 8093 	beq.w	80057bc <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005696:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800569a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d046      	beq.n	8005730 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056a4:	785b      	ldrb	r3, [r3, #1]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d126      	bne.n	80056f8 <PCD_EP_ISR_Handler+0x5f2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	627b      	str	r3, [r7, #36]	; 0x24
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	461a      	mov	r2, r3
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	4413      	add	r3, r2
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
 80056c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	00da      	lsls	r2, r3, #3
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	4413      	add	r3, r2
 80056cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056d0:	623b      	str	r3, [r7, #32]
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056dc:	b29a      	uxth	r2, r3
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	801a      	strh	r2, [r3, #0]
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	801a      	strh	r2, [r3, #0]
 80056f6:	e061      	b.n	80057bc <PCD_EP_ISR_Handler+0x6b6>
 80056f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d15d      	bne.n	80057bc <PCD_EP_ISR_Handler+0x6b6>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800570e:	b29b      	uxth	r3, r3
 8005710:	461a      	mov	r2, r3
 8005712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005714:	4413      	add	r3, r2
 8005716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	00da      	lsls	r2, r3, #3
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	4413      	add	r3, r2
 8005722:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005726:	62bb      	str	r3, [r7, #40]	; 0x28
 8005728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572a:	2200      	movs	r2, #0
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	e045      	b.n	80057bc <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005738:	785b      	ldrb	r3, [r3, #1]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d126      	bne.n	800578c <PCD_EP_ISR_Handler+0x686>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	637b      	str	r3, [r7, #52]	; 0x34
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800574c:	b29b      	uxth	r3, r3
 800574e:	461a      	mov	r2, r3
 8005750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005752:	4413      	add	r3, r2
 8005754:	637b      	str	r3, [r7, #52]	; 0x34
 8005756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	00da      	lsls	r2, r3, #3
 800575c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575e:	4413      	add	r3, r2
 8005760:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005764:	633b      	str	r3, [r7, #48]	; 0x30
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	b29b      	uxth	r3, r3
 800576c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005770:	b29a      	uxth	r2, r3
 8005772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005774:	801a      	strh	r2, [r3, #0]
 8005776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	b29b      	uxth	r3, r3
 800577c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005784:	b29a      	uxth	r2, r3
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	801a      	strh	r2, [r3, #0]
 800578a:	e017      	b.n	80057bc <PCD_EP_ISR_Handler+0x6b6>
 800578c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800578e:	785b      	ldrb	r3, [r3, #1]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d113      	bne.n	80057bc <PCD_EP_ISR_Handler+0x6b6>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800579c:	b29b      	uxth	r3, r3
 800579e:	461a      	mov	r2, r3
 80057a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a2:	4413      	add	r3, r2
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	00da      	lsls	r2, r3, #3
 80057ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ae:	4413      	add	r3, r2
 80057b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80057b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b8:	2200      	movs	r2, #0
 80057ba:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	4619      	mov	r1, r3
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f00b fcc1 	bl	801114a <HAL_PCD_DataInStageCallback>
 80057c8:	e051      	b.n	800586e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80057ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80057ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d144      	bne.n	8005860 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057de:	b29b      	uxth	r3, r3
 80057e0:	461a      	mov	r2, r3
 80057e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	4413      	add	r3, r2
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6812      	ldr	r2, [r2, #0]
 80057ee:	4413      	add	r3, r2
 80057f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80057fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005806:	429a      	cmp	r2, r3
 8005808:	d907      	bls.n	800581a <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800580a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005812:	1ad2      	subs	r2, r2, r3
 8005814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005816:	619a      	str	r2, [r3, #24]
 8005818:	e002      	b.n	8005820 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800581a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800581c:	2200      	movs	r2, #0
 800581e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d106      	bne.n	8005836 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	4619      	mov	r1, r3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f00b fc8b 	bl	801114a <HAL_PCD_DataInStageCallback>
 8005834:	e01b      	b.n	800586e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005838:	695a      	ldr	r2, [r3, #20]
 800583a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800583e:	441a      	add	r2, r3
 8005840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005842:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005846:	69da      	ldr	r2, [r3, #28]
 8005848:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800584c:	441a      	add	r2, r3
 800584e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005850:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005858:	4618      	mov	r0, r3
 800585a:	f004 fb42 	bl	8009ee2 <USB_EPStartXfer>
 800585e:	e006      	b.n	800586e <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005860:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005864:	461a      	mov	r2, r3
 8005866:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f917 	bl	8005a9c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005876:	b29b      	uxth	r3, r3
 8005878:	b21b      	sxth	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	f6ff ac48 	blt.w	8005110 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3758      	adds	r7, #88	; 0x58
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b088      	sub	sp, #32
 800588e:	af00      	add	r7, sp, #0
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	4613      	mov	r3, r2
 8005896:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005898:	88fb      	ldrh	r3, [r7, #6]
 800589a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d07c      	beq.n	800599c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	4413      	add	r3, r2
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	4413      	add	r3, r2
 80058bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058c6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	699a      	ldr	r2, [r3, #24]
 80058cc:	8b7b      	ldrh	r3, [r7, #26]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d306      	bcc.n	80058e0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	8b7b      	ldrh	r3, [r7, #26]
 80058d8:	1ad2      	subs	r2, r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	619a      	str	r2, [r3, #24]
 80058de:	e002      	b.n	80058e6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2200      	movs	r2, #0
 80058e4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d123      	bne.n	8005936 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005908:	833b      	strh	r3, [r7, #24]
 800590a:	8b3b      	ldrh	r3, [r7, #24]
 800590c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005910:	833b      	strh	r3, [r7, #24]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	441a      	add	r2, r3
 8005920:	8b3b      	ldrh	r3, [r7, #24]
 8005922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800592a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800592e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005932:	b29b      	uxth	r3, r3
 8005934:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005936:	88fb      	ldrh	r3, [r7, #6]
 8005938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01f      	beq.n	8005980 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	461a      	mov	r2, r3
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	b29b      	uxth	r3, r3
 8005952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	82fb      	strh	r3, [r7, #22]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	441a      	add	r2, r3
 800596a:	8afb      	ldrh	r3, [r7, #22]
 800596c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005978:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800597c:	b29b      	uxth	r3, r3
 800597e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005980:	8b7b      	ldrh	r3, [r7, #26]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 8085 	beq.w	8005a92 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6818      	ldr	r0, [r3, #0]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	6959      	ldr	r1, [r3, #20]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	891a      	ldrh	r2, [r3, #8]
 8005994:	8b7b      	ldrh	r3, [r7, #26]
 8005996:	f005 ffd1 	bl	800b93c <USB_ReadPMA>
 800599a:	e07a      	b.n	8005a92 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	461a      	mov	r2, r3
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	4413      	add	r3, r2
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	6812      	ldr	r2, [r2, #0]
 80059b4:	4413      	add	r3, r2
 80059b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	8b7b      	ldrh	r3, [r7, #26]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d306      	bcc.n	80059da <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	699a      	ldr	r2, [r3, #24]
 80059d0:	8b7b      	ldrh	r3, [r7, #26]
 80059d2:	1ad2      	subs	r2, r2, r3
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	619a      	str	r2, [r3, #24]
 80059d8:	e002      	b.n	80059e0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2200      	movs	r2, #0
 80059de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d123      	bne.n	8005a30 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	461a      	mov	r2, r3
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a02:	83fb      	strh	r3, [r7, #30]
 8005a04:	8bfb      	ldrh	r3, [r7, #30]
 8005a06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a0a:	83fb      	strh	r3, [r7, #30]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	461a      	mov	r2, r3
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	441a      	add	r2, r3
 8005a1a:	8bfb      	ldrh	r3, [r7, #30]
 8005a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005a30:	88fb      	ldrh	r3, [r7, #6]
 8005a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d11f      	bne.n	8005a7a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a54:	83bb      	strh	r3, [r7, #28]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	441a      	add	r2, r3
 8005a64:	8bbb      	ldrh	r3, [r7, #28]
 8005a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005a7a:	8b7b      	ldrh	r3, [r7, #26]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d008      	beq.n	8005a92 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6818      	ldr	r0, [r3, #0]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	6959      	ldr	r1, [r3, #20]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	895a      	ldrh	r2, [r3, #10]
 8005a8c:	8b7b      	ldrh	r3, [r7, #26]
 8005a8e:	f005 ff55 	bl	800b93c <USB_ReadPMA>
    }
  }

  return count;
 8005a92:	8b7b      	ldrh	r3, [r7, #26]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3720      	adds	r7, #32
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b0a4      	sub	sp, #144	; 0x90
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005aaa:	88fb      	ldrh	r3, [r7, #6]
 8005aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 81db 	beq.w	8005e6c <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	4413      	add	r3, r2
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	6812      	ldr	r2, [r2, #0]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ada:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d907      	bls.n	8005afa <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	699a      	ldr	r2, [r3, #24]
 8005aee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005af2:	1ad2      	subs	r2, r2, r3
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	619a      	str	r2, [r3, #24]
 8005af8:	e002      	b.n	8005b00 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	2200      	movs	r2, #0
 8005afe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f040 80b9 	bne.w	8005c7c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	785b      	ldrb	r3, [r3, #1]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d126      	bne.n	8005b60 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	461a      	mov	r2, r3
 8005b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b26:	4413      	add	r3, r2
 8005b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	00da      	lsls	r2, r3, #3
 8005b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b32:	4413      	add	r3, r2
 8005b34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b48:	801a      	strh	r2, [r3, #0]
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	801a      	strh	r2, [r3, #0]
 8005b5e:	e01a      	b.n	8005b96 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d116      	bne.n	8005b96 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7c:	4413      	add	r3, r2
 8005b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	00da      	lsls	r2, r3, #3
 8005b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b88:	4413      	add	r3, r2
 8005b8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	2200      	movs	r2, #0
 8005b94:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	785b      	ldrb	r3, [r3, #1]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d126      	bne.n	8005bf2 <HAL_PCD_EP_DB_Transmit+0x156>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	61fb      	str	r3, [r7, #28]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	4413      	add	r3, r2
 8005bba:	61fb      	str	r3, [r7, #28]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	00da      	lsls	r2, r3, #3
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bca:	61bb      	str	r3, [r7, #24]
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	801a      	strh	r2, [r3, #0]
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	801a      	strh	r2, [r3, #0]
 8005bf0:	e017      	b.n	8005c22 <HAL_PCD_EP_DB_Transmit+0x186>
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	785b      	ldrb	r3, [r3, #1]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d113      	bne.n	8005c22 <HAL_PCD_EP_DB_Transmit+0x186>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	4413      	add	r3, r2
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	00da      	lsls	r2, r3, #3
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	4413      	add	r3, r2
 8005c16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c1a:	623b      	str	r3, [r7, #32]
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	4619      	mov	r1, r3
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f00b fa8e 	bl	801114a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c2e:	88fb      	ldrh	r3, [r7, #6]
 8005c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 82fa 	beq.w	800622e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c54:	82fb      	strh	r3, [r7, #22]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	441a      	add	r2, r3
 8005c64:	8afb      	ldrh	r3, [r7, #22]
 8005c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	8013      	strh	r3, [r2, #0]
 8005c7a:	e2d8      	b.n	800622e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c7c:	88fb      	ldrh	r3, [r7, #6]
 8005c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d021      	beq.n	8005cca <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	441a      	add	r2, r3
 8005cb2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	f040 82ac 	bne.w	800622e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	695a      	ldr	r2, [r3, #20]
 8005cda:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005cde:	441a      	add	r2, r3
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	69da      	ldr	r2, [r3, #28]
 8005ce8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005cec:	441a      	add	r2, r3
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	6a1a      	ldr	r2, [r3, #32]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d30b      	bcc.n	8005d16 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	6a1a      	ldr	r2, [r3, #32]
 8005d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d0e:	1ad2      	subs	r2, r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	621a      	str	r2, [r3, #32]
 8005d14:	e017      	b.n	8005d46 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d108      	bne.n	8005d30 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005d1e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005d2e:	e00a      	b.n	8005d46 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2200      	movs	r2, #0
 8005d44:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	785b      	ldrb	r3, [r3, #1]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d165      	bne.n	8005e1a <HAL_PCD_EP_DB_Transmit+0x37e>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	461a      	mov	r2, r3
 8005d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d62:	4413      	add	r3, r2
 8005d64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	00da      	lsls	r2, r3, #3
 8005d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d6e:	4413      	add	r3, r2
 8005d70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d74:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	801a      	strh	r2, [r3, #0]
 8005d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d8a:	2b3e      	cmp	r3, #62	; 0x3e
 8005d8c:	d91d      	bls.n	8005dca <HAL_PCD_EP_DB_Transmit+0x32e>
 8005d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d92:	095b      	lsrs	r3, r3, #5
 8005d94:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d102      	bne.n	8005da8 <HAL_PCD_EP_DB_Transmit+0x30c>
 8005da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005da4:	3b01      	subs	r3, #1
 8005da6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	029b      	lsls	r3, r3, #10
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	4313      	orrs	r3, r2
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc6:	801a      	strh	r2, [r3, #0]
 8005dc8:	e044      	b.n	8005e54 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10a      	bne.n	8005de8 <HAL_PCD_EP_DB_Transmit+0x34c>
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	801a      	strh	r2, [r3, #0]
 8005de6:	e035      	b.n	8005e54 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005de8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dec:	085b      	lsrs	r3, r3, #1
 8005dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8005df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <HAL_PCD_EP_DB_Transmit+0x366>
 8005dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dfe:	3301      	adds	r3, #1
 8005e00:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	029b      	lsls	r3, r3, #10
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	4313      	orrs	r3, r2
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e16:	801a      	strh	r2, [r3, #0]
 8005e18:	e01c      	b.n	8005e54 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	785b      	ldrb	r3, [r3, #1]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d118      	bne.n	8005e54 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	647b      	str	r3, [r7, #68]	; 0x44
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	461a      	mov	r2, r3
 8005e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e36:	4413      	add	r3, r2
 8005e38:	647b      	str	r3, [r7, #68]	; 0x44
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	00da      	lsls	r2, r3, #3
 8005e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e42:	4413      	add	r3, r2
 8005e44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e48:	643b      	str	r3, [r7, #64]	; 0x40
 8005e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e52:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6818      	ldr	r0, [r3, #0]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	6959      	ldr	r1, [r3, #20]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	891a      	ldrh	r2, [r3, #8]
 8005e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	f005 fd27 	bl	800b8b8 <USB_WritePMA>
 8005e6a:	e1e0      	b.n	800622e <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	461a      	mov	r2, r3
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	4413      	add	r3, r2
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	6812      	ldr	r2, [r2, #0]
 8005e84:	4413      	add	r3, r2
 8005e86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e90:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	699a      	ldr	r2, [r3, #24]
 8005e98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d307      	bcc.n	8005eb0 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	699a      	ldr	r2, [r3, #24]
 8005ea4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005ea8:	1ad2      	subs	r2, r2, r3
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	619a      	str	r2, [r3, #24]
 8005eae:	e002      	b.n	8005eb6 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f040 80c0 	bne.w	8006040 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	785b      	ldrb	r3, [r3, #1]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d126      	bne.n	8005f16 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	461a      	mov	r2, r3
 8005eda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005edc:	4413      	add	r3, r2
 8005ede:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	00da      	lsls	r2, r3, #3
 8005ee6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ee8:	4413      	add	r3, r2
 8005eea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005eee:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005efe:	801a      	strh	r2, [r3, #0]
 8005f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f12:	801a      	strh	r2, [r3, #0]
 8005f14:	e01a      	b.n	8005f4c <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	785b      	ldrb	r3, [r3, #1]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d116      	bne.n	8005f4c <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	667b      	str	r3, [r7, #100]	; 0x64
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f32:	4413      	add	r3, r2
 8005f34:	667b      	str	r3, [r7, #100]	; 0x64
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	00da      	lsls	r2, r3, #3
 8005f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f3e:	4413      	add	r3, r2
 8005f40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f44:	663b      	str	r3, [r7, #96]	; 0x60
 8005f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f48:	2200      	movs	r2, #0
 8005f4a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	677b      	str	r3, [r7, #116]	; 0x74
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	785b      	ldrb	r3, [r3, #1]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d12b      	bne.n	8005fb2 <HAL_PCD_EP_DB_Transmit+0x516>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6e:	4413      	add	r3, r2
 8005f70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	00da      	lsls	r2, r3, #3
 8005f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f96:	801a      	strh	r2, [r3, #0]
 8005f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fae:	801a      	strh	r2, [r3, #0]
 8005fb0:	e017      	b.n	8005fe2 <HAL_PCD_EP_DB_Transmit+0x546>
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	785b      	ldrb	r3, [r3, #1]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d113      	bne.n	8005fe2 <HAL_PCD_EP_DB_Transmit+0x546>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fc8:	4413      	add	r3, r2
 8005fca:	677b      	str	r3, [r7, #116]	; 0x74
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	00da      	lsls	r2, r3, #3
 8005fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fda:	673b      	str	r3, [r7, #112]	; 0x70
 8005fdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fde:	2200      	movs	r2, #0
 8005fe0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f00b f8ae 	bl	801114a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005fee:	88fb      	ldrh	r3, [r7, #6]
 8005ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f040 811a 	bne.w	800622e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	b29b      	uxth	r3, r3
 800600c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006014:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	441a      	add	r2, r3
 8006026:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800602a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800602e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006032:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603a:	b29b      	uxth	r3, r3
 800603c:	8013      	strh	r3, [r2, #0]
 800603e:	e0f6      	b.n	800622e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006040:	88fb      	ldrh	r3, [r7, #6]
 8006042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d121      	bne.n	800608e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	b29b      	uxth	r3, r3
 800605c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006064:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	461a      	mov	r2, r3
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	441a      	add	r2, r3
 8006076:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800607a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800607e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006082:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608a:	b29b      	uxth	r3, r3
 800608c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006094:	2b01      	cmp	r3, #1
 8006096:	f040 80ca 	bne.w	800622e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	695a      	ldr	r2, [r3, #20]
 800609e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80060a2:	441a      	add	r2, r3
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	69da      	ldr	r2, [r3, #28]
 80060ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80060b0:	441a      	add	r2, r3
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	6a1a      	ldr	r2, [r3, #32]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d30b      	bcc.n	80060da <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	6a1a      	ldr	r2, [r3, #32]
 80060ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060d2:	1ad2      	subs	r2, r2, r3
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	621a      	str	r2, [r3, #32]
 80060d8:	e017      	b.n	800610a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d108      	bne.n	80060f4 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80060e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80060e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80060f2:	e00a      	b.n	800610a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2200      	movs	r2, #0
 8006100:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	657b      	str	r3, [r7, #84]	; 0x54
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	785b      	ldrb	r3, [r3, #1]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d165      	bne.n	80061e4 <HAL_PCD_EP_DB_Transmit+0x748>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006126:	b29b      	uxth	r3, r3
 8006128:	461a      	mov	r2, r3
 800612a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800612c:	4413      	add	r3, r2
 800612e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	00da      	lsls	r2, r3, #3
 8006136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006138:	4413      	add	r3, r2
 800613a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800613e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	b29b      	uxth	r3, r3
 8006146:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800614a:	b29a      	uxth	r2, r3
 800614c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800614e:	801a      	strh	r2, [r3, #0]
 8006150:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006154:	2b3e      	cmp	r3, #62	; 0x3e
 8006156:	d91d      	bls.n	8006194 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8006158:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800615c:	095b      	lsrs	r3, r3, #5
 800615e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006160:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006164:	f003 031f 	and.w	r3, r3, #31
 8006168:	2b00      	cmp	r3, #0
 800616a:	d102      	bne.n	8006172 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800616c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800616e:	3b01      	subs	r3, #1
 8006170:	66bb      	str	r3, [r7, #104]	; 0x68
 8006172:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	b29a      	uxth	r2, r3
 8006178:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800617a:	b29b      	uxth	r3, r3
 800617c:	029b      	lsls	r3, r3, #10
 800617e:	b29b      	uxth	r3, r3
 8006180:	4313      	orrs	r3, r2
 8006182:	b29b      	uxth	r3, r3
 8006184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800618c:	b29a      	uxth	r2, r3
 800618e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006190:	801a      	strh	r2, [r3, #0]
 8006192:	e041      	b.n	8006218 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006194:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10a      	bne.n	80061b2 <HAL_PCD_EP_DB_Transmit+0x716>
 800619c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061ae:	801a      	strh	r2, [r3, #0]
 80061b0:	e032      	b.n	8006218 <HAL_PCD_EP_DB_Transmit+0x77c>
 80061b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061b6:	085b      	lsrs	r3, r3, #1
 80061b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80061ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <HAL_PCD_EP_DB_Transmit+0x730>
 80061c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061c8:	3301      	adds	r3, #1
 80061ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80061cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	029b      	lsls	r3, r3, #10
 80061d8:	b29b      	uxth	r3, r3
 80061da:	4313      	orrs	r3, r2
 80061dc:	b29a      	uxth	r2, r3
 80061de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061e0:	801a      	strh	r2, [r3, #0]
 80061e2:	e019      	b.n	8006218 <HAL_PCD_EP_DB_Transmit+0x77c>
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	785b      	ldrb	r3, [r3, #1]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d115      	bne.n	8006218 <HAL_PCD_EP_DB_Transmit+0x77c>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	461a      	mov	r2, r3
 80061f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061fa:	4413      	add	r3, r2
 80061fc:	657b      	str	r3, [r7, #84]	; 0x54
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	00da      	lsls	r2, r3, #3
 8006204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006206:	4413      	add	r3, r2
 8006208:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800620c:	653b      	str	r3, [r7, #80]	; 0x50
 800620e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006212:	b29a      	uxth	r2, r3
 8006214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006216:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	6959      	ldr	r1, [r3, #20]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	895a      	ldrh	r2, [r3, #10]
 8006224:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006228:	b29b      	uxth	r3, r3
 800622a:	f005 fb45 	bl	800b8b8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006248:	82bb      	strh	r3, [r7, #20]
 800624a:	8abb      	ldrh	r3, [r7, #20]
 800624c:	f083 0310 	eor.w	r3, r3, #16
 8006250:	82bb      	strh	r3, [r7, #20]
 8006252:	8abb      	ldrh	r3, [r7, #20]
 8006254:	f083 0320 	eor.w	r3, r3, #32
 8006258:	82bb      	strh	r3, [r7, #20]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	441a      	add	r2, r3
 8006268:	8abb      	ldrh	r3, [r7, #20]
 800626a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800627a:	b29b      	uxth	r3, r3
 800627c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3790      	adds	r7, #144	; 0x90
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	607b      	str	r3, [r7, #4]
 8006292:	460b      	mov	r3, r1
 8006294:	817b      	strh	r3, [r7, #10]
 8006296:	4613      	mov	r3, r2
 8006298:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800629a:	897b      	ldrh	r3, [r7, #10]
 800629c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00b      	beq.n	80062be <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062a6:	897b      	ldrh	r3, [r7, #10]
 80062a8:	f003 0207 	and.w	r2, r3, #7
 80062ac:	4613      	mov	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	3310      	adds	r3, #16
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4413      	add	r3, r2
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	e009      	b.n	80062d2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80062be:	897a      	ldrh	r2, [r7, #10]
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	4413      	add	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80062d2:	893b      	ldrh	r3, [r7, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d107      	bne.n	80062e8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2200      	movs	r2, #0
 80062dc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	80da      	strh	r2, [r3, #6]
 80062e6:	e00b      	b.n	8006300 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2201      	movs	r2, #1
 80062ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	0c1b      	lsrs	r3, r3, #16
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	371c      	adds	r7, #28
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800630e:	b480      	push	{r7}
 8006310:	b085      	sub	sp, #20
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006332:	b29b      	uxth	r3, r3
 8006334:	f043 0301 	orr.w	r3, r3, #1
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006346:	b29b      	uxth	r3, r3
 8006348:	f043 0302 	orr.w	r3, r3, #2
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
	...

08006364 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d141      	bne.n	80063f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006372:	4b4b      	ldr	r3, [pc, #300]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800637a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800637e:	d131      	bne.n	80063e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006380:	4b47      	ldr	r3, [pc, #284]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006386:	4a46      	ldr	r2, [pc, #280]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800638c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006390:	4b43      	ldr	r3, [pc, #268]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006398:	4a41      	ldr	r2, [pc, #260]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800639a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800639e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063a0:	4b40      	ldr	r3, [pc, #256]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2232      	movs	r2, #50	; 0x32
 80063a6:	fb02 f303 	mul.w	r3, r2, r3
 80063aa:	4a3f      	ldr	r2, [pc, #252]	; (80064a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80063ac:	fba2 2303 	umull	r2, r3, r2, r3
 80063b0:	0c9b      	lsrs	r3, r3, #18
 80063b2:	3301      	adds	r3, #1
 80063b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063b6:	e002      	b.n	80063be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063be:	4b38      	ldr	r3, [pc, #224]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ca:	d102      	bne.n	80063d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f2      	bne.n	80063b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063d2:	4b33      	ldr	r3, [pc, #204]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063de:	d158      	bne.n	8006492 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e057      	b.n	8006494 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063e4:	4b2e      	ldr	r3, [pc, #184]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ea:	4a2d      	ldr	r2, [pc, #180]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80063f4:	e04d      	b.n	8006492 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063fc:	d141      	bne.n	8006482 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80063fe:	4b28      	ldr	r3, [pc, #160]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800640a:	d131      	bne.n	8006470 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800640c:	4b24      	ldr	r3, [pc, #144]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800640e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006412:	4a23      	ldr	r2, [pc, #140]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006418:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800641c:	4b20      	ldr	r3, [pc, #128]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006424:	4a1e      	ldr	r2, [pc, #120]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800642a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800642c:	4b1d      	ldr	r3, [pc, #116]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2232      	movs	r2, #50	; 0x32
 8006432:	fb02 f303 	mul.w	r3, r2, r3
 8006436:	4a1c      	ldr	r2, [pc, #112]	; (80064a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006438:	fba2 2303 	umull	r2, r3, r2, r3
 800643c:	0c9b      	lsrs	r3, r3, #18
 800643e:	3301      	adds	r3, #1
 8006440:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006442:	e002      	b.n	800644a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3b01      	subs	r3, #1
 8006448:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800644a:	4b15      	ldr	r3, [pc, #84]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006456:	d102      	bne.n	800645e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1f2      	bne.n	8006444 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800645e:	4b10      	ldr	r3, [pc, #64]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800646a:	d112      	bne.n	8006492 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e011      	b.n	8006494 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006470:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006476:	4a0a      	ldr	r2, [pc, #40]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800647c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006480:	e007      	b.n	8006492 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006482:	4b07      	ldr	r3, [pc, #28]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800648a:	4a05      	ldr	r2, [pc, #20]	; (80064a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800648c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006490:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	40007000 	.word	0x40007000
 80064a4:	20000000 	.word	0x20000000
 80064a8:	431bde83 	.word	0x431bde83

080064ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80064b0:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	4a04      	ldr	r2, [pc, #16]	; (80064c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80064b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064ba:	6093      	str	r3, [r2, #8]
}
 80064bc:	bf00      	nop
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	40007000 	.word	0x40007000

080064cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b088      	sub	sp, #32
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e2fe      	b.n	8006adc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d075      	beq.n	80065d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ea:	4b97      	ldr	r3, [pc, #604]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 030c 	and.w	r3, r3, #12
 80064f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064f4:	4b94      	ldr	r3, [pc, #592]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f003 0303 	and.w	r3, r3, #3
 80064fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	2b0c      	cmp	r3, #12
 8006502:	d102      	bne.n	800650a <HAL_RCC_OscConfig+0x3e>
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	2b03      	cmp	r3, #3
 8006508:	d002      	beq.n	8006510 <HAL_RCC_OscConfig+0x44>
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	2b08      	cmp	r3, #8
 800650e:	d10b      	bne.n	8006528 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006510:	4b8d      	ldr	r3, [pc, #564]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d05b      	beq.n	80065d4 <HAL_RCC_OscConfig+0x108>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d157      	bne.n	80065d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e2d9      	b.n	8006adc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006530:	d106      	bne.n	8006540 <HAL_RCC_OscConfig+0x74>
 8006532:	4b85      	ldr	r3, [pc, #532]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a84      	ldr	r2, [pc, #528]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 8006538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	e01d      	b.n	800657c <HAL_RCC_OscConfig+0xb0>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006548:	d10c      	bne.n	8006564 <HAL_RCC_OscConfig+0x98>
 800654a:	4b7f      	ldr	r3, [pc, #508]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a7e      	ldr	r2, [pc, #504]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 8006550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	4b7c      	ldr	r3, [pc, #496]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a7b      	ldr	r2, [pc, #492]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 800655c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	e00b      	b.n	800657c <HAL_RCC_OscConfig+0xb0>
 8006564:	4b78      	ldr	r3, [pc, #480]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a77      	ldr	r2, [pc, #476]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 800656a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	4b75      	ldr	r3, [pc, #468]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a74      	ldr	r2, [pc, #464]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 8006576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800657a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d013      	beq.n	80065ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006584:	f7fc ff32 	bl	80033ec <HAL_GetTick>
 8006588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800658c:	f7fc ff2e 	bl	80033ec <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b64      	cmp	r3, #100	; 0x64
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e29e      	b.n	8006adc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800659e:	4b6a      	ldr	r3, [pc, #424]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0f0      	beq.n	800658c <HAL_RCC_OscConfig+0xc0>
 80065aa:	e014      	b.n	80065d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ac:	f7fc ff1e 	bl	80033ec <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065b2:	e008      	b.n	80065c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065b4:	f7fc ff1a 	bl	80033ec <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b64      	cmp	r3, #100	; 0x64
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e28a      	b.n	8006adc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065c6:	4b60      	ldr	r3, [pc, #384]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1f0      	bne.n	80065b4 <HAL_RCC_OscConfig+0xe8>
 80065d2:	e000      	b.n	80065d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d075      	beq.n	80066ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065e2:	4b59      	ldr	r3, [pc, #356]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f003 030c 	and.w	r3, r3, #12
 80065ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065ec:	4b56      	ldr	r3, [pc, #344]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f003 0303 	and.w	r3, r3, #3
 80065f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	2b0c      	cmp	r3, #12
 80065fa:	d102      	bne.n	8006602 <HAL_RCC_OscConfig+0x136>
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d002      	beq.n	8006608 <HAL_RCC_OscConfig+0x13c>
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	2b04      	cmp	r3, #4
 8006606:	d11f      	bne.n	8006648 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006608:	4b4f      	ldr	r3, [pc, #316]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <HAL_RCC_OscConfig+0x154>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e25d      	b.n	8006adc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006620:	4b49      	ldr	r3, [pc, #292]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	061b      	lsls	r3, r3, #24
 800662e:	4946      	ldr	r1, [pc, #280]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 8006630:	4313      	orrs	r3, r2
 8006632:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006634:	4b45      	ldr	r3, [pc, #276]	; (800674c <HAL_RCC_OscConfig+0x280>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4618      	mov	r0, r3
 800663a:	f7fc fc5d 	bl	8002ef8 <HAL_InitTick>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d043      	beq.n	80066cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e249      	b.n	8006adc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d023      	beq.n	8006698 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006650:	4b3d      	ldr	r3, [pc, #244]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a3c      	ldr	r2, [pc, #240]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 8006656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800665a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800665c:	f7fc fec6 	bl	80033ec <HAL_GetTick>
 8006660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006662:	e008      	b.n	8006676 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006664:	f7fc fec2 	bl	80033ec <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	2b02      	cmp	r3, #2
 8006670:	d901      	bls.n	8006676 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e232      	b.n	8006adc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006676:	4b34      	ldr	r3, [pc, #208]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0f0      	beq.n	8006664 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006682:	4b31      	ldr	r3, [pc, #196]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	061b      	lsls	r3, r3, #24
 8006690:	492d      	ldr	r1, [pc, #180]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 8006692:	4313      	orrs	r3, r2
 8006694:	604b      	str	r3, [r1, #4]
 8006696:	e01a      	b.n	80066ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006698:	4b2b      	ldr	r3, [pc, #172]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a2a      	ldr	r2, [pc, #168]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 800669e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a4:	f7fc fea2 	bl	80033ec <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ac:	f7fc fe9e 	bl	80033ec <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e20e      	b.n	8006adc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066be:	4b22      	ldr	r3, [pc, #136]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1f0      	bne.n	80066ac <HAL_RCC_OscConfig+0x1e0>
 80066ca:	e000      	b.n	80066ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0308 	and.w	r3, r3, #8
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d041      	beq.n	800675e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d01c      	beq.n	800671c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066e2:	4b19      	ldr	r3, [pc, #100]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 80066e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066e8:	4a17      	ldr	r2, [pc, #92]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 80066ea:	f043 0301 	orr.w	r3, r3, #1
 80066ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066f2:	f7fc fe7b 	bl	80033ec <HAL_GetTick>
 80066f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066f8:	e008      	b.n	800670c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066fa:	f7fc fe77 	bl	80033ec <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b02      	cmp	r3, #2
 8006706:	d901      	bls.n	800670c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e1e7      	b.n	8006adc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800670c:	4b0e      	ldr	r3, [pc, #56]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 800670e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d0ef      	beq.n	80066fa <HAL_RCC_OscConfig+0x22e>
 800671a:	e020      	b.n	800675e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800671c:	4b0a      	ldr	r3, [pc, #40]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 800671e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006722:	4a09      	ldr	r2, [pc, #36]	; (8006748 <HAL_RCC_OscConfig+0x27c>)
 8006724:	f023 0301 	bic.w	r3, r3, #1
 8006728:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800672c:	f7fc fe5e 	bl	80033ec <HAL_GetTick>
 8006730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006732:	e00d      	b.n	8006750 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006734:	f7fc fe5a 	bl	80033ec <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b02      	cmp	r3, #2
 8006740:	d906      	bls.n	8006750 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e1ca      	b.n	8006adc <HAL_RCC_OscConfig+0x610>
 8006746:	bf00      	nop
 8006748:	40021000 	.word	0x40021000
 800674c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006750:	4b8c      	ldr	r3, [pc, #560]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 8006752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1ea      	bne.n	8006734 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 80a6 	beq.w	80068b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800676c:	2300      	movs	r3, #0
 800676e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006770:	4b84      	ldr	r3, [pc, #528]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 8006772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <HAL_RCC_OscConfig+0x2b4>
 800677c:	2301      	movs	r3, #1
 800677e:	e000      	b.n	8006782 <HAL_RCC_OscConfig+0x2b6>
 8006780:	2300      	movs	r3, #0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00d      	beq.n	80067a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006786:	4b7f      	ldr	r3, [pc, #508]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 8006788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800678a:	4a7e      	ldr	r2, [pc, #504]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 800678c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006790:	6593      	str	r3, [r2, #88]	; 0x58
 8006792:	4b7c      	ldr	r3, [pc, #496]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 8006794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800679e:	2301      	movs	r3, #1
 80067a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067a2:	4b79      	ldr	r3, [pc, #484]	; (8006988 <HAL_RCC_OscConfig+0x4bc>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d118      	bne.n	80067e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067ae:	4b76      	ldr	r3, [pc, #472]	; (8006988 <HAL_RCC_OscConfig+0x4bc>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a75      	ldr	r2, [pc, #468]	; (8006988 <HAL_RCC_OscConfig+0x4bc>)
 80067b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067ba:	f7fc fe17 	bl	80033ec <HAL_GetTick>
 80067be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067c0:	e008      	b.n	80067d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c2:	f7fc fe13 	bl	80033ec <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e183      	b.n	8006adc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067d4:	4b6c      	ldr	r3, [pc, #432]	; (8006988 <HAL_RCC_OscConfig+0x4bc>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0f0      	beq.n	80067c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d108      	bne.n	80067fa <HAL_RCC_OscConfig+0x32e>
 80067e8:	4b66      	ldr	r3, [pc, #408]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 80067ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ee:	4a65      	ldr	r2, [pc, #404]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 80067f0:	f043 0301 	orr.w	r3, r3, #1
 80067f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067f8:	e024      	b.n	8006844 <HAL_RCC_OscConfig+0x378>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	2b05      	cmp	r3, #5
 8006800:	d110      	bne.n	8006824 <HAL_RCC_OscConfig+0x358>
 8006802:	4b60      	ldr	r3, [pc, #384]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 8006804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006808:	4a5e      	ldr	r2, [pc, #376]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 800680a:	f043 0304 	orr.w	r3, r3, #4
 800680e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006812:	4b5c      	ldr	r3, [pc, #368]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 8006814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006818:	4a5a      	ldr	r2, [pc, #360]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 800681a:	f043 0301 	orr.w	r3, r3, #1
 800681e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006822:	e00f      	b.n	8006844 <HAL_RCC_OscConfig+0x378>
 8006824:	4b57      	ldr	r3, [pc, #348]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 8006826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682a:	4a56      	ldr	r2, [pc, #344]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 800682c:	f023 0301 	bic.w	r3, r3, #1
 8006830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006834:	4b53      	ldr	r3, [pc, #332]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 8006836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800683a:	4a52      	ldr	r2, [pc, #328]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 800683c:	f023 0304 	bic.w	r3, r3, #4
 8006840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d016      	beq.n	800687a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800684c:	f7fc fdce 	bl	80033ec <HAL_GetTick>
 8006850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006852:	e00a      	b.n	800686a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006854:	f7fc fdca 	bl	80033ec <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006862:	4293      	cmp	r3, r2
 8006864:	d901      	bls.n	800686a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e138      	b.n	8006adc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800686a:	4b46      	ldr	r3, [pc, #280]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 800686c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0ed      	beq.n	8006854 <HAL_RCC_OscConfig+0x388>
 8006878:	e015      	b.n	80068a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800687a:	f7fc fdb7 	bl	80033ec <HAL_GetTick>
 800687e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006880:	e00a      	b.n	8006898 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006882:	f7fc fdb3 	bl	80033ec <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006890:	4293      	cmp	r3, r2
 8006892:	d901      	bls.n	8006898 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e121      	b.n	8006adc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006898:	4b3a      	ldr	r3, [pc, #232]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 800689a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1ed      	bne.n	8006882 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80068a6:	7ffb      	ldrb	r3, [r7, #31]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d105      	bne.n	80068b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068ac:	4b35      	ldr	r3, [pc, #212]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 80068ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b0:	4a34      	ldr	r2, [pc, #208]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 80068b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0320 	and.w	r3, r3, #32
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d03c      	beq.n	800693e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01c      	beq.n	8006906 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068cc:	4b2d      	ldr	r3, [pc, #180]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 80068ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068d2:	4a2c      	ldr	r2, [pc, #176]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 80068d4:	f043 0301 	orr.w	r3, r3, #1
 80068d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068dc:	f7fc fd86 	bl	80033ec <HAL_GetTick>
 80068e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068e2:	e008      	b.n	80068f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068e4:	f7fc fd82 	bl	80033ec <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d901      	bls.n	80068f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e0f2      	b.n	8006adc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068f6:	4b23      	ldr	r3, [pc, #140]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 80068f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068fc:	f003 0302 	and.w	r3, r3, #2
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0ef      	beq.n	80068e4 <HAL_RCC_OscConfig+0x418>
 8006904:	e01b      	b.n	800693e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006906:	4b1f      	ldr	r3, [pc, #124]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 8006908:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800690c:	4a1d      	ldr	r2, [pc, #116]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 800690e:	f023 0301 	bic.w	r3, r3, #1
 8006912:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006916:	f7fc fd69 	bl	80033ec <HAL_GetTick>
 800691a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800691c:	e008      	b.n	8006930 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800691e:	f7fc fd65 	bl	80033ec <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d901      	bls.n	8006930 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e0d5      	b.n	8006adc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006930:	4b14      	ldr	r3, [pc, #80]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 8006932:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1ef      	bne.n	800691e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	2b00      	cmp	r3, #0
 8006944:	f000 80c9 	beq.w	8006ada <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006948:	4b0e      	ldr	r3, [pc, #56]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f003 030c 	and.w	r3, r3, #12
 8006950:	2b0c      	cmp	r3, #12
 8006952:	f000 8083 	beq.w	8006a5c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	2b02      	cmp	r3, #2
 800695c:	d15e      	bne.n	8006a1c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800695e:	4b09      	ldr	r3, [pc, #36]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a08      	ldr	r2, [pc, #32]	; (8006984 <HAL_RCC_OscConfig+0x4b8>)
 8006964:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696a:	f7fc fd3f 	bl	80033ec <HAL_GetTick>
 800696e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006970:	e00c      	b.n	800698c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006972:	f7fc fd3b 	bl	80033ec <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d905      	bls.n	800698c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e0ab      	b.n	8006adc <HAL_RCC_OscConfig+0x610>
 8006984:	40021000 	.word	0x40021000
 8006988:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800698c:	4b55      	ldr	r3, [pc, #340]	; (8006ae4 <HAL_RCC_OscConfig+0x618>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1ec      	bne.n	8006972 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006998:	4b52      	ldr	r3, [pc, #328]	; (8006ae4 <HAL_RCC_OscConfig+0x618>)
 800699a:	68da      	ldr	r2, [r3, #12]
 800699c:	4b52      	ldr	r3, [pc, #328]	; (8006ae8 <HAL_RCC_OscConfig+0x61c>)
 800699e:	4013      	ands	r3, r2
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6a11      	ldr	r1, [r2, #32]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069a8:	3a01      	subs	r2, #1
 80069aa:	0112      	lsls	r2, r2, #4
 80069ac:	4311      	orrs	r1, r2
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80069b2:	0212      	lsls	r2, r2, #8
 80069b4:	4311      	orrs	r1, r2
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80069ba:	0852      	lsrs	r2, r2, #1
 80069bc:	3a01      	subs	r2, #1
 80069be:	0552      	lsls	r2, r2, #21
 80069c0:	4311      	orrs	r1, r2
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069c6:	0852      	lsrs	r2, r2, #1
 80069c8:	3a01      	subs	r2, #1
 80069ca:	0652      	lsls	r2, r2, #25
 80069cc:	4311      	orrs	r1, r2
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80069d2:	06d2      	lsls	r2, r2, #27
 80069d4:	430a      	orrs	r2, r1
 80069d6:	4943      	ldr	r1, [pc, #268]	; (8006ae4 <HAL_RCC_OscConfig+0x618>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069dc:	4b41      	ldr	r3, [pc, #260]	; (8006ae4 <HAL_RCC_OscConfig+0x618>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a40      	ldr	r2, [pc, #256]	; (8006ae4 <HAL_RCC_OscConfig+0x618>)
 80069e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069e8:	4b3e      	ldr	r3, [pc, #248]	; (8006ae4 <HAL_RCC_OscConfig+0x618>)
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	4a3d      	ldr	r2, [pc, #244]	; (8006ae4 <HAL_RCC_OscConfig+0x618>)
 80069ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f4:	f7fc fcfa 	bl	80033ec <HAL_GetTick>
 80069f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069fa:	e008      	b.n	8006a0e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069fc:	f7fc fcf6 	bl	80033ec <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d901      	bls.n	8006a0e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e066      	b.n	8006adc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a0e:	4b35      	ldr	r3, [pc, #212]	; (8006ae4 <HAL_RCC_OscConfig+0x618>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d0f0      	beq.n	80069fc <HAL_RCC_OscConfig+0x530>
 8006a1a:	e05e      	b.n	8006ada <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a1c:	4b31      	ldr	r3, [pc, #196]	; (8006ae4 <HAL_RCC_OscConfig+0x618>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a30      	ldr	r2, [pc, #192]	; (8006ae4 <HAL_RCC_OscConfig+0x618>)
 8006a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a28:	f7fc fce0 	bl	80033ec <HAL_GetTick>
 8006a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a30:	f7fc fcdc 	bl	80033ec <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e04c      	b.n	8006adc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a42:	4b28      	ldr	r3, [pc, #160]	; (8006ae4 <HAL_RCC_OscConfig+0x618>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1f0      	bne.n	8006a30 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006a4e:	4b25      	ldr	r3, [pc, #148]	; (8006ae4 <HAL_RCC_OscConfig+0x618>)
 8006a50:	68da      	ldr	r2, [r3, #12]
 8006a52:	4924      	ldr	r1, [pc, #144]	; (8006ae4 <HAL_RCC_OscConfig+0x618>)
 8006a54:	4b25      	ldr	r3, [pc, #148]	; (8006aec <HAL_RCC_OscConfig+0x620>)
 8006a56:	4013      	ands	r3, r2
 8006a58:	60cb      	str	r3, [r1, #12]
 8006a5a:	e03e      	b.n	8006ada <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e039      	b.n	8006adc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006a68:	4b1e      	ldr	r3, [pc, #120]	; (8006ae4 <HAL_RCC_OscConfig+0x618>)
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f003 0203 	and.w	r2, r3, #3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d12c      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	3b01      	subs	r3, #1
 8006a88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d123      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a98:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d11b      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d113      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab8:	085b      	lsrs	r3, r3, #1
 8006aba:	3b01      	subs	r3, #1
 8006abc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d109      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006acc:	085b      	lsrs	r3, r3, #1
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d001      	beq.n	8006ada <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e000      	b.n	8006adc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3720      	adds	r7, #32
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	40021000 	.word	0x40021000
 8006ae8:	019f800c 	.word	0x019f800c
 8006aec:	feeefffc 	.word	0xfeeefffc

08006af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006afa:	2300      	movs	r3, #0
 8006afc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e11e      	b.n	8006d46 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b08:	4b91      	ldr	r3, [pc, #580]	; (8006d50 <HAL_RCC_ClockConfig+0x260>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 030f 	and.w	r3, r3, #15
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d910      	bls.n	8006b38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b16:	4b8e      	ldr	r3, [pc, #568]	; (8006d50 <HAL_RCC_ClockConfig+0x260>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f023 020f 	bic.w	r2, r3, #15
 8006b1e:	498c      	ldr	r1, [pc, #560]	; (8006d50 <HAL_RCC_ClockConfig+0x260>)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b26:	4b8a      	ldr	r3, [pc, #552]	; (8006d50 <HAL_RCC_ClockConfig+0x260>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 030f 	and.w	r3, r3, #15
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d001      	beq.n	8006b38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e106      	b.n	8006d46 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d073      	beq.n	8006c2c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	d129      	bne.n	8006ba0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b4c:	4b81      	ldr	r3, [pc, #516]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e0f4      	b.n	8006d46 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006b5c:	f000 f9ce 	bl	8006efc <RCC_GetSysClockFreqFromPLLSource>
 8006b60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	4a7c      	ldr	r2, [pc, #496]	; (8006d58 <HAL_RCC_ClockConfig+0x268>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d93f      	bls.n	8006bea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b6a:	4b7a      	ldr	r3, [pc, #488]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d009      	beq.n	8006b8a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d033      	beq.n	8006bea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d12f      	bne.n	8006bea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b8a:	4b72      	ldr	r3, [pc, #456]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b92:	4a70      	ldr	r2, [pc, #448]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006b9a:	2380      	movs	r3, #128	; 0x80
 8006b9c:	617b      	str	r3, [r7, #20]
 8006b9e:	e024      	b.n	8006bea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d107      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ba8:	4b6a      	ldr	r3, [pc, #424]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d109      	bne.n	8006bc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e0c6      	b.n	8006d46 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bb8:	4b66      	ldr	r3, [pc, #408]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e0be      	b.n	8006d46 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006bc8:	f000 f8ce 	bl	8006d68 <HAL_RCC_GetSysClockFreq>
 8006bcc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	4a61      	ldr	r2, [pc, #388]	; (8006d58 <HAL_RCC_ClockConfig+0x268>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d909      	bls.n	8006bea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006bd6:	4b5f      	ldr	r3, [pc, #380]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bde:	4a5d      	ldr	r2, [pc, #372]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006be6:	2380      	movs	r3, #128	; 0x80
 8006be8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bea:	4b5a      	ldr	r3, [pc, #360]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f023 0203 	bic.w	r2, r3, #3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	4957      	ldr	r1, [pc, #348]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bfc:	f7fc fbf6 	bl	80033ec <HAL_GetTick>
 8006c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c02:	e00a      	b.n	8006c1a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c04:	f7fc fbf2 	bl	80033ec <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e095      	b.n	8006d46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c1a:	4b4e      	ldr	r3, [pc, #312]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f003 020c 	and.w	r2, r3, #12
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d1eb      	bne.n	8006c04 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d023      	beq.n	8006c80 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0304 	and.w	r3, r3, #4
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c44:	4b43      	ldr	r3, [pc, #268]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	4a42      	ldr	r2, [pc, #264]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006c4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006c4e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0308 	and.w	r3, r3, #8
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d007      	beq.n	8006c6c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006c5c:	4b3d      	ldr	r3, [pc, #244]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c64:	4a3b      	ldr	r2, [pc, #236]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006c66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006c6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c6c:	4b39      	ldr	r3, [pc, #228]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	4936      	ldr	r1, [pc, #216]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	608b      	str	r3, [r1, #8]
 8006c7e:	e008      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	2b80      	cmp	r3, #128	; 0x80
 8006c84:	d105      	bne.n	8006c92 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006c86:	4b33      	ldr	r3, [pc, #204]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	4a32      	ldr	r2, [pc, #200]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006c8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c90:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c92:	4b2f      	ldr	r3, [pc, #188]	; (8006d50 <HAL_RCC_ClockConfig+0x260>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 030f 	and.w	r3, r3, #15
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d21d      	bcs.n	8006cdc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ca0:	4b2b      	ldr	r3, [pc, #172]	; (8006d50 <HAL_RCC_ClockConfig+0x260>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f023 020f 	bic.w	r2, r3, #15
 8006ca8:	4929      	ldr	r1, [pc, #164]	; (8006d50 <HAL_RCC_ClockConfig+0x260>)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006cb0:	f7fc fb9c 	bl	80033ec <HAL_GetTick>
 8006cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cb6:	e00a      	b.n	8006cce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cb8:	f7fc fb98 	bl	80033ec <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e03b      	b.n	8006d46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cce:	4b20      	ldr	r3, [pc, #128]	; (8006d50 <HAL_RCC_ClockConfig+0x260>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 030f 	and.w	r3, r3, #15
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d1ed      	bne.n	8006cb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ce8:	4b1a      	ldr	r3, [pc, #104]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	4917      	ldr	r1, [pc, #92]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d009      	beq.n	8006d1a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d06:	4b13      	ldr	r3, [pc, #76]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	490f      	ldr	r1, [pc, #60]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d1a:	f000 f825 	bl	8006d68 <HAL_RCC_GetSysClockFreq>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	4b0c      	ldr	r3, [pc, #48]	; (8006d54 <HAL_RCC_ClockConfig+0x264>)
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	091b      	lsrs	r3, r3, #4
 8006d26:	f003 030f 	and.w	r3, r3, #15
 8006d2a:	490c      	ldr	r1, [pc, #48]	; (8006d5c <HAL_RCC_ClockConfig+0x26c>)
 8006d2c:	5ccb      	ldrb	r3, [r1, r3]
 8006d2e:	f003 031f 	and.w	r3, r3, #31
 8006d32:	fa22 f303 	lsr.w	r3, r2, r3
 8006d36:	4a0a      	ldr	r2, [pc, #40]	; (8006d60 <HAL_RCC_ClockConfig+0x270>)
 8006d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006d3a:	4b0a      	ldr	r3, [pc, #40]	; (8006d64 <HAL_RCC_ClockConfig+0x274>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fc f8da 	bl	8002ef8 <HAL_InitTick>
 8006d44:	4603      	mov	r3, r0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	40022000 	.word	0x40022000
 8006d54:	40021000 	.word	0x40021000
 8006d58:	04c4b400 	.word	0x04c4b400
 8006d5c:	08015170 	.word	0x08015170
 8006d60:	20000000 	.word	0x20000000
 8006d64:	20000004 	.word	0x20000004

08006d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006d6e:	4b2c      	ldr	r3, [pc, #176]	; (8006e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 030c 	and.w	r3, r3, #12
 8006d76:	2b04      	cmp	r3, #4
 8006d78:	d102      	bne.n	8006d80 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d7a:	4b2a      	ldr	r3, [pc, #168]	; (8006e24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d7c:	613b      	str	r3, [r7, #16]
 8006d7e:	e047      	b.n	8006e10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006d80:	4b27      	ldr	r3, [pc, #156]	; (8006e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f003 030c 	and.w	r3, r3, #12
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d102      	bne.n	8006d92 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d8c:	4b25      	ldr	r3, [pc, #148]	; (8006e24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	e03e      	b.n	8006e10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006d92:	4b23      	ldr	r3, [pc, #140]	; (8006e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f003 030c 	and.w	r3, r3, #12
 8006d9a:	2b0c      	cmp	r3, #12
 8006d9c:	d136      	bne.n	8006e0c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d9e:	4b20      	ldr	r3, [pc, #128]	; (8006e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f003 0303 	and.w	r3, r3, #3
 8006da6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006da8:	4b1d      	ldr	r3, [pc, #116]	; (8006e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	091b      	lsrs	r3, r3, #4
 8006dae:	f003 030f 	and.w	r3, r3, #15
 8006db2:	3301      	adds	r3, #1
 8006db4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d10c      	bne.n	8006dd6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006dbc:	4a19      	ldr	r2, [pc, #100]	; (8006e24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc4:	4a16      	ldr	r2, [pc, #88]	; (8006e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dc6:	68d2      	ldr	r2, [r2, #12]
 8006dc8:	0a12      	lsrs	r2, r2, #8
 8006dca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006dce:	fb02 f303 	mul.w	r3, r2, r3
 8006dd2:	617b      	str	r3, [r7, #20]
      break;
 8006dd4:	e00c      	b.n	8006df0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006dd6:	4a13      	ldr	r2, [pc, #76]	; (8006e24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dde:	4a10      	ldr	r2, [pc, #64]	; (8006e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006de0:	68d2      	ldr	r2, [r2, #12]
 8006de2:	0a12      	lsrs	r2, r2, #8
 8006de4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006de8:	fb02 f303 	mul.w	r3, r2, r3
 8006dec:	617b      	str	r3, [r7, #20]
      break;
 8006dee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	0e5b      	lsrs	r3, r3, #25
 8006df6:	f003 0303 	and.w	r3, r3, #3
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	005b      	lsls	r3, r3, #1
 8006dfe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e08:	613b      	str	r3, [r7, #16]
 8006e0a:	e001      	b.n	8006e10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006e10:	693b      	ldr	r3, [r7, #16]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	371c      	adds	r7, #28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	40021000 	.word	0x40021000
 8006e24:	00f42400 	.word	0x00f42400

08006e28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e2c:	4b03      	ldr	r3, [pc, #12]	; (8006e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	20000000 	.word	0x20000000

08006e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e44:	f7ff fff0 	bl	8006e28 <HAL_RCC_GetHCLKFreq>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	4b06      	ldr	r3, [pc, #24]	; (8006e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	0a1b      	lsrs	r3, r3, #8
 8006e50:	f003 0307 	and.w	r3, r3, #7
 8006e54:	4904      	ldr	r1, [pc, #16]	; (8006e68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e56:	5ccb      	ldrb	r3, [r1, r3]
 8006e58:	f003 031f 	and.w	r3, r3, #31
 8006e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	40021000 	.word	0x40021000
 8006e68:	08015180 	.word	0x08015180

08006e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e70:	f7ff ffda 	bl	8006e28 <HAL_RCC_GetHCLKFreq>
 8006e74:	4602      	mov	r2, r0
 8006e76:	4b06      	ldr	r3, [pc, #24]	; (8006e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	0adb      	lsrs	r3, r3, #11
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	4904      	ldr	r1, [pc, #16]	; (8006e94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e82:	5ccb      	ldrb	r3, [r1, r3]
 8006e84:	f003 031f 	and.w	r3, r3, #31
 8006e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	40021000 	.word	0x40021000
 8006e94:	08015180 	.word	0x08015180

08006e98 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	220f      	movs	r2, #15
 8006ea6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006ea8:	4b12      	ldr	r3, [pc, #72]	; (8006ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f003 0203 	and.w	r2, r3, #3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006eb4:	4b0f      	ldr	r3, [pc, #60]	; (8006ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006ec0:	4b0c      	ldr	r3, [pc, #48]	; (8006ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006ecc:	4b09      	ldr	r3, [pc, #36]	; (8006ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	08db      	lsrs	r3, r3, #3
 8006ed2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006eda:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <HAL_RCC_GetClockConfig+0x60>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 020f 	and.w	r2, r3, #15
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	601a      	str	r2, [r3, #0]
}
 8006ee6:	bf00      	nop
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	40021000 	.word	0x40021000
 8006ef8:	40022000 	.word	0x40022000

08006efc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f02:	4b1e      	ldr	r3, [pc, #120]	; (8006f7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f003 0303 	and.w	r3, r3, #3
 8006f0a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f0c:	4b1b      	ldr	r3, [pc, #108]	; (8006f7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	091b      	lsrs	r3, r3, #4
 8006f12:	f003 030f 	and.w	r3, r3, #15
 8006f16:	3301      	adds	r3, #1
 8006f18:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d10c      	bne.n	8006f3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f20:	4a17      	ldr	r2, [pc, #92]	; (8006f80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f28:	4a14      	ldr	r2, [pc, #80]	; (8006f7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f2a:	68d2      	ldr	r2, [r2, #12]
 8006f2c:	0a12      	lsrs	r2, r2, #8
 8006f2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006f32:	fb02 f303 	mul.w	r3, r2, r3
 8006f36:	617b      	str	r3, [r7, #20]
    break;
 8006f38:	e00c      	b.n	8006f54 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f3a:	4a11      	ldr	r2, [pc, #68]	; (8006f80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f42:	4a0e      	ldr	r2, [pc, #56]	; (8006f7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f44:	68d2      	ldr	r2, [r2, #12]
 8006f46:	0a12      	lsrs	r2, r2, #8
 8006f48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006f4c:	fb02 f303 	mul.w	r3, r2, r3
 8006f50:	617b      	str	r3, [r7, #20]
    break;
 8006f52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f54:	4b09      	ldr	r3, [pc, #36]	; (8006f7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	0e5b      	lsrs	r3, r3, #25
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	3301      	adds	r3, #1
 8006f60:	005b      	lsls	r3, r3, #1
 8006f62:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f6c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006f6e:	687b      	ldr	r3, [r7, #4]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	371c      	adds	r7, #28
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	40021000 	.word	0x40021000
 8006f80:	00f42400 	.word	0x00f42400

08006f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f90:	2300      	movs	r3, #0
 8006f92:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 8098 	beq.w	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fa6:	4b43      	ldr	r3, [pc, #268]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10d      	bne.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fb2:	4b40      	ldr	r3, [pc, #256]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb6:	4a3f      	ldr	r2, [pc, #252]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8006fbe:	4b3d      	ldr	r3, [pc, #244]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fc6:	60bb      	str	r3, [r7, #8]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fce:	4b3a      	ldr	r3, [pc, #232]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a39      	ldr	r2, [pc, #228]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fda:	f7fc fa07 	bl	80033ec <HAL_GetTick>
 8006fde:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fe0:	e009      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fe2:	f7fc fa03 	bl	80033ec <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d902      	bls.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	74fb      	strb	r3, [r7, #19]
        break;
 8006ff4:	e005      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ff6:	4b30      	ldr	r3, [pc, #192]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d0ef      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007002:	7cfb      	ldrb	r3, [r7, #19]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d159      	bne.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007008:	4b2a      	ldr	r3, [pc, #168]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800700a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800700e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007012:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d01e      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	429a      	cmp	r2, r3
 8007022:	d019      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007024:	4b23      	ldr	r3, [pc, #140]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800702a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800702e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007030:	4b20      	ldr	r3, [pc, #128]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007036:	4a1f      	ldr	r2, [pc, #124]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800703c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007040:	4b1c      	ldr	r3, [pc, #112]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007046:	4a1b      	ldr	r2, [pc, #108]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800704c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007050:	4a18      	ldr	r2, [pc, #96]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d016      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007062:	f7fc f9c3 	bl	80033ec <HAL_GetTick>
 8007066:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007068:	e00b      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800706a:	f7fc f9bf 	bl	80033ec <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	f241 3288 	movw	r2, #5000	; 0x1388
 8007078:	4293      	cmp	r3, r2
 800707a:	d902      	bls.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	74fb      	strb	r3, [r7, #19]
            break;
 8007080:	e006      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007082:	4b0c      	ldr	r3, [pc, #48]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007088:	f003 0302 	and.w	r3, r3, #2
 800708c:	2b00      	cmp	r3, #0
 800708e:	d0ec      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007090:	7cfb      	ldrb	r3, [r7, #19]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10b      	bne.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007096:	4b07      	ldr	r3, [pc, #28]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800709c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a4:	4903      	ldr	r1, [pc, #12]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80070ac:	e008      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070ae:	7cfb      	ldrb	r3, [r7, #19]
 80070b0:	74bb      	strb	r3, [r7, #18]
 80070b2:	e005      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80070b4:	40021000 	.word	0x40021000
 80070b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070bc:	7cfb      	ldrb	r3, [r7, #19]
 80070be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070c0:	7c7b      	ldrb	r3, [r7, #17]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d105      	bne.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070c6:	4ba7      	ldr	r3, [pc, #668]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ca:	4aa6      	ldr	r2, [pc, #664]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00a      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070de:	4ba1      	ldr	r3, [pc, #644]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e4:	f023 0203 	bic.w	r2, r3, #3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	499d      	ldr	r1, [pc, #628]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00a      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007100:	4b98      	ldr	r3, [pc, #608]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007106:	f023 020c 	bic.w	r2, r3, #12
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	4995      	ldr	r1, [pc, #596]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007110:	4313      	orrs	r3, r2
 8007112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0304 	and.w	r3, r3, #4
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00a      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007122:	4b90      	ldr	r3, [pc, #576]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007128:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	498c      	ldr	r1, [pc, #560]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007132:	4313      	orrs	r3, r2
 8007134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0308 	and.w	r3, r3, #8
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00a      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007144:	4b87      	ldr	r3, [pc, #540]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800714a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	4984      	ldr	r1, [pc, #528]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007154:	4313      	orrs	r3, r2
 8007156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0310 	and.w	r3, r3, #16
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00a      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007166:	4b7f      	ldr	r3, [pc, #508]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800716c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	497b      	ldr	r1, [pc, #492]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007176:	4313      	orrs	r3, r2
 8007178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0320 	and.w	r3, r3, #32
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00a      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007188:	4b76      	ldr	r3, [pc, #472]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800718a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800718e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	4973      	ldr	r1, [pc, #460]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007198:	4313      	orrs	r3, r2
 800719a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00a      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071aa:	4b6e      	ldr	r3, [pc, #440]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	496a      	ldr	r1, [pc, #424]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00a      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80071cc:	4b65      	ldr	r3, [pc, #404]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	4962      	ldr	r1, [pc, #392]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00a      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071ee:	4b5d      	ldr	r3, [pc, #372]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	4959      	ldr	r1, [pc, #356]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00a      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007210:	4b54      	ldr	r3, [pc, #336]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007212:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007216:	f023 0203 	bic.w	r2, r3, #3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721e:	4951      	ldr	r1, [pc, #324]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007220:	4313      	orrs	r3, r2
 8007222:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00a      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007232:	4b4c      	ldr	r3, [pc, #304]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007238:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	4948      	ldr	r1, [pc, #288]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007242:	4313      	orrs	r3, r2
 8007244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007250:	2b00      	cmp	r3, #0
 8007252:	d015      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007254:	4b43      	ldr	r3, [pc, #268]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800725a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007262:	4940      	ldr	r1, [pc, #256]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007264:	4313      	orrs	r3, r2
 8007266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007272:	d105      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007274:	4b3b      	ldr	r3, [pc, #236]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	4a3a      	ldr	r2, [pc, #232]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800727a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800727e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007288:	2b00      	cmp	r3, #0
 800728a:	d015      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800728c:	4b35      	ldr	r3, [pc, #212]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800728e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007292:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800729a:	4932      	ldr	r1, [pc, #200]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800729c:	4313      	orrs	r3, r2
 800729e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072aa:	d105      	bne.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072ac:	4b2d      	ldr	r3, [pc, #180]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	4a2c      	ldr	r2, [pc, #176]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072b6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d015      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80072c4:	4b27      	ldr	r3, [pc, #156]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d2:	4924      	ldr	r1, [pc, #144]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072e2:	d105      	bne.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072e4:	4b1f      	ldr	r3, [pc, #124]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	4a1e      	ldr	r2, [pc, #120]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d015      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072fc:	4b19      	ldr	r3, [pc, #100]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007302:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730a:	4916      	ldr	r1, [pc, #88]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800730c:	4313      	orrs	r3, r2
 800730e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800731a:	d105      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800731c:	4b11      	ldr	r3, [pc, #68]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	4a10      	ldr	r2, [pc, #64]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007326:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d019      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007334:	4b0b      	ldr	r3, [pc, #44]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800733a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	4908      	ldr	r1, [pc, #32]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007344:	4313      	orrs	r3, r2
 8007346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007352:	d109      	bne.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007354:	4b03      	ldr	r3, [pc, #12]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	4a02      	ldr	r2, [pc, #8]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800735a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800735e:	60d3      	str	r3, [r2, #12]
 8007360:	e002      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007362:	bf00      	nop
 8007364:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d015      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007374:	4b29      	ldr	r3, [pc, #164]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800737a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007382:	4926      	ldr	r1, [pc, #152]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007384:	4313      	orrs	r3, r2
 8007386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007392:	d105      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007394:	4b21      	ldr	r3, [pc, #132]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	4a20      	ldr	r2, [pc, #128]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800739a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800739e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d015      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80073ac:	4b1b      	ldr	r3, [pc, #108]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ba:	4918      	ldr	r1, [pc, #96]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ca:	d105      	bne.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80073cc:	4b13      	ldr	r3, [pc, #76]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	4a12      	ldr	r2, [pc, #72]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073d6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d015      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80073e4:	4b0d      	ldr	r3, [pc, #52]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073f2:	490a      	ldr	r1, [pc, #40]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007402:	d105      	bne.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007404:	4b05      	ldr	r3, [pc, #20]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	4a04      	ldr	r2, [pc, #16]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800740a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800740e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007410:	7cbb      	ldrb	r3, [r7, #18]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3718      	adds	r7, #24
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	40021000 	.word	0x40021000

08007420 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e09d      	b.n	800756e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	2b00      	cmp	r3, #0
 8007438:	d108      	bne.n	800744c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007442:	d009      	beq.n	8007458 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	61da      	str	r2, [r3, #28]
 800744a:	e005      	b.n	8007458 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d106      	bne.n	8007478 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7fb fcd4 	bl	8002e20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800748e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007498:	d902      	bls.n	80074a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800749a:	2300      	movs	r3, #0
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	e002      	b.n	80074a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80074a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80074ae:	d007      	beq.n	80074c0 <HAL_SPI_Init+0xa0>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074b8:	d002      	beq.n	80074c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074d0:	431a      	orrs	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	431a      	orrs	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	431a      	orrs	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074ee:	431a      	orrs	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	69db      	ldr	r3, [r3, #28]
 80074f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074f8:	431a      	orrs	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007502:	ea42 0103 	orr.w	r1, r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	0c1b      	lsrs	r3, r3, #16
 800751c:	f003 0204 	and.w	r2, r3, #4
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	f003 0310 	and.w	r3, r3, #16
 8007528:	431a      	orrs	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752e:	f003 0308 	and.w	r3, r3, #8
 8007532:	431a      	orrs	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800753c:	ea42 0103 	orr.w	r1, r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	69da      	ldr	r2, [r3, #28]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800755c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b088      	sub	sp, #32
 800757a:	af00      	add	r7, sp, #0
 800757c:	60f8      	str	r0, [r7, #12]
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	603b      	str	r3, [r7, #0]
 8007582:	4613      	mov	r3, r2
 8007584:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007590:	2b01      	cmp	r3, #1
 8007592:	d101      	bne.n	8007598 <HAL_SPI_Transmit+0x22>
 8007594:	2302      	movs	r3, #2
 8007596:	e15f      	b.n	8007858 <HAL_SPI_Transmit+0x2e2>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075a0:	f7fb ff24 	bl	80033ec <HAL_GetTick>
 80075a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80075a6:	88fb      	ldrh	r3, [r7, #6]
 80075a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d002      	beq.n	80075bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80075b6:	2302      	movs	r3, #2
 80075b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075ba:	e148      	b.n	800784e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <HAL_SPI_Transmit+0x52>
 80075c2:	88fb      	ldrh	r3, [r7, #6]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d102      	bne.n	80075ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075cc:	e13f      	b.n	800784e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2203      	movs	r2, #3
 80075d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	88fa      	ldrh	r2, [r7, #6]
 80075e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	88fa      	ldrh	r2, [r7, #6]
 80075ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007618:	d10f      	bne.n	800763a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007628:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007638:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007644:	2b40      	cmp	r3, #64	; 0x40
 8007646:	d007      	beq.n	8007658 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007656:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007660:	d94f      	bls.n	8007702 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <HAL_SPI_Transmit+0xfa>
 800766a:	8afb      	ldrh	r3, [r7, #22]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d142      	bne.n	80076f6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007674:	881a      	ldrh	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007680:	1c9a      	adds	r2, r3, #2
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800768a:	b29b      	uxth	r3, r3
 800768c:	3b01      	subs	r3, #1
 800768e:	b29a      	uxth	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007694:	e02f      	b.n	80076f6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d112      	bne.n	80076ca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a8:	881a      	ldrh	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b4:	1c9a      	adds	r2, r3, #2
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076be:	b29b      	uxth	r3, r3
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076c8:	e015      	b.n	80076f6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076ca:	f7fb fe8f 	bl	80033ec <HAL_GetTick>
 80076ce:	4602      	mov	r2, r0
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d803      	bhi.n	80076e2 <HAL_SPI_Transmit+0x16c>
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076e0:	d102      	bne.n	80076e8 <HAL_SPI_Transmit+0x172>
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d106      	bne.n	80076f6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80076f4:	e0ab      	b.n	800784e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1ca      	bne.n	8007696 <HAL_SPI_Transmit+0x120>
 8007700:	e080      	b.n	8007804 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <HAL_SPI_Transmit+0x19a>
 800770a:	8afb      	ldrh	r3, [r7, #22]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d174      	bne.n	80077fa <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007714:	b29b      	uxth	r3, r3
 8007716:	2b01      	cmp	r3, #1
 8007718:	d912      	bls.n	8007740 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771e:	881a      	ldrh	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772a:	1c9a      	adds	r2, r3, #2
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007734:	b29b      	uxth	r3, r3
 8007736:	3b02      	subs	r3, #2
 8007738:	b29a      	uxth	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800773e:	e05c      	b.n	80077fa <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	330c      	adds	r3, #12
 800774a:	7812      	ldrb	r2, [r2, #0]
 800774c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800775c:	b29b      	uxth	r3, r3
 800775e:	3b01      	subs	r3, #1
 8007760:	b29a      	uxth	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007766:	e048      	b.n	80077fa <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b02      	cmp	r3, #2
 8007774:	d12b      	bne.n	80077ce <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800777a:	b29b      	uxth	r3, r3
 800777c:	2b01      	cmp	r3, #1
 800777e:	d912      	bls.n	80077a6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007784:	881a      	ldrh	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	1c9a      	adds	r2, r3, #2
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800779a:	b29b      	uxth	r3, r3
 800779c:	3b02      	subs	r3, #2
 800779e:	b29a      	uxth	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077a4:	e029      	b.n	80077fa <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	330c      	adds	r3, #12
 80077b0:	7812      	ldrb	r2, [r2, #0]
 80077b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b8:	1c5a      	adds	r2, r3, #1
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	3b01      	subs	r3, #1
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077cc:	e015      	b.n	80077fa <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077ce:	f7fb fe0d 	bl	80033ec <HAL_GetTick>
 80077d2:	4602      	mov	r2, r0
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d803      	bhi.n	80077e6 <HAL_SPI_Transmit+0x270>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077e4:	d102      	bne.n	80077ec <HAL_SPI_Transmit+0x276>
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d106      	bne.n	80077fa <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80077f8:	e029      	b.n	800784e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077fe:	b29b      	uxth	r3, r3
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1b1      	bne.n	8007768 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 fb69 	bl	8007ee0 <SPI_EndRxTxTransaction>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d002      	beq.n	800781a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2220      	movs	r2, #32
 8007818:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10a      	bne.n	8007838 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007822:	2300      	movs	r3, #0
 8007824:	613b      	str	r3, [r7, #16]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	613b      	str	r3, [r7, #16]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	613b      	str	r3, [r7, #16]
 8007836:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	77fb      	strb	r3, [r7, #31]
 8007844:	e003      	b.n	800784e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007856:	7ffb      	ldrb	r3, [r7, #31]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3720      	adds	r7, #32
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b08a      	sub	sp, #40	; 0x28
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
 800786c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800786e:	2301      	movs	r3, #1
 8007870:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800787e:	2b01      	cmp	r3, #1
 8007880:	d101      	bne.n	8007886 <HAL_SPI_TransmitReceive+0x26>
 8007882:	2302      	movs	r3, #2
 8007884:	e20a      	b.n	8007c9c <HAL_SPI_TransmitReceive+0x43c>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800788e:	f7fb fdad 	bl	80033ec <HAL_GetTick>
 8007892:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800789a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80078a2:	887b      	ldrh	r3, [r7, #2]
 80078a4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80078a6:	887b      	ldrh	r3, [r7, #2]
 80078a8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078aa:	7efb      	ldrb	r3, [r7, #27]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d00e      	beq.n	80078ce <HAL_SPI_TransmitReceive+0x6e>
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078b6:	d106      	bne.n	80078c6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d102      	bne.n	80078c6 <HAL_SPI_TransmitReceive+0x66>
 80078c0:	7efb      	ldrb	r3, [r7, #27]
 80078c2:	2b04      	cmp	r3, #4
 80078c4:	d003      	beq.n	80078ce <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80078c6:	2302      	movs	r3, #2
 80078c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80078cc:	e1e0      	b.n	8007c90 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d005      	beq.n	80078e0 <HAL_SPI_TransmitReceive+0x80>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d002      	beq.n	80078e0 <HAL_SPI_TransmitReceive+0x80>
 80078da:	887b      	ldrh	r3, [r7, #2]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d103      	bne.n	80078e8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80078e6:	e1d3      	b.n	8007c90 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d003      	beq.n	80078fc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2205      	movs	r2, #5
 80078f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	887a      	ldrh	r2, [r7, #2]
 800790c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	887a      	ldrh	r2, [r7, #2]
 8007914:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	887a      	ldrh	r2, [r7, #2]
 8007922:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	887a      	ldrh	r2, [r7, #2]
 8007928:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800793e:	d802      	bhi.n	8007946 <HAL_SPI_TransmitReceive+0xe6>
 8007940:	8a3b      	ldrh	r3, [r7, #16]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d908      	bls.n	8007958 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007954:	605a      	str	r2, [r3, #4]
 8007956:	e007      	b.n	8007968 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007966:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007972:	2b40      	cmp	r3, #64	; 0x40
 8007974:	d007      	beq.n	8007986 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007984:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800798e:	f240 8081 	bls.w	8007a94 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <HAL_SPI_TransmitReceive+0x140>
 800799a:	8a7b      	ldrh	r3, [r7, #18]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d16d      	bne.n	8007a7c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a4:	881a      	ldrh	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b0:	1c9a      	adds	r2, r3, #2
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	3b01      	subs	r3, #1
 80079be:	b29a      	uxth	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079c4:	e05a      	b.n	8007a7c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d11b      	bne.n	8007a0c <HAL_SPI_TransmitReceive+0x1ac>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d016      	beq.n	8007a0c <HAL_SPI_TransmitReceive+0x1ac>
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d113      	bne.n	8007a0c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e8:	881a      	ldrh	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f4:	1c9a      	adds	r2, r3, #2
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	3b01      	subs	r3, #1
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d11c      	bne.n	8007a54 <HAL_SPI_TransmitReceive+0x1f4>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d016      	beq.n	8007a54 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68da      	ldr	r2, [r3, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a30:	b292      	uxth	r2, r2
 8007a32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a38:	1c9a      	adds	r2, r3, #2
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	3b01      	subs	r3, #1
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a50:	2301      	movs	r3, #1
 8007a52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a54:	f7fb fcca 	bl	80033ec <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d80b      	bhi.n	8007a7c <HAL_SPI_TransmitReceive+0x21c>
 8007a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a6a:	d007      	beq.n	8007a7c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007a7a:	e109      	b.n	8007c90 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d19f      	bne.n	80079c6 <HAL_SPI_TransmitReceive+0x166>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d199      	bne.n	80079c6 <HAL_SPI_TransmitReceive+0x166>
 8007a92:	e0e3      	b.n	8007c5c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d003      	beq.n	8007aa4 <HAL_SPI_TransmitReceive+0x244>
 8007a9c:	8a7b      	ldrh	r3, [r7, #18]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	f040 80cf 	bne.w	8007c42 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d912      	bls.n	8007ad4 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab2:	881a      	ldrh	r2, [r3, #0]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abe:	1c9a      	adds	r2, r3, #2
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	3b02      	subs	r3, #2
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ad2:	e0b6      	b.n	8007c42 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	330c      	adds	r3, #12
 8007ade:	7812      	ldrb	r2, [r2, #0]
 8007ae0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	3b01      	subs	r3, #1
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007afa:	e0a2      	b.n	8007c42 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d134      	bne.n	8007b74 <HAL_SPI_TransmitReceive+0x314>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d02f      	beq.n	8007b74 <HAL_SPI_TransmitReceive+0x314>
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d12c      	bne.n	8007b74 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d912      	bls.n	8007b4a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b28:	881a      	ldrh	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b34:	1c9a      	adds	r2, r3, #2
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	3b02      	subs	r3, #2
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b48:	e012      	b.n	8007b70 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	330c      	adds	r3, #12
 8007b54:	7812      	ldrb	r2, [r2, #0]
 8007b56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d148      	bne.n	8007c14 <HAL_SPI_TransmitReceive+0x3b4>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d042      	beq.n	8007c14 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d923      	bls.n	8007be2 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68da      	ldr	r2, [r3, #12]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba4:	b292      	uxth	r2, r2
 8007ba6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bac:	1c9a      	adds	r2, r3, #2
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	3b02      	subs	r3, #2
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d81f      	bhi.n	8007c10 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007bde:	605a      	str	r2, [r3, #4]
 8007be0:	e016      	b.n	8007c10 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f103 020c 	add.w	r2, r3, #12
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bee:	7812      	ldrb	r2, [r2, #0]
 8007bf0:	b2d2      	uxtb	r2, r2
 8007bf2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf8:	1c5a      	adds	r2, r3, #1
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	3b01      	subs	r3, #1
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c10:	2301      	movs	r3, #1
 8007c12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c14:	f7fb fbea 	bl	80033ec <HAL_GetTick>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d803      	bhi.n	8007c2c <HAL_SPI_TransmitReceive+0x3cc>
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c2a:	d102      	bne.n	8007c32 <HAL_SPI_TransmitReceive+0x3d2>
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d107      	bne.n	8007c42 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007c40:	e026      	b.n	8007c90 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f47f af57 	bne.w	8007afc <HAL_SPI_TransmitReceive+0x29c>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f47f af50 	bne.w	8007afc <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c5c:	69fa      	ldr	r2, [r7, #28]
 8007c5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 f93d 	bl	8007ee0 <SPI_EndRxTxTransaction>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d005      	beq.n	8007c78 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2220      	movs	r2, #32
 8007c76:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d003      	beq.n	8007c88 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c86:	e003      	b.n	8007c90 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3728      	adds	r7, #40	; 0x28
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	603b      	str	r3, [r7, #0]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007cb4:	f7fb fb9a 	bl	80033ec <HAL_GetTick>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	1a9b      	subs	r3, r3, r2
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007cc4:	f7fb fb92 	bl	80033ec <HAL_GetTick>
 8007cc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007cca:	4b39      	ldr	r3, [pc, #228]	; (8007db0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	015b      	lsls	r3, r3, #5
 8007cd0:	0d1b      	lsrs	r3, r3, #20
 8007cd2:	69fa      	ldr	r2, [r7, #28]
 8007cd4:	fb02 f303 	mul.w	r3, r2, r3
 8007cd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cda:	e054      	b.n	8007d86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ce2:	d050      	beq.n	8007d86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ce4:	f7fb fb82 	bl	80033ec <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	69fa      	ldr	r2, [r7, #28]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d902      	bls.n	8007cfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d13d      	bne.n	8007d76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d12:	d111      	bne.n	8007d38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d1c:	d004      	beq.n	8007d28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d26:	d107      	bne.n	8007d38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d40:	d10f      	bne.n	8007d62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d50:	601a      	str	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e017      	b.n	8007da6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689a      	ldr	r2, [r3, #8]
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	bf0c      	ite	eq
 8007d96:	2301      	moveq	r3, #1
 8007d98:	2300      	movne	r3, #0
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	79fb      	ldrb	r3, [r7, #7]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d19b      	bne.n	8007cdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3720      	adds	r7, #32
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	20000000 	.word	0x20000000

08007db4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b08a      	sub	sp, #40	; 0x28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007dc6:	f7fb fb11 	bl	80033ec <HAL_GetTick>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dce:	1a9b      	subs	r3, r3, r2
 8007dd0:	683a      	ldr	r2, [r7, #0]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007dd6:	f7fb fb09 	bl	80033ec <HAL_GetTick>
 8007dda:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	330c      	adds	r3, #12
 8007de2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007de4:	4b3d      	ldr	r3, [pc, #244]	; (8007edc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	4613      	mov	r3, r2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	4413      	add	r3, r2
 8007dee:	00da      	lsls	r2, r3, #3
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	0d1b      	lsrs	r3, r3, #20
 8007df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df6:	fb02 f303 	mul.w	r3, r2, r3
 8007dfa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007dfc:	e060      	b.n	8007ec0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007e04:	d107      	bne.n	8007e16 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d104      	bne.n	8007e16 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007e14:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e1c:	d050      	beq.n	8007ec0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e1e:	f7fb fae5 	bl	80033ec <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d902      	bls.n	8007e34 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d13d      	bne.n	8007eb0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e4c:	d111      	bne.n	8007e72 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e56:	d004      	beq.n	8007e62 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e60:	d107      	bne.n	8007e72 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e7a:	d10f      	bne.n	8007e9c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e010      	b.n	8007ed2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689a      	ldr	r2, [r3, #8]
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	4013      	ands	r3, r2
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d196      	bne.n	8007dfe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3728      	adds	r7, #40	; 0x28
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	20000000 	.word	0x20000000

08007ee0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af02      	add	r7, sp, #8
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f7ff ff5b 	bl	8007db4 <SPI_WaitFifoStateUntilTimeout>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d007      	beq.n	8007f14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f08:	f043 0220 	orr.w	r2, r3, #32
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e027      	b.n	8007f64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2180      	movs	r1, #128	; 0x80
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f7ff fec0 	bl	8007ca4 <SPI_WaitFlagStateUntilTimeout>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d007      	beq.n	8007f3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f2e:	f043 0220 	orr.w	r2, r3, #32
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e014      	b.n	8007f64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f7ff ff34 	bl	8007db4 <SPI_WaitFifoStateUntilTimeout>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d007      	beq.n	8007f62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f56:	f043 0220 	orr.w	r2, r3, #32
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e000      	b.n	8007f64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e049      	b.n	8008012 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d106      	bne.n	8007f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f841 	bl	800801a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	4619      	mov	r1, r3
 8007faa:	4610      	mov	r0, r2
 8007fac:	f000 fa30 	bl	8008410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800801a:	b480      	push	{r7}
 800801c:	b083      	sub	sp, #12
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008022:	bf00      	nop
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
	...

08008030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b01      	cmp	r3, #1
 8008042:	d001      	beq.n	8008048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e054      	b.n	80080f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 0201 	orr.w	r2, r2, #1
 800805e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a26      	ldr	r2, [pc, #152]	; (8008100 <HAL_TIM_Base_Start_IT+0xd0>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d022      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0x80>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008072:	d01d      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0x80>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a22      	ldr	r2, [pc, #136]	; (8008104 <HAL_TIM_Base_Start_IT+0xd4>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d018      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0x80>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a21      	ldr	r2, [pc, #132]	; (8008108 <HAL_TIM_Base_Start_IT+0xd8>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d013      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0x80>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a1f      	ldr	r2, [pc, #124]	; (800810c <HAL_TIM_Base_Start_IT+0xdc>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d00e      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0x80>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a1e      	ldr	r2, [pc, #120]	; (8008110 <HAL_TIM_Base_Start_IT+0xe0>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d009      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0x80>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a1c      	ldr	r2, [pc, #112]	; (8008114 <HAL_TIM_Base_Start_IT+0xe4>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d004      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0x80>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a1b      	ldr	r2, [pc, #108]	; (8008118 <HAL_TIM_Base_Start_IT+0xe8>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d115      	bne.n	80080dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	689a      	ldr	r2, [r3, #8]
 80080b6:	4b19      	ldr	r3, [pc, #100]	; (800811c <HAL_TIM_Base_Start_IT+0xec>)
 80080b8:	4013      	ands	r3, r2
 80080ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2b06      	cmp	r3, #6
 80080c0:	d015      	beq.n	80080ee <HAL_TIM_Base_Start_IT+0xbe>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080c8:	d011      	beq.n	80080ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f042 0201 	orr.w	r2, r2, #1
 80080d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080da:	e008      	b.n	80080ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f042 0201 	orr.w	r2, r2, #1
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	e000      	b.n	80080f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3714      	adds	r7, #20
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	40012c00 	.word	0x40012c00
 8008104:	40000400 	.word	0x40000400
 8008108:	40000800 	.word	0x40000800
 800810c:	40000c00 	.word	0x40000c00
 8008110:	40013400 	.word	0x40013400
 8008114:	40014000 	.word	0x40014000
 8008118:	40015000 	.word	0x40015000
 800811c:	00010007 	.word	0x00010007

08008120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	f003 0302 	and.w	r3, r3, #2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d020      	beq.n	8008184 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f003 0302 	and.w	r3, r3, #2
 8008148:	2b00      	cmp	r3, #0
 800814a:	d01b      	beq.n	8008184 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f06f 0202 	mvn.w	r2, #2
 8008154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	f003 0303 	and.w	r3, r3, #3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f931 	bl	80083d2 <HAL_TIM_IC_CaptureCallback>
 8008170:	e005      	b.n	800817e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f923 	bl	80083be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f934 	bl	80083e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	f003 0304 	and.w	r3, r3, #4
 800818a:	2b00      	cmp	r3, #0
 800818c:	d020      	beq.n	80081d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f003 0304 	and.w	r3, r3, #4
 8008194:	2b00      	cmp	r3, #0
 8008196:	d01b      	beq.n	80081d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f06f 0204 	mvn.w	r2, #4
 80081a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2202      	movs	r2, #2
 80081a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f90b 	bl	80083d2 <HAL_TIM_IC_CaptureCallback>
 80081bc:	e005      	b.n	80081ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f8fd 	bl	80083be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f90e 	bl	80083e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f003 0308 	and.w	r3, r3, #8
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d020      	beq.n	800821c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f003 0308 	and.w	r3, r3, #8
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d01b      	beq.n	800821c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f06f 0208 	mvn.w	r2, #8
 80081ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2204      	movs	r2, #4
 80081f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	f003 0303 	and.w	r3, r3, #3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f8e5 	bl	80083d2 <HAL_TIM_IC_CaptureCallback>
 8008208:	e005      	b.n	8008216 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f8d7 	bl	80083be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f8e8 	bl	80083e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f003 0310 	and.w	r3, r3, #16
 8008222:	2b00      	cmp	r3, #0
 8008224:	d020      	beq.n	8008268 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f003 0310 	and.w	r3, r3, #16
 800822c:	2b00      	cmp	r3, #0
 800822e:	d01b      	beq.n	8008268 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f06f 0210 	mvn.w	r2, #16
 8008238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2208      	movs	r2, #8
 800823e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800824a:	2b00      	cmp	r3, #0
 800824c:	d003      	beq.n	8008256 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f8bf 	bl	80083d2 <HAL_TIM_IC_CaptureCallback>
 8008254:	e005      	b.n	8008262 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f8b1 	bl	80083be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f8c2 	bl	80083e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00c      	beq.n	800828c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	d007      	beq.n	800828c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f06f 0201 	mvn.w	r2, #1
 8008284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7fa fd74 	bl	8002d74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008292:	2b00      	cmp	r3, #0
 8008294:	d104      	bne.n	80082a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00c      	beq.n	80082ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d007      	beq.n	80082ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80082b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f969 	bl	800858c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00c      	beq.n	80082de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d007      	beq.n	80082de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80082d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f961 	bl	80085a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00c      	beq.n	8008302 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d007      	beq.n	8008302 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f87c 	bl	80083fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	f003 0320 	and.w	r3, r3, #32
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00c      	beq.n	8008326 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f003 0320 	and.w	r3, r3, #32
 8008312:	2b00      	cmp	r3, #0
 8008314:	d007      	beq.n	8008326 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f06f 0220 	mvn.w	r2, #32
 800831e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f929 	bl	8008578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00c      	beq.n	800834a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d007      	beq.n	800834a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f935 	bl	80085b4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00c      	beq.n	800836e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d007      	beq.n	800836e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f92d 	bl	80085c8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00c      	beq.n	8008392 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d007      	beq.n	8008392 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800838a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f925 	bl	80085dc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00c      	beq.n	80083b6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d007      	beq.n	80083b6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80083ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 f91d 	bl	80085f0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083b6:	bf00      	nop
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083be:	b480      	push	{r7}
 80083c0:	b083      	sub	sp, #12
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083c6:	bf00      	nop
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b083      	sub	sp, #12
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083da:	bf00      	nop
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b083      	sub	sp, #12
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083ee:	bf00      	nop
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b083      	sub	sp, #12
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008402:	bf00      	nop
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
	...

08008410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a4c      	ldr	r2, [pc, #304]	; (8008554 <TIM_Base_SetConfig+0x144>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d017      	beq.n	8008458 <TIM_Base_SetConfig+0x48>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800842e:	d013      	beq.n	8008458 <TIM_Base_SetConfig+0x48>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a49      	ldr	r2, [pc, #292]	; (8008558 <TIM_Base_SetConfig+0x148>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d00f      	beq.n	8008458 <TIM_Base_SetConfig+0x48>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a48      	ldr	r2, [pc, #288]	; (800855c <TIM_Base_SetConfig+0x14c>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d00b      	beq.n	8008458 <TIM_Base_SetConfig+0x48>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a47      	ldr	r2, [pc, #284]	; (8008560 <TIM_Base_SetConfig+0x150>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d007      	beq.n	8008458 <TIM_Base_SetConfig+0x48>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a46      	ldr	r2, [pc, #280]	; (8008564 <TIM_Base_SetConfig+0x154>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d003      	beq.n	8008458 <TIM_Base_SetConfig+0x48>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a45      	ldr	r2, [pc, #276]	; (8008568 <TIM_Base_SetConfig+0x158>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d108      	bne.n	800846a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800845e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	4313      	orrs	r3, r2
 8008468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a39      	ldr	r2, [pc, #228]	; (8008554 <TIM_Base_SetConfig+0x144>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d023      	beq.n	80084ba <TIM_Base_SetConfig+0xaa>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008478:	d01f      	beq.n	80084ba <TIM_Base_SetConfig+0xaa>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a36      	ldr	r2, [pc, #216]	; (8008558 <TIM_Base_SetConfig+0x148>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d01b      	beq.n	80084ba <TIM_Base_SetConfig+0xaa>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a35      	ldr	r2, [pc, #212]	; (800855c <TIM_Base_SetConfig+0x14c>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d017      	beq.n	80084ba <TIM_Base_SetConfig+0xaa>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a34      	ldr	r2, [pc, #208]	; (8008560 <TIM_Base_SetConfig+0x150>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d013      	beq.n	80084ba <TIM_Base_SetConfig+0xaa>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a33      	ldr	r2, [pc, #204]	; (8008564 <TIM_Base_SetConfig+0x154>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d00f      	beq.n	80084ba <TIM_Base_SetConfig+0xaa>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a33      	ldr	r2, [pc, #204]	; (800856c <TIM_Base_SetConfig+0x15c>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d00b      	beq.n	80084ba <TIM_Base_SetConfig+0xaa>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a32      	ldr	r2, [pc, #200]	; (8008570 <TIM_Base_SetConfig+0x160>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d007      	beq.n	80084ba <TIM_Base_SetConfig+0xaa>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a31      	ldr	r2, [pc, #196]	; (8008574 <TIM_Base_SetConfig+0x164>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d003      	beq.n	80084ba <TIM_Base_SetConfig+0xaa>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a2c      	ldr	r2, [pc, #176]	; (8008568 <TIM_Base_SetConfig+0x158>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d108      	bne.n	80084cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	689a      	ldr	r2, [r3, #8]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a18      	ldr	r2, [pc, #96]	; (8008554 <TIM_Base_SetConfig+0x144>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d013      	beq.n	8008520 <TIM_Base_SetConfig+0x110>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a1a      	ldr	r2, [pc, #104]	; (8008564 <TIM_Base_SetConfig+0x154>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d00f      	beq.n	8008520 <TIM_Base_SetConfig+0x110>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a1a      	ldr	r2, [pc, #104]	; (800856c <TIM_Base_SetConfig+0x15c>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d00b      	beq.n	8008520 <TIM_Base_SetConfig+0x110>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a19      	ldr	r2, [pc, #100]	; (8008570 <TIM_Base_SetConfig+0x160>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d007      	beq.n	8008520 <TIM_Base_SetConfig+0x110>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a18      	ldr	r2, [pc, #96]	; (8008574 <TIM_Base_SetConfig+0x164>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d003      	beq.n	8008520 <TIM_Base_SetConfig+0x110>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a13      	ldr	r2, [pc, #76]	; (8008568 <TIM_Base_SetConfig+0x158>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d103      	bne.n	8008528 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	691a      	ldr	r2, [r3, #16]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b01      	cmp	r3, #1
 8008538:	d105      	bne.n	8008546 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	f023 0201 	bic.w	r2, r3, #1
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	611a      	str	r2, [r3, #16]
  }
}
 8008546:	bf00      	nop
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	40012c00 	.word	0x40012c00
 8008558:	40000400 	.word	0x40000400
 800855c:	40000800 	.word	0x40000800
 8008560:	40000c00 	.word	0x40000c00
 8008564:	40013400 	.word	0x40013400
 8008568:	40015000 	.word	0x40015000
 800856c:	40014000 	.word	0x40014000
 8008570:	40014400 	.word	0x40014400
 8008574:	40014800 	.word	0x40014800

08008578 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e042      	b.n	800869c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800861c:	2b00      	cmp	r3, #0
 800861e:	d106      	bne.n	800862e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7fa fe33 	bl	8003294 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2224      	movs	r2, #36	; 0x24
 8008632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f022 0201 	bic.w	r2, r2, #1
 8008644:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fb24 	bl	8008c9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f825 	bl	80086a4 <UART_SetConfig>
 800865a:	4603      	mov	r3, r0
 800865c:	2b01      	cmp	r3, #1
 800865e:	d101      	bne.n	8008664 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	e01b      	b.n	800869c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	685a      	ldr	r2, [r3, #4]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008672:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689a      	ldr	r2, [r3, #8]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008682:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f042 0201 	orr.w	r2, r2, #1
 8008692:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fba3 	bl	8008de0 <UART_CheckIdleState>
 800869a:	4603      	mov	r3, r0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086a8:	b08c      	sub	sp, #48	; 0x30
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	689a      	ldr	r2, [r3, #8]
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	431a      	orrs	r2, r3
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	431a      	orrs	r2, r3
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	69db      	ldr	r3, [r3, #28]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	4baa      	ldr	r3, [pc, #680]	; (800897c <UART_SetConfig+0x2d8>)
 80086d4:	4013      	ands	r3, r2
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	6812      	ldr	r2, [r2, #0]
 80086da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086dc:	430b      	orrs	r3, r1
 80086de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	68da      	ldr	r2, [r3, #12]
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	430a      	orrs	r2, r1
 80086f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	699b      	ldr	r3, [r3, #24]
 80086fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a9f      	ldr	r2, [pc, #636]	; (8008980 <UART_SetConfig+0x2dc>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d004      	beq.n	8008710 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800870c:	4313      	orrs	r3, r2
 800870e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800871a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	6812      	ldr	r2, [r2, #0]
 8008722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008724:	430b      	orrs	r3, r1
 8008726:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872e:	f023 010f 	bic.w	r1, r3, #15
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	430a      	orrs	r2, r1
 800873c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a90      	ldr	r2, [pc, #576]	; (8008984 <UART_SetConfig+0x2e0>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d125      	bne.n	8008794 <UART_SetConfig+0xf0>
 8008748:	4b8f      	ldr	r3, [pc, #572]	; (8008988 <UART_SetConfig+0x2e4>)
 800874a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800874e:	f003 0303 	and.w	r3, r3, #3
 8008752:	2b03      	cmp	r3, #3
 8008754:	d81a      	bhi.n	800878c <UART_SetConfig+0xe8>
 8008756:	a201      	add	r2, pc, #4	; (adr r2, 800875c <UART_SetConfig+0xb8>)
 8008758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875c:	0800876d 	.word	0x0800876d
 8008760:	0800877d 	.word	0x0800877d
 8008764:	08008775 	.word	0x08008775
 8008768:	08008785 	.word	0x08008785
 800876c:	2301      	movs	r3, #1
 800876e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008772:	e116      	b.n	80089a2 <UART_SetConfig+0x2fe>
 8008774:	2302      	movs	r3, #2
 8008776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800877a:	e112      	b.n	80089a2 <UART_SetConfig+0x2fe>
 800877c:	2304      	movs	r3, #4
 800877e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008782:	e10e      	b.n	80089a2 <UART_SetConfig+0x2fe>
 8008784:	2308      	movs	r3, #8
 8008786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800878a:	e10a      	b.n	80089a2 <UART_SetConfig+0x2fe>
 800878c:	2310      	movs	r3, #16
 800878e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008792:	e106      	b.n	80089a2 <UART_SetConfig+0x2fe>
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a7c      	ldr	r2, [pc, #496]	; (800898c <UART_SetConfig+0x2e8>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d138      	bne.n	8008810 <UART_SetConfig+0x16c>
 800879e:	4b7a      	ldr	r3, [pc, #488]	; (8008988 <UART_SetConfig+0x2e4>)
 80087a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a4:	f003 030c 	and.w	r3, r3, #12
 80087a8:	2b0c      	cmp	r3, #12
 80087aa:	d82d      	bhi.n	8008808 <UART_SetConfig+0x164>
 80087ac:	a201      	add	r2, pc, #4	; (adr r2, 80087b4 <UART_SetConfig+0x110>)
 80087ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b2:	bf00      	nop
 80087b4:	080087e9 	.word	0x080087e9
 80087b8:	08008809 	.word	0x08008809
 80087bc:	08008809 	.word	0x08008809
 80087c0:	08008809 	.word	0x08008809
 80087c4:	080087f9 	.word	0x080087f9
 80087c8:	08008809 	.word	0x08008809
 80087cc:	08008809 	.word	0x08008809
 80087d0:	08008809 	.word	0x08008809
 80087d4:	080087f1 	.word	0x080087f1
 80087d8:	08008809 	.word	0x08008809
 80087dc:	08008809 	.word	0x08008809
 80087e0:	08008809 	.word	0x08008809
 80087e4:	08008801 	.word	0x08008801
 80087e8:	2300      	movs	r3, #0
 80087ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ee:	e0d8      	b.n	80089a2 <UART_SetConfig+0x2fe>
 80087f0:	2302      	movs	r3, #2
 80087f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087f6:	e0d4      	b.n	80089a2 <UART_SetConfig+0x2fe>
 80087f8:	2304      	movs	r3, #4
 80087fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087fe:	e0d0      	b.n	80089a2 <UART_SetConfig+0x2fe>
 8008800:	2308      	movs	r3, #8
 8008802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008806:	e0cc      	b.n	80089a2 <UART_SetConfig+0x2fe>
 8008808:	2310      	movs	r3, #16
 800880a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800880e:	e0c8      	b.n	80089a2 <UART_SetConfig+0x2fe>
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a5e      	ldr	r2, [pc, #376]	; (8008990 <UART_SetConfig+0x2ec>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d125      	bne.n	8008866 <UART_SetConfig+0x1c2>
 800881a:	4b5b      	ldr	r3, [pc, #364]	; (8008988 <UART_SetConfig+0x2e4>)
 800881c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008820:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008824:	2b30      	cmp	r3, #48	; 0x30
 8008826:	d016      	beq.n	8008856 <UART_SetConfig+0x1b2>
 8008828:	2b30      	cmp	r3, #48	; 0x30
 800882a:	d818      	bhi.n	800885e <UART_SetConfig+0x1ba>
 800882c:	2b20      	cmp	r3, #32
 800882e:	d00a      	beq.n	8008846 <UART_SetConfig+0x1a2>
 8008830:	2b20      	cmp	r3, #32
 8008832:	d814      	bhi.n	800885e <UART_SetConfig+0x1ba>
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <UART_SetConfig+0x19a>
 8008838:	2b10      	cmp	r3, #16
 800883a:	d008      	beq.n	800884e <UART_SetConfig+0x1aa>
 800883c:	e00f      	b.n	800885e <UART_SetConfig+0x1ba>
 800883e:	2300      	movs	r3, #0
 8008840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008844:	e0ad      	b.n	80089a2 <UART_SetConfig+0x2fe>
 8008846:	2302      	movs	r3, #2
 8008848:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800884c:	e0a9      	b.n	80089a2 <UART_SetConfig+0x2fe>
 800884e:	2304      	movs	r3, #4
 8008850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008854:	e0a5      	b.n	80089a2 <UART_SetConfig+0x2fe>
 8008856:	2308      	movs	r3, #8
 8008858:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800885c:	e0a1      	b.n	80089a2 <UART_SetConfig+0x2fe>
 800885e:	2310      	movs	r3, #16
 8008860:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008864:	e09d      	b.n	80089a2 <UART_SetConfig+0x2fe>
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a4a      	ldr	r2, [pc, #296]	; (8008994 <UART_SetConfig+0x2f0>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d125      	bne.n	80088bc <UART_SetConfig+0x218>
 8008870:	4b45      	ldr	r3, [pc, #276]	; (8008988 <UART_SetConfig+0x2e4>)
 8008872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008876:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800887a:	2bc0      	cmp	r3, #192	; 0xc0
 800887c:	d016      	beq.n	80088ac <UART_SetConfig+0x208>
 800887e:	2bc0      	cmp	r3, #192	; 0xc0
 8008880:	d818      	bhi.n	80088b4 <UART_SetConfig+0x210>
 8008882:	2b80      	cmp	r3, #128	; 0x80
 8008884:	d00a      	beq.n	800889c <UART_SetConfig+0x1f8>
 8008886:	2b80      	cmp	r3, #128	; 0x80
 8008888:	d814      	bhi.n	80088b4 <UART_SetConfig+0x210>
 800888a:	2b00      	cmp	r3, #0
 800888c:	d002      	beq.n	8008894 <UART_SetConfig+0x1f0>
 800888e:	2b40      	cmp	r3, #64	; 0x40
 8008890:	d008      	beq.n	80088a4 <UART_SetConfig+0x200>
 8008892:	e00f      	b.n	80088b4 <UART_SetConfig+0x210>
 8008894:	2300      	movs	r3, #0
 8008896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800889a:	e082      	b.n	80089a2 <UART_SetConfig+0x2fe>
 800889c:	2302      	movs	r3, #2
 800889e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088a2:	e07e      	b.n	80089a2 <UART_SetConfig+0x2fe>
 80088a4:	2304      	movs	r3, #4
 80088a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088aa:	e07a      	b.n	80089a2 <UART_SetConfig+0x2fe>
 80088ac:	2308      	movs	r3, #8
 80088ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088b2:	e076      	b.n	80089a2 <UART_SetConfig+0x2fe>
 80088b4:	2310      	movs	r3, #16
 80088b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ba:	e072      	b.n	80089a2 <UART_SetConfig+0x2fe>
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a35      	ldr	r2, [pc, #212]	; (8008998 <UART_SetConfig+0x2f4>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d12a      	bne.n	800891c <UART_SetConfig+0x278>
 80088c6:	4b30      	ldr	r3, [pc, #192]	; (8008988 <UART_SetConfig+0x2e4>)
 80088c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088d4:	d01a      	beq.n	800890c <UART_SetConfig+0x268>
 80088d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088da:	d81b      	bhi.n	8008914 <UART_SetConfig+0x270>
 80088dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088e0:	d00c      	beq.n	80088fc <UART_SetConfig+0x258>
 80088e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088e6:	d815      	bhi.n	8008914 <UART_SetConfig+0x270>
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d003      	beq.n	80088f4 <UART_SetConfig+0x250>
 80088ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088f0:	d008      	beq.n	8008904 <UART_SetConfig+0x260>
 80088f2:	e00f      	b.n	8008914 <UART_SetConfig+0x270>
 80088f4:	2300      	movs	r3, #0
 80088f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088fa:	e052      	b.n	80089a2 <UART_SetConfig+0x2fe>
 80088fc:	2302      	movs	r3, #2
 80088fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008902:	e04e      	b.n	80089a2 <UART_SetConfig+0x2fe>
 8008904:	2304      	movs	r3, #4
 8008906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800890a:	e04a      	b.n	80089a2 <UART_SetConfig+0x2fe>
 800890c:	2308      	movs	r3, #8
 800890e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008912:	e046      	b.n	80089a2 <UART_SetConfig+0x2fe>
 8008914:	2310      	movs	r3, #16
 8008916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800891a:	e042      	b.n	80089a2 <UART_SetConfig+0x2fe>
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a17      	ldr	r2, [pc, #92]	; (8008980 <UART_SetConfig+0x2dc>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d13a      	bne.n	800899c <UART_SetConfig+0x2f8>
 8008926:	4b18      	ldr	r3, [pc, #96]	; (8008988 <UART_SetConfig+0x2e4>)
 8008928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800892c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008930:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008934:	d01a      	beq.n	800896c <UART_SetConfig+0x2c8>
 8008936:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800893a:	d81b      	bhi.n	8008974 <UART_SetConfig+0x2d0>
 800893c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008940:	d00c      	beq.n	800895c <UART_SetConfig+0x2b8>
 8008942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008946:	d815      	bhi.n	8008974 <UART_SetConfig+0x2d0>
 8008948:	2b00      	cmp	r3, #0
 800894a:	d003      	beq.n	8008954 <UART_SetConfig+0x2b0>
 800894c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008950:	d008      	beq.n	8008964 <UART_SetConfig+0x2c0>
 8008952:	e00f      	b.n	8008974 <UART_SetConfig+0x2d0>
 8008954:	2300      	movs	r3, #0
 8008956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800895a:	e022      	b.n	80089a2 <UART_SetConfig+0x2fe>
 800895c:	2302      	movs	r3, #2
 800895e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008962:	e01e      	b.n	80089a2 <UART_SetConfig+0x2fe>
 8008964:	2304      	movs	r3, #4
 8008966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800896a:	e01a      	b.n	80089a2 <UART_SetConfig+0x2fe>
 800896c:	2308      	movs	r3, #8
 800896e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008972:	e016      	b.n	80089a2 <UART_SetConfig+0x2fe>
 8008974:	2310      	movs	r3, #16
 8008976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800897a:	e012      	b.n	80089a2 <UART_SetConfig+0x2fe>
 800897c:	cfff69f3 	.word	0xcfff69f3
 8008980:	40008000 	.word	0x40008000
 8008984:	40013800 	.word	0x40013800
 8008988:	40021000 	.word	0x40021000
 800898c:	40004400 	.word	0x40004400
 8008990:	40004800 	.word	0x40004800
 8008994:	40004c00 	.word	0x40004c00
 8008998:	40005000 	.word	0x40005000
 800899c:	2310      	movs	r3, #16
 800899e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4aae      	ldr	r2, [pc, #696]	; (8008c60 <UART_SetConfig+0x5bc>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	f040 8097 	bne.w	8008adc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089b2:	2b08      	cmp	r3, #8
 80089b4:	d823      	bhi.n	80089fe <UART_SetConfig+0x35a>
 80089b6:	a201      	add	r2, pc, #4	; (adr r2, 80089bc <UART_SetConfig+0x318>)
 80089b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089bc:	080089e1 	.word	0x080089e1
 80089c0:	080089ff 	.word	0x080089ff
 80089c4:	080089e9 	.word	0x080089e9
 80089c8:	080089ff 	.word	0x080089ff
 80089cc:	080089ef 	.word	0x080089ef
 80089d0:	080089ff 	.word	0x080089ff
 80089d4:	080089ff 	.word	0x080089ff
 80089d8:	080089ff 	.word	0x080089ff
 80089dc:	080089f7 	.word	0x080089f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089e0:	f7fe fa2e 	bl	8006e40 <HAL_RCC_GetPCLK1Freq>
 80089e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089e6:	e010      	b.n	8008a0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089e8:	4b9e      	ldr	r3, [pc, #632]	; (8008c64 <UART_SetConfig+0x5c0>)
 80089ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089ec:	e00d      	b.n	8008a0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089ee:	f7fe f9bb 	bl	8006d68 <HAL_RCC_GetSysClockFreq>
 80089f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089f4:	e009      	b.n	8008a0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089fc:	e005      	b.n	8008a0a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80089fe:	2300      	movs	r3, #0
 8008a00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f000 8130 	beq.w	8008c72 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	4a94      	ldr	r2, [pc, #592]	; (8008c68 <UART_SetConfig+0x5c4>)
 8008a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a24:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	005b      	lsls	r3, r3, #1
 8008a2e:	4413      	add	r3, r2
 8008a30:	69ba      	ldr	r2, [r7, #24]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d305      	bcc.n	8008a42 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a3c:	69ba      	ldr	r2, [r7, #24]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d903      	bls.n	8008a4a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a48:	e113      	b.n	8008c72 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	60bb      	str	r3, [r7, #8]
 8008a50:	60fa      	str	r2, [r7, #12]
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	4a84      	ldr	r2, [pc, #528]	; (8008c68 <UART_SetConfig+0x5c4>)
 8008a58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	2200      	movs	r2, #0
 8008a60:	603b      	str	r3, [r7, #0]
 8008a62:	607a      	str	r2, [r7, #4]
 8008a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a6c:	f7f8 f8c4 	bl	8000bf8 <__aeabi_uldivmod>
 8008a70:	4602      	mov	r2, r0
 8008a72:	460b      	mov	r3, r1
 8008a74:	4610      	mov	r0, r2
 8008a76:	4619      	mov	r1, r3
 8008a78:	f04f 0200 	mov.w	r2, #0
 8008a7c:	f04f 0300 	mov.w	r3, #0
 8008a80:	020b      	lsls	r3, r1, #8
 8008a82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a86:	0202      	lsls	r2, r0, #8
 8008a88:	6979      	ldr	r1, [r7, #20]
 8008a8a:	6849      	ldr	r1, [r1, #4]
 8008a8c:	0849      	lsrs	r1, r1, #1
 8008a8e:	2000      	movs	r0, #0
 8008a90:	460c      	mov	r4, r1
 8008a92:	4605      	mov	r5, r0
 8008a94:	eb12 0804 	adds.w	r8, r2, r4
 8008a98:	eb43 0905 	adc.w	r9, r3, r5
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	469a      	mov	sl, r3
 8008aa4:	4693      	mov	fp, r2
 8008aa6:	4652      	mov	r2, sl
 8008aa8:	465b      	mov	r3, fp
 8008aaa:	4640      	mov	r0, r8
 8008aac:	4649      	mov	r1, r9
 8008aae:	f7f8 f8a3 	bl	8000bf8 <__aeabi_uldivmod>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ac0:	d308      	bcc.n	8008ad4 <UART_SetConfig+0x430>
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ac8:	d204      	bcs.n	8008ad4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	6a3a      	ldr	r2, [r7, #32]
 8008ad0:	60da      	str	r2, [r3, #12]
 8008ad2:	e0ce      	b.n	8008c72 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ada:	e0ca      	b.n	8008c72 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ae4:	d166      	bne.n	8008bb4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008ae6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008aea:	2b08      	cmp	r3, #8
 8008aec:	d827      	bhi.n	8008b3e <UART_SetConfig+0x49a>
 8008aee:	a201      	add	r2, pc, #4	; (adr r2, 8008af4 <UART_SetConfig+0x450>)
 8008af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af4:	08008b19 	.word	0x08008b19
 8008af8:	08008b21 	.word	0x08008b21
 8008afc:	08008b29 	.word	0x08008b29
 8008b00:	08008b3f 	.word	0x08008b3f
 8008b04:	08008b2f 	.word	0x08008b2f
 8008b08:	08008b3f 	.word	0x08008b3f
 8008b0c:	08008b3f 	.word	0x08008b3f
 8008b10:	08008b3f 	.word	0x08008b3f
 8008b14:	08008b37 	.word	0x08008b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b18:	f7fe f992 	bl	8006e40 <HAL_RCC_GetPCLK1Freq>
 8008b1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b1e:	e014      	b.n	8008b4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b20:	f7fe f9a4 	bl	8006e6c <HAL_RCC_GetPCLK2Freq>
 8008b24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b26:	e010      	b.n	8008b4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b28:	4b4e      	ldr	r3, [pc, #312]	; (8008c64 <UART_SetConfig+0x5c0>)
 8008b2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b2c:	e00d      	b.n	8008b4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b2e:	f7fe f91b 	bl	8006d68 <HAL_RCC_GetSysClockFreq>
 8008b32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b34:	e009      	b.n	8008b4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b3c:	e005      	b.n	8008b4a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 8090 	beq.w	8008c72 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b56:	4a44      	ldr	r2, [pc, #272]	; (8008c68 <UART_SetConfig+0x5c4>)
 8008b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b64:	005a      	lsls	r2, r3, #1
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	085b      	lsrs	r3, r3, #1
 8008b6c:	441a      	add	r2, r3
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	2b0f      	cmp	r3, #15
 8008b7c:	d916      	bls.n	8008bac <UART_SetConfig+0x508>
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b84:	d212      	bcs.n	8008bac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b86:	6a3b      	ldr	r3, [r7, #32]
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	f023 030f 	bic.w	r3, r3, #15
 8008b8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b90:	6a3b      	ldr	r3, [r7, #32]
 8008b92:	085b      	lsrs	r3, r3, #1
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	f003 0307 	and.w	r3, r3, #7
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	8bfb      	ldrh	r3, [r7, #30]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	8bfa      	ldrh	r2, [r7, #30]
 8008ba8:	60da      	str	r2, [r3, #12]
 8008baa:	e062      	b.n	8008c72 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008bb2:	e05e      	b.n	8008c72 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008bb8:	2b08      	cmp	r3, #8
 8008bba:	d828      	bhi.n	8008c0e <UART_SetConfig+0x56a>
 8008bbc:	a201      	add	r2, pc, #4	; (adr r2, 8008bc4 <UART_SetConfig+0x520>)
 8008bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc2:	bf00      	nop
 8008bc4:	08008be9 	.word	0x08008be9
 8008bc8:	08008bf1 	.word	0x08008bf1
 8008bcc:	08008bf9 	.word	0x08008bf9
 8008bd0:	08008c0f 	.word	0x08008c0f
 8008bd4:	08008bff 	.word	0x08008bff
 8008bd8:	08008c0f 	.word	0x08008c0f
 8008bdc:	08008c0f 	.word	0x08008c0f
 8008be0:	08008c0f 	.word	0x08008c0f
 8008be4:	08008c07 	.word	0x08008c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008be8:	f7fe f92a 	bl	8006e40 <HAL_RCC_GetPCLK1Freq>
 8008bec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bee:	e014      	b.n	8008c1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bf0:	f7fe f93c 	bl	8006e6c <HAL_RCC_GetPCLK2Freq>
 8008bf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bf6:	e010      	b.n	8008c1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bf8:	4b1a      	ldr	r3, [pc, #104]	; (8008c64 <UART_SetConfig+0x5c0>)
 8008bfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008bfc:	e00d      	b.n	8008c1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bfe:	f7fe f8b3 	bl	8006d68 <HAL_RCC_GetSysClockFreq>
 8008c02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c04:	e009      	b.n	8008c1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c0c:	e005      	b.n	8008c1a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c18:	bf00      	nop
    }

    if (pclk != 0U)
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d028      	beq.n	8008c72 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c24:	4a10      	ldr	r2, [pc, #64]	; (8008c68 <UART_SetConfig+0x5c4>)
 8008c26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	085b      	lsrs	r3, r3, #1
 8008c38:	441a      	add	r2, r3
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c44:	6a3b      	ldr	r3, [r7, #32]
 8008c46:	2b0f      	cmp	r3, #15
 8008c48:	d910      	bls.n	8008c6c <UART_SetConfig+0x5c8>
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c50:	d20c      	bcs.n	8008c6c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c52:	6a3b      	ldr	r3, [r7, #32]
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	60da      	str	r2, [r3, #12]
 8008c5c:	e009      	b.n	8008c72 <UART_SetConfig+0x5ce>
 8008c5e:	bf00      	nop
 8008c60:	40008000 	.word	0x40008000
 8008c64:	00f42400 	.word	0x00f42400
 8008c68:	08015188 	.word	0x08015188
      }
      else
      {
        ret = HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2200      	movs	r2, #0
 8008c86:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008c8e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3730      	adds	r7, #48	; 0x30
 8008c96:	46bd      	mov	sp, r7
 8008c98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008c9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca8:	f003 0308 	and.w	r3, r3, #8
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00a      	beq.n	8008cc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00a      	beq.n	8008ce8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	430a      	orrs	r2, r1
 8008ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cec:	f003 0302 	and.w	r3, r3, #2
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00a      	beq.n	8008d0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	430a      	orrs	r2, r1
 8008d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0e:	f003 0304 	and.w	r3, r3, #4
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00a      	beq.n	8008d2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	430a      	orrs	r2, r1
 8008d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d30:	f003 0310 	and.w	r3, r3, #16
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00a      	beq.n	8008d4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	430a      	orrs	r2, r1
 8008d4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d52:	f003 0320 	and.w	r3, r3, #32
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00a      	beq.n	8008d70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	430a      	orrs	r2, r1
 8008d6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d01a      	beq.n	8008db2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	430a      	orrs	r2, r1
 8008d90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d9a:	d10a      	bne.n	8008db2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	430a      	orrs	r2, r1
 8008db0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00a      	beq.n	8008dd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	430a      	orrs	r2, r1
 8008dd2:	605a      	str	r2, [r3, #4]
  }
}
 8008dd4:	bf00      	nop
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b098      	sub	sp, #96	; 0x60
 8008de4:	af02      	add	r7, sp, #8
 8008de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008df0:	f7fa fafc 	bl	80033ec <HAL_GetTick>
 8008df4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0308 	and.w	r3, r3, #8
 8008e00:	2b08      	cmp	r3, #8
 8008e02:	d12f      	bne.n	8008e64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f88e 	bl	8008f34 <UART_WaitOnFlagUntilTimeout>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d022      	beq.n	8008e64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e26:	e853 3f00 	ldrex	r3, [r3]
 8008e2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e32:	653b      	str	r3, [r7, #80]	; 0x50
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e3c:	647b      	str	r3, [r7, #68]	; 0x44
 8008e3e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e44:	e841 2300 	strex	r3, r2, [r1]
 8008e48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1e6      	bne.n	8008e1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2220      	movs	r2, #32
 8008e54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e063      	b.n	8008f2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0304 	and.w	r3, r3, #4
 8008e6e:	2b04      	cmp	r3, #4
 8008e70:	d149      	bne.n	8008f06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 f857 	bl	8008f34 <UART_WaitOnFlagUntilTimeout>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d03c      	beq.n	8008f06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	623b      	str	r3, [r7, #32]
   return(result);
 8008e9a:	6a3b      	ldr	r3, [r7, #32]
 8008e9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eaa:	633b      	str	r3, [r7, #48]	; 0x30
 8008eac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e6      	bne.n	8008e8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	e853 3f00 	ldrex	r3, [r3]
 8008ecc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f023 0301 	bic.w	r3, r3, #1
 8008ed4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3308      	adds	r3, #8
 8008edc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ede:	61fa      	str	r2, [r7, #28]
 8008ee0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee2:	69b9      	ldr	r1, [r7, #24]
 8008ee4:	69fa      	ldr	r2, [r7, #28]
 8008ee6:	e841 2300 	strex	r3, r2, [r1]
 8008eea:	617b      	str	r3, [r7, #20]
   return(result);
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1e5      	bne.n	8008ebe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f02:	2303      	movs	r3, #3
 8008f04:	e012      	b.n	8008f2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2220      	movs	r2, #32
 8008f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2220      	movs	r2, #32
 8008f12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3758      	adds	r7, #88	; 0x58
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	603b      	str	r3, [r7, #0]
 8008f40:	4613      	mov	r3, r2
 8008f42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f44:	e04f      	b.n	8008fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f4c:	d04b      	beq.n	8008fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f4e:	f7fa fa4d 	bl	80033ec <HAL_GetTick>
 8008f52:	4602      	mov	r2, r0
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d302      	bcc.n	8008f64 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d101      	bne.n	8008f68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f64:	2303      	movs	r3, #3
 8008f66:	e04e      	b.n	8009006 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0304 	and.w	r3, r3, #4
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d037      	beq.n	8008fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	2b80      	cmp	r3, #128	; 0x80
 8008f7a:	d034      	beq.n	8008fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2b40      	cmp	r3, #64	; 0x40
 8008f80:	d031      	beq.n	8008fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	f003 0308 	and.w	r3, r3, #8
 8008f8c:	2b08      	cmp	r3, #8
 8008f8e:	d110      	bne.n	8008fb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2208      	movs	r2, #8
 8008f96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f000 f838 	bl	800900e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2208      	movs	r2, #8
 8008fa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e029      	b.n	8009006 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	69db      	ldr	r3, [r3, #28]
 8008fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fc0:	d111      	bne.n	8008fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 f81e 	bl	800900e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2220      	movs	r2, #32
 8008fd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e00f      	b.n	8009006 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	69da      	ldr	r2, [r3, #28]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	4013      	ands	r3, r2
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	bf0c      	ite	eq
 8008ff6:	2301      	moveq	r3, #1
 8008ff8:	2300      	movne	r3, #0
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	79fb      	ldrb	r3, [r7, #7]
 8009000:	429a      	cmp	r2, r3
 8009002:	d0a0      	beq.n	8008f46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800900e:	b480      	push	{r7}
 8009010:	b095      	sub	sp, #84	; 0x54
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800901e:	e853 3f00 	ldrex	r3, [r3]
 8009022:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800902a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	461a      	mov	r2, r3
 8009032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009034:	643b      	str	r3, [r7, #64]	; 0x40
 8009036:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009038:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800903a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800903c:	e841 2300 	strex	r3, r2, [r1]
 8009040:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1e6      	bne.n	8009016 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3308      	adds	r3, #8
 800904e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009050:	6a3b      	ldr	r3, [r7, #32]
 8009052:	e853 3f00 	ldrex	r3, [r3]
 8009056:	61fb      	str	r3, [r7, #28]
   return(result);
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800905e:	f023 0301 	bic.w	r3, r3, #1
 8009062:	64bb      	str	r3, [r7, #72]	; 0x48
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3308      	adds	r3, #8
 800906a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800906c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800906e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009074:	e841 2300 	strex	r3, r2, [r1]
 8009078:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1e3      	bne.n	8009048 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009084:	2b01      	cmp	r3, #1
 8009086:	d118      	bne.n	80090ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	e853 3f00 	ldrex	r3, [r3]
 8009094:	60bb      	str	r3, [r7, #8]
   return(result);
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	f023 0310 	bic.w	r3, r3, #16
 800909c:	647b      	str	r3, [r7, #68]	; 0x44
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	461a      	mov	r2, r3
 80090a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090a6:	61bb      	str	r3, [r7, #24]
 80090a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090aa:	6979      	ldr	r1, [r7, #20]
 80090ac:	69ba      	ldr	r2, [r7, #24]
 80090ae:	e841 2300 	strex	r3, r2, [r1]
 80090b2:	613b      	str	r3, [r7, #16]
   return(result);
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e6      	bne.n	8009088 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2220      	movs	r2, #32
 80090be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80090ce:	bf00      	nop
 80090d0:	3754      	adds	r7, #84	; 0x54
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80090da:	b480      	push	{r7}
 80090dc:	b085      	sub	sp, #20
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d101      	bne.n	80090f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80090ec:	2302      	movs	r3, #2
 80090ee:	e027      	b.n	8009140 <HAL_UARTEx_DisableFifoMode+0x66>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2224      	movs	r2, #36	; 0x24
 80090fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f022 0201 	bic.w	r2, r2, #1
 8009116:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800911e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2220      	movs	r2, #32
 8009132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800915c:	2b01      	cmp	r3, #1
 800915e:	d101      	bne.n	8009164 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009160:	2302      	movs	r3, #2
 8009162:	e02d      	b.n	80091c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2224      	movs	r2, #36	; 0x24
 8009170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 0201 	bic.w	r2, r2, #1
 800918a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	430a      	orrs	r2, r1
 800919e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f84f 	bl	8009244 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2220      	movs	r2, #32
 80091b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d101      	bne.n	80091e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80091dc:	2302      	movs	r3, #2
 80091de:	e02d      	b.n	800923c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2224      	movs	r2, #36	; 0x24
 80091ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f022 0201 	bic.w	r2, r2, #1
 8009206:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	430a      	orrs	r2, r1
 800921a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f811 	bl	8009244 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2220      	movs	r2, #32
 800922e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009250:	2b00      	cmp	r3, #0
 8009252:	d108      	bne.n	8009266 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009264:	e031      	b.n	80092ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009266:	2308      	movs	r3, #8
 8009268:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800926a:	2308      	movs	r3, #8
 800926c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	0e5b      	lsrs	r3, r3, #25
 8009276:	b2db      	uxtb	r3, r3
 8009278:	f003 0307 	and.w	r3, r3, #7
 800927c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	0f5b      	lsrs	r3, r3, #29
 8009286:	b2db      	uxtb	r3, r3
 8009288:	f003 0307 	and.w	r3, r3, #7
 800928c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800928e:	7bbb      	ldrb	r3, [r7, #14]
 8009290:	7b3a      	ldrb	r2, [r7, #12]
 8009292:	4911      	ldr	r1, [pc, #68]	; (80092d8 <UARTEx_SetNbDataToProcess+0x94>)
 8009294:	5c8a      	ldrb	r2, [r1, r2]
 8009296:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800929a:	7b3a      	ldrb	r2, [r7, #12]
 800929c:	490f      	ldr	r1, [pc, #60]	; (80092dc <UARTEx_SetNbDataToProcess+0x98>)
 800929e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
 80092ae:	7b7a      	ldrb	r2, [r7, #13]
 80092b0:	4909      	ldr	r1, [pc, #36]	; (80092d8 <UARTEx_SetNbDataToProcess+0x94>)
 80092b2:	5c8a      	ldrb	r2, [r1, r2]
 80092b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80092b8:	7b7a      	ldrb	r2, [r7, #13]
 80092ba:	4908      	ldr	r1, [pc, #32]	; (80092dc <UARTEx_SetNbDataToProcess+0x98>)
 80092bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092be:	fb93 f3f2 	sdiv	r3, r3, r2
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80092ca:	bf00      	nop
 80092cc:	3714      	adds	r7, #20
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	080151a0 	.word	0x080151a0
 80092dc:	080151a8 	.word	0x080151a8

080092e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80092f0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80092f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800930e:	b480      	push	{r7}
 8009310:	b085      	sub	sp, #20
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009316:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800931a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009322:	b29a      	uxth	r2, r3
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	b29b      	uxth	r3, r3
 8009328:	43db      	mvns	r3, r3
 800932a:	b29b      	uxth	r3, r3
 800932c:	4013      	ands	r3, r2
 800932e:	b29a      	uxth	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3714      	adds	r7, #20
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	1d3b      	adds	r3, r7, #4
 800934e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2201      	movs	r2, #1
 8009356:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009380:	b480      	push	{r7}
 8009382:	b09d      	sub	sp, #116	; 0x74
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4413      	add	r3, r2
 800939a:	881b      	ldrh	r3, [r3, #0]
 800939c:	b29b      	uxth	r3, r3
 800939e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80093a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093a6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	78db      	ldrb	r3, [r3, #3]
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d81f      	bhi.n	80093f2 <USB_ActivateEndpoint+0x72>
 80093b2:	a201      	add	r2, pc, #4	; (adr r2, 80093b8 <USB_ActivateEndpoint+0x38>)
 80093b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b8:	080093c9 	.word	0x080093c9
 80093bc:	080093e5 	.word	0x080093e5
 80093c0:	080093fb 	.word	0x080093fb
 80093c4:	080093d7 	.word	0x080093d7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80093c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80093cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80093d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80093d4:	e012      	b.n	80093fc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80093d6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80093da:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80093de:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80093e2:	e00b      	b.n	80093fc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80093e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80093e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80093ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80093f0:	e004      	b.n	80093fc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80093f8:	e000      	b.n	80093fc <USB_ActivateEndpoint+0x7c>
      break;
 80093fa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	441a      	add	r2, r3
 8009406:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800940a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800940e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800941a:	b29b      	uxth	r3, r3
 800941c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4413      	add	r3, r2
 8009428:	881b      	ldrh	r3, [r3, #0]
 800942a:	b29b      	uxth	r3, r3
 800942c:	b21b      	sxth	r3, r3
 800942e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009436:	b21a      	sxth	r2, r3
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	b21b      	sxth	r3, r3
 800943e:	4313      	orrs	r3, r2
 8009440:	b21b      	sxth	r3, r3
 8009442:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	441a      	add	r2, r3
 8009450:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800945c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009464:	b29b      	uxth	r3, r3
 8009466:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	7b1b      	ldrb	r3, [r3, #12]
 800946c:	2b00      	cmp	r3, #0
 800946e:	f040 8178 	bne.w	8009762 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	785b      	ldrb	r3, [r3, #1]
 8009476:	2b00      	cmp	r3, #0
 8009478:	f000 8084 	beq.w	8009584 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	61bb      	str	r3, [r7, #24]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009486:	b29b      	uxth	r3, r3
 8009488:	461a      	mov	r2, r3
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	4413      	add	r3, r2
 800948e:	61bb      	str	r3, [r7, #24]
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	00da      	lsls	r2, r3, #3
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	4413      	add	r3, r2
 800949a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800949e:	617b      	str	r3, [r7, #20]
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	88db      	ldrh	r3, [r3, #6]
 80094a4:	085b      	lsrs	r3, r3, #1
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	005b      	lsls	r3, r3, #1
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	881b      	ldrh	r3, [r3, #0]
 80094bc:	827b      	strh	r3, [r7, #18]
 80094be:	8a7b      	ldrh	r3, [r7, #18]
 80094c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d01b      	beq.n	8009500 <USB_ActivateEndpoint+0x180>
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4413      	add	r3, r2
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094de:	823b      	strh	r3, [r7, #16]
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	441a      	add	r2, r3
 80094ea:	8a3b      	ldrh	r3, [r7, #16]
 80094ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	78db      	ldrb	r3, [r3, #3]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d020      	beq.n	800954a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4413      	add	r3, r2
 8009512:	881b      	ldrh	r3, [r3, #0]
 8009514:	b29b      	uxth	r3, r3
 8009516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800951a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800951e:	81bb      	strh	r3, [r7, #12]
 8009520:	89bb      	ldrh	r3, [r7, #12]
 8009522:	f083 0320 	eor.w	r3, r3, #32
 8009526:	81bb      	strh	r3, [r7, #12]
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	441a      	add	r2, r3
 8009532:	89bb      	ldrh	r3, [r7, #12]
 8009534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800953c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009544:	b29b      	uxth	r3, r3
 8009546:	8013      	strh	r3, [r2, #0]
 8009548:	e2d5      	b.n	8009af6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	881b      	ldrh	r3, [r3, #0]
 8009556:	b29b      	uxth	r3, r3
 8009558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800955c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009560:	81fb      	strh	r3, [r7, #14]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	441a      	add	r2, r3
 800956c:	89fb      	ldrh	r3, [r7, #14]
 800956e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800957a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800957e:	b29b      	uxth	r3, r3
 8009580:	8013      	strh	r3, [r2, #0]
 8009582:	e2b8      	b.n	8009af6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	633b      	str	r3, [r7, #48]	; 0x30
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800958e:	b29b      	uxth	r3, r3
 8009590:	461a      	mov	r2, r3
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	4413      	add	r3, r2
 8009596:	633b      	str	r3, [r7, #48]	; 0x30
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	00da      	lsls	r2, r3, #3
 800959e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a0:	4413      	add	r3, r2
 80095a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80095a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	88db      	ldrh	r3, [r3, #6]
 80095ac:	085b      	lsrs	r3, r3, #1
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	005b      	lsls	r3, r3, #1
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	461a      	mov	r2, r3
 80095c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c8:	4413      	add	r3, r2
 80095ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	00da      	lsls	r2, r3, #3
 80095d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d4:	4413      	add	r3, r2
 80095d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80095da:	627b      	str	r3, [r7, #36]	; 0x24
 80095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095de:	881b      	ldrh	r3, [r3, #0]
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ea:	801a      	strh	r2, [r3, #0]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	2b3e      	cmp	r3, #62	; 0x3e
 80095f2:	d91d      	bls.n	8009630 <USB_ActivateEndpoint+0x2b0>
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	095b      	lsrs	r3, r3, #5
 80095fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	f003 031f 	and.w	r3, r3, #31
 8009604:	2b00      	cmp	r3, #0
 8009606:	d102      	bne.n	800960e <USB_ActivateEndpoint+0x28e>
 8009608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800960a:	3b01      	subs	r3, #1
 800960c:	66bb      	str	r3, [r7, #104]	; 0x68
 800960e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009610:	881b      	ldrh	r3, [r3, #0]
 8009612:	b29a      	uxth	r2, r3
 8009614:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009616:	b29b      	uxth	r3, r3
 8009618:	029b      	lsls	r3, r3, #10
 800961a:	b29b      	uxth	r3, r3
 800961c:	4313      	orrs	r3, r2
 800961e:	b29b      	uxth	r3, r3
 8009620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009628:	b29a      	uxth	r2, r3
 800962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962c:	801a      	strh	r2, [r3, #0]
 800962e:	e026      	b.n	800967e <USB_ActivateEndpoint+0x2fe>
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10a      	bne.n	800964e <USB_ActivateEndpoint+0x2ce>
 8009638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963a:	881b      	ldrh	r3, [r3, #0]
 800963c:	b29b      	uxth	r3, r3
 800963e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009646:	b29a      	uxth	r2, r3
 8009648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964a:	801a      	strh	r2, [r3, #0]
 800964c:	e017      	b.n	800967e <USB_ActivateEndpoint+0x2fe>
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	085b      	lsrs	r3, r3, #1
 8009654:	66bb      	str	r3, [r7, #104]	; 0x68
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	2b00      	cmp	r3, #0
 8009660:	d002      	beq.n	8009668 <USB_ActivateEndpoint+0x2e8>
 8009662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009664:	3301      	adds	r3, #1
 8009666:	66bb      	str	r3, [r7, #104]	; 0x68
 8009668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966a:	881b      	ldrh	r3, [r3, #0]
 800966c:	b29a      	uxth	r2, r3
 800966e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009670:	b29b      	uxth	r3, r3
 8009672:	029b      	lsls	r3, r3, #10
 8009674:	b29b      	uxth	r3, r3
 8009676:	4313      	orrs	r3, r2
 8009678:	b29a      	uxth	r2, r3
 800967a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	881b      	ldrh	r3, [r3, #0]
 800968a:	847b      	strh	r3, [r7, #34]	; 0x22
 800968c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800968e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009692:	2b00      	cmp	r3, #0
 8009694:	d01b      	beq.n	80096ce <USB_ActivateEndpoint+0x34e>
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	4413      	add	r3, r2
 80096a0:	881b      	ldrh	r3, [r3, #0]
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ac:	843b      	strh	r3, [r7, #32]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	441a      	add	r2, r3
 80096b8:	8c3b      	ldrh	r3, [r7, #32]
 80096ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80096c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d124      	bne.n	8009720 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	881b      	ldrh	r3, [r3, #0]
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ec:	83bb      	strh	r3, [r7, #28]
 80096ee:	8bbb      	ldrh	r3, [r7, #28]
 80096f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80096f4:	83bb      	strh	r3, [r7, #28]
 80096f6:	8bbb      	ldrh	r3, [r7, #28]
 80096f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80096fc:	83bb      	strh	r3, [r7, #28]
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	441a      	add	r2, r3
 8009708:	8bbb      	ldrh	r3, [r7, #28]
 800970a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800970e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800971a:	b29b      	uxth	r3, r3
 800971c:	8013      	strh	r3, [r2, #0]
 800971e:	e1ea      	b.n	8009af6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4413      	add	r3, r2
 800972a:	881b      	ldrh	r3, [r3, #0]
 800972c:	b29b      	uxth	r3, r3
 800972e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009736:	83fb      	strh	r3, [r7, #30]
 8009738:	8bfb      	ldrh	r3, [r7, #30]
 800973a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800973e:	83fb      	strh	r3, [r7, #30]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	441a      	add	r2, r3
 800974a:	8bfb      	ldrh	r3, [r7, #30]
 800974c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800975c:	b29b      	uxth	r3, r3
 800975e:	8013      	strh	r3, [r2, #0]
 8009760:	e1c9      	b.n	8009af6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	78db      	ldrb	r3, [r3, #3]
 8009766:	2b02      	cmp	r3, #2
 8009768:	d11e      	bne.n	80097a8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4413      	add	r3, r2
 8009774:	881b      	ldrh	r3, [r3, #0]
 8009776:	b29b      	uxth	r3, r3
 8009778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800977c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009780:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	441a      	add	r2, r3
 800978e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800979a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800979e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	8013      	strh	r3, [r2, #0]
 80097a6:	e01d      	b.n	80097e4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	4413      	add	r3, r2
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80097ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097be:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	441a      	add	r2, r3
 80097cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80097d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	461a      	mov	r2, r3
 80097f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097f4:	4413      	add	r3, r2
 80097f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	00da      	lsls	r2, r3, #3
 80097fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009800:	4413      	add	r3, r2
 8009802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009806:	65bb      	str	r3, [r7, #88]	; 0x58
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	891b      	ldrh	r3, [r3, #8]
 800980c:	085b      	lsrs	r3, r3, #1
 800980e:	b29b      	uxth	r3, r3
 8009810:	005b      	lsls	r3, r3, #1
 8009812:	b29a      	uxth	r2, r3
 8009814:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009816:	801a      	strh	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	657b      	str	r3, [r7, #84]	; 0x54
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009822:	b29b      	uxth	r3, r3
 8009824:	461a      	mov	r2, r3
 8009826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009828:	4413      	add	r3, r2
 800982a:	657b      	str	r3, [r7, #84]	; 0x54
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	00da      	lsls	r2, r3, #3
 8009832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009834:	4413      	add	r3, r2
 8009836:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800983a:	653b      	str	r3, [r7, #80]	; 0x50
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	895b      	ldrh	r3, [r3, #10]
 8009840:	085b      	lsrs	r3, r3, #1
 8009842:	b29b      	uxth	r3, r3
 8009844:	005b      	lsls	r3, r3, #1
 8009846:	b29a      	uxth	r2, r3
 8009848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800984a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	785b      	ldrb	r3, [r3, #1]
 8009850:	2b00      	cmp	r3, #0
 8009852:	f040 8093 	bne.w	800997c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4413      	add	r3, r2
 8009860:	881b      	ldrh	r3, [r3, #0]
 8009862:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009866:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800986a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800986e:	2b00      	cmp	r3, #0
 8009870:	d01b      	beq.n	80098aa <USB_ActivateEndpoint+0x52a>
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	881b      	ldrh	r3, [r3, #0]
 800987e:	b29b      	uxth	r3, r3
 8009880:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009888:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	441a      	add	r2, r3
 8009894:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800989a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800989e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80098a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4413      	add	r3, r2
 80098b4:	881b      	ldrh	r3, [r3, #0]
 80098b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80098b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80098ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d01b      	beq.n	80098fa <USB_ActivateEndpoint+0x57a>
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	4413      	add	r3, r2
 80098cc:	881b      	ldrh	r3, [r3, #0]
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	441a      	add	r2, r3
 80098e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80098e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	881b      	ldrh	r3, [r3, #0]
 8009906:	b29b      	uxth	r3, r3
 8009908:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800990c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009910:	873b      	strh	r3, [r7, #56]	; 0x38
 8009912:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009914:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009918:	873b      	strh	r3, [r7, #56]	; 0x38
 800991a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800991c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009920:	873b      	strh	r3, [r7, #56]	; 0x38
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	441a      	add	r2, r3
 800992c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800992e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800993a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800993e:	b29b      	uxth	r3, r3
 8009940:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	881b      	ldrh	r3, [r3, #0]
 800994e:	b29b      	uxth	r3, r3
 8009950:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009958:	86fb      	strh	r3, [r7, #54]	; 0x36
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	441a      	add	r2, r3
 8009964:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800996a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800996e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009976:	b29b      	uxth	r3, r3
 8009978:	8013      	strh	r3, [r2, #0]
 800997a:	e0bc      	b.n	8009af6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	4413      	add	r3, r2
 8009986:	881b      	ldrh	r3, [r3, #0]
 8009988:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800998c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009994:	2b00      	cmp	r3, #0
 8009996:	d01d      	beq.n	80099d4 <USB_ActivateEndpoint+0x654>
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	4413      	add	r3, r2
 80099a2:	881b      	ldrh	r3, [r3, #0]
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	441a      	add	r2, r3
 80099bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80099c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	4413      	add	r3, r2
 80099de:	881b      	ldrh	r3, [r3, #0]
 80099e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80099e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80099e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d01d      	beq.n	8009a2c <USB_ActivateEndpoint+0x6ac>
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4413      	add	r3, r2
 80099fa:	881b      	ldrh	r3, [r3, #0]
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a06:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	441a      	add	r2, r3
 8009a14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	78db      	ldrb	r3, [r3, #3]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d024      	beq.n	8009a7e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	881b      	ldrh	r3, [r3, #0]
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009a4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009a52:	f083 0320 	eor.w	r3, r3, #32
 8009a56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	441a      	add	r2, r3
 8009a64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	8013      	strh	r3, [r2, #0]
 8009a7c:	e01d      	b.n	8009aba <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4413      	add	r3, r2
 8009a88:	881b      	ldrh	r3, [r3, #0]
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a94:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	441a      	add	r2, r3
 8009aa2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ad0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	441a      	add	r2, r3
 8009ade:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009af6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3774      	adds	r7, #116	; 0x74
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop

08009b08 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b08d      	sub	sp, #52	; 0x34
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	7b1b      	ldrb	r3, [r3, #12]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f040 808e 	bne.w	8009c38 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	785b      	ldrb	r3, [r3, #1]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d044      	beq.n	8009bae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	81bb      	strh	r3, [r7, #12]
 8009b32:	89bb      	ldrh	r3, [r7, #12]
 8009b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d01b      	beq.n	8009b74 <USB_DeactivateEndpoint+0x6c>
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	881b      	ldrh	r3, [r3, #0]
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b52:	817b      	strh	r3, [r7, #10]
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	441a      	add	r2, r3
 8009b5e:	897b      	ldrh	r3, [r7, #10]
 8009b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4413      	add	r3, r2
 8009b7e:	881b      	ldrh	r3, [r3, #0]
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b8a:	813b      	strh	r3, [r7, #8]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	441a      	add	r2, r3
 8009b96:	893b      	ldrh	r3, [r7, #8]
 8009b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	8013      	strh	r3, [r2, #0]
 8009bac:	e192      	b.n	8009ed4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	4413      	add	r3, r2
 8009bb8:	881b      	ldrh	r3, [r3, #0]
 8009bba:	827b      	strh	r3, [r7, #18]
 8009bbc:	8a7b      	ldrh	r3, [r7, #18]
 8009bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d01b      	beq.n	8009bfe <USB_DeactivateEndpoint+0xf6>
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4413      	add	r3, r2
 8009bd0:	881b      	ldrh	r3, [r3, #0]
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bdc:	823b      	strh	r3, [r7, #16]
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	441a      	add	r2, r3
 8009be8:	8a3b      	ldrh	r3, [r7, #16]
 8009bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	4413      	add	r3, r2
 8009c08:	881b      	ldrh	r3, [r3, #0]
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c14:	81fb      	strh	r3, [r7, #14]
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	441a      	add	r2, r3
 8009c20:	89fb      	ldrh	r3, [r7, #14]
 8009c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	8013      	strh	r3, [r2, #0]
 8009c36:	e14d      	b.n	8009ed4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	785b      	ldrb	r3, [r3, #1]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f040 80a5 	bne.w	8009d8c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	4413      	add	r3, r2
 8009c4c:	881b      	ldrh	r3, [r3, #0]
 8009c4e:	843b      	strh	r3, [r7, #32]
 8009c50:	8c3b      	ldrh	r3, [r7, #32]
 8009c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d01b      	beq.n	8009c92 <USB_DeactivateEndpoint+0x18a>
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	4413      	add	r3, r2
 8009c64:	881b      	ldrh	r3, [r3, #0]
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c70:	83fb      	strh	r3, [r7, #30]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	441a      	add	r2, r3
 8009c7c:	8bfb      	ldrh	r3, [r7, #30]
 8009c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	4413      	add	r3, r2
 8009c9c:	881b      	ldrh	r3, [r3, #0]
 8009c9e:	83bb      	strh	r3, [r7, #28]
 8009ca0:	8bbb      	ldrh	r3, [r7, #28]
 8009ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d01b      	beq.n	8009ce2 <USB_DeactivateEndpoint+0x1da>
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4413      	add	r3, r2
 8009cb4:	881b      	ldrh	r3, [r3, #0]
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cc0:	837b      	strh	r3, [r7, #26]
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	441a      	add	r2, r3
 8009ccc:	8b7b      	ldrh	r3, [r7, #26]
 8009cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4413      	add	r3, r2
 8009cec:	881b      	ldrh	r3, [r3, #0]
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cf8:	833b      	strh	r3, [r7, #24]
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	441a      	add	r2, r3
 8009d04:	8b3b      	ldrh	r3, [r7, #24]
 8009d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	4413      	add	r3, r2
 8009d24:	881b      	ldrh	r3, [r3, #0]
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d30:	82fb      	strh	r3, [r7, #22]
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	441a      	add	r2, r3
 8009d3c:	8afb      	ldrh	r3, [r7, #22]
 8009d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4413      	add	r3, r2
 8009d5c:	881b      	ldrh	r3, [r3, #0]
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d68:	82bb      	strh	r3, [r7, #20]
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	441a      	add	r2, r3
 8009d74:	8abb      	ldrh	r3, [r7, #20]
 8009d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	8013      	strh	r3, [r2, #0]
 8009d8a:	e0a3      	b.n	8009ed4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	881b      	ldrh	r3, [r3, #0]
 8009d98:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009d9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d01b      	beq.n	8009ddc <USB_DeactivateEndpoint+0x2d4>
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4413      	add	r3, r2
 8009dae:	881b      	ldrh	r3, [r3, #0]
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	441a      	add	r2, r3
 8009dc6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009dc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4413      	add	r3, r2
 8009de6:	881b      	ldrh	r3, [r3, #0]
 8009de8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009dea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d01b      	beq.n	8009e2c <USB_DeactivateEndpoint+0x324>
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4413      	add	r3, r2
 8009dfe:	881b      	ldrh	r3, [r3, #0]
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e0a:	853b      	strh	r3, [r7, #40]	; 0x28
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	441a      	add	r2, r3
 8009e16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	4413      	add	r3, r2
 8009e36:	881b      	ldrh	r3, [r3, #0]
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e42:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	441a      	add	r2, r3
 8009e4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4413      	add	r3, r2
 8009e6e:	881b      	ldrh	r3, [r3, #0]
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e7a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	441a      	add	r2, r3
 8009e86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4413      	add	r3, r2
 8009ea6:	881b      	ldrh	r3, [r3, #0]
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eb2:	847b      	strh	r3, [r7, #34]	; 0x22
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	441a      	add	r2, r3
 8009ebe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3734      	adds	r7, #52	; 0x34
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr

08009ee2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b0c2      	sub	sp, #264	; 0x108
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ef0:	6018      	str	r0, [r3, #0]
 8009ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009efa:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	785b      	ldrb	r3, [r3, #1]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	f040 86b7 	bne.w	800ac7c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	699a      	ldr	r2, [r3, #24]
 8009f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d908      	bls.n	8009f3c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009f3a:	e007      	b.n	8009f4c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	699b      	ldr	r3, [r3, #24]
 8009f48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	7b1b      	ldrb	r3, [r3, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d13a      	bne.n	8009fd2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	6959      	ldr	r1, [r3, #20]
 8009f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	88da      	ldrh	r2, [r3, #6]
 8009f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009f7e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009f82:	6800      	ldr	r0, [r0, #0]
 8009f84:	f001 fc98 	bl	800b8b8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	613b      	str	r3, [r7, #16]
 8009f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	4413      	add	r3, r2
 8009faa:	613b      	str	r3, [r7, #16]
 8009fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	00da      	lsls	r2, r3, #3
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009fc2:	60fb      	str	r3, [r7, #12]
 8009fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	801a      	strh	r2, [r3, #0]
 8009fce:	f000 be1f 	b.w	800ac10 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	78db      	ldrb	r3, [r3, #3]
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	f040 8462 	bne.w	800a8a8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	6a1a      	ldr	r2, [r3, #32]
 8009ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	f240 83df 	bls.w	800a7c0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a006:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	4413      	add	r3, r2
 800a01c:	881b      	ldrh	r3, [r3, #0]
 800a01e:	b29b      	uxth	r3, r3
 800a020:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a028:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a02c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a030:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a03a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	441a      	add	r2, r3
 800a046:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a04a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a04e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a052:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a05e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	6a1a      	ldr	r2, [r3, #32]
 800a06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a06e:	1ad2      	subs	r2, r2, r3
 800a070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a07c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a080:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a08a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	881b      	ldrh	r3, [r3, #0]
 800a098:	b29b      	uxth	r3, r3
 800a09a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f000 81c7 	beq.w	800a432 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a0a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	633b      	str	r3, [r7, #48]	; 0x30
 800a0b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	785b      	ldrb	r3, [r3, #1]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d177      	bne.n	800a1b0 <USB_EPStartXfer+0x2ce>
 800a0c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	461a      	mov	r2, r3
 800a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e0:	4413      	add	r3, r2
 800a0e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	00da      	lsls	r2, r3, #3
 800a0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f4:	4413      	add	r3, r2
 800a0f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a0fa:	627b      	str	r3, [r7, #36]	; 0x24
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fe:	881b      	ldrh	r3, [r3, #0]
 800a100:	b29b      	uxth	r3, r3
 800a102:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a106:	b29a      	uxth	r2, r3
 800a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10a:	801a      	strh	r2, [r3, #0]
 800a10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a110:	2b3e      	cmp	r3, #62	; 0x3e
 800a112:	d921      	bls.n	800a158 <USB_EPStartXfer+0x276>
 800a114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a118:	095b      	lsrs	r3, r3, #5
 800a11a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a11e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a122:	f003 031f 	and.w	r3, r3, #31
 800a126:	2b00      	cmp	r3, #0
 800a128:	d104      	bne.n	800a134 <USB_EPStartXfer+0x252>
 800a12a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a12e:	3b01      	subs	r3, #1
 800a130:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	881b      	ldrh	r3, [r3, #0]
 800a138:	b29a      	uxth	r2, r3
 800a13a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a13e:	b29b      	uxth	r3, r3
 800a140:	029b      	lsls	r3, r3, #10
 800a142:	b29b      	uxth	r3, r3
 800a144:	4313      	orrs	r3, r2
 800a146:	b29b      	uxth	r3, r3
 800a148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a14c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a150:	b29a      	uxth	r2, r3
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	801a      	strh	r2, [r3, #0]
 800a156:	e050      	b.n	800a1fa <USB_EPStartXfer+0x318>
 800a158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10a      	bne.n	800a176 <USB_EPStartXfer+0x294>
 800a160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a162:	881b      	ldrh	r3, [r3, #0]
 800a164:	b29b      	uxth	r3, r3
 800a166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a16a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a16e:	b29a      	uxth	r2, r3
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	801a      	strh	r2, [r3, #0]
 800a174:	e041      	b.n	800a1fa <USB_EPStartXfer+0x318>
 800a176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a17a:	085b      	lsrs	r3, r3, #1
 800a17c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a184:	f003 0301 	and.w	r3, r3, #1
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d004      	beq.n	800a196 <USB_EPStartXfer+0x2b4>
 800a18c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a190:	3301      	adds	r3, #1
 800a192:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a198:	881b      	ldrh	r3, [r3, #0]
 800a19a:	b29a      	uxth	r2, r3
 800a19c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	029b      	lsls	r3, r3, #10
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ac:	801a      	strh	r2, [r3, #0]
 800a1ae:	e024      	b.n	800a1fa <USB_EPStartXfer+0x318>
 800a1b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	785b      	ldrb	r3, [r3, #1]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d11c      	bne.n	800a1fa <USB_EPStartXfer+0x318>
 800a1c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d4:	4413      	add	r3, r2
 800a1d6:	633b      	str	r3, [r7, #48]	; 0x30
 800a1d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	00da      	lsls	r2, r3, #3
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e8:	4413      	add	r3, r2
 800a1ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a1fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	895b      	ldrh	r3, [r3, #10]
 800a206:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a20e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	6959      	ldr	r1, [r3, #20]
 800a216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a220:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a224:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a228:	6800      	ldr	r0, [r0, #0]
 800a22a:	f001 fb45 	bl	800b8b8 <USB_WritePMA>
            ep->xfer_buff += len;
 800a22e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	695a      	ldr	r2, [r3, #20]
 800a23a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a23e:	441a      	add	r2, r3
 800a240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a24c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	6a1a      	ldr	r2, [r3, #32]
 800a258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a25c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	429a      	cmp	r2, r3
 800a266:	d90f      	bls.n	800a288 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a26c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	6a1a      	ldr	r2, [r3, #32]
 800a274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a278:	1ad2      	subs	r2, r2, r3
 800a27a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a27e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	621a      	str	r2, [r3, #32]
 800a286:	e00e      	b.n	800a2a6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a28c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	6a1b      	ldr	r3, [r3, #32]
 800a294:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a29c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a2a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	785b      	ldrb	r3, [r3, #1]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d177      	bne.n	800a3a6 <USB_EPStartXfer+0x4c4>
 800a2b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	61bb      	str	r3, [r7, #24]
 800a2c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	69bb      	ldr	r3, [r7, #24]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	61bb      	str	r3, [r7, #24]
 800a2da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	00da      	lsls	r2, r3, #3
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a2f0:	617b      	str	r3, [r7, #20]
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	801a      	strh	r2, [r3, #0]
 800a302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a306:	2b3e      	cmp	r3, #62	; 0x3e
 800a308:	d921      	bls.n	800a34e <USB_EPStartXfer+0x46c>
 800a30a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a30e:	095b      	lsrs	r3, r3, #5
 800a310:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a318:	f003 031f 	and.w	r3, r3, #31
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d104      	bne.n	800a32a <USB_EPStartXfer+0x448>
 800a320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a324:	3b01      	subs	r3, #1
 800a326:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	881b      	ldrh	r3, [r3, #0]
 800a32e:	b29a      	uxth	r2, r3
 800a330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a334:	b29b      	uxth	r3, r3
 800a336:	029b      	lsls	r3, r3, #10
 800a338:	b29b      	uxth	r3, r3
 800a33a:	4313      	orrs	r3, r2
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a346:	b29a      	uxth	r2, r3
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	801a      	strh	r2, [r3, #0]
 800a34c:	e056      	b.n	800a3fc <USB_EPStartXfer+0x51a>
 800a34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10a      	bne.n	800a36c <USB_EPStartXfer+0x48a>
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	881b      	ldrh	r3, [r3, #0]
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a364:	b29a      	uxth	r2, r3
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	801a      	strh	r2, [r3, #0]
 800a36a:	e047      	b.n	800a3fc <USB_EPStartXfer+0x51a>
 800a36c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a370:	085b      	lsrs	r3, r3, #1
 800a372:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a37a:	f003 0301 	and.w	r3, r3, #1
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d004      	beq.n	800a38c <USB_EPStartXfer+0x4aa>
 800a382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a386:	3301      	adds	r3, #1
 800a388:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	881b      	ldrh	r3, [r3, #0]
 800a390:	b29a      	uxth	r2, r3
 800a392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a396:	b29b      	uxth	r3, r3
 800a398:	029b      	lsls	r3, r3, #10
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	4313      	orrs	r3, r2
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	801a      	strh	r2, [r3, #0]
 800a3a4:	e02a      	b.n	800a3fc <USB_EPStartXfer+0x51a>
 800a3a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	785b      	ldrb	r3, [r3, #1]
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d122      	bne.n	800a3fc <USB_EPStartXfer+0x51a>
 800a3b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	623b      	str	r3, [r7, #32]
 800a3c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	623b      	str	r3, [r7, #32]
 800a3da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	00da      	lsls	r2, r3, #3
 800a3e8:	6a3b      	ldr	r3, [r7, #32]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a3f0:	61fb      	str	r3, [r7, #28]
 800a3f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a3fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	891b      	ldrh	r3, [r3, #8]
 800a408:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a40c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	6959      	ldr	r1, [r3, #20]
 800a418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a422:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a426:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a42a:	6800      	ldr	r0, [r0, #0]
 800a42c:	f001 fa44 	bl	800b8b8 <USB_WritePMA>
 800a430:	e3ee      	b.n	800ac10 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	785b      	ldrb	r3, [r3, #1]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d177      	bne.n	800a532 <USB_EPStartXfer+0x650>
 800a442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a446:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a44e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a452:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	461a      	mov	r2, r3
 800a460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a462:	4413      	add	r3, r2
 800a464:	64bb      	str	r3, [r7, #72]	; 0x48
 800a466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a46a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	00da      	lsls	r2, r3, #3
 800a474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a476:	4413      	add	r3, r2
 800a478:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a47c:	647b      	str	r3, [r7, #68]	; 0x44
 800a47e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a480:	881b      	ldrh	r3, [r3, #0]
 800a482:	b29b      	uxth	r3, r3
 800a484:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a488:	b29a      	uxth	r2, r3
 800a48a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a48c:	801a      	strh	r2, [r3, #0]
 800a48e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a492:	2b3e      	cmp	r3, #62	; 0x3e
 800a494:	d921      	bls.n	800a4da <USB_EPStartXfer+0x5f8>
 800a496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a49a:	095b      	lsrs	r3, r3, #5
 800a49c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a4a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4a4:	f003 031f 	and.w	r3, r3, #31
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d104      	bne.n	800a4b6 <USB_EPStartXfer+0x5d4>
 800a4ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a4b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4b8:	881b      	ldrh	r3, [r3, #0]
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	029b      	lsls	r3, r3, #10
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4d6:	801a      	strh	r2, [r3, #0]
 800a4d8:	e056      	b.n	800a588 <USB_EPStartXfer+0x6a6>
 800a4da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d10a      	bne.n	800a4f8 <USB_EPStartXfer+0x616>
 800a4e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4e4:	881b      	ldrh	r3, [r3, #0]
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4f4:	801a      	strh	r2, [r3, #0]
 800a4f6:	e047      	b.n	800a588 <USB_EPStartXfer+0x6a6>
 800a4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4fc:	085b      	lsrs	r3, r3, #1
 800a4fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a506:	f003 0301 	and.w	r3, r3, #1
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d004      	beq.n	800a518 <USB_EPStartXfer+0x636>
 800a50e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a512:	3301      	adds	r3, #1
 800a514:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a51a:	881b      	ldrh	r3, [r3, #0]
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a522:	b29b      	uxth	r3, r3
 800a524:	029b      	lsls	r3, r3, #10
 800a526:	b29b      	uxth	r3, r3
 800a528:	4313      	orrs	r3, r2
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a52e:	801a      	strh	r2, [r3, #0]
 800a530:	e02a      	b.n	800a588 <USB_EPStartXfer+0x6a6>
 800a532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	785b      	ldrb	r3, [r3, #1]
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d122      	bne.n	800a588 <USB_EPStartXfer+0x6a6>
 800a542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a546:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	653b      	str	r3, [r7, #80]	; 0x50
 800a54e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a552:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	461a      	mov	r2, r3
 800a560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a562:	4413      	add	r3, r2
 800a564:	653b      	str	r3, [r7, #80]	; 0x50
 800a566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a56a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	00da      	lsls	r2, r3, #3
 800a574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a576:	4413      	add	r3, r2
 800a578:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a57c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a57e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a582:	b29a      	uxth	r2, r3
 800a584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a586:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a58c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	891b      	ldrh	r3, [r3, #8]
 800a594:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a59c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	6959      	ldr	r1, [r3, #20]
 800a5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a5ae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a5b2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a5b6:	6800      	ldr	r0, [r0, #0]
 800a5b8:	f001 f97e 	bl	800b8b8 <USB_WritePMA>
            ep->xfer_buff += len;
 800a5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	695a      	ldr	r2, [r3, #20]
 800a5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5cc:	441a      	add	r2, r3
 800a5ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a5da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	6a1a      	ldr	r2, [r3, #32]
 800a5e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d90f      	bls.n	800a616 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a5f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6a1a      	ldr	r2, [r3, #32]
 800a602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a606:	1ad2      	subs	r2, r2, r3
 800a608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a60c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	621a      	str	r2, [r3, #32]
 800a614:	e00e      	b.n	800a634 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a61a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a62a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2200      	movs	r2, #0
 800a632:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a638:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	643b      	str	r3, [r7, #64]	; 0x40
 800a640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	785b      	ldrb	r3, [r3, #1]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d177      	bne.n	800a740 <USB_EPStartXfer+0x85e>
 800a650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a654:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a65c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a660:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	461a      	mov	r2, r3
 800a66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a670:	4413      	add	r3, r2
 800a672:	63bb      	str	r3, [r7, #56]	; 0x38
 800a674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	00da      	lsls	r2, r3, #3
 800a682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a684:	4413      	add	r3, r2
 800a686:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a68a:	637b      	str	r3, [r7, #52]	; 0x34
 800a68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a68e:	881b      	ldrh	r3, [r3, #0]
 800a690:	b29b      	uxth	r3, r3
 800a692:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a696:	b29a      	uxth	r2, r3
 800a698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a69a:	801a      	strh	r2, [r3, #0]
 800a69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6a0:	2b3e      	cmp	r3, #62	; 0x3e
 800a6a2:	d921      	bls.n	800a6e8 <USB_EPStartXfer+0x806>
 800a6a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6a8:	095b      	lsrs	r3, r3, #5
 800a6aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a6ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6b2:	f003 031f 	and.w	r3, r3, #31
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d104      	bne.n	800a6c4 <USB_EPStartXfer+0x7e2>
 800a6ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c6:	881b      	ldrh	r3, [r3, #0]
 800a6c8:	b29a      	uxth	r2, r3
 800a6ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	029b      	lsls	r3, r3, #10
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e4:	801a      	strh	r2, [r3, #0]
 800a6e6:	e050      	b.n	800a78a <USB_EPStartXfer+0x8a8>
 800a6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10a      	bne.n	800a706 <USB_EPStartXfer+0x824>
 800a6f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f2:	881b      	ldrh	r3, [r3, #0]
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a702:	801a      	strh	r2, [r3, #0]
 800a704:	e041      	b.n	800a78a <USB_EPStartXfer+0x8a8>
 800a706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a70a:	085b      	lsrs	r3, r3, #1
 800a70c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a714:	f003 0301 	and.w	r3, r3, #1
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d004      	beq.n	800a726 <USB_EPStartXfer+0x844>
 800a71c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a720:	3301      	adds	r3, #1
 800a722:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a728:	881b      	ldrh	r3, [r3, #0]
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a730:	b29b      	uxth	r3, r3
 800a732:	029b      	lsls	r3, r3, #10
 800a734:	b29b      	uxth	r3, r3
 800a736:	4313      	orrs	r3, r2
 800a738:	b29a      	uxth	r2, r3
 800a73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a73c:	801a      	strh	r2, [r3, #0]
 800a73e:	e024      	b.n	800a78a <USB_EPStartXfer+0x8a8>
 800a740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	785b      	ldrb	r3, [r3, #1]
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d11c      	bne.n	800a78a <USB_EPStartXfer+0x8a8>
 800a750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a754:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a75e:	b29b      	uxth	r3, r3
 800a760:	461a      	mov	r2, r3
 800a762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a764:	4413      	add	r3, r2
 800a766:	643b      	str	r3, [r7, #64]	; 0x40
 800a768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a76c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	00da      	lsls	r2, r3, #3
 800a776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a778:	4413      	add	r3, r2
 800a77a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a77e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a784:	b29a      	uxth	r2, r3
 800a786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a788:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a78a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a78e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	895b      	ldrh	r3, [r3, #10]
 800a796:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a79a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a79e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	6959      	ldr	r1, [r3, #20]
 800a7a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a7b0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a7b4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a7b8:	6800      	ldr	r0, [r0, #0]
 800a7ba:	f001 f87d 	bl	800b8b8 <USB_WritePMA>
 800a7be:	e227      	b.n	800ac10 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a7c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	6a1b      	ldr	r3, [r3, #32]
 800a7cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a7d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	4413      	add	r3, r2
 800a7ea:	881b      	ldrh	r3, [r3, #0]
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a7f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7f6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a7fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	441a      	add	r2, r3
 800a814:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a81c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a828:	b29b      	uxth	r3, r3
 800a82a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a82c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a830:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a83c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a846:	b29b      	uxth	r3, r3
 800a848:	461a      	mov	r2, r3
 800a84a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a84c:	4413      	add	r3, r2
 800a84e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	00da      	lsls	r2, r3, #3
 800a85e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a860:	4413      	add	r3, r2
 800a862:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a866:	65bb      	str	r3, [r7, #88]	; 0x58
 800a868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a86c:	b29a      	uxth	r2, r3
 800a86e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a870:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	891b      	ldrh	r3, [r3, #8]
 800a87e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	6959      	ldr	r1, [r3, #20]
 800a88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a892:	b29b      	uxth	r3, r3
 800a894:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a898:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a89c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a8a0:	6800      	ldr	r0, [r0, #0]
 800a8a2:	f001 f809 	bl	800b8b8 <USB_WritePMA>
 800a8a6:	e1b3      	b.n	800ac10 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a8a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	6a1a      	ldr	r2, [r3, #32]
 800a8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b8:	1ad2      	subs	r2, r2, r3
 800a8ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a8c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	4413      	add	r3, r2
 800a8e0:	881b      	ldrh	r3, [r3, #0]
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f000 80c6 	beq.w	800aa7a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a8ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	673b      	str	r3, [r7, #112]	; 0x70
 800a8fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	785b      	ldrb	r3, [r3, #1]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d177      	bne.n	800a9fa <USB_EPStartXfer+0xb18>
 800a90a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a90e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	66bb      	str	r3, [r7, #104]	; 0x68
 800a916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a91a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a924:	b29b      	uxth	r3, r3
 800a926:	461a      	mov	r2, r3
 800a928:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a92a:	4413      	add	r3, r2
 800a92c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a92e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	00da      	lsls	r2, r3, #3
 800a93c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a93e:	4413      	add	r3, r2
 800a940:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a944:	667b      	str	r3, [r7, #100]	; 0x64
 800a946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a948:	881b      	ldrh	r3, [r3, #0]
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a950:	b29a      	uxth	r2, r3
 800a952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a954:	801a      	strh	r2, [r3, #0]
 800a956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a95a:	2b3e      	cmp	r3, #62	; 0x3e
 800a95c:	d921      	bls.n	800a9a2 <USB_EPStartXfer+0xac0>
 800a95e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a962:	095b      	lsrs	r3, r3, #5
 800a964:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a96c:	f003 031f 	and.w	r3, r3, #31
 800a970:	2b00      	cmp	r3, #0
 800a972:	d104      	bne.n	800a97e <USB_EPStartXfer+0xa9c>
 800a974:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a978:	3b01      	subs	r3, #1
 800a97a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a97e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a980:	881b      	ldrh	r3, [r3, #0]
 800a982:	b29a      	uxth	r2, r3
 800a984:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a988:	b29b      	uxth	r3, r3
 800a98a:	029b      	lsls	r3, r3, #10
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	4313      	orrs	r3, r2
 800a990:	b29b      	uxth	r3, r3
 800a992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a99e:	801a      	strh	r2, [r3, #0]
 800a9a0:	e050      	b.n	800aa44 <USB_EPStartXfer+0xb62>
 800a9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d10a      	bne.n	800a9c0 <USB_EPStartXfer+0xade>
 800a9aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9ac:	881b      	ldrh	r3, [r3, #0]
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9b8:	b29a      	uxth	r2, r3
 800a9ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9bc:	801a      	strh	r2, [r3, #0]
 800a9be:	e041      	b.n	800aa44 <USB_EPStartXfer+0xb62>
 800a9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c4:	085b      	lsrs	r3, r3, #1
 800a9c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ce:	f003 0301 	and.w	r3, r3, #1
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d004      	beq.n	800a9e0 <USB_EPStartXfer+0xafe>
 800a9d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a9da:	3301      	adds	r3, #1
 800a9dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a9e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9e2:	881b      	ldrh	r3, [r3, #0]
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	029b      	lsls	r3, r3, #10
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	b29a      	uxth	r2, r3
 800a9f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9f6:	801a      	strh	r2, [r3, #0]
 800a9f8:	e024      	b.n	800aa44 <USB_EPStartXfer+0xb62>
 800a9fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	785b      	ldrb	r3, [r3, #1]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d11c      	bne.n	800aa44 <USB_EPStartXfer+0xb62>
 800aa0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa1e:	4413      	add	r3, r2
 800aa20:	673b      	str	r3, [r7, #112]	; 0x70
 800aa22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	00da      	lsls	r2, r3, #3
 800aa30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa32:	4413      	add	r3, r2
 800aa34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa38:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa3e:	b29a      	uxth	r2, r3
 800aa40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800aa44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	895b      	ldrh	r3, [r3, #10]
 800aa50:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	6959      	ldr	r1, [r3, #20]
 800aa60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aa6a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aa6e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aa72:	6800      	ldr	r0, [r0, #0]
 800aa74:	f000 ff20 	bl	800b8b8 <USB_WritePMA>
 800aa78:	e0ca      	b.n	800ac10 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aa7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	785b      	ldrb	r3, [r3, #1]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d177      	bne.n	800ab7a <USB_EPStartXfer+0xc98>
 800aa8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aa96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aaaa:	4413      	add	r3, r2
 800aaac:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aaae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aab2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	00da      	lsls	r2, r3, #3
 800aabc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aabe:	4413      	add	r3, r2
 800aac0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aac4:	67bb      	str	r3, [r7, #120]	; 0x78
 800aac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aac8:	881b      	ldrh	r3, [r3, #0]
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aad0:	b29a      	uxth	r2, r3
 800aad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aad4:	801a      	strh	r2, [r3, #0]
 800aad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aada:	2b3e      	cmp	r3, #62	; 0x3e
 800aadc:	d921      	bls.n	800ab22 <USB_EPStartXfer+0xc40>
 800aade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aae2:	095b      	lsrs	r3, r3, #5
 800aae4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaec:	f003 031f 	and.w	r3, r3, #31
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d104      	bne.n	800aafe <USB_EPStartXfer+0xc1c>
 800aaf4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aafe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab00:	881b      	ldrh	r3, [r3, #0]
 800ab02:	b29a      	uxth	r2, r3
 800ab04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	029b      	lsls	r3, r3, #10
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab1a:	b29a      	uxth	r2, r3
 800ab1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab1e:	801a      	strh	r2, [r3, #0]
 800ab20:	e05c      	b.n	800abdc <USB_EPStartXfer+0xcfa>
 800ab22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d10a      	bne.n	800ab40 <USB_EPStartXfer+0xc5e>
 800ab2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab2c:	881b      	ldrh	r3, [r3, #0]
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab38:	b29a      	uxth	r2, r3
 800ab3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab3c:	801a      	strh	r2, [r3, #0]
 800ab3e:	e04d      	b.n	800abdc <USB_EPStartXfer+0xcfa>
 800ab40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab44:	085b      	lsrs	r3, r3, #1
 800ab46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ab4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab4e:	f003 0301 	and.w	r3, r3, #1
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d004      	beq.n	800ab60 <USB_EPStartXfer+0xc7e>
 800ab56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ab60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab62:	881b      	ldrh	r3, [r3, #0]
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	029b      	lsls	r3, r3, #10
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	4313      	orrs	r3, r2
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab76:	801a      	strh	r2, [r3, #0]
 800ab78:	e030      	b.n	800abdc <USB_EPStartXfer+0xcfa>
 800ab7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	785b      	ldrb	r3, [r3, #1]
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d128      	bne.n	800abdc <USB_EPStartXfer+0xcfa>
 800ab8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	461a      	mov	r2, r3
 800abaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800abae:	4413      	add	r3, r2
 800abb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800abb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	00da      	lsls	r2, r3, #3
 800abc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800abc6:	4413      	add	r3, r2
 800abc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800abcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800abd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800abda:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800abdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	891b      	ldrh	r3, [r3, #8]
 800abe8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800abec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	6959      	ldr	r1, [r3, #20]
 800abf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ac02:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ac06:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ac0a:	6800      	ldr	r0, [r0, #0]
 800ac0c:	f000 fe54 	bl	800b8b8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ac10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	881b      	ldrh	r3, [r3, #0]
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac36:	817b      	strh	r3, [r7, #10]
 800ac38:	897b      	ldrh	r3, [r7, #10]
 800ac3a:	f083 0310 	eor.w	r3, r3, #16
 800ac3e:	817b      	strh	r3, [r7, #10]
 800ac40:	897b      	ldrh	r3, [r7, #10]
 800ac42:	f083 0320 	eor.w	r3, r3, #32
 800ac46:	817b      	strh	r3, [r7, #10]
 800ac48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	441a      	add	r2, r3
 800ac62:	897b      	ldrh	r3, [r7, #10]
 800ac64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	8013      	strh	r3, [r2, #0]
 800ac78:	f000 bcde 	b.w	800b638 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ac7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	7b1b      	ldrb	r3, [r3, #12]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f040 80bb 	bne.w	800ae04 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ac8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	699a      	ldr	r2, [r3, #24]
 800ac9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d917      	bls.n	800acda <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800acaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	691b      	ldr	r3, [r3, #16]
 800acb6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800acba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	699a      	ldr	r2, [r3, #24]
 800acc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acca:	1ad2      	subs	r2, r2, r3
 800accc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	619a      	str	r2, [r3, #24]
 800acd8:	e00e      	b.n	800acf8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800acda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	699b      	ldr	r3, [r3, #24]
 800ace6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800acea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2200      	movs	r2, #0
 800acf6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800acf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ad06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	461a      	mov	r2, r3
 800ad18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad1c:	4413      	add	r3, r2
 800ad1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ad22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	00da      	lsls	r2, r3, #3
 800ad30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad34:	4413      	add	r3, r2
 800ad36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ad3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad42:	881b      	ldrh	r3, [r3, #0]
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad4a:	b29a      	uxth	r2, r3
 800ad4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad50:	801a      	strh	r2, [r3, #0]
 800ad52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad56:	2b3e      	cmp	r3, #62	; 0x3e
 800ad58:	d924      	bls.n	800ada4 <USB_EPStartXfer+0xec2>
 800ad5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad5e:	095b      	lsrs	r3, r3, #5
 800ad60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ad64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad68:	f003 031f 	and.w	r3, r3, #31
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d104      	bne.n	800ad7a <USB_EPStartXfer+0xe98>
 800ad70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ad74:	3b01      	subs	r3, #1
 800ad76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ad7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad7e:	881b      	ldrh	r3, [r3, #0]
 800ad80:	b29a      	uxth	r2, r3
 800ad82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	029b      	lsls	r3, r3, #10
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad98:	b29a      	uxth	r2, r3
 800ad9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad9e:	801a      	strh	r2, [r3, #0]
 800ada0:	f000 bc10 	b.w	800b5c4 <USB_EPStartXfer+0x16e2>
 800ada4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d10c      	bne.n	800adc6 <USB_EPStartXfer+0xee4>
 800adac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adb0:	881b      	ldrh	r3, [r3, #0]
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adc2:	801a      	strh	r2, [r3, #0]
 800adc4:	e3fe      	b.n	800b5c4 <USB_EPStartXfer+0x16e2>
 800adc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adca:	085b      	lsrs	r3, r3, #1
 800adcc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800add0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add4:	f003 0301 	and.w	r3, r3, #1
 800add8:	2b00      	cmp	r3, #0
 800adda:	d004      	beq.n	800ade6 <USB_EPStartXfer+0xf04>
 800addc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ade0:	3301      	adds	r3, #1
 800ade2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ade6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adea:	881b      	ldrh	r3, [r3, #0]
 800adec:	b29a      	uxth	r2, r3
 800adee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	029b      	lsls	r3, r3, #10
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	4313      	orrs	r3, r2
 800adfa:	b29a      	uxth	r2, r3
 800adfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae00:	801a      	strh	r2, [r3, #0]
 800ae02:	e3df      	b.n	800b5c4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ae04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	78db      	ldrb	r3, [r3, #3]
 800ae10:	2b02      	cmp	r3, #2
 800ae12:	f040 8218 	bne.w	800b246 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ae16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	785b      	ldrb	r3, [r3, #1]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f040 809d 	bne.w	800af62 <USB_EPStartXfer+0x1080>
 800ae28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ae36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	461a      	mov	r2, r3
 800ae48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ae4c:	4413      	add	r3, r2
 800ae4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ae52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	00da      	lsls	r2, r3, #3
 800ae60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ae64:	4413      	add	r3, r2
 800ae66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ae6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ae72:	881b      	ldrh	r3, [r3, #0]
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ae80:	801a      	strh	r2, [r3, #0]
 800ae82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	2b3e      	cmp	r3, #62	; 0x3e
 800ae90:	d92b      	bls.n	800aeea <USB_EPStartXfer+0x1008>
 800ae92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	095b      	lsrs	r3, r3, #5
 800aea0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	691b      	ldr	r3, [r3, #16]
 800aeb0:	f003 031f 	and.w	r3, r3, #31
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d104      	bne.n	800aec2 <USB_EPStartXfer+0xfe0>
 800aeb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aebc:	3b01      	subs	r3, #1
 800aebe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aec2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aec6:	881b      	ldrh	r3, [r3, #0]
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aece:	b29b      	uxth	r3, r3
 800aed0:	029b      	lsls	r3, r3, #10
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	4313      	orrs	r3, r2
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aedc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aee6:	801a      	strh	r2, [r3, #0]
 800aee8:	e070      	b.n	800afcc <USB_EPStartXfer+0x10ea>
 800aeea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d10c      	bne.n	800af14 <USB_EPStartXfer+0x1032>
 800aefa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aefe:	881b      	ldrh	r3, [r3, #0]
 800af00:	b29b      	uxth	r3, r3
 800af02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af0a:	b29a      	uxth	r2, r3
 800af0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af10:	801a      	strh	r2, [r3, #0]
 800af12:	e05b      	b.n	800afcc <USB_EPStartXfer+0x10ea>
 800af14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	085b      	lsrs	r3, r3, #1
 800af22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	691b      	ldr	r3, [r3, #16]
 800af32:	f003 0301 	and.w	r3, r3, #1
 800af36:	2b00      	cmp	r3, #0
 800af38:	d004      	beq.n	800af44 <USB_EPStartXfer+0x1062>
 800af3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af3e:	3301      	adds	r3, #1
 800af40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af48:	881b      	ldrh	r3, [r3, #0]
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af50:	b29b      	uxth	r3, r3
 800af52:	029b      	lsls	r3, r3, #10
 800af54:	b29b      	uxth	r3, r3
 800af56:	4313      	orrs	r3, r2
 800af58:	b29a      	uxth	r2, r3
 800af5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af5e:	801a      	strh	r2, [r3, #0]
 800af60:	e034      	b.n	800afcc <USB_EPStartXfer+0x10ea>
 800af62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	785b      	ldrb	r3, [r3, #1]
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d12c      	bne.n	800afcc <USB_EPStartXfer+0x10ea>
 800af72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af8e:	b29b      	uxth	r3, r3
 800af90:	461a      	mov	r2, r3
 800af92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800af96:	4413      	add	r3, r2
 800af98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	00da      	lsls	r2, r3, #3
 800afaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800afae:	4413      	add	r3, r2
 800afb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800afb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800afb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	b29a      	uxth	r2, r3
 800afc6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800afca:	801a      	strh	r2, [r3, #0]
 800afcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800afda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	785b      	ldrb	r3, [r3, #1]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f040 809d 	bne.w	800b126 <USB_EPStartXfer+0x1244>
 800afec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aff0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800affa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800affe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b008:	b29b      	uxth	r3, r3
 800b00a:	461a      	mov	r2, r3
 800b00c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b010:	4413      	add	r3, r2
 800b012:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b01a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	00da      	lsls	r2, r3, #3
 800b024:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b028:	4413      	add	r3, r2
 800b02a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b02e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b032:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b036:	881b      	ldrh	r3, [r3, #0]
 800b038:	b29b      	uxth	r3, r3
 800b03a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b03e:	b29a      	uxth	r2, r3
 800b040:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b044:	801a      	strh	r2, [r3, #0]
 800b046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b04a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	2b3e      	cmp	r3, #62	; 0x3e
 800b054:	d92b      	bls.n	800b0ae <USB_EPStartXfer+0x11cc>
 800b056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b05a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	095b      	lsrs	r3, r3, #5
 800b064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b06c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	691b      	ldr	r3, [r3, #16]
 800b074:	f003 031f 	and.w	r3, r3, #31
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d104      	bne.n	800b086 <USB_EPStartXfer+0x11a4>
 800b07c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b080:	3b01      	subs	r3, #1
 800b082:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b086:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b08a:	881b      	ldrh	r3, [r3, #0]
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b092:	b29b      	uxth	r3, r3
 800b094:	029b      	lsls	r3, r3, #10
 800b096:	b29b      	uxth	r3, r3
 800b098:	4313      	orrs	r3, r2
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0a4:	b29a      	uxth	r2, r3
 800b0a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0aa:	801a      	strh	r2, [r3, #0]
 800b0ac:	e069      	b.n	800b182 <USB_EPStartXfer+0x12a0>
 800b0ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d10c      	bne.n	800b0d8 <USB_EPStartXfer+0x11f6>
 800b0be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0c2:	881b      	ldrh	r3, [r3, #0]
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0ce:	b29a      	uxth	r2, r3
 800b0d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0d4:	801a      	strh	r2, [r3, #0]
 800b0d6:	e054      	b.n	800b182 <USB_EPStartXfer+0x12a0>
 800b0d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	691b      	ldr	r3, [r3, #16]
 800b0e4:	085b      	lsrs	r3, r3, #1
 800b0e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b0ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	691b      	ldr	r3, [r3, #16]
 800b0f6:	f003 0301 	and.w	r3, r3, #1
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d004      	beq.n	800b108 <USB_EPStartXfer+0x1226>
 800b0fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b102:	3301      	adds	r3, #1
 800b104:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b108:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b10c:	881b      	ldrh	r3, [r3, #0]
 800b10e:	b29a      	uxth	r2, r3
 800b110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b114:	b29b      	uxth	r3, r3
 800b116:	029b      	lsls	r3, r3, #10
 800b118:	b29b      	uxth	r3, r3
 800b11a:	4313      	orrs	r3, r2
 800b11c:	b29a      	uxth	r2, r3
 800b11e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b122:	801a      	strh	r2, [r3, #0]
 800b124:	e02d      	b.n	800b182 <USB_EPStartXfer+0x12a0>
 800b126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b12a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	785b      	ldrb	r3, [r3, #1]
 800b132:	2b01      	cmp	r3, #1
 800b134:	d125      	bne.n	800b182 <USB_EPStartXfer+0x12a0>
 800b136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b13a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b144:	b29b      	uxth	r3, r3
 800b146:	461a      	mov	r2, r3
 800b148:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b14c:	4413      	add	r3, r2
 800b14e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	00da      	lsls	r2, r3, #3
 800b160:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b164:	4413      	add	r3, r2
 800b166:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b16a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b16e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	b29a      	uxth	r2, r3
 800b17c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b180:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	69db      	ldr	r3, [r3, #28]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	f000 8218 	beq.w	800b5c4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	4413      	add	r3, r2
 800b1ae:	881b      	ldrh	r3, [r3, #0]
 800b1b0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b1b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b1b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d005      	beq.n	800b1cc <USB_EPStartXfer+0x12ea>
 800b1c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b1c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d10d      	bne.n	800b1e8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b1cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b1d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f040 81f5 	bne.w	800b5c4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b1da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b1de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	f040 81ee 	bne.w	800b5c4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b1e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	4413      	add	r3, r2
 800b202:	881b      	ldrh	r3, [r3, #0]
 800b204:	b29b      	uxth	r3, r3
 800b206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b20a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b20e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b216:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	441a      	add	r2, r3
 800b22c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b23c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b240:	b29b      	uxth	r3, r3
 800b242:	8013      	strh	r3, [r2, #0]
 800b244:	e1be      	b.n	800b5c4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b24a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	78db      	ldrb	r3, [r3, #3]
 800b252:	2b01      	cmp	r3, #1
 800b254:	f040 81b4 	bne.w	800b5c0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b25c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	699a      	ldr	r2, [r3, #24]
 800b264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	429a      	cmp	r2, r3
 800b272:	d917      	bls.n	800b2a4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	691b      	ldr	r3, [r3, #16]
 800b280:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	699a      	ldr	r2, [r3, #24]
 800b290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b294:	1ad2      	subs	r2, r2, r3
 800b296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b29a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	619a      	str	r2, [r3, #24]
 800b2a2:	e00e      	b.n	800b2c2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b2a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	699b      	ldr	r3, [r3, #24]
 800b2b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b2b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b2c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	785b      	ldrb	r3, [r3, #1]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	f040 8085 	bne.w	800b3de <USB_EPStartXfer+0x14fc>
 800b2d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b2e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b2f8:	4413      	add	r3, r2
 800b2fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b2fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	00da      	lsls	r2, r3, #3
 800b30c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b310:	4413      	add	r3, r2
 800b312:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b316:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b31a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b31e:	881b      	ldrh	r3, [r3, #0]
 800b320:	b29b      	uxth	r3, r3
 800b322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b326:	b29a      	uxth	r2, r3
 800b328:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b32c:	801a      	strh	r2, [r3, #0]
 800b32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b332:	2b3e      	cmp	r3, #62	; 0x3e
 800b334:	d923      	bls.n	800b37e <USB_EPStartXfer+0x149c>
 800b336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33a:	095b      	lsrs	r3, r3, #5
 800b33c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b344:	f003 031f 	and.w	r3, r3, #31
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d104      	bne.n	800b356 <USB_EPStartXfer+0x1474>
 800b34c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b350:	3b01      	subs	r3, #1
 800b352:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b356:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b35a:	881b      	ldrh	r3, [r3, #0]
 800b35c:	b29a      	uxth	r2, r3
 800b35e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b362:	b29b      	uxth	r3, r3
 800b364:	029b      	lsls	r3, r3, #10
 800b366:	b29b      	uxth	r3, r3
 800b368:	4313      	orrs	r3, r2
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b374:	b29a      	uxth	r2, r3
 800b376:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b37a:	801a      	strh	r2, [r3, #0]
 800b37c:	e060      	b.n	800b440 <USB_EPStartXfer+0x155e>
 800b37e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b382:	2b00      	cmp	r3, #0
 800b384:	d10c      	bne.n	800b3a0 <USB_EPStartXfer+0x14be>
 800b386:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b38a:	881b      	ldrh	r3, [r3, #0]
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b396:	b29a      	uxth	r2, r3
 800b398:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b39c:	801a      	strh	r2, [r3, #0]
 800b39e:	e04f      	b.n	800b440 <USB_EPStartXfer+0x155e>
 800b3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a4:	085b      	lsrs	r3, r3, #1
 800b3a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b3aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ae:	f003 0301 	and.w	r3, r3, #1
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d004      	beq.n	800b3c0 <USB_EPStartXfer+0x14de>
 800b3b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b3c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3c4:	881b      	ldrh	r3, [r3, #0]
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	029b      	lsls	r3, r3, #10
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3da:	801a      	strh	r2, [r3, #0]
 800b3dc:	e030      	b.n	800b440 <USB_EPStartXfer+0x155e>
 800b3de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	785b      	ldrb	r3, [r3, #1]
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d128      	bne.n	800b440 <USB_EPStartXfer+0x155e>
 800b3ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b3fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b400:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	461a      	mov	r2, r3
 800b40e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b412:	4413      	add	r3, r2
 800b414:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b41c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	00da      	lsls	r2, r3, #3
 800b426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b42a:	4413      	add	r3, r2
 800b42c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b430:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b438:	b29a      	uxth	r2, r3
 800b43a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b43e:	801a      	strh	r2, [r3, #0]
 800b440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b444:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b44e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	785b      	ldrb	r3, [r3, #1]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f040 8085 	bne.w	800b56a <USB_EPStartXfer+0x1688>
 800b460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b464:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b46e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b472:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	461a      	mov	r2, r3
 800b480:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b484:	4413      	add	r3, r2
 800b486:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b48a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b48e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	00da      	lsls	r2, r3, #3
 800b498:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b49c:	4413      	add	r3, r2
 800b49e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b4a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b4aa:	881b      	ldrh	r3, [r3, #0]
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4b2:	b29a      	uxth	r2, r3
 800b4b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b4b8:	801a      	strh	r2, [r3, #0]
 800b4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4be:	2b3e      	cmp	r3, #62	; 0x3e
 800b4c0:	d923      	bls.n	800b50a <USB_EPStartXfer+0x1628>
 800b4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c6:	095b      	lsrs	r3, r3, #5
 800b4c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d0:	f003 031f 	and.w	r3, r3, #31
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d104      	bne.n	800b4e2 <USB_EPStartXfer+0x1600>
 800b4d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b4e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b4e6:	881b      	ldrh	r3, [r3, #0]
 800b4e8:	b29a      	uxth	r2, r3
 800b4ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	029b      	lsls	r3, r3, #10
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b500:	b29a      	uxth	r2, r3
 800b502:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b506:	801a      	strh	r2, [r3, #0]
 800b508:	e05c      	b.n	800b5c4 <USB_EPStartXfer+0x16e2>
 800b50a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d10c      	bne.n	800b52c <USB_EPStartXfer+0x164a>
 800b512:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b516:	881b      	ldrh	r3, [r3, #0]
 800b518:	b29b      	uxth	r3, r3
 800b51a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b51e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b522:	b29a      	uxth	r2, r3
 800b524:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b528:	801a      	strh	r2, [r3, #0]
 800b52a:	e04b      	b.n	800b5c4 <USB_EPStartXfer+0x16e2>
 800b52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b530:	085b      	lsrs	r3, r3, #1
 800b532:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b53a:	f003 0301 	and.w	r3, r3, #1
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d004      	beq.n	800b54c <USB_EPStartXfer+0x166a>
 800b542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b546:	3301      	adds	r3, #1
 800b548:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b54c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b550:	881b      	ldrh	r3, [r3, #0]
 800b552:	b29a      	uxth	r2, r3
 800b554:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b558:	b29b      	uxth	r3, r3
 800b55a:	029b      	lsls	r3, r3, #10
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	4313      	orrs	r3, r2
 800b560:	b29a      	uxth	r2, r3
 800b562:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b566:	801a      	strh	r2, [r3, #0]
 800b568:	e02c      	b.n	800b5c4 <USB_EPStartXfer+0x16e2>
 800b56a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b56e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	785b      	ldrb	r3, [r3, #1]
 800b576:	2b01      	cmp	r3, #1
 800b578:	d124      	bne.n	800b5c4 <USB_EPStartXfer+0x16e2>
 800b57a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b57e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b588:	b29b      	uxth	r3, r3
 800b58a:	461a      	mov	r2, r3
 800b58c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b590:	4413      	add	r3, r2
 800b592:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	00da      	lsls	r2, r3, #3
 800b5a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b5a8:	4413      	add	r3, r2
 800b5aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b5ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b5b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5b6:	b29a      	uxth	r2, r3
 800b5b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b5bc:	801a      	strh	r2, [r3, #0]
 800b5be:	e001      	b.n	800b5c4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	e03a      	b.n	800b63a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b5c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5cc:	681a      	ldr	r2, [r3, #0]
 800b5ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	4413      	add	r3, r2
 800b5de:	881b      	ldrh	r3, [r3, #0]
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b5e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5ea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b5ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b5f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b5f6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b5fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b5fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b602:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b60a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	441a      	add	r2, r3
 800b620:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b62c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b634:	b29b      	uxth	r3, r3
 800b636:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b644:	b480      	push	{r7}
 800b646:	b085      	sub	sp, #20
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	785b      	ldrb	r3, [r3, #1]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d020      	beq.n	800b698 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	4413      	add	r3, r2
 800b660:	881b      	ldrh	r3, [r3, #0]
 800b662:	b29b      	uxth	r3, r3
 800b664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b66c:	81bb      	strh	r3, [r7, #12]
 800b66e:	89bb      	ldrh	r3, [r7, #12]
 800b670:	f083 0310 	eor.w	r3, r3, #16
 800b674:	81bb      	strh	r3, [r7, #12]
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	441a      	add	r2, r3
 800b680:	89bb      	ldrh	r3, [r7, #12]
 800b682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b68a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b68e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b692:	b29b      	uxth	r3, r3
 800b694:	8013      	strh	r3, [r2, #0]
 800b696:	e01f      	b.n	800b6d8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	009b      	lsls	r3, r3, #2
 800b6a0:	4413      	add	r3, r2
 800b6a2:	881b      	ldrh	r3, [r3, #0]
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6ae:	81fb      	strh	r3, [r7, #14]
 800b6b0:	89fb      	ldrh	r3, [r7, #14]
 800b6b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b6b6:	81fb      	strh	r3, [r7, #14]
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	441a      	add	r2, r3
 800b6c2:	89fb      	ldrh	r3, [r7, #14]
 800b6c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b6d8:	2300      	movs	r3, #0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b087      	sub	sp, #28
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
 800b6ee:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	7b1b      	ldrb	r3, [r3, #12]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f040 809d 	bne.w	800b834 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	785b      	ldrb	r3, [r3, #1]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d04c      	beq.n	800b79c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	4413      	add	r3, r2
 800b70c:	881b      	ldrh	r3, [r3, #0]
 800b70e:	823b      	strh	r3, [r7, #16]
 800b710:	8a3b      	ldrh	r3, [r7, #16]
 800b712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b716:	2b00      	cmp	r3, #0
 800b718:	d01b      	beq.n	800b752 <USB_EPClearStall+0x6c>
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	4413      	add	r3, r2
 800b724:	881b      	ldrh	r3, [r3, #0]
 800b726:	b29b      	uxth	r3, r3
 800b728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b72c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b730:	81fb      	strh	r3, [r7, #14]
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	441a      	add	r2, r3
 800b73c:	89fb      	ldrh	r3, [r7, #14]
 800b73e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b74a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b74e:	b29b      	uxth	r3, r3
 800b750:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	78db      	ldrb	r3, [r3, #3]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d06c      	beq.n	800b834 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	4413      	add	r3, r2
 800b764:	881b      	ldrh	r3, [r3, #0]
 800b766:	b29b      	uxth	r3, r3
 800b768:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b76c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b770:	81bb      	strh	r3, [r7, #12]
 800b772:	89bb      	ldrh	r3, [r7, #12]
 800b774:	f083 0320 	eor.w	r3, r3, #32
 800b778:	81bb      	strh	r3, [r7, #12]
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	441a      	add	r2, r3
 800b784:	89bb      	ldrh	r3, [r7, #12]
 800b786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b78a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b78e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b796:	b29b      	uxth	r3, r3
 800b798:	8013      	strh	r3, [r2, #0]
 800b79a:	e04b      	b.n	800b834 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	4413      	add	r3, r2
 800b7a6:	881b      	ldrh	r3, [r3, #0]
 800b7a8:	82fb      	strh	r3, [r7, #22]
 800b7aa:	8afb      	ldrh	r3, [r7, #22]
 800b7ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d01b      	beq.n	800b7ec <USB_EPClearStall+0x106>
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	4413      	add	r3, r2
 800b7be:	881b      	ldrh	r3, [r3, #0]
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7ca:	82bb      	strh	r3, [r7, #20]
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	441a      	add	r2, r3
 800b7d6:	8abb      	ldrh	r3, [r7, #20]
 800b7d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b7e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	4413      	add	r3, r2
 800b7f6:	881b      	ldrh	r3, [r3, #0]
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b802:	827b      	strh	r3, [r7, #18]
 800b804:	8a7b      	ldrh	r3, [r7, #18]
 800b806:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b80a:	827b      	strh	r3, [r7, #18]
 800b80c:	8a7b      	ldrh	r3, [r7, #18]
 800b80e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b812:	827b      	strh	r3, [r7, #18]
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	441a      	add	r2, r3
 800b81e:	8a7b      	ldrh	r3, [r7, #18]
 800b820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b82c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b830:	b29b      	uxth	r3, r3
 800b832:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	371c      	adds	r7, #28
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b842:	b480      	push	{r7}
 800b844:	b083      	sub	sp, #12
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
 800b84a:	460b      	mov	r3, r1
 800b84c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b84e:	78fb      	ldrb	r3, [r7, #3]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d103      	bne.n	800b85c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2280      	movs	r2, #128	; 0x80
 800b858:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	370c      	adds	r7, #12
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b86a:	b480      	push	{r7}
 800b86c:	b083      	sub	sp, #12
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b878:	b29b      	uxth	r3, r3
 800b87a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b87e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b882:	b29a      	uxth	r2, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3714      	adds	r7, #20
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b08b      	sub	sp, #44	; 0x2c
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	4611      	mov	r1, r2
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	80fb      	strh	r3, [r7, #6]
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b8ce:	88bb      	ldrh	r3, [r7, #4]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	085b      	lsrs	r3, r3, #1
 800b8d4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b8de:	88fa      	ldrh	r2, [r7, #6]
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	4413      	add	r3, r2
 800b8e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8e8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b8ea:	69bb      	ldr	r3, [r7, #24]
 800b8ec:	627b      	str	r3, [r7, #36]	; 0x24
 800b8ee:	e01b      	b.n	800b928 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	021b      	lsls	r3, r3, #8
 800b8fe:	b21a      	sxth	r2, r3
 800b900:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b904:	4313      	orrs	r3, r2
 800b906:	b21b      	sxth	r3, r3
 800b908:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b90a:	6a3b      	ldr	r3, [r7, #32]
 800b90c:	8a7a      	ldrh	r2, [r7, #18]
 800b90e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b910:	6a3b      	ldr	r3, [r7, #32]
 800b912:	3302      	adds	r3, #2
 800b914:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	3301      	adds	r3, #1
 800b91a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	3301      	adds	r3, #1
 800b920:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b924:	3b01      	subs	r3, #1
 800b926:	627b      	str	r3, [r7, #36]	; 0x24
 800b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1e0      	bne.n	800b8f0 <USB_WritePMA+0x38>
  }
}
 800b92e:	bf00      	nop
 800b930:	bf00      	nop
 800b932:	372c      	adds	r7, #44	; 0x2c
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr

0800b93c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b08b      	sub	sp, #44	; 0x2c
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	4611      	mov	r1, r2
 800b948:	461a      	mov	r2, r3
 800b94a:	460b      	mov	r3, r1
 800b94c:	80fb      	strh	r3, [r7, #6]
 800b94e:	4613      	mov	r3, r2
 800b950:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b952:	88bb      	ldrh	r3, [r7, #4]
 800b954:	085b      	lsrs	r3, r3, #1
 800b956:	b29b      	uxth	r3, r3
 800b958:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b962:	88fa      	ldrh	r2, [r7, #6]
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	4413      	add	r3, r2
 800b968:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b96c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	627b      	str	r3, [r7, #36]	; 0x24
 800b972:	e018      	b.n	800b9a6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b974:	6a3b      	ldr	r3, [r7, #32]
 800b976:	881b      	ldrh	r3, [r3, #0]
 800b978:	b29b      	uxth	r3, r3
 800b97a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b97c:	6a3b      	ldr	r3, [r7, #32]
 800b97e:	3302      	adds	r3, #2
 800b980:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	b2da      	uxtb	r2, r3
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	3301      	adds	r3, #1
 800b98e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	0a1b      	lsrs	r3, r3, #8
 800b994:	b2da      	uxtb	r2, r3
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b99a:	69fb      	ldr	r3, [r7, #28]
 800b99c:	3301      	adds	r3, #1
 800b99e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	3b01      	subs	r3, #1
 800b9a4:	627b      	str	r3, [r7, #36]	; 0x24
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1e3      	bne.n	800b974 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b9ac:	88bb      	ldrh	r3, [r7, #4]
 800b9ae:	f003 0301 	and.w	r3, r3, #1
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d007      	beq.n	800b9c8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b9b8:	6a3b      	ldr	r3, [r7, #32]
 800b9ba:	881b      	ldrh	r3, [r3, #0]
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	b2da      	uxtb	r2, r3
 800b9c4:	69fb      	ldr	r3, [r7, #28]
 800b9c6:	701a      	strb	r2, [r3, #0]
  }
}
 800b9c8:	bf00      	nop
 800b9ca:	372c      	adds	r7, #44	; 0x2c
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	460b      	mov	r3, r1
 800b9de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b9e0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b9e4:	f005 fe02 	bl	80115ec <USBD_static_malloc>
 800b9e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d105      	bne.n	800b9fc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b9f8:	2302      	movs	r3, #2
 800b9fa:	e066      	b.n	800baca <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	7c1b      	ldrb	r3, [r3, #16]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d119      	bne.n	800ba40 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ba0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba10:	2202      	movs	r2, #2
 800ba12:	2181      	movs	r1, #129	; 0x81
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f005 fc90 	bl	801133a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ba20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba24:	2202      	movs	r2, #2
 800ba26:	2101      	movs	r1, #1
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f005 fc86 	bl	801133a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2201      	movs	r2, #1
 800ba32:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2210      	movs	r2, #16
 800ba3a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ba3e:	e016      	b.n	800ba6e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ba40:	2340      	movs	r3, #64	; 0x40
 800ba42:	2202      	movs	r2, #2
 800ba44:	2181      	movs	r1, #129	; 0x81
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f005 fc77 	bl	801133a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2201      	movs	r2, #1
 800ba50:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ba52:	2340      	movs	r3, #64	; 0x40
 800ba54:	2202      	movs	r2, #2
 800ba56:	2101      	movs	r1, #1
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f005 fc6e 	bl	801133a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2201      	movs	r2, #1
 800ba62:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2210      	movs	r2, #16
 800ba6a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ba6e:	2308      	movs	r3, #8
 800ba70:	2203      	movs	r2, #3
 800ba72:	2182      	movs	r1, #130	; 0x82
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f005 fc60 	bl	801133a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	7c1b      	ldrb	r3, [r3, #16]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d109      	bne.n	800bab8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800baaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800baae:	2101      	movs	r1, #1
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f005 fd31 	bl	8011518 <USBD_LL_PrepareReceive>
 800bab6:	e007      	b.n	800bac8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800babe:	2340      	movs	r3, #64	; 0x40
 800bac0:	2101      	movs	r1, #1
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f005 fd28 	bl	8011518 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bac8:	2300      	movs	r3, #0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b082      	sub	sp, #8
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
 800bada:	460b      	mov	r3, r1
 800badc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bade:	2181      	movs	r1, #129	; 0x81
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f005 fc50 	bl	8011386 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800baec:	2101      	movs	r1, #1
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f005 fc49 	bl	8011386 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bafc:	2182      	movs	r1, #130	; 0x82
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f005 fc41 	bl	8011386 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00e      	beq.n	800bb3c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f005 fd6a 	bl	8011608 <USBD_static_free>
    pdev->pClassData = NULL;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2200      	movs	r2, #0
 800bb38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bb3c:	2300      	movs	r3, #0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
	...

0800bb48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b086      	sub	sp, #24
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb58:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb62:	2300      	movs	r3, #0
 800bb64:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d101      	bne.n	800bb70 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bb6c:	2303      	movs	r3, #3
 800bb6e:	e0af      	b.n	800bcd0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d03f      	beq.n	800bbfc <USBD_CDC_Setup+0xb4>
 800bb7c:	2b20      	cmp	r3, #32
 800bb7e:	f040 809f 	bne.w	800bcc0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	88db      	ldrh	r3, [r3, #6]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d02e      	beq.n	800bbe8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	b25b      	sxtb	r3, r3
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	da16      	bge.n	800bbc2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	683a      	ldr	r2, [r7, #0]
 800bb9e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bba0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bba2:	683a      	ldr	r2, [r7, #0]
 800bba4:	88d2      	ldrh	r2, [r2, #6]
 800bba6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	88db      	ldrh	r3, [r3, #6]
 800bbac:	2b07      	cmp	r3, #7
 800bbae:	bf28      	it	cs
 800bbb0:	2307      	movcs	r3, #7
 800bbb2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	89fa      	ldrh	r2, [r7, #14]
 800bbb8:	4619      	mov	r1, r3
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f001 facf 	bl	800d15e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800bbc0:	e085      	b.n	800bcce <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	785a      	ldrb	r2, [r3, #1]
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	88db      	ldrh	r3, [r3, #6]
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bbd8:	6939      	ldr	r1, [r7, #16]
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	88db      	ldrh	r3, [r3, #6]
 800bbde:	461a      	mov	r2, r3
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f001 fae8 	bl	800d1b6 <USBD_CtlPrepareRx>
      break;
 800bbe6:	e072      	b.n	800bcce <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	683a      	ldr	r2, [r7, #0]
 800bbf2:	7850      	ldrb	r0, [r2, #1]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	6839      	ldr	r1, [r7, #0]
 800bbf8:	4798      	blx	r3
      break;
 800bbfa:	e068      	b.n	800bcce <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	785b      	ldrb	r3, [r3, #1]
 800bc00:	2b0b      	cmp	r3, #11
 800bc02:	d852      	bhi.n	800bcaa <USBD_CDC_Setup+0x162>
 800bc04:	a201      	add	r2, pc, #4	; (adr r2, 800bc0c <USBD_CDC_Setup+0xc4>)
 800bc06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc0a:	bf00      	nop
 800bc0c:	0800bc3d 	.word	0x0800bc3d
 800bc10:	0800bcb9 	.word	0x0800bcb9
 800bc14:	0800bcab 	.word	0x0800bcab
 800bc18:	0800bcab 	.word	0x0800bcab
 800bc1c:	0800bcab 	.word	0x0800bcab
 800bc20:	0800bcab 	.word	0x0800bcab
 800bc24:	0800bcab 	.word	0x0800bcab
 800bc28:	0800bcab 	.word	0x0800bcab
 800bc2c:	0800bcab 	.word	0x0800bcab
 800bc30:	0800bcab 	.word	0x0800bcab
 800bc34:	0800bc67 	.word	0x0800bc67
 800bc38:	0800bc91 	.word	0x0800bc91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	2b03      	cmp	r3, #3
 800bc46:	d107      	bne.n	800bc58 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bc48:	f107 030a 	add.w	r3, r7, #10
 800bc4c:	2202      	movs	r2, #2
 800bc4e:	4619      	mov	r1, r3
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f001 fa84 	bl	800d15e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc56:	e032      	b.n	800bcbe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bc58:	6839      	ldr	r1, [r7, #0]
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f001 fa0e 	bl	800d07c <USBD_CtlError>
            ret = USBD_FAIL;
 800bc60:	2303      	movs	r3, #3
 800bc62:	75fb      	strb	r3, [r7, #23]
          break;
 800bc64:	e02b      	b.n	800bcbe <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	2b03      	cmp	r3, #3
 800bc70:	d107      	bne.n	800bc82 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bc72:	f107 030d 	add.w	r3, r7, #13
 800bc76:	2201      	movs	r2, #1
 800bc78:	4619      	mov	r1, r3
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f001 fa6f 	bl	800d15e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc80:	e01d      	b.n	800bcbe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bc82:	6839      	ldr	r1, [r7, #0]
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f001 f9f9 	bl	800d07c <USBD_CtlError>
            ret = USBD_FAIL;
 800bc8a:	2303      	movs	r3, #3
 800bc8c:	75fb      	strb	r3, [r7, #23]
          break;
 800bc8e:	e016      	b.n	800bcbe <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	2b03      	cmp	r3, #3
 800bc9a:	d00f      	beq.n	800bcbc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800bc9c:	6839      	ldr	r1, [r7, #0]
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f001 f9ec 	bl	800d07c <USBD_CtlError>
            ret = USBD_FAIL;
 800bca4:	2303      	movs	r3, #3
 800bca6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bca8:	e008      	b.n	800bcbc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bcaa:	6839      	ldr	r1, [r7, #0]
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f001 f9e5 	bl	800d07c <USBD_CtlError>
          ret = USBD_FAIL;
 800bcb2:	2303      	movs	r3, #3
 800bcb4:	75fb      	strb	r3, [r7, #23]
          break;
 800bcb6:	e002      	b.n	800bcbe <USBD_CDC_Setup+0x176>
          break;
 800bcb8:	bf00      	nop
 800bcba:	e008      	b.n	800bcce <USBD_CDC_Setup+0x186>
          break;
 800bcbc:	bf00      	nop
      }
      break;
 800bcbe:	e006      	b.n	800bcce <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800bcc0:	6839      	ldr	r1, [r7, #0]
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f001 f9da 	bl	800d07c <USBD_CtlError>
      ret = USBD_FAIL;
 800bcc8:	2303      	movs	r3, #3
 800bcca:	75fb      	strb	r3, [r7, #23]
      break;
 800bccc:	bf00      	nop
  }

  return (uint8_t)ret;
 800bcce:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3718      	adds	r7, #24
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	460b      	mov	r3, r1
 800bce2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bcea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d101      	bne.n	800bcfa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	e04f      	b.n	800bd9a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bd02:	78fa      	ldrb	r2, [r7, #3]
 800bd04:	6879      	ldr	r1, [r7, #4]
 800bd06:	4613      	mov	r3, r2
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	4413      	add	r3, r2
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	440b      	add	r3, r1
 800bd10:	3318      	adds	r3, #24
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d029      	beq.n	800bd6c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bd18:	78fa      	ldrb	r2, [r7, #3]
 800bd1a:	6879      	ldr	r1, [r7, #4]
 800bd1c:	4613      	mov	r3, r2
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	4413      	add	r3, r2
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	440b      	add	r3, r1
 800bd26:	3318      	adds	r3, #24
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	78f9      	ldrb	r1, [r7, #3]
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	460b      	mov	r3, r1
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	440b      	add	r3, r1
 800bd34:	00db      	lsls	r3, r3, #3
 800bd36:	4403      	add	r3, r0
 800bd38:	3320      	adds	r3, #32
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	fbb2 f1f3 	udiv	r1, r2, r3
 800bd40:	fb01 f303 	mul.w	r3, r1, r3
 800bd44:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d110      	bne.n	800bd6c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bd4a:	78fa      	ldrb	r2, [r7, #3]
 800bd4c:	6879      	ldr	r1, [r7, #4]
 800bd4e:	4613      	mov	r3, r2
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	4413      	add	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	440b      	add	r3, r1
 800bd58:	3318      	adds	r3, #24
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bd5e:	78f9      	ldrb	r1, [r7, #3]
 800bd60:	2300      	movs	r3, #0
 800bd62:	2200      	movs	r2, #0
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f005 fbb6 	bl	80114d6 <USBD_LL_Transmit>
 800bd6a:	e015      	b.n	800bd98 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd7a:	691b      	ldr	r3, [r3, #16]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d00b      	beq.n	800bd98 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd86:	691b      	ldr	r3, [r3, #16]
 800bd88:	68ba      	ldr	r2, [r7, #8]
 800bd8a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bd8e:	68ba      	ldr	r2, [r7, #8]
 800bd90:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bd94:	78fa      	ldrb	r2, [r7, #3]
 800bd96:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bd98:	2300      	movs	r3, #0
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b084      	sub	sp, #16
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
 800bdaa:	460b      	mov	r3, r1
 800bdac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdb4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d101      	bne.n	800bdc4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bdc0:	2303      	movs	r3, #3
 800bdc2:	e015      	b.n	800bdf0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bdc4:	78fb      	ldrb	r3, [r7, #3]
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f005 fbc6 	bl	801155a <USBD_LL_GetRxDataSize>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bdea:	4611      	mov	r1, r2
 800bdec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bdee:	2300      	movs	r3, #0
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3710      	adds	r7, #16
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be06:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d101      	bne.n	800be12 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800be0e:	2303      	movs	r3, #3
 800be10:	e01b      	b.n	800be4a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d015      	beq.n	800be48 <USBD_CDC_EP0_RxReady+0x50>
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800be22:	2bff      	cmp	r3, #255	; 0xff
 800be24:	d010      	beq.n	800be48 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800be34:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800be36:	68fa      	ldr	r2, [r7, #12]
 800be38:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800be3c:	b292      	uxth	r2, r2
 800be3e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	22ff      	movs	r2, #255	; 0xff
 800be44:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800be48:	2300      	movs	r3, #0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
	...

0800be54 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2243      	movs	r2, #67	; 0x43
 800be60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800be62:	4b03      	ldr	r3, [pc, #12]	; (800be70 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800be64:	4618      	mov	r0, r3
 800be66:	370c      	adds	r7, #12
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr
 800be70:	20000094 	.word	0x20000094

0800be74 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2243      	movs	r2, #67	; 0x43
 800be80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800be82:	4b03      	ldr	r3, [pc, #12]	; (800be90 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800be84:	4618      	mov	r0, r3
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr
 800be90:	20000050 	.word	0x20000050

0800be94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2243      	movs	r2, #67	; 0x43
 800bea0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bea2:	4b03      	ldr	r3, [pc, #12]	; (800beb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr
 800beb0:	200000d8 	.word	0x200000d8

0800beb4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	220a      	movs	r2, #10
 800bec0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bec2:	4b03      	ldr	r3, [pc, #12]	; (800bed0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	370c      	adds	r7, #12
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr
 800bed0:	2000000c 	.word	0x2000000c

0800bed4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bee4:	2303      	movs	r3, #3
 800bee6:	e004      	b.n	800bef2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bef0:	2300      	movs	r3, #0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	370c      	adds	r7, #12
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr

0800befe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800befe:	b480      	push	{r7}
 800bf00:	b087      	sub	sp, #28
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	60f8      	str	r0, [r7, #12]
 800bf06:	60b9      	str	r1, [r7, #8]
 800bf08:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf10:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d101      	bne.n	800bf1c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	e008      	b.n	800bf2e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bf2c:	2300      	movs	r3, #0
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	371c      	adds	r7, #28
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr

0800bf3a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bf3a:	b480      	push	{r7}
 800bf3c:	b085      	sub	sp, #20
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
 800bf42:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf4a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d101      	bne.n	800bf56 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800bf52:	2303      	movs	r3, #3
 800bf54:	e004      	b.n	800bf60 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	683a      	ldr	r2, [r7, #0]
 800bf5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3714      	adds	r7, #20
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf7a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d101      	bne.n	800bf8e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bf8a:	2303      	movs	r3, #3
 800bf8c:	e01a      	b.n	800bfc4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d114      	bne.n	800bfc2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bfb6:	2181      	movs	r1, #129	; 0x81
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f005 fa8c 	bl	80114d6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d101      	bne.n	800bfea <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bfe6:	2303      	movs	r3, #3
 800bfe8:	e016      	b.n	800c018 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	7c1b      	ldrb	r3, [r3, #16]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d109      	bne.n	800c006 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bffc:	2101      	movs	r1, #1
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f005 fa8a 	bl	8011518 <USBD_LL_PrepareReceive>
 800c004:	e007      	b.n	800c016 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c00c:	2340      	movs	r3, #64	; 0x40
 800c00e:	2101      	movs	r1, #1
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f005 fa81 	bl	8011518 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c016:	2300      	movs	r3, #0
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3710      	adds	r7, #16
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b086      	sub	sp, #24
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	4613      	mov	r3, r2
 800c02c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d101      	bne.n	800c038 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c034:	2303      	movs	r3, #3
 800c036:	e01f      	b.n	800c078 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2200      	movs	r2, #0
 800c03c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2200      	movs	r2, #0
 800c044:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2200      	movs	r2, #0
 800c04c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d003      	beq.n	800c05e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	68ba      	ldr	r2, [r7, #8]
 800c05a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2201      	movs	r2, #1
 800c062:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	79fa      	ldrb	r2, [r7, #7]
 800c06a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	f005 f8e9 	bl	8011244 <USBD_LL_Init>
 800c072:	4603      	mov	r3, r0
 800c074:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c076:	7dfb      	ldrb	r3, [r7, #23]
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3718      	adds	r7, #24
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c08a:	2300      	movs	r3, #0
 800c08c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d101      	bne.n	800c098 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c094:	2303      	movs	r3, #3
 800c096:	e016      	b.n	800c0c6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	683a      	ldr	r2, [r7, #0]
 800c09c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00b      	beq.n	800c0c4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b4:	f107 020e 	add.w	r2, r7, #14
 800c0b8:	4610      	mov	r0, r2
 800c0ba:	4798      	blx	r3
 800c0bc:	4602      	mov	r2, r0
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c0c4:	2300      	movs	r3, #0
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b082      	sub	sp, #8
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f005 f914 	bl	8011304 <USBD_LL_Start>
 800c0dc:	4603      	mov	r3, r0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c0e6:	b480      	push	{r7}
 800c0e8:	b083      	sub	sp, #12
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0ee:	2300      	movs	r3, #0
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	370c      	adds	r7, #12
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	460b      	mov	r3, r1
 800c106:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c108:	2303      	movs	r3, #3
 800c10a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c112:	2b00      	cmp	r3, #0
 800c114:	d009      	beq.n	800c12a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	78fa      	ldrb	r2, [r7, #3]
 800c120:	4611      	mov	r1, r2
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	4798      	blx	r3
 800c126:	4603      	mov	r3, r0
 800c128:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3710      	adds	r7, #16
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	460b      	mov	r3, r1
 800c13e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c146:	2b00      	cmp	r3, #0
 800c148:	d007      	beq.n	800c15a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	78fa      	ldrb	r2, [r7, #3]
 800c154:	4611      	mov	r1, r2
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	4798      	blx	r3
  }

  return USBD_OK;
 800c15a:	2300      	movs	r3, #0
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3708      	adds	r7, #8
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c174:	6839      	ldr	r1, [r7, #0]
 800c176:	4618      	mov	r0, r3
 800c178:	f000 ff46 	bl	800d008 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2201      	movs	r2, #1
 800c180:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c18a:	461a      	mov	r2, r3
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c198:	f003 031f 	and.w	r3, r3, #31
 800c19c:	2b02      	cmp	r3, #2
 800c19e:	d01a      	beq.n	800c1d6 <USBD_LL_SetupStage+0x72>
 800c1a0:	2b02      	cmp	r3, #2
 800c1a2:	d822      	bhi.n	800c1ea <USBD_LL_SetupStage+0x86>
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d002      	beq.n	800c1ae <USBD_LL_SetupStage+0x4a>
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d00a      	beq.n	800c1c2 <USBD_LL_SetupStage+0x5e>
 800c1ac:	e01d      	b.n	800c1ea <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 f9ee 	bl	800c598 <USBD_StdDevReq>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	73fb      	strb	r3, [r7, #15]
      break;
 800c1c0:	e020      	b.n	800c204 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 fa52 	bl	800c674 <USBD_StdItfReq>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	73fb      	strb	r3, [r7, #15]
      break;
 800c1d4:	e016      	b.n	800c204 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c1dc:	4619      	mov	r1, r3
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 fa91 	bl	800c706 <USBD_StdEPReq>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	73fb      	strb	r3, [r7, #15]
      break;
 800c1e8:	e00c      	b.n	800c204 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c1f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f005 f8e3 	bl	80113c4 <USBD_LL_StallEP>
 800c1fe:	4603      	mov	r3, r0
 800c200:	73fb      	strb	r3, [r7, #15]
      break;
 800c202:	bf00      	nop
  }

  return ret;
 800c204:	7bfb      	ldrb	r3, [r7, #15]
}
 800c206:	4618      	mov	r0, r3
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b086      	sub	sp, #24
 800c212:	af00      	add	r7, sp, #0
 800c214:	60f8      	str	r0, [r7, #12]
 800c216:	460b      	mov	r3, r1
 800c218:	607a      	str	r2, [r7, #4]
 800c21a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c21c:	7afb      	ldrb	r3, [r7, #11]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d138      	bne.n	800c294 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c228:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c230:	2b03      	cmp	r3, #3
 800c232:	d14a      	bne.n	800c2ca <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	689a      	ldr	r2, [r3, #8]
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d913      	bls.n	800c268 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	689a      	ldr	r2, [r3, #8]
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	68db      	ldr	r3, [r3, #12]
 800c248:	1ad2      	subs	r2, r2, r3
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	68da      	ldr	r2, [r3, #12]
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	4293      	cmp	r3, r2
 800c258:	bf28      	it	cs
 800c25a:	4613      	movcs	r3, r2
 800c25c:	461a      	mov	r2, r3
 800c25e:	6879      	ldr	r1, [r7, #4]
 800c260:	68f8      	ldr	r0, [r7, #12]
 800c262:	f000 ffc5 	bl	800d1f0 <USBD_CtlContinueRx>
 800c266:	e030      	b.n	800c2ca <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	2b03      	cmp	r3, #3
 800c272:	d10b      	bne.n	800c28c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c27a:	691b      	ldr	r3, [r3, #16]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d005      	beq.n	800c28c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c286:	691b      	ldr	r3, [r3, #16]
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c28c:	68f8      	ldr	r0, [r7, #12]
 800c28e:	f000 ffc0 	bl	800d212 <USBD_CtlSendStatus>
 800c292:	e01a      	b.n	800c2ca <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	2b03      	cmp	r3, #3
 800c29e:	d114      	bne.n	800c2ca <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2a6:	699b      	ldr	r3, [r3, #24]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00e      	beq.n	800c2ca <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2b2:	699b      	ldr	r3, [r3, #24]
 800c2b4:	7afa      	ldrb	r2, [r7, #11]
 800c2b6:	4611      	mov	r1, r2
 800c2b8:	68f8      	ldr	r0, [r7, #12]
 800c2ba:	4798      	blx	r3
 800c2bc:	4603      	mov	r3, r0
 800c2be:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c2c0:	7dfb      	ldrb	r3, [r7, #23]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d001      	beq.n	800c2ca <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c2c6:	7dfb      	ldrb	r3, [r7, #23]
 800c2c8:	e000      	b.n	800c2cc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c2ca:	2300      	movs	r3, #0
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3718      	adds	r7, #24
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b086      	sub	sp, #24
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	460b      	mov	r3, r1
 800c2de:	607a      	str	r2, [r7, #4]
 800c2e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c2e2:	7afb      	ldrb	r3, [r7, #11]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d16b      	bne.n	800c3c0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	3314      	adds	r3, #20
 800c2ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c2f4:	2b02      	cmp	r3, #2
 800c2f6:	d156      	bne.n	800c3a6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	689a      	ldr	r2, [r3, #8]
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	429a      	cmp	r2, r3
 800c302:	d914      	bls.n	800c32e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	689a      	ldr	r2, [r3, #8]
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	1ad2      	subs	r2, r2, r3
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	461a      	mov	r2, r3
 800c318:	6879      	ldr	r1, [r7, #4]
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	f000 ff3a 	bl	800d194 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c320:	2300      	movs	r3, #0
 800c322:	2200      	movs	r2, #0
 800c324:	2100      	movs	r1, #0
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f005 f8f6 	bl	8011518 <USBD_LL_PrepareReceive>
 800c32c:	e03b      	b.n	800c3a6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	68da      	ldr	r2, [r3, #12]
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	429a      	cmp	r2, r3
 800c338:	d11c      	bne.n	800c374 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	685a      	ldr	r2, [r3, #4]
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c342:	429a      	cmp	r2, r3
 800c344:	d316      	bcc.n	800c374 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	685a      	ldr	r2, [r3, #4]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c350:	429a      	cmp	r2, r3
 800c352:	d20f      	bcs.n	800c374 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c354:	2200      	movs	r2, #0
 800c356:	2100      	movs	r1, #0
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	f000 ff1b 	bl	800d194 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2200      	movs	r2, #0
 800c362:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c366:	2300      	movs	r3, #0
 800c368:	2200      	movs	r2, #0
 800c36a:	2100      	movs	r1, #0
 800c36c:	68f8      	ldr	r0, [r7, #12]
 800c36e:	f005 f8d3 	bl	8011518 <USBD_LL_PrepareReceive>
 800c372:	e018      	b.n	800c3a6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	2b03      	cmp	r3, #3
 800c37e:	d10b      	bne.n	800c398 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c386:	68db      	ldr	r3, [r3, #12]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d005      	beq.n	800c398 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c398:	2180      	movs	r1, #128	; 0x80
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f005 f812 	bl	80113c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c3a0:	68f8      	ldr	r0, [r7, #12]
 800c3a2:	f000 ff49 	bl	800d238 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d122      	bne.n	800c3f6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c3b0:	68f8      	ldr	r0, [r7, #12]
 800c3b2:	f7ff fe98 	bl	800c0e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c3be:	e01a      	b.n	800c3f6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	2b03      	cmp	r3, #3
 800c3ca:	d114      	bne.n	800c3f6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3d2:	695b      	ldr	r3, [r3, #20]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00e      	beq.n	800c3f6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3de:	695b      	ldr	r3, [r3, #20]
 800c3e0:	7afa      	ldrb	r2, [r7, #11]
 800c3e2:	4611      	mov	r1, r2
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	4798      	blx	r3
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c3ec:	7dfb      	ldrb	r3, [r7, #23]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d001      	beq.n	800c3f6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c3f2:	7dfb      	ldrb	r3, [r7, #23]
 800c3f4:	e000      	b.n	800c3f8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c3f6:	2300      	movs	r3, #0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3718      	adds	r7, #24
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2201      	movs	r2, #1
 800c40c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2200      	movs	r2, #0
 800c41c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d101      	bne.n	800c434 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c430:	2303      	movs	r3, #3
 800c432:	e02f      	b.n	800c494 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d00f      	beq.n	800c45e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d009      	beq.n	800c45e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	6852      	ldr	r2, [r2, #4]
 800c456:	b2d2      	uxtb	r2, r2
 800c458:	4611      	mov	r1, r2
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c45e:	2340      	movs	r3, #64	; 0x40
 800c460:	2200      	movs	r2, #0
 800c462:	2100      	movs	r1, #0
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f004 ff68 	bl	801133a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2201      	movs	r2, #1
 800c46e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2240      	movs	r2, #64	; 0x40
 800c476:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c47a:	2340      	movs	r3, #64	; 0x40
 800c47c:	2200      	movs	r2, #0
 800c47e:	2180      	movs	r1, #128	; 0x80
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f004 ff5a 	bl	801133a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2201      	movs	r2, #1
 800c48a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2240      	movs	r2, #64	; 0x40
 800c490:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c492:	2300      	movs	r3, #0
}
 800c494:	4618      	mov	r0, r3
 800c496:	3708      	adds	r7, #8
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	78fa      	ldrb	r2, [r7, #3]
 800c4ac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c4ae:	2300      	movs	r3, #0
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4ca:	b2da      	uxtb	r2, r3
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2204      	movs	r2, #4
 800c4d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c4da:	2300      	movs	r3, #0
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	370c      	adds	r7, #12
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	2b04      	cmp	r3, #4
 800c4fa:	d106      	bne.n	800c50a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c502:	b2da      	uxtb	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c50a:	2300      	movs	r3, #0
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	370c      	adds	r7, #12
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr

0800c518 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c526:	2b00      	cmp	r3, #0
 800c528:	d101      	bne.n	800c52e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c52a:	2303      	movs	r3, #3
 800c52c:	e012      	b.n	800c554 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c534:	b2db      	uxtb	r3, r3
 800c536:	2b03      	cmp	r3, #3
 800c538:	d10b      	bne.n	800c552 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c540:	69db      	ldr	r3, [r3, #28]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d005      	beq.n	800c552 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c54c:	69db      	ldr	r3, [r3, #28]
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c552:	2300      	movs	r3, #0
}
 800c554:	4618      	mov	r0, r3
 800c556:	3708      	adds	r7, #8
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b087      	sub	sp, #28
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	3301      	adds	r3, #1
 800c572:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c57a:	8a3b      	ldrh	r3, [r7, #16]
 800c57c:	021b      	lsls	r3, r3, #8
 800c57e:	b21a      	sxth	r2, r3
 800c580:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c584:	4313      	orrs	r3, r2
 800c586:	b21b      	sxth	r3, r3
 800c588:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c58a:	89fb      	ldrh	r3, [r7, #14]
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	371c      	adds	r7, #28
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c5ae:	2b40      	cmp	r3, #64	; 0x40
 800c5b0:	d005      	beq.n	800c5be <USBD_StdDevReq+0x26>
 800c5b2:	2b40      	cmp	r3, #64	; 0x40
 800c5b4:	d853      	bhi.n	800c65e <USBD_StdDevReq+0xc6>
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d00b      	beq.n	800c5d2 <USBD_StdDevReq+0x3a>
 800c5ba:	2b20      	cmp	r3, #32
 800c5bc:	d14f      	bne.n	800c65e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	6839      	ldr	r1, [r7, #0]
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	4798      	blx	r3
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	73fb      	strb	r3, [r7, #15]
      break;
 800c5d0:	e04a      	b.n	800c668 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	785b      	ldrb	r3, [r3, #1]
 800c5d6:	2b09      	cmp	r3, #9
 800c5d8:	d83b      	bhi.n	800c652 <USBD_StdDevReq+0xba>
 800c5da:	a201      	add	r2, pc, #4	; (adr r2, 800c5e0 <USBD_StdDevReq+0x48>)
 800c5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e0:	0800c635 	.word	0x0800c635
 800c5e4:	0800c649 	.word	0x0800c649
 800c5e8:	0800c653 	.word	0x0800c653
 800c5ec:	0800c63f 	.word	0x0800c63f
 800c5f0:	0800c653 	.word	0x0800c653
 800c5f4:	0800c613 	.word	0x0800c613
 800c5f8:	0800c609 	.word	0x0800c609
 800c5fc:	0800c653 	.word	0x0800c653
 800c600:	0800c62b 	.word	0x0800c62b
 800c604:	0800c61d 	.word	0x0800c61d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c608:	6839      	ldr	r1, [r7, #0]
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 f9de 	bl	800c9cc <USBD_GetDescriptor>
          break;
 800c610:	e024      	b.n	800c65c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c612:	6839      	ldr	r1, [r7, #0]
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 fb6d 	bl	800ccf4 <USBD_SetAddress>
          break;
 800c61a:	e01f      	b.n	800c65c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c61c:	6839      	ldr	r1, [r7, #0]
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 fbac 	bl	800cd7c <USBD_SetConfig>
 800c624:	4603      	mov	r3, r0
 800c626:	73fb      	strb	r3, [r7, #15]
          break;
 800c628:	e018      	b.n	800c65c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c62a:	6839      	ldr	r1, [r7, #0]
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 fc4b 	bl	800cec8 <USBD_GetConfig>
          break;
 800c632:	e013      	b.n	800c65c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c634:	6839      	ldr	r1, [r7, #0]
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 fc7c 	bl	800cf34 <USBD_GetStatus>
          break;
 800c63c:	e00e      	b.n	800c65c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c63e:	6839      	ldr	r1, [r7, #0]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 fcab 	bl	800cf9c <USBD_SetFeature>
          break;
 800c646:	e009      	b.n	800c65c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c648:	6839      	ldr	r1, [r7, #0]
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 fcba 	bl	800cfc4 <USBD_ClrFeature>
          break;
 800c650:	e004      	b.n	800c65c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c652:	6839      	ldr	r1, [r7, #0]
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 fd11 	bl	800d07c <USBD_CtlError>
          break;
 800c65a:	bf00      	nop
      }
      break;
 800c65c:	e004      	b.n	800c668 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c65e:	6839      	ldr	r1, [r7, #0]
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 fd0b 	bl	800d07c <USBD_CtlError>
      break;
 800c666:	bf00      	nop
  }

  return ret;
 800c668:	7bfb      	ldrb	r3, [r7, #15]
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3710      	adds	r7, #16
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop

0800c674 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c67e:	2300      	movs	r3, #0
 800c680:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c68a:	2b40      	cmp	r3, #64	; 0x40
 800c68c:	d005      	beq.n	800c69a <USBD_StdItfReq+0x26>
 800c68e:	2b40      	cmp	r3, #64	; 0x40
 800c690:	d82f      	bhi.n	800c6f2 <USBD_StdItfReq+0x7e>
 800c692:	2b00      	cmp	r3, #0
 800c694:	d001      	beq.n	800c69a <USBD_StdItfReq+0x26>
 800c696:	2b20      	cmp	r3, #32
 800c698:	d12b      	bne.n	800c6f2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d81d      	bhi.n	800c6e4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	889b      	ldrh	r3, [r3, #4]
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	2b01      	cmp	r3, #1
 800c6b0:	d813      	bhi.n	800c6da <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6b8:	689b      	ldr	r3, [r3, #8]
 800c6ba:	6839      	ldr	r1, [r7, #0]
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	4798      	blx	r3
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	88db      	ldrh	r3, [r3, #6]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d110      	bne.n	800c6ee <USBD_StdItfReq+0x7a>
 800c6cc:	7bfb      	ldrb	r3, [r7, #15]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d10d      	bne.n	800c6ee <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 fd9d 	bl	800d212 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c6d8:	e009      	b.n	800c6ee <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c6da:	6839      	ldr	r1, [r7, #0]
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f000 fccd 	bl	800d07c <USBD_CtlError>
          break;
 800c6e2:	e004      	b.n	800c6ee <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c6e4:	6839      	ldr	r1, [r7, #0]
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 fcc8 	bl	800d07c <USBD_CtlError>
          break;
 800c6ec:	e000      	b.n	800c6f0 <USBD_StdItfReq+0x7c>
          break;
 800c6ee:	bf00      	nop
      }
      break;
 800c6f0:	e004      	b.n	800c6fc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c6f2:	6839      	ldr	r1, [r7, #0]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 fcc1 	bl	800d07c <USBD_CtlError>
      break;
 800c6fa:	bf00      	nop
  }

  return ret;
 800c6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3710      	adds	r7, #16
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c706:	b580      	push	{r7, lr}
 800c708:	b084      	sub	sp, #16
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
 800c70e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c710:	2300      	movs	r3, #0
 800c712:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	889b      	ldrh	r3, [r3, #4]
 800c718:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c722:	2b40      	cmp	r3, #64	; 0x40
 800c724:	d007      	beq.n	800c736 <USBD_StdEPReq+0x30>
 800c726:	2b40      	cmp	r3, #64	; 0x40
 800c728:	f200 8145 	bhi.w	800c9b6 <USBD_StdEPReq+0x2b0>
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00c      	beq.n	800c74a <USBD_StdEPReq+0x44>
 800c730:	2b20      	cmp	r3, #32
 800c732:	f040 8140 	bne.w	800c9b6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	6839      	ldr	r1, [r7, #0]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	4798      	blx	r3
 800c744:	4603      	mov	r3, r0
 800c746:	73fb      	strb	r3, [r7, #15]
      break;
 800c748:	e13a      	b.n	800c9c0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	785b      	ldrb	r3, [r3, #1]
 800c74e:	2b03      	cmp	r3, #3
 800c750:	d007      	beq.n	800c762 <USBD_StdEPReq+0x5c>
 800c752:	2b03      	cmp	r3, #3
 800c754:	f300 8129 	bgt.w	800c9aa <USBD_StdEPReq+0x2a4>
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d07f      	beq.n	800c85c <USBD_StdEPReq+0x156>
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d03c      	beq.n	800c7da <USBD_StdEPReq+0xd4>
 800c760:	e123      	b.n	800c9aa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	2b02      	cmp	r3, #2
 800c76c:	d002      	beq.n	800c774 <USBD_StdEPReq+0x6e>
 800c76e:	2b03      	cmp	r3, #3
 800c770:	d016      	beq.n	800c7a0 <USBD_StdEPReq+0x9a>
 800c772:	e02c      	b.n	800c7ce <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c774:	7bbb      	ldrb	r3, [r7, #14]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00d      	beq.n	800c796 <USBD_StdEPReq+0x90>
 800c77a:	7bbb      	ldrb	r3, [r7, #14]
 800c77c:	2b80      	cmp	r3, #128	; 0x80
 800c77e:	d00a      	beq.n	800c796 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c780:	7bbb      	ldrb	r3, [r7, #14]
 800c782:	4619      	mov	r1, r3
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f004 fe1d 	bl	80113c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c78a:	2180      	movs	r1, #128	; 0x80
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f004 fe19 	bl	80113c4 <USBD_LL_StallEP>
 800c792:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c794:	e020      	b.n	800c7d8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c796:	6839      	ldr	r1, [r7, #0]
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 fc6f 	bl	800d07c <USBD_CtlError>
              break;
 800c79e:	e01b      	b.n	800c7d8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	885b      	ldrh	r3, [r3, #2]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d10e      	bne.n	800c7c6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c7a8:	7bbb      	ldrb	r3, [r7, #14]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00b      	beq.n	800c7c6 <USBD_StdEPReq+0xc0>
 800c7ae:	7bbb      	ldrb	r3, [r7, #14]
 800c7b0:	2b80      	cmp	r3, #128	; 0x80
 800c7b2:	d008      	beq.n	800c7c6 <USBD_StdEPReq+0xc0>
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	88db      	ldrh	r3, [r3, #6]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d104      	bne.n	800c7c6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c7bc:	7bbb      	ldrb	r3, [r7, #14]
 800c7be:	4619      	mov	r1, r3
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f004 fdff 	bl	80113c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 fd23 	bl	800d212 <USBD_CtlSendStatus>

              break;
 800c7cc:	e004      	b.n	800c7d8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c7ce:	6839      	ldr	r1, [r7, #0]
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 fc53 	bl	800d07c <USBD_CtlError>
              break;
 800c7d6:	bf00      	nop
          }
          break;
 800c7d8:	e0ec      	b.n	800c9b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	2b02      	cmp	r3, #2
 800c7e4:	d002      	beq.n	800c7ec <USBD_StdEPReq+0xe6>
 800c7e6:	2b03      	cmp	r3, #3
 800c7e8:	d016      	beq.n	800c818 <USBD_StdEPReq+0x112>
 800c7ea:	e030      	b.n	800c84e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c7ec:	7bbb      	ldrb	r3, [r7, #14]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d00d      	beq.n	800c80e <USBD_StdEPReq+0x108>
 800c7f2:	7bbb      	ldrb	r3, [r7, #14]
 800c7f4:	2b80      	cmp	r3, #128	; 0x80
 800c7f6:	d00a      	beq.n	800c80e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c7f8:	7bbb      	ldrb	r3, [r7, #14]
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f004 fde1 	bl	80113c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c802:	2180      	movs	r1, #128	; 0x80
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f004 fddd 	bl	80113c4 <USBD_LL_StallEP>
 800c80a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c80c:	e025      	b.n	800c85a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c80e:	6839      	ldr	r1, [r7, #0]
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f000 fc33 	bl	800d07c <USBD_CtlError>
              break;
 800c816:	e020      	b.n	800c85a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	885b      	ldrh	r3, [r3, #2]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d11b      	bne.n	800c858 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c820:	7bbb      	ldrb	r3, [r7, #14]
 800c822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c826:	2b00      	cmp	r3, #0
 800c828:	d004      	beq.n	800c834 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c82a:	7bbb      	ldrb	r3, [r7, #14]
 800c82c:	4619      	mov	r1, r3
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f004 fde7 	bl	8011402 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 fcec 	bl	800d212 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	6839      	ldr	r1, [r7, #0]
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	4798      	blx	r3
 800c848:	4603      	mov	r3, r0
 800c84a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c84c:	e004      	b.n	800c858 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c84e:	6839      	ldr	r1, [r7, #0]
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 fc13 	bl	800d07c <USBD_CtlError>
              break;
 800c856:	e000      	b.n	800c85a <USBD_StdEPReq+0x154>
              break;
 800c858:	bf00      	nop
          }
          break;
 800c85a:	e0ab      	b.n	800c9b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c862:	b2db      	uxtb	r3, r3
 800c864:	2b02      	cmp	r3, #2
 800c866:	d002      	beq.n	800c86e <USBD_StdEPReq+0x168>
 800c868:	2b03      	cmp	r3, #3
 800c86a:	d032      	beq.n	800c8d2 <USBD_StdEPReq+0x1cc>
 800c86c:	e097      	b.n	800c99e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c86e:	7bbb      	ldrb	r3, [r7, #14]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d007      	beq.n	800c884 <USBD_StdEPReq+0x17e>
 800c874:	7bbb      	ldrb	r3, [r7, #14]
 800c876:	2b80      	cmp	r3, #128	; 0x80
 800c878:	d004      	beq.n	800c884 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c87a:	6839      	ldr	r1, [r7, #0]
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f000 fbfd 	bl	800d07c <USBD_CtlError>
                break;
 800c882:	e091      	b.n	800c9a8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c884:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	da0b      	bge.n	800c8a4 <USBD_StdEPReq+0x19e>
 800c88c:	7bbb      	ldrb	r3, [r7, #14]
 800c88e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c892:	4613      	mov	r3, r2
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	4413      	add	r3, r2
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	3310      	adds	r3, #16
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	4413      	add	r3, r2
 800c8a0:	3304      	adds	r3, #4
 800c8a2:	e00b      	b.n	800c8bc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c8a4:	7bbb      	ldrb	r3, [r7, #14]
 800c8a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	4413      	add	r3, r2
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	3304      	adds	r3, #4
 800c8bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	2202      	movs	r2, #2
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f000 fc47 	bl	800d15e <USBD_CtlSendData>
              break;
 800c8d0:	e06a      	b.n	800c9a8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c8d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	da11      	bge.n	800c8fe <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c8da:	7bbb      	ldrb	r3, [r7, #14]
 800c8dc:	f003 020f 	and.w	r2, r3, #15
 800c8e0:	6879      	ldr	r1, [r7, #4]
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	009b      	lsls	r3, r3, #2
 800c8e6:	4413      	add	r3, r2
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	440b      	add	r3, r1
 800c8ec:	3324      	adds	r3, #36	; 0x24
 800c8ee:	881b      	ldrh	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d117      	bne.n	800c924 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c8f4:	6839      	ldr	r1, [r7, #0]
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f000 fbc0 	bl	800d07c <USBD_CtlError>
                  break;
 800c8fc:	e054      	b.n	800c9a8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c8fe:	7bbb      	ldrb	r3, [r7, #14]
 800c900:	f003 020f 	and.w	r2, r3, #15
 800c904:	6879      	ldr	r1, [r7, #4]
 800c906:	4613      	mov	r3, r2
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	4413      	add	r3, r2
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	440b      	add	r3, r1
 800c910:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c914:	881b      	ldrh	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d104      	bne.n	800c924 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c91a:	6839      	ldr	r1, [r7, #0]
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f000 fbad 	bl	800d07c <USBD_CtlError>
                  break;
 800c922:	e041      	b.n	800c9a8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c924:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	da0b      	bge.n	800c944 <USBD_StdEPReq+0x23e>
 800c92c:	7bbb      	ldrb	r3, [r7, #14]
 800c92e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c932:	4613      	mov	r3, r2
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	4413      	add	r3, r2
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	3310      	adds	r3, #16
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	4413      	add	r3, r2
 800c940:	3304      	adds	r3, #4
 800c942:	e00b      	b.n	800c95c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c944:	7bbb      	ldrb	r3, [r7, #14]
 800c946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c94a:	4613      	mov	r3, r2
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	4413      	add	r3, r2
 800c950:	009b      	lsls	r3, r3, #2
 800c952:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	4413      	add	r3, r2
 800c95a:	3304      	adds	r3, #4
 800c95c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c95e:	7bbb      	ldrb	r3, [r7, #14]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d002      	beq.n	800c96a <USBD_StdEPReq+0x264>
 800c964:	7bbb      	ldrb	r3, [r7, #14]
 800c966:	2b80      	cmp	r3, #128	; 0x80
 800c968:	d103      	bne.n	800c972 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	2200      	movs	r2, #0
 800c96e:	601a      	str	r2, [r3, #0]
 800c970:	e00e      	b.n	800c990 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c972:	7bbb      	ldrb	r3, [r7, #14]
 800c974:	4619      	mov	r1, r3
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f004 fd62 	bl	8011440 <USBD_LL_IsStallEP>
 800c97c:	4603      	mov	r3, r0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d003      	beq.n	800c98a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	2201      	movs	r2, #1
 800c986:	601a      	str	r2, [r3, #0]
 800c988:	e002      	b.n	800c990 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	2200      	movs	r2, #0
 800c98e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	2202      	movs	r2, #2
 800c994:	4619      	mov	r1, r3
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 fbe1 	bl	800d15e <USBD_CtlSendData>
              break;
 800c99c:	e004      	b.n	800c9a8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c99e:	6839      	ldr	r1, [r7, #0]
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f000 fb6b 	bl	800d07c <USBD_CtlError>
              break;
 800c9a6:	bf00      	nop
          }
          break;
 800c9a8:	e004      	b.n	800c9b4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c9aa:	6839      	ldr	r1, [r7, #0]
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 fb65 	bl	800d07c <USBD_CtlError>
          break;
 800c9b2:	bf00      	nop
      }
      break;
 800c9b4:	e004      	b.n	800c9c0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 fb5f 	bl	800d07c <USBD_CtlError>
      break;
 800c9be:	bf00      	nop
  }

  return ret;
 800c9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3710      	adds	r7, #16
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
	...

0800c9cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	885b      	ldrh	r3, [r3, #2]
 800c9e6:	0a1b      	lsrs	r3, r3, #8
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	3b01      	subs	r3, #1
 800c9ec:	2b0e      	cmp	r3, #14
 800c9ee:	f200 8152 	bhi.w	800cc96 <USBD_GetDescriptor+0x2ca>
 800c9f2:	a201      	add	r2, pc, #4	; (adr r2, 800c9f8 <USBD_GetDescriptor+0x2c>)
 800c9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9f8:	0800ca69 	.word	0x0800ca69
 800c9fc:	0800ca81 	.word	0x0800ca81
 800ca00:	0800cac1 	.word	0x0800cac1
 800ca04:	0800cc97 	.word	0x0800cc97
 800ca08:	0800cc97 	.word	0x0800cc97
 800ca0c:	0800cc37 	.word	0x0800cc37
 800ca10:	0800cc63 	.word	0x0800cc63
 800ca14:	0800cc97 	.word	0x0800cc97
 800ca18:	0800cc97 	.word	0x0800cc97
 800ca1c:	0800cc97 	.word	0x0800cc97
 800ca20:	0800cc97 	.word	0x0800cc97
 800ca24:	0800cc97 	.word	0x0800cc97
 800ca28:	0800cc97 	.word	0x0800cc97
 800ca2c:	0800cc97 	.word	0x0800cc97
 800ca30:	0800ca35 	.word	0x0800ca35
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca3a:	69db      	ldr	r3, [r3, #28]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00b      	beq.n	800ca58 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca46:	69db      	ldr	r3, [r3, #28]
 800ca48:	687a      	ldr	r2, [r7, #4]
 800ca4a:	7c12      	ldrb	r2, [r2, #16]
 800ca4c:	f107 0108 	add.w	r1, r7, #8
 800ca50:	4610      	mov	r0, r2
 800ca52:	4798      	blx	r3
 800ca54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca56:	e126      	b.n	800cca6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ca58:	6839      	ldr	r1, [r7, #0]
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 fb0e 	bl	800d07c <USBD_CtlError>
        err++;
 800ca60:	7afb      	ldrb	r3, [r7, #11]
 800ca62:	3301      	adds	r3, #1
 800ca64:	72fb      	strb	r3, [r7, #11]
      break;
 800ca66:	e11e      	b.n	800cca6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	7c12      	ldrb	r2, [r2, #16]
 800ca74:	f107 0108 	add.w	r1, r7, #8
 800ca78:	4610      	mov	r0, r2
 800ca7a:	4798      	blx	r3
 800ca7c:	60f8      	str	r0, [r7, #12]
      break;
 800ca7e:	e112      	b.n	800cca6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	7c1b      	ldrb	r3, [r3, #16]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d10d      	bne.n	800caa4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca90:	f107 0208 	add.w	r2, r7, #8
 800ca94:	4610      	mov	r0, r2
 800ca96:	4798      	blx	r3
 800ca98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	2202      	movs	r2, #2
 800caa0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800caa2:	e100      	b.n	800cca6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caac:	f107 0208 	add.w	r2, r7, #8
 800cab0:	4610      	mov	r0, r2
 800cab2:	4798      	blx	r3
 800cab4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	3301      	adds	r3, #1
 800caba:	2202      	movs	r2, #2
 800cabc:	701a      	strb	r2, [r3, #0]
      break;
 800cabe:	e0f2      	b.n	800cca6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	885b      	ldrh	r3, [r3, #2]
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	2b05      	cmp	r3, #5
 800cac8:	f200 80ac 	bhi.w	800cc24 <USBD_GetDescriptor+0x258>
 800cacc:	a201      	add	r2, pc, #4	; (adr r2, 800cad4 <USBD_GetDescriptor+0x108>)
 800cace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad2:	bf00      	nop
 800cad4:	0800caed 	.word	0x0800caed
 800cad8:	0800cb21 	.word	0x0800cb21
 800cadc:	0800cb55 	.word	0x0800cb55
 800cae0:	0800cb89 	.word	0x0800cb89
 800cae4:	0800cbbd 	.word	0x0800cbbd
 800cae8:	0800cbf1 	.word	0x0800cbf1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d00b      	beq.n	800cb10 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	687a      	ldr	r2, [r7, #4]
 800cb02:	7c12      	ldrb	r2, [r2, #16]
 800cb04:	f107 0108 	add.w	r1, r7, #8
 800cb08:	4610      	mov	r0, r2
 800cb0a:	4798      	blx	r3
 800cb0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb0e:	e091      	b.n	800cc34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cb10:	6839      	ldr	r1, [r7, #0]
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 fab2 	bl	800d07c <USBD_CtlError>
            err++;
 800cb18:	7afb      	ldrb	r3, [r7, #11]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	72fb      	strb	r3, [r7, #11]
          break;
 800cb1e:	e089      	b.n	800cc34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d00b      	beq.n	800cb44 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb32:	689b      	ldr	r3, [r3, #8]
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	7c12      	ldrb	r2, [r2, #16]
 800cb38:	f107 0108 	add.w	r1, r7, #8
 800cb3c:	4610      	mov	r0, r2
 800cb3e:	4798      	blx	r3
 800cb40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb42:	e077      	b.n	800cc34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cb44:	6839      	ldr	r1, [r7, #0]
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 fa98 	bl	800d07c <USBD_CtlError>
            err++;
 800cb4c:	7afb      	ldrb	r3, [r7, #11]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	72fb      	strb	r3, [r7, #11]
          break;
 800cb52:	e06f      	b.n	800cc34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d00b      	beq.n	800cb78 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	7c12      	ldrb	r2, [r2, #16]
 800cb6c:	f107 0108 	add.w	r1, r7, #8
 800cb70:	4610      	mov	r0, r2
 800cb72:	4798      	blx	r3
 800cb74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb76:	e05d      	b.n	800cc34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cb78:	6839      	ldr	r1, [r7, #0]
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 fa7e 	bl	800d07c <USBD_CtlError>
            err++;
 800cb80:	7afb      	ldrb	r3, [r7, #11]
 800cb82:	3301      	adds	r3, #1
 800cb84:	72fb      	strb	r3, [r7, #11]
          break;
 800cb86:	e055      	b.n	800cc34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb8e:	691b      	ldr	r3, [r3, #16]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d00b      	beq.n	800cbac <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb9a:	691b      	ldr	r3, [r3, #16]
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	7c12      	ldrb	r2, [r2, #16]
 800cba0:	f107 0108 	add.w	r1, r7, #8
 800cba4:	4610      	mov	r0, r2
 800cba6:	4798      	blx	r3
 800cba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbaa:	e043      	b.n	800cc34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cbac:	6839      	ldr	r1, [r7, #0]
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 fa64 	bl	800d07c <USBD_CtlError>
            err++;
 800cbb4:	7afb      	ldrb	r3, [r7, #11]
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	72fb      	strb	r3, [r7, #11]
          break;
 800cbba:	e03b      	b.n	800cc34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbc2:	695b      	ldr	r3, [r3, #20]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d00b      	beq.n	800cbe0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbce:	695b      	ldr	r3, [r3, #20]
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	7c12      	ldrb	r2, [r2, #16]
 800cbd4:	f107 0108 	add.w	r1, r7, #8
 800cbd8:	4610      	mov	r0, r2
 800cbda:	4798      	blx	r3
 800cbdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbde:	e029      	b.n	800cc34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cbe0:	6839      	ldr	r1, [r7, #0]
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 fa4a 	bl	800d07c <USBD_CtlError>
            err++;
 800cbe8:	7afb      	ldrb	r3, [r7, #11]
 800cbea:	3301      	adds	r3, #1
 800cbec:	72fb      	strb	r3, [r7, #11]
          break;
 800cbee:	e021      	b.n	800cc34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbf6:	699b      	ldr	r3, [r3, #24]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d00b      	beq.n	800cc14 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc02:	699b      	ldr	r3, [r3, #24]
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	7c12      	ldrb	r2, [r2, #16]
 800cc08:	f107 0108 	add.w	r1, r7, #8
 800cc0c:	4610      	mov	r0, r2
 800cc0e:	4798      	blx	r3
 800cc10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc12:	e00f      	b.n	800cc34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cc14:	6839      	ldr	r1, [r7, #0]
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 fa30 	bl	800d07c <USBD_CtlError>
            err++;
 800cc1c:	7afb      	ldrb	r3, [r7, #11]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	72fb      	strb	r3, [r7, #11]
          break;
 800cc22:	e007      	b.n	800cc34 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cc24:	6839      	ldr	r1, [r7, #0]
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 fa28 	bl	800d07c <USBD_CtlError>
          err++;
 800cc2c:	7afb      	ldrb	r3, [r7, #11]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cc32:	bf00      	nop
      }
      break;
 800cc34:	e037      	b.n	800cca6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	7c1b      	ldrb	r3, [r3, #16]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d109      	bne.n	800cc52 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc46:	f107 0208 	add.w	r2, r7, #8
 800cc4a:	4610      	mov	r0, r2
 800cc4c:	4798      	blx	r3
 800cc4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc50:	e029      	b.n	800cca6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cc52:	6839      	ldr	r1, [r7, #0]
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 fa11 	bl	800d07c <USBD_CtlError>
        err++;
 800cc5a:	7afb      	ldrb	r3, [r7, #11]
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	72fb      	strb	r3, [r7, #11]
      break;
 800cc60:	e021      	b.n	800cca6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	7c1b      	ldrb	r3, [r3, #16]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d10d      	bne.n	800cc86 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc72:	f107 0208 	add.w	r2, r7, #8
 800cc76:	4610      	mov	r0, r2
 800cc78:	4798      	blx	r3
 800cc7a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	2207      	movs	r2, #7
 800cc82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc84:	e00f      	b.n	800cca6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cc86:	6839      	ldr	r1, [r7, #0]
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 f9f7 	bl	800d07c <USBD_CtlError>
        err++;
 800cc8e:	7afb      	ldrb	r3, [r7, #11]
 800cc90:	3301      	adds	r3, #1
 800cc92:	72fb      	strb	r3, [r7, #11]
      break;
 800cc94:	e007      	b.n	800cca6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cc96:	6839      	ldr	r1, [r7, #0]
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f000 f9ef 	bl	800d07c <USBD_CtlError>
      err++;
 800cc9e:	7afb      	ldrb	r3, [r7, #11]
 800cca0:	3301      	adds	r3, #1
 800cca2:	72fb      	strb	r3, [r7, #11]
      break;
 800cca4:	bf00      	nop
  }

  if (err != 0U)
 800cca6:	7afb      	ldrb	r3, [r7, #11]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d11e      	bne.n	800ccea <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	88db      	ldrh	r3, [r3, #6]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d016      	beq.n	800cce2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ccb4:	893b      	ldrh	r3, [r7, #8]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d00e      	beq.n	800ccd8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	88da      	ldrh	r2, [r3, #6]
 800ccbe:	893b      	ldrh	r3, [r7, #8]
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	bf28      	it	cs
 800ccc4:	4613      	movcs	r3, r2
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ccca:	893b      	ldrh	r3, [r7, #8]
 800cccc:	461a      	mov	r2, r3
 800ccce:	68f9      	ldr	r1, [r7, #12]
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f000 fa44 	bl	800d15e <USBD_CtlSendData>
 800ccd6:	e009      	b.n	800ccec <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ccd8:	6839      	ldr	r1, [r7, #0]
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f000 f9ce 	bl	800d07c <USBD_CtlError>
 800cce0:	e004      	b.n	800ccec <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 fa95 	bl	800d212 <USBD_CtlSendStatus>
 800cce8:	e000      	b.n	800ccec <USBD_GetDescriptor+0x320>
    return;
 800ccea:	bf00      	nop
  }
}
 800ccec:	3710      	adds	r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop

0800ccf4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	889b      	ldrh	r3, [r3, #4]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d131      	bne.n	800cd6a <USBD_SetAddress+0x76>
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	88db      	ldrh	r3, [r3, #6]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d12d      	bne.n	800cd6a <USBD_SetAddress+0x76>
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	885b      	ldrh	r3, [r3, #2]
 800cd12:	2b7f      	cmp	r3, #127	; 0x7f
 800cd14:	d829      	bhi.n	800cd6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	885b      	ldrh	r3, [r3, #2]
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	2b03      	cmp	r3, #3
 800cd2c:	d104      	bne.n	800cd38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cd2e:	6839      	ldr	r1, [r7, #0]
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 f9a3 	bl	800d07c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd36:	e01d      	b.n	800cd74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	7bfa      	ldrb	r2, [r7, #15]
 800cd3c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cd40:	7bfb      	ldrb	r3, [r7, #15]
 800cd42:	4619      	mov	r1, r3
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f004 fba7 	bl	8011498 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 fa61 	bl	800d212 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cd50:	7bfb      	ldrb	r3, [r7, #15]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d004      	beq.n	800cd60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2202      	movs	r2, #2
 800cd5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd5e:	e009      	b.n	800cd74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2201      	movs	r2, #1
 800cd64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd68:	e004      	b.n	800cd74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cd6a:	6839      	ldr	r1, [r7, #0]
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f000 f985 	bl	800d07c <USBD_CtlError>
  }
}
 800cd72:	bf00      	nop
 800cd74:	bf00      	nop
 800cd76:	3710      	adds	r7, #16
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd86:	2300      	movs	r3, #0
 800cd88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	885b      	ldrh	r3, [r3, #2]
 800cd8e:	b2da      	uxtb	r2, r3
 800cd90:	4b4c      	ldr	r3, [pc, #304]	; (800cec4 <USBD_SetConfig+0x148>)
 800cd92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cd94:	4b4b      	ldr	r3, [pc, #300]	; (800cec4 <USBD_SetConfig+0x148>)
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d905      	bls.n	800cda8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cd9c:	6839      	ldr	r1, [r7, #0]
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 f96c 	bl	800d07c <USBD_CtlError>
    return USBD_FAIL;
 800cda4:	2303      	movs	r3, #3
 800cda6:	e088      	b.n	800ceba <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	2b02      	cmp	r3, #2
 800cdb2:	d002      	beq.n	800cdba <USBD_SetConfig+0x3e>
 800cdb4:	2b03      	cmp	r3, #3
 800cdb6:	d025      	beq.n	800ce04 <USBD_SetConfig+0x88>
 800cdb8:	e071      	b.n	800ce9e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cdba:	4b42      	ldr	r3, [pc, #264]	; (800cec4 <USBD_SetConfig+0x148>)
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d01c      	beq.n	800cdfc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800cdc2:	4b40      	ldr	r3, [pc, #256]	; (800cec4 <USBD_SetConfig+0x148>)
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cdcc:	4b3d      	ldr	r3, [pc, #244]	; (800cec4 <USBD_SetConfig+0x148>)
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f7ff f992 	bl	800c0fc <USBD_SetClassConfig>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cddc:	7bfb      	ldrb	r3, [r7, #15]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d004      	beq.n	800cdec <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800cde2:	6839      	ldr	r1, [r7, #0]
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f000 f949 	bl	800d07c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cdea:	e065      	b.n	800ceb8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f000 fa10 	bl	800d212 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2203      	movs	r2, #3
 800cdf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cdfa:	e05d      	b.n	800ceb8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f000 fa08 	bl	800d212 <USBD_CtlSendStatus>
      break;
 800ce02:	e059      	b.n	800ceb8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ce04:	4b2f      	ldr	r3, [pc, #188]	; (800cec4 <USBD_SetConfig+0x148>)
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d112      	bne.n	800ce32 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2202      	movs	r2, #2
 800ce10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ce14:	4b2b      	ldr	r3, [pc, #172]	; (800cec4 <USBD_SetConfig+0x148>)
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	461a      	mov	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ce1e:	4b29      	ldr	r3, [pc, #164]	; (800cec4 <USBD_SetConfig+0x148>)
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	4619      	mov	r1, r3
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f7ff f985 	bl	800c134 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 f9f1 	bl	800d212 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ce30:	e042      	b.n	800ceb8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ce32:	4b24      	ldr	r3, [pc, #144]	; (800cec4 <USBD_SetConfig+0x148>)
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	461a      	mov	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d02a      	beq.n	800ce96 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	b2db      	uxtb	r3, r3
 800ce46:	4619      	mov	r1, r3
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f7ff f973 	bl	800c134 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ce4e:	4b1d      	ldr	r3, [pc, #116]	; (800cec4 <USBD_SetConfig+0x148>)
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	461a      	mov	r2, r3
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ce58:	4b1a      	ldr	r3, [pc, #104]	; (800cec4 <USBD_SetConfig+0x148>)
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f7ff f94c 	bl	800c0fc <USBD_SetClassConfig>
 800ce64:	4603      	mov	r3, r0
 800ce66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ce68:	7bfb      	ldrb	r3, [r7, #15]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00f      	beq.n	800ce8e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ce6e:	6839      	ldr	r1, [r7, #0]
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f000 f903 	bl	800d07c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	b2db      	uxtb	r3, r3
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f7ff f958 	bl	800c134 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2202      	movs	r2, #2
 800ce88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ce8c:	e014      	b.n	800ceb8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f000 f9bf 	bl	800d212 <USBD_CtlSendStatus>
      break;
 800ce94:	e010      	b.n	800ceb8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 f9bb 	bl	800d212 <USBD_CtlSendStatus>
      break;
 800ce9c:	e00c      	b.n	800ceb8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ce9e:	6839      	ldr	r1, [r7, #0]
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f000 f8eb 	bl	800d07c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cea6:	4b07      	ldr	r3, [pc, #28]	; (800cec4 <USBD_SetConfig+0x148>)
 800cea8:	781b      	ldrb	r3, [r3, #0]
 800ceaa:	4619      	mov	r1, r3
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f7ff f941 	bl	800c134 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ceb2:	2303      	movs	r3, #3
 800ceb4:	73fb      	strb	r3, [r7, #15]
      break;
 800ceb6:	bf00      	nop
  }

  return ret;
 800ceb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	200027d4 	.word	0x200027d4

0800cec8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	88db      	ldrh	r3, [r3, #6]
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	d004      	beq.n	800cee4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ceda:	6839      	ldr	r1, [r7, #0]
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 f8cd 	bl	800d07c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cee2:	e023      	b.n	800cf2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	2b02      	cmp	r3, #2
 800ceee:	dc02      	bgt.n	800cef6 <USBD_GetConfig+0x2e>
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	dc03      	bgt.n	800cefc <USBD_GetConfig+0x34>
 800cef4:	e015      	b.n	800cf22 <USBD_GetConfig+0x5a>
 800cef6:	2b03      	cmp	r3, #3
 800cef8:	d00b      	beq.n	800cf12 <USBD_GetConfig+0x4a>
 800cefa:	e012      	b.n	800cf22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	3308      	adds	r3, #8
 800cf06:	2201      	movs	r2, #1
 800cf08:	4619      	mov	r1, r3
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 f927 	bl	800d15e <USBD_CtlSendData>
        break;
 800cf10:	e00c      	b.n	800cf2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	3304      	adds	r3, #4
 800cf16:	2201      	movs	r2, #1
 800cf18:	4619      	mov	r1, r3
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 f91f 	bl	800d15e <USBD_CtlSendData>
        break;
 800cf20:	e004      	b.n	800cf2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cf22:	6839      	ldr	r1, [r7, #0]
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f000 f8a9 	bl	800d07c <USBD_CtlError>
        break;
 800cf2a:	bf00      	nop
}
 800cf2c:	bf00      	nop
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf44:	b2db      	uxtb	r3, r3
 800cf46:	3b01      	subs	r3, #1
 800cf48:	2b02      	cmp	r3, #2
 800cf4a:	d81e      	bhi.n	800cf8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	88db      	ldrh	r3, [r3, #6]
 800cf50:	2b02      	cmp	r3, #2
 800cf52:	d004      	beq.n	800cf5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cf54:	6839      	ldr	r1, [r7, #0]
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 f890 	bl	800d07c <USBD_CtlError>
        break;
 800cf5c:	e01a      	b.n	800cf94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2201      	movs	r2, #1
 800cf62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d005      	beq.n	800cf7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	68db      	ldr	r3, [r3, #12]
 800cf72:	f043 0202 	orr.w	r2, r3, #2
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	330c      	adds	r3, #12
 800cf7e:	2202      	movs	r2, #2
 800cf80:	4619      	mov	r1, r3
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f000 f8eb 	bl	800d15e <USBD_CtlSendData>
      break;
 800cf88:	e004      	b.n	800cf94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cf8a:	6839      	ldr	r1, [r7, #0]
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 f875 	bl	800d07c <USBD_CtlError>
      break;
 800cf92:	bf00      	nop
  }
}
 800cf94:	bf00      	nop
 800cf96:	3708      	adds	r7, #8
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	885b      	ldrh	r3, [r3, #2]
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	d106      	bne.n	800cfbc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 f92b 	bl	800d212 <USBD_CtlSendStatus>
  }
}
 800cfbc:	bf00      	nop
 800cfbe:	3708      	adds	r7, #8
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfd4:	b2db      	uxtb	r3, r3
 800cfd6:	3b01      	subs	r3, #1
 800cfd8:	2b02      	cmp	r3, #2
 800cfda:	d80b      	bhi.n	800cff4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	885b      	ldrh	r3, [r3, #2]
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	d10c      	bne.n	800cffe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 f910 	bl	800d212 <USBD_CtlSendStatus>
      }
      break;
 800cff2:	e004      	b.n	800cffe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cff4:	6839      	ldr	r1, [r7, #0]
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 f840 	bl	800d07c <USBD_CtlError>
      break;
 800cffc:	e000      	b.n	800d000 <USBD_ClrFeature+0x3c>
      break;
 800cffe:	bf00      	nop
  }
}
 800d000:	bf00      	nop
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	781a      	ldrb	r2, [r3, #0]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	3301      	adds	r3, #1
 800d022:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	781a      	ldrb	r2, [r3, #0]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	3301      	adds	r3, #1
 800d030:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d032:	68f8      	ldr	r0, [r7, #12]
 800d034:	f7ff fa92 	bl	800c55c <SWAPBYTE>
 800d038:	4603      	mov	r3, r0
 800d03a:	461a      	mov	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	3301      	adds	r3, #1
 800d044:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	3301      	adds	r3, #1
 800d04a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d04c:	68f8      	ldr	r0, [r7, #12]
 800d04e:	f7ff fa85 	bl	800c55c <SWAPBYTE>
 800d052:	4603      	mov	r3, r0
 800d054:	461a      	mov	r2, r3
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	3301      	adds	r3, #1
 800d05e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	3301      	adds	r3, #1
 800d064:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d066:	68f8      	ldr	r0, [r7, #12]
 800d068:	f7ff fa78 	bl	800c55c <SWAPBYTE>
 800d06c:	4603      	mov	r3, r0
 800d06e:	461a      	mov	r2, r3
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	80da      	strh	r2, [r3, #6]
}
 800d074:	bf00      	nop
 800d076:	3710      	adds	r7, #16
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d086:	2180      	movs	r1, #128	; 0x80
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f004 f99b 	bl	80113c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d08e:	2100      	movs	r1, #0
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f004 f997 	bl	80113c4 <USBD_LL_StallEP>
}
 800d096:	bf00      	nop
 800d098:	3708      	adds	r7, #8
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d09e:	b580      	push	{r7, lr}
 800d0a0:	b086      	sub	sp, #24
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	60f8      	str	r0, [r7, #12]
 800d0a6:	60b9      	str	r1, [r7, #8]
 800d0a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d036      	beq.n	800d122 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d0b8:	6938      	ldr	r0, [r7, #16]
 800d0ba:	f000 f836 	bl	800d12a <USBD_GetLen>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	005b      	lsls	r3, r3, #1
 800d0c6:	b29a      	uxth	r2, r3
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d0cc:	7dfb      	ldrb	r3, [r7, #23]
 800d0ce:	68ba      	ldr	r2, [r7, #8]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	687a      	ldr	r2, [r7, #4]
 800d0d4:	7812      	ldrb	r2, [r2, #0]
 800d0d6:	701a      	strb	r2, [r3, #0]
  idx++;
 800d0d8:	7dfb      	ldrb	r3, [r7, #23]
 800d0da:	3301      	adds	r3, #1
 800d0dc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d0de:	7dfb      	ldrb	r3, [r7, #23]
 800d0e0:	68ba      	ldr	r2, [r7, #8]
 800d0e2:	4413      	add	r3, r2
 800d0e4:	2203      	movs	r2, #3
 800d0e6:	701a      	strb	r2, [r3, #0]
  idx++;
 800d0e8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d0ee:	e013      	b.n	800d118 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d0f0:	7dfb      	ldrb	r3, [r7, #23]
 800d0f2:	68ba      	ldr	r2, [r7, #8]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	693a      	ldr	r2, [r7, #16]
 800d0f8:	7812      	ldrb	r2, [r2, #0]
 800d0fa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	3301      	adds	r3, #1
 800d100:	613b      	str	r3, [r7, #16]
    idx++;
 800d102:	7dfb      	ldrb	r3, [r7, #23]
 800d104:	3301      	adds	r3, #1
 800d106:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d108:	7dfb      	ldrb	r3, [r7, #23]
 800d10a:	68ba      	ldr	r2, [r7, #8]
 800d10c:	4413      	add	r3, r2
 800d10e:	2200      	movs	r2, #0
 800d110:	701a      	strb	r2, [r3, #0]
    idx++;
 800d112:	7dfb      	ldrb	r3, [r7, #23]
 800d114:	3301      	adds	r3, #1
 800d116:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d1e7      	bne.n	800d0f0 <USBD_GetString+0x52>
 800d120:	e000      	b.n	800d124 <USBD_GetString+0x86>
    return;
 800d122:	bf00      	nop
  }
}
 800d124:	3718      	adds	r7, #24
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d12a:	b480      	push	{r7}
 800d12c:	b085      	sub	sp, #20
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d132:	2300      	movs	r3, #0
 800d134:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d13a:	e005      	b.n	800d148 <USBD_GetLen+0x1e>
  {
    len++;
 800d13c:	7bfb      	ldrb	r3, [r7, #15]
 800d13e:	3301      	adds	r3, #1
 800d140:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	3301      	adds	r3, #1
 800d146:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d1f5      	bne.n	800d13c <USBD_GetLen+0x12>
  }

  return len;
 800d150:	7bfb      	ldrb	r3, [r7, #15]
}
 800d152:	4618      	mov	r0, r3
 800d154:	3714      	adds	r7, #20
 800d156:	46bd      	mov	sp, r7
 800d158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15c:	4770      	bx	lr

0800d15e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d15e:	b580      	push	{r7, lr}
 800d160:	b084      	sub	sp, #16
 800d162:	af00      	add	r7, sp, #0
 800d164:	60f8      	str	r0, [r7, #12]
 800d166:	60b9      	str	r1, [r7, #8]
 800d168:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2202      	movs	r2, #2
 800d16e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	687a      	ldr	r2, [r7, #4]
 800d17c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	68ba      	ldr	r2, [r7, #8]
 800d182:	2100      	movs	r1, #0
 800d184:	68f8      	ldr	r0, [r7, #12]
 800d186:	f004 f9a6 	bl	80114d6 <USBD_LL_Transmit>

  return USBD_OK;
 800d18a:	2300      	movs	r3, #0
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3710      	adds	r7, #16
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	60f8      	str	r0, [r7, #12]
 800d19c:	60b9      	str	r1, [r7, #8]
 800d19e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	68ba      	ldr	r2, [r7, #8]
 800d1a4:	2100      	movs	r1, #0
 800d1a6:	68f8      	ldr	r0, [r7, #12]
 800d1a8:	f004 f995 	bl	80114d6 <USBD_LL_Transmit>

  return USBD_OK;
 800d1ac:	2300      	movs	r3, #0
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3710      	adds	r7, #16
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}

0800d1b6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b084      	sub	sp, #16
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	60f8      	str	r0, [r7, #12]
 800d1be:	60b9      	str	r1, [r7, #8]
 800d1c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	2203      	movs	r2, #3
 800d1c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	68ba      	ldr	r2, [r7, #8]
 800d1de:	2100      	movs	r1, #0
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f004 f999 	bl	8011518 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1e6:	2300      	movs	r3, #0
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	68ba      	ldr	r2, [r7, #8]
 800d200:	2100      	movs	r1, #0
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f004 f988 	bl	8011518 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d208:	2300      	movs	r3, #0
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3710      	adds	r7, #16
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}

0800d212 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d212:	b580      	push	{r7, lr}
 800d214:	b082      	sub	sp, #8
 800d216:	af00      	add	r7, sp, #0
 800d218:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2204      	movs	r2, #4
 800d21e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d222:	2300      	movs	r3, #0
 800d224:	2200      	movs	r2, #0
 800d226:	2100      	movs	r1, #0
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f004 f954 	bl	80114d6 <USBD_LL_Transmit>

  return USBD_OK;
 800d22e:	2300      	movs	r3, #0
}
 800d230:	4618      	mov	r0, r3
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2205      	movs	r2, #5
 800d244:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d248:	2300      	movs	r3, #0
 800d24a:	2200      	movs	r2, #0
 800d24c:	2100      	movs	r1, #0
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f004 f962 	bl	8011518 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d254:	2300      	movs	r3, #0
}
 800d256:	4618      	mov	r0, r3
 800d258:	3708      	adds	r7, #8
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
	...

0800d260 <__NVIC_SetPriority>:
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	4603      	mov	r3, r0
 800d268:	6039      	str	r1, [r7, #0]
 800d26a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d26c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d270:	2b00      	cmp	r3, #0
 800d272:	db0a      	blt.n	800d28a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	b2da      	uxtb	r2, r3
 800d278:	490c      	ldr	r1, [pc, #48]	; (800d2ac <__NVIC_SetPriority+0x4c>)
 800d27a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d27e:	0112      	lsls	r2, r2, #4
 800d280:	b2d2      	uxtb	r2, r2
 800d282:	440b      	add	r3, r1
 800d284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d288:	e00a      	b.n	800d2a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	b2da      	uxtb	r2, r3
 800d28e:	4908      	ldr	r1, [pc, #32]	; (800d2b0 <__NVIC_SetPriority+0x50>)
 800d290:	79fb      	ldrb	r3, [r7, #7]
 800d292:	f003 030f 	and.w	r3, r3, #15
 800d296:	3b04      	subs	r3, #4
 800d298:	0112      	lsls	r2, r2, #4
 800d29a:	b2d2      	uxtb	r2, r2
 800d29c:	440b      	add	r3, r1
 800d29e:	761a      	strb	r2, [r3, #24]
}
 800d2a0:	bf00      	nop
 800d2a2:	370c      	adds	r7, #12
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr
 800d2ac:	e000e100 	.word	0xe000e100
 800d2b0:	e000ed00 	.word	0xe000ed00

0800d2b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d2b8:	4b05      	ldr	r3, [pc, #20]	; (800d2d0 <SysTick_Handler+0x1c>)
 800d2ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d2bc:	f002 fb6e 	bl	800f99c <xTaskGetSchedulerState>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	d001      	beq.n	800d2ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d2c6:	f003 fa57 	bl	8010778 <xPortSysTickHandler>
  }
}
 800d2ca:	bf00      	nop
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	e000e010 	.word	0xe000e010

0800d2d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d2d8:	2100      	movs	r1, #0
 800d2da:	f06f 0004 	mvn.w	r0, #4
 800d2de:	f7ff ffbf 	bl	800d260 <__NVIC_SetPriority>
#endif
}
 800d2e2:	bf00      	nop
 800d2e4:	bd80      	pop	{r7, pc}
	...

0800d2e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d2e8:	b480      	push	{r7}
 800d2ea:	b083      	sub	sp, #12
 800d2ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2ee:	f3ef 8305 	mrs	r3, IPSR
 800d2f2:	603b      	str	r3, [r7, #0]
  return(result);
 800d2f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d003      	beq.n	800d302 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d2fa:	f06f 0305 	mvn.w	r3, #5
 800d2fe:	607b      	str	r3, [r7, #4]
 800d300:	e00c      	b.n	800d31c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d302:	4b0a      	ldr	r3, [pc, #40]	; (800d32c <osKernelInitialize+0x44>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d105      	bne.n	800d316 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d30a:	4b08      	ldr	r3, [pc, #32]	; (800d32c <osKernelInitialize+0x44>)
 800d30c:	2201      	movs	r2, #1
 800d30e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d310:	2300      	movs	r3, #0
 800d312:	607b      	str	r3, [r7, #4]
 800d314:	e002      	b.n	800d31c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d31a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d31c:	687b      	ldr	r3, [r7, #4]
}
 800d31e:	4618      	mov	r0, r3
 800d320:	370c      	adds	r7, #12
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr
 800d32a:	bf00      	nop
 800d32c:	200027d8 	.word	0x200027d8

0800d330 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d336:	f3ef 8305 	mrs	r3, IPSR
 800d33a:	603b      	str	r3, [r7, #0]
  return(result);
 800d33c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d003      	beq.n	800d34a <osKernelStart+0x1a>
    stat = osErrorISR;
 800d342:	f06f 0305 	mvn.w	r3, #5
 800d346:	607b      	str	r3, [r7, #4]
 800d348:	e010      	b.n	800d36c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d34a:	4b0b      	ldr	r3, [pc, #44]	; (800d378 <osKernelStart+0x48>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	2b01      	cmp	r3, #1
 800d350:	d109      	bne.n	800d366 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d352:	f7ff ffbf 	bl	800d2d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d356:	4b08      	ldr	r3, [pc, #32]	; (800d378 <osKernelStart+0x48>)
 800d358:	2202      	movs	r2, #2
 800d35a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d35c:	f001 fea0 	bl	800f0a0 <vTaskStartScheduler>
      stat = osOK;
 800d360:	2300      	movs	r3, #0
 800d362:	607b      	str	r3, [r7, #4]
 800d364:	e002      	b.n	800d36c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d36a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d36c:	687b      	ldr	r3, [r7, #4]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3708      	adds	r7, #8
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	200027d8 	.word	0x200027d8

0800d37c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d382:	f3ef 8305 	mrs	r3, IPSR
 800d386:	603b      	str	r3, [r7, #0]
  return(result);
 800d388:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d003      	beq.n	800d396 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800d38e:	f001 ffb3 	bl	800f2f8 <xTaskGetTickCountFromISR>
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	e002      	b.n	800d39c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800d396:	f001 ff9f 	bl	800f2d8 <xTaskGetTickCount>
 800d39a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800d39c:	687b      	ldr	r3, [r7, #4]
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3708      	adds	r7, #8
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}

0800d3a6 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800d3a6:	b480      	push	{r7}
 800d3a8:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800d3aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b08e      	sub	sp, #56	; 0x38
 800d3bc:	af04      	add	r7, sp, #16
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3c8:	f3ef 8305 	mrs	r3, IPSR
 800d3cc:	617b      	str	r3, [r7, #20]
  return(result);
 800d3ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d17f      	bne.n	800d4d4 <osThreadNew+0x11c>
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d07c      	beq.n	800d4d4 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800d3da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d3de:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d3e0:	2318      	movs	r3, #24
 800d3e2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d3e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3ec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d045      	beq.n	800d480 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d002      	beq.n	800d402 <osThreadNew+0x4a>
        name = attr->name;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	699b      	ldr	r3, [r3, #24]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d002      	beq.n	800d410 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	699b      	ldr	r3, [r3, #24]
 800d40e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d008      	beq.n	800d428 <osThreadNew+0x70>
 800d416:	69fb      	ldr	r3, [r7, #28]
 800d418:	2b38      	cmp	r3, #56	; 0x38
 800d41a:	d805      	bhi.n	800d428 <osThreadNew+0x70>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	f003 0301 	and.w	r3, r3, #1
 800d424:	2b00      	cmp	r3, #0
 800d426:	d001      	beq.n	800d42c <osThreadNew+0x74>
        return (NULL);
 800d428:	2300      	movs	r3, #0
 800d42a:	e054      	b.n	800d4d6 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	695b      	ldr	r3, [r3, #20]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d003      	beq.n	800d43c <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	695b      	ldr	r3, [r3, #20]
 800d438:	089b      	lsrs	r3, r3, #2
 800d43a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	689b      	ldr	r3, [r3, #8]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d00e      	beq.n	800d462 <osThreadNew+0xaa>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	2bab      	cmp	r3, #171	; 0xab
 800d44a:	d90a      	bls.n	800d462 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d450:	2b00      	cmp	r3, #0
 800d452:	d006      	beq.n	800d462 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	695b      	ldr	r3, [r3, #20]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d002      	beq.n	800d462 <osThreadNew+0xaa>
        mem = 1;
 800d45c:	2301      	movs	r3, #1
 800d45e:	61bb      	str	r3, [r7, #24]
 800d460:	e010      	b.n	800d484 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	689b      	ldr	r3, [r3, #8]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d10c      	bne.n	800d484 <osThreadNew+0xcc>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d108      	bne.n	800d484 <osThreadNew+0xcc>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	691b      	ldr	r3, [r3, #16]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d104      	bne.n	800d484 <osThreadNew+0xcc>
          mem = 0;
 800d47a:	2300      	movs	r3, #0
 800d47c:	61bb      	str	r3, [r7, #24]
 800d47e:	e001      	b.n	800d484 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800d480:	2300      	movs	r3, #0
 800d482:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d484:	69bb      	ldr	r3, [r7, #24]
 800d486:	2b01      	cmp	r3, #1
 800d488:	d110      	bne.n	800d4ac <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d492:	9202      	str	r2, [sp, #8]
 800d494:	9301      	str	r3, [sp, #4]
 800d496:	69fb      	ldr	r3, [r7, #28]
 800d498:	9300      	str	r3, [sp, #0]
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	6a3a      	ldr	r2, [r7, #32]
 800d49e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d4a0:	68f8      	ldr	r0, [r7, #12]
 800d4a2:	f001 fc11 	bl	800ecc8 <xTaskCreateStatic>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	613b      	str	r3, [r7, #16]
 800d4aa:	e013      	b.n	800d4d4 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800d4ac:	69bb      	ldr	r3, [r7, #24]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d110      	bne.n	800d4d4 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d4b2:	6a3b      	ldr	r3, [r7, #32]
 800d4b4:	b29a      	uxth	r2, r3
 800d4b6:	f107 0310 	add.w	r3, r7, #16
 800d4ba:	9301      	str	r3, [sp, #4]
 800d4bc:	69fb      	ldr	r3, [r7, #28]
 800d4be:	9300      	str	r3, [sp, #0]
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d4c4:	68f8      	ldr	r0, [r7, #12]
 800d4c6:	f001 fc5c 	bl	800ed82 <xTaskCreate>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d001      	beq.n	800d4d4 <osThreadNew+0x11c>
            hTask = NULL;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d4d4:	693b      	ldr	r3, [r7, #16]
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3728      	adds	r7, #40	; 0x28
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}

0800d4de <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d4de:	b580      	push	{r7, lr}
 800d4e0:	b084      	sub	sp, #16
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4e6:	f3ef 8305 	mrs	r3, IPSR
 800d4ea:	60bb      	str	r3, [r7, #8]
  return(result);
 800d4ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d003      	beq.n	800d4fa <osDelay+0x1c>
    stat = osErrorISR;
 800d4f2:	f06f 0305 	mvn.w	r3, #5
 800d4f6:	60fb      	str	r3, [r7, #12]
 800d4f8:	e007      	b.n	800d50a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d002      	beq.n	800d50a <osDelay+0x2c>
      vTaskDelay(ticks);
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f001 fd97 	bl	800f038 <vTaskDelay>
    }
  }

  return (stat);
 800d50a:	68fb      	ldr	r3, [r7, #12]
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3710      	adds	r7, #16
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d514:	b580      	push	{r7, lr}
 800d516:	b088      	sub	sp, #32
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d51c:	2300      	movs	r3, #0
 800d51e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d520:	f3ef 8305 	mrs	r3, IPSR
 800d524:	60bb      	str	r3, [r7, #8]
  return(result);
 800d526:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d174      	bne.n	800d616 <osMutexNew+0x102>
    if (attr != NULL) {
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d003      	beq.n	800d53a <osMutexNew+0x26>
      type = attr->attr_bits;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	61bb      	str	r3, [r7, #24]
 800d538:	e001      	b.n	800d53e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800d53a:	2300      	movs	r3, #0
 800d53c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d53e:	69bb      	ldr	r3, [r7, #24]
 800d540:	f003 0301 	and.w	r3, r3, #1
 800d544:	2b00      	cmp	r3, #0
 800d546:	d002      	beq.n	800d54e <osMutexNew+0x3a>
      rmtx = 1U;
 800d548:	2301      	movs	r3, #1
 800d54a:	617b      	str	r3, [r7, #20]
 800d54c:	e001      	b.n	800d552 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800d54e:	2300      	movs	r3, #0
 800d550:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	f003 0308 	and.w	r3, r3, #8
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d15c      	bne.n	800d616 <osMutexNew+0x102>
      mem = -1;
 800d55c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d560:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d015      	beq.n	800d594 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	689b      	ldr	r3, [r3, #8]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d006      	beq.n	800d57e <osMutexNew+0x6a>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	68db      	ldr	r3, [r3, #12]
 800d574:	2b4f      	cmp	r3, #79	; 0x4f
 800d576:	d902      	bls.n	800d57e <osMutexNew+0x6a>
          mem = 1;
 800d578:	2301      	movs	r3, #1
 800d57a:	613b      	str	r3, [r7, #16]
 800d57c:	e00c      	b.n	800d598 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	689b      	ldr	r3, [r3, #8]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d108      	bne.n	800d598 <osMutexNew+0x84>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	68db      	ldr	r3, [r3, #12]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d104      	bne.n	800d598 <osMutexNew+0x84>
            mem = 0;
 800d58e:	2300      	movs	r3, #0
 800d590:	613b      	str	r3, [r7, #16]
 800d592:	e001      	b.n	800d598 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800d594:	2300      	movs	r3, #0
 800d596:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d112      	bne.n	800d5c4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d007      	beq.n	800d5b4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	689b      	ldr	r3, [r3, #8]
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	2004      	movs	r0, #4
 800d5ac:	f000 fc37 	bl	800de1e <xQueueCreateMutexStatic>
 800d5b0:	61f8      	str	r0, [r7, #28]
 800d5b2:	e016      	b.n	800d5e2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	689b      	ldr	r3, [r3, #8]
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	2001      	movs	r0, #1
 800d5bc:	f000 fc2f 	bl	800de1e <xQueueCreateMutexStatic>
 800d5c0:	61f8      	str	r0, [r7, #28]
 800d5c2:	e00e      	b.n	800d5e2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d10b      	bne.n	800d5e2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d004      	beq.n	800d5da <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800d5d0:	2004      	movs	r0, #4
 800d5d2:	f000 fc0c 	bl	800ddee <xQueueCreateMutex>
 800d5d6:	61f8      	str	r0, [r7, #28]
 800d5d8:	e003      	b.n	800d5e2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800d5da:	2001      	movs	r0, #1
 800d5dc:	f000 fc07 	bl	800ddee <xQueueCreateMutex>
 800d5e0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d5e2:	69fb      	ldr	r3, [r7, #28]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d00c      	beq.n	800d602 <osMutexNew+0xee>
        if (attr != NULL) {
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d003      	beq.n	800d5f6 <osMutexNew+0xe2>
          name = attr->name;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	60fb      	str	r3, [r7, #12]
 800d5f4:	e001      	b.n	800d5fa <osMutexNew+0xe6>
        } else {
          name = NULL;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800d5fa:	68f9      	ldr	r1, [r7, #12]
 800d5fc:	69f8      	ldr	r0, [r7, #28]
 800d5fe:	f001 fadb 	bl	800ebb8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d602:	69fb      	ldr	r3, [r7, #28]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d006      	beq.n	800d616 <osMutexNew+0x102>
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d003      	beq.n	800d616 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d60e:	69fb      	ldr	r3, [r7, #28]
 800d610:	f043 0301 	orr.w	r3, r3, #1
 800d614:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d616:	69fb      	ldr	r3, [r7, #28]
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3720      	adds	r7, #32
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d620:	b580      	push	{r7, lr}
 800d622:	b086      	sub	sp, #24
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f023 0301 	bic.w	r3, r3, #1
 800d630:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f003 0301 	and.w	r3, r3, #1
 800d638:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d63a:	2300      	movs	r3, #0
 800d63c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d63e:	f3ef 8305 	mrs	r3, IPSR
 800d642:	60bb      	str	r3, [r7, #8]
  return(result);
 800d644:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d646:	2b00      	cmp	r3, #0
 800d648:	d003      	beq.n	800d652 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800d64a:	f06f 0305 	mvn.w	r3, #5
 800d64e:	617b      	str	r3, [r7, #20]
 800d650:	e02c      	b.n	800d6ac <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d103      	bne.n	800d660 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800d658:	f06f 0303 	mvn.w	r3, #3
 800d65c:	617b      	str	r3, [r7, #20]
 800d65e:	e025      	b.n	800d6ac <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d011      	beq.n	800d68a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d666:	6839      	ldr	r1, [r7, #0]
 800d668:	6938      	ldr	r0, [r7, #16]
 800d66a:	f000 fc27 	bl	800debc <xQueueTakeMutexRecursive>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b01      	cmp	r3, #1
 800d672:	d01b      	beq.n	800d6ac <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d003      	beq.n	800d682 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800d67a:	f06f 0301 	mvn.w	r3, #1
 800d67e:	617b      	str	r3, [r7, #20]
 800d680:	e014      	b.n	800d6ac <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d682:	f06f 0302 	mvn.w	r3, #2
 800d686:	617b      	str	r3, [r7, #20]
 800d688:	e010      	b.n	800d6ac <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d68a:	6839      	ldr	r1, [r7, #0]
 800d68c:	6938      	ldr	r0, [r7, #16]
 800d68e:	f000 ffbb 	bl	800e608 <xQueueSemaphoreTake>
 800d692:	4603      	mov	r3, r0
 800d694:	2b01      	cmp	r3, #1
 800d696:	d009      	beq.n	800d6ac <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d003      	beq.n	800d6a6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800d69e:	f06f 0301 	mvn.w	r3, #1
 800d6a2:	617b      	str	r3, [r7, #20]
 800d6a4:	e002      	b.n	800d6ac <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d6a6:	f06f 0302 	mvn.w	r3, #2
 800d6aa:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800d6ac:	697b      	ldr	r3, [r7, #20]
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3718      	adds	r7, #24
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}

0800d6b6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b086      	sub	sp, #24
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f023 0301 	bic.w	r3, r3, #1
 800d6c4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f003 0301 	and.w	r3, r3, #1
 800d6cc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6d2:	f3ef 8305 	mrs	r3, IPSR
 800d6d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800d6d8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d003      	beq.n	800d6e6 <osMutexRelease+0x30>
    stat = osErrorISR;
 800d6de:	f06f 0305 	mvn.w	r3, #5
 800d6e2:	617b      	str	r3, [r7, #20]
 800d6e4:	e01f      	b.n	800d726 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d103      	bne.n	800d6f4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800d6ec:	f06f 0303 	mvn.w	r3, #3
 800d6f0:	617b      	str	r3, [r7, #20]
 800d6f2:	e018      	b.n	800d726 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d009      	beq.n	800d70e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d6fa:	6938      	ldr	r0, [r7, #16]
 800d6fc:	f000 fbaa 	bl	800de54 <xQueueGiveMutexRecursive>
 800d700:	4603      	mov	r3, r0
 800d702:	2b01      	cmp	r3, #1
 800d704:	d00f      	beq.n	800d726 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d706:	f06f 0302 	mvn.w	r3, #2
 800d70a:	617b      	str	r3, [r7, #20]
 800d70c:	e00b      	b.n	800d726 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d70e:	2300      	movs	r3, #0
 800d710:	2200      	movs	r2, #0
 800d712:	2100      	movs	r1, #0
 800d714:	6938      	ldr	r0, [r7, #16]
 800d716:	f000 fc71 	bl	800dffc <xQueueGenericSend>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d002      	beq.n	800d726 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d720:	f06f 0302 	mvn.w	r3, #2
 800d724:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d726:	697b      	ldr	r3, [r7, #20]
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3718      	adds	r7, #24
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d730:	b580      	push	{r7, lr}
 800d732:	b08a      	sub	sp, #40	; 0x28
 800d734:	af02      	add	r7, sp, #8
 800d736:	60f8      	str	r0, [r7, #12]
 800d738:	60b9      	str	r1, [r7, #8]
 800d73a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d73c:	2300      	movs	r3, #0
 800d73e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d740:	f3ef 8305 	mrs	r3, IPSR
 800d744:	613b      	str	r3, [r7, #16]
  return(result);
 800d746:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d175      	bne.n	800d838 <osSemaphoreNew+0x108>
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d072      	beq.n	800d838 <osSemaphoreNew+0x108>
 800d752:	68ba      	ldr	r2, [r7, #8]
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	429a      	cmp	r2, r3
 800d758:	d86e      	bhi.n	800d838 <osSemaphoreNew+0x108>
    mem = -1;
 800d75a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d75e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d015      	beq.n	800d792 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	689b      	ldr	r3, [r3, #8]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d006      	beq.n	800d77c <osSemaphoreNew+0x4c>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	68db      	ldr	r3, [r3, #12]
 800d772:	2b4f      	cmp	r3, #79	; 0x4f
 800d774:	d902      	bls.n	800d77c <osSemaphoreNew+0x4c>
        mem = 1;
 800d776:	2301      	movs	r3, #1
 800d778:	61bb      	str	r3, [r7, #24]
 800d77a:	e00c      	b.n	800d796 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	689b      	ldr	r3, [r3, #8]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d108      	bne.n	800d796 <osSemaphoreNew+0x66>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	68db      	ldr	r3, [r3, #12]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d104      	bne.n	800d796 <osSemaphoreNew+0x66>
          mem = 0;
 800d78c:	2300      	movs	r3, #0
 800d78e:	61bb      	str	r3, [r7, #24]
 800d790:	e001      	b.n	800d796 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800d792:	2300      	movs	r3, #0
 800d794:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800d796:	69bb      	ldr	r3, [r7, #24]
 800d798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d79c:	d04c      	beq.n	800d838 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	d128      	bne.n	800d7f6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800d7a4:	69bb      	ldr	r3, [r7, #24]
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	d10a      	bne.n	800d7c0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	689b      	ldr	r3, [r3, #8]
 800d7ae:	2203      	movs	r2, #3
 800d7b0:	9200      	str	r2, [sp, #0]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	2100      	movs	r1, #0
 800d7b6:	2001      	movs	r0, #1
 800d7b8:	f000 fa2a 	bl	800dc10 <xQueueGenericCreateStatic>
 800d7bc:	61f8      	str	r0, [r7, #28]
 800d7be:	e005      	b.n	800d7cc <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800d7c0:	2203      	movs	r2, #3
 800d7c2:	2100      	movs	r1, #0
 800d7c4:	2001      	movs	r0, #1
 800d7c6:	f000 fa9b 	bl	800dd00 <xQueueGenericCreate>
 800d7ca:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d022      	beq.n	800d818 <osSemaphoreNew+0xe8>
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d01f      	beq.n	800d818 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d7d8:	2300      	movs	r3, #0
 800d7da:	2200      	movs	r2, #0
 800d7dc:	2100      	movs	r1, #0
 800d7de:	69f8      	ldr	r0, [r7, #28]
 800d7e0:	f000 fc0c 	bl	800dffc <xQueueGenericSend>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b01      	cmp	r3, #1
 800d7e8:	d016      	beq.n	800d818 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800d7ea:	69f8      	ldr	r0, [r7, #28]
 800d7ec:	f001 f898 	bl	800e920 <vQueueDelete>
            hSemaphore = NULL;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	61fb      	str	r3, [r7, #28]
 800d7f4:	e010      	b.n	800d818 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800d7f6:	69bb      	ldr	r3, [r7, #24]
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	d108      	bne.n	800d80e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	689b      	ldr	r3, [r3, #8]
 800d800:	461a      	mov	r2, r3
 800d802:	68b9      	ldr	r1, [r7, #8]
 800d804:	68f8      	ldr	r0, [r7, #12]
 800d806:	f000 fb8f 	bl	800df28 <xQueueCreateCountingSemaphoreStatic>
 800d80a:	61f8      	str	r0, [r7, #28]
 800d80c:	e004      	b.n	800d818 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d80e:	68b9      	ldr	r1, [r7, #8]
 800d810:	68f8      	ldr	r0, [r7, #12]
 800d812:	f000 fbc0 	bl	800df96 <xQueueCreateCountingSemaphore>
 800d816:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d818:	69fb      	ldr	r3, [r7, #28]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d00c      	beq.n	800d838 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d003      	beq.n	800d82c <osSemaphoreNew+0xfc>
          name = attr->name;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	617b      	str	r3, [r7, #20]
 800d82a:	e001      	b.n	800d830 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800d82c:	2300      	movs	r3, #0
 800d82e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d830:	6979      	ldr	r1, [r7, #20]
 800d832:	69f8      	ldr	r0, [r7, #28]
 800d834:	f001 f9c0 	bl	800ebb8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d838:	69fb      	ldr	r3, [r7, #28]
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3720      	adds	r7, #32
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
	...

0800d844 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d844:	b580      	push	{r7, lr}
 800d846:	b086      	sub	sp, #24
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d852:	2300      	movs	r3, #0
 800d854:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d103      	bne.n	800d864 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d85c:	f06f 0303 	mvn.w	r3, #3
 800d860:	617b      	str	r3, [r7, #20]
 800d862:	e039      	b.n	800d8d8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d864:	f3ef 8305 	mrs	r3, IPSR
 800d868:	60fb      	str	r3, [r7, #12]
  return(result);
 800d86a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d022      	beq.n	800d8b6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d003      	beq.n	800d87e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800d876:	f06f 0303 	mvn.w	r3, #3
 800d87a:	617b      	str	r3, [r7, #20]
 800d87c:	e02c      	b.n	800d8d8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800d87e:	2300      	movs	r3, #0
 800d880:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d882:	f107 0308 	add.w	r3, r7, #8
 800d886:	461a      	mov	r2, r3
 800d888:	2100      	movs	r1, #0
 800d88a:	6938      	ldr	r0, [r7, #16]
 800d88c:	f000 ffc8 	bl	800e820 <xQueueReceiveFromISR>
 800d890:	4603      	mov	r3, r0
 800d892:	2b01      	cmp	r3, #1
 800d894:	d003      	beq.n	800d89e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800d896:	f06f 0302 	mvn.w	r3, #2
 800d89a:	617b      	str	r3, [r7, #20]
 800d89c:	e01c      	b.n	800d8d8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d019      	beq.n	800d8d8 <osSemaphoreAcquire+0x94>
 800d8a4:	4b0f      	ldr	r3, [pc, #60]	; (800d8e4 <osSemaphoreAcquire+0xa0>)
 800d8a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8aa:	601a      	str	r2, [r3, #0]
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	f3bf 8f6f 	isb	sy
 800d8b4:	e010      	b.n	800d8d8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d8b6:	6839      	ldr	r1, [r7, #0]
 800d8b8:	6938      	ldr	r0, [r7, #16]
 800d8ba:	f000 fea5 	bl	800e608 <xQueueSemaphoreTake>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d009      	beq.n	800d8d8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d003      	beq.n	800d8d2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800d8ca:	f06f 0301 	mvn.w	r3, #1
 800d8ce:	617b      	str	r3, [r7, #20]
 800d8d0:	e002      	b.n	800d8d8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800d8d2:	f06f 0302 	mvn.w	r3, #2
 800d8d6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d8d8:	697b      	ldr	r3, [r7, #20]
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3718      	adds	r7, #24
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	e000ed04 	.word	0xe000ed04

0800d8e8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b086      	sub	sp, #24
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d103      	bne.n	800d906 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d8fe:	f06f 0303 	mvn.w	r3, #3
 800d902:	617b      	str	r3, [r7, #20]
 800d904:	e02c      	b.n	800d960 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d906:	f3ef 8305 	mrs	r3, IPSR
 800d90a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d90c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d01a      	beq.n	800d948 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800d912:	2300      	movs	r3, #0
 800d914:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d916:	f107 0308 	add.w	r3, r7, #8
 800d91a:	4619      	mov	r1, r3
 800d91c:	6938      	ldr	r0, [r7, #16]
 800d91e:	f000 fd06 	bl	800e32e <xQueueGiveFromISR>
 800d922:	4603      	mov	r3, r0
 800d924:	2b01      	cmp	r3, #1
 800d926:	d003      	beq.n	800d930 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800d928:	f06f 0302 	mvn.w	r3, #2
 800d92c:	617b      	str	r3, [r7, #20]
 800d92e:	e017      	b.n	800d960 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d014      	beq.n	800d960 <osSemaphoreRelease+0x78>
 800d936:	4b0d      	ldr	r3, [pc, #52]	; (800d96c <osSemaphoreRelease+0x84>)
 800d938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d93c:	601a      	str	r2, [r3, #0]
 800d93e:	f3bf 8f4f 	dsb	sy
 800d942:	f3bf 8f6f 	isb	sy
 800d946:	e00b      	b.n	800d960 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d948:	2300      	movs	r3, #0
 800d94a:	2200      	movs	r2, #0
 800d94c:	2100      	movs	r1, #0
 800d94e:	6938      	ldr	r0, [r7, #16]
 800d950:	f000 fb54 	bl	800dffc <xQueueGenericSend>
 800d954:	4603      	mov	r3, r0
 800d956:	2b01      	cmp	r3, #1
 800d958:	d002      	beq.n	800d960 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800d95a:	f06f 0302 	mvn.w	r3, #2
 800d95e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d960:	697b      	ldr	r3, [r7, #20]
}
 800d962:	4618      	mov	r0, r3
 800d964:	3718      	adds	r7, #24
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	e000ed04 	.word	0xe000ed04

0800d970 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d970:	b480      	push	{r7}
 800d972:	b085      	sub	sp, #20
 800d974:	af00      	add	r7, sp, #0
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	4a07      	ldr	r2, [pc, #28]	; (800d99c <vApplicationGetIdleTaskMemory+0x2c>)
 800d980:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	4a06      	ldr	r2, [pc, #24]	; (800d9a0 <vApplicationGetIdleTaskMemory+0x30>)
 800d986:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d98e:	601a      	str	r2, [r3, #0]
}
 800d990:	bf00      	nop
 800d992:	3714      	adds	r7, #20
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr
 800d99c:	200027dc 	.word	0x200027dc
 800d9a0:	20002888 	.word	0x20002888

0800d9a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d9a4:	b480      	push	{r7}
 800d9a6:	b085      	sub	sp, #20
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	60f8      	str	r0, [r7, #12]
 800d9ac:	60b9      	str	r1, [r7, #8]
 800d9ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	4a07      	ldr	r2, [pc, #28]	; (800d9d0 <vApplicationGetTimerTaskMemory+0x2c>)
 800d9b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	4a06      	ldr	r2, [pc, #24]	; (800d9d4 <vApplicationGetTimerTaskMemory+0x30>)
 800d9ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9c2:	601a      	str	r2, [r3, #0]
}
 800d9c4:	bf00      	nop
 800d9c6:	3714      	adds	r7, #20
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr
 800d9d0:	20002c88 	.word	0x20002c88
 800d9d4:	20002d34 	.word	0x20002d34

0800d9d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f103 0208 	add.w	r2, r3, #8
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d9f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f103 0208 	add.w	r2, r3, #8
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f103 0208 	add.w	r2, r3, #8
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2200      	movs	r2, #0
 800da0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800da0c:	bf00      	nop
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800da18:	b480      	push	{r7}
 800da1a:	b083      	sub	sp, #12
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2200      	movs	r2, #0
 800da24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800da26:	bf00      	nop
 800da28:	370c      	adds	r7, #12
 800da2a:	46bd      	mov	sp, r7
 800da2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da30:	4770      	bx	lr

0800da32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800da32:	b480      	push	{r7}
 800da34:	b085      	sub	sp, #20
 800da36:	af00      	add	r7, sp, #0
 800da38:	6078      	str	r0, [r7, #4]
 800da3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	68fa      	ldr	r2, [r7, #12]
 800da46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	689a      	ldr	r2, [r3, #8]
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	689b      	ldr	r3, [r3, #8]
 800da54:	683a      	ldr	r2, [r7, #0]
 800da56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	683a      	ldr	r2, [r7, #0]
 800da5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	1c5a      	adds	r2, r3, #1
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	601a      	str	r2, [r3, #0]
}
 800da6e:	bf00      	nop
 800da70:	3714      	adds	r7, #20
 800da72:	46bd      	mov	sp, r7
 800da74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da78:	4770      	bx	lr

0800da7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800da7a:	b480      	push	{r7}
 800da7c:	b085      	sub	sp, #20
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
 800da82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da90:	d103      	bne.n	800da9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	691b      	ldr	r3, [r3, #16]
 800da96:	60fb      	str	r3, [r7, #12]
 800da98:	e00c      	b.n	800dab4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	3308      	adds	r3, #8
 800da9e:	60fb      	str	r3, [r7, #12]
 800daa0:	e002      	b.n	800daa8 <vListInsert+0x2e>
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	60fb      	str	r3, [r7, #12]
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	685b      	ldr	r3, [r3, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	68ba      	ldr	r2, [r7, #8]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d2f6      	bcs.n	800daa2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	685a      	ldr	r2, [r3, #4]
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	683a      	ldr	r2, [r7, #0]
 800dac2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	68fa      	ldr	r2, [r7, #12]
 800dac8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	683a      	ldr	r2, [r7, #0]
 800dace:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	1c5a      	adds	r2, r3, #1
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	601a      	str	r2, [r3, #0]
}
 800dae0:	bf00      	nop
 800dae2:	3714      	adds	r7, #20
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr

0800daec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800daec:	b480      	push	{r7}
 800daee:	b085      	sub	sp, #20
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	691b      	ldr	r3, [r3, #16]
 800daf8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	6892      	ldr	r2, [r2, #8]
 800db02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	6852      	ldr	r2, [r2, #4]
 800db0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	685b      	ldr	r3, [r3, #4]
 800db12:	687a      	ldr	r2, [r7, #4]
 800db14:	429a      	cmp	r2, r3
 800db16:	d103      	bne.n	800db20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	689a      	ldr	r2, [r3, #8]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2200      	movs	r2, #0
 800db24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	1e5a      	subs	r2, r3, #1
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
}
 800db34:	4618      	mov	r0, r3
 800db36:	3714      	adds	r7, #20
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr

0800db40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d10a      	bne.n	800db6a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800db54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db58:	f383 8811 	msr	BASEPRI, r3
 800db5c:	f3bf 8f6f 	isb	sy
 800db60:	f3bf 8f4f 	dsb	sy
 800db64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800db66:	bf00      	nop
 800db68:	e7fe      	b.n	800db68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800db6a:	f002 fd73 	bl	8010654 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681a      	ldr	r2, [r3, #0]
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db76:	68f9      	ldr	r1, [r7, #12]
 800db78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800db7a:	fb01 f303 	mul.w	r3, r1, r3
 800db7e:	441a      	add	r2, r3
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2200      	movs	r2, #0
 800db88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681a      	ldr	r2, [r3, #0]
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db9a:	3b01      	subs	r3, #1
 800db9c:	68f9      	ldr	r1, [r7, #12]
 800db9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dba0:	fb01 f303 	mul.w	r3, r1, r3
 800dba4:	441a      	add	r2, r3
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	22ff      	movs	r2, #255	; 0xff
 800dbae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	22ff      	movs	r2, #255	; 0xff
 800dbb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d114      	bne.n	800dbea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	691b      	ldr	r3, [r3, #16]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d01a      	beq.n	800dbfe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	3310      	adds	r3, #16
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f001 fd13 	bl	800f5f8 <xTaskRemoveFromEventList>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d012      	beq.n	800dbfe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dbd8:	4b0c      	ldr	r3, [pc, #48]	; (800dc0c <xQueueGenericReset+0xcc>)
 800dbda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbde:	601a      	str	r2, [r3, #0]
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	f3bf 8f6f 	isb	sy
 800dbe8:	e009      	b.n	800dbfe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	3310      	adds	r3, #16
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7ff fef2 	bl	800d9d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	3324      	adds	r3, #36	; 0x24
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7ff feed 	bl	800d9d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dbfe:	f002 fd59 	bl	80106b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dc02:	2301      	movs	r3, #1
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3710      	adds	r7, #16
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	e000ed04 	.word	0xe000ed04

0800dc10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b08e      	sub	sp, #56	; 0x38
 800dc14:	af02      	add	r7, sp, #8
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	607a      	str	r2, [r7, #4]
 800dc1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d10a      	bne.n	800dc3a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800dc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc28:	f383 8811 	msr	BASEPRI, r3
 800dc2c:	f3bf 8f6f 	isb	sy
 800dc30:	f3bf 8f4f 	dsb	sy
 800dc34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dc36:	bf00      	nop
 800dc38:	e7fe      	b.n	800dc38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d10a      	bne.n	800dc56 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800dc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc44:	f383 8811 	msr	BASEPRI, r3
 800dc48:	f3bf 8f6f 	isb	sy
 800dc4c:	f3bf 8f4f 	dsb	sy
 800dc50:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dc52:	bf00      	nop
 800dc54:	e7fe      	b.n	800dc54 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d002      	beq.n	800dc62 <xQueueGenericCreateStatic+0x52>
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d001      	beq.n	800dc66 <xQueueGenericCreateStatic+0x56>
 800dc62:	2301      	movs	r3, #1
 800dc64:	e000      	b.n	800dc68 <xQueueGenericCreateStatic+0x58>
 800dc66:	2300      	movs	r3, #0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d10a      	bne.n	800dc82 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800dc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc70:	f383 8811 	msr	BASEPRI, r3
 800dc74:	f3bf 8f6f 	isb	sy
 800dc78:	f3bf 8f4f 	dsb	sy
 800dc7c:	623b      	str	r3, [r7, #32]
}
 800dc7e:	bf00      	nop
 800dc80:	e7fe      	b.n	800dc80 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d102      	bne.n	800dc8e <xQueueGenericCreateStatic+0x7e>
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d101      	bne.n	800dc92 <xQueueGenericCreateStatic+0x82>
 800dc8e:	2301      	movs	r3, #1
 800dc90:	e000      	b.n	800dc94 <xQueueGenericCreateStatic+0x84>
 800dc92:	2300      	movs	r3, #0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d10a      	bne.n	800dcae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800dc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc9c:	f383 8811 	msr	BASEPRI, r3
 800dca0:	f3bf 8f6f 	isb	sy
 800dca4:	f3bf 8f4f 	dsb	sy
 800dca8:	61fb      	str	r3, [r7, #28]
}
 800dcaa:	bf00      	nop
 800dcac:	e7fe      	b.n	800dcac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dcae:	2350      	movs	r3, #80	; 0x50
 800dcb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	2b50      	cmp	r3, #80	; 0x50
 800dcb6:	d00a      	beq.n	800dcce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800dcb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcbc:	f383 8811 	msr	BASEPRI, r3
 800dcc0:	f3bf 8f6f 	isb	sy
 800dcc4:	f3bf 8f4f 	dsb	sy
 800dcc8:	61bb      	str	r3, [r7, #24]
}
 800dcca:	bf00      	nop
 800dccc:	e7fe      	b.n	800dccc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dcce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800dcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00d      	beq.n	800dcf6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dcda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcdc:	2201      	movs	r2, #1
 800dcde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dce2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800dce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce8:	9300      	str	r3, [sp, #0]
 800dcea:	4613      	mov	r3, r2
 800dcec:	687a      	ldr	r2, [r7, #4]
 800dcee:	68b9      	ldr	r1, [r7, #8]
 800dcf0:	68f8      	ldr	r0, [r7, #12]
 800dcf2:	f000 f83f 	bl	800dd74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dcf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3730      	adds	r7, #48	; 0x30
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b08a      	sub	sp, #40	; 0x28
 800dd04:	af02      	add	r7, sp, #8
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	4613      	mov	r3, r2
 800dd0c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d10a      	bne.n	800dd2a <xQueueGenericCreate+0x2a>
	__asm volatile
 800dd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd18:	f383 8811 	msr	BASEPRI, r3
 800dd1c:	f3bf 8f6f 	isb	sy
 800dd20:	f3bf 8f4f 	dsb	sy
 800dd24:	613b      	str	r3, [r7, #16]
}
 800dd26:	bf00      	nop
 800dd28:	e7fe      	b.n	800dd28 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	68ba      	ldr	r2, [r7, #8]
 800dd2e:	fb02 f303 	mul.w	r3, r2, r3
 800dd32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dd34:	69fb      	ldr	r3, [r7, #28]
 800dd36:	3350      	adds	r3, #80	; 0x50
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f002 fdad 	bl	8010898 <pvPortMalloc>
 800dd3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dd40:	69bb      	ldr	r3, [r7, #24]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d011      	beq.n	800dd6a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dd46:	69bb      	ldr	r3, [r7, #24]
 800dd48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	3350      	adds	r3, #80	; 0x50
 800dd4e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dd50:	69bb      	ldr	r3, [r7, #24]
 800dd52:	2200      	movs	r2, #0
 800dd54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dd58:	79fa      	ldrb	r2, [r7, #7]
 800dd5a:	69bb      	ldr	r3, [r7, #24]
 800dd5c:	9300      	str	r3, [sp, #0]
 800dd5e:	4613      	mov	r3, r2
 800dd60:	697a      	ldr	r2, [r7, #20]
 800dd62:	68b9      	ldr	r1, [r7, #8]
 800dd64:	68f8      	ldr	r0, [r7, #12]
 800dd66:	f000 f805 	bl	800dd74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dd6a:	69bb      	ldr	r3, [r7, #24]
	}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3720      	adds	r7, #32
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	60f8      	str	r0, [r7, #12]
 800dd7c:	60b9      	str	r1, [r7, #8]
 800dd7e:	607a      	str	r2, [r7, #4]
 800dd80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d103      	bne.n	800dd90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dd88:	69bb      	ldr	r3, [r7, #24]
 800dd8a:	69ba      	ldr	r2, [r7, #24]
 800dd8c:	601a      	str	r2, [r3, #0]
 800dd8e:	e002      	b.n	800dd96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dd90:	69bb      	ldr	r3, [r7, #24]
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dd96:	69bb      	ldr	r3, [r7, #24]
 800dd98:	68fa      	ldr	r2, [r7, #12]
 800dd9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dd9c:	69bb      	ldr	r3, [r7, #24]
 800dd9e:	68ba      	ldr	r2, [r7, #8]
 800dda0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dda2:	2101      	movs	r1, #1
 800dda4:	69b8      	ldr	r0, [r7, #24]
 800dda6:	f7ff fecb 	bl	800db40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ddaa:	69bb      	ldr	r3, [r7, #24]
 800ddac:	78fa      	ldrb	r2, [r7, #3]
 800ddae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ddb2:	bf00      	nop
 800ddb4:	3710      	adds	r7, #16
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b082      	sub	sp, #8
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d00e      	beq.n	800dde6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ddda:	2300      	movs	r3, #0
 800dddc:	2200      	movs	r2, #0
 800ddde:	2100      	movs	r1, #0
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f000 f90b 	bl	800dffc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800dde6:	bf00      	nop
 800dde8:	3708      	adds	r7, #8
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}

0800ddee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ddee:	b580      	push	{r7, lr}
 800ddf0:	b086      	sub	sp, #24
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	617b      	str	r3, [r7, #20]
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800de00:	79fb      	ldrb	r3, [r7, #7]
 800de02:	461a      	mov	r2, r3
 800de04:	6939      	ldr	r1, [r7, #16]
 800de06:	6978      	ldr	r0, [r7, #20]
 800de08:	f7ff ff7a 	bl	800dd00 <xQueueGenericCreate>
 800de0c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800de0e:	68f8      	ldr	r0, [r7, #12]
 800de10:	f7ff ffd3 	bl	800ddba <prvInitialiseMutex>

		return xNewQueue;
 800de14:	68fb      	ldr	r3, [r7, #12]
	}
 800de16:	4618      	mov	r0, r3
 800de18:	3718      	adds	r7, #24
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800de1e:	b580      	push	{r7, lr}
 800de20:	b088      	sub	sp, #32
 800de22:	af02      	add	r7, sp, #8
 800de24:	4603      	mov	r3, r0
 800de26:	6039      	str	r1, [r7, #0]
 800de28:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800de2a:	2301      	movs	r3, #1
 800de2c:	617b      	str	r3, [r7, #20]
 800de2e:	2300      	movs	r3, #0
 800de30:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800de32:	79fb      	ldrb	r3, [r7, #7]
 800de34:	9300      	str	r3, [sp, #0]
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	2200      	movs	r2, #0
 800de3a:	6939      	ldr	r1, [r7, #16]
 800de3c:	6978      	ldr	r0, [r7, #20]
 800de3e:	f7ff fee7 	bl	800dc10 <xQueueGenericCreateStatic>
 800de42:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800de44:	68f8      	ldr	r0, [r7, #12]
 800de46:	f7ff ffb8 	bl	800ddba <prvInitialiseMutex>

		return xNewQueue;
 800de4a:	68fb      	ldr	r3, [r7, #12]
	}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3718      	adds	r7, #24
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}

0800de54 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800de54:	b590      	push	{r4, r7, lr}
 800de56:	b087      	sub	sp, #28
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d10a      	bne.n	800de7c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800de66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6a:	f383 8811 	msr	BASEPRI, r3
 800de6e:	f3bf 8f6f 	isb	sy
 800de72:	f3bf 8f4f 	dsb	sy
 800de76:	60fb      	str	r3, [r7, #12]
}
 800de78:	bf00      	nop
 800de7a:	e7fe      	b.n	800de7a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	689c      	ldr	r4, [r3, #8]
 800de80:	f001 fd7c 	bl	800f97c <xTaskGetCurrentTaskHandle>
 800de84:	4603      	mov	r3, r0
 800de86:	429c      	cmp	r4, r3
 800de88:	d111      	bne.n	800deae <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	68db      	ldr	r3, [r3, #12]
 800de8e:	1e5a      	subs	r2, r3, #1
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	68db      	ldr	r3, [r3, #12]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d105      	bne.n	800dea8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800de9c:	2300      	movs	r3, #0
 800de9e:	2200      	movs	r2, #0
 800dea0:	2100      	movs	r1, #0
 800dea2:	6938      	ldr	r0, [r7, #16]
 800dea4:	f000 f8aa 	bl	800dffc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800dea8:	2301      	movs	r3, #1
 800deaa:	617b      	str	r3, [r7, #20]
 800deac:	e001      	b.n	800deb2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800deae:	2300      	movs	r3, #0
 800deb0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800deb2:	697b      	ldr	r3, [r7, #20]
	}
 800deb4:	4618      	mov	r0, r3
 800deb6:	371c      	adds	r7, #28
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd90      	pop	{r4, r7, pc}

0800debc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800debc:	b590      	push	{r4, r7, lr}
 800debe:	b087      	sub	sp, #28
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d10a      	bne.n	800dee6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800ded0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded4:	f383 8811 	msr	BASEPRI, r3
 800ded8:	f3bf 8f6f 	isb	sy
 800dedc:	f3bf 8f4f 	dsb	sy
 800dee0:	60fb      	str	r3, [r7, #12]
}
 800dee2:	bf00      	nop
 800dee4:	e7fe      	b.n	800dee4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	689c      	ldr	r4, [r3, #8]
 800deea:	f001 fd47 	bl	800f97c <xTaskGetCurrentTaskHandle>
 800deee:	4603      	mov	r3, r0
 800def0:	429c      	cmp	r4, r3
 800def2:	d107      	bne.n	800df04 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	1c5a      	adds	r2, r3, #1
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800defe:	2301      	movs	r3, #1
 800df00:	617b      	str	r3, [r7, #20]
 800df02:	e00c      	b.n	800df1e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800df04:	6839      	ldr	r1, [r7, #0]
 800df06:	6938      	ldr	r0, [r7, #16]
 800df08:	f000 fb7e 	bl	800e608 <xQueueSemaphoreTake>
 800df0c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d004      	beq.n	800df1e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	68db      	ldr	r3, [r3, #12]
 800df18:	1c5a      	adds	r2, r3, #1
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800df1e:	697b      	ldr	r3, [r7, #20]
	}
 800df20:	4618      	mov	r0, r3
 800df22:	371c      	adds	r7, #28
 800df24:	46bd      	mov	sp, r7
 800df26:	bd90      	pop	{r4, r7, pc}

0800df28 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b08a      	sub	sp, #40	; 0x28
 800df2c:	af02      	add	r7, sp, #8
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d10a      	bne.n	800df50 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800df3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df3e:	f383 8811 	msr	BASEPRI, r3
 800df42:	f3bf 8f6f 	isb	sy
 800df46:	f3bf 8f4f 	dsb	sy
 800df4a:	61bb      	str	r3, [r7, #24]
}
 800df4c:	bf00      	nop
 800df4e:	e7fe      	b.n	800df4e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800df50:	68ba      	ldr	r2, [r7, #8]
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	429a      	cmp	r2, r3
 800df56:	d90a      	bls.n	800df6e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800df58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df5c:	f383 8811 	msr	BASEPRI, r3
 800df60:	f3bf 8f6f 	isb	sy
 800df64:	f3bf 8f4f 	dsb	sy
 800df68:	617b      	str	r3, [r7, #20]
}
 800df6a:	bf00      	nop
 800df6c:	e7fe      	b.n	800df6c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800df6e:	2302      	movs	r3, #2
 800df70:	9300      	str	r3, [sp, #0]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2200      	movs	r2, #0
 800df76:	2100      	movs	r1, #0
 800df78:	68f8      	ldr	r0, [r7, #12]
 800df7a:	f7ff fe49 	bl	800dc10 <xQueueGenericCreateStatic>
 800df7e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d002      	beq.n	800df8c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800df86:	69fb      	ldr	r3, [r7, #28]
 800df88:	68ba      	ldr	r2, [r7, #8]
 800df8a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800df8c:	69fb      	ldr	r3, [r7, #28]
	}
 800df8e:	4618      	mov	r0, r3
 800df90:	3720      	adds	r7, #32
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}

0800df96 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800df96:	b580      	push	{r7, lr}
 800df98:	b086      	sub	sp, #24
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]
 800df9e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d10a      	bne.n	800dfbc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800dfa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfaa:	f383 8811 	msr	BASEPRI, r3
 800dfae:	f3bf 8f6f 	isb	sy
 800dfb2:	f3bf 8f4f 	dsb	sy
 800dfb6:	613b      	str	r3, [r7, #16]
}
 800dfb8:	bf00      	nop
 800dfba:	e7fe      	b.n	800dfba <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dfbc:	683a      	ldr	r2, [r7, #0]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d90a      	bls.n	800dfda <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800dfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc8:	f383 8811 	msr	BASEPRI, r3
 800dfcc:	f3bf 8f6f 	isb	sy
 800dfd0:	f3bf 8f4f 	dsb	sy
 800dfd4:	60fb      	str	r3, [r7, #12]
}
 800dfd6:	bf00      	nop
 800dfd8:	e7fe      	b.n	800dfd8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dfda:	2202      	movs	r2, #2
 800dfdc:	2100      	movs	r1, #0
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f7ff fe8e 	bl	800dd00 <xQueueGenericCreate>
 800dfe4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d002      	beq.n	800dff2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	683a      	ldr	r2, [r7, #0]
 800dff0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800dff2:	697b      	ldr	r3, [r7, #20]
	}
 800dff4:	4618      	mov	r0, r3
 800dff6:	3718      	adds	r7, #24
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}

0800dffc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b08e      	sub	sp, #56	; 0x38
 800e000:	af00      	add	r7, sp, #0
 800e002:	60f8      	str	r0, [r7, #12]
 800e004:	60b9      	str	r1, [r7, #8]
 800e006:	607a      	str	r2, [r7, #4]
 800e008:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e00a:	2300      	movs	r3, #0
 800e00c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e014:	2b00      	cmp	r3, #0
 800e016:	d10a      	bne.n	800e02e <xQueueGenericSend+0x32>
	__asm volatile
 800e018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e01c:	f383 8811 	msr	BASEPRI, r3
 800e020:	f3bf 8f6f 	isb	sy
 800e024:	f3bf 8f4f 	dsb	sy
 800e028:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e02a:	bf00      	nop
 800e02c:	e7fe      	b.n	800e02c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d103      	bne.n	800e03c <xQueueGenericSend+0x40>
 800e034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d101      	bne.n	800e040 <xQueueGenericSend+0x44>
 800e03c:	2301      	movs	r3, #1
 800e03e:	e000      	b.n	800e042 <xQueueGenericSend+0x46>
 800e040:	2300      	movs	r3, #0
 800e042:	2b00      	cmp	r3, #0
 800e044:	d10a      	bne.n	800e05c <xQueueGenericSend+0x60>
	__asm volatile
 800e046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e04a:	f383 8811 	msr	BASEPRI, r3
 800e04e:	f3bf 8f6f 	isb	sy
 800e052:	f3bf 8f4f 	dsb	sy
 800e056:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e058:	bf00      	nop
 800e05a:	e7fe      	b.n	800e05a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	2b02      	cmp	r3, #2
 800e060:	d103      	bne.n	800e06a <xQueueGenericSend+0x6e>
 800e062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e066:	2b01      	cmp	r3, #1
 800e068:	d101      	bne.n	800e06e <xQueueGenericSend+0x72>
 800e06a:	2301      	movs	r3, #1
 800e06c:	e000      	b.n	800e070 <xQueueGenericSend+0x74>
 800e06e:	2300      	movs	r3, #0
 800e070:	2b00      	cmp	r3, #0
 800e072:	d10a      	bne.n	800e08a <xQueueGenericSend+0x8e>
	__asm volatile
 800e074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e078:	f383 8811 	msr	BASEPRI, r3
 800e07c:	f3bf 8f6f 	isb	sy
 800e080:	f3bf 8f4f 	dsb	sy
 800e084:	623b      	str	r3, [r7, #32]
}
 800e086:	bf00      	nop
 800e088:	e7fe      	b.n	800e088 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e08a:	f001 fc87 	bl	800f99c <xTaskGetSchedulerState>
 800e08e:	4603      	mov	r3, r0
 800e090:	2b00      	cmp	r3, #0
 800e092:	d102      	bne.n	800e09a <xQueueGenericSend+0x9e>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d101      	bne.n	800e09e <xQueueGenericSend+0xa2>
 800e09a:	2301      	movs	r3, #1
 800e09c:	e000      	b.n	800e0a0 <xQueueGenericSend+0xa4>
 800e09e:	2300      	movs	r3, #0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d10a      	bne.n	800e0ba <xQueueGenericSend+0xbe>
	__asm volatile
 800e0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a8:	f383 8811 	msr	BASEPRI, r3
 800e0ac:	f3bf 8f6f 	isb	sy
 800e0b0:	f3bf 8f4f 	dsb	sy
 800e0b4:	61fb      	str	r3, [r7, #28]
}
 800e0b6:	bf00      	nop
 800e0b8:	e7fe      	b.n	800e0b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e0ba:	f002 facb 	bl	8010654 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d302      	bcc.n	800e0d0 <xQueueGenericSend+0xd4>
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	2b02      	cmp	r3, #2
 800e0ce:	d129      	bne.n	800e124 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e0d0:	683a      	ldr	r2, [r7, #0]
 800e0d2:	68b9      	ldr	r1, [r7, #8]
 800e0d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0d6:	f000 fc5e 	bl	800e996 <prvCopyDataToQueue>
 800e0da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d010      	beq.n	800e106 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e6:	3324      	adds	r3, #36	; 0x24
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f001 fa85 	bl	800f5f8 <xTaskRemoveFromEventList>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d013      	beq.n	800e11c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e0f4:	4b3f      	ldr	r3, [pc, #252]	; (800e1f4 <xQueueGenericSend+0x1f8>)
 800e0f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0fa:	601a      	str	r2, [r3, #0]
 800e0fc:	f3bf 8f4f 	dsb	sy
 800e100:	f3bf 8f6f 	isb	sy
 800e104:	e00a      	b.n	800e11c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d007      	beq.n	800e11c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e10c:	4b39      	ldr	r3, [pc, #228]	; (800e1f4 <xQueueGenericSend+0x1f8>)
 800e10e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e112:	601a      	str	r2, [r3, #0]
 800e114:	f3bf 8f4f 	dsb	sy
 800e118:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e11c:	f002 faca 	bl	80106b4 <vPortExitCritical>
				return pdPASS;
 800e120:	2301      	movs	r3, #1
 800e122:	e063      	b.n	800e1ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d103      	bne.n	800e132 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e12a:	f002 fac3 	bl	80106b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e12e:	2300      	movs	r3, #0
 800e130:	e05c      	b.n	800e1ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e134:	2b00      	cmp	r3, #0
 800e136:	d106      	bne.n	800e146 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e138:	f107 0314 	add.w	r3, r7, #20
 800e13c:	4618      	mov	r0, r3
 800e13e:	f001 fabf 	bl	800f6c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e142:	2301      	movs	r3, #1
 800e144:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e146:	f002 fab5 	bl	80106b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e14a:	f001 f819 	bl	800f180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e14e:	f002 fa81 	bl	8010654 <vPortEnterCritical>
 800e152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e158:	b25b      	sxtb	r3, r3
 800e15a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e15e:	d103      	bne.n	800e168 <xQueueGenericSend+0x16c>
 800e160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e162:	2200      	movs	r2, #0
 800e164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e16a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e16e:	b25b      	sxtb	r3, r3
 800e170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e174:	d103      	bne.n	800e17e <xQueueGenericSend+0x182>
 800e176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e178:	2200      	movs	r2, #0
 800e17a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e17e:	f002 fa99 	bl	80106b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e182:	1d3a      	adds	r2, r7, #4
 800e184:	f107 0314 	add.w	r3, r7, #20
 800e188:	4611      	mov	r1, r2
 800e18a:	4618      	mov	r0, r3
 800e18c:	f001 faae 	bl	800f6ec <xTaskCheckForTimeOut>
 800e190:	4603      	mov	r3, r0
 800e192:	2b00      	cmp	r3, #0
 800e194:	d124      	bne.n	800e1e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e198:	f000 fcf5 	bl	800eb86 <prvIsQueueFull>
 800e19c:	4603      	mov	r3, r0
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d018      	beq.n	800e1d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a4:	3310      	adds	r3, #16
 800e1a6:	687a      	ldr	r2, [r7, #4]
 800e1a8:	4611      	mov	r1, r2
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f001 f9d4 	bl	800f558 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e1b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1b2:	f000 fc80 	bl	800eab6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e1b6:	f000 fff1 	bl	800f19c <xTaskResumeAll>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	f47f af7c 	bne.w	800e0ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e1c2:	4b0c      	ldr	r3, [pc, #48]	; (800e1f4 <xQueueGenericSend+0x1f8>)
 800e1c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1c8:	601a      	str	r2, [r3, #0]
 800e1ca:	f3bf 8f4f 	dsb	sy
 800e1ce:	f3bf 8f6f 	isb	sy
 800e1d2:	e772      	b.n	800e0ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e1d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1d6:	f000 fc6e 	bl	800eab6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e1da:	f000 ffdf 	bl	800f19c <xTaskResumeAll>
 800e1de:	e76c      	b.n	800e0ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e1e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1e2:	f000 fc68 	bl	800eab6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e1e6:	f000 ffd9 	bl	800f19c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e1ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3738      	adds	r7, #56	; 0x38
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	e000ed04 	.word	0xe000ed04

0800e1f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b090      	sub	sp, #64	; 0x40
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	60f8      	str	r0, [r7, #12]
 800e200:	60b9      	str	r1, [r7, #8]
 800e202:	607a      	str	r2, [r7, #4]
 800e204:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d10a      	bne.n	800e226 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e214:	f383 8811 	msr	BASEPRI, r3
 800e218:	f3bf 8f6f 	isb	sy
 800e21c:	f3bf 8f4f 	dsb	sy
 800e220:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e222:	bf00      	nop
 800e224:	e7fe      	b.n	800e224 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d103      	bne.n	800e234 <xQueueGenericSendFromISR+0x3c>
 800e22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e230:	2b00      	cmp	r3, #0
 800e232:	d101      	bne.n	800e238 <xQueueGenericSendFromISR+0x40>
 800e234:	2301      	movs	r3, #1
 800e236:	e000      	b.n	800e23a <xQueueGenericSendFromISR+0x42>
 800e238:	2300      	movs	r3, #0
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d10a      	bne.n	800e254 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e242:	f383 8811 	msr	BASEPRI, r3
 800e246:	f3bf 8f6f 	isb	sy
 800e24a:	f3bf 8f4f 	dsb	sy
 800e24e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e250:	bf00      	nop
 800e252:	e7fe      	b.n	800e252 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	2b02      	cmp	r3, #2
 800e258:	d103      	bne.n	800e262 <xQueueGenericSendFromISR+0x6a>
 800e25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e25e:	2b01      	cmp	r3, #1
 800e260:	d101      	bne.n	800e266 <xQueueGenericSendFromISR+0x6e>
 800e262:	2301      	movs	r3, #1
 800e264:	e000      	b.n	800e268 <xQueueGenericSendFromISR+0x70>
 800e266:	2300      	movs	r3, #0
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d10a      	bne.n	800e282 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e270:	f383 8811 	msr	BASEPRI, r3
 800e274:	f3bf 8f6f 	isb	sy
 800e278:	f3bf 8f4f 	dsb	sy
 800e27c:	623b      	str	r3, [r7, #32]
}
 800e27e:	bf00      	nop
 800e280:	e7fe      	b.n	800e280 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e282:	f002 fac9 	bl	8010818 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e286:	f3ef 8211 	mrs	r2, BASEPRI
 800e28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28e:	f383 8811 	msr	BASEPRI, r3
 800e292:	f3bf 8f6f 	isb	sy
 800e296:	f3bf 8f4f 	dsb	sy
 800e29a:	61fa      	str	r2, [r7, #28]
 800e29c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e29e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e2a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d302      	bcc.n	800e2b4 <xQueueGenericSendFromISR+0xbc>
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	2b02      	cmp	r3, #2
 800e2b2:	d12f      	bne.n	800e314 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e2c4:	683a      	ldr	r2, [r7, #0]
 800e2c6:	68b9      	ldr	r1, [r7, #8]
 800e2c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e2ca:	f000 fb64 	bl	800e996 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e2ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e2d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2d6:	d112      	bne.n	800e2fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d016      	beq.n	800e30e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e2:	3324      	adds	r3, #36	; 0x24
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f001 f987 	bl	800f5f8 <xTaskRemoveFromEventList>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d00e      	beq.n	800e30e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d00b      	beq.n	800e30e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	601a      	str	r2, [r3, #0]
 800e2fc:	e007      	b.n	800e30e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e2fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e302:	3301      	adds	r3, #1
 800e304:	b2db      	uxtb	r3, r3
 800e306:	b25a      	sxtb	r2, r3
 800e308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e30e:	2301      	movs	r3, #1
 800e310:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e312:	e001      	b.n	800e318 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e314:	2300      	movs	r3, #0
 800e316:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e31a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e322:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e326:	4618      	mov	r0, r3
 800e328:	3740      	adds	r7, #64	; 0x40
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e32e:	b580      	push	{r7, lr}
 800e330:	b08e      	sub	sp, #56	; 0x38
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
 800e336:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d10a      	bne.n	800e358 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800e342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e346:	f383 8811 	msr	BASEPRI, r3
 800e34a:	f3bf 8f6f 	isb	sy
 800e34e:	f3bf 8f4f 	dsb	sy
 800e352:	623b      	str	r3, [r7, #32]
}
 800e354:	bf00      	nop
 800e356:	e7fe      	b.n	800e356 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d00a      	beq.n	800e376 <xQueueGiveFromISR+0x48>
	__asm volatile
 800e360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e364:	f383 8811 	msr	BASEPRI, r3
 800e368:	f3bf 8f6f 	isb	sy
 800e36c:	f3bf 8f4f 	dsb	sy
 800e370:	61fb      	str	r3, [r7, #28]
}
 800e372:	bf00      	nop
 800e374:	e7fe      	b.n	800e374 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d103      	bne.n	800e386 <xQueueGiveFromISR+0x58>
 800e37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e380:	689b      	ldr	r3, [r3, #8]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d101      	bne.n	800e38a <xQueueGiveFromISR+0x5c>
 800e386:	2301      	movs	r3, #1
 800e388:	e000      	b.n	800e38c <xQueueGiveFromISR+0x5e>
 800e38a:	2300      	movs	r3, #0
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d10a      	bne.n	800e3a6 <xQueueGiveFromISR+0x78>
	__asm volatile
 800e390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e394:	f383 8811 	msr	BASEPRI, r3
 800e398:	f3bf 8f6f 	isb	sy
 800e39c:	f3bf 8f4f 	dsb	sy
 800e3a0:	61bb      	str	r3, [r7, #24]
}
 800e3a2:	bf00      	nop
 800e3a4:	e7fe      	b.n	800e3a4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e3a6:	f002 fa37 	bl	8010818 <vPortValidateInterruptPriority>
	__asm volatile
 800e3aa:	f3ef 8211 	mrs	r2, BASEPRI
 800e3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b2:	f383 8811 	msr	BASEPRI, r3
 800e3b6:	f3bf 8f6f 	isb	sy
 800e3ba:	f3bf 8f4f 	dsb	sy
 800e3be:	617a      	str	r2, [r7, #20]
 800e3c0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e3c2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e3c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d22b      	bcs.n	800e42e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e2:	1c5a      	adds	r2, r3, #1
 800e3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e3e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e3ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3f0:	d112      	bne.n	800e418 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d016      	beq.n	800e428 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3fc:	3324      	adds	r3, #36	; 0x24
 800e3fe:	4618      	mov	r0, r3
 800e400:	f001 f8fa 	bl	800f5f8 <xTaskRemoveFromEventList>
 800e404:	4603      	mov	r3, r0
 800e406:	2b00      	cmp	r3, #0
 800e408:	d00e      	beq.n	800e428 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d00b      	beq.n	800e428 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	2201      	movs	r2, #1
 800e414:	601a      	str	r2, [r3, #0]
 800e416:	e007      	b.n	800e428 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e41c:	3301      	adds	r3, #1
 800e41e:	b2db      	uxtb	r3, r3
 800e420:	b25a      	sxtb	r2, r3
 800e422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e428:	2301      	movs	r3, #1
 800e42a:	637b      	str	r3, [r7, #52]	; 0x34
 800e42c:	e001      	b.n	800e432 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e42e:	2300      	movs	r3, #0
 800e430:	637b      	str	r3, [r7, #52]	; 0x34
 800e432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e434:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f383 8811 	msr	BASEPRI, r3
}
 800e43c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e43e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e440:	4618      	mov	r0, r3
 800e442:	3738      	adds	r7, #56	; 0x38
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b08c      	sub	sp, #48	; 0x30
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	60b9      	str	r1, [r7, #8]
 800e452:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e454:	2300      	movs	r3, #0
 800e456:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d10a      	bne.n	800e478 <xQueueReceive+0x30>
	__asm volatile
 800e462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e466:	f383 8811 	msr	BASEPRI, r3
 800e46a:	f3bf 8f6f 	isb	sy
 800e46e:	f3bf 8f4f 	dsb	sy
 800e472:	623b      	str	r3, [r7, #32]
}
 800e474:	bf00      	nop
 800e476:	e7fe      	b.n	800e476 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d103      	bne.n	800e486 <xQueueReceive+0x3e>
 800e47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e482:	2b00      	cmp	r3, #0
 800e484:	d101      	bne.n	800e48a <xQueueReceive+0x42>
 800e486:	2301      	movs	r3, #1
 800e488:	e000      	b.n	800e48c <xQueueReceive+0x44>
 800e48a:	2300      	movs	r3, #0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d10a      	bne.n	800e4a6 <xQueueReceive+0x5e>
	__asm volatile
 800e490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e494:	f383 8811 	msr	BASEPRI, r3
 800e498:	f3bf 8f6f 	isb	sy
 800e49c:	f3bf 8f4f 	dsb	sy
 800e4a0:	61fb      	str	r3, [r7, #28]
}
 800e4a2:	bf00      	nop
 800e4a4:	e7fe      	b.n	800e4a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e4a6:	f001 fa79 	bl	800f99c <xTaskGetSchedulerState>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d102      	bne.n	800e4b6 <xQueueReceive+0x6e>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d101      	bne.n	800e4ba <xQueueReceive+0x72>
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	e000      	b.n	800e4bc <xQueueReceive+0x74>
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d10a      	bne.n	800e4d6 <xQueueReceive+0x8e>
	__asm volatile
 800e4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c4:	f383 8811 	msr	BASEPRI, r3
 800e4c8:	f3bf 8f6f 	isb	sy
 800e4cc:	f3bf 8f4f 	dsb	sy
 800e4d0:	61bb      	str	r3, [r7, #24]
}
 800e4d2:	bf00      	nop
 800e4d4:	e7fe      	b.n	800e4d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e4d6:	f002 f8bd 	bl	8010654 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d01f      	beq.n	800e526 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e4e6:	68b9      	ldr	r1, [r7, #8]
 800e4e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4ea:	f000 fabe 	bl	800ea6a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f0:	1e5a      	subs	r2, r3, #1
 800e4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f8:	691b      	ldr	r3, [r3, #16]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d00f      	beq.n	800e51e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e500:	3310      	adds	r3, #16
 800e502:	4618      	mov	r0, r3
 800e504:	f001 f878 	bl	800f5f8 <xTaskRemoveFromEventList>
 800e508:	4603      	mov	r3, r0
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d007      	beq.n	800e51e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e50e:	4b3d      	ldr	r3, [pc, #244]	; (800e604 <xQueueReceive+0x1bc>)
 800e510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e514:	601a      	str	r2, [r3, #0]
 800e516:	f3bf 8f4f 	dsb	sy
 800e51a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e51e:	f002 f8c9 	bl	80106b4 <vPortExitCritical>
				return pdPASS;
 800e522:	2301      	movs	r3, #1
 800e524:	e069      	b.n	800e5fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d103      	bne.n	800e534 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e52c:	f002 f8c2 	bl	80106b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e530:	2300      	movs	r3, #0
 800e532:	e062      	b.n	800e5fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e536:	2b00      	cmp	r3, #0
 800e538:	d106      	bne.n	800e548 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e53a:	f107 0310 	add.w	r3, r7, #16
 800e53e:	4618      	mov	r0, r3
 800e540:	f001 f8be 	bl	800f6c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e544:	2301      	movs	r3, #1
 800e546:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e548:	f002 f8b4 	bl	80106b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e54c:	f000 fe18 	bl	800f180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e550:	f002 f880 	bl	8010654 <vPortEnterCritical>
 800e554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e556:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e55a:	b25b      	sxtb	r3, r3
 800e55c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e560:	d103      	bne.n	800e56a <xQueueReceive+0x122>
 800e562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e564:	2200      	movs	r2, #0
 800e566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e570:	b25b      	sxtb	r3, r3
 800e572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e576:	d103      	bne.n	800e580 <xQueueReceive+0x138>
 800e578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e57a:	2200      	movs	r2, #0
 800e57c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e580:	f002 f898 	bl	80106b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e584:	1d3a      	adds	r2, r7, #4
 800e586:	f107 0310 	add.w	r3, r7, #16
 800e58a:	4611      	mov	r1, r2
 800e58c:	4618      	mov	r0, r3
 800e58e:	f001 f8ad 	bl	800f6ec <xTaskCheckForTimeOut>
 800e592:	4603      	mov	r3, r0
 800e594:	2b00      	cmp	r3, #0
 800e596:	d123      	bne.n	800e5e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e59a:	f000 fade 	bl	800eb5a <prvIsQueueEmpty>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d017      	beq.n	800e5d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a6:	3324      	adds	r3, #36	; 0x24
 800e5a8:	687a      	ldr	r2, [r7, #4]
 800e5aa:	4611      	mov	r1, r2
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f000 ffd3 	bl	800f558 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e5b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5b4:	f000 fa7f 	bl	800eab6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e5b8:	f000 fdf0 	bl	800f19c <xTaskResumeAll>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d189      	bne.n	800e4d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e5c2:	4b10      	ldr	r3, [pc, #64]	; (800e604 <xQueueReceive+0x1bc>)
 800e5c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5c8:	601a      	str	r2, [r3, #0]
 800e5ca:	f3bf 8f4f 	dsb	sy
 800e5ce:	f3bf 8f6f 	isb	sy
 800e5d2:	e780      	b.n	800e4d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e5d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5d6:	f000 fa6e 	bl	800eab6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e5da:	f000 fddf 	bl	800f19c <xTaskResumeAll>
 800e5de:	e77a      	b.n	800e4d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e5e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5e2:	f000 fa68 	bl	800eab6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5e6:	f000 fdd9 	bl	800f19c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e5ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5ec:	f000 fab5 	bl	800eb5a <prvIsQueueEmpty>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	f43f af6f 	beq.w	800e4d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e5f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3730      	adds	r7, #48	; 0x30
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	e000ed04 	.word	0xe000ed04

0800e608 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b08e      	sub	sp, #56	; 0x38
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e612:	2300      	movs	r3, #0
 800e614:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e61a:	2300      	movs	r3, #0
 800e61c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e620:	2b00      	cmp	r3, #0
 800e622:	d10a      	bne.n	800e63a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e628:	f383 8811 	msr	BASEPRI, r3
 800e62c:	f3bf 8f6f 	isb	sy
 800e630:	f3bf 8f4f 	dsb	sy
 800e634:	623b      	str	r3, [r7, #32]
}
 800e636:	bf00      	nop
 800e638:	e7fe      	b.n	800e638 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d00a      	beq.n	800e658 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e646:	f383 8811 	msr	BASEPRI, r3
 800e64a:	f3bf 8f6f 	isb	sy
 800e64e:	f3bf 8f4f 	dsb	sy
 800e652:	61fb      	str	r3, [r7, #28]
}
 800e654:	bf00      	nop
 800e656:	e7fe      	b.n	800e656 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e658:	f001 f9a0 	bl	800f99c <xTaskGetSchedulerState>
 800e65c:	4603      	mov	r3, r0
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d102      	bne.n	800e668 <xQueueSemaphoreTake+0x60>
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d101      	bne.n	800e66c <xQueueSemaphoreTake+0x64>
 800e668:	2301      	movs	r3, #1
 800e66a:	e000      	b.n	800e66e <xQueueSemaphoreTake+0x66>
 800e66c:	2300      	movs	r3, #0
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d10a      	bne.n	800e688 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e676:	f383 8811 	msr	BASEPRI, r3
 800e67a:	f3bf 8f6f 	isb	sy
 800e67e:	f3bf 8f4f 	dsb	sy
 800e682:	61bb      	str	r3, [r7, #24]
}
 800e684:	bf00      	nop
 800e686:	e7fe      	b.n	800e686 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e688:	f001 ffe4 	bl	8010654 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e690:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e694:	2b00      	cmp	r3, #0
 800e696:	d024      	beq.n	800e6e2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69a:	1e5a      	subs	r2, r3, #1
 800e69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d104      	bne.n	800e6b2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e6a8:	f001 faee 	bl	800fc88 <pvTaskIncrementMutexHeldCount>
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b4:	691b      	ldr	r3, [r3, #16]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d00f      	beq.n	800e6da <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6bc:	3310      	adds	r3, #16
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f000 ff9a 	bl	800f5f8 <xTaskRemoveFromEventList>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d007      	beq.n	800e6da <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e6ca:	4b54      	ldr	r3, [pc, #336]	; (800e81c <xQueueSemaphoreTake+0x214>)
 800e6cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6d0:	601a      	str	r2, [r3, #0]
 800e6d2:	f3bf 8f4f 	dsb	sy
 800e6d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e6da:	f001 ffeb 	bl	80106b4 <vPortExitCritical>
				return pdPASS;
 800e6de:	2301      	movs	r3, #1
 800e6e0:	e097      	b.n	800e812 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d111      	bne.n	800e70c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d00a      	beq.n	800e704 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f2:	f383 8811 	msr	BASEPRI, r3
 800e6f6:	f3bf 8f6f 	isb	sy
 800e6fa:	f3bf 8f4f 	dsb	sy
 800e6fe:	617b      	str	r3, [r7, #20]
}
 800e700:	bf00      	nop
 800e702:	e7fe      	b.n	800e702 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e704:	f001 ffd6 	bl	80106b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e708:	2300      	movs	r3, #0
 800e70a:	e082      	b.n	800e812 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d106      	bne.n	800e720 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e712:	f107 030c 	add.w	r3, r7, #12
 800e716:	4618      	mov	r0, r3
 800e718:	f000 ffd2 	bl	800f6c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e71c:	2301      	movs	r3, #1
 800e71e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e720:	f001 ffc8 	bl	80106b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e724:	f000 fd2c 	bl	800f180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e728:	f001 ff94 	bl	8010654 <vPortEnterCritical>
 800e72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e732:	b25b      	sxtb	r3, r3
 800e734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e738:	d103      	bne.n	800e742 <xQueueSemaphoreTake+0x13a>
 800e73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73c:	2200      	movs	r2, #0
 800e73e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e744:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e748:	b25b      	sxtb	r3, r3
 800e74a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e74e:	d103      	bne.n	800e758 <xQueueSemaphoreTake+0x150>
 800e750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e752:	2200      	movs	r2, #0
 800e754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e758:	f001 ffac 	bl	80106b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e75c:	463a      	mov	r2, r7
 800e75e:	f107 030c 	add.w	r3, r7, #12
 800e762:	4611      	mov	r1, r2
 800e764:	4618      	mov	r0, r3
 800e766:	f000 ffc1 	bl	800f6ec <xTaskCheckForTimeOut>
 800e76a:	4603      	mov	r3, r0
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d132      	bne.n	800e7d6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e770:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e772:	f000 f9f2 	bl	800eb5a <prvIsQueueEmpty>
 800e776:	4603      	mov	r3, r0
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d026      	beq.n	800e7ca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d109      	bne.n	800e798 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e784:	f001 ff66 	bl	8010654 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78a:	689b      	ldr	r3, [r3, #8]
 800e78c:	4618      	mov	r0, r3
 800e78e:	f001 f923 	bl	800f9d8 <xTaskPriorityInherit>
 800e792:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e794:	f001 ff8e 	bl	80106b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79a:	3324      	adds	r3, #36	; 0x24
 800e79c:	683a      	ldr	r2, [r7, #0]
 800e79e:	4611      	mov	r1, r2
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f000 fed9 	bl	800f558 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e7a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7a8:	f000 f985 	bl	800eab6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e7ac:	f000 fcf6 	bl	800f19c <xTaskResumeAll>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	f47f af68 	bne.w	800e688 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e7b8:	4b18      	ldr	r3, [pc, #96]	; (800e81c <xQueueSemaphoreTake+0x214>)
 800e7ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7be:	601a      	str	r2, [r3, #0]
 800e7c0:	f3bf 8f4f 	dsb	sy
 800e7c4:	f3bf 8f6f 	isb	sy
 800e7c8:	e75e      	b.n	800e688 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e7ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7cc:	f000 f973 	bl	800eab6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e7d0:	f000 fce4 	bl	800f19c <xTaskResumeAll>
 800e7d4:	e758      	b.n	800e688 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e7d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7d8:	f000 f96d 	bl	800eab6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e7dc:	f000 fcde 	bl	800f19c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e7e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7e2:	f000 f9ba 	bl	800eb5a <prvIsQueueEmpty>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	f43f af4d 	beq.w	800e688 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d00d      	beq.n	800e810 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e7f4:	f001 ff2e 	bl	8010654 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e7f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7fa:	f000 f8b4 	bl	800e966 <prvGetDisinheritPriorityAfterTimeout>
 800e7fe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e802:	689b      	ldr	r3, [r3, #8]
 800e804:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e806:	4618      	mov	r0, r3
 800e808:	f001 f9bc 	bl	800fb84 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e80c:	f001 ff52 	bl	80106b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e810:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e812:	4618      	mov	r0, r3
 800e814:	3738      	adds	r7, #56	; 0x38
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}
 800e81a:	bf00      	nop
 800e81c:	e000ed04 	.word	0xe000ed04

0800e820 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b08e      	sub	sp, #56	; 0x38
 800e824:	af00      	add	r7, sp, #0
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	60b9      	str	r1, [r7, #8]
 800e82a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e832:	2b00      	cmp	r3, #0
 800e834:	d10a      	bne.n	800e84c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e83a:	f383 8811 	msr	BASEPRI, r3
 800e83e:	f3bf 8f6f 	isb	sy
 800e842:	f3bf 8f4f 	dsb	sy
 800e846:	623b      	str	r3, [r7, #32]
}
 800e848:	bf00      	nop
 800e84a:	e7fe      	b.n	800e84a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d103      	bne.n	800e85a <xQueueReceiveFromISR+0x3a>
 800e852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e856:	2b00      	cmp	r3, #0
 800e858:	d101      	bne.n	800e85e <xQueueReceiveFromISR+0x3e>
 800e85a:	2301      	movs	r3, #1
 800e85c:	e000      	b.n	800e860 <xQueueReceiveFromISR+0x40>
 800e85e:	2300      	movs	r3, #0
 800e860:	2b00      	cmp	r3, #0
 800e862:	d10a      	bne.n	800e87a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e868:	f383 8811 	msr	BASEPRI, r3
 800e86c:	f3bf 8f6f 	isb	sy
 800e870:	f3bf 8f4f 	dsb	sy
 800e874:	61fb      	str	r3, [r7, #28]
}
 800e876:	bf00      	nop
 800e878:	e7fe      	b.n	800e878 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e87a:	f001 ffcd 	bl	8010818 <vPortValidateInterruptPriority>
	__asm volatile
 800e87e:	f3ef 8211 	mrs	r2, BASEPRI
 800e882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e886:	f383 8811 	msr	BASEPRI, r3
 800e88a:	f3bf 8f6f 	isb	sy
 800e88e:	f3bf 8f4f 	dsb	sy
 800e892:	61ba      	str	r2, [r7, #24]
 800e894:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e896:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e898:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e89c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e89e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d02f      	beq.n	800e906 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e8b0:	68b9      	ldr	r1, [r7, #8]
 800e8b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8b4:	f000 f8d9 	bl	800ea6a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ba:	1e5a      	subs	r2, r3, #1
 800e8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8be:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e8c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e8c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8c8:	d112      	bne.n	800e8f0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8cc:	691b      	ldr	r3, [r3, #16]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d016      	beq.n	800e900 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d4:	3310      	adds	r3, #16
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f000 fe8e 	bl	800f5f8 <xTaskRemoveFromEventList>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d00e      	beq.n	800e900 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d00b      	beq.n	800e900 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	601a      	str	r2, [r3, #0]
 800e8ee:	e007      	b.n	800e900 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e8f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	b2db      	uxtb	r3, r3
 800e8f8:	b25a      	sxtb	r2, r3
 800e8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e900:	2301      	movs	r3, #1
 800e902:	637b      	str	r3, [r7, #52]	; 0x34
 800e904:	e001      	b.n	800e90a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e906:	2300      	movs	r3, #0
 800e908:	637b      	str	r3, [r7, #52]	; 0x34
 800e90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	f383 8811 	msr	BASEPRI, r3
}
 800e914:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3738      	adds	r7, #56	; 0x38
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b084      	sub	sp, #16
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d10a      	bne.n	800e948 <vQueueDelete+0x28>
	__asm volatile
 800e932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e936:	f383 8811 	msr	BASEPRI, r3
 800e93a:	f3bf 8f6f 	isb	sy
 800e93e:	f3bf 8f4f 	dsb	sy
 800e942:	60bb      	str	r3, [r7, #8]
}
 800e944:	bf00      	nop
 800e946:	e7fe      	b.n	800e946 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e948:	68f8      	ldr	r0, [r7, #12]
 800e94a:	f000 f95f 	bl	800ec0c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e954:	2b00      	cmp	r3, #0
 800e956:	d102      	bne.n	800e95e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800e958:	68f8      	ldr	r0, [r7, #12]
 800e95a:	f002 f869 	bl	8010a30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e95e:	bf00      	nop
 800e960:	3710      	adds	r7, #16
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}

0800e966 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e966:	b480      	push	{r7}
 800e968:	b085      	sub	sp, #20
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e972:	2b00      	cmp	r3, #0
 800e974:	d006      	beq.n	800e984 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e980:	60fb      	str	r3, [r7, #12]
 800e982:	e001      	b.n	800e988 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e984:	2300      	movs	r3, #0
 800e986:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e988:	68fb      	ldr	r3, [r7, #12]
	}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3714      	adds	r7, #20
 800e98e:	46bd      	mov	sp, r7
 800e990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e994:	4770      	bx	lr

0800e996 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e996:	b580      	push	{r7, lr}
 800e998:	b086      	sub	sp, #24
 800e99a:	af00      	add	r7, sp, #0
 800e99c:	60f8      	str	r0, [r7, #12]
 800e99e:	60b9      	str	r1, [r7, #8]
 800e9a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d10d      	bne.n	800e9d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d14d      	bne.n	800ea58 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	689b      	ldr	r3, [r3, #8]
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f001 f871 	bl	800faa8 <xTaskPriorityDisinherit>
 800e9c6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	609a      	str	r2, [r3, #8]
 800e9ce:	e043      	b.n	800ea58 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d119      	bne.n	800ea0a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	6858      	ldr	r0, [r3, #4]
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9de:	461a      	mov	r2, r3
 800e9e0:	68b9      	ldr	r1, [r7, #8]
 800e9e2:	f003 fcc2 	bl	801236a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	685a      	ldr	r2, [r3, #4]
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9ee:	441a      	add	r2, r3
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	685a      	ldr	r2, [r3, #4]
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	689b      	ldr	r3, [r3, #8]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d32b      	bcc.n	800ea58 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	681a      	ldr	r2, [r3, #0]
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	605a      	str	r2, [r3, #4]
 800ea08:	e026      	b.n	800ea58 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	68d8      	ldr	r0, [r3, #12]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea12:	461a      	mov	r2, r3
 800ea14:	68b9      	ldr	r1, [r7, #8]
 800ea16:	f003 fca8 	bl	801236a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	68da      	ldr	r2, [r3, #12]
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea22:	425b      	negs	r3, r3
 800ea24:	441a      	add	r2, r3
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	68da      	ldr	r2, [r3, #12]
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d207      	bcs.n	800ea46 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	689a      	ldr	r2, [r3, #8]
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea3e:	425b      	negs	r3, r3
 800ea40:	441a      	add	r2, r3
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2b02      	cmp	r3, #2
 800ea4a:	d105      	bne.n	800ea58 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d002      	beq.n	800ea58 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	3b01      	subs	r3, #1
 800ea56:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	1c5a      	adds	r2, r3, #1
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ea60:	697b      	ldr	r3, [r7, #20]
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3718      	adds	r7, #24
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}

0800ea6a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ea6a:	b580      	push	{r7, lr}
 800ea6c:	b082      	sub	sp, #8
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	6078      	str	r0, [r7, #4]
 800ea72:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d018      	beq.n	800eaae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	68da      	ldr	r2, [r3, #12]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea84:	441a      	add	r2, r3
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	68da      	ldr	r2, [r3, #12]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	429a      	cmp	r2, r3
 800ea94:	d303      	bcc.n	800ea9e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	68d9      	ldr	r1, [r3, #12]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaa6:	461a      	mov	r2, r3
 800eaa8:	6838      	ldr	r0, [r7, #0]
 800eaaa:	f003 fc5e 	bl	801236a <memcpy>
	}
}
 800eaae:	bf00      	nop
 800eab0:	3708      	adds	r7, #8
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}

0800eab6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800eab6:	b580      	push	{r7, lr}
 800eab8:	b084      	sub	sp, #16
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800eabe:	f001 fdc9 	bl	8010654 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eac8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eaca:	e011      	b.n	800eaf0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d012      	beq.n	800eafa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	3324      	adds	r3, #36	; 0x24
 800ead8:	4618      	mov	r0, r3
 800eada:	f000 fd8d 	bl	800f5f8 <xTaskRemoveFromEventList>
 800eade:	4603      	mov	r3, r0
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d001      	beq.n	800eae8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800eae4:	f000 fe64 	bl	800f7b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800eae8:	7bfb      	ldrb	r3, [r7, #15]
 800eaea:	3b01      	subs	r3, #1
 800eaec:	b2db      	uxtb	r3, r3
 800eaee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eaf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	dce9      	bgt.n	800eacc <prvUnlockQueue+0x16>
 800eaf8:	e000      	b.n	800eafc <prvUnlockQueue+0x46>
					break;
 800eafa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	22ff      	movs	r2, #255	; 0xff
 800eb00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800eb04:	f001 fdd6 	bl	80106b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eb08:	f001 fda4 	bl	8010654 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb12:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eb14:	e011      	b.n	800eb3a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	691b      	ldr	r3, [r3, #16]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d012      	beq.n	800eb44 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	3310      	adds	r3, #16
 800eb22:	4618      	mov	r0, r3
 800eb24:	f000 fd68 	bl	800f5f8 <xTaskRemoveFromEventList>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d001      	beq.n	800eb32 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800eb2e:	f000 fe3f 	bl	800f7b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800eb32:	7bbb      	ldrb	r3, [r7, #14]
 800eb34:	3b01      	subs	r3, #1
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eb3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	dce9      	bgt.n	800eb16 <prvUnlockQueue+0x60>
 800eb42:	e000      	b.n	800eb46 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800eb44:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	22ff      	movs	r2, #255	; 0xff
 800eb4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800eb4e:	f001 fdb1 	bl	80106b4 <vPortExitCritical>
}
 800eb52:	bf00      	nop
 800eb54:	3710      	adds	r7, #16
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}

0800eb5a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800eb5a:	b580      	push	{r7, lr}
 800eb5c:	b084      	sub	sp, #16
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eb62:	f001 fd77 	bl	8010654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d102      	bne.n	800eb74 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800eb6e:	2301      	movs	r3, #1
 800eb70:	60fb      	str	r3, [r7, #12]
 800eb72:	e001      	b.n	800eb78 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800eb74:	2300      	movs	r3, #0
 800eb76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eb78:	f001 fd9c 	bl	80106b4 <vPortExitCritical>

	return xReturn;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b084      	sub	sp, #16
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eb8e:	f001 fd61 	bl	8010654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d102      	bne.n	800eba4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800eb9e:	2301      	movs	r3, #1
 800eba0:	60fb      	str	r3, [r7, #12]
 800eba2:	e001      	b.n	800eba8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800eba4:	2300      	movs	r3, #0
 800eba6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eba8:	f001 fd84 	bl	80106b4 <vPortExitCritical>

	return xReturn;
 800ebac:	68fb      	ldr	r3, [r7, #12]
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	3710      	adds	r7, #16
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}
	...

0800ebb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ebb8:	b480      	push	{r7}
 800ebba:	b085      	sub	sp, #20
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	60fb      	str	r3, [r7, #12]
 800ebc6:	e014      	b.n	800ebf2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ebc8:	4a0f      	ldr	r2, [pc, #60]	; (800ec08 <vQueueAddToRegistry+0x50>)
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d10b      	bne.n	800ebec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ebd4:	490c      	ldr	r1, [pc, #48]	; (800ec08 <vQueueAddToRegistry+0x50>)
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	683a      	ldr	r2, [r7, #0]
 800ebda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ebde:	4a0a      	ldr	r2, [pc, #40]	; (800ec08 <vQueueAddToRegistry+0x50>)
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	00db      	lsls	r3, r3, #3
 800ebe4:	4413      	add	r3, r2
 800ebe6:	687a      	ldr	r2, [r7, #4]
 800ebe8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ebea:	e006      	b.n	800ebfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	3301      	adds	r3, #1
 800ebf0:	60fb      	str	r3, [r7, #12]
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	2b07      	cmp	r3, #7
 800ebf6:	d9e7      	bls.n	800ebc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ebf8:	bf00      	nop
 800ebfa:	bf00      	nop
 800ebfc:	3714      	adds	r7, #20
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec04:	4770      	bx	lr
 800ec06:	bf00      	nop
 800ec08:	20003534 	.word	0x20003534

0800ec0c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b085      	sub	sp, #20
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec14:	2300      	movs	r3, #0
 800ec16:	60fb      	str	r3, [r7, #12]
 800ec18:	e016      	b.n	800ec48 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ec1a:	4a10      	ldr	r2, [pc, #64]	; (800ec5c <vQueueUnregisterQueue+0x50>)
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	00db      	lsls	r3, r3, #3
 800ec20:	4413      	add	r3, r2
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	687a      	ldr	r2, [r7, #4]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d10b      	bne.n	800ec42 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ec2a:	4a0c      	ldr	r2, [pc, #48]	; (800ec5c <vQueueUnregisterQueue+0x50>)
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2100      	movs	r1, #0
 800ec30:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ec34:	4a09      	ldr	r2, [pc, #36]	; (800ec5c <vQueueUnregisterQueue+0x50>)
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	00db      	lsls	r3, r3, #3
 800ec3a:	4413      	add	r3, r2
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	605a      	str	r2, [r3, #4]
				break;
 800ec40:	e006      	b.n	800ec50 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	3301      	adds	r3, #1
 800ec46:	60fb      	str	r3, [r7, #12]
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	2b07      	cmp	r3, #7
 800ec4c:	d9e5      	bls.n	800ec1a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ec4e:	bf00      	nop
 800ec50:	bf00      	nop
 800ec52:	3714      	adds	r7, #20
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr
 800ec5c:	20003534 	.word	0x20003534

0800ec60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b086      	sub	sp, #24
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	60f8      	str	r0, [r7, #12]
 800ec68:	60b9      	str	r1, [r7, #8]
 800ec6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ec70:	f001 fcf0 	bl	8010654 <vPortEnterCritical>
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec7a:	b25b      	sxtb	r3, r3
 800ec7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec80:	d103      	bne.n	800ec8a <vQueueWaitForMessageRestricted+0x2a>
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	2200      	movs	r2, #0
 800ec86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec90:	b25b      	sxtb	r3, r3
 800ec92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec96:	d103      	bne.n	800eca0 <vQueueWaitForMessageRestricted+0x40>
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eca0:	f001 fd08 	bl	80106b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d106      	bne.n	800ecba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	3324      	adds	r3, #36	; 0x24
 800ecb0:	687a      	ldr	r2, [r7, #4]
 800ecb2:	68b9      	ldr	r1, [r7, #8]
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f000 fc73 	bl	800f5a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ecba:	6978      	ldr	r0, [r7, #20]
 800ecbc:	f7ff fefb 	bl	800eab6 <prvUnlockQueue>
	}
 800ecc0:	bf00      	nop
 800ecc2:	3718      	adds	r7, #24
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b08e      	sub	sp, #56	; 0x38
 800eccc:	af04      	add	r7, sp, #16
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	60b9      	str	r1, [r7, #8]
 800ecd2:	607a      	str	r2, [r7, #4]
 800ecd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ecd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d10a      	bne.n	800ecf2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ecdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ece0:	f383 8811 	msr	BASEPRI, r3
 800ece4:	f3bf 8f6f 	isb	sy
 800ece8:	f3bf 8f4f 	dsb	sy
 800ecec:	623b      	str	r3, [r7, #32]
}
 800ecee:	bf00      	nop
 800ecf0:	e7fe      	b.n	800ecf0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ecf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d10a      	bne.n	800ed0e <xTaskCreateStatic+0x46>
	__asm volatile
 800ecf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecfc:	f383 8811 	msr	BASEPRI, r3
 800ed00:	f3bf 8f6f 	isb	sy
 800ed04:	f3bf 8f4f 	dsb	sy
 800ed08:	61fb      	str	r3, [r7, #28]
}
 800ed0a:	bf00      	nop
 800ed0c:	e7fe      	b.n	800ed0c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ed0e:	23ac      	movs	r3, #172	; 0xac
 800ed10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	2bac      	cmp	r3, #172	; 0xac
 800ed16:	d00a      	beq.n	800ed2e <xTaskCreateStatic+0x66>
	__asm volatile
 800ed18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed1c:	f383 8811 	msr	BASEPRI, r3
 800ed20:	f3bf 8f6f 	isb	sy
 800ed24:	f3bf 8f4f 	dsb	sy
 800ed28:	61bb      	str	r3, [r7, #24]
}
 800ed2a:	bf00      	nop
 800ed2c:	e7fe      	b.n	800ed2c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ed2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ed30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d01e      	beq.n	800ed74 <xTaskCreateStatic+0xac>
 800ed36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d01b      	beq.n	800ed74 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ed3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ed40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ed46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed48:	2202      	movs	r2, #2
 800ed4a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ed4e:	2300      	movs	r3, #0
 800ed50:	9303      	str	r3, [sp, #12]
 800ed52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed54:	9302      	str	r3, [sp, #8]
 800ed56:	f107 0314 	add.w	r3, r7, #20
 800ed5a:	9301      	str	r3, [sp, #4]
 800ed5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5e:	9300      	str	r3, [sp, #0]
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	687a      	ldr	r2, [r7, #4]
 800ed64:	68b9      	ldr	r1, [r7, #8]
 800ed66:	68f8      	ldr	r0, [r7, #12]
 800ed68:	f000 f850 	bl	800ee0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ed6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed6e:	f000 f8f3 	bl	800ef58 <prvAddNewTaskToReadyList>
 800ed72:	e001      	b.n	800ed78 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ed74:	2300      	movs	r3, #0
 800ed76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ed78:	697b      	ldr	r3, [r7, #20]
	}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3728      	adds	r7, #40	; 0x28
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}

0800ed82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ed82:	b580      	push	{r7, lr}
 800ed84:	b08c      	sub	sp, #48	; 0x30
 800ed86:	af04      	add	r7, sp, #16
 800ed88:	60f8      	str	r0, [r7, #12]
 800ed8a:	60b9      	str	r1, [r7, #8]
 800ed8c:	603b      	str	r3, [r7, #0]
 800ed8e:	4613      	mov	r3, r2
 800ed90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ed92:	88fb      	ldrh	r3, [r7, #6]
 800ed94:	009b      	lsls	r3, r3, #2
 800ed96:	4618      	mov	r0, r3
 800ed98:	f001 fd7e 	bl	8010898 <pvPortMalloc>
 800ed9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d00e      	beq.n	800edc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eda4:	20ac      	movs	r0, #172	; 0xac
 800eda6:	f001 fd77 	bl	8010898 <pvPortMalloc>
 800edaa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800edac:	69fb      	ldr	r3, [r7, #28]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d003      	beq.n	800edba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800edb2:	69fb      	ldr	r3, [r7, #28]
 800edb4:	697a      	ldr	r2, [r7, #20]
 800edb6:	631a      	str	r2, [r3, #48]	; 0x30
 800edb8:	e005      	b.n	800edc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800edba:	6978      	ldr	r0, [r7, #20]
 800edbc:	f001 fe38 	bl	8010a30 <vPortFree>
 800edc0:	e001      	b.n	800edc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800edc2:	2300      	movs	r3, #0
 800edc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800edc6:	69fb      	ldr	r3, [r7, #28]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d017      	beq.n	800edfc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800edcc:	69fb      	ldr	r3, [r7, #28]
 800edce:	2200      	movs	r2, #0
 800edd0:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800edd4:	88fa      	ldrh	r2, [r7, #6]
 800edd6:	2300      	movs	r3, #0
 800edd8:	9303      	str	r3, [sp, #12]
 800edda:	69fb      	ldr	r3, [r7, #28]
 800eddc:	9302      	str	r3, [sp, #8]
 800edde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede0:	9301      	str	r3, [sp, #4]
 800ede2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede4:	9300      	str	r3, [sp, #0]
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	68b9      	ldr	r1, [r7, #8]
 800edea:	68f8      	ldr	r0, [r7, #12]
 800edec:	f000 f80e 	bl	800ee0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800edf0:	69f8      	ldr	r0, [r7, #28]
 800edf2:	f000 f8b1 	bl	800ef58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800edf6:	2301      	movs	r3, #1
 800edf8:	61bb      	str	r3, [r7, #24]
 800edfa:	e002      	b.n	800ee02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800edfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ee02:	69bb      	ldr	r3, [r7, #24]
	}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3720      	adds	r7, #32
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b088      	sub	sp, #32
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	60b9      	str	r1, [r7, #8]
 800ee16:	607a      	str	r2, [r7, #4]
 800ee18:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ee1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	009b      	lsls	r3, r3, #2
 800ee22:	461a      	mov	r2, r3
 800ee24:	21a5      	movs	r1, #165	; 0xa5
 800ee26:	f003 f9ca 	bl	80121be <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ee2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ee34:	3b01      	subs	r3, #1
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	4413      	add	r3, r2
 800ee3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ee3c:	69bb      	ldr	r3, [r7, #24]
 800ee3e:	f023 0307 	bic.w	r3, r3, #7
 800ee42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ee44:	69bb      	ldr	r3, [r7, #24]
 800ee46:	f003 0307 	and.w	r3, r3, #7
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d00a      	beq.n	800ee64 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ee4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee52:	f383 8811 	msr	BASEPRI, r3
 800ee56:	f3bf 8f6f 	isb	sy
 800ee5a:	f3bf 8f4f 	dsb	sy
 800ee5e:	617b      	str	r3, [r7, #20]
}
 800ee60:	bf00      	nop
 800ee62:	e7fe      	b.n	800ee62 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d01f      	beq.n	800eeaa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	61fb      	str	r3, [r7, #28]
 800ee6e:	e012      	b.n	800ee96 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ee70:	68ba      	ldr	r2, [r7, #8]
 800ee72:	69fb      	ldr	r3, [r7, #28]
 800ee74:	4413      	add	r3, r2
 800ee76:	7819      	ldrb	r1, [r3, #0]
 800ee78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee7a:	69fb      	ldr	r3, [r7, #28]
 800ee7c:	4413      	add	r3, r2
 800ee7e:	3334      	adds	r3, #52	; 0x34
 800ee80:	460a      	mov	r2, r1
 800ee82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ee84:	68ba      	ldr	r2, [r7, #8]
 800ee86:	69fb      	ldr	r3, [r7, #28]
 800ee88:	4413      	add	r3, r2
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d006      	beq.n	800ee9e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ee90:	69fb      	ldr	r3, [r7, #28]
 800ee92:	3301      	adds	r3, #1
 800ee94:	61fb      	str	r3, [r7, #28]
 800ee96:	69fb      	ldr	r3, [r7, #28]
 800ee98:	2b13      	cmp	r3, #19
 800ee9a:	d9e9      	bls.n	800ee70 <prvInitialiseNewTask+0x64>
 800ee9c:	e000      	b.n	800eea0 <prvInitialiseNewTask+0x94>
			{
				break;
 800ee9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea2:	2200      	movs	r2, #0
 800eea4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800eea8:	e003      	b.n	800eeb2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800eeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeac:	2200      	movs	r2, #0
 800eeae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eeb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb4:	2b37      	cmp	r3, #55	; 0x37
 800eeb6:	d901      	bls.n	800eebc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800eeb8:	2337      	movs	r3, #55	; 0x37
 800eeba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800eebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eec0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800eec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eec6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800eec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeca:	2200      	movs	r2, #0
 800eecc:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800eece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed0:	3304      	adds	r3, #4
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fe fda0 	bl	800da18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800eed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeda:	3318      	adds	r3, #24
 800eedc:	4618      	mov	r0, r3
 800eede:	f7fe fd9b 	bl	800da18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800eee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eee6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eeee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800eef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eef6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800eef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eefa:	2200      	movs	r2, #0
 800eefc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ef00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef02:	2200      	movs	r2, #0
 800ef04:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ef08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0a:	3358      	adds	r3, #88	; 0x58
 800ef0c:	224c      	movs	r2, #76	; 0x4c
 800ef0e:	2100      	movs	r1, #0
 800ef10:	4618      	mov	r0, r3
 800ef12:	f003 f954 	bl	80121be <memset>
 800ef16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef18:	4a0c      	ldr	r2, [pc, #48]	; (800ef4c <prvInitialiseNewTask+0x140>)
 800ef1a:	65da      	str	r2, [r3, #92]	; 0x5c
 800ef1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef1e:	4a0c      	ldr	r2, [pc, #48]	; (800ef50 <prvInitialiseNewTask+0x144>)
 800ef20:	661a      	str	r2, [r3, #96]	; 0x60
 800ef22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef24:	4a0b      	ldr	r2, [pc, #44]	; (800ef54 <prvInitialiseNewTask+0x148>)
 800ef26:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ef28:	683a      	ldr	r2, [r7, #0]
 800ef2a:	68f9      	ldr	r1, [r7, #12]
 800ef2c:	69b8      	ldr	r0, [r7, #24]
 800ef2e:	f001 fa61 	bl	80103f4 <pxPortInitialiseStack>
 800ef32:	4602      	mov	r2, r0
 800ef34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef36:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ef38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d002      	beq.n	800ef44 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ef3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef44:	bf00      	nop
 800ef46:	3720      	adds	r7, #32
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	20005994 	.word	0x20005994
 800ef50:	200059fc 	.word	0x200059fc
 800ef54:	20005a64 	.word	0x20005a64

0800ef58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b082      	sub	sp, #8
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ef60:	f001 fb78 	bl	8010654 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ef64:	4b2d      	ldr	r3, [pc, #180]	; (800f01c <prvAddNewTaskToReadyList+0xc4>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	3301      	adds	r3, #1
 800ef6a:	4a2c      	ldr	r2, [pc, #176]	; (800f01c <prvAddNewTaskToReadyList+0xc4>)
 800ef6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ef6e:	4b2c      	ldr	r3, [pc, #176]	; (800f020 <prvAddNewTaskToReadyList+0xc8>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d109      	bne.n	800ef8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ef76:	4a2a      	ldr	r2, [pc, #168]	; (800f020 <prvAddNewTaskToReadyList+0xc8>)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ef7c:	4b27      	ldr	r3, [pc, #156]	; (800f01c <prvAddNewTaskToReadyList+0xc4>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	2b01      	cmp	r3, #1
 800ef82:	d110      	bne.n	800efa6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ef84:	f000 fc38 	bl	800f7f8 <prvInitialiseTaskLists>
 800ef88:	e00d      	b.n	800efa6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ef8a:	4b26      	ldr	r3, [pc, #152]	; (800f024 <prvAddNewTaskToReadyList+0xcc>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d109      	bne.n	800efa6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ef92:	4b23      	ldr	r3, [pc, #140]	; (800f020 <prvAddNewTaskToReadyList+0xc8>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef9c:	429a      	cmp	r2, r3
 800ef9e:	d802      	bhi.n	800efa6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800efa0:	4a1f      	ldr	r2, [pc, #124]	; (800f020 <prvAddNewTaskToReadyList+0xc8>)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800efa6:	4b20      	ldr	r3, [pc, #128]	; (800f028 <prvAddNewTaskToReadyList+0xd0>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	3301      	adds	r3, #1
 800efac:	4a1e      	ldr	r2, [pc, #120]	; (800f028 <prvAddNewTaskToReadyList+0xd0>)
 800efae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800efb0:	4b1d      	ldr	r3, [pc, #116]	; (800f028 <prvAddNewTaskToReadyList+0xd0>)
 800efb2:	681a      	ldr	r2, [r3, #0]
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efbc:	4b1b      	ldr	r3, [pc, #108]	; (800f02c <prvAddNewTaskToReadyList+0xd4>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d903      	bls.n	800efcc <prvAddNewTaskToReadyList+0x74>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efc8:	4a18      	ldr	r2, [pc, #96]	; (800f02c <prvAddNewTaskToReadyList+0xd4>)
 800efca:	6013      	str	r3, [r2, #0]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efd0:	4613      	mov	r3, r2
 800efd2:	009b      	lsls	r3, r3, #2
 800efd4:	4413      	add	r3, r2
 800efd6:	009b      	lsls	r3, r3, #2
 800efd8:	4a15      	ldr	r2, [pc, #84]	; (800f030 <prvAddNewTaskToReadyList+0xd8>)
 800efda:	441a      	add	r2, r3
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	3304      	adds	r3, #4
 800efe0:	4619      	mov	r1, r3
 800efe2:	4610      	mov	r0, r2
 800efe4:	f7fe fd25 	bl	800da32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800efe8:	f001 fb64 	bl	80106b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800efec:	4b0d      	ldr	r3, [pc, #52]	; (800f024 <prvAddNewTaskToReadyList+0xcc>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d00e      	beq.n	800f012 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eff4:	4b0a      	ldr	r3, [pc, #40]	; (800f020 <prvAddNewTaskToReadyList+0xc8>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800effe:	429a      	cmp	r2, r3
 800f000:	d207      	bcs.n	800f012 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f002:	4b0c      	ldr	r3, [pc, #48]	; (800f034 <prvAddNewTaskToReadyList+0xdc>)
 800f004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f008:	601a      	str	r2, [r3, #0]
 800f00a:	f3bf 8f4f 	dsb	sy
 800f00e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f012:	bf00      	nop
 800f014:	3708      	adds	r7, #8
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}
 800f01a:	bf00      	nop
 800f01c:	20003a48 	.word	0x20003a48
 800f020:	20003574 	.word	0x20003574
 800f024:	20003a54 	.word	0x20003a54
 800f028:	20003a64 	.word	0x20003a64
 800f02c:	20003a50 	.word	0x20003a50
 800f030:	20003578 	.word	0x20003578
 800f034:	e000ed04 	.word	0xe000ed04

0800f038 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b084      	sub	sp, #16
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f040:	2300      	movs	r3, #0
 800f042:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d017      	beq.n	800f07a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f04a:	4b13      	ldr	r3, [pc, #76]	; (800f098 <vTaskDelay+0x60>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d00a      	beq.n	800f068 <vTaskDelay+0x30>
	__asm volatile
 800f052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f056:	f383 8811 	msr	BASEPRI, r3
 800f05a:	f3bf 8f6f 	isb	sy
 800f05e:	f3bf 8f4f 	dsb	sy
 800f062:	60bb      	str	r3, [r7, #8]
}
 800f064:	bf00      	nop
 800f066:	e7fe      	b.n	800f066 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f068:	f000 f88a 	bl	800f180 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f06c:	2100      	movs	r1, #0
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f000 fe1e 	bl	800fcb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f074:	f000 f892 	bl	800f19c <xTaskResumeAll>
 800f078:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d107      	bne.n	800f090 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f080:	4b06      	ldr	r3, [pc, #24]	; (800f09c <vTaskDelay+0x64>)
 800f082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f086:	601a      	str	r2, [r3, #0]
 800f088:	f3bf 8f4f 	dsb	sy
 800f08c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f090:	bf00      	nop
 800f092:	3710      	adds	r7, #16
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}
 800f098:	20003a70 	.word	0x20003a70
 800f09c:	e000ed04 	.word	0xe000ed04

0800f0a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b08a      	sub	sp, #40	; 0x28
 800f0a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f0ae:	463a      	mov	r2, r7
 800f0b0:	1d39      	adds	r1, r7, #4
 800f0b2:	f107 0308 	add.w	r3, r7, #8
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7fe fc5a 	bl	800d970 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f0bc:	6839      	ldr	r1, [r7, #0]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	68ba      	ldr	r2, [r7, #8]
 800f0c2:	9202      	str	r2, [sp, #8]
 800f0c4:	9301      	str	r3, [sp, #4]
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	9300      	str	r3, [sp, #0]
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	460a      	mov	r2, r1
 800f0ce:	4924      	ldr	r1, [pc, #144]	; (800f160 <vTaskStartScheduler+0xc0>)
 800f0d0:	4824      	ldr	r0, [pc, #144]	; (800f164 <vTaskStartScheduler+0xc4>)
 800f0d2:	f7ff fdf9 	bl	800ecc8 <xTaskCreateStatic>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	4a23      	ldr	r2, [pc, #140]	; (800f168 <vTaskStartScheduler+0xc8>)
 800f0da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f0dc:	4b22      	ldr	r3, [pc, #136]	; (800f168 <vTaskStartScheduler+0xc8>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d002      	beq.n	800f0ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	617b      	str	r3, [r7, #20]
 800f0e8:	e001      	b.n	800f0ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	2b01      	cmp	r3, #1
 800f0f2:	d102      	bne.n	800f0fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f0f4:	f000 fe30 	bl	800fd58 <xTimerCreateTimerTask>
 800f0f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	d11b      	bne.n	800f138 <vTaskStartScheduler+0x98>
	__asm volatile
 800f100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f104:	f383 8811 	msr	BASEPRI, r3
 800f108:	f3bf 8f6f 	isb	sy
 800f10c:	f3bf 8f4f 	dsb	sy
 800f110:	613b      	str	r3, [r7, #16]
}
 800f112:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f114:	4b15      	ldr	r3, [pc, #84]	; (800f16c <vTaskStartScheduler+0xcc>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	3358      	adds	r3, #88	; 0x58
 800f11a:	4a15      	ldr	r2, [pc, #84]	; (800f170 <vTaskStartScheduler+0xd0>)
 800f11c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f11e:	4b15      	ldr	r3, [pc, #84]	; (800f174 <vTaskStartScheduler+0xd4>)
 800f120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f124:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f126:	4b14      	ldr	r3, [pc, #80]	; (800f178 <vTaskStartScheduler+0xd8>)
 800f128:	2201      	movs	r2, #1
 800f12a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f12c:	4b13      	ldr	r3, [pc, #76]	; (800f17c <vTaskStartScheduler+0xdc>)
 800f12e:	2200      	movs	r2, #0
 800f130:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f132:	f001 f9ed 	bl	8010510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f136:	e00e      	b.n	800f156 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f13e:	d10a      	bne.n	800f156 <vTaskStartScheduler+0xb6>
	__asm volatile
 800f140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f144:	f383 8811 	msr	BASEPRI, r3
 800f148:	f3bf 8f6f 	isb	sy
 800f14c:	f3bf 8f4f 	dsb	sy
 800f150:	60fb      	str	r3, [r7, #12]
}
 800f152:	bf00      	nop
 800f154:	e7fe      	b.n	800f154 <vTaskStartScheduler+0xb4>
}
 800f156:	bf00      	nop
 800f158:	3718      	adds	r7, #24
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	08014ff8 	.word	0x08014ff8
 800f164:	0800f7c9 	.word	0x0800f7c9
 800f168:	20003a6c 	.word	0x20003a6c
 800f16c:	20003574 	.word	0x20003574
 800f170:	200001e0 	.word	0x200001e0
 800f174:	20003a68 	.word	0x20003a68
 800f178:	20003a54 	.word	0x20003a54
 800f17c:	20003a4c 	.word	0x20003a4c

0800f180 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f180:	b480      	push	{r7}
 800f182:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f184:	4b04      	ldr	r3, [pc, #16]	; (800f198 <vTaskSuspendAll+0x18>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	3301      	adds	r3, #1
 800f18a:	4a03      	ldr	r2, [pc, #12]	; (800f198 <vTaskSuspendAll+0x18>)
 800f18c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f18e:	bf00      	nop
 800f190:	46bd      	mov	sp, r7
 800f192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f196:	4770      	bx	lr
 800f198:	20003a70 	.word	0x20003a70

0800f19c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b084      	sub	sp, #16
 800f1a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f1aa:	4b42      	ldr	r3, [pc, #264]	; (800f2b4 <xTaskResumeAll+0x118>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d10a      	bne.n	800f1c8 <xTaskResumeAll+0x2c>
	__asm volatile
 800f1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b6:	f383 8811 	msr	BASEPRI, r3
 800f1ba:	f3bf 8f6f 	isb	sy
 800f1be:	f3bf 8f4f 	dsb	sy
 800f1c2:	603b      	str	r3, [r7, #0]
}
 800f1c4:	bf00      	nop
 800f1c6:	e7fe      	b.n	800f1c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f1c8:	f001 fa44 	bl	8010654 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f1cc:	4b39      	ldr	r3, [pc, #228]	; (800f2b4 <xTaskResumeAll+0x118>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	3b01      	subs	r3, #1
 800f1d2:	4a38      	ldr	r2, [pc, #224]	; (800f2b4 <xTaskResumeAll+0x118>)
 800f1d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1d6:	4b37      	ldr	r3, [pc, #220]	; (800f2b4 <xTaskResumeAll+0x118>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d162      	bne.n	800f2a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f1de:	4b36      	ldr	r3, [pc, #216]	; (800f2b8 <xTaskResumeAll+0x11c>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d05e      	beq.n	800f2a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f1e6:	e02f      	b.n	800f248 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1e8:	4b34      	ldr	r3, [pc, #208]	; (800f2bc <xTaskResumeAll+0x120>)
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	68db      	ldr	r3, [r3, #12]
 800f1ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	3318      	adds	r3, #24
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7fe fc79 	bl	800daec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	3304      	adds	r3, #4
 800f1fe:	4618      	mov	r0, r3
 800f200:	f7fe fc74 	bl	800daec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f208:	4b2d      	ldr	r3, [pc, #180]	; (800f2c0 <xTaskResumeAll+0x124>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d903      	bls.n	800f218 <xTaskResumeAll+0x7c>
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f214:	4a2a      	ldr	r2, [pc, #168]	; (800f2c0 <xTaskResumeAll+0x124>)
 800f216:	6013      	str	r3, [r2, #0]
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f21c:	4613      	mov	r3, r2
 800f21e:	009b      	lsls	r3, r3, #2
 800f220:	4413      	add	r3, r2
 800f222:	009b      	lsls	r3, r3, #2
 800f224:	4a27      	ldr	r2, [pc, #156]	; (800f2c4 <xTaskResumeAll+0x128>)
 800f226:	441a      	add	r2, r3
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	3304      	adds	r3, #4
 800f22c:	4619      	mov	r1, r3
 800f22e:	4610      	mov	r0, r2
 800f230:	f7fe fbff 	bl	800da32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f238:	4b23      	ldr	r3, [pc, #140]	; (800f2c8 <xTaskResumeAll+0x12c>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f23e:	429a      	cmp	r2, r3
 800f240:	d302      	bcc.n	800f248 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f242:	4b22      	ldr	r3, [pc, #136]	; (800f2cc <xTaskResumeAll+0x130>)
 800f244:	2201      	movs	r2, #1
 800f246:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f248:	4b1c      	ldr	r3, [pc, #112]	; (800f2bc <xTaskResumeAll+0x120>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d1cb      	bne.n	800f1e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d001      	beq.n	800f25a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f256:	f000 fb71 	bl	800f93c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f25a:	4b1d      	ldr	r3, [pc, #116]	; (800f2d0 <xTaskResumeAll+0x134>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d010      	beq.n	800f288 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f266:	f000 f859 	bl	800f31c <xTaskIncrementTick>
 800f26a:	4603      	mov	r3, r0
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d002      	beq.n	800f276 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f270:	4b16      	ldr	r3, [pc, #88]	; (800f2cc <xTaskResumeAll+0x130>)
 800f272:	2201      	movs	r2, #1
 800f274:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	3b01      	subs	r3, #1
 800f27a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d1f1      	bne.n	800f266 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f282:	4b13      	ldr	r3, [pc, #76]	; (800f2d0 <xTaskResumeAll+0x134>)
 800f284:	2200      	movs	r2, #0
 800f286:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f288:	4b10      	ldr	r3, [pc, #64]	; (800f2cc <xTaskResumeAll+0x130>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d009      	beq.n	800f2a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f290:	2301      	movs	r3, #1
 800f292:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f294:	4b0f      	ldr	r3, [pc, #60]	; (800f2d4 <xTaskResumeAll+0x138>)
 800f296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f29a:	601a      	str	r2, [r3, #0]
 800f29c:	f3bf 8f4f 	dsb	sy
 800f2a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f2a4:	f001 fa06 	bl	80106b4 <vPortExitCritical>

	return xAlreadyYielded;
 800f2a8:	68bb      	ldr	r3, [r7, #8]
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3710      	adds	r7, #16
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	20003a70 	.word	0x20003a70
 800f2b8:	20003a48 	.word	0x20003a48
 800f2bc:	20003a08 	.word	0x20003a08
 800f2c0:	20003a50 	.word	0x20003a50
 800f2c4:	20003578 	.word	0x20003578
 800f2c8:	20003574 	.word	0x20003574
 800f2cc:	20003a5c 	.word	0x20003a5c
 800f2d0:	20003a58 	.word	0x20003a58
 800f2d4:	e000ed04 	.word	0xe000ed04

0800f2d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b083      	sub	sp, #12
 800f2dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f2de:	4b05      	ldr	r3, [pc, #20]	; (800f2f4 <xTaskGetTickCount+0x1c>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f2e4:	687b      	ldr	r3, [r7, #4]
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	370c      	adds	r7, #12
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f0:	4770      	bx	lr
 800f2f2:	bf00      	nop
 800f2f4:	20003a4c 	.word	0x20003a4c

0800f2f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b082      	sub	sp, #8
 800f2fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f2fe:	f001 fa8b 	bl	8010818 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f302:	2300      	movs	r3, #0
 800f304:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f306:	4b04      	ldr	r3, [pc, #16]	; (800f318 <xTaskGetTickCountFromISR+0x20>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f30c:	683b      	ldr	r3, [r7, #0]
}
 800f30e:	4618      	mov	r0, r3
 800f310:	3708      	adds	r7, #8
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}
 800f316:	bf00      	nop
 800f318:	20003a4c 	.word	0x20003a4c

0800f31c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b086      	sub	sp, #24
 800f320:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f322:	2300      	movs	r3, #0
 800f324:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f326:	4b4f      	ldr	r3, [pc, #316]	; (800f464 <xTaskIncrementTick+0x148>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	f040 808f 	bne.w	800f44e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f330:	4b4d      	ldr	r3, [pc, #308]	; (800f468 <xTaskIncrementTick+0x14c>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	3301      	adds	r3, #1
 800f336:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f338:	4a4b      	ldr	r2, [pc, #300]	; (800f468 <xTaskIncrementTick+0x14c>)
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d120      	bne.n	800f386 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f344:	4b49      	ldr	r3, [pc, #292]	; (800f46c <xTaskIncrementTick+0x150>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d00a      	beq.n	800f364 <xTaskIncrementTick+0x48>
	__asm volatile
 800f34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f352:	f383 8811 	msr	BASEPRI, r3
 800f356:	f3bf 8f6f 	isb	sy
 800f35a:	f3bf 8f4f 	dsb	sy
 800f35e:	603b      	str	r3, [r7, #0]
}
 800f360:	bf00      	nop
 800f362:	e7fe      	b.n	800f362 <xTaskIncrementTick+0x46>
 800f364:	4b41      	ldr	r3, [pc, #260]	; (800f46c <xTaskIncrementTick+0x150>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	60fb      	str	r3, [r7, #12]
 800f36a:	4b41      	ldr	r3, [pc, #260]	; (800f470 <xTaskIncrementTick+0x154>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	4a3f      	ldr	r2, [pc, #252]	; (800f46c <xTaskIncrementTick+0x150>)
 800f370:	6013      	str	r3, [r2, #0]
 800f372:	4a3f      	ldr	r2, [pc, #252]	; (800f470 <xTaskIncrementTick+0x154>)
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	6013      	str	r3, [r2, #0]
 800f378:	4b3e      	ldr	r3, [pc, #248]	; (800f474 <xTaskIncrementTick+0x158>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	3301      	adds	r3, #1
 800f37e:	4a3d      	ldr	r2, [pc, #244]	; (800f474 <xTaskIncrementTick+0x158>)
 800f380:	6013      	str	r3, [r2, #0]
 800f382:	f000 fadb 	bl	800f93c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f386:	4b3c      	ldr	r3, [pc, #240]	; (800f478 <xTaskIncrementTick+0x15c>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	693a      	ldr	r2, [r7, #16]
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d349      	bcc.n	800f424 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f390:	4b36      	ldr	r3, [pc, #216]	; (800f46c <xTaskIncrementTick+0x150>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d104      	bne.n	800f3a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f39a:	4b37      	ldr	r3, [pc, #220]	; (800f478 <xTaskIncrementTick+0x15c>)
 800f39c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3a0:	601a      	str	r2, [r3, #0]
					break;
 800f3a2:	e03f      	b.n	800f424 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3a4:	4b31      	ldr	r3, [pc, #196]	; (800f46c <xTaskIncrementTick+0x150>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	68db      	ldr	r3, [r3, #12]
 800f3aa:	68db      	ldr	r3, [r3, #12]
 800f3ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	685b      	ldr	r3, [r3, #4]
 800f3b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f3b4:	693a      	ldr	r2, [r7, #16]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	429a      	cmp	r2, r3
 800f3ba:	d203      	bcs.n	800f3c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f3bc:	4a2e      	ldr	r2, [pc, #184]	; (800f478 <xTaskIncrementTick+0x15c>)
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f3c2:	e02f      	b.n	800f424 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	3304      	adds	r3, #4
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f7fe fb8f 	bl	800daec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d004      	beq.n	800f3e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	3318      	adds	r3, #24
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7fe fb86 	bl	800daec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3e4:	4b25      	ldr	r3, [pc, #148]	; (800f47c <xTaskIncrementTick+0x160>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d903      	bls.n	800f3f4 <xTaskIncrementTick+0xd8>
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3f0:	4a22      	ldr	r2, [pc, #136]	; (800f47c <xTaskIncrementTick+0x160>)
 800f3f2:	6013      	str	r3, [r2, #0]
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3f8:	4613      	mov	r3, r2
 800f3fa:	009b      	lsls	r3, r3, #2
 800f3fc:	4413      	add	r3, r2
 800f3fe:	009b      	lsls	r3, r3, #2
 800f400:	4a1f      	ldr	r2, [pc, #124]	; (800f480 <xTaskIncrementTick+0x164>)
 800f402:	441a      	add	r2, r3
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	3304      	adds	r3, #4
 800f408:	4619      	mov	r1, r3
 800f40a:	4610      	mov	r0, r2
 800f40c:	f7fe fb11 	bl	800da32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f414:	4b1b      	ldr	r3, [pc, #108]	; (800f484 <xTaskIncrementTick+0x168>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d3b8      	bcc.n	800f390 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f41e:	2301      	movs	r3, #1
 800f420:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f422:	e7b5      	b.n	800f390 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f424:	4b17      	ldr	r3, [pc, #92]	; (800f484 <xTaskIncrementTick+0x168>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f42a:	4915      	ldr	r1, [pc, #84]	; (800f480 <xTaskIncrementTick+0x164>)
 800f42c:	4613      	mov	r3, r2
 800f42e:	009b      	lsls	r3, r3, #2
 800f430:	4413      	add	r3, r2
 800f432:	009b      	lsls	r3, r3, #2
 800f434:	440b      	add	r3, r1
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	2b01      	cmp	r3, #1
 800f43a:	d901      	bls.n	800f440 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f43c:	2301      	movs	r3, #1
 800f43e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f440:	4b11      	ldr	r3, [pc, #68]	; (800f488 <xTaskIncrementTick+0x16c>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d007      	beq.n	800f458 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f448:	2301      	movs	r3, #1
 800f44a:	617b      	str	r3, [r7, #20]
 800f44c:	e004      	b.n	800f458 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f44e:	4b0f      	ldr	r3, [pc, #60]	; (800f48c <xTaskIncrementTick+0x170>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	3301      	adds	r3, #1
 800f454:	4a0d      	ldr	r2, [pc, #52]	; (800f48c <xTaskIncrementTick+0x170>)
 800f456:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f458:	697b      	ldr	r3, [r7, #20]
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	3718      	adds	r7, #24
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
 800f462:	bf00      	nop
 800f464:	20003a70 	.word	0x20003a70
 800f468:	20003a4c 	.word	0x20003a4c
 800f46c:	20003a00 	.word	0x20003a00
 800f470:	20003a04 	.word	0x20003a04
 800f474:	20003a60 	.word	0x20003a60
 800f478:	20003a68 	.word	0x20003a68
 800f47c:	20003a50 	.word	0x20003a50
 800f480:	20003578 	.word	0x20003578
 800f484:	20003574 	.word	0x20003574
 800f488:	20003a5c 	.word	0x20003a5c
 800f48c:	20003a58 	.word	0x20003a58

0800f490 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f490:	b480      	push	{r7}
 800f492:	b085      	sub	sp, #20
 800f494:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f496:	4b2a      	ldr	r3, [pc, #168]	; (800f540 <vTaskSwitchContext+0xb0>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d003      	beq.n	800f4a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f49e:	4b29      	ldr	r3, [pc, #164]	; (800f544 <vTaskSwitchContext+0xb4>)
 800f4a0:	2201      	movs	r2, #1
 800f4a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f4a4:	e046      	b.n	800f534 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f4a6:	4b27      	ldr	r3, [pc, #156]	; (800f544 <vTaskSwitchContext+0xb4>)
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4ac:	4b26      	ldr	r3, [pc, #152]	; (800f548 <vTaskSwitchContext+0xb8>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	60fb      	str	r3, [r7, #12]
 800f4b2:	e010      	b.n	800f4d6 <vTaskSwitchContext+0x46>
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d10a      	bne.n	800f4d0 <vTaskSwitchContext+0x40>
	__asm volatile
 800f4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4be:	f383 8811 	msr	BASEPRI, r3
 800f4c2:	f3bf 8f6f 	isb	sy
 800f4c6:	f3bf 8f4f 	dsb	sy
 800f4ca:	607b      	str	r3, [r7, #4]
}
 800f4cc:	bf00      	nop
 800f4ce:	e7fe      	b.n	800f4ce <vTaskSwitchContext+0x3e>
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	3b01      	subs	r3, #1
 800f4d4:	60fb      	str	r3, [r7, #12]
 800f4d6:	491d      	ldr	r1, [pc, #116]	; (800f54c <vTaskSwitchContext+0xbc>)
 800f4d8:	68fa      	ldr	r2, [r7, #12]
 800f4da:	4613      	mov	r3, r2
 800f4dc:	009b      	lsls	r3, r3, #2
 800f4de:	4413      	add	r3, r2
 800f4e0:	009b      	lsls	r3, r3, #2
 800f4e2:	440b      	add	r3, r1
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d0e4      	beq.n	800f4b4 <vTaskSwitchContext+0x24>
 800f4ea:	68fa      	ldr	r2, [r7, #12]
 800f4ec:	4613      	mov	r3, r2
 800f4ee:	009b      	lsls	r3, r3, #2
 800f4f0:	4413      	add	r3, r2
 800f4f2:	009b      	lsls	r3, r3, #2
 800f4f4:	4a15      	ldr	r2, [pc, #84]	; (800f54c <vTaskSwitchContext+0xbc>)
 800f4f6:	4413      	add	r3, r2
 800f4f8:	60bb      	str	r3, [r7, #8]
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	685b      	ldr	r3, [r3, #4]
 800f4fe:	685a      	ldr	r2, [r3, #4]
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	605a      	str	r2, [r3, #4]
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	685a      	ldr	r2, [r3, #4]
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	3308      	adds	r3, #8
 800f50c:	429a      	cmp	r2, r3
 800f50e:	d104      	bne.n	800f51a <vTaskSwitchContext+0x8a>
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	685a      	ldr	r2, [r3, #4]
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	605a      	str	r2, [r3, #4]
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	685b      	ldr	r3, [r3, #4]
 800f51e:	68db      	ldr	r3, [r3, #12]
 800f520:	4a0b      	ldr	r2, [pc, #44]	; (800f550 <vTaskSwitchContext+0xc0>)
 800f522:	6013      	str	r3, [r2, #0]
 800f524:	4a08      	ldr	r2, [pc, #32]	; (800f548 <vTaskSwitchContext+0xb8>)
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f52a:	4b09      	ldr	r3, [pc, #36]	; (800f550 <vTaskSwitchContext+0xc0>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	3358      	adds	r3, #88	; 0x58
 800f530:	4a08      	ldr	r2, [pc, #32]	; (800f554 <vTaskSwitchContext+0xc4>)
 800f532:	6013      	str	r3, [r2, #0]
}
 800f534:	bf00      	nop
 800f536:	3714      	adds	r7, #20
 800f538:	46bd      	mov	sp, r7
 800f53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53e:	4770      	bx	lr
 800f540:	20003a70 	.word	0x20003a70
 800f544:	20003a5c 	.word	0x20003a5c
 800f548:	20003a50 	.word	0x20003a50
 800f54c:	20003578 	.word	0x20003578
 800f550:	20003574 	.word	0x20003574
 800f554:	200001e0 	.word	0x200001e0

0800f558 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b084      	sub	sp, #16
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d10a      	bne.n	800f57e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f56c:	f383 8811 	msr	BASEPRI, r3
 800f570:	f3bf 8f6f 	isb	sy
 800f574:	f3bf 8f4f 	dsb	sy
 800f578:	60fb      	str	r3, [r7, #12]
}
 800f57a:	bf00      	nop
 800f57c:	e7fe      	b.n	800f57c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f57e:	4b07      	ldr	r3, [pc, #28]	; (800f59c <vTaskPlaceOnEventList+0x44>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	3318      	adds	r3, #24
 800f584:	4619      	mov	r1, r3
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f7fe fa77 	bl	800da7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f58c:	2101      	movs	r1, #1
 800f58e:	6838      	ldr	r0, [r7, #0]
 800f590:	f000 fb8e 	bl	800fcb0 <prvAddCurrentTaskToDelayedList>
}
 800f594:	bf00      	nop
 800f596:	3710      	adds	r7, #16
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}
 800f59c:	20003574 	.word	0x20003574

0800f5a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b086      	sub	sp, #24
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	60f8      	str	r0, [r7, #12]
 800f5a8:	60b9      	str	r1, [r7, #8]
 800f5aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d10a      	bne.n	800f5c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b6:	f383 8811 	msr	BASEPRI, r3
 800f5ba:	f3bf 8f6f 	isb	sy
 800f5be:	f3bf 8f4f 	dsb	sy
 800f5c2:	617b      	str	r3, [r7, #20]
}
 800f5c4:	bf00      	nop
 800f5c6:	e7fe      	b.n	800f5c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f5c8:	4b0a      	ldr	r3, [pc, #40]	; (800f5f4 <vTaskPlaceOnEventListRestricted+0x54>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	3318      	adds	r3, #24
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	68f8      	ldr	r0, [r7, #12]
 800f5d2:	f7fe fa2e 	bl	800da32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d002      	beq.n	800f5e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f5dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f5e2:	6879      	ldr	r1, [r7, #4]
 800f5e4:	68b8      	ldr	r0, [r7, #8]
 800f5e6:	f000 fb63 	bl	800fcb0 <prvAddCurrentTaskToDelayedList>
	}
 800f5ea:	bf00      	nop
 800f5ec:	3718      	adds	r7, #24
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}
 800f5f2:	bf00      	nop
 800f5f4:	20003574 	.word	0x20003574

0800f5f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b086      	sub	sp, #24
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	68db      	ldr	r3, [r3, #12]
 800f604:	68db      	ldr	r3, [r3, #12]
 800f606:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d10a      	bne.n	800f624 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f612:	f383 8811 	msr	BASEPRI, r3
 800f616:	f3bf 8f6f 	isb	sy
 800f61a:	f3bf 8f4f 	dsb	sy
 800f61e:	60fb      	str	r3, [r7, #12]
}
 800f620:	bf00      	nop
 800f622:	e7fe      	b.n	800f622 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	3318      	adds	r3, #24
 800f628:	4618      	mov	r0, r3
 800f62a:	f7fe fa5f 	bl	800daec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f62e:	4b1e      	ldr	r3, [pc, #120]	; (800f6a8 <xTaskRemoveFromEventList+0xb0>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d11d      	bne.n	800f672 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f636:	693b      	ldr	r3, [r7, #16]
 800f638:	3304      	adds	r3, #4
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7fe fa56 	bl	800daec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f644:	4b19      	ldr	r3, [pc, #100]	; (800f6ac <xTaskRemoveFromEventList+0xb4>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	429a      	cmp	r2, r3
 800f64a:	d903      	bls.n	800f654 <xTaskRemoveFromEventList+0x5c>
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f650:	4a16      	ldr	r2, [pc, #88]	; (800f6ac <xTaskRemoveFromEventList+0xb4>)
 800f652:	6013      	str	r3, [r2, #0]
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f658:	4613      	mov	r3, r2
 800f65a:	009b      	lsls	r3, r3, #2
 800f65c:	4413      	add	r3, r2
 800f65e:	009b      	lsls	r3, r3, #2
 800f660:	4a13      	ldr	r2, [pc, #76]	; (800f6b0 <xTaskRemoveFromEventList+0xb8>)
 800f662:	441a      	add	r2, r3
 800f664:	693b      	ldr	r3, [r7, #16]
 800f666:	3304      	adds	r3, #4
 800f668:	4619      	mov	r1, r3
 800f66a:	4610      	mov	r0, r2
 800f66c:	f7fe f9e1 	bl	800da32 <vListInsertEnd>
 800f670:	e005      	b.n	800f67e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	3318      	adds	r3, #24
 800f676:	4619      	mov	r1, r3
 800f678:	480e      	ldr	r0, [pc, #56]	; (800f6b4 <xTaskRemoveFromEventList+0xbc>)
 800f67a:	f7fe f9da 	bl	800da32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f67e:	693b      	ldr	r3, [r7, #16]
 800f680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f682:	4b0d      	ldr	r3, [pc, #52]	; (800f6b8 <xTaskRemoveFromEventList+0xc0>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f688:	429a      	cmp	r2, r3
 800f68a:	d905      	bls.n	800f698 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f68c:	2301      	movs	r3, #1
 800f68e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f690:	4b0a      	ldr	r3, [pc, #40]	; (800f6bc <xTaskRemoveFromEventList+0xc4>)
 800f692:	2201      	movs	r2, #1
 800f694:	601a      	str	r2, [r3, #0]
 800f696:	e001      	b.n	800f69c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f698:	2300      	movs	r3, #0
 800f69a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f69c:	697b      	ldr	r3, [r7, #20]
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3718      	adds	r7, #24
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	bf00      	nop
 800f6a8:	20003a70 	.word	0x20003a70
 800f6ac:	20003a50 	.word	0x20003a50
 800f6b0:	20003578 	.word	0x20003578
 800f6b4:	20003a08 	.word	0x20003a08
 800f6b8:	20003574 	.word	0x20003574
 800f6bc:	20003a5c 	.word	0x20003a5c

0800f6c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b083      	sub	sp, #12
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f6c8:	4b06      	ldr	r3, [pc, #24]	; (800f6e4 <vTaskInternalSetTimeOutState+0x24>)
 800f6ca:	681a      	ldr	r2, [r3, #0]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f6d0:	4b05      	ldr	r3, [pc, #20]	; (800f6e8 <vTaskInternalSetTimeOutState+0x28>)
 800f6d2:	681a      	ldr	r2, [r3, #0]
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	605a      	str	r2, [r3, #4]
}
 800f6d8:	bf00      	nop
 800f6da:	370c      	adds	r7, #12
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr
 800f6e4:	20003a60 	.word	0x20003a60
 800f6e8:	20003a4c 	.word	0x20003a4c

0800f6ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b088      	sub	sp, #32
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d10a      	bne.n	800f712 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f700:	f383 8811 	msr	BASEPRI, r3
 800f704:	f3bf 8f6f 	isb	sy
 800f708:	f3bf 8f4f 	dsb	sy
 800f70c:	613b      	str	r3, [r7, #16]
}
 800f70e:	bf00      	nop
 800f710:	e7fe      	b.n	800f710 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d10a      	bne.n	800f72e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f71c:	f383 8811 	msr	BASEPRI, r3
 800f720:	f3bf 8f6f 	isb	sy
 800f724:	f3bf 8f4f 	dsb	sy
 800f728:	60fb      	str	r3, [r7, #12]
}
 800f72a:	bf00      	nop
 800f72c:	e7fe      	b.n	800f72c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f72e:	f000 ff91 	bl	8010654 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f732:	4b1d      	ldr	r3, [pc, #116]	; (800f7a8 <xTaskCheckForTimeOut+0xbc>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	69ba      	ldr	r2, [r7, #24]
 800f73e:	1ad3      	subs	r3, r2, r3
 800f740:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f74a:	d102      	bne.n	800f752 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f74c:	2300      	movs	r3, #0
 800f74e:	61fb      	str	r3, [r7, #28]
 800f750:	e023      	b.n	800f79a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681a      	ldr	r2, [r3, #0]
 800f756:	4b15      	ldr	r3, [pc, #84]	; (800f7ac <xTaskCheckForTimeOut+0xc0>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d007      	beq.n	800f76e <xTaskCheckForTimeOut+0x82>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	685b      	ldr	r3, [r3, #4]
 800f762:	69ba      	ldr	r2, [r7, #24]
 800f764:	429a      	cmp	r2, r3
 800f766:	d302      	bcc.n	800f76e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f768:	2301      	movs	r3, #1
 800f76a:	61fb      	str	r3, [r7, #28]
 800f76c:	e015      	b.n	800f79a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	697a      	ldr	r2, [r7, #20]
 800f774:	429a      	cmp	r2, r3
 800f776:	d20b      	bcs.n	800f790 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	681a      	ldr	r2, [r3, #0]
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	1ad2      	subs	r2, r2, r3
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f7ff ff9b 	bl	800f6c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f78a:	2300      	movs	r3, #0
 800f78c:	61fb      	str	r3, [r7, #28]
 800f78e:	e004      	b.n	800f79a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	2200      	movs	r2, #0
 800f794:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f796:	2301      	movs	r3, #1
 800f798:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f79a:	f000 ff8b 	bl	80106b4 <vPortExitCritical>

	return xReturn;
 800f79e:	69fb      	ldr	r3, [r7, #28]
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3720      	adds	r7, #32
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}
 800f7a8:	20003a4c 	.word	0x20003a4c
 800f7ac:	20003a60 	.word	0x20003a60

0800f7b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f7b4:	4b03      	ldr	r3, [pc, #12]	; (800f7c4 <vTaskMissedYield+0x14>)
 800f7b6:	2201      	movs	r2, #1
 800f7b8:	601a      	str	r2, [r3, #0]
}
 800f7ba:	bf00      	nop
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c2:	4770      	bx	lr
 800f7c4:	20003a5c 	.word	0x20003a5c

0800f7c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b082      	sub	sp, #8
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f7d0:	f000 f852 	bl	800f878 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f7d4:	4b06      	ldr	r3, [pc, #24]	; (800f7f0 <prvIdleTask+0x28>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	2b01      	cmp	r3, #1
 800f7da:	d9f9      	bls.n	800f7d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f7dc:	4b05      	ldr	r3, [pc, #20]	; (800f7f4 <prvIdleTask+0x2c>)
 800f7de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7e2:	601a      	str	r2, [r3, #0]
 800f7e4:	f3bf 8f4f 	dsb	sy
 800f7e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f7ec:	e7f0      	b.n	800f7d0 <prvIdleTask+0x8>
 800f7ee:	bf00      	nop
 800f7f0:	20003578 	.word	0x20003578
 800f7f4:	e000ed04 	.word	0xe000ed04

0800f7f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f7fe:	2300      	movs	r3, #0
 800f800:	607b      	str	r3, [r7, #4]
 800f802:	e00c      	b.n	800f81e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f804:	687a      	ldr	r2, [r7, #4]
 800f806:	4613      	mov	r3, r2
 800f808:	009b      	lsls	r3, r3, #2
 800f80a:	4413      	add	r3, r2
 800f80c:	009b      	lsls	r3, r3, #2
 800f80e:	4a12      	ldr	r2, [pc, #72]	; (800f858 <prvInitialiseTaskLists+0x60>)
 800f810:	4413      	add	r3, r2
 800f812:	4618      	mov	r0, r3
 800f814:	f7fe f8e0 	bl	800d9d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	3301      	adds	r3, #1
 800f81c:	607b      	str	r3, [r7, #4]
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2b37      	cmp	r3, #55	; 0x37
 800f822:	d9ef      	bls.n	800f804 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f824:	480d      	ldr	r0, [pc, #52]	; (800f85c <prvInitialiseTaskLists+0x64>)
 800f826:	f7fe f8d7 	bl	800d9d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f82a:	480d      	ldr	r0, [pc, #52]	; (800f860 <prvInitialiseTaskLists+0x68>)
 800f82c:	f7fe f8d4 	bl	800d9d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f830:	480c      	ldr	r0, [pc, #48]	; (800f864 <prvInitialiseTaskLists+0x6c>)
 800f832:	f7fe f8d1 	bl	800d9d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f836:	480c      	ldr	r0, [pc, #48]	; (800f868 <prvInitialiseTaskLists+0x70>)
 800f838:	f7fe f8ce 	bl	800d9d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f83c:	480b      	ldr	r0, [pc, #44]	; (800f86c <prvInitialiseTaskLists+0x74>)
 800f83e:	f7fe f8cb 	bl	800d9d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f842:	4b0b      	ldr	r3, [pc, #44]	; (800f870 <prvInitialiseTaskLists+0x78>)
 800f844:	4a05      	ldr	r2, [pc, #20]	; (800f85c <prvInitialiseTaskLists+0x64>)
 800f846:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f848:	4b0a      	ldr	r3, [pc, #40]	; (800f874 <prvInitialiseTaskLists+0x7c>)
 800f84a:	4a05      	ldr	r2, [pc, #20]	; (800f860 <prvInitialiseTaskLists+0x68>)
 800f84c:	601a      	str	r2, [r3, #0]
}
 800f84e:	bf00      	nop
 800f850:	3708      	adds	r7, #8
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}
 800f856:	bf00      	nop
 800f858:	20003578 	.word	0x20003578
 800f85c:	200039d8 	.word	0x200039d8
 800f860:	200039ec 	.word	0x200039ec
 800f864:	20003a08 	.word	0x20003a08
 800f868:	20003a1c 	.word	0x20003a1c
 800f86c:	20003a34 	.word	0x20003a34
 800f870:	20003a00 	.word	0x20003a00
 800f874:	20003a04 	.word	0x20003a04

0800f878 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f87e:	e019      	b.n	800f8b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f880:	f000 fee8 	bl	8010654 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f884:	4b10      	ldr	r3, [pc, #64]	; (800f8c8 <prvCheckTasksWaitingTermination+0x50>)
 800f886:	68db      	ldr	r3, [r3, #12]
 800f888:	68db      	ldr	r3, [r3, #12]
 800f88a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	3304      	adds	r3, #4
 800f890:	4618      	mov	r0, r3
 800f892:	f7fe f92b 	bl	800daec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f896:	4b0d      	ldr	r3, [pc, #52]	; (800f8cc <prvCheckTasksWaitingTermination+0x54>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	3b01      	subs	r3, #1
 800f89c:	4a0b      	ldr	r2, [pc, #44]	; (800f8cc <prvCheckTasksWaitingTermination+0x54>)
 800f89e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f8a0:	4b0b      	ldr	r3, [pc, #44]	; (800f8d0 <prvCheckTasksWaitingTermination+0x58>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	3b01      	subs	r3, #1
 800f8a6:	4a0a      	ldr	r2, [pc, #40]	; (800f8d0 <prvCheckTasksWaitingTermination+0x58>)
 800f8a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f8aa:	f000 ff03 	bl	80106b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f000 f810 	bl	800f8d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f8b4:	4b06      	ldr	r3, [pc, #24]	; (800f8d0 <prvCheckTasksWaitingTermination+0x58>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d1e1      	bne.n	800f880 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f8bc:	bf00      	nop
 800f8be:	bf00      	nop
 800f8c0:	3708      	adds	r7, #8
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}
 800f8c6:	bf00      	nop
 800f8c8:	20003a1c 	.word	0x20003a1c
 800f8cc:	20003a48 	.word	0x20003a48
 800f8d0:	20003a30 	.word	0x20003a30

0800f8d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b084      	sub	sp, #16
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	3358      	adds	r3, #88	; 0x58
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f002 fc89 	bl	80121f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d108      	bne.n	800f902 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f001 f89b 	bl	8010a30 <vPortFree>
				vPortFree( pxTCB );
 800f8fa:	6878      	ldr	r0, [r7, #4]
 800f8fc:	f001 f898 	bl	8010a30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f900:	e018      	b.n	800f934 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800f908:	2b01      	cmp	r3, #1
 800f90a:	d103      	bne.n	800f914 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f001 f88f 	bl	8010a30 <vPortFree>
	}
 800f912:	e00f      	b.n	800f934 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800f91a:	2b02      	cmp	r3, #2
 800f91c:	d00a      	beq.n	800f934 <prvDeleteTCB+0x60>
	__asm volatile
 800f91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f922:	f383 8811 	msr	BASEPRI, r3
 800f926:	f3bf 8f6f 	isb	sy
 800f92a:	f3bf 8f4f 	dsb	sy
 800f92e:	60fb      	str	r3, [r7, #12]
}
 800f930:	bf00      	nop
 800f932:	e7fe      	b.n	800f932 <prvDeleteTCB+0x5e>
	}
 800f934:	bf00      	nop
 800f936:	3710      	adds	r7, #16
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f942:	4b0c      	ldr	r3, [pc, #48]	; (800f974 <prvResetNextTaskUnblockTime+0x38>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d104      	bne.n	800f956 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f94c:	4b0a      	ldr	r3, [pc, #40]	; (800f978 <prvResetNextTaskUnblockTime+0x3c>)
 800f94e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f952:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f954:	e008      	b.n	800f968 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f956:	4b07      	ldr	r3, [pc, #28]	; (800f974 <prvResetNextTaskUnblockTime+0x38>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	68db      	ldr	r3, [r3, #12]
 800f95c:	68db      	ldr	r3, [r3, #12]
 800f95e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	685b      	ldr	r3, [r3, #4]
 800f964:	4a04      	ldr	r2, [pc, #16]	; (800f978 <prvResetNextTaskUnblockTime+0x3c>)
 800f966:	6013      	str	r3, [r2, #0]
}
 800f968:	bf00      	nop
 800f96a:	370c      	adds	r7, #12
 800f96c:	46bd      	mov	sp, r7
 800f96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f972:	4770      	bx	lr
 800f974:	20003a00 	.word	0x20003a00
 800f978:	20003a68 	.word	0x20003a68

0800f97c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f97c:	b480      	push	{r7}
 800f97e:	b083      	sub	sp, #12
 800f980:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f982:	4b05      	ldr	r3, [pc, #20]	; (800f998 <xTaskGetCurrentTaskHandle+0x1c>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f988:	687b      	ldr	r3, [r7, #4]
	}
 800f98a:	4618      	mov	r0, r3
 800f98c:	370c      	adds	r7, #12
 800f98e:	46bd      	mov	sp, r7
 800f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f994:	4770      	bx	lr
 800f996:	bf00      	nop
 800f998:	20003574 	.word	0x20003574

0800f99c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f99c:	b480      	push	{r7}
 800f99e:	b083      	sub	sp, #12
 800f9a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f9a2:	4b0b      	ldr	r3, [pc, #44]	; (800f9d0 <xTaskGetSchedulerState+0x34>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d102      	bne.n	800f9b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	607b      	str	r3, [r7, #4]
 800f9ae:	e008      	b.n	800f9c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f9b0:	4b08      	ldr	r3, [pc, #32]	; (800f9d4 <xTaskGetSchedulerState+0x38>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d102      	bne.n	800f9be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f9b8:	2302      	movs	r3, #2
 800f9ba:	607b      	str	r3, [r7, #4]
 800f9bc:	e001      	b.n	800f9c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f9c2:	687b      	ldr	r3, [r7, #4]
	}
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	370c      	adds	r7, #12
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ce:	4770      	bx	lr
 800f9d0:	20003a54 	.word	0x20003a54
 800f9d4:	20003a70 	.word	0x20003a70

0800f9d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b084      	sub	sp, #16
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d051      	beq.n	800fa92 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9f2:	4b2a      	ldr	r3, [pc, #168]	; (800fa9c <xTaskPriorityInherit+0xc4>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d241      	bcs.n	800fa80 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	699b      	ldr	r3, [r3, #24]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	db06      	blt.n	800fa12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa04:	4b25      	ldr	r3, [pc, #148]	; (800fa9c <xTaskPriorityInherit+0xc4>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	6959      	ldr	r1, [r3, #20]
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa1a:	4613      	mov	r3, r2
 800fa1c:	009b      	lsls	r3, r3, #2
 800fa1e:	4413      	add	r3, r2
 800fa20:	009b      	lsls	r3, r3, #2
 800fa22:	4a1f      	ldr	r2, [pc, #124]	; (800faa0 <xTaskPriorityInherit+0xc8>)
 800fa24:	4413      	add	r3, r2
 800fa26:	4299      	cmp	r1, r3
 800fa28:	d122      	bne.n	800fa70 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	3304      	adds	r3, #4
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7fe f85c 	bl	800daec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fa34:	4b19      	ldr	r3, [pc, #100]	; (800fa9c <xTaskPriorityInherit+0xc4>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa42:	4b18      	ldr	r3, [pc, #96]	; (800faa4 <xTaskPriorityInherit+0xcc>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d903      	bls.n	800fa52 <xTaskPriorityInherit+0x7a>
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa4e:	4a15      	ldr	r2, [pc, #84]	; (800faa4 <xTaskPriorityInherit+0xcc>)
 800fa50:	6013      	str	r3, [r2, #0]
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa56:	4613      	mov	r3, r2
 800fa58:	009b      	lsls	r3, r3, #2
 800fa5a:	4413      	add	r3, r2
 800fa5c:	009b      	lsls	r3, r3, #2
 800fa5e:	4a10      	ldr	r2, [pc, #64]	; (800faa0 <xTaskPriorityInherit+0xc8>)
 800fa60:	441a      	add	r2, r3
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	3304      	adds	r3, #4
 800fa66:	4619      	mov	r1, r3
 800fa68:	4610      	mov	r0, r2
 800fa6a:	f7fd ffe2 	bl	800da32 <vListInsertEnd>
 800fa6e:	e004      	b.n	800fa7a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fa70:	4b0a      	ldr	r3, [pc, #40]	; (800fa9c <xTaskPriorityInherit+0xc4>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	60fb      	str	r3, [r7, #12]
 800fa7e:	e008      	b.n	800fa92 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa84:	4b05      	ldr	r3, [pc, #20]	; (800fa9c <xTaskPriorityInherit+0xc4>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d201      	bcs.n	800fa92 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fa8e:	2301      	movs	r3, #1
 800fa90:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fa92:	68fb      	ldr	r3, [r7, #12]
	}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3710      	adds	r7, #16
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}
 800fa9c:	20003574 	.word	0x20003574
 800faa0:	20003578 	.word	0x20003578
 800faa4:	20003a50 	.word	0x20003a50

0800faa8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b086      	sub	sp, #24
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fab4:	2300      	movs	r3, #0
 800fab6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d056      	beq.n	800fb6c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fabe:	4b2e      	ldr	r3, [pc, #184]	; (800fb78 <xTaskPriorityDisinherit+0xd0>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	693a      	ldr	r2, [r7, #16]
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d00a      	beq.n	800fade <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800fac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800facc:	f383 8811 	msr	BASEPRI, r3
 800fad0:	f3bf 8f6f 	isb	sy
 800fad4:	f3bf 8f4f 	dsb	sy
 800fad8:	60fb      	str	r3, [r7, #12]
}
 800fada:	bf00      	nop
 800fadc:	e7fe      	b.n	800fadc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d10a      	bne.n	800fafc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800fae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faea:	f383 8811 	msr	BASEPRI, r3
 800faee:	f3bf 8f6f 	isb	sy
 800faf2:	f3bf 8f4f 	dsb	sy
 800faf6:	60bb      	str	r3, [r7, #8]
}
 800faf8:	bf00      	nop
 800fafa:	e7fe      	b.n	800fafa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb00:	1e5a      	subs	r2, r3, #1
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fb06:	693b      	ldr	r3, [r7, #16]
 800fb08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb0a:	693b      	ldr	r3, [r7, #16]
 800fb0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d02c      	beq.n	800fb6c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d128      	bne.n	800fb6c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb1a:	693b      	ldr	r3, [r7, #16]
 800fb1c:	3304      	adds	r3, #4
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f7fd ffe4 	bl	800daec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fb24:	693b      	ldr	r3, [r7, #16]
 800fb26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb2c:	693b      	ldr	r3, [r7, #16]
 800fb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb3c:	4b0f      	ldr	r3, [pc, #60]	; (800fb7c <xTaskPriorityDisinherit+0xd4>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d903      	bls.n	800fb4c <xTaskPriorityDisinherit+0xa4>
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb48:	4a0c      	ldr	r2, [pc, #48]	; (800fb7c <xTaskPriorityDisinherit+0xd4>)
 800fb4a:	6013      	str	r3, [r2, #0]
 800fb4c:	693b      	ldr	r3, [r7, #16]
 800fb4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb50:	4613      	mov	r3, r2
 800fb52:	009b      	lsls	r3, r3, #2
 800fb54:	4413      	add	r3, r2
 800fb56:	009b      	lsls	r3, r3, #2
 800fb58:	4a09      	ldr	r2, [pc, #36]	; (800fb80 <xTaskPriorityDisinherit+0xd8>)
 800fb5a:	441a      	add	r2, r3
 800fb5c:	693b      	ldr	r3, [r7, #16]
 800fb5e:	3304      	adds	r3, #4
 800fb60:	4619      	mov	r1, r3
 800fb62:	4610      	mov	r0, r2
 800fb64:	f7fd ff65 	bl	800da32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fb68:	2301      	movs	r3, #1
 800fb6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fb6c:	697b      	ldr	r3, [r7, #20]
	}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3718      	adds	r7, #24
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
 800fb76:	bf00      	nop
 800fb78:	20003574 	.word	0x20003574
 800fb7c:	20003a50 	.word	0x20003a50
 800fb80:	20003578 	.word	0x20003578

0800fb84 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b088      	sub	sp, #32
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fb92:	2301      	movs	r3, #1
 800fb94:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d06a      	beq.n	800fc72 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fb9c:	69bb      	ldr	r3, [r7, #24]
 800fb9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d10a      	bne.n	800fbba <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800fba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba8:	f383 8811 	msr	BASEPRI, r3
 800fbac:	f3bf 8f6f 	isb	sy
 800fbb0:	f3bf 8f4f 	dsb	sy
 800fbb4:	60fb      	str	r3, [r7, #12]
}
 800fbb6:	bf00      	nop
 800fbb8:	e7fe      	b.n	800fbb8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fbba:	69bb      	ldr	r3, [r7, #24]
 800fbbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbbe:	683a      	ldr	r2, [r7, #0]
 800fbc0:	429a      	cmp	r2, r3
 800fbc2:	d902      	bls.n	800fbca <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	61fb      	str	r3, [r7, #28]
 800fbc8:	e002      	b.n	800fbd0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fbca:	69bb      	ldr	r3, [r7, #24]
 800fbcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbce:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fbd0:	69bb      	ldr	r3, [r7, #24]
 800fbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbd4:	69fa      	ldr	r2, [r7, #28]
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d04b      	beq.n	800fc72 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fbda:	69bb      	ldr	r3, [r7, #24]
 800fbdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbde:	697a      	ldr	r2, [r7, #20]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d146      	bne.n	800fc72 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fbe4:	4b25      	ldr	r3, [pc, #148]	; (800fc7c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	69ba      	ldr	r2, [r7, #24]
 800fbea:	429a      	cmp	r2, r3
 800fbec:	d10a      	bne.n	800fc04 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800fbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf2:	f383 8811 	msr	BASEPRI, r3
 800fbf6:	f3bf 8f6f 	isb	sy
 800fbfa:	f3bf 8f4f 	dsb	sy
 800fbfe:	60bb      	str	r3, [r7, #8]
}
 800fc00:	bf00      	nop
 800fc02:	e7fe      	b.n	800fc02 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fc04:	69bb      	ldr	r3, [r7, #24]
 800fc06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc08:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fc0a:	69bb      	ldr	r3, [r7, #24]
 800fc0c:	69fa      	ldr	r2, [r7, #28]
 800fc0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fc10:	69bb      	ldr	r3, [r7, #24]
 800fc12:	699b      	ldr	r3, [r3, #24]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	db04      	blt.n	800fc22 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc18:	69fb      	ldr	r3, [r7, #28]
 800fc1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fc1e:	69bb      	ldr	r3, [r7, #24]
 800fc20:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fc22:	69bb      	ldr	r3, [r7, #24]
 800fc24:	6959      	ldr	r1, [r3, #20]
 800fc26:	693a      	ldr	r2, [r7, #16]
 800fc28:	4613      	mov	r3, r2
 800fc2a:	009b      	lsls	r3, r3, #2
 800fc2c:	4413      	add	r3, r2
 800fc2e:	009b      	lsls	r3, r3, #2
 800fc30:	4a13      	ldr	r2, [pc, #76]	; (800fc80 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fc32:	4413      	add	r3, r2
 800fc34:	4299      	cmp	r1, r3
 800fc36:	d11c      	bne.n	800fc72 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc38:	69bb      	ldr	r3, [r7, #24]
 800fc3a:	3304      	adds	r3, #4
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f7fd ff55 	bl	800daec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fc42:	69bb      	ldr	r3, [r7, #24]
 800fc44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc46:	4b0f      	ldr	r3, [pc, #60]	; (800fc84 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d903      	bls.n	800fc56 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800fc4e:	69bb      	ldr	r3, [r7, #24]
 800fc50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc52:	4a0c      	ldr	r2, [pc, #48]	; (800fc84 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fc54:	6013      	str	r3, [r2, #0]
 800fc56:	69bb      	ldr	r3, [r7, #24]
 800fc58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc5a:	4613      	mov	r3, r2
 800fc5c:	009b      	lsls	r3, r3, #2
 800fc5e:	4413      	add	r3, r2
 800fc60:	009b      	lsls	r3, r3, #2
 800fc62:	4a07      	ldr	r2, [pc, #28]	; (800fc80 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fc64:	441a      	add	r2, r3
 800fc66:	69bb      	ldr	r3, [r7, #24]
 800fc68:	3304      	adds	r3, #4
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	4610      	mov	r0, r2
 800fc6e:	f7fd fee0 	bl	800da32 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fc72:	bf00      	nop
 800fc74:	3720      	adds	r7, #32
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}
 800fc7a:	bf00      	nop
 800fc7c:	20003574 	.word	0x20003574
 800fc80:	20003578 	.word	0x20003578
 800fc84:	20003a50 	.word	0x20003a50

0800fc88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fc88:	b480      	push	{r7}
 800fc8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fc8c:	4b07      	ldr	r3, [pc, #28]	; (800fcac <pvTaskIncrementMutexHeldCount+0x24>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d004      	beq.n	800fc9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fc94:	4b05      	ldr	r3, [pc, #20]	; (800fcac <pvTaskIncrementMutexHeldCount+0x24>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc9a:	3201      	adds	r2, #1
 800fc9c:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800fc9e:	4b03      	ldr	r3, [pc, #12]	; (800fcac <pvTaskIncrementMutexHeldCount+0x24>)
 800fca0:	681b      	ldr	r3, [r3, #0]
	}
 800fca2:	4618      	mov	r0, r3
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr
 800fcac:	20003574 	.word	0x20003574

0800fcb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b084      	sub	sp, #16
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fcba:	4b21      	ldr	r3, [pc, #132]	; (800fd40 <prvAddCurrentTaskToDelayedList+0x90>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fcc0:	4b20      	ldr	r3, [pc, #128]	; (800fd44 <prvAddCurrentTaskToDelayedList+0x94>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	3304      	adds	r3, #4
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7fd ff10 	bl	800daec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fcd2:	d10a      	bne.n	800fcea <prvAddCurrentTaskToDelayedList+0x3a>
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d007      	beq.n	800fcea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fcda:	4b1a      	ldr	r3, [pc, #104]	; (800fd44 <prvAddCurrentTaskToDelayedList+0x94>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	3304      	adds	r3, #4
 800fce0:	4619      	mov	r1, r3
 800fce2:	4819      	ldr	r0, [pc, #100]	; (800fd48 <prvAddCurrentTaskToDelayedList+0x98>)
 800fce4:	f7fd fea5 	bl	800da32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fce8:	e026      	b.n	800fd38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fcea:	68fa      	ldr	r2, [r7, #12]
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	4413      	add	r3, r2
 800fcf0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fcf2:	4b14      	ldr	r3, [pc, #80]	; (800fd44 <prvAddCurrentTaskToDelayedList+0x94>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	68ba      	ldr	r2, [r7, #8]
 800fcf8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fcfa:	68ba      	ldr	r2, [r7, #8]
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d209      	bcs.n	800fd16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd02:	4b12      	ldr	r3, [pc, #72]	; (800fd4c <prvAddCurrentTaskToDelayedList+0x9c>)
 800fd04:	681a      	ldr	r2, [r3, #0]
 800fd06:	4b0f      	ldr	r3, [pc, #60]	; (800fd44 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	3304      	adds	r3, #4
 800fd0c:	4619      	mov	r1, r3
 800fd0e:	4610      	mov	r0, r2
 800fd10:	f7fd feb3 	bl	800da7a <vListInsert>
}
 800fd14:	e010      	b.n	800fd38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd16:	4b0e      	ldr	r3, [pc, #56]	; (800fd50 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fd18:	681a      	ldr	r2, [r3, #0]
 800fd1a:	4b0a      	ldr	r3, [pc, #40]	; (800fd44 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	3304      	adds	r3, #4
 800fd20:	4619      	mov	r1, r3
 800fd22:	4610      	mov	r0, r2
 800fd24:	f7fd fea9 	bl	800da7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fd28:	4b0a      	ldr	r3, [pc, #40]	; (800fd54 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	68ba      	ldr	r2, [r7, #8]
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d202      	bcs.n	800fd38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fd32:	4a08      	ldr	r2, [pc, #32]	; (800fd54 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	6013      	str	r3, [r2, #0]
}
 800fd38:	bf00      	nop
 800fd3a:	3710      	adds	r7, #16
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}
 800fd40:	20003a4c 	.word	0x20003a4c
 800fd44:	20003574 	.word	0x20003574
 800fd48:	20003a34 	.word	0x20003a34
 800fd4c:	20003a04 	.word	0x20003a04
 800fd50:	20003a00 	.word	0x20003a00
 800fd54:	20003a68 	.word	0x20003a68

0800fd58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b08a      	sub	sp, #40	; 0x28
 800fd5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fd5e:	2300      	movs	r3, #0
 800fd60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fd62:	f000 fb07 	bl	8010374 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fd66:	4b1c      	ldr	r3, [pc, #112]	; (800fdd8 <xTimerCreateTimerTask+0x80>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d021      	beq.n	800fdb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fd72:	2300      	movs	r3, #0
 800fd74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fd76:	1d3a      	adds	r2, r7, #4
 800fd78:	f107 0108 	add.w	r1, r7, #8
 800fd7c:	f107 030c 	add.w	r3, r7, #12
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7fd fe0f 	bl	800d9a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fd86:	6879      	ldr	r1, [r7, #4]
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	68fa      	ldr	r2, [r7, #12]
 800fd8c:	9202      	str	r2, [sp, #8]
 800fd8e:	9301      	str	r3, [sp, #4]
 800fd90:	2302      	movs	r3, #2
 800fd92:	9300      	str	r3, [sp, #0]
 800fd94:	2300      	movs	r3, #0
 800fd96:	460a      	mov	r2, r1
 800fd98:	4910      	ldr	r1, [pc, #64]	; (800fddc <xTimerCreateTimerTask+0x84>)
 800fd9a:	4811      	ldr	r0, [pc, #68]	; (800fde0 <xTimerCreateTimerTask+0x88>)
 800fd9c:	f7fe ff94 	bl	800ecc8 <xTaskCreateStatic>
 800fda0:	4603      	mov	r3, r0
 800fda2:	4a10      	ldr	r2, [pc, #64]	; (800fde4 <xTimerCreateTimerTask+0x8c>)
 800fda4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fda6:	4b0f      	ldr	r3, [pc, #60]	; (800fde4 <xTimerCreateTimerTask+0x8c>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d001      	beq.n	800fdb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fdae:	2301      	movs	r3, #1
 800fdb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d10a      	bne.n	800fdce <xTimerCreateTimerTask+0x76>
	__asm volatile
 800fdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdbc:	f383 8811 	msr	BASEPRI, r3
 800fdc0:	f3bf 8f6f 	isb	sy
 800fdc4:	f3bf 8f4f 	dsb	sy
 800fdc8:	613b      	str	r3, [r7, #16]
}
 800fdca:	bf00      	nop
 800fdcc:	e7fe      	b.n	800fdcc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fdce:	697b      	ldr	r3, [r7, #20]
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3718      	adds	r7, #24
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}
 800fdd8:	20003aa4 	.word	0x20003aa4
 800fddc:	08015000 	.word	0x08015000
 800fde0:	0800ff1d 	.word	0x0800ff1d
 800fde4:	20003aa8 	.word	0x20003aa8

0800fde8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b08a      	sub	sp, #40	; 0x28
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	60f8      	str	r0, [r7, #12]
 800fdf0:	60b9      	str	r1, [r7, #8]
 800fdf2:	607a      	str	r2, [r7, #4]
 800fdf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d10a      	bne.n	800fe16 <xTimerGenericCommand+0x2e>
	__asm volatile
 800fe00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe04:	f383 8811 	msr	BASEPRI, r3
 800fe08:	f3bf 8f6f 	isb	sy
 800fe0c:	f3bf 8f4f 	dsb	sy
 800fe10:	623b      	str	r3, [r7, #32]
}
 800fe12:	bf00      	nop
 800fe14:	e7fe      	b.n	800fe14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fe16:	4b1a      	ldr	r3, [pc, #104]	; (800fe80 <xTimerGenericCommand+0x98>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d02a      	beq.n	800fe74 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	2b05      	cmp	r3, #5
 800fe2e:	dc18      	bgt.n	800fe62 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fe30:	f7ff fdb4 	bl	800f99c <xTaskGetSchedulerState>
 800fe34:	4603      	mov	r3, r0
 800fe36:	2b02      	cmp	r3, #2
 800fe38:	d109      	bne.n	800fe4e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fe3a:	4b11      	ldr	r3, [pc, #68]	; (800fe80 <xTimerGenericCommand+0x98>)
 800fe3c:	6818      	ldr	r0, [r3, #0]
 800fe3e:	f107 0110 	add.w	r1, r7, #16
 800fe42:	2300      	movs	r3, #0
 800fe44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe46:	f7fe f8d9 	bl	800dffc <xQueueGenericSend>
 800fe4a:	6278      	str	r0, [r7, #36]	; 0x24
 800fe4c:	e012      	b.n	800fe74 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fe4e:	4b0c      	ldr	r3, [pc, #48]	; (800fe80 <xTimerGenericCommand+0x98>)
 800fe50:	6818      	ldr	r0, [r3, #0]
 800fe52:	f107 0110 	add.w	r1, r7, #16
 800fe56:	2300      	movs	r3, #0
 800fe58:	2200      	movs	r2, #0
 800fe5a:	f7fe f8cf 	bl	800dffc <xQueueGenericSend>
 800fe5e:	6278      	str	r0, [r7, #36]	; 0x24
 800fe60:	e008      	b.n	800fe74 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fe62:	4b07      	ldr	r3, [pc, #28]	; (800fe80 <xTimerGenericCommand+0x98>)
 800fe64:	6818      	ldr	r0, [r3, #0]
 800fe66:	f107 0110 	add.w	r1, r7, #16
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	683a      	ldr	r2, [r7, #0]
 800fe6e:	f7fe f9c3 	bl	800e1f8 <xQueueGenericSendFromISR>
 800fe72:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fe74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	3728      	adds	r7, #40	; 0x28
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}
 800fe7e:	bf00      	nop
 800fe80:	20003aa4 	.word	0x20003aa4

0800fe84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b088      	sub	sp, #32
 800fe88:	af02      	add	r7, sp, #8
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe8e:	4b22      	ldr	r3, [pc, #136]	; (800ff18 <prvProcessExpiredTimer+0x94>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	68db      	ldr	r3, [r3, #12]
 800fe94:	68db      	ldr	r3, [r3, #12]
 800fe96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	3304      	adds	r3, #4
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7fd fe25 	bl	800daec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fea8:	f003 0304 	and.w	r3, r3, #4
 800feac:	2b00      	cmp	r3, #0
 800feae:	d022      	beq.n	800fef6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	699a      	ldr	r2, [r3, #24]
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	18d1      	adds	r1, r2, r3
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	683a      	ldr	r2, [r7, #0]
 800febc:	6978      	ldr	r0, [r7, #20]
 800febe:	f000 f8d1 	bl	8010064 <prvInsertTimerInActiveList>
 800fec2:	4603      	mov	r3, r0
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d01f      	beq.n	800ff08 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fec8:	2300      	movs	r3, #0
 800feca:	9300      	str	r3, [sp, #0]
 800fecc:	2300      	movs	r3, #0
 800fece:	687a      	ldr	r2, [r7, #4]
 800fed0:	2100      	movs	r1, #0
 800fed2:	6978      	ldr	r0, [r7, #20]
 800fed4:	f7ff ff88 	bl	800fde8 <xTimerGenericCommand>
 800fed8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d113      	bne.n	800ff08 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee4:	f383 8811 	msr	BASEPRI, r3
 800fee8:	f3bf 8f6f 	isb	sy
 800feec:	f3bf 8f4f 	dsb	sy
 800fef0:	60fb      	str	r3, [r7, #12]
}
 800fef2:	bf00      	nop
 800fef4:	e7fe      	b.n	800fef4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fefc:	f023 0301 	bic.w	r3, r3, #1
 800ff00:	b2da      	uxtb	r2, r3
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	6a1b      	ldr	r3, [r3, #32]
 800ff0c:	6978      	ldr	r0, [r7, #20]
 800ff0e:	4798      	blx	r3
}
 800ff10:	bf00      	nop
 800ff12:	3718      	adds	r7, #24
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	20003a9c 	.word	0x20003a9c

0800ff1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b084      	sub	sp, #16
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ff24:	f107 0308 	add.w	r3, r7, #8
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f000 f857 	bl	800ffdc <prvGetNextExpireTime>
 800ff2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	4619      	mov	r1, r3
 800ff34:	68f8      	ldr	r0, [r7, #12]
 800ff36:	f000 f803 	bl	800ff40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ff3a:	f000 f8d5 	bl	80100e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ff3e:	e7f1      	b.n	800ff24 <prvTimerTask+0x8>

0800ff40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ff4a:	f7ff f919 	bl	800f180 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ff4e:	f107 0308 	add.w	r3, r7, #8
 800ff52:	4618      	mov	r0, r3
 800ff54:	f000 f866 	bl	8010024 <prvSampleTimeNow>
 800ff58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d130      	bne.n	800ffc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d10a      	bne.n	800ff7c <prvProcessTimerOrBlockTask+0x3c>
 800ff66:	687a      	ldr	r2, [r7, #4]
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d806      	bhi.n	800ff7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ff6e:	f7ff f915 	bl	800f19c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ff72:	68f9      	ldr	r1, [r7, #12]
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f7ff ff85 	bl	800fe84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ff7a:	e024      	b.n	800ffc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d008      	beq.n	800ff94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ff82:	4b13      	ldr	r3, [pc, #76]	; (800ffd0 <prvProcessTimerOrBlockTask+0x90>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d101      	bne.n	800ff90 <prvProcessTimerOrBlockTask+0x50>
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	e000      	b.n	800ff92 <prvProcessTimerOrBlockTask+0x52>
 800ff90:	2300      	movs	r3, #0
 800ff92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ff94:	4b0f      	ldr	r3, [pc, #60]	; (800ffd4 <prvProcessTimerOrBlockTask+0x94>)
 800ff96:	6818      	ldr	r0, [r3, #0]
 800ff98:	687a      	ldr	r2, [r7, #4]
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	1ad3      	subs	r3, r2, r3
 800ff9e:	683a      	ldr	r2, [r7, #0]
 800ffa0:	4619      	mov	r1, r3
 800ffa2:	f7fe fe5d 	bl	800ec60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ffa6:	f7ff f8f9 	bl	800f19c <xTaskResumeAll>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d10a      	bne.n	800ffc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ffb0:	4b09      	ldr	r3, [pc, #36]	; (800ffd8 <prvProcessTimerOrBlockTask+0x98>)
 800ffb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffb6:	601a      	str	r2, [r3, #0]
 800ffb8:	f3bf 8f4f 	dsb	sy
 800ffbc:	f3bf 8f6f 	isb	sy
}
 800ffc0:	e001      	b.n	800ffc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ffc2:	f7ff f8eb 	bl	800f19c <xTaskResumeAll>
}
 800ffc6:	bf00      	nop
 800ffc8:	3710      	adds	r7, #16
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}
 800ffce:	bf00      	nop
 800ffd0:	20003aa0 	.word	0x20003aa0
 800ffd4:	20003aa4 	.word	0x20003aa4
 800ffd8:	e000ed04 	.word	0xe000ed04

0800ffdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ffdc:	b480      	push	{r7}
 800ffde:	b085      	sub	sp, #20
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ffe4:	4b0e      	ldr	r3, [pc, #56]	; (8010020 <prvGetNextExpireTime+0x44>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d101      	bne.n	800fff2 <prvGetNextExpireTime+0x16>
 800ffee:	2201      	movs	r2, #1
 800fff0:	e000      	b.n	800fff4 <prvGetNextExpireTime+0x18>
 800fff2:	2200      	movs	r2, #0
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d105      	bne.n	801000c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010000:	4b07      	ldr	r3, [pc, #28]	; (8010020 <prvGetNextExpireTime+0x44>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	68db      	ldr	r3, [r3, #12]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	60fb      	str	r3, [r7, #12]
 801000a:	e001      	b.n	8010010 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801000c:	2300      	movs	r3, #0
 801000e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010010:	68fb      	ldr	r3, [r7, #12]
}
 8010012:	4618      	mov	r0, r3
 8010014:	3714      	adds	r7, #20
 8010016:	46bd      	mov	sp, r7
 8010018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001c:	4770      	bx	lr
 801001e:	bf00      	nop
 8010020:	20003a9c 	.word	0x20003a9c

08010024 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801002c:	f7ff f954 	bl	800f2d8 <xTaskGetTickCount>
 8010030:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010032:	4b0b      	ldr	r3, [pc, #44]	; (8010060 <prvSampleTimeNow+0x3c>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	68fa      	ldr	r2, [r7, #12]
 8010038:	429a      	cmp	r2, r3
 801003a:	d205      	bcs.n	8010048 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801003c:	f000 f936 	bl	80102ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2201      	movs	r2, #1
 8010044:	601a      	str	r2, [r3, #0]
 8010046:	e002      	b.n	801004e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2200      	movs	r2, #0
 801004c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801004e:	4a04      	ldr	r2, [pc, #16]	; (8010060 <prvSampleTimeNow+0x3c>)
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010054:	68fb      	ldr	r3, [r7, #12]
}
 8010056:	4618      	mov	r0, r3
 8010058:	3710      	adds	r7, #16
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}
 801005e:	bf00      	nop
 8010060:	20003aac 	.word	0x20003aac

08010064 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b086      	sub	sp, #24
 8010068:	af00      	add	r7, sp, #0
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	607a      	str	r2, [r7, #4]
 8010070:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010072:	2300      	movs	r3, #0
 8010074:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	68ba      	ldr	r2, [r7, #8]
 801007a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	68fa      	ldr	r2, [r7, #12]
 8010080:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010082:	68ba      	ldr	r2, [r7, #8]
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	429a      	cmp	r2, r3
 8010088:	d812      	bhi.n	80100b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801008a:	687a      	ldr	r2, [r7, #4]
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	1ad2      	subs	r2, r2, r3
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	699b      	ldr	r3, [r3, #24]
 8010094:	429a      	cmp	r2, r3
 8010096:	d302      	bcc.n	801009e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010098:	2301      	movs	r3, #1
 801009a:	617b      	str	r3, [r7, #20]
 801009c:	e01b      	b.n	80100d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801009e:	4b10      	ldr	r3, [pc, #64]	; (80100e0 <prvInsertTimerInActiveList+0x7c>)
 80100a0:	681a      	ldr	r2, [r3, #0]
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	3304      	adds	r3, #4
 80100a6:	4619      	mov	r1, r3
 80100a8:	4610      	mov	r0, r2
 80100aa:	f7fd fce6 	bl	800da7a <vListInsert>
 80100ae:	e012      	b.n	80100d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80100b0:	687a      	ldr	r2, [r7, #4]
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d206      	bcs.n	80100c6 <prvInsertTimerInActiveList+0x62>
 80100b8:	68ba      	ldr	r2, [r7, #8]
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	429a      	cmp	r2, r3
 80100be:	d302      	bcc.n	80100c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80100c0:	2301      	movs	r3, #1
 80100c2:	617b      	str	r3, [r7, #20]
 80100c4:	e007      	b.n	80100d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80100c6:	4b07      	ldr	r3, [pc, #28]	; (80100e4 <prvInsertTimerInActiveList+0x80>)
 80100c8:	681a      	ldr	r2, [r3, #0]
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	3304      	adds	r3, #4
 80100ce:	4619      	mov	r1, r3
 80100d0:	4610      	mov	r0, r2
 80100d2:	f7fd fcd2 	bl	800da7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80100d6:	697b      	ldr	r3, [r7, #20]
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3718      	adds	r7, #24
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	20003aa0 	.word	0x20003aa0
 80100e4:	20003a9c 	.word	0x20003a9c

080100e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b08e      	sub	sp, #56	; 0x38
 80100ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80100ee:	e0ca      	b.n	8010286 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	da18      	bge.n	8010128 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80100f6:	1d3b      	adds	r3, r7, #4
 80100f8:	3304      	adds	r3, #4
 80100fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80100fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d10a      	bne.n	8010118 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010106:	f383 8811 	msr	BASEPRI, r3
 801010a:	f3bf 8f6f 	isb	sy
 801010e:	f3bf 8f4f 	dsb	sy
 8010112:	61fb      	str	r3, [r7, #28]
}
 8010114:	bf00      	nop
 8010116:	e7fe      	b.n	8010116 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801011e:	6850      	ldr	r0, [r2, #4]
 8010120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010122:	6892      	ldr	r2, [r2, #8]
 8010124:	4611      	mov	r1, r2
 8010126:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2b00      	cmp	r3, #0
 801012c:	f2c0 80ab 	blt.w	8010286 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010136:	695b      	ldr	r3, [r3, #20]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d004      	beq.n	8010146 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801013c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801013e:	3304      	adds	r3, #4
 8010140:	4618      	mov	r0, r3
 8010142:	f7fd fcd3 	bl	800daec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010146:	463b      	mov	r3, r7
 8010148:	4618      	mov	r0, r3
 801014a:	f7ff ff6b 	bl	8010024 <prvSampleTimeNow>
 801014e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2b09      	cmp	r3, #9
 8010154:	f200 8096 	bhi.w	8010284 <prvProcessReceivedCommands+0x19c>
 8010158:	a201      	add	r2, pc, #4	; (adr r2, 8010160 <prvProcessReceivedCommands+0x78>)
 801015a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801015e:	bf00      	nop
 8010160:	08010189 	.word	0x08010189
 8010164:	08010189 	.word	0x08010189
 8010168:	08010189 	.word	0x08010189
 801016c:	080101fd 	.word	0x080101fd
 8010170:	08010211 	.word	0x08010211
 8010174:	0801025b 	.word	0x0801025b
 8010178:	08010189 	.word	0x08010189
 801017c:	08010189 	.word	0x08010189
 8010180:	080101fd 	.word	0x080101fd
 8010184:	08010211 	.word	0x08010211
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801018a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801018e:	f043 0301 	orr.w	r3, r3, #1
 8010192:	b2da      	uxtb	r2, r3
 8010194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801019a:	68ba      	ldr	r2, [r7, #8]
 801019c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801019e:	699b      	ldr	r3, [r3, #24]
 80101a0:	18d1      	adds	r1, r2, r3
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80101a8:	f7ff ff5c 	bl	8010064 <prvInsertTimerInActiveList>
 80101ac:	4603      	mov	r3, r0
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d069      	beq.n	8010286 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80101b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101b4:	6a1b      	ldr	r3, [r3, #32]
 80101b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80101b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80101ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80101c0:	f003 0304 	and.w	r3, r3, #4
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d05e      	beq.n	8010286 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80101c8:	68ba      	ldr	r2, [r7, #8]
 80101ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101cc:	699b      	ldr	r3, [r3, #24]
 80101ce:	441a      	add	r2, r3
 80101d0:	2300      	movs	r3, #0
 80101d2:	9300      	str	r3, [sp, #0]
 80101d4:	2300      	movs	r3, #0
 80101d6:	2100      	movs	r1, #0
 80101d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80101da:	f7ff fe05 	bl	800fde8 <xTimerGenericCommand>
 80101de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80101e0:	6a3b      	ldr	r3, [r7, #32]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d14f      	bne.n	8010286 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80101e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ea:	f383 8811 	msr	BASEPRI, r3
 80101ee:	f3bf 8f6f 	isb	sy
 80101f2:	f3bf 8f4f 	dsb	sy
 80101f6:	61bb      	str	r3, [r7, #24]
}
 80101f8:	bf00      	nop
 80101fa:	e7fe      	b.n	80101fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80101fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010202:	f023 0301 	bic.w	r3, r3, #1
 8010206:	b2da      	uxtb	r2, r3
 8010208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801020a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801020e:	e03a      	b.n	8010286 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010212:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010216:	f043 0301 	orr.w	r3, r3, #1
 801021a:	b2da      	uxtb	r2, r3
 801021c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801021e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010222:	68ba      	ldr	r2, [r7, #8]
 8010224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010226:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801022a:	699b      	ldr	r3, [r3, #24]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d10a      	bne.n	8010246 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010234:	f383 8811 	msr	BASEPRI, r3
 8010238:	f3bf 8f6f 	isb	sy
 801023c:	f3bf 8f4f 	dsb	sy
 8010240:	617b      	str	r3, [r7, #20]
}
 8010242:	bf00      	nop
 8010244:	e7fe      	b.n	8010244 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010248:	699a      	ldr	r2, [r3, #24]
 801024a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801024c:	18d1      	adds	r1, r2, r3
 801024e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010254:	f7ff ff06 	bl	8010064 <prvInsertTimerInActiveList>
					break;
 8010258:	e015      	b.n	8010286 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801025a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801025c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010260:	f003 0302 	and.w	r3, r3, #2
 8010264:	2b00      	cmp	r3, #0
 8010266:	d103      	bne.n	8010270 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801026a:	f000 fbe1 	bl	8010a30 <vPortFree>
 801026e:	e00a      	b.n	8010286 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010276:	f023 0301 	bic.w	r3, r3, #1
 801027a:	b2da      	uxtb	r2, r3
 801027c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801027e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010282:	e000      	b.n	8010286 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8010284:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010286:	4b08      	ldr	r3, [pc, #32]	; (80102a8 <prvProcessReceivedCommands+0x1c0>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	1d39      	adds	r1, r7, #4
 801028c:	2200      	movs	r2, #0
 801028e:	4618      	mov	r0, r3
 8010290:	f7fe f8da 	bl	800e448 <xQueueReceive>
 8010294:	4603      	mov	r3, r0
 8010296:	2b00      	cmp	r3, #0
 8010298:	f47f af2a 	bne.w	80100f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801029c:	bf00      	nop
 801029e:	bf00      	nop
 80102a0:	3730      	adds	r7, #48	; 0x30
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
 80102a6:	bf00      	nop
 80102a8:	20003aa4 	.word	0x20003aa4

080102ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b088      	sub	sp, #32
 80102b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80102b2:	e048      	b.n	8010346 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80102b4:	4b2d      	ldr	r3, [pc, #180]	; (801036c <prvSwitchTimerLists+0xc0>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	68db      	ldr	r3, [r3, #12]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102be:	4b2b      	ldr	r3, [pc, #172]	; (801036c <prvSwitchTimerLists+0xc0>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	68db      	ldr	r3, [r3, #12]
 80102c4:	68db      	ldr	r3, [r3, #12]
 80102c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	3304      	adds	r3, #4
 80102cc:	4618      	mov	r0, r3
 80102ce:	f7fd fc0d 	bl	800daec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	6a1b      	ldr	r3, [r3, #32]
 80102d6:	68f8      	ldr	r0, [r7, #12]
 80102d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80102e0:	f003 0304 	and.w	r3, r3, #4
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d02e      	beq.n	8010346 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	699b      	ldr	r3, [r3, #24]
 80102ec:	693a      	ldr	r2, [r7, #16]
 80102ee:	4413      	add	r3, r2
 80102f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80102f2:	68ba      	ldr	r2, [r7, #8]
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d90e      	bls.n	8010318 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	68ba      	ldr	r2, [r7, #8]
 80102fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	68fa      	ldr	r2, [r7, #12]
 8010304:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010306:	4b19      	ldr	r3, [pc, #100]	; (801036c <prvSwitchTimerLists+0xc0>)
 8010308:	681a      	ldr	r2, [r3, #0]
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	3304      	adds	r3, #4
 801030e:	4619      	mov	r1, r3
 8010310:	4610      	mov	r0, r2
 8010312:	f7fd fbb2 	bl	800da7a <vListInsert>
 8010316:	e016      	b.n	8010346 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010318:	2300      	movs	r3, #0
 801031a:	9300      	str	r3, [sp, #0]
 801031c:	2300      	movs	r3, #0
 801031e:	693a      	ldr	r2, [r7, #16]
 8010320:	2100      	movs	r1, #0
 8010322:	68f8      	ldr	r0, [r7, #12]
 8010324:	f7ff fd60 	bl	800fde8 <xTimerGenericCommand>
 8010328:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d10a      	bne.n	8010346 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010334:	f383 8811 	msr	BASEPRI, r3
 8010338:	f3bf 8f6f 	isb	sy
 801033c:	f3bf 8f4f 	dsb	sy
 8010340:	603b      	str	r3, [r7, #0]
}
 8010342:	bf00      	nop
 8010344:	e7fe      	b.n	8010344 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010346:	4b09      	ldr	r3, [pc, #36]	; (801036c <prvSwitchTimerLists+0xc0>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d1b1      	bne.n	80102b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010350:	4b06      	ldr	r3, [pc, #24]	; (801036c <prvSwitchTimerLists+0xc0>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010356:	4b06      	ldr	r3, [pc, #24]	; (8010370 <prvSwitchTimerLists+0xc4>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	4a04      	ldr	r2, [pc, #16]	; (801036c <prvSwitchTimerLists+0xc0>)
 801035c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801035e:	4a04      	ldr	r2, [pc, #16]	; (8010370 <prvSwitchTimerLists+0xc4>)
 8010360:	697b      	ldr	r3, [r7, #20]
 8010362:	6013      	str	r3, [r2, #0]
}
 8010364:	bf00      	nop
 8010366:	3718      	adds	r7, #24
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}
 801036c:	20003a9c 	.word	0x20003a9c
 8010370:	20003aa0 	.word	0x20003aa0

08010374 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b082      	sub	sp, #8
 8010378:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801037a:	f000 f96b 	bl	8010654 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801037e:	4b15      	ldr	r3, [pc, #84]	; (80103d4 <prvCheckForValidListAndQueue+0x60>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d120      	bne.n	80103c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010386:	4814      	ldr	r0, [pc, #80]	; (80103d8 <prvCheckForValidListAndQueue+0x64>)
 8010388:	f7fd fb26 	bl	800d9d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801038c:	4813      	ldr	r0, [pc, #76]	; (80103dc <prvCheckForValidListAndQueue+0x68>)
 801038e:	f7fd fb23 	bl	800d9d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010392:	4b13      	ldr	r3, [pc, #76]	; (80103e0 <prvCheckForValidListAndQueue+0x6c>)
 8010394:	4a10      	ldr	r2, [pc, #64]	; (80103d8 <prvCheckForValidListAndQueue+0x64>)
 8010396:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010398:	4b12      	ldr	r3, [pc, #72]	; (80103e4 <prvCheckForValidListAndQueue+0x70>)
 801039a:	4a10      	ldr	r2, [pc, #64]	; (80103dc <prvCheckForValidListAndQueue+0x68>)
 801039c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801039e:	2300      	movs	r3, #0
 80103a0:	9300      	str	r3, [sp, #0]
 80103a2:	4b11      	ldr	r3, [pc, #68]	; (80103e8 <prvCheckForValidListAndQueue+0x74>)
 80103a4:	4a11      	ldr	r2, [pc, #68]	; (80103ec <prvCheckForValidListAndQueue+0x78>)
 80103a6:	2110      	movs	r1, #16
 80103a8:	200a      	movs	r0, #10
 80103aa:	f7fd fc31 	bl	800dc10 <xQueueGenericCreateStatic>
 80103ae:	4603      	mov	r3, r0
 80103b0:	4a08      	ldr	r2, [pc, #32]	; (80103d4 <prvCheckForValidListAndQueue+0x60>)
 80103b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80103b4:	4b07      	ldr	r3, [pc, #28]	; (80103d4 <prvCheckForValidListAndQueue+0x60>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d005      	beq.n	80103c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80103bc:	4b05      	ldr	r3, [pc, #20]	; (80103d4 <prvCheckForValidListAndQueue+0x60>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	490b      	ldr	r1, [pc, #44]	; (80103f0 <prvCheckForValidListAndQueue+0x7c>)
 80103c2:	4618      	mov	r0, r3
 80103c4:	f7fe fbf8 	bl	800ebb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80103c8:	f000 f974 	bl	80106b4 <vPortExitCritical>
}
 80103cc:	bf00      	nop
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}
 80103d2:	bf00      	nop
 80103d4:	20003aa4 	.word	0x20003aa4
 80103d8:	20003a74 	.word	0x20003a74
 80103dc:	20003a88 	.word	0x20003a88
 80103e0:	20003a9c 	.word	0x20003a9c
 80103e4:	20003aa0 	.word	0x20003aa0
 80103e8:	20003b50 	.word	0x20003b50
 80103ec:	20003ab0 	.word	0x20003ab0
 80103f0:	08015008 	.word	0x08015008

080103f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80103f4:	b480      	push	{r7}
 80103f6:	b085      	sub	sp, #20
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	60f8      	str	r0, [r7, #12]
 80103fc:	60b9      	str	r1, [r7, #8]
 80103fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	3b04      	subs	r3, #4
 8010404:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801040c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	3b04      	subs	r3, #4
 8010412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	f023 0201 	bic.w	r2, r3, #1
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	3b04      	subs	r3, #4
 8010422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010424:	4a0c      	ldr	r2, [pc, #48]	; (8010458 <pxPortInitialiseStack+0x64>)
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	3b14      	subs	r3, #20
 801042e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010430:	687a      	ldr	r2, [r7, #4]
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	3b04      	subs	r3, #4
 801043a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	f06f 0202 	mvn.w	r2, #2
 8010442:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	3b20      	subs	r3, #32
 8010448:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801044a:	68fb      	ldr	r3, [r7, #12]
}
 801044c:	4618      	mov	r0, r3
 801044e:	3714      	adds	r7, #20
 8010450:	46bd      	mov	sp, r7
 8010452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010456:	4770      	bx	lr
 8010458:	0801045d 	.word	0x0801045d

0801045c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801045c:	b480      	push	{r7}
 801045e:	b085      	sub	sp, #20
 8010460:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010462:	2300      	movs	r3, #0
 8010464:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010466:	4b12      	ldr	r3, [pc, #72]	; (80104b0 <prvTaskExitError+0x54>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801046e:	d00a      	beq.n	8010486 <prvTaskExitError+0x2a>
	__asm volatile
 8010470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010474:	f383 8811 	msr	BASEPRI, r3
 8010478:	f3bf 8f6f 	isb	sy
 801047c:	f3bf 8f4f 	dsb	sy
 8010480:	60fb      	str	r3, [r7, #12]
}
 8010482:	bf00      	nop
 8010484:	e7fe      	b.n	8010484 <prvTaskExitError+0x28>
	__asm volatile
 8010486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801048a:	f383 8811 	msr	BASEPRI, r3
 801048e:	f3bf 8f6f 	isb	sy
 8010492:	f3bf 8f4f 	dsb	sy
 8010496:	60bb      	str	r3, [r7, #8]
}
 8010498:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801049a:	bf00      	nop
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d0fc      	beq.n	801049c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80104a2:	bf00      	nop
 80104a4:	bf00      	nop
 80104a6:	3714      	adds	r7, #20
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr
 80104b0:	2000011c 	.word	0x2000011c
	...

080104c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80104c0:	4b07      	ldr	r3, [pc, #28]	; (80104e0 <pxCurrentTCBConst2>)
 80104c2:	6819      	ldr	r1, [r3, #0]
 80104c4:	6808      	ldr	r0, [r1, #0]
 80104c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ca:	f380 8809 	msr	PSP, r0
 80104ce:	f3bf 8f6f 	isb	sy
 80104d2:	f04f 0000 	mov.w	r0, #0
 80104d6:	f380 8811 	msr	BASEPRI, r0
 80104da:	4770      	bx	lr
 80104dc:	f3af 8000 	nop.w

080104e0 <pxCurrentTCBConst2>:
 80104e0:	20003574 	.word	0x20003574
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80104e4:	bf00      	nop
 80104e6:	bf00      	nop

080104e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80104e8:	4808      	ldr	r0, [pc, #32]	; (801050c <prvPortStartFirstTask+0x24>)
 80104ea:	6800      	ldr	r0, [r0, #0]
 80104ec:	6800      	ldr	r0, [r0, #0]
 80104ee:	f380 8808 	msr	MSP, r0
 80104f2:	f04f 0000 	mov.w	r0, #0
 80104f6:	f380 8814 	msr	CONTROL, r0
 80104fa:	b662      	cpsie	i
 80104fc:	b661      	cpsie	f
 80104fe:	f3bf 8f4f 	dsb	sy
 8010502:	f3bf 8f6f 	isb	sy
 8010506:	df00      	svc	0
 8010508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801050a:	bf00      	nop
 801050c:	e000ed08 	.word	0xe000ed08

08010510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b086      	sub	sp, #24
 8010514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010516:	4b46      	ldr	r3, [pc, #280]	; (8010630 <xPortStartScheduler+0x120>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	4a46      	ldr	r2, [pc, #280]	; (8010634 <xPortStartScheduler+0x124>)
 801051c:	4293      	cmp	r3, r2
 801051e:	d10a      	bne.n	8010536 <xPortStartScheduler+0x26>
	__asm volatile
 8010520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010524:	f383 8811 	msr	BASEPRI, r3
 8010528:	f3bf 8f6f 	isb	sy
 801052c:	f3bf 8f4f 	dsb	sy
 8010530:	613b      	str	r3, [r7, #16]
}
 8010532:	bf00      	nop
 8010534:	e7fe      	b.n	8010534 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010536:	4b3e      	ldr	r3, [pc, #248]	; (8010630 <xPortStartScheduler+0x120>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	4a3f      	ldr	r2, [pc, #252]	; (8010638 <xPortStartScheduler+0x128>)
 801053c:	4293      	cmp	r3, r2
 801053e:	d10a      	bne.n	8010556 <xPortStartScheduler+0x46>
	__asm volatile
 8010540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010544:	f383 8811 	msr	BASEPRI, r3
 8010548:	f3bf 8f6f 	isb	sy
 801054c:	f3bf 8f4f 	dsb	sy
 8010550:	60fb      	str	r3, [r7, #12]
}
 8010552:	bf00      	nop
 8010554:	e7fe      	b.n	8010554 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010556:	4b39      	ldr	r3, [pc, #228]	; (801063c <xPortStartScheduler+0x12c>)
 8010558:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	781b      	ldrb	r3, [r3, #0]
 801055e:	b2db      	uxtb	r3, r3
 8010560:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010562:	697b      	ldr	r3, [r7, #20]
 8010564:	22ff      	movs	r2, #255	; 0xff
 8010566:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	781b      	ldrb	r3, [r3, #0]
 801056c:	b2db      	uxtb	r3, r3
 801056e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010570:	78fb      	ldrb	r3, [r7, #3]
 8010572:	b2db      	uxtb	r3, r3
 8010574:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010578:	b2da      	uxtb	r2, r3
 801057a:	4b31      	ldr	r3, [pc, #196]	; (8010640 <xPortStartScheduler+0x130>)
 801057c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801057e:	4b31      	ldr	r3, [pc, #196]	; (8010644 <xPortStartScheduler+0x134>)
 8010580:	2207      	movs	r2, #7
 8010582:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010584:	e009      	b.n	801059a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010586:	4b2f      	ldr	r3, [pc, #188]	; (8010644 <xPortStartScheduler+0x134>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	3b01      	subs	r3, #1
 801058c:	4a2d      	ldr	r2, [pc, #180]	; (8010644 <xPortStartScheduler+0x134>)
 801058e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010590:	78fb      	ldrb	r3, [r7, #3]
 8010592:	b2db      	uxtb	r3, r3
 8010594:	005b      	lsls	r3, r3, #1
 8010596:	b2db      	uxtb	r3, r3
 8010598:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801059a:	78fb      	ldrb	r3, [r7, #3]
 801059c:	b2db      	uxtb	r3, r3
 801059e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80105a2:	2b80      	cmp	r3, #128	; 0x80
 80105a4:	d0ef      	beq.n	8010586 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80105a6:	4b27      	ldr	r3, [pc, #156]	; (8010644 <xPortStartScheduler+0x134>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	f1c3 0307 	rsb	r3, r3, #7
 80105ae:	2b04      	cmp	r3, #4
 80105b0:	d00a      	beq.n	80105c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80105b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b6:	f383 8811 	msr	BASEPRI, r3
 80105ba:	f3bf 8f6f 	isb	sy
 80105be:	f3bf 8f4f 	dsb	sy
 80105c2:	60bb      	str	r3, [r7, #8]
}
 80105c4:	bf00      	nop
 80105c6:	e7fe      	b.n	80105c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80105c8:	4b1e      	ldr	r3, [pc, #120]	; (8010644 <xPortStartScheduler+0x134>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	021b      	lsls	r3, r3, #8
 80105ce:	4a1d      	ldr	r2, [pc, #116]	; (8010644 <xPortStartScheduler+0x134>)
 80105d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80105d2:	4b1c      	ldr	r3, [pc, #112]	; (8010644 <xPortStartScheduler+0x134>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80105da:	4a1a      	ldr	r2, [pc, #104]	; (8010644 <xPortStartScheduler+0x134>)
 80105dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	b2da      	uxtb	r2, r3
 80105e2:	697b      	ldr	r3, [r7, #20]
 80105e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80105e6:	4b18      	ldr	r3, [pc, #96]	; (8010648 <xPortStartScheduler+0x138>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	4a17      	ldr	r2, [pc, #92]	; (8010648 <xPortStartScheduler+0x138>)
 80105ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80105f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80105f2:	4b15      	ldr	r3, [pc, #84]	; (8010648 <xPortStartScheduler+0x138>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	4a14      	ldr	r2, [pc, #80]	; (8010648 <xPortStartScheduler+0x138>)
 80105f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80105fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80105fe:	f000 f8dd 	bl	80107bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010602:	4b12      	ldr	r3, [pc, #72]	; (801064c <xPortStartScheduler+0x13c>)
 8010604:	2200      	movs	r2, #0
 8010606:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010608:	f000 f8fc 	bl	8010804 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801060c:	4b10      	ldr	r3, [pc, #64]	; (8010650 <xPortStartScheduler+0x140>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	4a0f      	ldr	r2, [pc, #60]	; (8010650 <xPortStartScheduler+0x140>)
 8010612:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010616:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010618:	f7ff ff66 	bl	80104e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801061c:	f7fe ff38 	bl	800f490 <vTaskSwitchContext>
	prvTaskExitError();
 8010620:	f7ff ff1c 	bl	801045c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010624:	2300      	movs	r3, #0
}
 8010626:	4618      	mov	r0, r3
 8010628:	3718      	adds	r7, #24
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}
 801062e:	bf00      	nop
 8010630:	e000ed00 	.word	0xe000ed00
 8010634:	410fc271 	.word	0x410fc271
 8010638:	410fc270 	.word	0x410fc270
 801063c:	e000e400 	.word	0xe000e400
 8010640:	20003ba0 	.word	0x20003ba0
 8010644:	20003ba4 	.word	0x20003ba4
 8010648:	e000ed20 	.word	0xe000ed20
 801064c:	2000011c 	.word	0x2000011c
 8010650:	e000ef34 	.word	0xe000ef34

08010654 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010654:	b480      	push	{r7}
 8010656:	b083      	sub	sp, #12
 8010658:	af00      	add	r7, sp, #0
	__asm volatile
 801065a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801065e:	f383 8811 	msr	BASEPRI, r3
 8010662:	f3bf 8f6f 	isb	sy
 8010666:	f3bf 8f4f 	dsb	sy
 801066a:	607b      	str	r3, [r7, #4]
}
 801066c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801066e:	4b0f      	ldr	r3, [pc, #60]	; (80106ac <vPortEnterCritical+0x58>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	3301      	adds	r3, #1
 8010674:	4a0d      	ldr	r2, [pc, #52]	; (80106ac <vPortEnterCritical+0x58>)
 8010676:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010678:	4b0c      	ldr	r3, [pc, #48]	; (80106ac <vPortEnterCritical+0x58>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	2b01      	cmp	r3, #1
 801067e:	d10f      	bne.n	80106a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010680:	4b0b      	ldr	r3, [pc, #44]	; (80106b0 <vPortEnterCritical+0x5c>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	b2db      	uxtb	r3, r3
 8010686:	2b00      	cmp	r3, #0
 8010688:	d00a      	beq.n	80106a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801068a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801068e:	f383 8811 	msr	BASEPRI, r3
 8010692:	f3bf 8f6f 	isb	sy
 8010696:	f3bf 8f4f 	dsb	sy
 801069a:	603b      	str	r3, [r7, #0]
}
 801069c:	bf00      	nop
 801069e:	e7fe      	b.n	801069e <vPortEnterCritical+0x4a>
	}
}
 80106a0:	bf00      	nop
 80106a2:	370c      	adds	r7, #12
 80106a4:	46bd      	mov	sp, r7
 80106a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106aa:	4770      	bx	lr
 80106ac:	2000011c 	.word	0x2000011c
 80106b0:	e000ed04 	.word	0xe000ed04

080106b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80106b4:	b480      	push	{r7}
 80106b6:	b083      	sub	sp, #12
 80106b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80106ba:	4b12      	ldr	r3, [pc, #72]	; (8010704 <vPortExitCritical+0x50>)
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d10a      	bne.n	80106d8 <vPortExitCritical+0x24>
	__asm volatile
 80106c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c6:	f383 8811 	msr	BASEPRI, r3
 80106ca:	f3bf 8f6f 	isb	sy
 80106ce:	f3bf 8f4f 	dsb	sy
 80106d2:	607b      	str	r3, [r7, #4]
}
 80106d4:	bf00      	nop
 80106d6:	e7fe      	b.n	80106d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80106d8:	4b0a      	ldr	r3, [pc, #40]	; (8010704 <vPortExitCritical+0x50>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	3b01      	subs	r3, #1
 80106de:	4a09      	ldr	r2, [pc, #36]	; (8010704 <vPortExitCritical+0x50>)
 80106e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80106e2:	4b08      	ldr	r3, [pc, #32]	; (8010704 <vPortExitCritical+0x50>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d105      	bne.n	80106f6 <vPortExitCritical+0x42>
 80106ea:	2300      	movs	r3, #0
 80106ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	f383 8811 	msr	BASEPRI, r3
}
 80106f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80106f6:	bf00      	nop
 80106f8:	370c      	adds	r7, #12
 80106fa:	46bd      	mov	sp, r7
 80106fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010700:	4770      	bx	lr
 8010702:	bf00      	nop
 8010704:	2000011c 	.word	0x2000011c
	...

08010710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010710:	f3ef 8009 	mrs	r0, PSP
 8010714:	f3bf 8f6f 	isb	sy
 8010718:	4b15      	ldr	r3, [pc, #84]	; (8010770 <pxCurrentTCBConst>)
 801071a:	681a      	ldr	r2, [r3, #0]
 801071c:	f01e 0f10 	tst.w	lr, #16
 8010720:	bf08      	it	eq
 8010722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801072a:	6010      	str	r0, [r2, #0]
 801072c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010730:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010734:	f380 8811 	msr	BASEPRI, r0
 8010738:	f3bf 8f4f 	dsb	sy
 801073c:	f3bf 8f6f 	isb	sy
 8010740:	f7fe fea6 	bl	800f490 <vTaskSwitchContext>
 8010744:	f04f 0000 	mov.w	r0, #0
 8010748:	f380 8811 	msr	BASEPRI, r0
 801074c:	bc09      	pop	{r0, r3}
 801074e:	6819      	ldr	r1, [r3, #0]
 8010750:	6808      	ldr	r0, [r1, #0]
 8010752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010756:	f01e 0f10 	tst.w	lr, #16
 801075a:	bf08      	it	eq
 801075c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010760:	f380 8809 	msr	PSP, r0
 8010764:	f3bf 8f6f 	isb	sy
 8010768:	4770      	bx	lr
 801076a:	bf00      	nop
 801076c:	f3af 8000 	nop.w

08010770 <pxCurrentTCBConst>:
 8010770:	20003574 	.word	0x20003574
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010774:	bf00      	nop
 8010776:	bf00      	nop

08010778 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b082      	sub	sp, #8
 801077c:	af00      	add	r7, sp, #0
	__asm volatile
 801077e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010782:	f383 8811 	msr	BASEPRI, r3
 8010786:	f3bf 8f6f 	isb	sy
 801078a:	f3bf 8f4f 	dsb	sy
 801078e:	607b      	str	r3, [r7, #4]
}
 8010790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010792:	f7fe fdc3 	bl	800f31c <xTaskIncrementTick>
 8010796:	4603      	mov	r3, r0
 8010798:	2b00      	cmp	r3, #0
 801079a:	d003      	beq.n	80107a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801079c:	4b06      	ldr	r3, [pc, #24]	; (80107b8 <xPortSysTickHandler+0x40>)
 801079e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107a2:	601a      	str	r2, [r3, #0]
 80107a4:	2300      	movs	r3, #0
 80107a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	f383 8811 	msr	BASEPRI, r3
}
 80107ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80107b0:	bf00      	nop
 80107b2:	3708      	adds	r7, #8
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd80      	pop	{r7, pc}
 80107b8:	e000ed04 	.word	0xe000ed04

080107bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80107bc:	b480      	push	{r7}
 80107be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80107c0:	4b0b      	ldr	r3, [pc, #44]	; (80107f0 <vPortSetupTimerInterrupt+0x34>)
 80107c2:	2200      	movs	r2, #0
 80107c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80107c6:	4b0b      	ldr	r3, [pc, #44]	; (80107f4 <vPortSetupTimerInterrupt+0x38>)
 80107c8:	2200      	movs	r2, #0
 80107ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80107cc:	4b0a      	ldr	r3, [pc, #40]	; (80107f8 <vPortSetupTimerInterrupt+0x3c>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	4a0a      	ldr	r2, [pc, #40]	; (80107fc <vPortSetupTimerInterrupt+0x40>)
 80107d2:	fba2 2303 	umull	r2, r3, r2, r3
 80107d6:	099b      	lsrs	r3, r3, #6
 80107d8:	4a09      	ldr	r2, [pc, #36]	; (8010800 <vPortSetupTimerInterrupt+0x44>)
 80107da:	3b01      	subs	r3, #1
 80107dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80107de:	4b04      	ldr	r3, [pc, #16]	; (80107f0 <vPortSetupTimerInterrupt+0x34>)
 80107e0:	2207      	movs	r2, #7
 80107e2:	601a      	str	r2, [r3, #0]
}
 80107e4:	bf00      	nop
 80107e6:	46bd      	mov	sp, r7
 80107e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ec:	4770      	bx	lr
 80107ee:	bf00      	nop
 80107f0:	e000e010 	.word	0xe000e010
 80107f4:	e000e018 	.word	0xe000e018
 80107f8:	20000000 	.word	0x20000000
 80107fc:	10624dd3 	.word	0x10624dd3
 8010800:	e000e014 	.word	0xe000e014

08010804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010804:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010814 <vPortEnableVFP+0x10>
 8010808:	6801      	ldr	r1, [r0, #0]
 801080a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801080e:	6001      	str	r1, [r0, #0]
 8010810:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010812:	bf00      	nop
 8010814:	e000ed88 	.word	0xe000ed88

08010818 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010818:	b480      	push	{r7}
 801081a:	b085      	sub	sp, #20
 801081c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801081e:	f3ef 8305 	mrs	r3, IPSR
 8010822:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2b0f      	cmp	r3, #15
 8010828:	d914      	bls.n	8010854 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801082a:	4a17      	ldr	r2, [pc, #92]	; (8010888 <vPortValidateInterruptPriority+0x70>)
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	4413      	add	r3, r2
 8010830:	781b      	ldrb	r3, [r3, #0]
 8010832:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010834:	4b15      	ldr	r3, [pc, #84]	; (801088c <vPortValidateInterruptPriority+0x74>)
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	7afa      	ldrb	r2, [r7, #11]
 801083a:	429a      	cmp	r2, r3
 801083c:	d20a      	bcs.n	8010854 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801083e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010842:	f383 8811 	msr	BASEPRI, r3
 8010846:	f3bf 8f6f 	isb	sy
 801084a:	f3bf 8f4f 	dsb	sy
 801084e:	607b      	str	r3, [r7, #4]
}
 8010850:	bf00      	nop
 8010852:	e7fe      	b.n	8010852 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010854:	4b0e      	ldr	r3, [pc, #56]	; (8010890 <vPortValidateInterruptPriority+0x78>)
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801085c:	4b0d      	ldr	r3, [pc, #52]	; (8010894 <vPortValidateInterruptPriority+0x7c>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	429a      	cmp	r2, r3
 8010862:	d90a      	bls.n	801087a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010868:	f383 8811 	msr	BASEPRI, r3
 801086c:	f3bf 8f6f 	isb	sy
 8010870:	f3bf 8f4f 	dsb	sy
 8010874:	603b      	str	r3, [r7, #0]
}
 8010876:	bf00      	nop
 8010878:	e7fe      	b.n	8010878 <vPortValidateInterruptPriority+0x60>
	}
 801087a:	bf00      	nop
 801087c:	3714      	adds	r7, #20
 801087e:	46bd      	mov	sp, r7
 8010880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010884:	4770      	bx	lr
 8010886:	bf00      	nop
 8010888:	e000e3f0 	.word	0xe000e3f0
 801088c:	20003ba0 	.word	0x20003ba0
 8010890:	e000ed0c 	.word	0xe000ed0c
 8010894:	20003ba4 	.word	0x20003ba4

08010898 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b08a      	sub	sp, #40	; 0x28
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80108a0:	2300      	movs	r3, #0
 80108a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80108a4:	f7fe fc6c 	bl	800f180 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80108a8:	4b5b      	ldr	r3, [pc, #364]	; (8010a18 <pvPortMalloc+0x180>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d101      	bne.n	80108b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80108b0:	f000 f920 	bl	8010af4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80108b4:	4b59      	ldr	r3, [pc, #356]	; (8010a1c <pvPortMalloc+0x184>)
 80108b6:	681a      	ldr	r2, [r3, #0]
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	4013      	ands	r3, r2
 80108bc:	2b00      	cmp	r3, #0
 80108be:	f040 8093 	bne.w	80109e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d01d      	beq.n	8010904 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80108c8:	2208      	movs	r2, #8
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	4413      	add	r3, r2
 80108ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f003 0307 	and.w	r3, r3, #7
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d014      	beq.n	8010904 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f023 0307 	bic.w	r3, r3, #7
 80108e0:	3308      	adds	r3, #8
 80108e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f003 0307 	and.w	r3, r3, #7
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d00a      	beq.n	8010904 <pvPortMalloc+0x6c>
	__asm volatile
 80108ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108f2:	f383 8811 	msr	BASEPRI, r3
 80108f6:	f3bf 8f6f 	isb	sy
 80108fa:	f3bf 8f4f 	dsb	sy
 80108fe:	617b      	str	r3, [r7, #20]
}
 8010900:	bf00      	nop
 8010902:	e7fe      	b.n	8010902 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d06e      	beq.n	80109e8 <pvPortMalloc+0x150>
 801090a:	4b45      	ldr	r3, [pc, #276]	; (8010a20 <pvPortMalloc+0x188>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	687a      	ldr	r2, [r7, #4]
 8010910:	429a      	cmp	r2, r3
 8010912:	d869      	bhi.n	80109e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010914:	4b43      	ldr	r3, [pc, #268]	; (8010a24 <pvPortMalloc+0x18c>)
 8010916:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010918:	4b42      	ldr	r3, [pc, #264]	; (8010a24 <pvPortMalloc+0x18c>)
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801091e:	e004      	b.n	801092a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010922:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092c:	685b      	ldr	r3, [r3, #4]
 801092e:	687a      	ldr	r2, [r7, #4]
 8010930:	429a      	cmp	r2, r3
 8010932:	d903      	bls.n	801093c <pvPortMalloc+0xa4>
 8010934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d1f1      	bne.n	8010920 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801093c:	4b36      	ldr	r3, [pc, #216]	; (8010a18 <pvPortMalloc+0x180>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010942:	429a      	cmp	r2, r3
 8010944:	d050      	beq.n	80109e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010946:	6a3b      	ldr	r3, [r7, #32]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	2208      	movs	r2, #8
 801094c:	4413      	add	r3, r2
 801094e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010952:	681a      	ldr	r2, [r3, #0]
 8010954:	6a3b      	ldr	r3, [r7, #32]
 8010956:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801095a:	685a      	ldr	r2, [r3, #4]
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	1ad2      	subs	r2, r2, r3
 8010960:	2308      	movs	r3, #8
 8010962:	005b      	lsls	r3, r3, #1
 8010964:	429a      	cmp	r2, r3
 8010966:	d91f      	bls.n	80109a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	4413      	add	r3, r2
 801096e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010970:	69bb      	ldr	r3, [r7, #24]
 8010972:	f003 0307 	and.w	r3, r3, #7
 8010976:	2b00      	cmp	r3, #0
 8010978:	d00a      	beq.n	8010990 <pvPortMalloc+0xf8>
	__asm volatile
 801097a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801097e:	f383 8811 	msr	BASEPRI, r3
 8010982:	f3bf 8f6f 	isb	sy
 8010986:	f3bf 8f4f 	dsb	sy
 801098a:	613b      	str	r3, [r7, #16]
}
 801098c:	bf00      	nop
 801098e:	e7fe      	b.n	801098e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010992:	685a      	ldr	r2, [r3, #4]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	1ad2      	subs	r2, r2, r3
 8010998:	69bb      	ldr	r3, [r7, #24]
 801099a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801099e:	687a      	ldr	r2, [r7, #4]
 80109a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80109a2:	69b8      	ldr	r0, [r7, #24]
 80109a4:	f000 f908 	bl	8010bb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80109a8:	4b1d      	ldr	r3, [pc, #116]	; (8010a20 <pvPortMalloc+0x188>)
 80109aa:	681a      	ldr	r2, [r3, #0]
 80109ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ae:	685b      	ldr	r3, [r3, #4]
 80109b0:	1ad3      	subs	r3, r2, r3
 80109b2:	4a1b      	ldr	r2, [pc, #108]	; (8010a20 <pvPortMalloc+0x188>)
 80109b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80109b6:	4b1a      	ldr	r3, [pc, #104]	; (8010a20 <pvPortMalloc+0x188>)
 80109b8:	681a      	ldr	r2, [r3, #0]
 80109ba:	4b1b      	ldr	r3, [pc, #108]	; (8010a28 <pvPortMalloc+0x190>)
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	429a      	cmp	r2, r3
 80109c0:	d203      	bcs.n	80109ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80109c2:	4b17      	ldr	r3, [pc, #92]	; (8010a20 <pvPortMalloc+0x188>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	4a18      	ldr	r2, [pc, #96]	; (8010a28 <pvPortMalloc+0x190>)
 80109c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80109ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109cc:	685a      	ldr	r2, [r3, #4]
 80109ce:	4b13      	ldr	r3, [pc, #76]	; (8010a1c <pvPortMalloc+0x184>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	431a      	orrs	r2, r3
 80109d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80109d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109da:	2200      	movs	r2, #0
 80109dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80109de:	4b13      	ldr	r3, [pc, #76]	; (8010a2c <pvPortMalloc+0x194>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	3301      	adds	r3, #1
 80109e4:	4a11      	ldr	r2, [pc, #68]	; (8010a2c <pvPortMalloc+0x194>)
 80109e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80109e8:	f7fe fbd8 	bl	800f19c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80109ec:	69fb      	ldr	r3, [r7, #28]
 80109ee:	f003 0307 	and.w	r3, r3, #7
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d00a      	beq.n	8010a0c <pvPortMalloc+0x174>
	__asm volatile
 80109f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109fa:	f383 8811 	msr	BASEPRI, r3
 80109fe:	f3bf 8f6f 	isb	sy
 8010a02:	f3bf 8f4f 	dsb	sy
 8010a06:	60fb      	str	r3, [r7, #12]
}
 8010a08:	bf00      	nop
 8010a0a:	e7fe      	b.n	8010a0a <pvPortMalloc+0x172>
	return pvReturn;
 8010a0c:	69fb      	ldr	r3, [r7, #28]
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	3728      	adds	r7, #40	; 0x28
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}
 8010a16:	bf00      	nop
 8010a18:	20003fb0 	.word	0x20003fb0
 8010a1c:	20003fc4 	.word	0x20003fc4
 8010a20:	20003fb4 	.word	0x20003fb4
 8010a24:	20003fa8 	.word	0x20003fa8
 8010a28:	20003fb8 	.word	0x20003fb8
 8010a2c:	20003fbc 	.word	0x20003fbc

08010a30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b086      	sub	sp, #24
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d04d      	beq.n	8010ade <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010a42:	2308      	movs	r3, #8
 8010a44:	425b      	negs	r3, r3
 8010a46:	697a      	ldr	r2, [r7, #20]
 8010a48:	4413      	add	r3, r2
 8010a4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010a4c:	697b      	ldr	r3, [r7, #20]
 8010a4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010a50:	693b      	ldr	r3, [r7, #16]
 8010a52:	685a      	ldr	r2, [r3, #4]
 8010a54:	4b24      	ldr	r3, [pc, #144]	; (8010ae8 <vPortFree+0xb8>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	4013      	ands	r3, r2
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d10a      	bne.n	8010a74 <vPortFree+0x44>
	__asm volatile
 8010a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a62:	f383 8811 	msr	BASEPRI, r3
 8010a66:	f3bf 8f6f 	isb	sy
 8010a6a:	f3bf 8f4f 	dsb	sy
 8010a6e:	60fb      	str	r3, [r7, #12]
}
 8010a70:	bf00      	nop
 8010a72:	e7fe      	b.n	8010a72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d00a      	beq.n	8010a92 <vPortFree+0x62>
	__asm volatile
 8010a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a80:	f383 8811 	msr	BASEPRI, r3
 8010a84:	f3bf 8f6f 	isb	sy
 8010a88:	f3bf 8f4f 	dsb	sy
 8010a8c:	60bb      	str	r3, [r7, #8]
}
 8010a8e:	bf00      	nop
 8010a90:	e7fe      	b.n	8010a90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010a92:	693b      	ldr	r3, [r7, #16]
 8010a94:	685a      	ldr	r2, [r3, #4]
 8010a96:	4b14      	ldr	r3, [pc, #80]	; (8010ae8 <vPortFree+0xb8>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	4013      	ands	r3, r2
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d01e      	beq.n	8010ade <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010aa0:	693b      	ldr	r3, [r7, #16]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d11a      	bne.n	8010ade <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010aa8:	693b      	ldr	r3, [r7, #16]
 8010aaa:	685a      	ldr	r2, [r3, #4]
 8010aac:	4b0e      	ldr	r3, [pc, #56]	; (8010ae8 <vPortFree+0xb8>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	43db      	mvns	r3, r3
 8010ab2:	401a      	ands	r2, r3
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010ab8:	f7fe fb62 	bl	800f180 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010abc:	693b      	ldr	r3, [r7, #16]
 8010abe:	685a      	ldr	r2, [r3, #4]
 8010ac0:	4b0a      	ldr	r3, [pc, #40]	; (8010aec <vPortFree+0xbc>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	4413      	add	r3, r2
 8010ac6:	4a09      	ldr	r2, [pc, #36]	; (8010aec <vPortFree+0xbc>)
 8010ac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010aca:	6938      	ldr	r0, [r7, #16]
 8010acc:	f000 f874 	bl	8010bb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010ad0:	4b07      	ldr	r3, [pc, #28]	; (8010af0 <vPortFree+0xc0>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	3301      	adds	r3, #1
 8010ad6:	4a06      	ldr	r2, [pc, #24]	; (8010af0 <vPortFree+0xc0>)
 8010ad8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010ada:	f7fe fb5f 	bl	800f19c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010ade:	bf00      	nop
 8010ae0:	3718      	adds	r7, #24
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}
 8010ae6:	bf00      	nop
 8010ae8:	20003fc4 	.word	0x20003fc4
 8010aec:	20003fb4 	.word	0x20003fb4
 8010af0:	20003fc0 	.word	0x20003fc0

08010af4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010af4:	b480      	push	{r7}
 8010af6:	b085      	sub	sp, #20
 8010af8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010afe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010b00:	4b27      	ldr	r3, [pc, #156]	; (8010ba0 <prvHeapInit+0xac>)
 8010b02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f003 0307 	and.w	r3, r3, #7
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d00c      	beq.n	8010b28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	3307      	adds	r3, #7
 8010b12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	f023 0307 	bic.w	r3, r3, #7
 8010b1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010b1c:	68ba      	ldr	r2, [r7, #8]
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	1ad3      	subs	r3, r2, r3
 8010b22:	4a1f      	ldr	r2, [pc, #124]	; (8010ba0 <prvHeapInit+0xac>)
 8010b24:	4413      	add	r3, r2
 8010b26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010b2c:	4a1d      	ldr	r2, [pc, #116]	; (8010ba4 <prvHeapInit+0xb0>)
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010b32:	4b1c      	ldr	r3, [pc, #112]	; (8010ba4 <prvHeapInit+0xb0>)
 8010b34:	2200      	movs	r2, #0
 8010b36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	68ba      	ldr	r2, [r7, #8]
 8010b3c:	4413      	add	r3, r2
 8010b3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010b40:	2208      	movs	r2, #8
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	1a9b      	subs	r3, r3, r2
 8010b46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	f023 0307 	bic.w	r3, r3, #7
 8010b4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	4a15      	ldr	r2, [pc, #84]	; (8010ba8 <prvHeapInit+0xb4>)
 8010b54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010b56:	4b14      	ldr	r3, [pc, #80]	; (8010ba8 <prvHeapInit+0xb4>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010b5e:	4b12      	ldr	r3, [pc, #72]	; (8010ba8 <prvHeapInit+0xb4>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	2200      	movs	r2, #0
 8010b64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	68fa      	ldr	r2, [r7, #12]
 8010b6e:	1ad2      	subs	r2, r2, r3
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010b74:	4b0c      	ldr	r3, [pc, #48]	; (8010ba8 <prvHeapInit+0xb4>)
 8010b76:	681a      	ldr	r2, [r3, #0]
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	685b      	ldr	r3, [r3, #4]
 8010b80:	4a0a      	ldr	r2, [pc, #40]	; (8010bac <prvHeapInit+0xb8>)
 8010b82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	685b      	ldr	r3, [r3, #4]
 8010b88:	4a09      	ldr	r2, [pc, #36]	; (8010bb0 <prvHeapInit+0xbc>)
 8010b8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010b8c:	4b09      	ldr	r3, [pc, #36]	; (8010bb4 <prvHeapInit+0xc0>)
 8010b8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010b92:	601a      	str	r2, [r3, #0]
}
 8010b94:	bf00      	nop
 8010b96:	3714      	adds	r7, #20
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9e:	4770      	bx	lr
 8010ba0:	20003ba8 	.word	0x20003ba8
 8010ba4:	20003fa8 	.word	0x20003fa8
 8010ba8:	20003fb0 	.word	0x20003fb0
 8010bac:	20003fb8 	.word	0x20003fb8
 8010bb0:	20003fb4 	.word	0x20003fb4
 8010bb4:	20003fc4 	.word	0x20003fc4

08010bb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010bb8:	b480      	push	{r7}
 8010bba:	b085      	sub	sp, #20
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010bc0:	4b28      	ldr	r3, [pc, #160]	; (8010c64 <prvInsertBlockIntoFreeList+0xac>)
 8010bc2:	60fb      	str	r3, [r7, #12]
 8010bc4:	e002      	b.n	8010bcc <prvInsertBlockIntoFreeList+0x14>
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	60fb      	str	r3, [r7, #12]
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	687a      	ldr	r2, [r7, #4]
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d8f7      	bhi.n	8010bc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	685b      	ldr	r3, [r3, #4]
 8010bde:	68ba      	ldr	r2, [r7, #8]
 8010be0:	4413      	add	r3, r2
 8010be2:	687a      	ldr	r2, [r7, #4]
 8010be4:	429a      	cmp	r2, r3
 8010be6:	d108      	bne.n	8010bfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	685a      	ldr	r2, [r3, #4]
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	685b      	ldr	r3, [r3, #4]
 8010bf0:	441a      	add	r2, r3
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	685b      	ldr	r3, [r3, #4]
 8010c02:	68ba      	ldr	r2, [r7, #8]
 8010c04:	441a      	add	r2, r3
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d118      	bne.n	8010c40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	681a      	ldr	r2, [r3, #0]
 8010c12:	4b15      	ldr	r3, [pc, #84]	; (8010c68 <prvInsertBlockIntoFreeList+0xb0>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d00d      	beq.n	8010c36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	685a      	ldr	r2, [r3, #4]
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	685b      	ldr	r3, [r3, #4]
 8010c24:	441a      	add	r2, r3
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	681a      	ldr	r2, [r3, #0]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	601a      	str	r2, [r3, #0]
 8010c34:	e008      	b.n	8010c48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010c36:	4b0c      	ldr	r3, [pc, #48]	; (8010c68 <prvInsertBlockIntoFreeList+0xb0>)
 8010c38:	681a      	ldr	r2, [r3, #0]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	601a      	str	r2, [r3, #0]
 8010c3e:	e003      	b.n	8010c48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	681a      	ldr	r2, [r3, #0]
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010c48:	68fa      	ldr	r2, [r7, #12]
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	d002      	beq.n	8010c56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	687a      	ldr	r2, [r7, #4]
 8010c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010c56:	bf00      	nop
 8010c58:	3714      	adds	r7, #20
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c60:	4770      	bx	lr
 8010c62:	bf00      	nop
 8010c64:	20003fa8 	.word	0x20003fa8
 8010c68:	20003fb0 	.word	0x20003fb0

08010c6c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8010c70:	2200      	movs	r2, #0
 8010c72:	4912      	ldr	r1, [pc, #72]	; (8010cbc <MX_USB_Device_Init+0x50>)
 8010c74:	4812      	ldr	r0, [pc, #72]	; (8010cc0 <MX_USB_Device_Init+0x54>)
 8010c76:	f7fb f9d3 	bl	800c020 <USBD_Init>
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d001      	beq.n	8010c84 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8010c80:	f7f2 f88a 	bl	8002d98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8010c84:	490f      	ldr	r1, [pc, #60]	; (8010cc4 <MX_USB_Device_Init+0x58>)
 8010c86:	480e      	ldr	r0, [pc, #56]	; (8010cc0 <MX_USB_Device_Init+0x54>)
 8010c88:	f7fb f9fa 	bl	800c080 <USBD_RegisterClass>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d001      	beq.n	8010c96 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8010c92:	f7f2 f881 	bl	8002d98 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8010c96:	490c      	ldr	r1, [pc, #48]	; (8010cc8 <MX_USB_Device_Init+0x5c>)
 8010c98:	4809      	ldr	r0, [pc, #36]	; (8010cc0 <MX_USB_Device_Init+0x54>)
 8010c9a:	f7fb f91b 	bl	800bed4 <USBD_CDC_RegisterInterface>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d001      	beq.n	8010ca8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8010ca4:	f7f2 f878 	bl	8002d98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8010ca8:	4805      	ldr	r0, [pc, #20]	; (8010cc0 <MX_USB_Device_Init+0x54>)
 8010caa:	f7fb fa10 	bl	800c0ce <USBD_Start>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d001      	beq.n	8010cb8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8010cb4:	f7f2 f870 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8010cb8:	bf00      	nop
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	20000134 	.word	0x20000134
 8010cc0:	20003fc8 	.word	0x20003fc8
 8010cc4:	20000018 	.word	0x20000018
 8010cc8:	20000120 	.word	0x20000120

08010ccc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	4905      	ldr	r1, [pc, #20]	; (8010ce8 <CDC_Init_FS+0x1c>)
 8010cd4:	4805      	ldr	r0, [pc, #20]	; (8010cec <CDC_Init_FS+0x20>)
 8010cd6:	f7fb f912 	bl	800befe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010cda:	4905      	ldr	r1, [pc, #20]	; (8010cf0 <CDC_Init_FS+0x24>)
 8010cdc:	4803      	ldr	r0, [pc, #12]	; (8010cec <CDC_Init_FS+0x20>)
 8010cde:	f7fb f92c 	bl	800bf3a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010ce2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	bd80      	pop	{r7, pc}
 8010ce8:	20004a98 	.word	0x20004a98
 8010cec:	20003fc8 	.word	0x20003fc8
 8010cf0:	20004298 	.word	0x20004298

08010cf4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010cf4:	b480      	push	{r7}
 8010cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010cf8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d02:	4770      	bx	lr

08010d04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010d04:	b480      	push	{r7}
 8010d06:	b083      	sub	sp, #12
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	6039      	str	r1, [r7, #0]
 8010d0e:	71fb      	strb	r3, [r7, #7]
 8010d10:	4613      	mov	r3, r2
 8010d12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010d14:	79fb      	ldrb	r3, [r7, #7]
 8010d16:	2b23      	cmp	r3, #35	; 0x23
 8010d18:	d84a      	bhi.n	8010db0 <CDC_Control_FS+0xac>
 8010d1a:	a201      	add	r2, pc, #4	; (adr r2, 8010d20 <CDC_Control_FS+0x1c>)
 8010d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d20:	08010db1 	.word	0x08010db1
 8010d24:	08010db1 	.word	0x08010db1
 8010d28:	08010db1 	.word	0x08010db1
 8010d2c:	08010db1 	.word	0x08010db1
 8010d30:	08010db1 	.word	0x08010db1
 8010d34:	08010db1 	.word	0x08010db1
 8010d38:	08010db1 	.word	0x08010db1
 8010d3c:	08010db1 	.word	0x08010db1
 8010d40:	08010db1 	.word	0x08010db1
 8010d44:	08010db1 	.word	0x08010db1
 8010d48:	08010db1 	.word	0x08010db1
 8010d4c:	08010db1 	.word	0x08010db1
 8010d50:	08010db1 	.word	0x08010db1
 8010d54:	08010db1 	.word	0x08010db1
 8010d58:	08010db1 	.word	0x08010db1
 8010d5c:	08010db1 	.word	0x08010db1
 8010d60:	08010db1 	.word	0x08010db1
 8010d64:	08010db1 	.word	0x08010db1
 8010d68:	08010db1 	.word	0x08010db1
 8010d6c:	08010db1 	.word	0x08010db1
 8010d70:	08010db1 	.word	0x08010db1
 8010d74:	08010db1 	.word	0x08010db1
 8010d78:	08010db1 	.word	0x08010db1
 8010d7c:	08010db1 	.word	0x08010db1
 8010d80:	08010db1 	.word	0x08010db1
 8010d84:	08010db1 	.word	0x08010db1
 8010d88:	08010db1 	.word	0x08010db1
 8010d8c:	08010db1 	.word	0x08010db1
 8010d90:	08010db1 	.word	0x08010db1
 8010d94:	08010db1 	.word	0x08010db1
 8010d98:	08010db1 	.word	0x08010db1
 8010d9c:	08010db1 	.word	0x08010db1
 8010da0:	08010db1 	.word	0x08010db1
 8010da4:	08010db1 	.word	0x08010db1
 8010da8:	08010db1 	.word	0x08010db1
 8010dac:	08010db1 	.word	0x08010db1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010db0:	bf00      	nop
  }

  return (USBD_OK);
 8010db2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010db4:	4618      	mov	r0, r3
 8010db6:	370c      	adds	r7, #12
 8010db8:	46bd      	mov	sp, r7
 8010dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbe:	4770      	bx	lr

08010dc0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b082      	sub	sp, #8
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
 8010dc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010dca:	6879      	ldr	r1, [r7, #4]
 8010dcc:	4805      	ldr	r0, [pc, #20]	; (8010de4 <CDC_Receive_FS+0x24>)
 8010dce:	f7fb f8b4 	bl	800bf3a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010dd2:	4804      	ldr	r0, [pc, #16]	; (8010de4 <CDC_Receive_FS+0x24>)
 8010dd4:	f7fb f8fa 	bl	800bfcc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010dd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3708      	adds	r7, #8
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}
 8010de2:	bf00      	nop
 8010de4:	20003fc8 	.word	0x20003fc8

08010de8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b084      	sub	sp, #16
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
 8010df0:	460b      	mov	r3, r1
 8010df2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010df4:	2300      	movs	r3, #0
 8010df6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010df8:	4b0d      	ldr	r3, [pc, #52]	; (8010e30 <CDC_Transmit_FS+0x48>)
 8010dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010dfe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d001      	beq.n	8010e0e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010e0a:	2301      	movs	r3, #1
 8010e0c:	e00b      	b.n	8010e26 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010e0e:	887b      	ldrh	r3, [r7, #2]
 8010e10:	461a      	mov	r2, r3
 8010e12:	6879      	ldr	r1, [r7, #4]
 8010e14:	4806      	ldr	r0, [pc, #24]	; (8010e30 <CDC_Transmit_FS+0x48>)
 8010e16:	f7fb f872 	bl	800befe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010e1a:	4805      	ldr	r0, [pc, #20]	; (8010e30 <CDC_Transmit_FS+0x48>)
 8010e1c:	f7fb f8a6 	bl	800bf6c <USBD_CDC_TransmitPacket>
 8010e20:	4603      	mov	r3, r0
 8010e22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e26:	4618      	mov	r0, r3
 8010e28:	3710      	adds	r7, #16
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	bd80      	pop	{r7, pc}
 8010e2e:	bf00      	nop
 8010e30:	20003fc8 	.word	0x20003fc8

08010e34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b087      	sub	sp, #28
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	60f8      	str	r0, [r7, #12]
 8010e3c:	60b9      	str	r1, [r7, #8]
 8010e3e:	4613      	mov	r3, r2
 8010e40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010e42:	2300      	movs	r3, #0
 8010e44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010e46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	371c      	adds	r7, #28
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e54:	4770      	bx	lr
	...

08010e58 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e58:	b480      	push	{r7}
 8010e5a:	b083      	sub	sp, #12
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	4603      	mov	r3, r0
 8010e60:	6039      	str	r1, [r7, #0]
 8010e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8010e64:	683b      	ldr	r3, [r7, #0]
 8010e66:	2212      	movs	r2, #18
 8010e68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8010e6a:	4b03      	ldr	r3, [pc, #12]	; (8010e78 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	370c      	adds	r7, #12
 8010e70:	46bd      	mov	sp, r7
 8010e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e76:	4770      	bx	lr
 8010e78:	20000154 	.word	0x20000154

08010e7c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e7c:	b480      	push	{r7}
 8010e7e:	b083      	sub	sp, #12
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	4603      	mov	r3, r0
 8010e84:	6039      	str	r1, [r7, #0]
 8010e86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	2204      	movs	r2, #4
 8010e8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010e8e:	4b03      	ldr	r3, [pc, #12]	; (8010e9c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8010e90:	4618      	mov	r0, r3
 8010e92:	370c      	adds	r7, #12
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr
 8010e9c:	20000168 	.word	0x20000168

08010ea0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b082      	sub	sp, #8
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	6039      	str	r1, [r7, #0]
 8010eaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010eac:	79fb      	ldrb	r3, [r7, #7]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d105      	bne.n	8010ebe <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010eb2:	683a      	ldr	r2, [r7, #0]
 8010eb4:	4907      	ldr	r1, [pc, #28]	; (8010ed4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8010eb6:	4808      	ldr	r0, [pc, #32]	; (8010ed8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010eb8:	f7fc f8f1 	bl	800d09e <USBD_GetString>
 8010ebc:	e004      	b.n	8010ec8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010ebe:	683a      	ldr	r2, [r7, #0]
 8010ec0:	4904      	ldr	r1, [pc, #16]	; (8010ed4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8010ec2:	4805      	ldr	r0, [pc, #20]	; (8010ed8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010ec4:	f7fc f8eb 	bl	800d09e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010ec8:	4b02      	ldr	r3, [pc, #8]	; (8010ed4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8010eca:	4618      	mov	r0, r3
 8010ecc:	3708      	adds	r7, #8
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}
 8010ed2:	bf00      	nop
 8010ed4:	20005298 	.word	0x20005298
 8010ed8:	08015010 	.word	0x08015010

08010edc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b082      	sub	sp, #8
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	6039      	str	r1, [r7, #0]
 8010ee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010ee8:	683a      	ldr	r2, [r7, #0]
 8010eea:	4904      	ldr	r1, [pc, #16]	; (8010efc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8010eec:	4804      	ldr	r0, [pc, #16]	; (8010f00 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8010eee:	f7fc f8d6 	bl	800d09e <USBD_GetString>
  return USBD_StrDesc;
 8010ef2:	4b02      	ldr	r3, [pc, #8]	; (8010efc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	3708      	adds	r7, #8
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}
 8010efc:	20005298 	.word	0x20005298
 8010f00:	0801502c 	.word	0x0801502c

08010f04 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b082      	sub	sp, #8
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	6039      	str	r1, [r7, #0]
 8010f0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	221a      	movs	r2, #26
 8010f14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010f16:	f000 f843 	bl	8010fa0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8010f1a:	4b02      	ldr	r3, [pc, #8]	; (8010f24 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3708      	adds	r7, #8
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}
 8010f24:	2000016c 	.word	0x2000016c

08010f28 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b082      	sub	sp, #8
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	4603      	mov	r3, r0
 8010f30:	6039      	str	r1, [r7, #0]
 8010f32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010f34:	79fb      	ldrb	r3, [r7, #7]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d105      	bne.n	8010f46 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010f3a:	683a      	ldr	r2, [r7, #0]
 8010f3c:	4907      	ldr	r1, [pc, #28]	; (8010f5c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8010f3e:	4808      	ldr	r0, [pc, #32]	; (8010f60 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010f40:	f7fc f8ad 	bl	800d09e <USBD_GetString>
 8010f44:	e004      	b.n	8010f50 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010f46:	683a      	ldr	r2, [r7, #0]
 8010f48:	4904      	ldr	r1, [pc, #16]	; (8010f5c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8010f4a:	4805      	ldr	r0, [pc, #20]	; (8010f60 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010f4c:	f7fc f8a7 	bl	800d09e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010f50:	4b02      	ldr	r3, [pc, #8]	; (8010f5c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8010f52:	4618      	mov	r0, r3
 8010f54:	3708      	adds	r7, #8
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}
 8010f5a:	bf00      	nop
 8010f5c:	20005298 	.word	0x20005298
 8010f60:	08015040 	.word	0x08015040

08010f64 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b082      	sub	sp, #8
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	6039      	str	r1, [r7, #0]
 8010f6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010f70:	79fb      	ldrb	r3, [r7, #7]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d105      	bne.n	8010f82 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010f76:	683a      	ldr	r2, [r7, #0]
 8010f78:	4907      	ldr	r1, [pc, #28]	; (8010f98 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010f7a:	4808      	ldr	r0, [pc, #32]	; (8010f9c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010f7c:	f7fc f88f 	bl	800d09e <USBD_GetString>
 8010f80:	e004      	b.n	8010f8c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010f82:	683a      	ldr	r2, [r7, #0]
 8010f84:	4904      	ldr	r1, [pc, #16]	; (8010f98 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010f86:	4805      	ldr	r0, [pc, #20]	; (8010f9c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010f88:	f7fc f889 	bl	800d09e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010f8c:	4b02      	ldr	r3, [pc, #8]	; (8010f98 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8010f8e:	4618      	mov	r0, r3
 8010f90:	3708      	adds	r7, #8
 8010f92:	46bd      	mov	sp, r7
 8010f94:	bd80      	pop	{r7, pc}
 8010f96:	bf00      	nop
 8010f98:	20005298 	.word	0x20005298
 8010f9c:	0801504c 	.word	0x0801504c

08010fa0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b084      	sub	sp, #16
 8010fa4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010fa6:	4b0f      	ldr	r3, [pc, #60]	; (8010fe4 <Get_SerialNum+0x44>)
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010fac:	4b0e      	ldr	r3, [pc, #56]	; (8010fe8 <Get_SerialNum+0x48>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010fb2:	4b0e      	ldr	r3, [pc, #56]	; (8010fec <Get_SerialNum+0x4c>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010fb8:	68fa      	ldr	r2, [r7, #12]
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	4413      	add	r3, r2
 8010fbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d009      	beq.n	8010fda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010fc6:	2208      	movs	r2, #8
 8010fc8:	4909      	ldr	r1, [pc, #36]	; (8010ff0 <Get_SerialNum+0x50>)
 8010fca:	68f8      	ldr	r0, [r7, #12]
 8010fcc:	f000 f814 	bl	8010ff8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010fd0:	2204      	movs	r2, #4
 8010fd2:	4908      	ldr	r1, [pc, #32]	; (8010ff4 <Get_SerialNum+0x54>)
 8010fd4:	68b8      	ldr	r0, [r7, #8]
 8010fd6:	f000 f80f 	bl	8010ff8 <IntToUnicode>
  }
}
 8010fda:	bf00      	nop
 8010fdc:	3710      	adds	r7, #16
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
 8010fe2:	bf00      	nop
 8010fe4:	1fff7590 	.word	0x1fff7590
 8010fe8:	1fff7594 	.word	0x1fff7594
 8010fec:	1fff7598 	.word	0x1fff7598
 8010ff0:	2000016e 	.word	0x2000016e
 8010ff4:	2000017e 	.word	0x2000017e

08010ff8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010ff8:	b480      	push	{r7}
 8010ffa:	b087      	sub	sp, #28
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	60f8      	str	r0, [r7, #12]
 8011000:	60b9      	str	r1, [r7, #8]
 8011002:	4613      	mov	r3, r2
 8011004:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011006:	2300      	movs	r3, #0
 8011008:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801100a:	2300      	movs	r3, #0
 801100c:	75fb      	strb	r3, [r7, #23]
 801100e:	e027      	b.n	8011060 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	0f1b      	lsrs	r3, r3, #28
 8011014:	2b09      	cmp	r3, #9
 8011016:	d80b      	bhi.n	8011030 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	0f1b      	lsrs	r3, r3, #28
 801101c:	b2da      	uxtb	r2, r3
 801101e:	7dfb      	ldrb	r3, [r7, #23]
 8011020:	005b      	lsls	r3, r3, #1
 8011022:	4619      	mov	r1, r3
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	440b      	add	r3, r1
 8011028:	3230      	adds	r2, #48	; 0x30
 801102a:	b2d2      	uxtb	r2, r2
 801102c:	701a      	strb	r2, [r3, #0]
 801102e:	e00a      	b.n	8011046 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	0f1b      	lsrs	r3, r3, #28
 8011034:	b2da      	uxtb	r2, r3
 8011036:	7dfb      	ldrb	r3, [r7, #23]
 8011038:	005b      	lsls	r3, r3, #1
 801103a:	4619      	mov	r1, r3
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	440b      	add	r3, r1
 8011040:	3237      	adds	r2, #55	; 0x37
 8011042:	b2d2      	uxtb	r2, r2
 8011044:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	011b      	lsls	r3, r3, #4
 801104a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801104c:	7dfb      	ldrb	r3, [r7, #23]
 801104e:	005b      	lsls	r3, r3, #1
 8011050:	3301      	adds	r3, #1
 8011052:	68ba      	ldr	r2, [r7, #8]
 8011054:	4413      	add	r3, r2
 8011056:	2200      	movs	r2, #0
 8011058:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801105a:	7dfb      	ldrb	r3, [r7, #23]
 801105c:	3301      	adds	r3, #1
 801105e:	75fb      	strb	r3, [r7, #23]
 8011060:	7dfa      	ldrb	r2, [r7, #23]
 8011062:	79fb      	ldrb	r3, [r7, #7]
 8011064:	429a      	cmp	r2, r3
 8011066:	d3d3      	bcc.n	8011010 <IntToUnicode+0x18>
  }
}
 8011068:	bf00      	nop
 801106a:	bf00      	nop
 801106c:	371c      	adds	r7, #28
 801106e:	46bd      	mov	sp, r7
 8011070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011074:	4770      	bx	lr
	...

08011078 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b098      	sub	sp, #96	; 0x60
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011080:	f107 030c 	add.w	r3, r7, #12
 8011084:	2254      	movs	r2, #84	; 0x54
 8011086:	2100      	movs	r1, #0
 8011088:	4618      	mov	r0, r3
 801108a:	f001 f898 	bl	80121be <memset>
  if(pcdHandle->Instance==USB)
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	4a15      	ldr	r2, [pc, #84]	; (80110e8 <HAL_PCD_MspInit+0x70>)
 8011094:	4293      	cmp	r3, r2
 8011096:	d122      	bne.n	80110de <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011098:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801109c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801109e:	2300      	movs	r3, #0
 80110a0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80110a2:	f107 030c 	add.w	r3, r7, #12
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7f5 ff6c 	bl	8006f84 <HAL_RCCEx_PeriphCLKConfig>
 80110ac:	4603      	mov	r3, r0
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d001      	beq.n	80110b6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80110b2:	f7f1 fe71 	bl	8002d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80110b6:	4b0d      	ldr	r3, [pc, #52]	; (80110ec <HAL_PCD_MspInit+0x74>)
 80110b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80110ba:	4a0c      	ldr	r2, [pc, #48]	; (80110ec <HAL_PCD_MspInit+0x74>)
 80110bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80110c0:	6593      	str	r3, [r2, #88]	; 0x58
 80110c2:	4b0a      	ldr	r3, [pc, #40]	; (80110ec <HAL_PCD_MspInit+0x74>)
 80110c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80110c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80110ca:	60bb      	str	r3, [r7, #8]
 80110cc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 80110ce:	2200      	movs	r2, #0
 80110d0:	2105      	movs	r1, #5
 80110d2:	2014      	movs	r0, #20
 80110d4:	f7f2 fa4e 	bl	8003574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80110d8:	2014      	movs	r0, #20
 80110da:	f7f2 fa65 	bl	80035a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80110de:	bf00      	nop
 80110e0:	3760      	adds	r7, #96	; 0x60
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}
 80110e6:	bf00      	nop
 80110e8:	40005c00 	.word	0x40005c00
 80110ec:	40021000 	.word	0x40021000

080110f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b082      	sub	sp, #8
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8011104:	4619      	mov	r1, r3
 8011106:	4610      	mov	r0, r2
 8011108:	f7fb f82c 	bl	800c164 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 801110c:	bf00      	nop
 801110e:	3708      	adds	r7, #8
 8011110:	46bd      	mov	sp, r7
 8011112:	bd80      	pop	{r7, pc}

08011114 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b082      	sub	sp, #8
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
 801111c:	460b      	mov	r3, r1
 801111e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8011126:	78fa      	ldrb	r2, [r7, #3]
 8011128:	6879      	ldr	r1, [r7, #4]
 801112a:	4613      	mov	r3, r2
 801112c:	009b      	lsls	r3, r3, #2
 801112e:	4413      	add	r3, r2
 8011130:	00db      	lsls	r3, r3, #3
 8011132:	440b      	add	r3, r1
 8011134:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011138:	681a      	ldr	r2, [r3, #0]
 801113a:	78fb      	ldrb	r3, [r7, #3]
 801113c:	4619      	mov	r1, r3
 801113e:	f7fb f866 	bl	800c20e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8011142:	bf00      	nop
 8011144:	3708      	adds	r7, #8
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}

0801114a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801114a:	b580      	push	{r7, lr}
 801114c:	b082      	sub	sp, #8
 801114e:	af00      	add	r7, sp, #0
 8011150:	6078      	str	r0, [r7, #4]
 8011152:	460b      	mov	r3, r1
 8011154:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 801115c:	78fa      	ldrb	r2, [r7, #3]
 801115e:	6879      	ldr	r1, [r7, #4]
 8011160:	4613      	mov	r3, r2
 8011162:	009b      	lsls	r3, r3, #2
 8011164:	4413      	add	r3, r2
 8011166:	00db      	lsls	r3, r3, #3
 8011168:	440b      	add	r3, r1
 801116a:	3324      	adds	r3, #36	; 0x24
 801116c:	681a      	ldr	r2, [r3, #0]
 801116e:	78fb      	ldrb	r3, [r7, #3]
 8011170:	4619      	mov	r1, r3
 8011172:	f7fb f8af 	bl	800c2d4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8011176:	bf00      	nop
 8011178:	3708      	adds	r7, #8
 801117a:	46bd      	mov	sp, r7
 801117c:	bd80      	pop	{r7, pc}

0801117e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801117e:	b580      	push	{r7, lr}
 8011180:	b082      	sub	sp, #8
 8011182:	af00      	add	r7, sp, #0
 8011184:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801118c:	4618      	mov	r0, r3
 801118e:	f7fb f9c3 	bl	800c518 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8011192:	bf00      	nop
 8011194:	3708      	adds	r7, #8
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}

0801119a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801119a:	b580      	push	{r7, lr}
 801119c:	b084      	sub	sp, #16
 801119e:	af00      	add	r7, sp, #0
 80111a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80111a2:	2301      	movs	r3, #1
 80111a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	795b      	ldrb	r3, [r3, #5]
 80111aa:	2b02      	cmp	r3, #2
 80111ac:	d001      	beq.n	80111b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80111ae:	f7f1 fdf3 	bl	8002d98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80111b8:	7bfa      	ldrb	r2, [r7, #15]
 80111ba:	4611      	mov	r1, r2
 80111bc:	4618      	mov	r0, r3
 80111be:	f7fb f96d 	bl	800c49c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80111c8:	4618      	mov	r0, r3
 80111ca:	f7fb f919 	bl	800c400 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80111ce:	bf00      	nop
 80111d0:	3710      	adds	r7, #16
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
	...

080111d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b082      	sub	sp, #8
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7fb f968 	bl	800c4bc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	7a5b      	ldrb	r3, [r3, #9]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d005      	beq.n	8011200 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80111f4:	4b04      	ldr	r3, [pc, #16]	; (8011208 <HAL_PCD_SuspendCallback+0x30>)
 80111f6:	691b      	ldr	r3, [r3, #16]
 80111f8:	4a03      	ldr	r2, [pc, #12]	; (8011208 <HAL_PCD_SuspendCallback+0x30>)
 80111fa:	f043 0306 	orr.w	r3, r3, #6
 80111fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8011200:	bf00      	nop
 8011202:	3708      	adds	r7, #8
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}
 8011208:	e000ed00 	.word	0xe000ed00

0801120c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b082      	sub	sp, #8
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	7a5b      	ldrb	r3, [r3, #9]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d007      	beq.n	801122c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801121c:	4b08      	ldr	r3, [pc, #32]	; (8011240 <HAL_PCD_ResumeCallback+0x34>)
 801121e:	691b      	ldr	r3, [r3, #16]
 8011220:	4a07      	ldr	r2, [pc, #28]	; (8011240 <HAL_PCD_ResumeCallback+0x34>)
 8011222:	f023 0306 	bic.w	r3, r3, #6
 8011226:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011228:	f000 f9f8 	bl	801161c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011232:	4618      	mov	r0, r3
 8011234:	f7fb f958 	bl	800c4e8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8011238:	bf00      	nop
 801123a:	3708      	adds	r7, #8
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}
 8011240:	e000ed00 	.word	0xe000ed00

08011244 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 801124c:	4a2b      	ldr	r2, [pc, #172]	; (80112fc <USBD_LL_Init+0xb8>)
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	4a29      	ldr	r2, [pc, #164]	; (80112fc <USBD_LL_Init+0xb8>)
 8011258:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 801125c:	4b27      	ldr	r3, [pc, #156]	; (80112fc <USBD_LL_Init+0xb8>)
 801125e:	4a28      	ldr	r2, [pc, #160]	; (8011300 <USBD_LL_Init+0xbc>)
 8011260:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011262:	4b26      	ldr	r3, [pc, #152]	; (80112fc <USBD_LL_Init+0xb8>)
 8011264:	2208      	movs	r2, #8
 8011266:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011268:	4b24      	ldr	r3, [pc, #144]	; (80112fc <USBD_LL_Init+0xb8>)
 801126a:	2202      	movs	r2, #2
 801126c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801126e:	4b23      	ldr	r3, [pc, #140]	; (80112fc <USBD_LL_Init+0xb8>)
 8011270:	2202      	movs	r2, #2
 8011272:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8011274:	4b21      	ldr	r3, [pc, #132]	; (80112fc <USBD_LL_Init+0xb8>)
 8011276:	2200      	movs	r2, #0
 8011278:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801127a:	4b20      	ldr	r3, [pc, #128]	; (80112fc <USBD_LL_Init+0xb8>)
 801127c:	2200      	movs	r2, #0
 801127e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011280:	4b1e      	ldr	r3, [pc, #120]	; (80112fc <USBD_LL_Init+0xb8>)
 8011282:	2200      	movs	r2, #0
 8011284:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011286:	4b1d      	ldr	r3, [pc, #116]	; (80112fc <USBD_LL_Init+0xb8>)
 8011288:	2200      	movs	r2, #0
 801128a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801128c:	481b      	ldr	r0, [pc, #108]	; (80112fc <USBD_LL_Init+0xb8>)
 801128e:	f7f3 fb34 	bl	80048fa <HAL_PCD_Init>
 8011292:	4603      	mov	r3, r0
 8011294:	2b00      	cmp	r3, #0
 8011296:	d001      	beq.n	801129c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8011298:	f7f1 fd7e 	bl	8002d98 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80112a2:	2318      	movs	r3, #24
 80112a4:	2200      	movs	r2, #0
 80112a6:	2100      	movs	r1, #0
 80112a8:	f7f4 ffee 	bl	8006288 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80112b2:	2358      	movs	r3, #88	; 0x58
 80112b4:	2200      	movs	r2, #0
 80112b6:	2180      	movs	r1, #128	; 0x80
 80112b8:	f7f4 ffe6 	bl	8006288 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80112c2:	23c0      	movs	r3, #192	; 0xc0
 80112c4:	2200      	movs	r2, #0
 80112c6:	2181      	movs	r1, #129	; 0x81
 80112c8:	f7f4 ffde 	bl	8006288 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80112d2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80112d6:	2200      	movs	r2, #0
 80112d8:	2101      	movs	r1, #1
 80112da:	f7f4 ffd5 	bl	8006288 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80112e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112e8:	2200      	movs	r2, #0
 80112ea:	2182      	movs	r1, #130	; 0x82
 80112ec:	f7f4 ffcc 	bl	8006288 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80112f0:	2300      	movs	r3, #0
}
 80112f2:	4618      	mov	r0, r3
 80112f4:	3708      	adds	r7, #8
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}
 80112fa:	bf00      	nop
 80112fc:	20005498 	.word	0x20005498
 8011300:	40005c00 	.word	0x40005c00

08011304 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b084      	sub	sp, #16
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801130c:	2300      	movs	r3, #0
 801130e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011310:	2300      	movs	r3, #0
 8011312:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801131a:	4618      	mov	r0, r3
 801131c:	f7f3 fbbb 	bl	8004a96 <HAL_PCD_Start>
 8011320:	4603      	mov	r3, r0
 8011322:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011324:	7bfb      	ldrb	r3, [r7, #15]
 8011326:	4618      	mov	r0, r3
 8011328:	f000 f97e 	bl	8011628 <USBD_Get_USB_Status>
 801132c:	4603      	mov	r3, r0
 801132e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011330:	7bbb      	ldrb	r3, [r7, #14]
}
 8011332:	4618      	mov	r0, r3
 8011334:	3710      	adds	r7, #16
 8011336:	46bd      	mov	sp, r7
 8011338:	bd80      	pop	{r7, pc}

0801133a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801133a:	b580      	push	{r7, lr}
 801133c:	b084      	sub	sp, #16
 801133e:	af00      	add	r7, sp, #0
 8011340:	6078      	str	r0, [r7, #4]
 8011342:	4608      	mov	r0, r1
 8011344:	4611      	mov	r1, r2
 8011346:	461a      	mov	r2, r3
 8011348:	4603      	mov	r3, r0
 801134a:	70fb      	strb	r3, [r7, #3]
 801134c:	460b      	mov	r3, r1
 801134e:	70bb      	strb	r3, [r7, #2]
 8011350:	4613      	mov	r3, r2
 8011352:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011354:	2300      	movs	r3, #0
 8011356:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011358:	2300      	movs	r3, #0
 801135a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011362:	78bb      	ldrb	r3, [r7, #2]
 8011364:	883a      	ldrh	r2, [r7, #0]
 8011366:	78f9      	ldrb	r1, [r7, #3]
 8011368:	f7f3 fd02 	bl	8004d70 <HAL_PCD_EP_Open>
 801136c:	4603      	mov	r3, r0
 801136e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011370:	7bfb      	ldrb	r3, [r7, #15]
 8011372:	4618      	mov	r0, r3
 8011374:	f000 f958 	bl	8011628 <USBD_Get_USB_Status>
 8011378:	4603      	mov	r3, r0
 801137a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801137c:	7bbb      	ldrb	r3, [r7, #14]
}
 801137e:	4618      	mov	r0, r3
 8011380:	3710      	adds	r7, #16
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}

08011386 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011386:	b580      	push	{r7, lr}
 8011388:	b084      	sub	sp, #16
 801138a:	af00      	add	r7, sp, #0
 801138c:	6078      	str	r0, [r7, #4]
 801138e:	460b      	mov	r3, r1
 8011390:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011392:	2300      	movs	r3, #0
 8011394:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011396:	2300      	movs	r3, #0
 8011398:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80113a0:	78fa      	ldrb	r2, [r7, #3]
 80113a2:	4611      	mov	r1, r2
 80113a4:	4618      	mov	r0, r3
 80113a6:	f7f3 fd40 	bl	8004e2a <HAL_PCD_EP_Close>
 80113aa:	4603      	mov	r3, r0
 80113ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113ae:	7bfb      	ldrb	r3, [r7, #15]
 80113b0:	4618      	mov	r0, r3
 80113b2:	f000 f939 	bl	8011628 <USBD_Get_USB_Status>
 80113b6:	4603      	mov	r3, r0
 80113b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80113bc:	4618      	mov	r0, r3
 80113be:	3710      	adds	r7, #16
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}

080113c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b084      	sub	sp, #16
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
 80113cc:	460b      	mov	r3, r1
 80113ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113d0:	2300      	movs	r3, #0
 80113d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113d4:	2300      	movs	r3, #0
 80113d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80113de:	78fa      	ldrb	r2, [r7, #3]
 80113e0:	4611      	mov	r1, r2
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7f3 fde9 	bl	8004fba <HAL_PCD_EP_SetStall>
 80113e8:	4603      	mov	r3, r0
 80113ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113ec:	7bfb      	ldrb	r3, [r7, #15]
 80113ee:	4618      	mov	r0, r3
 80113f0:	f000 f91a 	bl	8011628 <USBD_Get_USB_Status>
 80113f4:	4603      	mov	r3, r0
 80113f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	3710      	adds	r7, #16
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}

08011402 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011402:	b580      	push	{r7, lr}
 8011404:	b084      	sub	sp, #16
 8011406:	af00      	add	r7, sp, #0
 8011408:	6078      	str	r0, [r7, #4]
 801140a:	460b      	mov	r3, r1
 801140c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801140e:	2300      	movs	r3, #0
 8011410:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011412:	2300      	movs	r3, #0
 8011414:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801141c:	78fa      	ldrb	r2, [r7, #3]
 801141e:	4611      	mov	r1, r2
 8011420:	4618      	mov	r0, r3
 8011422:	f7f3 fe1c 	bl	800505e <HAL_PCD_EP_ClrStall>
 8011426:	4603      	mov	r3, r0
 8011428:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801142a:	7bfb      	ldrb	r3, [r7, #15]
 801142c:	4618      	mov	r0, r3
 801142e:	f000 f8fb 	bl	8011628 <USBD_Get_USB_Status>
 8011432:	4603      	mov	r3, r0
 8011434:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011436:	7bbb      	ldrb	r3, [r7, #14]
}
 8011438:	4618      	mov	r0, r3
 801143a:	3710      	adds	r7, #16
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}

08011440 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011440:	b480      	push	{r7}
 8011442:	b085      	sub	sp, #20
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	460b      	mov	r3, r1
 801144a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011452:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011454:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011458:	2b00      	cmp	r3, #0
 801145a:	da0b      	bge.n	8011474 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801145c:	78fb      	ldrb	r3, [r7, #3]
 801145e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011462:	68f9      	ldr	r1, [r7, #12]
 8011464:	4613      	mov	r3, r2
 8011466:	009b      	lsls	r3, r3, #2
 8011468:	4413      	add	r3, r2
 801146a:	00db      	lsls	r3, r3, #3
 801146c:	440b      	add	r3, r1
 801146e:	3312      	adds	r3, #18
 8011470:	781b      	ldrb	r3, [r3, #0]
 8011472:	e00b      	b.n	801148c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011474:	78fb      	ldrb	r3, [r7, #3]
 8011476:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801147a:	68f9      	ldr	r1, [r7, #12]
 801147c:	4613      	mov	r3, r2
 801147e:	009b      	lsls	r3, r3, #2
 8011480:	4413      	add	r3, r2
 8011482:	00db      	lsls	r3, r3, #3
 8011484:	440b      	add	r3, r1
 8011486:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 801148a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801148c:	4618      	mov	r0, r3
 801148e:	3714      	adds	r7, #20
 8011490:	46bd      	mov	sp, r7
 8011492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011496:	4770      	bx	lr

08011498 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b084      	sub	sp, #16
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
 80114a0:	460b      	mov	r3, r1
 80114a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114a4:	2300      	movs	r3, #0
 80114a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114a8:	2300      	movs	r3, #0
 80114aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80114b2:	78fa      	ldrb	r2, [r7, #3]
 80114b4:	4611      	mov	r1, r2
 80114b6:	4618      	mov	r0, r3
 80114b8:	f7f3 fc36 	bl	8004d28 <HAL_PCD_SetAddress>
 80114bc:	4603      	mov	r3, r0
 80114be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114c0:	7bfb      	ldrb	r3, [r7, #15]
 80114c2:	4618      	mov	r0, r3
 80114c4:	f000 f8b0 	bl	8011628 <USBD_Get_USB_Status>
 80114c8:	4603      	mov	r3, r0
 80114ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3710      	adds	r7, #16
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}

080114d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80114d6:	b580      	push	{r7, lr}
 80114d8:	b086      	sub	sp, #24
 80114da:	af00      	add	r7, sp, #0
 80114dc:	60f8      	str	r0, [r7, #12]
 80114de:	607a      	str	r2, [r7, #4]
 80114e0:	603b      	str	r3, [r7, #0]
 80114e2:	460b      	mov	r3, r1
 80114e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114e6:	2300      	movs	r3, #0
 80114e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114ea:	2300      	movs	r3, #0
 80114ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80114f4:	7af9      	ldrb	r1, [r7, #11]
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	687a      	ldr	r2, [r7, #4]
 80114fa:	f7f3 fd27 	bl	8004f4c <HAL_PCD_EP_Transmit>
 80114fe:	4603      	mov	r3, r0
 8011500:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011502:	7dfb      	ldrb	r3, [r7, #23]
 8011504:	4618      	mov	r0, r3
 8011506:	f000 f88f 	bl	8011628 <USBD_Get_USB_Status>
 801150a:	4603      	mov	r3, r0
 801150c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801150e:	7dbb      	ldrb	r3, [r7, #22]
}
 8011510:	4618      	mov	r0, r3
 8011512:	3718      	adds	r7, #24
 8011514:	46bd      	mov	sp, r7
 8011516:	bd80      	pop	{r7, pc}

08011518 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b086      	sub	sp, #24
 801151c:	af00      	add	r7, sp, #0
 801151e:	60f8      	str	r0, [r7, #12]
 8011520:	607a      	str	r2, [r7, #4]
 8011522:	603b      	str	r3, [r7, #0]
 8011524:	460b      	mov	r3, r1
 8011526:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011528:	2300      	movs	r3, #0
 801152a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801152c:	2300      	movs	r3, #0
 801152e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011536:	7af9      	ldrb	r1, [r7, #11]
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	687a      	ldr	r2, [r7, #4]
 801153c:	f7f3 fcbd 	bl	8004eba <HAL_PCD_EP_Receive>
 8011540:	4603      	mov	r3, r0
 8011542:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011544:	7dfb      	ldrb	r3, [r7, #23]
 8011546:	4618      	mov	r0, r3
 8011548:	f000 f86e 	bl	8011628 <USBD_Get_USB_Status>
 801154c:	4603      	mov	r3, r0
 801154e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011550:	7dbb      	ldrb	r3, [r7, #22]
}
 8011552:	4618      	mov	r0, r3
 8011554:	3718      	adds	r7, #24
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}

0801155a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801155a:	b580      	push	{r7, lr}
 801155c:	b082      	sub	sp, #8
 801155e:	af00      	add	r7, sp, #0
 8011560:	6078      	str	r0, [r7, #4]
 8011562:	460b      	mov	r3, r1
 8011564:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801156c:	78fa      	ldrb	r2, [r7, #3]
 801156e:	4611      	mov	r1, r2
 8011570:	4618      	mov	r0, r3
 8011572:	f7f3 fcd3 	bl	8004f1c <HAL_PCD_EP_GetRxCount>
 8011576:	4603      	mov	r3, r0
}
 8011578:	4618      	mov	r0, r3
 801157a:	3708      	adds	r7, #8
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}

08011580 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b082      	sub	sp, #8
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
 8011588:	460b      	mov	r3, r1
 801158a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801158c:	78fb      	ldrb	r3, [r7, #3]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d002      	beq.n	8011598 <HAL_PCDEx_LPM_Callback+0x18>
 8011592:	2b01      	cmp	r3, #1
 8011594:	d013      	beq.n	80115be <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011596:	e023      	b.n	80115e0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	7a5b      	ldrb	r3, [r3, #9]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d007      	beq.n	80115b0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80115a0:	f000 f83c 	bl	801161c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80115a4:	4b10      	ldr	r3, [pc, #64]	; (80115e8 <HAL_PCDEx_LPM_Callback+0x68>)
 80115a6:	691b      	ldr	r3, [r3, #16]
 80115a8:	4a0f      	ldr	r2, [pc, #60]	; (80115e8 <HAL_PCDEx_LPM_Callback+0x68>)
 80115aa:	f023 0306 	bic.w	r3, r3, #6
 80115ae:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7fa ff96 	bl	800c4e8 <USBD_LL_Resume>
    break;
 80115bc:	e010      	b.n	80115e0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80115c4:	4618      	mov	r0, r3
 80115c6:	f7fa ff79 	bl	800c4bc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	7a5b      	ldrb	r3, [r3, #9]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d005      	beq.n	80115de <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80115d2:	4b05      	ldr	r3, [pc, #20]	; (80115e8 <HAL_PCDEx_LPM_Callback+0x68>)
 80115d4:	691b      	ldr	r3, [r3, #16]
 80115d6:	4a04      	ldr	r2, [pc, #16]	; (80115e8 <HAL_PCDEx_LPM_Callback+0x68>)
 80115d8:	f043 0306 	orr.w	r3, r3, #6
 80115dc:	6113      	str	r3, [r2, #16]
    break;
 80115de:	bf00      	nop
}
 80115e0:	bf00      	nop
 80115e2:	3708      	adds	r7, #8
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd80      	pop	{r7, pc}
 80115e8:	e000ed00 	.word	0xe000ed00

080115ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80115ec:	b480      	push	{r7}
 80115ee:	b083      	sub	sp, #12
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80115f4:	4b03      	ldr	r3, [pc, #12]	; (8011604 <USBD_static_malloc+0x18>)
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	370c      	adds	r7, #12
 80115fa:	46bd      	mov	sp, r7
 80115fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011600:	4770      	bx	lr
 8011602:	bf00      	nop
 8011604:	20005774 	.word	0x20005774

08011608 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011608:	b480      	push	{r7}
 801160a:	b083      	sub	sp, #12
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]

}
 8011610:	bf00      	nop
 8011612:	370c      	adds	r7, #12
 8011614:	46bd      	mov	sp, r7
 8011616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161a:	4770      	bx	lr

0801161c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011620:	f7f1 fb5d 	bl	8002cde <SystemClock_Config>
}
 8011624:	bf00      	nop
 8011626:	bd80      	pop	{r7, pc}

08011628 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011628:	b480      	push	{r7}
 801162a:	b085      	sub	sp, #20
 801162c:	af00      	add	r7, sp, #0
 801162e:	4603      	mov	r3, r0
 8011630:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011632:	2300      	movs	r3, #0
 8011634:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011636:	79fb      	ldrb	r3, [r7, #7]
 8011638:	2b03      	cmp	r3, #3
 801163a:	d817      	bhi.n	801166c <USBD_Get_USB_Status+0x44>
 801163c:	a201      	add	r2, pc, #4	; (adr r2, 8011644 <USBD_Get_USB_Status+0x1c>)
 801163e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011642:	bf00      	nop
 8011644:	08011655 	.word	0x08011655
 8011648:	0801165b 	.word	0x0801165b
 801164c:	08011661 	.word	0x08011661
 8011650:	08011667 	.word	0x08011667
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011654:	2300      	movs	r3, #0
 8011656:	73fb      	strb	r3, [r7, #15]
    break;
 8011658:	e00b      	b.n	8011672 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801165a:	2303      	movs	r3, #3
 801165c:	73fb      	strb	r3, [r7, #15]
    break;
 801165e:	e008      	b.n	8011672 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011660:	2301      	movs	r3, #1
 8011662:	73fb      	strb	r3, [r7, #15]
    break;
 8011664:	e005      	b.n	8011672 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011666:	2303      	movs	r3, #3
 8011668:	73fb      	strb	r3, [r7, #15]
    break;
 801166a:	e002      	b.n	8011672 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801166c:	2303      	movs	r3, #3
 801166e:	73fb      	strb	r3, [r7, #15]
    break;
 8011670:	bf00      	nop
  }
  return usb_status;
 8011672:	7bfb      	ldrb	r3, [r7, #15]
}
 8011674:	4618      	mov	r0, r3
 8011676:	3714      	adds	r7, #20
 8011678:	46bd      	mov	sp, r7
 801167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167e:	4770      	bx	lr

08011680 <__cvt>:
 8011680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011684:	ec55 4b10 	vmov	r4, r5, d0
 8011688:	2d00      	cmp	r5, #0
 801168a:	460e      	mov	r6, r1
 801168c:	4619      	mov	r1, r3
 801168e:	462b      	mov	r3, r5
 8011690:	bfbb      	ittet	lt
 8011692:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011696:	461d      	movlt	r5, r3
 8011698:	2300      	movge	r3, #0
 801169a:	232d      	movlt	r3, #45	; 0x2d
 801169c:	700b      	strb	r3, [r1, #0]
 801169e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80116a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80116a4:	4691      	mov	r9, r2
 80116a6:	f023 0820 	bic.w	r8, r3, #32
 80116aa:	bfbc      	itt	lt
 80116ac:	4622      	movlt	r2, r4
 80116ae:	4614      	movlt	r4, r2
 80116b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80116b4:	d005      	beq.n	80116c2 <__cvt+0x42>
 80116b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80116ba:	d100      	bne.n	80116be <__cvt+0x3e>
 80116bc:	3601      	adds	r6, #1
 80116be:	2102      	movs	r1, #2
 80116c0:	e000      	b.n	80116c4 <__cvt+0x44>
 80116c2:	2103      	movs	r1, #3
 80116c4:	ab03      	add	r3, sp, #12
 80116c6:	9301      	str	r3, [sp, #4]
 80116c8:	ab02      	add	r3, sp, #8
 80116ca:	9300      	str	r3, [sp, #0]
 80116cc:	ec45 4b10 	vmov	d0, r4, r5
 80116d0:	4653      	mov	r3, sl
 80116d2:	4632      	mov	r2, r6
 80116d4:	f000 fee0 	bl	8012498 <_dtoa_r>
 80116d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80116dc:	4607      	mov	r7, r0
 80116de:	d102      	bne.n	80116e6 <__cvt+0x66>
 80116e0:	f019 0f01 	tst.w	r9, #1
 80116e4:	d022      	beq.n	801172c <__cvt+0xac>
 80116e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80116ea:	eb07 0906 	add.w	r9, r7, r6
 80116ee:	d110      	bne.n	8011712 <__cvt+0x92>
 80116f0:	783b      	ldrb	r3, [r7, #0]
 80116f2:	2b30      	cmp	r3, #48	; 0x30
 80116f4:	d10a      	bne.n	801170c <__cvt+0x8c>
 80116f6:	2200      	movs	r2, #0
 80116f8:	2300      	movs	r3, #0
 80116fa:	4620      	mov	r0, r4
 80116fc:	4629      	mov	r1, r5
 80116fe:	f7ef fa0b 	bl	8000b18 <__aeabi_dcmpeq>
 8011702:	b918      	cbnz	r0, 801170c <__cvt+0x8c>
 8011704:	f1c6 0601 	rsb	r6, r6, #1
 8011708:	f8ca 6000 	str.w	r6, [sl]
 801170c:	f8da 3000 	ldr.w	r3, [sl]
 8011710:	4499      	add	r9, r3
 8011712:	2200      	movs	r2, #0
 8011714:	2300      	movs	r3, #0
 8011716:	4620      	mov	r0, r4
 8011718:	4629      	mov	r1, r5
 801171a:	f7ef f9fd 	bl	8000b18 <__aeabi_dcmpeq>
 801171e:	b108      	cbz	r0, 8011724 <__cvt+0xa4>
 8011720:	f8cd 900c 	str.w	r9, [sp, #12]
 8011724:	2230      	movs	r2, #48	; 0x30
 8011726:	9b03      	ldr	r3, [sp, #12]
 8011728:	454b      	cmp	r3, r9
 801172a:	d307      	bcc.n	801173c <__cvt+0xbc>
 801172c:	9b03      	ldr	r3, [sp, #12]
 801172e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011730:	1bdb      	subs	r3, r3, r7
 8011732:	4638      	mov	r0, r7
 8011734:	6013      	str	r3, [r2, #0]
 8011736:	b004      	add	sp, #16
 8011738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801173c:	1c59      	adds	r1, r3, #1
 801173e:	9103      	str	r1, [sp, #12]
 8011740:	701a      	strb	r2, [r3, #0]
 8011742:	e7f0      	b.n	8011726 <__cvt+0xa6>

08011744 <__exponent>:
 8011744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011746:	4603      	mov	r3, r0
 8011748:	2900      	cmp	r1, #0
 801174a:	bfb8      	it	lt
 801174c:	4249      	neglt	r1, r1
 801174e:	f803 2b02 	strb.w	r2, [r3], #2
 8011752:	bfb4      	ite	lt
 8011754:	222d      	movlt	r2, #45	; 0x2d
 8011756:	222b      	movge	r2, #43	; 0x2b
 8011758:	2909      	cmp	r1, #9
 801175a:	7042      	strb	r2, [r0, #1]
 801175c:	dd2a      	ble.n	80117b4 <__exponent+0x70>
 801175e:	f10d 0207 	add.w	r2, sp, #7
 8011762:	4617      	mov	r7, r2
 8011764:	260a      	movs	r6, #10
 8011766:	4694      	mov	ip, r2
 8011768:	fb91 f5f6 	sdiv	r5, r1, r6
 801176c:	fb06 1415 	mls	r4, r6, r5, r1
 8011770:	3430      	adds	r4, #48	; 0x30
 8011772:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8011776:	460c      	mov	r4, r1
 8011778:	2c63      	cmp	r4, #99	; 0x63
 801177a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801177e:	4629      	mov	r1, r5
 8011780:	dcf1      	bgt.n	8011766 <__exponent+0x22>
 8011782:	3130      	adds	r1, #48	; 0x30
 8011784:	f1ac 0402 	sub.w	r4, ip, #2
 8011788:	f802 1c01 	strb.w	r1, [r2, #-1]
 801178c:	1c41      	adds	r1, r0, #1
 801178e:	4622      	mov	r2, r4
 8011790:	42ba      	cmp	r2, r7
 8011792:	d30a      	bcc.n	80117aa <__exponent+0x66>
 8011794:	f10d 0209 	add.w	r2, sp, #9
 8011798:	eba2 020c 	sub.w	r2, r2, ip
 801179c:	42bc      	cmp	r4, r7
 801179e:	bf88      	it	hi
 80117a0:	2200      	movhi	r2, #0
 80117a2:	4413      	add	r3, r2
 80117a4:	1a18      	subs	r0, r3, r0
 80117a6:	b003      	add	sp, #12
 80117a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117aa:	f812 5b01 	ldrb.w	r5, [r2], #1
 80117ae:	f801 5f01 	strb.w	r5, [r1, #1]!
 80117b2:	e7ed      	b.n	8011790 <__exponent+0x4c>
 80117b4:	2330      	movs	r3, #48	; 0x30
 80117b6:	3130      	adds	r1, #48	; 0x30
 80117b8:	7083      	strb	r3, [r0, #2]
 80117ba:	70c1      	strb	r1, [r0, #3]
 80117bc:	1d03      	adds	r3, r0, #4
 80117be:	e7f1      	b.n	80117a4 <__exponent+0x60>

080117c0 <_printf_float>:
 80117c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117c4:	ed2d 8b02 	vpush	{d8}
 80117c8:	b08d      	sub	sp, #52	; 0x34
 80117ca:	460c      	mov	r4, r1
 80117cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80117d0:	4616      	mov	r6, r2
 80117d2:	461f      	mov	r7, r3
 80117d4:	4605      	mov	r5, r0
 80117d6:	f000 fcfb 	bl	80121d0 <_localeconv_r>
 80117da:	f8d0 a000 	ldr.w	sl, [r0]
 80117de:	4650      	mov	r0, sl
 80117e0:	f7ee fd6e 	bl	80002c0 <strlen>
 80117e4:	2300      	movs	r3, #0
 80117e6:	930a      	str	r3, [sp, #40]	; 0x28
 80117e8:	6823      	ldr	r3, [r4, #0]
 80117ea:	9305      	str	r3, [sp, #20]
 80117ec:	f8d8 3000 	ldr.w	r3, [r8]
 80117f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80117f4:	3307      	adds	r3, #7
 80117f6:	f023 0307 	bic.w	r3, r3, #7
 80117fa:	f103 0208 	add.w	r2, r3, #8
 80117fe:	f8c8 2000 	str.w	r2, [r8]
 8011802:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011806:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801180a:	9307      	str	r3, [sp, #28]
 801180c:	f8cd 8018 	str.w	r8, [sp, #24]
 8011810:	ee08 0a10 	vmov	s16, r0
 8011814:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8011818:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801181c:	4b9e      	ldr	r3, [pc, #632]	; (8011a98 <_printf_float+0x2d8>)
 801181e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011822:	f7ef f9ab 	bl	8000b7c <__aeabi_dcmpun>
 8011826:	bb88      	cbnz	r0, 801188c <_printf_float+0xcc>
 8011828:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801182c:	4b9a      	ldr	r3, [pc, #616]	; (8011a98 <_printf_float+0x2d8>)
 801182e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011832:	f7ef f985 	bl	8000b40 <__aeabi_dcmple>
 8011836:	bb48      	cbnz	r0, 801188c <_printf_float+0xcc>
 8011838:	2200      	movs	r2, #0
 801183a:	2300      	movs	r3, #0
 801183c:	4640      	mov	r0, r8
 801183e:	4649      	mov	r1, r9
 8011840:	f7ef f974 	bl	8000b2c <__aeabi_dcmplt>
 8011844:	b110      	cbz	r0, 801184c <_printf_float+0x8c>
 8011846:	232d      	movs	r3, #45	; 0x2d
 8011848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801184c:	4a93      	ldr	r2, [pc, #588]	; (8011a9c <_printf_float+0x2dc>)
 801184e:	4b94      	ldr	r3, [pc, #592]	; (8011aa0 <_printf_float+0x2e0>)
 8011850:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011854:	bf94      	ite	ls
 8011856:	4690      	movls	r8, r2
 8011858:	4698      	movhi	r8, r3
 801185a:	2303      	movs	r3, #3
 801185c:	6123      	str	r3, [r4, #16]
 801185e:	9b05      	ldr	r3, [sp, #20]
 8011860:	f023 0304 	bic.w	r3, r3, #4
 8011864:	6023      	str	r3, [r4, #0]
 8011866:	f04f 0900 	mov.w	r9, #0
 801186a:	9700      	str	r7, [sp, #0]
 801186c:	4633      	mov	r3, r6
 801186e:	aa0b      	add	r2, sp, #44	; 0x2c
 8011870:	4621      	mov	r1, r4
 8011872:	4628      	mov	r0, r5
 8011874:	f000 f9da 	bl	8011c2c <_printf_common>
 8011878:	3001      	adds	r0, #1
 801187a:	f040 8090 	bne.w	801199e <_printf_float+0x1de>
 801187e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011882:	b00d      	add	sp, #52	; 0x34
 8011884:	ecbd 8b02 	vpop	{d8}
 8011888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801188c:	4642      	mov	r2, r8
 801188e:	464b      	mov	r3, r9
 8011890:	4640      	mov	r0, r8
 8011892:	4649      	mov	r1, r9
 8011894:	f7ef f972 	bl	8000b7c <__aeabi_dcmpun>
 8011898:	b140      	cbz	r0, 80118ac <_printf_float+0xec>
 801189a:	464b      	mov	r3, r9
 801189c:	2b00      	cmp	r3, #0
 801189e:	bfbc      	itt	lt
 80118a0:	232d      	movlt	r3, #45	; 0x2d
 80118a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80118a6:	4a7f      	ldr	r2, [pc, #508]	; (8011aa4 <_printf_float+0x2e4>)
 80118a8:	4b7f      	ldr	r3, [pc, #508]	; (8011aa8 <_printf_float+0x2e8>)
 80118aa:	e7d1      	b.n	8011850 <_printf_float+0x90>
 80118ac:	6863      	ldr	r3, [r4, #4]
 80118ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80118b2:	9206      	str	r2, [sp, #24]
 80118b4:	1c5a      	adds	r2, r3, #1
 80118b6:	d13f      	bne.n	8011938 <_printf_float+0x178>
 80118b8:	2306      	movs	r3, #6
 80118ba:	6063      	str	r3, [r4, #4]
 80118bc:	9b05      	ldr	r3, [sp, #20]
 80118be:	6861      	ldr	r1, [r4, #4]
 80118c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80118c4:	2300      	movs	r3, #0
 80118c6:	9303      	str	r3, [sp, #12]
 80118c8:	ab0a      	add	r3, sp, #40	; 0x28
 80118ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80118ce:	ab09      	add	r3, sp, #36	; 0x24
 80118d0:	ec49 8b10 	vmov	d0, r8, r9
 80118d4:	9300      	str	r3, [sp, #0]
 80118d6:	6022      	str	r2, [r4, #0]
 80118d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80118dc:	4628      	mov	r0, r5
 80118de:	f7ff fecf 	bl	8011680 <__cvt>
 80118e2:	9b06      	ldr	r3, [sp, #24]
 80118e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118e6:	2b47      	cmp	r3, #71	; 0x47
 80118e8:	4680      	mov	r8, r0
 80118ea:	d108      	bne.n	80118fe <_printf_float+0x13e>
 80118ec:	1cc8      	adds	r0, r1, #3
 80118ee:	db02      	blt.n	80118f6 <_printf_float+0x136>
 80118f0:	6863      	ldr	r3, [r4, #4]
 80118f2:	4299      	cmp	r1, r3
 80118f4:	dd41      	ble.n	801197a <_printf_float+0x1ba>
 80118f6:	f1ab 0302 	sub.w	r3, fp, #2
 80118fa:	fa5f fb83 	uxtb.w	fp, r3
 80118fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011902:	d820      	bhi.n	8011946 <_printf_float+0x186>
 8011904:	3901      	subs	r1, #1
 8011906:	465a      	mov	r2, fp
 8011908:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801190c:	9109      	str	r1, [sp, #36]	; 0x24
 801190e:	f7ff ff19 	bl	8011744 <__exponent>
 8011912:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011914:	1813      	adds	r3, r2, r0
 8011916:	2a01      	cmp	r2, #1
 8011918:	4681      	mov	r9, r0
 801191a:	6123      	str	r3, [r4, #16]
 801191c:	dc02      	bgt.n	8011924 <_printf_float+0x164>
 801191e:	6822      	ldr	r2, [r4, #0]
 8011920:	07d2      	lsls	r2, r2, #31
 8011922:	d501      	bpl.n	8011928 <_printf_float+0x168>
 8011924:	3301      	adds	r3, #1
 8011926:	6123      	str	r3, [r4, #16]
 8011928:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801192c:	2b00      	cmp	r3, #0
 801192e:	d09c      	beq.n	801186a <_printf_float+0xaa>
 8011930:	232d      	movs	r3, #45	; 0x2d
 8011932:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011936:	e798      	b.n	801186a <_printf_float+0xaa>
 8011938:	9a06      	ldr	r2, [sp, #24]
 801193a:	2a47      	cmp	r2, #71	; 0x47
 801193c:	d1be      	bne.n	80118bc <_printf_float+0xfc>
 801193e:	2b00      	cmp	r3, #0
 8011940:	d1bc      	bne.n	80118bc <_printf_float+0xfc>
 8011942:	2301      	movs	r3, #1
 8011944:	e7b9      	b.n	80118ba <_printf_float+0xfa>
 8011946:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801194a:	d118      	bne.n	801197e <_printf_float+0x1be>
 801194c:	2900      	cmp	r1, #0
 801194e:	6863      	ldr	r3, [r4, #4]
 8011950:	dd0b      	ble.n	801196a <_printf_float+0x1aa>
 8011952:	6121      	str	r1, [r4, #16]
 8011954:	b913      	cbnz	r3, 801195c <_printf_float+0x19c>
 8011956:	6822      	ldr	r2, [r4, #0]
 8011958:	07d0      	lsls	r0, r2, #31
 801195a:	d502      	bpl.n	8011962 <_printf_float+0x1a2>
 801195c:	3301      	adds	r3, #1
 801195e:	440b      	add	r3, r1
 8011960:	6123      	str	r3, [r4, #16]
 8011962:	65a1      	str	r1, [r4, #88]	; 0x58
 8011964:	f04f 0900 	mov.w	r9, #0
 8011968:	e7de      	b.n	8011928 <_printf_float+0x168>
 801196a:	b913      	cbnz	r3, 8011972 <_printf_float+0x1b2>
 801196c:	6822      	ldr	r2, [r4, #0]
 801196e:	07d2      	lsls	r2, r2, #31
 8011970:	d501      	bpl.n	8011976 <_printf_float+0x1b6>
 8011972:	3302      	adds	r3, #2
 8011974:	e7f4      	b.n	8011960 <_printf_float+0x1a0>
 8011976:	2301      	movs	r3, #1
 8011978:	e7f2      	b.n	8011960 <_printf_float+0x1a0>
 801197a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801197e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011980:	4299      	cmp	r1, r3
 8011982:	db05      	blt.n	8011990 <_printf_float+0x1d0>
 8011984:	6823      	ldr	r3, [r4, #0]
 8011986:	6121      	str	r1, [r4, #16]
 8011988:	07d8      	lsls	r0, r3, #31
 801198a:	d5ea      	bpl.n	8011962 <_printf_float+0x1a2>
 801198c:	1c4b      	adds	r3, r1, #1
 801198e:	e7e7      	b.n	8011960 <_printf_float+0x1a0>
 8011990:	2900      	cmp	r1, #0
 8011992:	bfd4      	ite	le
 8011994:	f1c1 0202 	rsble	r2, r1, #2
 8011998:	2201      	movgt	r2, #1
 801199a:	4413      	add	r3, r2
 801199c:	e7e0      	b.n	8011960 <_printf_float+0x1a0>
 801199e:	6823      	ldr	r3, [r4, #0]
 80119a0:	055a      	lsls	r2, r3, #21
 80119a2:	d407      	bmi.n	80119b4 <_printf_float+0x1f4>
 80119a4:	6923      	ldr	r3, [r4, #16]
 80119a6:	4642      	mov	r2, r8
 80119a8:	4631      	mov	r1, r6
 80119aa:	4628      	mov	r0, r5
 80119ac:	47b8      	blx	r7
 80119ae:	3001      	adds	r0, #1
 80119b0:	d12c      	bne.n	8011a0c <_printf_float+0x24c>
 80119b2:	e764      	b.n	801187e <_printf_float+0xbe>
 80119b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80119b8:	f240 80e0 	bls.w	8011b7c <_printf_float+0x3bc>
 80119bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80119c0:	2200      	movs	r2, #0
 80119c2:	2300      	movs	r3, #0
 80119c4:	f7ef f8a8 	bl	8000b18 <__aeabi_dcmpeq>
 80119c8:	2800      	cmp	r0, #0
 80119ca:	d034      	beq.n	8011a36 <_printf_float+0x276>
 80119cc:	4a37      	ldr	r2, [pc, #220]	; (8011aac <_printf_float+0x2ec>)
 80119ce:	2301      	movs	r3, #1
 80119d0:	4631      	mov	r1, r6
 80119d2:	4628      	mov	r0, r5
 80119d4:	47b8      	blx	r7
 80119d6:	3001      	adds	r0, #1
 80119d8:	f43f af51 	beq.w	801187e <_printf_float+0xbe>
 80119dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80119e0:	429a      	cmp	r2, r3
 80119e2:	db02      	blt.n	80119ea <_printf_float+0x22a>
 80119e4:	6823      	ldr	r3, [r4, #0]
 80119e6:	07d8      	lsls	r0, r3, #31
 80119e8:	d510      	bpl.n	8011a0c <_printf_float+0x24c>
 80119ea:	ee18 3a10 	vmov	r3, s16
 80119ee:	4652      	mov	r2, sl
 80119f0:	4631      	mov	r1, r6
 80119f2:	4628      	mov	r0, r5
 80119f4:	47b8      	blx	r7
 80119f6:	3001      	adds	r0, #1
 80119f8:	f43f af41 	beq.w	801187e <_printf_float+0xbe>
 80119fc:	f04f 0800 	mov.w	r8, #0
 8011a00:	f104 091a 	add.w	r9, r4, #26
 8011a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a06:	3b01      	subs	r3, #1
 8011a08:	4543      	cmp	r3, r8
 8011a0a:	dc09      	bgt.n	8011a20 <_printf_float+0x260>
 8011a0c:	6823      	ldr	r3, [r4, #0]
 8011a0e:	079b      	lsls	r3, r3, #30
 8011a10:	f100 8107 	bmi.w	8011c22 <_printf_float+0x462>
 8011a14:	68e0      	ldr	r0, [r4, #12]
 8011a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a18:	4298      	cmp	r0, r3
 8011a1a:	bfb8      	it	lt
 8011a1c:	4618      	movlt	r0, r3
 8011a1e:	e730      	b.n	8011882 <_printf_float+0xc2>
 8011a20:	2301      	movs	r3, #1
 8011a22:	464a      	mov	r2, r9
 8011a24:	4631      	mov	r1, r6
 8011a26:	4628      	mov	r0, r5
 8011a28:	47b8      	blx	r7
 8011a2a:	3001      	adds	r0, #1
 8011a2c:	f43f af27 	beq.w	801187e <_printf_float+0xbe>
 8011a30:	f108 0801 	add.w	r8, r8, #1
 8011a34:	e7e6      	b.n	8011a04 <_printf_float+0x244>
 8011a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	dc39      	bgt.n	8011ab0 <_printf_float+0x2f0>
 8011a3c:	4a1b      	ldr	r2, [pc, #108]	; (8011aac <_printf_float+0x2ec>)
 8011a3e:	2301      	movs	r3, #1
 8011a40:	4631      	mov	r1, r6
 8011a42:	4628      	mov	r0, r5
 8011a44:	47b8      	blx	r7
 8011a46:	3001      	adds	r0, #1
 8011a48:	f43f af19 	beq.w	801187e <_printf_float+0xbe>
 8011a4c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011a50:	4313      	orrs	r3, r2
 8011a52:	d102      	bne.n	8011a5a <_printf_float+0x29a>
 8011a54:	6823      	ldr	r3, [r4, #0]
 8011a56:	07d9      	lsls	r1, r3, #31
 8011a58:	d5d8      	bpl.n	8011a0c <_printf_float+0x24c>
 8011a5a:	ee18 3a10 	vmov	r3, s16
 8011a5e:	4652      	mov	r2, sl
 8011a60:	4631      	mov	r1, r6
 8011a62:	4628      	mov	r0, r5
 8011a64:	47b8      	blx	r7
 8011a66:	3001      	adds	r0, #1
 8011a68:	f43f af09 	beq.w	801187e <_printf_float+0xbe>
 8011a6c:	f04f 0900 	mov.w	r9, #0
 8011a70:	f104 0a1a 	add.w	sl, r4, #26
 8011a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a76:	425b      	negs	r3, r3
 8011a78:	454b      	cmp	r3, r9
 8011a7a:	dc01      	bgt.n	8011a80 <_printf_float+0x2c0>
 8011a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a7e:	e792      	b.n	80119a6 <_printf_float+0x1e6>
 8011a80:	2301      	movs	r3, #1
 8011a82:	4652      	mov	r2, sl
 8011a84:	4631      	mov	r1, r6
 8011a86:	4628      	mov	r0, r5
 8011a88:	47b8      	blx	r7
 8011a8a:	3001      	adds	r0, #1
 8011a8c:	f43f aef7 	beq.w	801187e <_printf_float+0xbe>
 8011a90:	f109 0901 	add.w	r9, r9, #1
 8011a94:	e7ee      	b.n	8011a74 <_printf_float+0x2b4>
 8011a96:	bf00      	nop
 8011a98:	7fefffff 	.word	0x7fefffff
 8011a9c:	080151b0 	.word	0x080151b0
 8011aa0:	080151b4 	.word	0x080151b4
 8011aa4:	080151b8 	.word	0x080151b8
 8011aa8:	080151bc 	.word	0x080151bc
 8011aac:	080151c0 	.word	0x080151c0
 8011ab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ab2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	bfa8      	it	ge
 8011ab8:	461a      	movge	r2, r3
 8011aba:	2a00      	cmp	r2, #0
 8011abc:	4691      	mov	r9, r2
 8011abe:	dc37      	bgt.n	8011b30 <_printf_float+0x370>
 8011ac0:	f04f 0b00 	mov.w	fp, #0
 8011ac4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011ac8:	f104 021a 	add.w	r2, r4, #26
 8011acc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011ace:	9305      	str	r3, [sp, #20]
 8011ad0:	eba3 0309 	sub.w	r3, r3, r9
 8011ad4:	455b      	cmp	r3, fp
 8011ad6:	dc33      	bgt.n	8011b40 <_printf_float+0x380>
 8011ad8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011adc:	429a      	cmp	r2, r3
 8011ade:	db3b      	blt.n	8011b58 <_printf_float+0x398>
 8011ae0:	6823      	ldr	r3, [r4, #0]
 8011ae2:	07da      	lsls	r2, r3, #31
 8011ae4:	d438      	bmi.n	8011b58 <_printf_float+0x398>
 8011ae6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011aea:	eba2 0903 	sub.w	r9, r2, r3
 8011aee:	9b05      	ldr	r3, [sp, #20]
 8011af0:	1ad2      	subs	r2, r2, r3
 8011af2:	4591      	cmp	r9, r2
 8011af4:	bfa8      	it	ge
 8011af6:	4691      	movge	r9, r2
 8011af8:	f1b9 0f00 	cmp.w	r9, #0
 8011afc:	dc35      	bgt.n	8011b6a <_printf_float+0x3aa>
 8011afe:	f04f 0800 	mov.w	r8, #0
 8011b02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011b06:	f104 0a1a 	add.w	sl, r4, #26
 8011b0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b0e:	1a9b      	subs	r3, r3, r2
 8011b10:	eba3 0309 	sub.w	r3, r3, r9
 8011b14:	4543      	cmp	r3, r8
 8011b16:	f77f af79 	ble.w	8011a0c <_printf_float+0x24c>
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	4652      	mov	r2, sl
 8011b1e:	4631      	mov	r1, r6
 8011b20:	4628      	mov	r0, r5
 8011b22:	47b8      	blx	r7
 8011b24:	3001      	adds	r0, #1
 8011b26:	f43f aeaa 	beq.w	801187e <_printf_float+0xbe>
 8011b2a:	f108 0801 	add.w	r8, r8, #1
 8011b2e:	e7ec      	b.n	8011b0a <_printf_float+0x34a>
 8011b30:	4613      	mov	r3, r2
 8011b32:	4631      	mov	r1, r6
 8011b34:	4642      	mov	r2, r8
 8011b36:	4628      	mov	r0, r5
 8011b38:	47b8      	blx	r7
 8011b3a:	3001      	adds	r0, #1
 8011b3c:	d1c0      	bne.n	8011ac0 <_printf_float+0x300>
 8011b3e:	e69e      	b.n	801187e <_printf_float+0xbe>
 8011b40:	2301      	movs	r3, #1
 8011b42:	4631      	mov	r1, r6
 8011b44:	4628      	mov	r0, r5
 8011b46:	9205      	str	r2, [sp, #20]
 8011b48:	47b8      	blx	r7
 8011b4a:	3001      	adds	r0, #1
 8011b4c:	f43f ae97 	beq.w	801187e <_printf_float+0xbe>
 8011b50:	9a05      	ldr	r2, [sp, #20]
 8011b52:	f10b 0b01 	add.w	fp, fp, #1
 8011b56:	e7b9      	b.n	8011acc <_printf_float+0x30c>
 8011b58:	ee18 3a10 	vmov	r3, s16
 8011b5c:	4652      	mov	r2, sl
 8011b5e:	4631      	mov	r1, r6
 8011b60:	4628      	mov	r0, r5
 8011b62:	47b8      	blx	r7
 8011b64:	3001      	adds	r0, #1
 8011b66:	d1be      	bne.n	8011ae6 <_printf_float+0x326>
 8011b68:	e689      	b.n	801187e <_printf_float+0xbe>
 8011b6a:	9a05      	ldr	r2, [sp, #20]
 8011b6c:	464b      	mov	r3, r9
 8011b6e:	4442      	add	r2, r8
 8011b70:	4631      	mov	r1, r6
 8011b72:	4628      	mov	r0, r5
 8011b74:	47b8      	blx	r7
 8011b76:	3001      	adds	r0, #1
 8011b78:	d1c1      	bne.n	8011afe <_printf_float+0x33e>
 8011b7a:	e680      	b.n	801187e <_printf_float+0xbe>
 8011b7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b7e:	2a01      	cmp	r2, #1
 8011b80:	dc01      	bgt.n	8011b86 <_printf_float+0x3c6>
 8011b82:	07db      	lsls	r3, r3, #31
 8011b84:	d53a      	bpl.n	8011bfc <_printf_float+0x43c>
 8011b86:	2301      	movs	r3, #1
 8011b88:	4642      	mov	r2, r8
 8011b8a:	4631      	mov	r1, r6
 8011b8c:	4628      	mov	r0, r5
 8011b8e:	47b8      	blx	r7
 8011b90:	3001      	adds	r0, #1
 8011b92:	f43f ae74 	beq.w	801187e <_printf_float+0xbe>
 8011b96:	ee18 3a10 	vmov	r3, s16
 8011b9a:	4652      	mov	r2, sl
 8011b9c:	4631      	mov	r1, r6
 8011b9e:	4628      	mov	r0, r5
 8011ba0:	47b8      	blx	r7
 8011ba2:	3001      	adds	r0, #1
 8011ba4:	f43f ae6b 	beq.w	801187e <_printf_float+0xbe>
 8011ba8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011bac:	2200      	movs	r2, #0
 8011bae:	2300      	movs	r3, #0
 8011bb0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8011bb4:	f7ee ffb0 	bl	8000b18 <__aeabi_dcmpeq>
 8011bb8:	b9d8      	cbnz	r0, 8011bf2 <_printf_float+0x432>
 8011bba:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8011bbe:	f108 0201 	add.w	r2, r8, #1
 8011bc2:	4631      	mov	r1, r6
 8011bc4:	4628      	mov	r0, r5
 8011bc6:	47b8      	blx	r7
 8011bc8:	3001      	adds	r0, #1
 8011bca:	d10e      	bne.n	8011bea <_printf_float+0x42a>
 8011bcc:	e657      	b.n	801187e <_printf_float+0xbe>
 8011bce:	2301      	movs	r3, #1
 8011bd0:	4652      	mov	r2, sl
 8011bd2:	4631      	mov	r1, r6
 8011bd4:	4628      	mov	r0, r5
 8011bd6:	47b8      	blx	r7
 8011bd8:	3001      	adds	r0, #1
 8011bda:	f43f ae50 	beq.w	801187e <_printf_float+0xbe>
 8011bde:	f108 0801 	add.w	r8, r8, #1
 8011be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011be4:	3b01      	subs	r3, #1
 8011be6:	4543      	cmp	r3, r8
 8011be8:	dcf1      	bgt.n	8011bce <_printf_float+0x40e>
 8011bea:	464b      	mov	r3, r9
 8011bec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011bf0:	e6da      	b.n	80119a8 <_printf_float+0x1e8>
 8011bf2:	f04f 0800 	mov.w	r8, #0
 8011bf6:	f104 0a1a 	add.w	sl, r4, #26
 8011bfa:	e7f2      	b.n	8011be2 <_printf_float+0x422>
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	4642      	mov	r2, r8
 8011c00:	e7df      	b.n	8011bc2 <_printf_float+0x402>
 8011c02:	2301      	movs	r3, #1
 8011c04:	464a      	mov	r2, r9
 8011c06:	4631      	mov	r1, r6
 8011c08:	4628      	mov	r0, r5
 8011c0a:	47b8      	blx	r7
 8011c0c:	3001      	adds	r0, #1
 8011c0e:	f43f ae36 	beq.w	801187e <_printf_float+0xbe>
 8011c12:	f108 0801 	add.w	r8, r8, #1
 8011c16:	68e3      	ldr	r3, [r4, #12]
 8011c18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011c1a:	1a5b      	subs	r3, r3, r1
 8011c1c:	4543      	cmp	r3, r8
 8011c1e:	dcf0      	bgt.n	8011c02 <_printf_float+0x442>
 8011c20:	e6f8      	b.n	8011a14 <_printf_float+0x254>
 8011c22:	f04f 0800 	mov.w	r8, #0
 8011c26:	f104 0919 	add.w	r9, r4, #25
 8011c2a:	e7f4      	b.n	8011c16 <_printf_float+0x456>

08011c2c <_printf_common>:
 8011c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c30:	4616      	mov	r6, r2
 8011c32:	4699      	mov	r9, r3
 8011c34:	688a      	ldr	r2, [r1, #8]
 8011c36:	690b      	ldr	r3, [r1, #16]
 8011c38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011c3c:	4293      	cmp	r3, r2
 8011c3e:	bfb8      	it	lt
 8011c40:	4613      	movlt	r3, r2
 8011c42:	6033      	str	r3, [r6, #0]
 8011c44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011c48:	4607      	mov	r7, r0
 8011c4a:	460c      	mov	r4, r1
 8011c4c:	b10a      	cbz	r2, 8011c52 <_printf_common+0x26>
 8011c4e:	3301      	adds	r3, #1
 8011c50:	6033      	str	r3, [r6, #0]
 8011c52:	6823      	ldr	r3, [r4, #0]
 8011c54:	0699      	lsls	r1, r3, #26
 8011c56:	bf42      	ittt	mi
 8011c58:	6833      	ldrmi	r3, [r6, #0]
 8011c5a:	3302      	addmi	r3, #2
 8011c5c:	6033      	strmi	r3, [r6, #0]
 8011c5e:	6825      	ldr	r5, [r4, #0]
 8011c60:	f015 0506 	ands.w	r5, r5, #6
 8011c64:	d106      	bne.n	8011c74 <_printf_common+0x48>
 8011c66:	f104 0a19 	add.w	sl, r4, #25
 8011c6a:	68e3      	ldr	r3, [r4, #12]
 8011c6c:	6832      	ldr	r2, [r6, #0]
 8011c6e:	1a9b      	subs	r3, r3, r2
 8011c70:	42ab      	cmp	r3, r5
 8011c72:	dc26      	bgt.n	8011cc2 <_printf_common+0x96>
 8011c74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011c78:	1e13      	subs	r3, r2, #0
 8011c7a:	6822      	ldr	r2, [r4, #0]
 8011c7c:	bf18      	it	ne
 8011c7e:	2301      	movne	r3, #1
 8011c80:	0692      	lsls	r2, r2, #26
 8011c82:	d42b      	bmi.n	8011cdc <_printf_common+0xb0>
 8011c84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011c88:	4649      	mov	r1, r9
 8011c8a:	4638      	mov	r0, r7
 8011c8c:	47c0      	blx	r8
 8011c8e:	3001      	adds	r0, #1
 8011c90:	d01e      	beq.n	8011cd0 <_printf_common+0xa4>
 8011c92:	6823      	ldr	r3, [r4, #0]
 8011c94:	6922      	ldr	r2, [r4, #16]
 8011c96:	f003 0306 	and.w	r3, r3, #6
 8011c9a:	2b04      	cmp	r3, #4
 8011c9c:	bf02      	ittt	eq
 8011c9e:	68e5      	ldreq	r5, [r4, #12]
 8011ca0:	6833      	ldreq	r3, [r6, #0]
 8011ca2:	1aed      	subeq	r5, r5, r3
 8011ca4:	68a3      	ldr	r3, [r4, #8]
 8011ca6:	bf0c      	ite	eq
 8011ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011cac:	2500      	movne	r5, #0
 8011cae:	4293      	cmp	r3, r2
 8011cb0:	bfc4      	itt	gt
 8011cb2:	1a9b      	subgt	r3, r3, r2
 8011cb4:	18ed      	addgt	r5, r5, r3
 8011cb6:	2600      	movs	r6, #0
 8011cb8:	341a      	adds	r4, #26
 8011cba:	42b5      	cmp	r5, r6
 8011cbc:	d11a      	bne.n	8011cf4 <_printf_common+0xc8>
 8011cbe:	2000      	movs	r0, #0
 8011cc0:	e008      	b.n	8011cd4 <_printf_common+0xa8>
 8011cc2:	2301      	movs	r3, #1
 8011cc4:	4652      	mov	r2, sl
 8011cc6:	4649      	mov	r1, r9
 8011cc8:	4638      	mov	r0, r7
 8011cca:	47c0      	blx	r8
 8011ccc:	3001      	adds	r0, #1
 8011cce:	d103      	bne.n	8011cd8 <_printf_common+0xac>
 8011cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cd8:	3501      	adds	r5, #1
 8011cda:	e7c6      	b.n	8011c6a <_printf_common+0x3e>
 8011cdc:	18e1      	adds	r1, r4, r3
 8011cde:	1c5a      	adds	r2, r3, #1
 8011ce0:	2030      	movs	r0, #48	; 0x30
 8011ce2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011ce6:	4422      	add	r2, r4
 8011ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011cec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011cf0:	3302      	adds	r3, #2
 8011cf2:	e7c7      	b.n	8011c84 <_printf_common+0x58>
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	4622      	mov	r2, r4
 8011cf8:	4649      	mov	r1, r9
 8011cfa:	4638      	mov	r0, r7
 8011cfc:	47c0      	blx	r8
 8011cfe:	3001      	adds	r0, #1
 8011d00:	d0e6      	beq.n	8011cd0 <_printf_common+0xa4>
 8011d02:	3601      	adds	r6, #1
 8011d04:	e7d9      	b.n	8011cba <_printf_common+0x8e>
	...

08011d08 <_printf_i>:
 8011d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d0c:	7e0f      	ldrb	r7, [r1, #24]
 8011d0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011d10:	2f78      	cmp	r7, #120	; 0x78
 8011d12:	4691      	mov	r9, r2
 8011d14:	4680      	mov	r8, r0
 8011d16:	460c      	mov	r4, r1
 8011d18:	469a      	mov	sl, r3
 8011d1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011d1e:	d807      	bhi.n	8011d30 <_printf_i+0x28>
 8011d20:	2f62      	cmp	r7, #98	; 0x62
 8011d22:	d80a      	bhi.n	8011d3a <_printf_i+0x32>
 8011d24:	2f00      	cmp	r7, #0
 8011d26:	f000 80d4 	beq.w	8011ed2 <_printf_i+0x1ca>
 8011d2a:	2f58      	cmp	r7, #88	; 0x58
 8011d2c:	f000 80c0 	beq.w	8011eb0 <_printf_i+0x1a8>
 8011d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011d38:	e03a      	b.n	8011db0 <_printf_i+0xa8>
 8011d3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011d3e:	2b15      	cmp	r3, #21
 8011d40:	d8f6      	bhi.n	8011d30 <_printf_i+0x28>
 8011d42:	a101      	add	r1, pc, #4	; (adr r1, 8011d48 <_printf_i+0x40>)
 8011d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011d48:	08011da1 	.word	0x08011da1
 8011d4c:	08011db5 	.word	0x08011db5
 8011d50:	08011d31 	.word	0x08011d31
 8011d54:	08011d31 	.word	0x08011d31
 8011d58:	08011d31 	.word	0x08011d31
 8011d5c:	08011d31 	.word	0x08011d31
 8011d60:	08011db5 	.word	0x08011db5
 8011d64:	08011d31 	.word	0x08011d31
 8011d68:	08011d31 	.word	0x08011d31
 8011d6c:	08011d31 	.word	0x08011d31
 8011d70:	08011d31 	.word	0x08011d31
 8011d74:	08011eb9 	.word	0x08011eb9
 8011d78:	08011de1 	.word	0x08011de1
 8011d7c:	08011e73 	.word	0x08011e73
 8011d80:	08011d31 	.word	0x08011d31
 8011d84:	08011d31 	.word	0x08011d31
 8011d88:	08011edb 	.word	0x08011edb
 8011d8c:	08011d31 	.word	0x08011d31
 8011d90:	08011de1 	.word	0x08011de1
 8011d94:	08011d31 	.word	0x08011d31
 8011d98:	08011d31 	.word	0x08011d31
 8011d9c:	08011e7b 	.word	0x08011e7b
 8011da0:	682b      	ldr	r3, [r5, #0]
 8011da2:	1d1a      	adds	r2, r3, #4
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	602a      	str	r2, [r5, #0]
 8011da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011dac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011db0:	2301      	movs	r3, #1
 8011db2:	e09f      	b.n	8011ef4 <_printf_i+0x1ec>
 8011db4:	6820      	ldr	r0, [r4, #0]
 8011db6:	682b      	ldr	r3, [r5, #0]
 8011db8:	0607      	lsls	r7, r0, #24
 8011dba:	f103 0104 	add.w	r1, r3, #4
 8011dbe:	6029      	str	r1, [r5, #0]
 8011dc0:	d501      	bpl.n	8011dc6 <_printf_i+0xbe>
 8011dc2:	681e      	ldr	r6, [r3, #0]
 8011dc4:	e003      	b.n	8011dce <_printf_i+0xc6>
 8011dc6:	0646      	lsls	r6, r0, #25
 8011dc8:	d5fb      	bpl.n	8011dc2 <_printf_i+0xba>
 8011dca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011dce:	2e00      	cmp	r6, #0
 8011dd0:	da03      	bge.n	8011dda <_printf_i+0xd2>
 8011dd2:	232d      	movs	r3, #45	; 0x2d
 8011dd4:	4276      	negs	r6, r6
 8011dd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011dda:	485a      	ldr	r0, [pc, #360]	; (8011f44 <_printf_i+0x23c>)
 8011ddc:	230a      	movs	r3, #10
 8011dde:	e012      	b.n	8011e06 <_printf_i+0xfe>
 8011de0:	682b      	ldr	r3, [r5, #0]
 8011de2:	6820      	ldr	r0, [r4, #0]
 8011de4:	1d19      	adds	r1, r3, #4
 8011de6:	6029      	str	r1, [r5, #0]
 8011de8:	0605      	lsls	r5, r0, #24
 8011dea:	d501      	bpl.n	8011df0 <_printf_i+0xe8>
 8011dec:	681e      	ldr	r6, [r3, #0]
 8011dee:	e002      	b.n	8011df6 <_printf_i+0xee>
 8011df0:	0641      	lsls	r1, r0, #25
 8011df2:	d5fb      	bpl.n	8011dec <_printf_i+0xe4>
 8011df4:	881e      	ldrh	r6, [r3, #0]
 8011df6:	4853      	ldr	r0, [pc, #332]	; (8011f44 <_printf_i+0x23c>)
 8011df8:	2f6f      	cmp	r7, #111	; 0x6f
 8011dfa:	bf0c      	ite	eq
 8011dfc:	2308      	moveq	r3, #8
 8011dfe:	230a      	movne	r3, #10
 8011e00:	2100      	movs	r1, #0
 8011e02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011e06:	6865      	ldr	r5, [r4, #4]
 8011e08:	60a5      	str	r5, [r4, #8]
 8011e0a:	2d00      	cmp	r5, #0
 8011e0c:	bfa2      	ittt	ge
 8011e0e:	6821      	ldrge	r1, [r4, #0]
 8011e10:	f021 0104 	bicge.w	r1, r1, #4
 8011e14:	6021      	strge	r1, [r4, #0]
 8011e16:	b90e      	cbnz	r6, 8011e1c <_printf_i+0x114>
 8011e18:	2d00      	cmp	r5, #0
 8011e1a:	d04b      	beq.n	8011eb4 <_printf_i+0x1ac>
 8011e1c:	4615      	mov	r5, r2
 8011e1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011e22:	fb03 6711 	mls	r7, r3, r1, r6
 8011e26:	5dc7      	ldrb	r7, [r0, r7]
 8011e28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011e2c:	4637      	mov	r7, r6
 8011e2e:	42bb      	cmp	r3, r7
 8011e30:	460e      	mov	r6, r1
 8011e32:	d9f4      	bls.n	8011e1e <_printf_i+0x116>
 8011e34:	2b08      	cmp	r3, #8
 8011e36:	d10b      	bne.n	8011e50 <_printf_i+0x148>
 8011e38:	6823      	ldr	r3, [r4, #0]
 8011e3a:	07de      	lsls	r6, r3, #31
 8011e3c:	d508      	bpl.n	8011e50 <_printf_i+0x148>
 8011e3e:	6923      	ldr	r3, [r4, #16]
 8011e40:	6861      	ldr	r1, [r4, #4]
 8011e42:	4299      	cmp	r1, r3
 8011e44:	bfde      	ittt	le
 8011e46:	2330      	movle	r3, #48	; 0x30
 8011e48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011e4c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011e50:	1b52      	subs	r2, r2, r5
 8011e52:	6122      	str	r2, [r4, #16]
 8011e54:	f8cd a000 	str.w	sl, [sp]
 8011e58:	464b      	mov	r3, r9
 8011e5a:	aa03      	add	r2, sp, #12
 8011e5c:	4621      	mov	r1, r4
 8011e5e:	4640      	mov	r0, r8
 8011e60:	f7ff fee4 	bl	8011c2c <_printf_common>
 8011e64:	3001      	adds	r0, #1
 8011e66:	d14a      	bne.n	8011efe <_printf_i+0x1f6>
 8011e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e6c:	b004      	add	sp, #16
 8011e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e72:	6823      	ldr	r3, [r4, #0]
 8011e74:	f043 0320 	orr.w	r3, r3, #32
 8011e78:	6023      	str	r3, [r4, #0]
 8011e7a:	4833      	ldr	r0, [pc, #204]	; (8011f48 <_printf_i+0x240>)
 8011e7c:	2778      	movs	r7, #120	; 0x78
 8011e7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011e82:	6823      	ldr	r3, [r4, #0]
 8011e84:	6829      	ldr	r1, [r5, #0]
 8011e86:	061f      	lsls	r7, r3, #24
 8011e88:	f851 6b04 	ldr.w	r6, [r1], #4
 8011e8c:	d402      	bmi.n	8011e94 <_printf_i+0x18c>
 8011e8e:	065f      	lsls	r7, r3, #25
 8011e90:	bf48      	it	mi
 8011e92:	b2b6      	uxthmi	r6, r6
 8011e94:	07df      	lsls	r7, r3, #31
 8011e96:	bf48      	it	mi
 8011e98:	f043 0320 	orrmi.w	r3, r3, #32
 8011e9c:	6029      	str	r1, [r5, #0]
 8011e9e:	bf48      	it	mi
 8011ea0:	6023      	strmi	r3, [r4, #0]
 8011ea2:	b91e      	cbnz	r6, 8011eac <_printf_i+0x1a4>
 8011ea4:	6823      	ldr	r3, [r4, #0]
 8011ea6:	f023 0320 	bic.w	r3, r3, #32
 8011eaa:	6023      	str	r3, [r4, #0]
 8011eac:	2310      	movs	r3, #16
 8011eae:	e7a7      	b.n	8011e00 <_printf_i+0xf8>
 8011eb0:	4824      	ldr	r0, [pc, #144]	; (8011f44 <_printf_i+0x23c>)
 8011eb2:	e7e4      	b.n	8011e7e <_printf_i+0x176>
 8011eb4:	4615      	mov	r5, r2
 8011eb6:	e7bd      	b.n	8011e34 <_printf_i+0x12c>
 8011eb8:	682b      	ldr	r3, [r5, #0]
 8011eba:	6826      	ldr	r6, [r4, #0]
 8011ebc:	6961      	ldr	r1, [r4, #20]
 8011ebe:	1d18      	adds	r0, r3, #4
 8011ec0:	6028      	str	r0, [r5, #0]
 8011ec2:	0635      	lsls	r5, r6, #24
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	d501      	bpl.n	8011ecc <_printf_i+0x1c4>
 8011ec8:	6019      	str	r1, [r3, #0]
 8011eca:	e002      	b.n	8011ed2 <_printf_i+0x1ca>
 8011ecc:	0670      	lsls	r0, r6, #25
 8011ece:	d5fb      	bpl.n	8011ec8 <_printf_i+0x1c0>
 8011ed0:	8019      	strh	r1, [r3, #0]
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	6123      	str	r3, [r4, #16]
 8011ed6:	4615      	mov	r5, r2
 8011ed8:	e7bc      	b.n	8011e54 <_printf_i+0x14c>
 8011eda:	682b      	ldr	r3, [r5, #0]
 8011edc:	1d1a      	adds	r2, r3, #4
 8011ede:	602a      	str	r2, [r5, #0]
 8011ee0:	681d      	ldr	r5, [r3, #0]
 8011ee2:	6862      	ldr	r2, [r4, #4]
 8011ee4:	2100      	movs	r1, #0
 8011ee6:	4628      	mov	r0, r5
 8011ee8:	f7ee f99a 	bl	8000220 <memchr>
 8011eec:	b108      	cbz	r0, 8011ef2 <_printf_i+0x1ea>
 8011eee:	1b40      	subs	r0, r0, r5
 8011ef0:	6060      	str	r0, [r4, #4]
 8011ef2:	6863      	ldr	r3, [r4, #4]
 8011ef4:	6123      	str	r3, [r4, #16]
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011efc:	e7aa      	b.n	8011e54 <_printf_i+0x14c>
 8011efe:	6923      	ldr	r3, [r4, #16]
 8011f00:	462a      	mov	r2, r5
 8011f02:	4649      	mov	r1, r9
 8011f04:	4640      	mov	r0, r8
 8011f06:	47d0      	blx	sl
 8011f08:	3001      	adds	r0, #1
 8011f0a:	d0ad      	beq.n	8011e68 <_printf_i+0x160>
 8011f0c:	6823      	ldr	r3, [r4, #0]
 8011f0e:	079b      	lsls	r3, r3, #30
 8011f10:	d413      	bmi.n	8011f3a <_printf_i+0x232>
 8011f12:	68e0      	ldr	r0, [r4, #12]
 8011f14:	9b03      	ldr	r3, [sp, #12]
 8011f16:	4298      	cmp	r0, r3
 8011f18:	bfb8      	it	lt
 8011f1a:	4618      	movlt	r0, r3
 8011f1c:	e7a6      	b.n	8011e6c <_printf_i+0x164>
 8011f1e:	2301      	movs	r3, #1
 8011f20:	4632      	mov	r2, r6
 8011f22:	4649      	mov	r1, r9
 8011f24:	4640      	mov	r0, r8
 8011f26:	47d0      	blx	sl
 8011f28:	3001      	adds	r0, #1
 8011f2a:	d09d      	beq.n	8011e68 <_printf_i+0x160>
 8011f2c:	3501      	adds	r5, #1
 8011f2e:	68e3      	ldr	r3, [r4, #12]
 8011f30:	9903      	ldr	r1, [sp, #12]
 8011f32:	1a5b      	subs	r3, r3, r1
 8011f34:	42ab      	cmp	r3, r5
 8011f36:	dcf2      	bgt.n	8011f1e <_printf_i+0x216>
 8011f38:	e7eb      	b.n	8011f12 <_printf_i+0x20a>
 8011f3a:	2500      	movs	r5, #0
 8011f3c:	f104 0619 	add.w	r6, r4, #25
 8011f40:	e7f5      	b.n	8011f2e <_printf_i+0x226>
 8011f42:	bf00      	nop
 8011f44:	080151c2 	.word	0x080151c2
 8011f48:	080151d3 	.word	0x080151d3

08011f4c <std>:
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	b510      	push	{r4, lr}
 8011f50:	4604      	mov	r4, r0
 8011f52:	e9c0 3300 	strd	r3, r3, [r0]
 8011f56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011f5a:	6083      	str	r3, [r0, #8]
 8011f5c:	8181      	strh	r1, [r0, #12]
 8011f5e:	6643      	str	r3, [r0, #100]	; 0x64
 8011f60:	81c2      	strh	r2, [r0, #14]
 8011f62:	6183      	str	r3, [r0, #24]
 8011f64:	4619      	mov	r1, r3
 8011f66:	2208      	movs	r2, #8
 8011f68:	305c      	adds	r0, #92	; 0x5c
 8011f6a:	f000 f928 	bl	80121be <memset>
 8011f6e:	4b0d      	ldr	r3, [pc, #52]	; (8011fa4 <std+0x58>)
 8011f70:	6263      	str	r3, [r4, #36]	; 0x24
 8011f72:	4b0d      	ldr	r3, [pc, #52]	; (8011fa8 <std+0x5c>)
 8011f74:	62a3      	str	r3, [r4, #40]	; 0x28
 8011f76:	4b0d      	ldr	r3, [pc, #52]	; (8011fac <std+0x60>)
 8011f78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011f7a:	4b0d      	ldr	r3, [pc, #52]	; (8011fb0 <std+0x64>)
 8011f7c:	6323      	str	r3, [r4, #48]	; 0x30
 8011f7e:	4b0d      	ldr	r3, [pc, #52]	; (8011fb4 <std+0x68>)
 8011f80:	6224      	str	r4, [r4, #32]
 8011f82:	429c      	cmp	r4, r3
 8011f84:	d006      	beq.n	8011f94 <std+0x48>
 8011f86:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011f8a:	4294      	cmp	r4, r2
 8011f8c:	d002      	beq.n	8011f94 <std+0x48>
 8011f8e:	33d0      	adds	r3, #208	; 0xd0
 8011f90:	429c      	cmp	r4, r3
 8011f92:	d105      	bne.n	8011fa0 <std+0x54>
 8011f94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f9c:	f000 b9e2 	b.w	8012364 <__retarget_lock_init_recursive>
 8011fa0:	bd10      	pop	{r4, pc}
 8011fa2:	bf00      	nop
 8011fa4:	08012139 	.word	0x08012139
 8011fa8:	0801215b 	.word	0x0801215b
 8011fac:	08012193 	.word	0x08012193
 8011fb0:	080121b7 	.word	0x080121b7
 8011fb4:	20005994 	.word	0x20005994

08011fb8 <stdio_exit_handler>:
 8011fb8:	4a02      	ldr	r2, [pc, #8]	; (8011fc4 <stdio_exit_handler+0xc>)
 8011fba:	4903      	ldr	r1, [pc, #12]	; (8011fc8 <stdio_exit_handler+0x10>)
 8011fbc:	4803      	ldr	r0, [pc, #12]	; (8011fcc <stdio_exit_handler+0x14>)
 8011fbe:	f000 b869 	b.w	8012094 <_fwalk_sglue>
 8011fc2:	bf00      	nop
 8011fc4:	20000188 	.word	0x20000188
 8011fc8:	08013d31 	.word	0x08013d31
 8011fcc:	20000194 	.word	0x20000194

08011fd0 <cleanup_stdio>:
 8011fd0:	6841      	ldr	r1, [r0, #4]
 8011fd2:	4b0c      	ldr	r3, [pc, #48]	; (8012004 <cleanup_stdio+0x34>)
 8011fd4:	4299      	cmp	r1, r3
 8011fd6:	b510      	push	{r4, lr}
 8011fd8:	4604      	mov	r4, r0
 8011fda:	d001      	beq.n	8011fe0 <cleanup_stdio+0x10>
 8011fdc:	f001 fea8 	bl	8013d30 <_fflush_r>
 8011fe0:	68a1      	ldr	r1, [r4, #8]
 8011fe2:	4b09      	ldr	r3, [pc, #36]	; (8012008 <cleanup_stdio+0x38>)
 8011fe4:	4299      	cmp	r1, r3
 8011fe6:	d002      	beq.n	8011fee <cleanup_stdio+0x1e>
 8011fe8:	4620      	mov	r0, r4
 8011fea:	f001 fea1 	bl	8013d30 <_fflush_r>
 8011fee:	68e1      	ldr	r1, [r4, #12]
 8011ff0:	4b06      	ldr	r3, [pc, #24]	; (801200c <cleanup_stdio+0x3c>)
 8011ff2:	4299      	cmp	r1, r3
 8011ff4:	d004      	beq.n	8012000 <cleanup_stdio+0x30>
 8011ff6:	4620      	mov	r0, r4
 8011ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ffc:	f001 be98 	b.w	8013d30 <_fflush_r>
 8012000:	bd10      	pop	{r4, pc}
 8012002:	bf00      	nop
 8012004:	20005994 	.word	0x20005994
 8012008:	200059fc 	.word	0x200059fc
 801200c:	20005a64 	.word	0x20005a64

08012010 <global_stdio_init.part.0>:
 8012010:	b510      	push	{r4, lr}
 8012012:	4b0b      	ldr	r3, [pc, #44]	; (8012040 <global_stdio_init.part.0+0x30>)
 8012014:	4c0b      	ldr	r4, [pc, #44]	; (8012044 <global_stdio_init.part.0+0x34>)
 8012016:	4a0c      	ldr	r2, [pc, #48]	; (8012048 <global_stdio_init.part.0+0x38>)
 8012018:	601a      	str	r2, [r3, #0]
 801201a:	4620      	mov	r0, r4
 801201c:	2200      	movs	r2, #0
 801201e:	2104      	movs	r1, #4
 8012020:	f7ff ff94 	bl	8011f4c <std>
 8012024:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012028:	2201      	movs	r2, #1
 801202a:	2109      	movs	r1, #9
 801202c:	f7ff ff8e 	bl	8011f4c <std>
 8012030:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012034:	2202      	movs	r2, #2
 8012036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801203a:	2112      	movs	r1, #18
 801203c:	f7ff bf86 	b.w	8011f4c <std>
 8012040:	20005acc 	.word	0x20005acc
 8012044:	20005994 	.word	0x20005994
 8012048:	08011fb9 	.word	0x08011fb9

0801204c <__sfp_lock_acquire>:
 801204c:	4801      	ldr	r0, [pc, #4]	; (8012054 <__sfp_lock_acquire+0x8>)
 801204e:	f000 b98a 	b.w	8012366 <__retarget_lock_acquire_recursive>
 8012052:	bf00      	nop
 8012054:	20005ad5 	.word	0x20005ad5

08012058 <__sfp_lock_release>:
 8012058:	4801      	ldr	r0, [pc, #4]	; (8012060 <__sfp_lock_release+0x8>)
 801205a:	f000 b985 	b.w	8012368 <__retarget_lock_release_recursive>
 801205e:	bf00      	nop
 8012060:	20005ad5 	.word	0x20005ad5

08012064 <__sinit>:
 8012064:	b510      	push	{r4, lr}
 8012066:	4604      	mov	r4, r0
 8012068:	f7ff fff0 	bl	801204c <__sfp_lock_acquire>
 801206c:	6a23      	ldr	r3, [r4, #32]
 801206e:	b11b      	cbz	r3, 8012078 <__sinit+0x14>
 8012070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012074:	f7ff bff0 	b.w	8012058 <__sfp_lock_release>
 8012078:	4b04      	ldr	r3, [pc, #16]	; (801208c <__sinit+0x28>)
 801207a:	6223      	str	r3, [r4, #32]
 801207c:	4b04      	ldr	r3, [pc, #16]	; (8012090 <__sinit+0x2c>)
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d1f5      	bne.n	8012070 <__sinit+0xc>
 8012084:	f7ff ffc4 	bl	8012010 <global_stdio_init.part.0>
 8012088:	e7f2      	b.n	8012070 <__sinit+0xc>
 801208a:	bf00      	nop
 801208c:	08011fd1 	.word	0x08011fd1
 8012090:	20005acc 	.word	0x20005acc

08012094 <_fwalk_sglue>:
 8012094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012098:	4607      	mov	r7, r0
 801209a:	4688      	mov	r8, r1
 801209c:	4614      	mov	r4, r2
 801209e:	2600      	movs	r6, #0
 80120a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80120a4:	f1b9 0901 	subs.w	r9, r9, #1
 80120a8:	d505      	bpl.n	80120b6 <_fwalk_sglue+0x22>
 80120aa:	6824      	ldr	r4, [r4, #0]
 80120ac:	2c00      	cmp	r4, #0
 80120ae:	d1f7      	bne.n	80120a0 <_fwalk_sglue+0xc>
 80120b0:	4630      	mov	r0, r6
 80120b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120b6:	89ab      	ldrh	r3, [r5, #12]
 80120b8:	2b01      	cmp	r3, #1
 80120ba:	d907      	bls.n	80120cc <_fwalk_sglue+0x38>
 80120bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80120c0:	3301      	adds	r3, #1
 80120c2:	d003      	beq.n	80120cc <_fwalk_sglue+0x38>
 80120c4:	4629      	mov	r1, r5
 80120c6:	4638      	mov	r0, r7
 80120c8:	47c0      	blx	r8
 80120ca:	4306      	orrs	r6, r0
 80120cc:	3568      	adds	r5, #104	; 0x68
 80120ce:	e7e9      	b.n	80120a4 <_fwalk_sglue+0x10>

080120d0 <sniprintf>:
 80120d0:	b40c      	push	{r2, r3}
 80120d2:	b530      	push	{r4, r5, lr}
 80120d4:	4b17      	ldr	r3, [pc, #92]	; (8012134 <sniprintf+0x64>)
 80120d6:	1e0c      	subs	r4, r1, #0
 80120d8:	681d      	ldr	r5, [r3, #0]
 80120da:	b09d      	sub	sp, #116	; 0x74
 80120dc:	da08      	bge.n	80120f0 <sniprintf+0x20>
 80120de:	238b      	movs	r3, #139	; 0x8b
 80120e0:	602b      	str	r3, [r5, #0]
 80120e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80120e6:	b01d      	add	sp, #116	; 0x74
 80120e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80120ec:	b002      	add	sp, #8
 80120ee:	4770      	bx	lr
 80120f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80120f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80120f8:	bf14      	ite	ne
 80120fa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80120fe:	4623      	moveq	r3, r4
 8012100:	9304      	str	r3, [sp, #16]
 8012102:	9307      	str	r3, [sp, #28]
 8012104:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012108:	9002      	str	r0, [sp, #8]
 801210a:	9006      	str	r0, [sp, #24]
 801210c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012110:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012112:	ab21      	add	r3, sp, #132	; 0x84
 8012114:	a902      	add	r1, sp, #8
 8012116:	4628      	mov	r0, r5
 8012118:	9301      	str	r3, [sp, #4]
 801211a:	f001 fc85 	bl	8013a28 <_svfiprintf_r>
 801211e:	1c43      	adds	r3, r0, #1
 8012120:	bfbc      	itt	lt
 8012122:	238b      	movlt	r3, #139	; 0x8b
 8012124:	602b      	strlt	r3, [r5, #0]
 8012126:	2c00      	cmp	r4, #0
 8012128:	d0dd      	beq.n	80120e6 <sniprintf+0x16>
 801212a:	9b02      	ldr	r3, [sp, #8]
 801212c:	2200      	movs	r2, #0
 801212e:	701a      	strb	r2, [r3, #0]
 8012130:	e7d9      	b.n	80120e6 <sniprintf+0x16>
 8012132:	bf00      	nop
 8012134:	200001e0 	.word	0x200001e0

08012138 <__sread>:
 8012138:	b510      	push	{r4, lr}
 801213a:	460c      	mov	r4, r1
 801213c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012140:	f000 f8c2 	bl	80122c8 <_read_r>
 8012144:	2800      	cmp	r0, #0
 8012146:	bfab      	itete	ge
 8012148:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801214a:	89a3      	ldrhlt	r3, [r4, #12]
 801214c:	181b      	addge	r3, r3, r0
 801214e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012152:	bfac      	ite	ge
 8012154:	6563      	strge	r3, [r4, #84]	; 0x54
 8012156:	81a3      	strhlt	r3, [r4, #12]
 8012158:	bd10      	pop	{r4, pc}

0801215a <__swrite>:
 801215a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801215e:	461f      	mov	r7, r3
 8012160:	898b      	ldrh	r3, [r1, #12]
 8012162:	05db      	lsls	r3, r3, #23
 8012164:	4605      	mov	r5, r0
 8012166:	460c      	mov	r4, r1
 8012168:	4616      	mov	r6, r2
 801216a:	d505      	bpl.n	8012178 <__swrite+0x1e>
 801216c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012170:	2302      	movs	r3, #2
 8012172:	2200      	movs	r2, #0
 8012174:	f000 f896 	bl	80122a4 <_lseek_r>
 8012178:	89a3      	ldrh	r3, [r4, #12]
 801217a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801217e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012182:	81a3      	strh	r3, [r4, #12]
 8012184:	4632      	mov	r2, r6
 8012186:	463b      	mov	r3, r7
 8012188:	4628      	mov	r0, r5
 801218a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801218e:	f000 b8ad 	b.w	80122ec <_write_r>

08012192 <__sseek>:
 8012192:	b510      	push	{r4, lr}
 8012194:	460c      	mov	r4, r1
 8012196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801219a:	f000 f883 	bl	80122a4 <_lseek_r>
 801219e:	1c43      	adds	r3, r0, #1
 80121a0:	89a3      	ldrh	r3, [r4, #12]
 80121a2:	bf15      	itete	ne
 80121a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80121a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80121aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80121ae:	81a3      	strheq	r3, [r4, #12]
 80121b0:	bf18      	it	ne
 80121b2:	81a3      	strhne	r3, [r4, #12]
 80121b4:	bd10      	pop	{r4, pc}

080121b6 <__sclose>:
 80121b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121ba:	f000 b80d 	b.w	80121d8 <_close_r>

080121be <memset>:
 80121be:	4402      	add	r2, r0
 80121c0:	4603      	mov	r3, r0
 80121c2:	4293      	cmp	r3, r2
 80121c4:	d100      	bne.n	80121c8 <memset+0xa>
 80121c6:	4770      	bx	lr
 80121c8:	f803 1b01 	strb.w	r1, [r3], #1
 80121cc:	e7f9      	b.n	80121c2 <memset+0x4>
	...

080121d0 <_localeconv_r>:
 80121d0:	4800      	ldr	r0, [pc, #0]	; (80121d4 <_localeconv_r+0x4>)
 80121d2:	4770      	bx	lr
 80121d4:	200002d4 	.word	0x200002d4

080121d8 <_close_r>:
 80121d8:	b538      	push	{r3, r4, r5, lr}
 80121da:	4d06      	ldr	r5, [pc, #24]	; (80121f4 <_close_r+0x1c>)
 80121dc:	2300      	movs	r3, #0
 80121de:	4604      	mov	r4, r0
 80121e0:	4608      	mov	r0, r1
 80121e2:	602b      	str	r3, [r5, #0]
 80121e4:	f7f0 ff8d 	bl	8003102 <_close>
 80121e8:	1c43      	adds	r3, r0, #1
 80121ea:	d102      	bne.n	80121f2 <_close_r+0x1a>
 80121ec:	682b      	ldr	r3, [r5, #0]
 80121ee:	b103      	cbz	r3, 80121f2 <_close_r+0x1a>
 80121f0:	6023      	str	r3, [r4, #0]
 80121f2:	bd38      	pop	{r3, r4, r5, pc}
 80121f4:	20005ad0 	.word	0x20005ad0

080121f8 <_reclaim_reent>:
 80121f8:	4b29      	ldr	r3, [pc, #164]	; (80122a0 <_reclaim_reent+0xa8>)
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	4283      	cmp	r3, r0
 80121fe:	b570      	push	{r4, r5, r6, lr}
 8012200:	4604      	mov	r4, r0
 8012202:	d04b      	beq.n	801229c <_reclaim_reent+0xa4>
 8012204:	69c3      	ldr	r3, [r0, #28]
 8012206:	b143      	cbz	r3, 801221a <_reclaim_reent+0x22>
 8012208:	68db      	ldr	r3, [r3, #12]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d144      	bne.n	8012298 <_reclaim_reent+0xa0>
 801220e:	69e3      	ldr	r3, [r4, #28]
 8012210:	6819      	ldr	r1, [r3, #0]
 8012212:	b111      	cbz	r1, 801221a <_reclaim_reent+0x22>
 8012214:	4620      	mov	r0, r4
 8012216:	f000 ff31 	bl	801307c <_free_r>
 801221a:	6961      	ldr	r1, [r4, #20]
 801221c:	b111      	cbz	r1, 8012224 <_reclaim_reent+0x2c>
 801221e:	4620      	mov	r0, r4
 8012220:	f000 ff2c 	bl	801307c <_free_r>
 8012224:	69e1      	ldr	r1, [r4, #28]
 8012226:	b111      	cbz	r1, 801222e <_reclaim_reent+0x36>
 8012228:	4620      	mov	r0, r4
 801222a:	f000 ff27 	bl	801307c <_free_r>
 801222e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012230:	b111      	cbz	r1, 8012238 <_reclaim_reent+0x40>
 8012232:	4620      	mov	r0, r4
 8012234:	f000 ff22 	bl	801307c <_free_r>
 8012238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801223a:	b111      	cbz	r1, 8012242 <_reclaim_reent+0x4a>
 801223c:	4620      	mov	r0, r4
 801223e:	f000 ff1d 	bl	801307c <_free_r>
 8012242:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012244:	b111      	cbz	r1, 801224c <_reclaim_reent+0x54>
 8012246:	4620      	mov	r0, r4
 8012248:	f000 ff18 	bl	801307c <_free_r>
 801224c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801224e:	b111      	cbz	r1, 8012256 <_reclaim_reent+0x5e>
 8012250:	4620      	mov	r0, r4
 8012252:	f000 ff13 	bl	801307c <_free_r>
 8012256:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012258:	b111      	cbz	r1, 8012260 <_reclaim_reent+0x68>
 801225a:	4620      	mov	r0, r4
 801225c:	f000 ff0e 	bl	801307c <_free_r>
 8012260:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012262:	b111      	cbz	r1, 801226a <_reclaim_reent+0x72>
 8012264:	4620      	mov	r0, r4
 8012266:	f000 ff09 	bl	801307c <_free_r>
 801226a:	6a23      	ldr	r3, [r4, #32]
 801226c:	b1b3      	cbz	r3, 801229c <_reclaim_reent+0xa4>
 801226e:	4620      	mov	r0, r4
 8012270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012274:	4718      	bx	r3
 8012276:	5949      	ldr	r1, [r1, r5]
 8012278:	b941      	cbnz	r1, 801228c <_reclaim_reent+0x94>
 801227a:	3504      	adds	r5, #4
 801227c:	69e3      	ldr	r3, [r4, #28]
 801227e:	2d80      	cmp	r5, #128	; 0x80
 8012280:	68d9      	ldr	r1, [r3, #12]
 8012282:	d1f8      	bne.n	8012276 <_reclaim_reent+0x7e>
 8012284:	4620      	mov	r0, r4
 8012286:	f000 fef9 	bl	801307c <_free_r>
 801228a:	e7c0      	b.n	801220e <_reclaim_reent+0x16>
 801228c:	680e      	ldr	r6, [r1, #0]
 801228e:	4620      	mov	r0, r4
 8012290:	f000 fef4 	bl	801307c <_free_r>
 8012294:	4631      	mov	r1, r6
 8012296:	e7ef      	b.n	8012278 <_reclaim_reent+0x80>
 8012298:	2500      	movs	r5, #0
 801229a:	e7ef      	b.n	801227c <_reclaim_reent+0x84>
 801229c:	bd70      	pop	{r4, r5, r6, pc}
 801229e:	bf00      	nop
 80122a0:	200001e0 	.word	0x200001e0

080122a4 <_lseek_r>:
 80122a4:	b538      	push	{r3, r4, r5, lr}
 80122a6:	4d07      	ldr	r5, [pc, #28]	; (80122c4 <_lseek_r+0x20>)
 80122a8:	4604      	mov	r4, r0
 80122aa:	4608      	mov	r0, r1
 80122ac:	4611      	mov	r1, r2
 80122ae:	2200      	movs	r2, #0
 80122b0:	602a      	str	r2, [r5, #0]
 80122b2:	461a      	mov	r2, r3
 80122b4:	f7f0 ff4c 	bl	8003150 <_lseek>
 80122b8:	1c43      	adds	r3, r0, #1
 80122ba:	d102      	bne.n	80122c2 <_lseek_r+0x1e>
 80122bc:	682b      	ldr	r3, [r5, #0]
 80122be:	b103      	cbz	r3, 80122c2 <_lseek_r+0x1e>
 80122c0:	6023      	str	r3, [r4, #0]
 80122c2:	bd38      	pop	{r3, r4, r5, pc}
 80122c4:	20005ad0 	.word	0x20005ad0

080122c8 <_read_r>:
 80122c8:	b538      	push	{r3, r4, r5, lr}
 80122ca:	4d07      	ldr	r5, [pc, #28]	; (80122e8 <_read_r+0x20>)
 80122cc:	4604      	mov	r4, r0
 80122ce:	4608      	mov	r0, r1
 80122d0:	4611      	mov	r1, r2
 80122d2:	2200      	movs	r2, #0
 80122d4:	602a      	str	r2, [r5, #0]
 80122d6:	461a      	mov	r2, r3
 80122d8:	f7f0 feda 	bl	8003090 <_read>
 80122dc:	1c43      	adds	r3, r0, #1
 80122de:	d102      	bne.n	80122e6 <_read_r+0x1e>
 80122e0:	682b      	ldr	r3, [r5, #0]
 80122e2:	b103      	cbz	r3, 80122e6 <_read_r+0x1e>
 80122e4:	6023      	str	r3, [r4, #0]
 80122e6:	bd38      	pop	{r3, r4, r5, pc}
 80122e8:	20005ad0 	.word	0x20005ad0

080122ec <_write_r>:
 80122ec:	b538      	push	{r3, r4, r5, lr}
 80122ee:	4d07      	ldr	r5, [pc, #28]	; (801230c <_write_r+0x20>)
 80122f0:	4604      	mov	r4, r0
 80122f2:	4608      	mov	r0, r1
 80122f4:	4611      	mov	r1, r2
 80122f6:	2200      	movs	r2, #0
 80122f8:	602a      	str	r2, [r5, #0]
 80122fa:	461a      	mov	r2, r3
 80122fc:	f7f0 fee5 	bl	80030ca <_write>
 8012300:	1c43      	adds	r3, r0, #1
 8012302:	d102      	bne.n	801230a <_write_r+0x1e>
 8012304:	682b      	ldr	r3, [r5, #0]
 8012306:	b103      	cbz	r3, 801230a <_write_r+0x1e>
 8012308:	6023      	str	r3, [r4, #0]
 801230a:	bd38      	pop	{r3, r4, r5, pc}
 801230c:	20005ad0 	.word	0x20005ad0

08012310 <__errno>:
 8012310:	4b01      	ldr	r3, [pc, #4]	; (8012318 <__errno+0x8>)
 8012312:	6818      	ldr	r0, [r3, #0]
 8012314:	4770      	bx	lr
 8012316:	bf00      	nop
 8012318:	200001e0 	.word	0x200001e0

0801231c <__libc_init_array>:
 801231c:	b570      	push	{r4, r5, r6, lr}
 801231e:	4d0d      	ldr	r5, [pc, #52]	; (8012354 <__libc_init_array+0x38>)
 8012320:	4c0d      	ldr	r4, [pc, #52]	; (8012358 <__libc_init_array+0x3c>)
 8012322:	1b64      	subs	r4, r4, r5
 8012324:	10a4      	asrs	r4, r4, #2
 8012326:	2600      	movs	r6, #0
 8012328:	42a6      	cmp	r6, r4
 801232a:	d109      	bne.n	8012340 <__libc_init_array+0x24>
 801232c:	4d0b      	ldr	r5, [pc, #44]	; (801235c <__libc_init_array+0x40>)
 801232e:	4c0c      	ldr	r4, [pc, #48]	; (8012360 <__libc_init_array+0x44>)
 8012330:	f002 fc56 	bl	8014be0 <_init>
 8012334:	1b64      	subs	r4, r4, r5
 8012336:	10a4      	asrs	r4, r4, #2
 8012338:	2600      	movs	r6, #0
 801233a:	42a6      	cmp	r6, r4
 801233c:	d105      	bne.n	801234a <__libc_init_array+0x2e>
 801233e:	bd70      	pop	{r4, r5, r6, pc}
 8012340:	f855 3b04 	ldr.w	r3, [r5], #4
 8012344:	4798      	blx	r3
 8012346:	3601      	adds	r6, #1
 8012348:	e7ee      	b.n	8012328 <__libc_init_array+0xc>
 801234a:	f855 3b04 	ldr.w	r3, [r5], #4
 801234e:	4798      	blx	r3
 8012350:	3601      	adds	r6, #1
 8012352:	e7f2      	b.n	801233a <__libc_init_array+0x1e>
 8012354:	08015544 	.word	0x08015544
 8012358:	08015544 	.word	0x08015544
 801235c:	08015544 	.word	0x08015544
 8012360:	08015548 	.word	0x08015548

08012364 <__retarget_lock_init_recursive>:
 8012364:	4770      	bx	lr

08012366 <__retarget_lock_acquire_recursive>:
 8012366:	4770      	bx	lr

08012368 <__retarget_lock_release_recursive>:
 8012368:	4770      	bx	lr

0801236a <memcpy>:
 801236a:	440a      	add	r2, r1
 801236c:	4291      	cmp	r1, r2
 801236e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012372:	d100      	bne.n	8012376 <memcpy+0xc>
 8012374:	4770      	bx	lr
 8012376:	b510      	push	{r4, lr}
 8012378:	f811 4b01 	ldrb.w	r4, [r1], #1
 801237c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012380:	4291      	cmp	r1, r2
 8012382:	d1f9      	bne.n	8012378 <memcpy+0xe>
 8012384:	bd10      	pop	{r4, pc}

08012386 <quorem>:
 8012386:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801238a:	6903      	ldr	r3, [r0, #16]
 801238c:	690c      	ldr	r4, [r1, #16]
 801238e:	42a3      	cmp	r3, r4
 8012390:	4607      	mov	r7, r0
 8012392:	db7e      	blt.n	8012492 <quorem+0x10c>
 8012394:	3c01      	subs	r4, #1
 8012396:	f101 0814 	add.w	r8, r1, #20
 801239a:	f100 0514 	add.w	r5, r0, #20
 801239e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80123a2:	9301      	str	r3, [sp, #4]
 80123a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80123a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80123ac:	3301      	adds	r3, #1
 80123ae:	429a      	cmp	r2, r3
 80123b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80123b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80123b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80123bc:	d331      	bcc.n	8012422 <quorem+0x9c>
 80123be:	f04f 0e00 	mov.w	lr, #0
 80123c2:	4640      	mov	r0, r8
 80123c4:	46ac      	mov	ip, r5
 80123c6:	46f2      	mov	sl, lr
 80123c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80123cc:	b293      	uxth	r3, r2
 80123ce:	fb06 e303 	mla	r3, r6, r3, lr
 80123d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80123d6:	0c1a      	lsrs	r2, r3, #16
 80123d8:	b29b      	uxth	r3, r3
 80123da:	ebaa 0303 	sub.w	r3, sl, r3
 80123de:	f8dc a000 	ldr.w	sl, [ip]
 80123e2:	fa13 f38a 	uxtah	r3, r3, sl
 80123e6:	fb06 220e 	mla	r2, r6, lr, r2
 80123ea:	9300      	str	r3, [sp, #0]
 80123ec:	9b00      	ldr	r3, [sp, #0]
 80123ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80123f2:	b292      	uxth	r2, r2
 80123f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80123f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80123fc:	f8bd 3000 	ldrh.w	r3, [sp]
 8012400:	4581      	cmp	r9, r0
 8012402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012406:	f84c 3b04 	str.w	r3, [ip], #4
 801240a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801240e:	d2db      	bcs.n	80123c8 <quorem+0x42>
 8012410:	f855 300b 	ldr.w	r3, [r5, fp]
 8012414:	b92b      	cbnz	r3, 8012422 <quorem+0x9c>
 8012416:	9b01      	ldr	r3, [sp, #4]
 8012418:	3b04      	subs	r3, #4
 801241a:	429d      	cmp	r5, r3
 801241c:	461a      	mov	r2, r3
 801241e:	d32c      	bcc.n	801247a <quorem+0xf4>
 8012420:	613c      	str	r4, [r7, #16]
 8012422:	4638      	mov	r0, r7
 8012424:	f001 f9a6 	bl	8013774 <__mcmp>
 8012428:	2800      	cmp	r0, #0
 801242a:	db22      	blt.n	8012472 <quorem+0xec>
 801242c:	3601      	adds	r6, #1
 801242e:	4629      	mov	r1, r5
 8012430:	2000      	movs	r0, #0
 8012432:	f858 2b04 	ldr.w	r2, [r8], #4
 8012436:	f8d1 c000 	ldr.w	ip, [r1]
 801243a:	b293      	uxth	r3, r2
 801243c:	1ac3      	subs	r3, r0, r3
 801243e:	0c12      	lsrs	r2, r2, #16
 8012440:	fa13 f38c 	uxtah	r3, r3, ip
 8012444:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012448:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801244c:	b29b      	uxth	r3, r3
 801244e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012452:	45c1      	cmp	r9, r8
 8012454:	f841 3b04 	str.w	r3, [r1], #4
 8012458:	ea4f 4022 	mov.w	r0, r2, asr #16
 801245c:	d2e9      	bcs.n	8012432 <quorem+0xac>
 801245e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012462:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012466:	b922      	cbnz	r2, 8012472 <quorem+0xec>
 8012468:	3b04      	subs	r3, #4
 801246a:	429d      	cmp	r5, r3
 801246c:	461a      	mov	r2, r3
 801246e:	d30a      	bcc.n	8012486 <quorem+0x100>
 8012470:	613c      	str	r4, [r7, #16]
 8012472:	4630      	mov	r0, r6
 8012474:	b003      	add	sp, #12
 8012476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801247a:	6812      	ldr	r2, [r2, #0]
 801247c:	3b04      	subs	r3, #4
 801247e:	2a00      	cmp	r2, #0
 8012480:	d1ce      	bne.n	8012420 <quorem+0x9a>
 8012482:	3c01      	subs	r4, #1
 8012484:	e7c9      	b.n	801241a <quorem+0x94>
 8012486:	6812      	ldr	r2, [r2, #0]
 8012488:	3b04      	subs	r3, #4
 801248a:	2a00      	cmp	r2, #0
 801248c:	d1f0      	bne.n	8012470 <quorem+0xea>
 801248e:	3c01      	subs	r4, #1
 8012490:	e7eb      	b.n	801246a <quorem+0xe4>
 8012492:	2000      	movs	r0, #0
 8012494:	e7ee      	b.n	8012474 <quorem+0xee>
	...

08012498 <_dtoa_r>:
 8012498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801249c:	ed2d 8b04 	vpush	{d8-d9}
 80124a0:	69c5      	ldr	r5, [r0, #28]
 80124a2:	b093      	sub	sp, #76	; 0x4c
 80124a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80124a8:	ec57 6b10 	vmov	r6, r7, d0
 80124ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80124b0:	9107      	str	r1, [sp, #28]
 80124b2:	4604      	mov	r4, r0
 80124b4:	920a      	str	r2, [sp, #40]	; 0x28
 80124b6:	930d      	str	r3, [sp, #52]	; 0x34
 80124b8:	b975      	cbnz	r5, 80124d8 <_dtoa_r+0x40>
 80124ba:	2010      	movs	r0, #16
 80124bc:	f000 fe2a 	bl	8013114 <malloc>
 80124c0:	4602      	mov	r2, r0
 80124c2:	61e0      	str	r0, [r4, #28]
 80124c4:	b920      	cbnz	r0, 80124d0 <_dtoa_r+0x38>
 80124c6:	4bae      	ldr	r3, [pc, #696]	; (8012780 <_dtoa_r+0x2e8>)
 80124c8:	21ef      	movs	r1, #239	; 0xef
 80124ca:	48ae      	ldr	r0, [pc, #696]	; (8012784 <_dtoa_r+0x2ec>)
 80124cc:	f001 fc82 	bl	8013dd4 <__assert_func>
 80124d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80124d4:	6005      	str	r5, [r0, #0]
 80124d6:	60c5      	str	r5, [r0, #12]
 80124d8:	69e3      	ldr	r3, [r4, #28]
 80124da:	6819      	ldr	r1, [r3, #0]
 80124dc:	b151      	cbz	r1, 80124f4 <_dtoa_r+0x5c>
 80124de:	685a      	ldr	r2, [r3, #4]
 80124e0:	604a      	str	r2, [r1, #4]
 80124e2:	2301      	movs	r3, #1
 80124e4:	4093      	lsls	r3, r2
 80124e6:	608b      	str	r3, [r1, #8]
 80124e8:	4620      	mov	r0, r4
 80124ea:	f000 ff07 	bl	80132fc <_Bfree>
 80124ee:	69e3      	ldr	r3, [r4, #28]
 80124f0:	2200      	movs	r2, #0
 80124f2:	601a      	str	r2, [r3, #0]
 80124f4:	1e3b      	subs	r3, r7, #0
 80124f6:	bfbb      	ittet	lt
 80124f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80124fc:	9303      	strlt	r3, [sp, #12]
 80124fe:	2300      	movge	r3, #0
 8012500:	2201      	movlt	r2, #1
 8012502:	bfac      	ite	ge
 8012504:	f8c8 3000 	strge.w	r3, [r8]
 8012508:	f8c8 2000 	strlt.w	r2, [r8]
 801250c:	4b9e      	ldr	r3, [pc, #632]	; (8012788 <_dtoa_r+0x2f0>)
 801250e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012512:	ea33 0308 	bics.w	r3, r3, r8
 8012516:	d11b      	bne.n	8012550 <_dtoa_r+0xb8>
 8012518:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801251a:	f242 730f 	movw	r3, #9999	; 0x270f
 801251e:	6013      	str	r3, [r2, #0]
 8012520:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8012524:	4333      	orrs	r3, r6
 8012526:	f000 8593 	beq.w	8013050 <_dtoa_r+0xbb8>
 801252a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801252c:	b963      	cbnz	r3, 8012548 <_dtoa_r+0xb0>
 801252e:	4b97      	ldr	r3, [pc, #604]	; (801278c <_dtoa_r+0x2f4>)
 8012530:	e027      	b.n	8012582 <_dtoa_r+0xea>
 8012532:	4b97      	ldr	r3, [pc, #604]	; (8012790 <_dtoa_r+0x2f8>)
 8012534:	9300      	str	r3, [sp, #0]
 8012536:	3308      	adds	r3, #8
 8012538:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801253a:	6013      	str	r3, [r2, #0]
 801253c:	9800      	ldr	r0, [sp, #0]
 801253e:	b013      	add	sp, #76	; 0x4c
 8012540:	ecbd 8b04 	vpop	{d8-d9}
 8012544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012548:	4b90      	ldr	r3, [pc, #576]	; (801278c <_dtoa_r+0x2f4>)
 801254a:	9300      	str	r3, [sp, #0]
 801254c:	3303      	adds	r3, #3
 801254e:	e7f3      	b.n	8012538 <_dtoa_r+0xa0>
 8012550:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012554:	2200      	movs	r2, #0
 8012556:	ec51 0b17 	vmov	r0, r1, d7
 801255a:	eeb0 8a47 	vmov.f32	s16, s14
 801255e:	eef0 8a67 	vmov.f32	s17, s15
 8012562:	2300      	movs	r3, #0
 8012564:	f7ee fad8 	bl	8000b18 <__aeabi_dcmpeq>
 8012568:	4681      	mov	r9, r0
 801256a:	b160      	cbz	r0, 8012586 <_dtoa_r+0xee>
 801256c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801256e:	2301      	movs	r3, #1
 8012570:	6013      	str	r3, [r2, #0]
 8012572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012574:	2b00      	cmp	r3, #0
 8012576:	f000 8568 	beq.w	801304a <_dtoa_r+0xbb2>
 801257a:	4b86      	ldr	r3, [pc, #536]	; (8012794 <_dtoa_r+0x2fc>)
 801257c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801257e:	6013      	str	r3, [r2, #0]
 8012580:	3b01      	subs	r3, #1
 8012582:	9300      	str	r3, [sp, #0]
 8012584:	e7da      	b.n	801253c <_dtoa_r+0xa4>
 8012586:	aa10      	add	r2, sp, #64	; 0x40
 8012588:	a911      	add	r1, sp, #68	; 0x44
 801258a:	4620      	mov	r0, r4
 801258c:	eeb0 0a48 	vmov.f32	s0, s16
 8012590:	eef0 0a68 	vmov.f32	s1, s17
 8012594:	f001 f994 	bl	80138c0 <__d2b>
 8012598:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801259c:	4682      	mov	sl, r0
 801259e:	2d00      	cmp	r5, #0
 80125a0:	d07f      	beq.n	80126a2 <_dtoa_r+0x20a>
 80125a2:	ee18 3a90 	vmov	r3, s17
 80125a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80125aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80125ae:	ec51 0b18 	vmov	r0, r1, d8
 80125b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80125b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80125ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80125be:	4619      	mov	r1, r3
 80125c0:	2200      	movs	r2, #0
 80125c2:	4b75      	ldr	r3, [pc, #468]	; (8012798 <_dtoa_r+0x300>)
 80125c4:	f7ed fe88 	bl	80002d8 <__aeabi_dsub>
 80125c8:	a367      	add	r3, pc, #412	; (adr r3, 8012768 <_dtoa_r+0x2d0>)
 80125ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ce:	f7ee f83b 	bl	8000648 <__aeabi_dmul>
 80125d2:	a367      	add	r3, pc, #412	; (adr r3, 8012770 <_dtoa_r+0x2d8>)
 80125d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d8:	f7ed fe80 	bl	80002dc <__adddf3>
 80125dc:	4606      	mov	r6, r0
 80125de:	4628      	mov	r0, r5
 80125e0:	460f      	mov	r7, r1
 80125e2:	f7ed ffc7 	bl	8000574 <__aeabi_i2d>
 80125e6:	a364      	add	r3, pc, #400	; (adr r3, 8012778 <_dtoa_r+0x2e0>)
 80125e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ec:	f7ee f82c 	bl	8000648 <__aeabi_dmul>
 80125f0:	4602      	mov	r2, r0
 80125f2:	460b      	mov	r3, r1
 80125f4:	4630      	mov	r0, r6
 80125f6:	4639      	mov	r1, r7
 80125f8:	f7ed fe70 	bl	80002dc <__adddf3>
 80125fc:	4606      	mov	r6, r0
 80125fe:	460f      	mov	r7, r1
 8012600:	f7ee fad2 	bl	8000ba8 <__aeabi_d2iz>
 8012604:	2200      	movs	r2, #0
 8012606:	4683      	mov	fp, r0
 8012608:	2300      	movs	r3, #0
 801260a:	4630      	mov	r0, r6
 801260c:	4639      	mov	r1, r7
 801260e:	f7ee fa8d 	bl	8000b2c <__aeabi_dcmplt>
 8012612:	b148      	cbz	r0, 8012628 <_dtoa_r+0x190>
 8012614:	4658      	mov	r0, fp
 8012616:	f7ed ffad 	bl	8000574 <__aeabi_i2d>
 801261a:	4632      	mov	r2, r6
 801261c:	463b      	mov	r3, r7
 801261e:	f7ee fa7b 	bl	8000b18 <__aeabi_dcmpeq>
 8012622:	b908      	cbnz	r0, 8012628 <_dtoa_r+0x190>
 8012624:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012628:	f1bb 0f16 	cmp.w	fp, #22
 801262c:	d857      	bhi.n	80126de <_dtoa_r+0x246>
 801262e:	4b5b      	ldr	r3, [pc, #364]	; (801279c <_dtoa_r+0x304>)
 8012630:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012638:	ec51 0b18 	vmov	r0, r1, d8
 801263c:	f7ee fa76 	bl	8000b2c <__aeabi_dcmplt>
 8012640:	2800      	cmp	r0, #0
 8012642:	d04e      	beq.n	80126e2 <_dtoa_r+0x24a>
 8012644:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012648:	2300      	movs	r3, #0
 801264a:	930c      	str	r3, [sp, #48]	; 0x30
 801264c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801264e:	1b5b      	subs	r3, r3, r5
 8012650:	1e5a      	subs	r2, r3, #1
 8012652:	bf45      	ittet	mi
 8012654:	f1c3 0301 	rsbmi	r3, r3, #1
 8012658:	9305      	strmi	r3, [sp, #20]
 801265a:	2300      	movpl	r3, #0
 801265c:	2300      	movmi	r3, #0
 801265e:	9206      	str	r2, [sp, #24]
 8012660:	bf54      	ite	pl
 8012662:	9305      	strpl	r3, [sp, #20]
 8012664:	9306      	strmi	r3, [sp, #24]
 8012666:	f1bb 0f00 	cmp.w	fp, #0
 801266a:	db3c      	blt.n	80126e6 <_dtoa_r+0x24e>
 801266c:	9b06      	ldr	r3, [sp, #24]
 801266e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012672:	445b      	add	r3, fp
 8012674:	9306      	str	r3, [sp, #24]
 8012676:	2300      	movs	r3, #0
 8012678:	9308      	str	r3, [sp, #32]
 801267a:	9b07      	ldr	r3, [sp, #28]
 801267c:	2b09      	cmp	r3, #9
 801267e:	d868      	bhi.n	8012752 <_dtoa_r+0x2ba>
 8012680:	2b05      	cmp	r3, #5
 8012682:	bfc4      	itt	gt
 8012684:	3b04      	subgt	r3, #4
 8012686:	9307      	strgt	r3, [sp, #28]
 8012688:	9b07      	ldr	r3, [sp, #28]
 801268a:	f1a3 0302 	sub.w	r3, r3, #2
 801268e:	bfcc      	ite	gt
 8012690:	2500      	movgt	r5, #0
 8012692:	2501      	movle	r5, #1
 8012694:	2b03      	cmp	r3, #3
 8012696:	f200 8085 	bhi.w	80127a4 <_dtoa_r+0x30c>
 801269a:	e8df f003 	tbb	[pc, r3]
 801269e:	3b2e      	.short	0x3b2e
 80126a0:	5839      	.short	0x5839
 80126a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80126a6:	441d      	add	r5, r3
 80126a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80126ac:	2b20      	cmp	r3, #32
 80126ae:	bfc1      	itttt	gt
 80126b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80126b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80126b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80126bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80126c0:	bfd6      	itet	le
 80126c2:	f1c3 0320 	rsble	r3, r3, #32
 80126c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80126ca:	fa06 f003 	lslle.w	r0, r6, r3
 80126ce:	f7ed ff41 	bl	8000554 <__aeabi_ui2d>
 80126d2:	2201      	movs	r2, #1
 80126d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80126d8:	3d01      	subs	r5, #1
 80126da:	920e      	str	r2, [sp, #56]	; 0x38
 80126dc:	e76f      	b.n	80125be <_dtoa_r+0x126>
 80126de:	2301      	movs	r3, #1
 80126e0:	e7b3      	b.n	801264a <_dtoa_r+0x1b2>
 80126e2:	900c      	str	r0, [sp, #48]	; 0x30
 80126e4:	e7b2      	b.n	801264c <_dtoa_r+0x1b4>
 80126e6:	9b05      	ldr	r3, [sp, #20]
 80126e8:	eba3 030b 	sub.w	r3, r3, fp
 80126ec:	9305      	str	r3, [sp, #20]
 80126ee:	f1cb 0300 	rsb	r3, fp, #0
 80126f2:	9308      	str	r3, [sp, #32]
 80126f4:	2300      	movs	r3, #0
 80126f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80126f8:	e7bf      	b.n	801267a <_dtoa_r+0x1e2>
 80126fa:	2300      	movs	r3, #0
 80126fc:	9309      	str	r3, [sp, #36]	; 0x24
 80126fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012700:	2b00      	cmp	r3, #0
 8012702:	dc52      	bgt.n	80127aa <_dtoa_r+0x312>
 8012704:	2301      	movs	r3, #1
 8012706:	9301      	str	r3, [sp, #4]
 8012708:	9304      	str	r3, [sp, #16]
 801270a:	461a      	mov	r2, r3
 801270c:	920a      	str	r2, [sp, #40]	; 0x28
 801270e:	e00b      	b.n	8012728 <_dtoa_r+0x290>
 8012710:	2301      	movs	r3, #1
 8012712:	e7f3      	b.n	80126fc <_dtoa_r+0x264>
 8012714:	2300      	movs	r3, #0
 8012716:	9309      	str	r3, [sp, #36]	; 0x24
 8012718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801271a:	445b      	add	r3, fp
 801271c:	9301      	str	r3, [sp, #4]
 801271e:	3301      	adds	r3, #1
 8012720:	2b01      	cmp	r3, #1
 8012722:	9304      	str	r3, [sp, #16]
 8012724:	bfb8      	it	lt
 8012726:	2301      	movlt	r3, #1
 8012728:	69e0      	ldr	r0, [r4, #28]
 801272a:	2100      	movs	r1, #0
 801272c:	2204      	movs	r2, #4
 801272e:	f102 0614 	add.w	r6, r2, #20
 8012732:	429e      	cmp	r6, r3
 8012734:	d93d      	bls.n	80127b2 <_dtoa_r+0x31a>
 8012736:	6041      	str	r1, [r0, #4]
 8012738:	4620      	mov	r0, r4
 801273a:	f000 fd9f 	bl	801327c <_Balloc>
 801273e:	9000      	str	r0, [sp, #0]
 8012740:	2800      	cmp	r0, #0
 8012742:	d139      	bne.n	80127b8 <_dtoa_r+0x320>
 8012744:	4b16      	ldr	r3, [pc, #88]	; (80127a0 <_dtoa_r+0x308>)
 8012746:	4602      	mov	r2, r0
 8012748:	f240 11af 	movw	r1, #431	; 0x1af
 801274c:	e6bd      	b.n	80124ca <_dtoa_r+0x32>
 801274e:	2301      	movs	r3, #1
 8012750:	e7e1      	b.n	8012716 <_dtoa_r+0x27e>
 8012752:	2501      	movs	r5, #1
 8012754:	2300      	movs	r3, #0
 8012756:	9307      	str	r3, [sp, #28]
 8012758:	9509      	str	r5, [sp, #36]	; 0x24
 801275a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801275e:	9301      	str	r3, [sp, #4]
 8012760:	9304      	str	r3, [sp, #16]
 8012762:	2200      	movs	r2, #0
 8012764:	2312      	movs	r3, #18
 8012766:	e7d1      	b.n	801270c <_dtoa_r+0x274>
 8012768:	636f4361 	.word	0x636f4361
 801276c:	3fd287a7 	.word	0x3fd287a7
 8012770:	8b60c8b3 	.word	0x8b60c8b3
 8012774:	3fc68a28 	.word	0x3fc68a28
 8012778:	509f79fb 	.word	0x509f79fb
 801277c:	3fd34413 	.word	0x3fd34413
 8012780:	080151f1 	.word	0x080151f1
 8012784:	08015208 	.word	0x08015208
 8012788:	7ff00000 	.word	0x7ff00000
 801278c:	080151ed 	.word	0x080151ed
 8012790:	080151e4 	.word	0x080151e4
 8012794:	080151c1 	.word	0x080151c1
 8012798:	3ff80000 	.word	0x3ff80000
 801279c:	080152f8 	.word	0x080152f8
 80127a0:	08015260 	.word	0x08015260
 80127a4:	2301      	movs	r3, #1
 80127a6:	9309      	str	r3, [sp, #36]	; 0x24
 80127a8:	e7d7      	b.n	801275a <_dtoa_r+0x2c2>
 80127aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127ac:	9301      	str	r3, [sp, #4]
 80127ae:	9304      	str	r3, [sp, #16]
 80127b0:	e7ba      	b.n	8012728 <_dtoa_r+0x290>
 80127b2:	3101      	adds	r1, #1
 80127b4:	0052      	lsls	r2, r2, #1
 80127b6:	e7ba      	b.n	801272e <_dtoa_r+0x296>
 80127b8:	69e3      	ldr	r3, [r4, #28]
 80127ba:	9a00      	ldr	r2, [sp, #0]
 80127bc:	601a      	str	r2, [r3, #0]
 80127be:	9b04      	ldr	r3, [sp, #16]
 80127c0:	2b0e      	cmp	r3, #14
 80127c2:	f200 80a8 	bhi.w	8012916 <_dtoa_r+0x47e>
 80127c6:	2d00      	cmp	r5, #0
 80127c8:	f000 80a5 	beq.w	8012916 <_dtoa_r+0x47e>
 80127cc:	f1bb 0f00 	cmp.w	fp, #0
 80127d0:	dd38      	ble.n	8012844 <_dtoa_r+0x3ac>
 80127d2:	4bc0      	ldr	r3, [pc, #768]	; (8012ad4 <_dtoa_r+0x63c>)
 80127d4:	f00b 020f 	and.w	r2, fp, #15
 80127d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80127dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80127e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80127e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80127e8:	d019      	beq.n	801281e <_dtoa_r+0x386>
 80127ea:	4bbb      	ldr	r3, [pc, #748]	; (8012ad8 <_dtoa_r+0x640>)
 80127ec:	ec51 0b18 	vmov	r0, r1, d8
 80127f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80127f4:	f7ee f852 	bl	800089c <__aeabi_ddiv>
 80127f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80127fc:	f008 080f 	and.w	r8, r8, #15
 8012800:	2503      	movs	r5, #3
 8012802:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012ad8 <_dtoa_r+0x640>
 8012806:	f1b8 0f00 	cmp.w	r8, #0
 801280a:	d10a      	bne.n	8012822 <_dtoa_r+0x38a>
 801280c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012810:	4632      	mov	r2, r6
 8012812:	463b      	mov	r3, r7
 8012814:	f7ee f842 	bl	800089c <__aeabi_ddiv>
 8012818:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801281c:	e02b      	b.n	8012876 <_dtoa_r+0x3de>
 801281e:	2502      	movs	r5, #2
 8012820:	e7ef      	b.n	8012802 <_dtoa_r+0x36a>
 8012822:	f018 0f01 	tst.w	r8, #1
 8012826:	d008      	beq.n	801283a <_dtoa_r+0x3a2>
 8012828:	4630      	mov	r0, r6
 801282a:	4639      	mov	r1, r7
 801282c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012830:	f7ed ff0a 	bl	8000648 <__aeabi_dmul>
 8012834:	3501      	adds	r5, #1
 8012836:	4606      	mov	r6, r0
 8012838:	460f      	mov	r7, r1
 801283a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801283e:	f109 0908 	add.w	r9, r9, #8
 8012842:	e7e0      	b.n	8012806 <_dtoa_r+0x36e>
 8012844:	f000 809f 	beq.w	8012986 <_dtoa_r+0x4ee>
 8012848:	f1cb 0600 	rsb	r6, fp, #0
 801284c:	4ba1      	ldr	r3, [pc, #644]	; (8012ad4 <_dtoa_r+0x63c>)
 801284e:	4fa2      	ldr	r7, [pc, #648]	; (8012ad8 <_dtoa_r+0x640>)
 8012850:	f006 020f 	and.w	r2, r6, #15
 8012854:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801285c:	ec51 0b18 	vmov	r0, r1, d8
 8012860:	f7ed fef2 	bl	8000648 <__aeabi_dmul>
 8012864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012868:	1136      	asrs	r6, r6, #4
 801286a:	2300      	movs	r3, #0
 801286c:	2502      	movs	r5, #2
 801286e:	2e00      	cmp	r6, #0
 8012870:	d17e      	bne.n	8012970 <_dtoa_r+0x4d8>
 8012872:	2b00      	cmp	r3, #0
 8012874:	d1d0      	bne.n	8012818 <_dtoa_r+0x380>
 8012876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012878:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801287c:	2b00      	cmp	r3, #0
 801287e:	f000 8084 	beq.w	801298a <_dtoa_r+0x4f2>
 8012882:	4b96      	ldr	r3, [pc, #600]	; (8012adc <_dtoa_r+0x644>)
 8012884:	2200      	movs	r2, #0
 8012886:	4640      	mov	r0, r8
 8012888:	4649      	mov	r1, r9
 801288a:	f7ee f94f 	bl	8000b2c <__aeabi_dcmplt>
 801288e:	2800      	cmp	r0, #0
 8012890:	d07b      	beq.n	801298a <_dtoa_r+0x4f2>
 8012892:	9b04      	ldr	r3, [sp, #16]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d078      	beq.n	801298a <_dtoa_r+0x4f2>
 8012898:	9b01      	ldr	r3, [sp, #4]
 801289a:	2b00      	cmp	r3, #0
 801289c:	dd39      	ble.n	8012912 <_dtoa_r+0x47a>
 801289e:	4b90      	ldr	r3, [pc, #576]	; (8012ae0 <_dtoa_r+0x648>)
 80128a0:	2200      	movs	r2, #0
 80128a2:	4640      	mov	r0, r8
 80128a4:	4649      	mov	r1, r9
 80128a6:	f7ed fecf 	bl	8000648 <__aeabi_dmul>
 80128aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80128ae:	9e01      	ldr	r6, [sp, #4]
 80128b0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80128b4:	3501      	adds	r5, #1
 80128b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80128ba:	4628      	mov	r0, r5
 80128bc:	f7ed fe5a 	bl	8000574 <__aeabi_i2d>
 80128c0:	4642      	mov	r2, r8
 80128c2:	464b      	mov	r3, r9
 80128c4:	f7ed fec0 	bl	8000648 <__aeabi_dmul>
 80128c8:	4b86      	ldr	r3, [pc, #536]	; (8012ae4 <_dtoa_r+0x64c>)
 80128ca:	2200      	movs	r2, #0
 80128cc:	f7ed fd06 	bl	80002dc <__adddf3>
 80128d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80128d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80128d8:	9303      	str	r3, [sp, #12]
 80128da:	2e00      	cmp	r6, #0
 80128dc:	d158      	bne.n	8012990 <_dtoa_r+0x4f8>
 80128de:	4b82      	ldr	r3, [pc, #520]	; (8012ae8 <_dtoa_r+0x650>)
 80128e0:	2200      	movs	r2, #0
 80128e2:	4640      	mov	r0, r8
 80128e4:	4649      	mov	r1, r9
 80128e6:	f7ed fcf7 	bl	80002d8 <__aeabi_dsub>
 80128ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80128ee:	4680      	mov	r8, r0
 80128f0:	4689      	mov	r9, r1
 80128f2:	f7ee f939 	bl	8000b68 <__aeabi_dcmpgt>
 80128f6:	2800      	cmp	r0, #0
 80128f8:	f040 8296 	bne.w	8012e28 <_dtoa_r+0x990>
 80128fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012900:	4640      	mov	r0, r8
 8012902:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012906:	4649      	mov	r1, r9
 8012908:	f7ee f910 	bl	8000b2c <__aeabi_dcmplt>
 801290c:	2800      	cmp	r0, #0
 801290e:	f040 8289 	bne.w	8012e24 <_dtoa_r+0x98c>
 8012912:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012916:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012918:	2b00      	cmp	r3, #0
 801291a:	f2c0 814e 	blt.w	8012bba <_dtoa_r+0x722>
 801291e:	f1bb 0f0e 	cmp.w	fp, #14
 8012922:	f300 814a 	bgt.w	8012bba <_dtoa_r+0x722>
 8012926:	4b6b      	ldr	r3, [pc, #428]	; (8012ad4 <_dtoa_r+0x63c>)
 8012928:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801292c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012932:	2b00      	cmp	r3, #0
 8012934:	f280 80dc 	bge.w	8012af0 <_dtoa_r+0x658>
 8012938:	9b04      	ldr	r3, [sp, #16]
 801293a:	2b00      	cmp	r3, #0
 801293c:	f300 80d8 	bgt.w	8012af0 <_dtoa_r+0x658>
 8012940:	f040 826f 	bne.w	8012e22 <_dtoa_r+0x98a>
 8012944:	4b68      	ldr	r3, [pc, #416]	; (8012ae8 <_dtoa_r+0x650>)
 8012946:	2200      	movs	r2, #0
 8012948:	4640      	mov	r0, r8
 801294a:	4649      	mov	r1, r9
 801294c:	f7ed fe7c 	bl	8000648 <__aeabi_dmul>
 8012950:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012954:	f7ee f8fe 	bl	8000b54 <__aeabi_dcmpge>
 8012958:	9e04      	ldr	r6, [sp, #16]
 801295a:	4637      	mov	r7, r6
 801295c:	2800      	cmp	r0, #0
 801295e:	f040 8245 	bne.w	8012dec <_dtoa_r+0x954>
 8012962:	9d00      	ldr	r5, [sp, #0]
 8012964:	2331      	movs	r3, #49	; 0x31
 8012966:	f805 3b01 	strb.w	r3, [r5], #1
 801296a:	f10b 0b01 	add.w	fp, fp, #1
 801296e:	e241      	b.n	8012df4 <_dtoa_r+0x95c>
 8012970:	07f2      	lsls	r2, r6, #31
 8012972:	d505      	bpl.n	8012980 <_dtoa_r+0x4e8>
 8012974:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012978:	f7ed fe66 	bl	8000648 <__aeabi_dmul>
 801297c:	3501      	adds	r5, #1
 801297e:	2301      	movs	r3, #1
 8012980:	1076      	asrs	r6, r6, #1
 8012982:	3708      	adds	r7, #8
 8012984:	e773      	b.n	801286e <_dtoa_r+0x3d6>
 8012986:	2502      	movs	r5, #2
 8012988:	e775      	b.n	8012876 <_dtoa_r+0x3de>
 801298a:	9e04      	ldr	r6, [sp, #16]
 801298c:	465f      	mov	r7, fp
 801298e:	e792      	b.n	80128b6 <_dtoa_r+0x41e>
 8012990:	9900      	ldr	r1, [sp, #0]
 8012992:	4b50      	ldr	r3, [pc, #320]	; (8012ad4 <_dtoa_r+0x63c>)
 8012994:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012998:	4431      	add	r1, r6
 801299a:	9102      	str	r1, [sp, #8]
 801299c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801299e:	eeb0 9a47 	vmov.f32	s18, s14
 80129a2:	eef0 9a67 	vmov.f32	s19, s15
 80129a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80129aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80129ae:	2900      	cmp	r1, #0
 80129b0:	d044      	beq.n	8012a3c <_dtoa_r+0x5a4>
 80129b2:	494e      	ldr	r1, [pc, #312]	; (8012aec <_dtoa_r+0x654>)
 80129b4:	2000      	movs	r0, #0
 80129b6:	f7ed ff71 	bl	800089c <__aeabi_ddiv>
 80129ba:	ec53 2b19 	vmov	r2, r3, d9
 80129be:	f7ed fc8b 	bl	80002d8 <__aeabi_dsub>
 80129c2:	9d00      	ldr	r5, [sp, #0]
 80129c4:	ec41 0b19 	vmov	d9, r0, r1
 80129c8:	4649      	mov	r1, r9
 80129ca:	4640      	mov	r0, r8
 80129cc:	f7ee f8ec 	bl	8000ba8 <__aeabi_d2iz>
 80129d0:	4606      	mov	r6, r0
 80129d2:	f7ed fdcf 	bl	8000574 <__aeabi_i2d>
 80129d6:	4602      	mov	r2, r0
 80129d8:	460b      	mov	r3, r1
 80129da:	4640      	mov	r0, r8
 80129dc:	4649      	mov	r1, r9
 80129de:	f7ed fc7b 	bl	80002d8 <__aeabi_dsub>
 80129e2:	3630      	adds	r6, #48	; 0x30
 80129e4:	f805 6b01 	strb.w	r6, [r5], #1
 80129e8:	ec53 2b19 	vmov	r2, r3, d9
 80129ec:	4680      	mov	r8, r0
 80129ee:	4689      	mov	r9, r1
 80129f0:	f7ee f89c 	bl	8000b2c <__aeabi_dcmplt>
 80129f4:	2800      	cmp	r0, #0
 80129f6:	d164      	bne.n	8012ac2 <_dtoa_r+0x62a>
 80129f8:	4642      	mov	r2, r8
 80129fa:	464b      	mov	r3, r9
 80129fc:	4937      	ldr	r1, [pc, #220]	; (8012adc <_dtoa_r+0x644>)
 80129fe:	2000      	movs	r0, #0
 8012a00:	f7ed fc6a 	bl	80002d8 <__aeabi_dsub>
 8012a04:	ec53 2b19 	vmov	r2, r3, d9
 8012a08:	f7ee f890 	bl	8000b2c <__aeabi_dcmplt>
 8012a0c:	2800      	cmp	r0, #0
 8012a0e:	f040 80b6 	bne.w	8012b7e <_dtoa_r+0x6e6>
 8012a12:	9b02      	ldr	r3, [sp, #8]
 8012a14:	429d      	cmp	r5, r3
 8012a16:	f43f af7c 	beq.w	8012912 <_dtoa_r+0x47a>
 8012a1a:	4b31      	ldr	r3, [pc, #196]	; (8012ae0 <_dtoa_r+0x648>)
 8012a1c:	ec51 0b19 	vmov	r0, r1, d9
 8012a20:	2200      	movs	r2, #0
 8012a22:	f7ed fe11 	bl	8000648 <__aeabi_dmul>
 8012a26:	4b2e      	ldr	r3, [pc, #184]	; (8012ae0 <_dtoa_r+0x648>)
 8012a28:	ec41 0b19 	vmov	d9, r0, r1
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	4640      	mov	r0, r8
 8012a30:	4649      	mov	r1, r9
 8012a32:	f7ed fe09 	bl	8000648 <__aeabi_dmul>
 8012a36:	4680      	mov	r8, r0
 8012a38:	4689      	mov	r9, r1
 8012a3a:	e7c5      	b.n	80129c8 <_dtoa_r+0x530>
 8012a3c:	ec51 0b17 	vmov	r0, r1, d7
 8012a40:	f7ed fe02 	bl	8000648 <__aeabi_dmul>
 8012a44:	9b02      	ldr	r3, [sp, #8]
 8012a46:	9d00      	ldr	r5, [sp, #0]
 8012a48:	930f      	str	r3, [sp, #60]	; 0x3c
 8012a4a:	ec41 0b19 	vmov	d9, r0, r1
 8012a4e:	4649      	mov	r1, r9
 8012a50:	4640      	mov	r0, r8
 8012a52:	f7ee f8a9 	bl	8000ba8 <__aeabi_d2iz>
 8012a56:	4606      	mov	r6, r0
 8012a58:	f7ed fd8c 	bl	8000574 <__aeabi_i2d>
 8012a5c:	3630      	adds	r6, #48	; 0x30
 8012a5e:	4602      	mov	r2, r0
 8012a60:	460b      	mov	r3, r1
 8012a62:	4640      	mov	r0, r8
 8012a64:	4649      	mov	r1, r9
 8012a66:	f7ed fc37 	bl	80002d8 <__aeabi_dsub>
 8012a6a:	f805 6b01 	strb.w	r6, [r5], #1
 8012a6e:	9b02      	ldr	r3, [sp, #8]
 8012a70:	429d      	cmp	r5, r3
 8012a72:	4680      	mov	r8, r0
 8012a74:	4689      	mov	r9, r1
 8012a76:	f04f 0200 	mov.w	r2, #0
 8012a7a:	d124      	bne.n	8012ac6 <_dtoa_r+0x62e>
 8012a7c:	4b1b      	ldr	r3, [pc, #108]	; (8012aec <_dtoa_r+0x654>)
 8012a7e:	ec51 0b19 	vmov	r0, r1, d9
 8012a82:	f7ed fc2b 	bl	80002dc <__adddf3>
 8012a86:	4602      	mov	r2, r0
 8012a88:	460b      	mov	r3, r1
 8012a8a:	4640      	mov	r0, r8
 8012a8c:	4649      	mov	r1, r9
 8012a8e:	f7ee f86b 	bl	8000b68 <__aeabi_dcmpgt>
 8012a92:	2800      	cmp	r0, #0
 8012a94:	d173      	bne.n	8012b7e <_dtoa_r+0x6e6>
 8012a96:	ec53 2b19 	vmov	r2, r3, d9
 8012a9a:	4914      	ldr	r1, [pc, #80]	; (8012aec <_dtoa_r+0x654>)
 8012a9c:	2000      	movs	r0, #0
 8012a9e:	f7ed fc1b 	bl	80002d8 <__aeabi_dsub>
 8012aa2:	4602      	mov	r2, r0
 8012aa4:	460b      	mov	r3, r1
 8012aa6:	4640      	mov	r0, r8
 8012aa8:	4649      	mov	r1, r9
 8012aaa:	f7ee f83f 	bl	8000b2c <__aeabi_dcmplt>
 8012aae:	2800      	cmp	r0, #0
 8012ab0:	f43f af2f 	beq.w	8012912 <_dtoa_r+0x47a>
 8012ab4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012ab6:	1e6b      	subs	r3, r5, #1
 8012ab8:	930f      	str	r3, [sp, #60]	; 0x3c
 8012aba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012abe:	2b30      	cmp	r3, #48	; 0x30
 8012ac0:	d0f8      	beq.n	8012ab4 <_dtoa_r+0x61c>
 8012ac2:	46bb      	mov	fp, r7
 8012ac4:	e04a      	b.n	8012b5c <_dtoa_r+0x6c4>
 8012ac6:	4b06      	ldr	r3, [pc, #24]	; (8012ae0 <_dtoa_r+0x648>)
 8012ac8:	f7ed fdbe 	bl	8000648 <__aeabi_dmul>
 8012acc:	4680      	mov	r8, r0
 8012ace:	4689      	mov	r9, r1
 8012ad0:	e7bd      	b.n	8012a4e <_dtoa_r+0x5b6>
 8012ad2:	bf00      	nop
 8012ad4:	080152f8 	.word	0x080152f8
 8012ad8:	080152d0 	.word	0x080152d0
 8012adc:	3ff00000 	.word	0x3ff00000
 8012ae0:	40240000 	.word	0x40240000
 8012ae4:	401c0000 	.word	0x401c0000
 8012ae8:	40140000 	.word	0x40140000
 8012aec:	3fe00000 	.word	0x3fe00000
 8012af0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012af4:	9d00      	ldr	r5, [sp, #0]
 8012af6:	4642      	mov	r2, r8
 8012af8:	464b      	mov	r3, r9
 8012afa:	4630      	mov	r0, r6
 8012afc:	4639      	mov	r1, r7
 8012afe:	f7ed fecd 	bl	800089c <__aeabi_ddiv>
 8012b02:	f7ee f851 	bl	8000ba8 <__aeabi_d2iz>
 8012b06:	9001      	str	r0, [sp, #4]
 8012b08:	f7ed fd34 	bl	8000574 <__aeabi_i2d>
 8012b0c:	4642      	mov	r2, r8
 8012b0e:	464b      	mov	r3, r9
 8012b10:	f7ed fd9a 	bl	8000648 <__aeabi_dmul>
 8012b14:	4602      	mov	r2, r0
 8012b16:	460b      	mov	r3, r1
 8012b18:	4630      	mov	r0, r6
 8012b1a:	4639      	mov	r1, r7
 8012b1c:	f7ed fbdc 	bl	80002d8 <__aeabi_dsub>
 8012b20:	9e01      	ldr	r6, [sp, #4]
 8012b22:	9f04      	ldr	r7, [sp, #16]
 8012b24:	3630      	adds	r6, #48	; 0x30
 8012b26:	f805 6b01 	strb.w	r6, [r5], #1
 8012b2a:	9e00      	ldr	r6, [sp, #0]
 8012b2c:	1bae      	subs	r6, r5, r6
 8012b2e:	42b7      	cmp	r7, r6
 8012b30:	4602      	mov	r2, r0
 8012b32:	460b      	mov	r3, r1
 8012b34:	d134      	bne.n	8012ba0 <_dtoa_r+0x708>
 8012b36:	f7ed fbd1 	bl	80002dc <__adddf3>
 8012b3a:	4642      	mov	r2, r8
 8012b3c:	464b      	mov	r3, r9
 8012b3e:	4606      	mov	r6, r0
 8012b40:	460f      	mov	r7, r1
 8012b42:	f7ee f811 	bl	8000b68 <__aeabi_dcmpgt>
 8012b46:	b9c8      	cbnz	r0, 8012b7c <_dtoa_r+0x6e4>
 8012b48:	4642      	mov	r2, r8
 8012b4a:	464b      	mov	r3, r9
 8012b4c:	4630      	mov	r0, r6
 8012b4e:	4639      	mov	r1, r7
 8012b50:	f7ed ffe2 	bl	8000b18 <__aeabi_dcmpeq>
 8012b54:	b110      	cbz	r0, 8012b5c <_dtoa_r+0x6c4>
 8012b56:	9b01      	ldr	r3, [sp, #4]
 8012b58:	07db      	lsls	r3, r3, #31
 8012b5a:	d40f      	bmi.n	8012b7c <_dtoa_r+0x6e4>
 8012b5c:	4651      	mov	r1, sl
 8012b5e:	4620      	mov	r0, r4
 8012b60:	f000 fbcc 	bl	80132fc <_Bfree>
 8012b64:	2300      	movs	r3, #0
 8012b66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012b68:	702b      	strb	r3, [r5, #0]
 8012b6a:	f10b 0301 	add.w	r3, fp, #1
 8012b6e:	6013      	str	r3, [r2, #0]
 8012b70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	f43f ace2 	beq.w	801253c <_dtoa_r+0xa4>
 8012b78:	601d      	str	r5, [r3, #0]
 8012b7a:	e4df      	b.n	801253c <_dtoa_r+0xa4>
 8012b7c:	465f      	mov	r7, fp
 8012b7e:	462b      	mov	r3, r5
 8012b80:	461d      	mov	r5, r3
 8012b82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b86:	2a39      	cmp	r2, #57	; 0x39
 8012b88:	d106      	bne.n	8012b98 <_dtoa_r+0x700>
 8012b8a:	9a00      	ldr	r2, [sp, #0]
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	d1f7      	bne.n	8012b80 <_dtoa_r+0x6e8>
 8012b90:	9900      	ldr	r1, [sp, #0]
 8012b92:	2230      	movs	r2, #48	; 0x30
 8012b94:	3701      	adds	r7, #1
 8012b96:	700a      	strb	r2, [r1, #0]
 8012b98:	781a      	ldrb	r2, [r3, #0]
 8012b9a:	3201      	adds	r2, #1
 8012b9c:	701a      	strb	r2, [r3, #0]
 8012b9e:	e790      	b.n	8012ac2 <_dtoa_r+0x62a>
 8012ba0:	4ba3      	ldr	r3, [pc, #652]	; (8012e30 <_dtoa_r+0x998>)
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	f7ed fd50 	bl	8000648 <__aeabi_dmul>
 8012ba8:	2200      	movs	r2, #0
 8012baa:	2300      	movs	r3, #0
 8012bac:	4606      	mov	r6, r0
 8012bae:	460f      	mov	r7, r1
 8012bb0:	f7ed ffb2 	bl	8000b18 <__aeabi_dcmpeq>
 8012bb4:	2800      	cmp	r0, #0
 8012bb6:	d09e      	beq.n	8012af6 <_dtoa_r+0x65e>
 8012bb8:	e7d0      	b.n	8012b5c <_dtoa_r+0x6c4>
 8012bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012bbc:	2a00      	cmp	r2, #0
 8012bbe:	f000 80ca 	beq.w	8012d56 <_dtoa_r+0x8be>
 8012bc2:	9a07      	ldr	r2, [sp, #28]
 8012bc4:	2a01      	cmp	r2, #1
 8012bc6:	f300 80ad 	bgt.w	8012d24 <_dtoa_r+0x88c>
 8012bca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012bcc:	2a00      	cmp	r2, #0
 8012bce:	f000 80a5 	beq.w	8012d1c <_dtoa_r+0x884>
 8012bd2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012bd6:	9e08      	ldr	r6, [sp, #32]
 8012bd8:	9d05      	ldr	r5, [sp, #20]
 8012bda:	9a05      	ldr	r2, [sp, #20]
 8012bdc:	441a      	add	r2, r3
 8012bde:	9205      	str	r2, [sp, #20]
 8012be0:	9a06      	ldr	r2, [sp, #24]
 8012be2:	2101      	movs	r1, #1
 8012be4:	441a      	add	r2, r3
 8012be6:	4620      	mov	r0, r4
 8012be8:	9206      	str	r2, [sp, #24]
 8012bea:	f000 fc3d 	bl	8013468 <__i2b>
 8012bee:	4607      	mov	r7, r0
 8012bf0:	b165      	cbz	r5, 8012c0c <_dtoa_r+0x774>
 8012bf2:	9b06      	ldr	r3, [sp, #24]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	dd09      	ble.n	8012c0c <_dtoa_r+0x774>
 8012bf8:	42ab      	cmp	r3, r5
 8012bfa:	9a05      	ldr	r2, [sp, #20]
 8012bfc:	bfa8      	it	ge
 8012bfe:	462b      	movge	r3, r5
 8012c00:	1ad2      	subs	r2, r2, r3
 8012c02:	9205      	str	r2, [sp, #20]
 8012c04:	9a06      	ldr	r2, [sp, #24]
 8012c06:	1aed      	subs	r5, r5, r3
 8012c08:	1ad3      	subs	r3, r2, r3
 8012c0a:	9306      	str	r3, [sp, #24]
 8012c0c:	9b08      	ldr	r3, [sp, #32]
 8012c0e:	b1f3      	cbz	r3, 8012c4e <_dtoa_r+0x7b6>
 8012c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	f000 80a3 	beq.w	8012d5e <_dtoa_r+0x8c6>
 8012c18:	2e00      	cmp	r6, #0
 8012c1a:	dd10      	ble.n	8012c3e <_dtoa_r+0x7a6>
 8012c1c:	4639      	mov	r1, r7
 8012c1e:	4632      	mov	r2, r6
 8012c20:	4620      	mov	r0, r4
 8012c22:	f000 fce1 	bl	80135e8 <__pow5mult>
 8012c26:	4652      	mov	r2, sl
 8012c28:	4601      	mov	r1, r0
 8012c2a:	4607      	mov	r7, r0
 8012c2c:	4620      	mov	r0, r4
 8012c2e:	f000 fc31 	bl	8013494 <__multiply>
 8012c32:	4651      	mov	r1, sl
 8012c34:	4680      	mov	r8, r0
 8012c36:	4620      	mov	r0, r4
 8012c38:	f000 fb60 	bl	80132fc <_Bfree>
 8012c3c:	46c2      	mov	sl, r8
 8012c3e:	9b08      	ldr	r3, [sp, #32]
 8012c40:	1b9a      	subs	r2, r3, r6
 8012c42:	d004      	beq.n	8012c4e <_dtoa_r+0x7b6>
 8012c44:	4651      	mov	r1, sl
 8012c46:	4620      	mov	r0, r4
 8012c48:	f000 fcce 	bl	80135e8 <__pow5mult>
 8012c4c:	4682      	mov	sl, r0
 8012c4e:	2101      	movs	r1, #1
 8012c50:	4620      	mov	r0, r4
 8012c52:	f000 fc09 	bl	8013468 <__i2b>
 8012c56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	4606      	mov	r6, r0
 8012c5c:	f340 8081 	ble.w	8012d62 <_dtoa_r+0x8ca>
 8012c60:	461a      	mov	r2, r3
 8012c62:	4601      	mov	r1, r0
 8012c64:	4620      	mov	r0, r4
 8012c66:	f000 fcbf 	bl	80135e8 <__pow5mult>
 8012c6a:	9b07      	ldr	r3, [sp, #28]
 8012c6c:	2b01      	cmp	r3, #1
 8012c6e:	4606      	mov	r6, r0
 8012c70:	dd7a      	ble.n	8012d68 <_dtoa_r+0x8d0>
 8012c72:	f04f 0800 	mov.w	r8, #0
 8012c76:	6933      	ldr	r3, [r6, #16]
 8012c78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012c7c:	6918      	ldr	r0, [r3, #16]
 8012c7e:	f000 fba5 	bl	80133cc <__hi0bits>
 8012c82:	f1c0 0020 	rsb	r0, r0, #32
 8012c86:	9b06      	ldr	r3, [sp, #24]
 8012c88:	4418      	add	r0, r3
 8012c8a:	f010 001f 	ands.w	r0, r0, #31
 8012c8e:	f000 8094 	beq.w	8012dba <_dtoa_r+0x922>
 8012c92:	f1c0 0320 	rsb	r3, r0, #32
 8012c96:	2b04      	cmp	r3, #4
 8012c98:	f340 8085 	ble.w	8012da6 <_dtoa_r+0x90e>
 8012c9c:	9b05      	ldr	r3, [sp, #20]
 8012c9e:	f1c0 001c 	rsb	r0, r0, #28
 8012ca2:	4403      	add	r3, r0
 8012ca4:	9305      	str	r3, [sp, #20]
 8012ca6:	9b06      	ldr	r3, [sp, #24]
 8012ca8:	4403      	add	r3, r0
 8012caa:	4405      	add	r5, r0
 8012cac:	9306      	str	r3, [sp, #24]
 8012cae:	9b05      	ldr	r3, [sp, #20]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	dd05      	ble.n	8012cc0 <_dtoa_r+0x828>
 8012cb4:	4651      	mov	r1, sl
 8012cb6:	461a      	mov	r2, r3
 8012cb8:	4620      	mov	r0, r4
 8012cba:	f000 fcef 	bl	801369c <__lshift>
 8012cbe:	4682      	mov	sl, r0
 8012cc0:	9b06      	ldr	r3, [sp, #24]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	dd05      	ble.n	8012cd2 <_dtoa_r+0x83a>
 8012cc6:	4631      	mov	r1, r6
 8012cc8:	461a      	mov	r2, r3
 8012cca:	4620      	mov	r0, r4
 8012ccc:	f000 fce6 	bl	801369c <__lshift>
 8012cd0:	4606      	mov	r6, r0
 8012cd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d072      	beq.n	8012dbe <_dtoa_r+0x926>
 8012cd8:	4631      	mov	r1, r6
 8012cda:	4650      	mov	r0, sl
 8012cdc:	f000 fd4a 	bl	8013774 <__mcmp>
 8012ce0:	2800      	cmp	r0, #0
 8012ce2:	da6c      	bge.n	8012dbe <_dtoa_r+0x926>
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	4651      	mov	r1, sl
 8012ce8:	220a      	movs	r2, #10
 8012cea:	4620      	mov	r0, r4
 8012cec:	f000 fb28 	bl	8013340 <__multadd>
 8012cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cf2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012cf6:	4682      	mov	sl, r0
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	f000 81b0 	beq.w	801305e <_dtoa_r+0xbc6>
 8012cfe:	2300      	movs	r3, #0
 8012d00:	4639      	mov	r1, r7
 8012d02:	220a      	movs	r2, #10
 8012d04:	4620      	mov	r0, r4
 8012d06:	f000 fb1b 	bl	8013340 <__multadd>
 8012d0a:	9b01      	ldr	r3, [sp, #4]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	4607      	mov	r7, r0
 8012d10:	f300 8096 	bgt.w	8012e40 <_dtoa_r+0x9a8>
 8012d14:	9b07      	ldr	r3, [sp, #28]
 8012d16:	2b02      	cmp	r3, #2
 8012d18:	dc59      	bgt.n	8012dce <_dtoa_r+0x936>
 8012d1a:	e091      	b.n	8012e40 <_dtoa_r+0x9a8>
 8012d1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012d1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012d22:	e758      	b.n	8012bd6 <_dtoa_r+0x73e>
 8012d24:	9b04      	ldr	r3, [sp, #16]
 8012d26:	1e5e      	subs	r6, r3, #1
 8012d28:	9b08      	ldr	r3, [sp, #32]
 8012d2a:	42b3      	cmp	r3, r6
 8012d2c:	bfbf      	itttt	lt
 8012d2e:	9b08      	ldrlt	r3, [sp, #32]
 8012d30:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8012d32:	9608      	strlt	r6, [sp, #32]
 8012d34:	1af3      	sublt	r3, r6, r3
 8012d36:	bfb4      	ite	lt
 8012d38:	18d2      	addlt	r2, r2, r3
 8012d3a:	1b9e      	subge	r6, r3, r6
 8012d3c:	9b04      	ldr	r3, [sp, #16]
 8012d3e:	bfbc      	itt	lt
 8012d40:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8012d42:	2600      	movlt	r6, #0
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	bfb7      	itett	lt
 8012d48:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8012d4c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012d50:	1a9d      	sublt	r5, r3, r2
 8012d52:	2300      	movlt	r3, #0
 8012d54:	e741      	b.n	8012bda <_dtoa_r+0x742>
 8012d56:	9e08      	ldr	r6, [sp, #32]
 8012d58:	9d05      	ldr	r5, [sp, #20]
 8012d5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012d5c:	e748      	b.n	8012bf0 <_dtoa_r+0x758>
 8012d5e:	9a08      	ldr	r2, [sp, #32]
 8012d60:	e770      	b.n	8012c44 <_dtoa_r+0x7ac>
 8012d62:	9b07      	ldr	r3, [sp, #28]
 8012d64:	2b01      	cmp	r3, #1
 8012d66:	dc19      	bgt.n	8012d9c <_dtoa_r+0x904>
 8012d68:	9b02      	ldr	r3, [sp, #8]
 8012d6a:	b9bb      	cbnz	r3, 8012d9c <_dtoa_r+0x904>
 8012d6c:	9b03      	ldr	r3, [sp, #12]
 8012d6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012d72:	b99b      	cbnz	r3, 8012d9c <_dtoa_r+0x904>
 8012d74:	9b03      	ldr	r3, [sp, #12]
 8012d76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012d7a:	0d1b      	lsrs	r3, r3, #20
 8012d7c:	051b      	lsls	r3, r3, #20
 8012d7e:	b183      	cbz	r3, 8012da2 <_dtoa_r+0x90a>
 8012d80:	9b05      	ldr	r3, [sp, #20]
 8012d82:	3301      	adds	r3, #1
 8012d84:	9305      	str	r3, [sp, #20]
 8012d86:	9b06      	ldr	r3, [sp, #24]
 8012d88:	3301      	adds	r3, #1
 8012d8a:	9306      	str	r3, [sp, #24]
 8012d8c:	f04f 0801 	mov.w	r8, #1
 8012d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	f47f af6f 	bne.w	8012c76 <_dtoa_r+0x7de>
 8012d98:	2001      	movs	r0, #1
 8012d9a:	e774      	b.n	8012c86 <_dtoa_r+0x7ee>
 8012d9c:	f04f 0800 	mov.w	r8, #0
 8012da0:	e7f6      	b.n	8012d90 <_dtoa_r+0x8f8>
 8012da2:	4698      	mov	r8, r3
 8012da4:	e7f4      	b.n	8012d90 <_dtoa_r+0x8f8>
 8012da6:	d082      	beq.n	8012cae <_dtoa_r+0x816>
 8012da8:	9a05      	ldr	r2, [sp, #20]
 8012daa:	331c      	adds	r3, #28
 8012dac:	441a      	add	r2, r3
 8012dae:	9205      	str	r2, [sp, #20]
 8012db0:	9a06      	ldr	r2, [sp, #24]
 8012db2:	441a      	add	r2, r3
 8012db4:	441d      	add	r5, r3
 8012db6:	9206      	str	r2, [sp, #24]
 8012db8:	e779      	b.n	8012cae <_dtoa_r+0x816>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	e7f4      	b.n	8012da8 <_dtoa_r+0x910>
 8012dbe:	9b04      	ldr	r3, [sp, #16]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	dc37      	bgt.n	8012e34 <_dtoa_r+0x99c>
 8012dc4:	9b07      	ldr	r3, [sp, #28]
 8012dc6:	2b02      	cmp	r3, #2
 8012dc8:	dd34      	ble.n	8012e34 <_dtoa_r+0x99c>
 8012dca:	9b04      	ldr	r3, [sp, #16]
 8012dcc:	9301      	str	r3, [sp, #4]
 8012dce:	9b01      	ldr	r3, [sp, #4]
 8012dd0:	b963      	cbnz	r3, 8012dec <_dtoa_r+0x954>
 8012dd2:	4631      	mov	r1, r6
 8012dd4:	2205      	movs	r2, #5
 8012dd6:	4620      	mov	r0, r4
 8012dd8:	f000 fab2 	bl	8013340 <__multadd>
 8012ddc:	4601      	mov	r1, r0
 8012dde:	4606      	mov	r6, r0
 8012de0:	4650      	mov	r0, sl
 8012de2:	f000 fcc7 	bl	8013774 <__mcmp>
 8012de6:	2800      	cmp	r0, #0
 8012de8:	f73f adbb 	bgt.w	8012962 <_dtoa_r+0x4ca>
 8012dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dee:	9d00      	ldr	r5, [sp, #0]
 8012df0:	ea6f 0b03 	mvn.w	fp, r3
 8012df4:	f04f 0800 	mov.w	r8, #0
 8012df8:	4631      	mov	r1, r6
 8012dfa:	4620      	mov	r0, r4
 8012dfc:	f000 fa7e 	bl	80132fc <_Bfree>
 8012e00:	2f00      	cmp	r7, #0
 8012e02:	f43f aeab 	beq.w	8012b5c <_dtoa_r+0x6c4>
 8012e06:	f1b8 0f00 	cmp.w	r8, #0
 8012e0a:	d005      	beq.n	8012e18 <_dtoa_r+0x980>
 8012e0c:	45b8      	cmp	r8, r7
 8012e0e:	d003      	beq.n	8012e18 <_dtoa_r+0x980>
 8012e10:	4641      	mov	r1, r8
 8012e12:	4620      	mov	r0, r4
 8012e14:	f000 fa72 	bl	80132fc <_Bfree>
 8012e18:	4639      	mov	r1, r7
 8012e1a:	4620      	mov	r0, r4
 8012e1c:	f000 fa6e 	bl	80132fc <_Bfree>
 8012e20:	e69c      	b.n	8012b5c <_dtoa_r+0x6c4>
 8012e22:	2600      	movs	r6, #0
 8012e24:	4637      	mov	r7, r6
 8012e26:	e7e1      	b.n	8012dec <_dtoa_r+0x954>
 8012e28:	46bb      	mov	fp, r7
 8012e2a:	4637      	mov	r7, r6
 8012e2c:	e599      	b.n	8012962 <_dtoa_r+0x4ca>
 8012e2e:	bf00      	nop
 8012e30:	40240000 	.word	0x40240000
 8012e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	f000 80c8 	beq.w	8012fcc <_dtoa_r+0xb34>
 8012e3c:	9b04      	ldr	r3, [sp, #16]
 8012e3e:	9301      	str	r3, [sp, #4]
 8012e40:	2d00      	cmp	r5, #0
 8012e42:	dd05      	ble.n	8012e50 <_dtoa_r+0x9b8>
 8012e44:	4639      	mov	r1, r7
 8012e46:	462a      	mov	r2, r5
 8012e48:	4620      	mov	r0, r4
 8012e4a:	f000 fc27 	bl	801369c <__lshift>
 8012e4e:	4607      	mov	r7, r0
 8012e50:	f1b8 0f00 	cmp.w	r8, #0
 8012e54:	d05b      	beq.n	8012f0e <_dtoa_r+0xa76>
 8012e56:	6879      	ldr	r1, [r7, #4]
 8012e58:	4620      	mov	r0, r4
 8012e5a:	f000 fa0f 	bl	801327c <_Balloc>
 8012e5e:	4605      	mov	r5, r0
 8012e60:	b928      	cbnz	r0, 8012e6e <_dtoa_r+0x9d6>
 8012e62:	4b83      	ldr	r3, [pc, #524]	; (8013070 <_dtoa_r+0xbd8>)
 8012e64:	4602      	mov	r2, r0
 8012e66:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012e6a:	f7ff bb2e 	b.w	80124ca <_dtoa_r+0x32>
 8012e6e:	693a      	ldr	r2, [r7, #16]
 8012e70:	3202      	adds	r2, #2
 8012e72:	0092      	lsls	r2, r2, #2
 8012e74:	f107 010c 	add.w	r1, r7, #12
 8012e78:	300c      	adds	r0, #12
 8012e7a:	f7ff fa76 	bl	801236a <memcpy>
 8012e7e:	2201      	movs	r2, #1
 8012e80:	4629      	mov	r1, r5
 8012e82:	4620      	mov	r0, r4
 8012e84:	f000 fc0a 	bl	801369c <__lshift>
 8012e88:	9b00      	ldr	r3, [sp, #0]
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	9304      	str	r3, [sp, #16]
 8012e8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e92:	4413      	add	r3, r2
 8012e94:	9308      	str	r3, [sp, #32]
 8012e96:	9b02      	ldr	r3, [sp, #8]
 8012e98:	f003 0301 	and.w	r3, r3, #1
 8012e9c:	46b8      	mov	r8, r7
 8012e9e:	9306      	str	r3, [sp, #24]
 8012ea0:	4607      	mov	r7, r0
 8012ea2:	9b04      	ldr	r3, [sp, #16]
 8012ea4:	4631      	mov	r1, r6
 8012ea6:	3b01      	subs	r3, #1
 8012ea8:	4650      	mov	r0, sl
 8012eaa:	9301      	str	r3, [sp, #4]
 8012eac:	f7ff fa6b 	bl	8012386 <quorem>
 8012eb0:	4641      	mov	r1, r8
 8012eb2:	9002      	str	r0, [sp, #8]
 8012eb4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012eb8:	4650      	mov	r0, sl
 8012eba:	f000 fc5b 	bl	8013774 <__mcmp>
 8012ebe:	463a      	mov	r2, r7
 8012ec0:	9005      	str	r0, [sp, #20]
 8012ec2:	4631      	mov	r1, r6
 8012ec4:	4620      	mov	r0, r4
 8012ec6:	f000 fc71 	bl	80137ac <__mdiff>
 8012eca:	68c2      	ldr	r2, [r0, #12]
 8012ecc:	4605      	mov	r5, r0
 8012ece:	bb02      	cbnz	r2, 8012f12 <_dtoa_r+0xa7a>
 8012ed0:	4601      	mov	r1, r0
 8012ed2:	4650      	mov	r0, sl
 8012ed4:	f000 fc4e 	bl	8013774 <__mcmp>
 8012ed8:	4602      	mov	r2, r0
 8012eda:	4629      	mov	r1, r5
 8012edc:	4620      	mov	r0, r4
 8012ede:	9209      	str	r2, [sp, #36]	; 0x24
 8012ee0:	f000 fa0c 	bl	80132fc <_Bfree>
 8012ee4:	9b07      	ldr	r3, [sp, #28]
 8012ee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012ee8:	9d04      	ldr	r5, [sp, #16]
 8012eea:	ea43 0102 	orr.w	r1, r3, r2
 8012eee:	9b06      	ldr	r3, [sp, #24]
 8012ef0:	4319      	orrs	r1, r3
 8012ef2:	d110      	bne.n	8012f16 <_dtoa_r+0xa7e>
 8012ef4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012ef8:	d029      	beq.n	8012f4e <_dtoa_r+0xab6>
 8012efa:	9b05      	ldr	r3, [sp, #20]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	dd02      	ble.n	8012f06 <_dtoa_r+0xa6e>
 8012f00:	9b02      	ldr	r3, [sp, #8]
 8012f02:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8012f06:	9b01      	ldr	r3, [sp, #4]
 8012f08:	f883 9000 	strb.w	r9, [r3]
 8012f0c:	e774      	b.n	8012df8 <_dtoa_r+0x960>
 8012f0e:	4638      	mov	r0, r7
 8012f10:	e7ba      	b.n	8012e88 <_dtoa_r+0x9f0>
 8012f12:	2201      	movs	r2, #1
 8012f14:	e7e1      	b.n	8012eda <_dtoa_r+0xa42>
 8012f16:	9b05      	ldr	r3, [sp, #20]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	db04      	blt.n	8012f26 <_dtoa_r+0xa8e>
 8012f1c:	9907      	ldr	r1, [sp, #28]
 8012f1e:	430b      	orrs	r3, r1
 8012f20:	9906      	ldr	r1, [sp, #24]
 8012f22:	430b      	orrs	r3, r1
 8012f24:	d120      	bne.n	8012f68 <_dtoa_r+0xad0>
 8012f26:	2a00      	cmp	r2, #0
 8012f28:	dded      	ble.n	8012f06 <_dtoa_r+0xa6e>
 8012f2a:	4651      	mov	r1, sl
 8012f2c:	2201      	movs	r2, #1
 8012f2e:	4620      	mov	r0, r4
 8012f30:	f000 fbb4 	bl	801369c <__lshift>
 8012f34:	4631      	mov	r1, r6
 8012f36:	4682      	mov	sl, r0
 8012f38:	f000 fc1c 	bl	8013774 <__mcmp>
 8012f3c:	2800      	cmp	r0, #0
 8012f3e:	dc03      	bgt.n	8012f48 <_dtoa_r+0xab0>
 8012f40:	d1e1      	bne.n	8012f06 <_dtoa_r+0xa6e>
 8012f42:	f019 0f01 	tst.w	r9, #1
 8012f46:	d0de      	beq.n	8012f06 <_dtoa_r+0xa6e>
 8012f48:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012f4c:	d1d8      	bne.n	8012f00 <_dtoa_r+0xa68>
 8012f4e:	9a01      	ldr	r2, [sp, #4]
 8012f50:	2339      	movs	r3, #57	; 0x39
 8012f52:	7013      	strb	r3, [r2, #0]
 8012f54:	462b      	mov	r3, r5
 8012f56:	461d      	mov	r5, r3
 8012f58:	3b01      	subs	r3, #1
 8012f5a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012f5e:	2a39      	cmp	r2, #57	; 0x39
 8012f60:	d06c      	beq.n	801303c <_dtoa_r+0xba4>
 8012f62:	3201      	adds	r2, #1
 8012f64:	701a      	strb	r2, [r3, #0]
 8012f66:	e747      	b.n	8012df8 <_dtoa_r+0x960>
 8012f68:	2a00      	cmp	r2, #0
 8012f6a:	dd07      	ble.n	8012f7c <_dtoa_r+0xae4>
 8012f6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012f70:	d0ed      	beq.n	8012f4e <_dtoa_r+0xab6>
 8012f72:	9a01      	ldr	r2, [sp, #4]
 8012f74:	f109 0301 	add.w	r3, r9, #1
 8012f78:	7013      	strb	r3, [r2, #0]
 8012f7a:	e73d      	b.n	8012df8 <_dtoa_r+0x960>
 8012f7c:	9b04      	ldr	r3, [sp, #16]
 8012f7e:	9a08      	ldr	r2, [sp, #32]
 8012f80:	f803 9c01 	strb.w	r9, [r3, #-1]
 8012f84:	4293      	cmp	r3, r2
 8012f86:	d043      	beq.n	8013010 <_dtoa_r+0xb78>
 8012f88:	4651      	mov	r1, sl
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	220a      	movs	r2, #10
 8012f8e:	4620      	mov	r0, r4
 8012f90:	f000 f9d6 	bl	8013340 <__multadd>
 8012f94:	45b8      	cmp	r8, r7
 8012f96:	4682      	mov	sl, r0
 8012f98:	f04f 0300 	mov.w	r3, #0
 8012f9c:	f04f 020a 	mov.w	r2, #10
 8012fa0:	4641      	mov	r1, r8
 8012fa2:	4620      	mov	r0, r4
 8012fa4:	d107      	bne.n	8012fb6 <_dtoa_r+0xb1e>
 8012fa6:	f000 f9cb 	bl	8013340 <__multadd>
 8012faa:	4680      	mov	r8, r0
 8012fac:	4607      	mov	r7, r0
 8012fae:	9b04      	ldr	r3, [sp, #16]
 8012fb0:	3301      	adds	r3, #1
 8012fb2:	9304      	str	r3, [sp, #16]
 8012fb4:	e775      	b.n	8012ea2 <_dtoa_r+0xa0a>
 8012fb6:	f000 f9c3 	bl	8013340 <__multadd>
 8012fba:	4639      	mov	r1, r7
 8012fbc:	4680      	mov	r8, r0
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	220a      	movs	r2, #10
 8012fc2:	4620      	mov	r0, r4
 8012fc4:	f000 f9bc 	bl	8013340 <__multadd>
 8012fc8:	4607      	mov	r7, r0
 8012fca:	e7f0      	b.n	8012fae <_dtoa_r+0xb16>
 8012fcc:	9b04      	ldr	r3, [sp, #16]
 8012fce:	9301      	str	r3, [sp, #4]
 8012fd0:	9d00      	ldr	r5, [sp, #0]
 8012fd2:	4631      	mov	r1, r6
 8012fd4:	4650      	mov	r0, sl
 8012fd6:	f7ff f9d6 	bl	8012386 <quorem>
 8012fda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012fde:	9b00      	ldr	r3, [sp, #0]
 8012fe0:	f805 9b01 	strb.w	r9, [r5], #1
 8012fe4:	1aea      	subs	r2, r5, r3
 8012fe6:	9b01      	ldr	r3, [sp, #4]
 8012fe8:	4293      	cmp	r3, r2
 8012fea:	dd07      	ble.n	8012ffc <_dtoa_r+0xb64>
 8012fec:	4651      	mov	r1, sl
 8012fee:	2300      	movs	r3, #0
 8012ff0:	220a      	movs	r2, #10
 8012ff2:	4620      	mov	r0, r4
 8012ff4:	f000 f9a4 	bl	8013340 <__multadd>
 8012ff8:	4682      	mov	sl, r0
 8012ffa:	e7ea      	b.n	8012fd2 <_dtoa_r+0xb3a>
 8012ffc:	9b01      	ldr	r3, [sp, #4]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	bfc8      	it	gt
 8013002:	461d      	movgt	r5, r3
 8013004:	9b00      	ldr	r3, [sp, #0]
 8013006:	bfd8      	it	le
 8013008:	2501      	movle	r5, #1
 801300a:	441d      	add	r5, r3
 801300c:	f04f 0800 	mov.w	r8, #0
 8013010:	4651      	mov	r1, sl
 8013012:	2201      	movs	r2, #1
 8013014:	4620      	mov	r0, r4
 8013016:	f000 fb41 	bl	801369c <__lshift>
 801301a:	4631      	mov	r1, r6
 801301c:	4682      	mov	sl, r0
 801301e:	f000 fba9 	bl	8013774 <__mcmp>
 8013022:	2800      	cmp	r0, #0
 8013024:	dc96      	bgt.n	8012f54 <_dtoa_r+0xabc>
 8013026:	d102      	bne.n	801302e <_dtoa_r+0xb96>
 8013028:	f019 0f01 	tst.w	r9, #1
 801302c:	d192      	bne.n	8012f54 <_dtoa_r+0xabc>
 801302e:	462b      	mov	r3, r5
 8013030:	461d      	mov	r5, r3
 8013032:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013036:	2a30      	cmp	r2, #48	; 0x30
 8013038:	d0fa      	beq.n	8013030 <_dtoa_r+0xb98>
 801303a:	e6dd      	b.n	8012df8 <_dtoa_r+0x960>
 801303c:	9a00      	ldr	r2, [sp, #0]
 801303e:	429a      	cmp	r2, r3
 8013040:	d189      	bne.n	8012f56 <_dtoa_r+0xabe>
 8013042:	f10b 0b01 	add.w	fp, fp, #1
 8013046:	2331      	movs	r3, #49	; 0x31
 8013048:	e796      	b.n	8012f78 <_dtoa_r+0xae0>
 801304a:	4b0a      	ldr	r3, [pc, #40]	; (8013074 <_dtoa_r+0xbdc>)
 801304c:	f7ff ba99 	b.w	8012582 <_dtoa_r+0xea>
 8013050:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013052:	2b00      	cmp	r3, #0
 8013054:	f47f aa6d 	bne.w	8012532 <_dtoa_r+0x9a>
 8013058:	4b07      	ldr	r3, [pc, #28]	; (8013078 <_dtoa_r+0xbe0>)
 801305a:	f7ff ba92 	b.w	8012582 <_dtoa_r+0xea>
 801305e:	9b01      	ldr	r3, [sp, #4]
 8013060:	2b00      	cmp	r3, #0
 8013062:	dcb5      	bgt.n	8012fd0 <_dtoa_r+0xb38>
 8013064:	9b07      	ldr	r3, [sp, #28]
 8013066:	2b02      	cmp	r3, #2
 8013068:	f73f aeb1 	bgt.w	8012dce <_dtoa_r+0x936>
 801306c:	e7b0      	b.n	8012fd0 <_dtoa_r+0xb38>
 801306e:	bf00      	nop
 8013070:	08015260 	.word	0x08015260
 8013074:	080151c0 	.word	0x080151c0
 8013078:	080151e4 	.word	0x080151e4

0801307c <_free_r>:
 801307c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801307e:	2900      	cmp	r1, #0
 8013080:	d044      	beq.n	801310c <_free_r+0x90>
 8013082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013086:	9001      	str	r0, [sp, #4]
 8013088:	2b00      	cmp	r3, #0
 801308a:	f1a1 0404 	sub.w	r4, r1, #4
 801308e:	bfb8      	it	lt
 8013090:	18e4      	addlt	r4, r4, r3
 8013092:	f000 f8e7 	bl	8013264 <__malloc_lock>
 8013096:	4a1e      	ldr	r2, [pc, #120]	; (8013110 <_free_r+0x94>)
 8013098:	9801      	ldr	r0, [sp, #4]
 801309a:	6813      	ldr	r3, [r2, #0]
 801309c:	b933      	cbnz	r3, 80130ac <_free_r+0x30>
 801309e:	6063      	str	r3, [r4, #4]
 80130a0:	6014      	str	r4, [r2, #0]
 80130a2:	b003      	add	sp, #12
 80130a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80130a8:	f000 b8e2 	b.w	8013270 <__malloc_unlock>
 80130ac:	42a3      	cmp	r3, r4
 80130ae:	d908      	bls.n	80130c2 <_free_r+0x46>
 80130b0:	6825      	ldr	r5, [r4, #0]
 80130b2:	1961      	adds	r1, r4, r5
 80130b4:	428b      	cmp	r3, r1
 80130b6:	bf01      	itttt	eq
 80130b8:	6819      	ldreq	r1, [r3, #0]
 80130ba:	685b      	ldreq	r3, [r3, #4]
 80130bc:	1949      	addeq	r1, r1, r5
 80130be:	6021      	streq	r1, [r4, #0]
 80130c0:	e7ed      	b.n	801309e <_free_r+0x22>
 80130c2:	461a      	mov	r2, r3
 80130c4:	685b      	ldr	r3, [r3, #4]
 80130c6:	b10b      	cbz	r3, 80130cc <_free_r+0x50>
 80130c8:	42a3      	cmp	r3, r4
 80130ca:	d9fa      	bls.n	80130c2 <_free_r+0x46>
 80130cc:	6811      	ldr	r1, [r2, #0]
 80130ce:	1855      	adds	r5, r2, r1
 80130d0:	42a5      	cmp	r5, r4
 80130d2:	d10b      	bne.n	80130ec <_free_r+0x70>
 80130d4:	6824      	ldr	r4, [r4, #0]
 80130d6:	4421      	add	r1, r4
 80130d8:	1854      	adds	r4, r2, r1
 80130da:	42a3      	cmp	r3, r4
 80130dc:	6011      	str	r1, [r2, #0]
 80130de:	d1e0      	bne.n	80130a2 <_free_r+0x26>
 80130e0:	681c      	ldr	r4, [r3, #0]
 80130e2:	685b      	ldr	r3, [r3, #4]
 80130e4:	6053      	str	r3, [r2, #4]
 80130e6:	440c      	add	r4, r1
 80130e8:	6014      	str	r4, [r2, #0]
 80130ea:	e7da      	b.n	80130a2 <_free_r+0x26>
 80130ec:	d902      	bls.n	80130f4 <_free_r+0x78>
 80130ee:	230c      	movs	r3, #12
 80130f0:	6003      	str	r3, [r0, #0]
 80130f2:	e7d6      	b.n	80130a2 <_free_r+0x26>
 80130f4:	6825      	ldr	r5, [r4, #0]
 80130f6:	1961      	adds	r1, r4, r5
 80130f8:	428b      	cmp	r3, r1
 80130fa:	bf04      	itt	eq
 80130fc:	6819      	ldreq	r1, [r3, #0]
 80130fe:	685b      	ldreq	r3, [r3, #4]
 8013100:	6063      	str	r3, [r4, #4]
 8013102:	bf04      	itt	eq
 8013104:	1949      	addeq	r1, r1, r5
 8013106:	6021      	streq	r1, [r4, #0]
 8013108:	6054      	str	r4, [r2, #4]
 801310a:	e7ca      	b.n	80130a2 <_free_r+0x26>
 801310c:	b003      	add	sp, #12
 801310e:	bd30      	pop	{r4, r5, pc}
 8013110:	20005ad8 	.word	0x20005ad8

08013114 <malloc>:
 8013114:	4b02      	ldr	r3, [pc, #8]	; (8013120 <malloc+0xc>)
 8013116:	4601      	mov	r1, r0
 8013118:	6818      	ldr	r0, [r3, #0]
 801311a:	f000 b823 	b.w	8013164 <_malloc_r>
 801311e:	bf00      	nop
 8013120:	200001e0 	.word	0x200001e0

08013124 <sbrk_aligned>:
 8013124:	b570      	push	{r4, r5, r6, lr}
 8013126:	4e0e      	ldr	r6, [pc, #56]	; (8013160 <sbrk_aligned+0x3c>)
 8013128:	460c      	mov	r4, r1
 801312a:	6831      	ldr	r1, [r6, #0]
 801312c:	4605      	mov	r5, r0
 801312e:	b911      	cbnz	r1, 8013136 <sbrk_aligned+0x12>
 8013130:	f000 fe40 	bl	8013db4 <_sbrk_r>
 8013134:	6030      	str	r0, [r6, #0]
 8013136:	4621      	mov	r1, r4
 8013138:	4628      	mov	r0, r5
 801313a:	f000 fe3b 	bl	8013db4 <_sbrk_r>
 801313e:	1c43      	adds	r3, r0, #1
 8013140:	d00a      	beq.n	8013158 <sbrk_aligned+0x34>
 8013142:	1cc4      	adds	r4, r0, #3
 8013144:	f024 0403 	bic.w	r4, r4, #3
 8013148:	42a0      	cmp	r0, r4
 801314a:	d007      	beq.n	801315c <sbrk_aligned+0x38>
 801314c:	1a21      	subs	r1, r4, r0
 801314e:	4628      	mov	r0, r5
 8013150:	f000 fe30 	bl	8013db4 <_sbrk_r>
 8013154:	3001      	adds	r0, #1
 8013156:	d101      	bne.n	801315c <sbrk_aligned+0x38>
 8013158:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801315c:	4620      	mov	r0, r4
 801315e:	bd70      	pop	{r4, r5, r6, pc}
 8013160:	20005adc 	.word	0x20005adc

08013164 <_malloc_r>:
 8013164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013168:	1ccd      	adds	r5, r1, #3
 801316a:	f025 0503 	bic.w	r5, r5, #3
 801316e:	3508      	adds	r5, #8
 8013170:	2d0c      	cmp	r5, #12
 8013172:	bf38      	it	cc
 8013174:	250c      	movcc	r5, #12
 8013176:	2d00      	cmp	r5, #0
 8013178:	4607      	mov	r7, r0
 801317a:	db01      	blt.n	8013180 <_malloc_r+0x1c>
 801317c:	42a9      	cmp	r1, r5
 801317e:	d905      	bls.n	801318c <_malloc_r+0x28>
 8013180:	230c      	movs	r3, #12
 8013182:	603b      	str	r3, [r7, #0]
 8013184:	2600      	movs	r6, #0
 8013186:	4630      	mov	r0, r6
 8013188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801318c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013260 <_malloc_r+0xfc>
 8013190:	f000 f868 	bl	8013264 <__malloc_lock>
 8013194:	f8d8 3000 	ldr.w	r3, [r8]
 8013198:	461c      	mov	r4, r3
 801319a:	bb5c      	cbnz	r4, 80131f4 <_malloc_r+0x90>
 801319c:	4629      	mov	r1, r5
 801319e:	4638      	mov	r0, r7
 80131a0:	f7ff ffc0 	bl	8013124 <sbrk_aligned>
 80131a4:	1c43      	adds	r3, r0, #1
 80131a6:	4604      	mov	r4, r0
 80131a8:	d155      	bne.n	8013256 <_malloc_r+0xf2>
 80131aa:	f8d8 4000 	ldr.w	r4, [r8]
 80131ae:	4626      	mov	r6, r4
 80131b0:	2e00      	cmp	r6, #0
 80131b2:	d145      	bne.n	8013240 <_malloc_r+0xdc>
 80131b4:	2c00      	cmp	r4, #0
 80131b6:	d048      	beq.n	801324a <_malloc_r+0xe6>
 80131b8:	6823      	ldr	r3, [r4, #0]
 80131ba:	4631      	mov	r1, r6
 80131bc:	4638      	mov	r0, r7
 80131be:	eb04 0903 	add.w	r9, r4, r3
 80131c2:	f000 fdf7 	bl	8013db4 <_sbrk_r>
 80131c6:	4581      	cmp	r9, r0
 80131c8:	d13f      	bne.n	801324a <_malloc_r+0xe6>
 80131ca:	6821      	ldr	r1, [r4, #0]
 80131cc:	1a6d      	subs	r5, r5, r1
 80131ce:	4629      	mov	r1, r5
 80131d0:	4638      	mov	r0, r7
 80131d2:	f7ff ffa7 	bl	8013124 <sbrk_aligned>
 80131d6:	3001      	adds	r0, #1
 80131d8:	d037      	beq.n	801324a <_malloc_r+0xe6>
 80131da:	6823      	ldr	r3, [r4, #0]
 80131dc:	442b      	add	r3, r5
 80131de:	6023      	str	r3, [r4, #0]
 80131e0:	f8d8 3000 	ldr.w	r3, [r8]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d038      	beq.n	801325a <_malloc_r+0xf6>
 80131e8:	685a      	ldr	r2, [r3, #4]
 80131ea:	42a2      	cmp	r2, r4
 80131ec:	d12b      	bne.n	8013246 <_malloc_r+0xe2>
 80131ee:	2200      	movs	r2, #0
 80131f0:	605a      	str	r2, [r3, #4]
 80131f2:	e00f      	b.n	8013214 <_malloc_r+0xb0>
 80131f4:	6822      	ldr	r2, [r4, #0]
 80131f6:	1b52      	subs	r2, r2, r5
 80131f8:	d41f      	bmi.n	801323a <_malloc_r+0xd6>
 80131fa:	2a0b      	cmp	r2, #11
 80131fc:	d917      	bls.n	801322e <_malloc_r+0xca>
 80131fe:	1961      	adds	r1, r4, r5
 8013200:	42a3      	cmp	r3, r4
 8013202:	6025      	str	r5, [r4, #0]
 8013204:	bf18      	it	ne
 8013206:	6059      	strne	r1, [r3, #4]
 8013208:	6863      	ldr	r3, [r4, #4]
 801320a:	bf08      	it	eq
 801320c:	f8c8 1000 	streq.w	r1, [r8]
 8013210:	5162      	str	r2, [r4, r5]
 8013212:	604b      	str	r3, [r1, #4]
 8013214:	4638      	mov	r0, r7
 8013216:	f104 060b 	add.w	r6, r4, #11
 801321a:	f000 f829 	bl	8013270 <__malloc_unlock>
 801321e:	f026 0607 	bic.w	r6, r6, #7
 8013222:	1d23      	adds	r3, r4, #4
 8013224:	1af2      	subs	r2, r6, r3
 8013226:	d0ae      	beq.n	8013186 <_malloc_r+0x22>
 8013228:	1b9b      	subs	r3, r3, r6
 801322a:	50a3      	str	r3, [r4, r2]
 801322c:	e7ab      	b.n	8013186 <_malloc_r+0x22>
 801322e:	42a3      	cmp	r3, r4
 8013230:	6862      	ldr	r2, [r4, #4]
 8013232:	d1dd      	bne.n	80131f0 <_malloc_r+0x8c>
 8013234:	f8c8 2000 	str.w	r2, [r8]
 8013238:	e7ec      	b.n	8013214 <_malloc_r+0xb0>
 801323a:	4623      	mov	r3, r4
 801323c:	6864      	ldr	r4, [r4, #4]
 801323e:	e7ac      	b.n	801319a <_malloc_r+0x36>
 8013240:	4634      	mov	r4, r6
 8013242:	6876      	ldr	r6, [r6, #4]
 8013244:	e7b4      	b.n	80131b0 <_malloc_r+0x4c>
 8013246:	4613      	mov	r3, r2
 8013248:	e7cc      	b.n	80131e4 <_malloc_r+0x80>
 801324a:	230c      	movs	r3, #12
 801324c:	603b      	str	r3, [r7, #0]
 801324e:	4638      	mov	r0, r7
 8013250:	f000 f80e 	bl	8013270 <__malloc_unlock>
 8013254:	e797      	b.n	8013186 <_malloc_r+0x22>
 8013256:	6025      	str	r5, [r4, #0]
 8013258:	e7dc      	b.n	8013214 <_malloc_r+0xb0>
 801325a:	605b      	str	r3, [r3, #4]
 801325c:	deff      	udf	#255	; 0xff
 801325e:	bf00      	nop
 8013260:	20005ad8 	.word	0x20005ad8

08013264 <__malloc_lock>:
 8013264:	4801      	ldr	r0, [pc, #4]	; (801326c <__malloc_lock+0x8>)
 8013266:	f7ff b87e 	b.w	8012366 <__retarget_lock_acquire_recursive>
 801326a:	bf00      	nop
 801326c:	20005ad4 	.word	0x20005ad4

08013270 <__malloc_unlock>:
 8013270:	4801      	ldr	r0, [pc, #4]	; (8013278 <__malloc_unlock+0x8>)
 8013272:	f7ff b879 	b.w	8012368 <__retarget_lock_release_recursive>
 8013276:	bf00      	nop
 8013278:	20005ad4 	.word	0x20005ad4

0801327c <_Balloc>:
 801327c:	b570      	push	{r4, r5, r6, lr}
 801327e:	69c6      	ldr	r6, [r0, #28]
 8013280:	4604      	mov	r4, r0
 8013282:	460d      	mov	r5, r1
 8013284:	b976      	cbnz	r6, 80132a4 <_Balloc+0x28>
 8013286:	2010      	movs	r0, #16
 8013288:	f7ff ff44 	bl	8013114 <malloc>
 801328c:	4602      	mov	r2, r0
 801328e:	61e0      	str	r0, [r4, #28]
 8013290:	b920      	cbnz	r0, 801329c <_Balloc+0x20>
 8013292:	4b18      	ldr	r3, [pc, #96]	; (80132f4 <_Balloc+0x78>)
 8013294:	4818      	ldr	r0, [pc, #96]	; (80132f8 <_Balloc+0x7c>)
 8013296:	216b      	movs	r1, #107	; 0x6b
 8013298:	f000 fd9c 	bl	8013dd4 <__assert_func>
 801329c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80132a0:	6006      	str	r6, [r0, #0]
 80132a2:	60c6      	str	r6, [r0, #12]
 80132a4:	69e6      	ldr	r6, [r4, #28]
 80132a6:	68f3      	ldr	r3, [r6, #12]
 80132a8:	b183      	cbz	r3, 80132cc <_Balloc+0x50>
 80132aa:	69e3      	ldr	r3, [r4, #28]
 80132ac:	68db      	ldr	r3, [r3, #12]
 80132ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80132b2:	b9b8      	cbnz	r0, 80132e4 <_Balloc+0x68>
 80132b4:	2101      	movs	r1, #1
 80132b6:	fa01 f605 	lsl.w	r6, r1, r5
 80132ba:	1d72      	adds	r2, r6, #5
 80132bc:	0092      	lsls	r2, r2, #2
 80132be:	4620      	mov	r0, r4
 80132c0:	f000 fda6 	bl	8013e10 <_calloc_r>
 80132c4:	b160      	cbz	r0, 80132e0 <_Balloc+0x64>
 80132c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80132ca:	e00e      	b.n	80132ea <_Balloc+0x6e>
 80132cc:	2221      	movs	r2, #33	; 0x21
 80132ce:	2104      	movs	r1, #4
 80132d0:	4620      	mov	r0, r4
 80132d2:	f000 fd9d 	bl	8013e10 <_calloc_r>
 80132d6:	69e3      	ldr	r3, [r4, #28]
 80132d8:	60f0      	str	r0, [r6, #12]
 80132da:	68db      	ldr	r3, [r3, #12]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d1e4      	bne.n	80132aa <_Balloc+0x2e>
 80132e0:	2000      	movs	r0, #0
 80132e2:	bd70      	pop	{r4, r5, r6, pc}
 80132e4:	6802      	ldr	r2, [r0, #0]
 80132e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80132ea:	2300      	movs	r3, #0
 80132ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80132f0:	e7f7      	b.n	80132e2 <_Balloc+0x66>
 80132f2:	bf00      	nop
 80132f4:	080151f1 	.word	0x080151f1
 80132f8:	08015271 	.word	0x08015271

080132fc <_Bfree>:
 80132fc:	b570      	push	{r4, r5, r6, lr}
 80132fe:	69c6      	ldr	r6, [r0, #28]
 8013300:	4605      	mov	r5, r0
 8013302:	460c      	mov	r4, r1
 8013304:	b976      	cbnz	r6, 8013324 <_Bfree+0x28>
 8013306:	2010      	movs	r0, #16
 8013308:	f7ff ff04 	bl	8013114 <malloc>
 801330c:	4602      	mov	r2, r0
 801330e:	61e8      	str	r0, [r5, #28]
 8013310:	b920      	cbnz	r0, 801331c <_Bfree+0x20>
 8013312:	4b09      	ldr	r3, [pc, #36]	; (8013338 <_Bfree+0x3c>)
 8013314:	4809      	ldr	r0, [pc, #36]	; (801333c <_Bfree+0x40>)
 8013316:	218f      	movs	r1, #143	; 0x8f
 8013318:	f000 fd5c 	bl	8013dd4 <__assert_func>
 801331c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013320:	6006      	str	r6, [r0, #0]
 8013322:	60c6      	str	r6, [r0, #12]
 8013324:	b13c      	cbz	r4, 8013336 <_Bfree+0x3a>
 8013326:	69eb      	ldr	r3, [r5, #28]
 8013328:	6862      	ldr	r2, [r4, #4]
 801332a:	68db      	ldr	r3, [r3, #12]
 801332c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013330:	6021      	str	r1, [r4, #0]
 8013332:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013336:	bd70      	pop	{r4, r5, r6, pc}
 8013338:	080151f1 	.word	0x080151f1
 801333c:	08015271 	.word	0x08015271

08013340 <__multadd>:
 8013340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013344:	690d      	ldr	r5, [r1, #16]
 8013346:	4607      	mov	r7, r0
 8013348:	460c      	mov	r4, r1
 801334a:	461e      	mov	r6, r3
 801334c:	f101 0c14 	add.w	ip, r1, #20
 8013350:	2000      	movs	r0, #0
 8013352:	f8dc 3000 	ldr.w	r3, [ip]
 8013356:	b299      	uxth	r1, r3
 8013358:	fb02 6101 	mla	r1, r2, r1, r6
 801335c:	0c1e      	lsrs	r6, r3, #16
 801335e:	0c0b      	lsrs	r3, r1, #16
 8013360:	fb02 3306 	mla	r3, r2, r6, r3
 8013364:	b289      	uxth	r1, r1
 8013366:	3001      	adds	r0, #1
 8013368:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801336c:	4285      	cmp	r5, r0
 801336e:	f84c 1b04 	str.w	r1, [ip], #4
 8013372:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013376:	dcec      	bgt.n	8013352 <__multadd+0x12>
 8013378:	b30e      	cbz	r6, 80133be <__multadd+0x7e>
 801337a:	68a3      	ldr	r3, [r4, #8]
 801337c:	42ab      	cmp	r3, r5
 801337e:	dc19      	bgt.n	80133b4 <__multadd+0x74>
 8013380:	6861      	ldr	r1, [r4, #4]
 8013382:	4638      	mov	r0, r7
 8013384:	3101      	adds	r1, #1
 8013386:	f7ff ff79 	bl	801327c <_Balloc>
 801338a:	4680      	mov	r8, r0
 801338c:	b928      	cbnz	r0, 801339a <__multadd+0x5a>
 801338e:	4602      	mov	r2, r0
 8013390:	4b0c      	ldr	r3, [pc, #48]	; (80133c4 <__multadd+0x84>)
 8013392:	480d      	ldr	r0, [pc, #52]	; (80133c8 <__multadd+0x88>)
 8013394:	21ba      	movs	r1, #186	; 0xba
 8013396:	f000 fd1d 	bl	8013dd4 <__assert_func>
 801339a:	6922      	ldr	r2, [r4, #16]
 801339c:	3202      	adds	r2, #2
 801339e:	f104 010c 	add.w	r1, r4, #12
 80133a2:	0092      	lsls	r2, r2, #2
 80133a4:	300c      	adds	r0, #12
 80133a6:	f7fe ffe0 	bl	801236a <memcpy>
 80133aa:	4621      	mov	r1, r4
 80133ac:	4638      	mov	r0, r7
 80133ae:	f7ff ffa5 	bl	80132fc <_Bfree>
 80133b2:	4644      	mov	r4, r8
 80133b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80133b8:	3501      	adds	r5, #1
 80133ba:	615e      	str	r6, [r3, #20]
 80133bc:	6125      	str	r5, [r4, #16]
 80133be:	4620      	mov	r0, r4
 80133c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133c4:	08015260 	.word	0x08015260
 80133c8:	08015271 	.word	0x08015271

080133cc <__hi0bits>:
 80133cc:	0c03      	lsrs	r3, r0, #16
 80133ce:	041b      	lsls	r3, r3, #16
 80133d0:	b9d3      	cbnz	r3, 8013408 <__hi0bits+0x3c>
 80133d2:	0400      	lsls	r0, r0, #16
 80133d4:	2310      	movs	r3, #16
 80133d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80133da:	bf04      	itt	eq
 80133dc:	0200      	lsleq	r0, r0, #8
 80133de:	3308      	addeq	r3, #8
 80133e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80133e4:	bf04      	itt	eq
 80133e6:	0100      	lsleq	r0, r0, #4
 80133e8:	3304      	addeq	r3, #4
 80133ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80133ee:	bf04      	itt	eq
 80133f0:	0080      	lsleq	r0, r0, #2
 80133f2:	3302      	addeq	r3, #2
 80133f4:	2800      	cmp	r0, #0
 80133f6:	db05      	blt.n	8013404 <__hi0bits+0x38>
 80133f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80133fc:	f103 0301 	add.w	r3, r3, #1
 8013400:	bf08      	it	eq
 8013402:	2320      	moveq	r3, #32
 8013404:	4618      	mov	r0, r3
 8013406:	4770      	bx	lr
 8013408:	2300      	movs	r3, #0
 801340a:	e7e4      	b.n	80133d6 <__hi0bits+0xa>

0801340c <__lo0bits>:
 801340c:	6803      	ldr	r3, [r0, #0]
 801340e:	f013 0207 	ands.w	r2, r3, #7
 8013412:	d00c      	beq.n	801342e <__lo0bits+0x22>
 8013414:	07d9      	lsls	r1, r3, #31
 8013416:	d422      	bmi.n	801345e <__lo0bits+0x52>
 8013418:	079a      	lsls	r2, r3, #30
 801341a:	bf49      	itett	mi
 801341c:	085b      	lsrmi	r3, r3, #1
 801341e:	089b      	lsrpl	r3, r3, #2
 8013420:	6003      	strmi	r3, [r0, #0]
 8013422:	2201      	movmi	r2, #1
 8013424:	bf5c      	itt	pl
 8013426:	6003      	strpl	r3, [r0, #0]
 8013428:	2202      	movpl	r2, #2
 801342a:	4610      	mov	r0, r2
 801342c:	4770      	bx	lr
 801342e:	b299      	uxth	r1, r3
 8013430:	b909      	cbnz	r1, 8013436 <__lo0bits+0x2a>
 8013432:	0c1b      	lsrs	r3, r3, #16
 8013434:	2210      	movs	r2, #16
 8013436:	b2d9      	uxtb	r1, r3
 8013438:	b909      	cbnz	r1, 801343e <__lo0bits+0x32>
 801343a:	3208      	adds	r2, #8
 801343c:	0a1b      	lsrs	r3, r3, #8
 801343e:	0719      	lsls	r1, r3, #28
 8013440:	bf04      	itt	eq
 8013442:	091b      	lsreq	r3, r3, #4
 8013444:	3204      	addeq	r2, #4
 8013446:	0799      	lsls	r1, r3, #30
 8013448:	bf04      	itt	eq
 801344a:	089b      	lsreq	r3, r3, #2
 801344c:	3202      	addeq	r2, #2
 801344e:	07d9      	lsls	r1, r3, #31
 8013450:	d403      	bmi.n	801345a <__lo0bits+0x4e>
 8013452:	085b      	lsrs	r3, r3, #1
 8013454:	f102 0201 	add.w	r2, r2, #1
 8013458:	d003      	beq.n	8013462 <__lo0bits+0x56>
 801345a:	6003      	str	r3, [r0, #0]
 801345c:	e7e5      	b.n	801342a <__lo0bits+0x1e>
 801345e:	2200      	movs	r2, #0
 8013460:	e7e3      	b.n	801342a <__lo0bits+0x1e>
 8013462:	2220      	movs	r2, #32
 8013464:	e7e1      	b.n	801342a <__lo0bits+0x1e>
	...

08013468 <__i2b>:
 8013468:	b510      	push	{r4, lr}
 801346a:	460c      	mov	r4, r1
 801346c:	2101      	movs	r1, #1
 801346e:	f7ff ff05 	bl	801327c <_Balloc>
 8013472:	4602      	mov	r2, r0
 8013474:	b928      	cbnz	r0, 8013482 <__i2b+0x1a>
 8013476:	4b05      	ldr	r3, [pc, #20]	; (801348c <__i2b+0x24>)
 8013478:	4805      	ldr	r0, [pc, #20]	; (8013490 <__i2b+0x28>)
 801347a:	f240 1145 	movw	r1, #325	; 0x145
 801347e:	f000 fca9 	bl	8013dd4 <__assert_func>
 8013482:	2301      	movs	r3, #1
 8013484:	6144      	str	r4, [r0, #20]
 8013486:	6103      	str	r3, [r0, #16]
 8013488:	bd10      	pop	{r4, pc}
 801348a:	bf00      	nop
 801348c:	08015260 	.word	0x08015260
 8013490:	08015271 	.word	0x08015271

08013494 <__multiply>:
 8013494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013498:	4691      	mov	r9, r2
 801349a:	690a      	ldr	r2, [r1, #16]
 801349c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80134a0:	429a      	cmp	r2, r3
 80134a2:	bfb8      	it	lt
 80134a4:	460b      	movlt	r3, r1
 80134a6:	460c      	mov	r4, r1
 80134a8:	bfbc      	itt	lt
 80134aa:	464c      	movlt	r4, r9
 80134ac:	4699      	movlt	r9, r3
 80134ae:	6927      	ldr	r7, [r4, #16]
 80134b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80134b4:	68a3      	ldr	r3, [r4, #8]
 80134b6:	6861      	ldr	r1, [r4, #4]
 80134b8:	eb07 060a 	add.w	r6, r7, sl
 80134bc:	42b3      	cmp	r3, r6
 80134be:	b085      	sub	sp, #20
 80134c0:	bfb8      	it	lt
 80134c2:	3101      	addlt	r1, #1
 80134c4:	f7ff feda 	bl	801327c <_Balloc>
 80134c8:	b930      	cbnz	r0, 80134d8 <__multiply+0x44>
 80134ca:	4602      	mov	r2, r0
 80134cc:	4b44      	ldr	r3, [pc, #272]	; (80135e0 <__multiply+0x14c>)
 80134ce:	4845      	ldr	r0, [pc, #276]	; (80135e4 <__multiply+0x150>)
 80134d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80134d4:	f000 fc7e 	bl	8013dd4 <__assert_func>
 80134d8:	f100 0514 	add.w	r5, r0, #20
 80134dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80134e0:	462b      	mov	r3, r5
 80134e2:	2200      	movs	r2, #0
 80134e4:	4543      	cmp	r3, r8
 80134e6:	d321      	bcc.n	801352c <__multiply+0x98>
 80134e8:	f104 0314 	add.w	r3, r4, #20
 80134ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80134f0:	f109 0314 	add.w	r3, r9, #20
 80134f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80134f8:	9202      	str	r2, [sp, #8]
 80134fa:	1b3a      	subs	r2, r7, r4
 80134fc:	3a15      	subs	r2, #21
 80134fe:	f022 0203 	bic.w	r2, r2, #3
 8013502:	3204      	adds	r2, #4
 8013504:	f104 0115 	add.w	r1, r4, #21
 8013508:	428f      	cmp	r7, r1
 801350a:	bf38      	it	cc
 801350c:	2204      	movcc	r2, #4
 801350e:	9201      	str	r2, [sp, #4]
 8013510:	9a02      	ldr	r2, [sp, #8]
 8013512:	9303      	str	r3, [sp, #12]
 8013514:	429a      	cmp	r2, r3
 8013516:	d80c      	bhi.n	8013532 <__multiply+0x9e>
 8013518:	2e00      	cmp	r6, #0
 801351a:	dd03      	ble.n	8013524 <__multiply+0x90>
 801351c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013520:	2b00      	cmp	r3, #0
 8013522:	d05b      	beq.n	80135dc <__multiply+0x148>
 8013524:	6106      	str	r6, [r0, #16]
 8013526:	b005      	add	sp, #20
 8013528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801352c:	f843 2b04 	str.w	r2, [r3], #4
 8013530:	e7d8      	b.n	80134e4 <__multiply+0x50>
 8013532:	f8b3 a000 	ldrh.w	sl, [r3]
 8013536:	f1ba 0f00 	cmp.w	sl, #0
 801353a:	d024      	beq.n	8013586 <__multiply+0xf2>
 801353c:	f104 0e14 	add.w	lr, r4, #20
 8013540:	46a9      	mov	r9, r5
 8013542:	f04f 0c00 	mov.w	ip, #0
 8013546:	f85e 2b04 	ldr.w	r2, [lr], #4
 801354a:	f8d9 1000 	ldr.w	r1, [r9]
 801354e:	fa1f fb82 	uxth.w	fp, r2
 8013552:	b289      	uxth	r1, r1
 8013554:	fb0a 110b 	mla	r1, sl, fp, r1
 8013558:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801355c:	f8d9 2000 	ldr.w	r2, [r9]
 8013560:	4461      	add	r1, ip
 8013562:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013566:	fb0a c20b 	mla	r2, sl, fp, ip
 801356a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801356e:	b289      	uxth	r1, r1
 8013570:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013574:	4577      	cmp	r7, lr
 8013576:	f849 1b04 	str.w	r1, [r9], #4
 801357a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801357e:	d8e2      	bhi.n	8013546 <__multiply+0xb2>
 8013580:	9a01      	ldr	r2, [sp, #4]
 8013582:	f845 c002 	str.w	ip, [r5, r2]
 8013586:	9a03      	ldr	r2, [sp, #12]
 8013588:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801358c:	3304      	adds	r3, #4
 801358e:	f1b9 0f00 	cmp.w	r9, #0
 8013592:	d021      	beq.n	80135d8 <__multiply+0x144>
 8013594:	6829      	ldr	r1, [r5, #0]
 8013596:	f104 0c14 	add.w	ip, r4, #20
 801359a:	46ae      	mov	lr, r5
 801359c:	f04f 0a00 	mov.w	sl, #0
 80135a0:	f8bc b000 	ldrh.w	fp, [ip]
 80135a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80135a8:	fb09 220b 	mla	r2, r9, fp, r2
 80135ac:	4452      	add	r2, sl
 80135ae:	b289      	uxth	r1, r1
 80135b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80135b4:	f84e 1b04 	str.w	r1, [lr], #4
 80135b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80135bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80135c0:	f8be 1000 	ldrh.w	r1, [lr]
 80135c4:	fb09 110a 	mla	r1, r9, sl, r1
 80135c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80135cc:	4567      	cmp	r7, ip
 80135ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80135d2:	d8e5      	bhi.n	80135a0 <__multiply+0x10c>
 80135d4:	9a01      	ldr	r2, [sp, #4]
 80135d6:	50a9      	str	r1, [r5, r2]
 80135d8:	3504      	adds	r5, #4
 80135da:	e799      	b.n	8013510 <__multiply+0x7c>
 80135dc:	3e01      	subs	r6, #1
 80135de:	e79b      	b.n	8013518 <__multiply+0x84>
 80135e0:	08015260 	.word	0x08015260
 80135e4:	08015271 	.word	0x08015271

080135e8 <__pow5mult>:
 80135e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135ec:	4615      	mov	r5, r2
 80135ee:	f012 0203 	ands.w	r2, r2, #3
 80135f2:	4606      	mov	r6, r0
 80135f4:	460f      	mov	r7, r1
 80135f6:	d007      	beq.n	8013608 <__pow5mult+0x20>
 80135f8:	4c25      	ldr	r4, [pc, #148]	; (8013690 <__pow5mult+0xa8>)
 80135fa:	3a01      	subs	r2, #1
 80135fc:	2300      	movs	r3, #0
 80135fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013602:	f7ff fe9d 	bl	8013340 <__multadd>
 8013606:	4607      	mov	r7, r0
 8013608:	10ad      	asrs	r5, r5, #2
 801360a:	d03d      	beq.n	8013688 <__pow5mult+0xa0>
 801360c:	69f4      	ldr	r4, [r6, #28]
 801360e:	b97c      	cbnz	r4, 8013630 <__pow5mult+0x48>
 8013610:	2010      	movs	r0, #16
 8013612:	f7ff fd7f 	bl	8013114 <malloc>
 8013616:	4602      	mov	r2, r0
 8013618:	61f0      	str	r0, [r6, #28]
 801361a:	b928      	cbnz	r0, 8013628 <__pow5mult+0x40>
 801361c:	4b1d      	ldr	r3, [pc, #116]	; (8013694 <__pow5mult+0xac>)
 801361e:	481e      	ldr	r0, [pc, #120]	; (8013698 <__pow5mult+0xb0>)
 8013620:	f240 11b3 	movw	r1, #435	; 0x1b3
 8013624:	f000 fbd6 	bl	8013dd4 <__assert_func>
 8013628:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801362c:	6004      	str	r4, [r0, #0]
 801362e:	60c4      	str	r4, [r0, #12]
 8013630:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8013634:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013638:	b94c      	cbnz	r4, 801364e <__pow5mult+0x66>
 801363a:	f240 2171 	movw	r1, #625	; 0x271
 801363e:	4630      	mov	r0, r6
 8013640:	f7ff ff12 	bl	8013468 <__i2b>
 8013644:	2300      	movs	r3, #0
 8013646:	f8c8 0008 	str.w	r0, [r8, #8]
 801364a:	4604      	mov	r4, r0
 801364c:	6003      	str	r3, [r0, #0]
 801364e:	f04f 0900 	mov.w	r9, #0
 8013652:	07eb      	lsls	r3, r5, #31
 8013654:	d50a      	bpl.n	801366c <__pow5mult+0x84>
 8013656:	4639      	mov	r1, r7
 8013658:	4622      	mov	r2, r4
 801365a:	4630      	mov	r0, r6
 801365c:	f7ff ff1a 	bl	8013494 <__multiply>
 8013660:	4639      	mov	r1, r7
 8013662:	4680      	mov	r8, r0
 8013664:	4630      	mov	r0, r6
 8013666:	f7ff fe49 	bl	80132fc <_Bfree>
 801366a:	4647      	mov	r7, r8
 801366c:	106d      	asrs	r5, r5, #1
 801366e:	d00b      	beq.n	8013688 <__pow5mult+0xa0>
 8013670:	6820      	ldr	r0, [r4, #0]
 8013672:	b938      	cbnz	r0, 8013684 <__pow5mult+0x9c>
 8013674:	4622      	mov	r2, r4
 8013676:	4621      	mov	r1, r4
 8013678:	4630      	mov	r0, r6
 801367a:	f7ff ff0b 	bl	8013494 <__multiply>
 801367e:	6020      	str	r0, [r4, #0]
 8013680:	f8c0 9000 	str.w	r9, [r0]
 8013684:	4604      	mov	r4, r0
 8013686:	e7e4      	b.n	8013652 <__pow5mult+0x6a>
 8013688:	4638      	mov	r0, r7
 801368a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801368e:	bf00      	nop
 8013690:	080153c0 	.word	0x080153c0
 8013694:	080151f1 	.word	0x080151f1
 8013698:	08015271 	.word	0x08015271

0801369c <__lshift>:
 801369c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136a0:	460c      	mov	r4, r1
 80136a2:	6849      	ldr	r1, [r1, #4]
 80136a4:	6923      	ldr	r3, [r4, #16]
 80136a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80136aa:	68a3      	ldr	r3, [r4, #8]
 80136ac:	4607      	mov	r7, r0
 80136ae:	4691      	mov	r9, r2
 80136b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80136b4:	f108 0601 	add.w	r6, r8, #1
 80136b8:	42b3      	cmp	r3, r6
 80136ba:	db0b      	blt.n	80136d4 <__lshift+0x38>
 80136bc:	4638      	mov	r0, r7
 80136be:	f7ff fddd 	bl	801327c <_Balloc>
 80136c2:	4605      	mov	r5, r0
 80136c4:	b948      	cbnz	r0, 80136da <__lshift+0x3e>
 80136c6:	4602      	mov	r2, r0
 80136c8:	4b28      	ldr	r3, [pc, #160]	; (801376c <__lshift+0xd0>)
 80136ca:	4829      	ldr	r0, [pc, #164]	; (8013770 <__lshift+0xd4>)
 80136cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80136d0:	f000 fb80 	bl	8013dd4 <__assert_func>
 80136d4:	3101      	adds	r1, #1
 80136d6:	005b      	lsls	r3, r3, #1
 80136d8:	e7ee      	b.n	80136b8 <__lshift+0x1c>
 80136da:	2300      	movs	r3, #0
 80136dc:	f100 0114 	add.w	r1, r0, #20
 80136e0:	f100 0210 	add.w	r2, r0, #16
 80136e4:	4618      	mov	r0, r3
 80136e6:	4553      	cmp	r3, sl
 80136e8:	db33      	blt.n	8013752 <__lshift+0xb6>
 80136ea:	6920      	ldr	r0, [r4, #16]
 80136ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80136f0:	f104 0314 	add.w	r3, r4, #20
 80136f4:	f019 091f 	ands.w	r9, r9, #31
 80136f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80136fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013700:	d02b      	beq.n	801375a <__lshift+0xbe>
 8013702:	f1c9 0e20 	rsb	lr, r9, #32
 8013706:	468a      	mov	sl, r1
 8013708:	2200      	movs	r2, #0
 801370a:	6818      	ldr	r0, [r3, #0]
 801370c:	fa00 f009 	lsl.w	r0, r0, r9
 8013710:	4310      	orrs	r0, r2
 8013712:	f84a 0b04 	str.w	r0, [sl], #4
 8013716:	f853 2b04 	ldr.w	r2, [r3], #4
 801371a:	459c      	cmp	ip, r3
 801371c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013720:	d8f3      	bhi.n	801370a <__lshift+0x6e>
 8013722:	ebac 0304 	sub.w	r3, ip, r4
 8013726:	3b15      	subs	r3, #21
 8013728:	f023 0303 	bic.w	r3, r3, #3
 801372c:	3304      	adds	r3, #4
 801372e:	f104 0015 	add.w	r0, r4, #21
 8013732:	4584      	cmp	ip, r0
 8013734:	bf38      	it	cc
 8013736:	2304      	movcc	r3, #4
 8013738:	50ca      	str	r2, [r1, r3]
 801373a:	b10a      	cbz	r2, 8013740 <__lshift+0xa4>
 801373c:	f108 0602 	add.w	r6, r8, #2
 8013740:	3e01      	subs	r6, #1
 8013742:	4638      	mov	r0, r7
 8013744:	612e      	str	r6, [r5, #16]
 8013746:	4621      	mov	r1, r4
 8013748:	f7ff fdd8 	bl	80132fc <_Bfree>
 801374c:	4628      	mov	r0, r5
 801374e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013752:	f842 0f04 	str.w	r0, [r2, #4]!
 8013756:	3301      	adds	r3, #1
 8013758:	e7c5      	b.n	80136e6 <__lshift+0x4a>
 801375a:	3904      	subs	r1, #4
 801375c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013760:	f841 2f04 	str.w	r2, [r1, #4]!
 8013764:	459c      	cmp	ip, r3
 8013766:	d8f9      	bhi.n	801375c <__lshift+0xc0>
 8013768:	e7ea      	b.n	8013740 <__lshift+0xa4>
 801376a:	bf00      	nop
 801376c:	08015260 	.word	0x08015260
 8013770:	08015271 	.word	0x08015271

08013774 <__mcmp>:
 8013774:	b530      	push	{r4, r5, lr}
 8013776:	6902      	ldr	r2, [r0, #16]
 8013778:	690c      	ldr	r4, [r1, #16]
 801377a:	1b12      	subs	r2, r2, r4
 801377c:	d10e      	bne.n	801379c <__mcmp+0x28>
 801377e:	f100 0314 	add.w	r3, r0, #20
 8013782:	3114      	adds	r1, #20
 8013784:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013788:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801378c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013790:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013794:	42a5      	cmp	r5, r4
 8013796:	d003      	beq.n	80137a0 <__mcmp+0x2c>
 8013798:	d305      	bcc.n	80137a6 <__mcmp+0x32>
 801379a:	2201      	movs	r2, #1
 801379c:	4610      	mov	r0, r2
 801379e:	bd30      	pop	{r4, r5, pc}
 80137a0:	4283      	cmp	r3, r0
 80137a2:	d3f3      	bcc.n	801378c <__mcmp+0x18>
 80137a4:	e7fa      	b.n	801379c <__mcmp+0x28>
 80137a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80137aa:	e7f7      	b.n	801379c <__mcmp+0x28>

080137ac <__mdiff>:
 80137ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137b0:	460c      	mov	r4, r1
 80137b2:	4606      	mov	r6, r0
 80137b4:	4611      	mov	r1, r2
 80137b6:	4620      	mov	r0, r4
 80137b8:	4690      	mov	r8, r2
 80137ba:	f7ff ffdb 	bl	8013774 <__mcmp>
 80137be:	1e05      	subs	r5, r0, #0
 80137c0:	d110      	bne.n	80137e4 <__mdiff+0x38>
 80137c2:	4629      	mov	r1, r5
 80137c4:	4630      	mov	r0, r6
 80137c6:	f7ff fd59 	bl	801327c <_Balloc>
 80137ca:	b930      	cbnz	r0, 80137da <__mdiff+0x2e>
 80137cc:	4b3a      	ldr	r3, [pc, #232]	; (80138b8 <__mdiff+0x10c>)
 80137ce:	4602      	mov	r2, r0
 80137d0:	f240 2137 	movw	r1, #567	; 0x237
 80137d4:	4839      	ldr	r0, [pc, #228]	; (80138bc <__mdiff+0x110>)
 80137d6:	f000 fafd 	bl	8013dd4 <__assert_func>
 80137da:	2301      	movs	r3, #1
 80137dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80137e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137e4:	bfa4      	itt	ge
 80137e6:	4643      	movge	r3, r8
 80137e8:	46a0      	movge	r8, r4
 80137ea:	4630      	mov	r0, r6
 80137ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80137f0:	bfa6      	itte	ge
 80137f2:	461c      	movge	r4, r3
 80137f4:	2500      	movge	r5, #0
 80137f6:	2501      	movlt	r5, #1
 80137f8:	f7ff fd40 	bl	801327c <_Balloc>
 80137fc:	b920      	cbnz	r0, 8013808 <__mdiff+0x5c>
 80137fe:	4b2e      	ldr	r3, [pc, #184]	; (80138b8 <__mdiff+0x10c>)
 8013800:	4602      	mov	r2, r0
 8013802:	f240 2145 	movw	r1, #581	; 0x245
 8013806:	e7e5      	b.n	80137d4 <__mdiff+0x28>
 8013808:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801380c:	6926      	ldr	r6, [r4, #16]
 801380e:	60c5      	str	r5, [r0, #12]
 8013810:	f104 0914 	add.w	r9, r4, #20
 8013814:	f108 0514 	add.w	r5, r8, #20
 8013818:	f100 0e14 	add.w	lr, r0, #20
 801381c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013820:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013824:	f108 0210 	add.w	r2, r8, #16
 8013828:	46f2      	mov	sl, lr
 801382a:	2100      	movs	r1, #0
 801382c:	f859 3b04 	ldr.w	r3, [r9], #4
 8013830:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013834:	fa11 f88b 	uxtah	r8, r1, fp
 8013838:	b299      	uxth	r1, r3
 801383a:	0c1b      	lsrs	r3, r3, #16
 801383c:	eba8 0801 	sub.w	r8, r8, r1
 8013840:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013844:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013848:	fa1f f888 	uxth.w	r8, r8
 801384c:	1419      	asrs	r1, r3, #16
 801384e:	454e      	cmp	r6, r9
 8013850:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013854:	f84a 3b04 	str.w	r3, [sl], #4
 8013858:	d8e8      	bhi.n	801382c <__mdiff+0x80>
 801385a:	1b33      	subs	r3, r6, r4
 801385c:	3b15      	subs	r3, #21
 801385e:	f023 0303 	bic.w	r3, r3, #3
 8013862:	3304      	adds	r3, #4
 8013864:	3415      	adds	r4, #21
 8013866:	42a6      	cmp	r6, r4
 8013868:	bf38      	it	cc
 801386a:	2304      	movcc	r3, #4
 801386c:	441d      	add	r5, r3
 801386e:	4473      	add	r3, lr
 8013870:	469e      	mov	lr, r3
 8013872:	462e      	mov	r6, r5
 8013874:	4566      	cmp	r6, ip
 8013876:	d30e      	bcc.n	8013896 <__mdiff+0xea>
 8013878:	f10c 0203 	add.w	r2, ip, #3
 801387c:	1b52      	subs	r2, r2, r5
 801387e:	f022 0203 	bic.w	r2, r2, #3
 8013882:	3d03      	subs	r5, #3
 8013884:	45ac      	cmp	ip, r5
 8013886:	bf38      	it	cc
 8013888:	2200      	movcc	r2, #0
 801388a:	4413      	add	r3, r2
 801388c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013890:	b17a      	cbz	r2, 80138b2 <__mdiff+0x106>
 8013892:	6107      	str	r7, [r0, #16]
 8013894:	e7a4      	b.n	80137e0 <__mdiff+0x34>
 8013896:	f856 8b04 	ldr.w	r8, [r6], #4
 801389a:	fa11 f288 	uxtah	r2, r1, r8
 801389e:	1414      	asrs	r4, r2, #16
 80138a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80138a4:	b292      	uxth	r2, r2
 80138a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80138aa:	f84e 2b04 	str.w	r2, [lr], #4
 80138ae:	1421      	asrs	r1, r4, #16
 80138b0:	e7e0      	b.n	8013874 <__mdiff+0xc8>
 80138b2:	3f01      	subs	r7, #1
 80138b4:	e7ea      	b.n	801388c <__mdiff+0xe0>
 80138b6:	bf00      	nop
 80138b8:	08015260 	.word	0x08015260
 80138bc:	08015271 	.word	0x08015271

080138c0 <__d2b>:
 80138c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80138c4:	460f      	mov	r7, r1
 80138c6:	2101      	movs	r1, #1
 80138c8:	ec59 8b10 	vmov	r8, r9, d0
 80138cc:	4616      	mov	r6, r2
 80138ce:	f7ff fcd5 	bl	801327c <_Balloc>
 80138d2:	4604      	mov	r4, r0
 80138d4:	b930      	cbnz	r0, 80138e4 <__d2b+0x24>
 80138d6:	4602      	mov	r2, r0
 80138d8:	4b24      	ldr	r3, [pc, #144]	; (801396c <__d2b+0xac>)
 80138da:	4825      	ldr	r0, [pc, #148]	; (8013970 <__d2b+0xb0>)
 80138dc:	f240 310f 	movw	r1, #783	; 0x30f
 80138e0:	f000 fa78 	bl	8013dd4 <__assert_func>
 80138e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80138e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80138ec:	bb2d      	cbnz	r5, 801393a <__d2b+0x7a>
 80138ee:	9301      	str	r3, [sp, #4]
 80138f0:	f1b8 0300 	subs.w	r3, r8, #0
 80138f4:	d026      	beq.n	8013944 <__d2b+0x84>
 80138f6:	4668      	mov	r0, sp
 80138f8:	9300      	str	r3, [sp, #0]
 80138fa:	f7ff fd87 	bl	801340c <__lo0bits>
 80138fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013902:	b1e8      	cbz	r0, 8013940 <__d2b+0x80>
 8013904:	f1c0 0320 	rsb	r3, r0, #32
 8013908:	fa02 f303 	lsl.w	r3, r2, r3
 801390c:	430b      	orrs	r3, r1
 801390e:	40c2      	lsrs	r2, r0
 8013910:	6163      	str	r3, [r4, #20]
 8013912:	9201      	str	r2, [sp, #4]
 8013914:	9b01      	ldr	r3, [sp, #4]
 8013916:	61a3      	str	r3, [r4, #24]
 8013918:	2b00      	cmp	r3, #0
 801391a:	bf14      	ite	ne
 801391c:	2202      	movne	r2, #2
 801391e:	2201      	moveq	r2, #1
 8013920:	6122      	str	r2, [r4, #16]
 8013922:	b1bd      	cbz	r5, 8013954 <__d2b+0x94>
 8013924:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013928:	4405      	add	r5, r0
 801392a:	603d      	str	r5, [r7, #0]
 801392c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013930:	6030      	str	r0, [r6, #0]
 8013932:	4620      	mov	r0, r4
 8013934:	b003      	add	sp, #12
 8013936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801393a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801393e:	e7d6      	b.n	80138ee <__d2b+0x2e>
 8013940:	6161      	str	r1, [r4, #20]
 8013942:	e7e7      	b.n	8013914 <__d2b+0x54>
 8013944:	a801      	add	r0, sp, #4
 8013946:	f7ff fd61 	bl	801340c <__lo0bits>
 801394a:	9b01      	ldr	r3, [sp, #4]
 801394c:	6163      	str	r3, [r4, #20]
 801394e:	3020      	adds	r0, #32
 8013950:	2201      	movs	r2, #1
 8013952:	e7e5      	b.n	8013920 <__d2b+0x60>
 8013954:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013958:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801395c:	6038      	str	r0, [r7, #0]
 801395e:	6918      	ldr	r0, [r3, #16]
 8013960:	f7ff fd34 	bl	80133cc <__hi0bits>
 8013964:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013968:	e7e2      	b.n	8013930 <__d2b+0x70>
 801396a:	bf00      	nop
 801396c:	08015260 	.word	0x08015260
 8013970:	08015271 	.word	0x08015271

08013974 <__ssputs_r>:
 8013974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013978:	688e      	ldr	r6, [r1, #8]
 801397a:	461f      	mov	r7, r3
 801397c:	42be      	cmp	r6, r7
 801397e:	680b      	ldr	r3, [r1, #0]
 8013980:	4682      	mov	sl, r0
 8013982:	460c      	mov	r4, r1
 8013984:	4690      	mov	r8, r2
 8013986:	d82c      	bhi.n	80139e2 <__ssputs_r+0x6e>
 8013988:	898a      	ldrh	r2, [r1, #12]
 801398a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801398e:	d026      	beq.n	80139de <__ssputs_r+0x6a>
 8013990:	6965      	ldr	r5, [r4, #20]
 8013992:	6909      	ldr	r1, [r1, #16]
 8013994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013998:	eba3 0901 	sub.w	r9, r3, r1
 801399c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80139a0:	1c7b      	adds	r3, r7, #1
 80139a2:	444b      	add	r3, r9
 80139a4:	106d      	asrs	r5, r5, #1
 80139a6:	429d      	cmp	r5, r3
 80139a8:	bf38      	it	cc
 80139aa:	461d      	movcc	r5, r3
 80139ac:	0553      	lsls	r3, r2, #21
 80139ae:	d527      	bpl.n	8013a00 <__ssputs_r+0x8c>
 80139b0:	4629      	mov	r1, r5
 80139b2:	f7ff fbd7 	bl	8013164 <_malloc_r>
 80139b6:	4606      	mov	r6, r0
 80139b8:	b360      	cbz	r0, 8013a14 <__ssputs_r+0xa0>
 80139ba:	6921      	ldr	r1, [r4, #16]
 80139bc:	464a      	mov	r2, r9
 80139be:	f7fe fcd4 	bl	801236a <memcpy>
 80139c2:	89a3      	ldrh	r3, [r4, #12]
 80139c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80139c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80139cc:	81a3      	strh	r3, [r4, #12]
 80139ce:	6126      	str	r6, [r4, #16]
 80139d0:	6165      	str	r5, [r4, #20]
 80139d2:	444e      	add	r6, r9
 80139d4:	eba5 0509 	sub.w	r5, r5, r9
 80139d8:	6026      	str	r6, [r4, #0]
 80139da:	60a5      	str	r5, [r4, #8]
 80139dc:	463e      	mov	r6, r7
 80139de:	42be      	cmp	r6, r7
 80139e0:	d900      	bls.n	80139e4 <__ssputs_r+0x70>
 80139e2:	463e      	mov	r6, r7
 80139e4:	6820      	ldr	r0, [r4, #0]
 80139e6:	4632      	mov	r2, r6
 80139e8:	4641      	mov	r1, r8
 80139ea:	f000 f9c9 	bl	8013d80 <memmove>
 80139ee:	68a3      	ldr	r3, [r4, #8]
 80139f0:	1b9b      	subs	r3, r3, r6
 80139f2:	60a3      	str	r3, [r4, #8]
 80139f4:	6823      	ldr	r3, [r4, #0]
 80139f6:	4433      	add	r3, r6
 80139f8:	6023      	str	r3, [r4, #0]
 80139fa:	2000      	movs	r0, #0
 80139fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a00:	462a      	mov	r2, r5
 8013a02:	f000 fa2d 	bl	8013e60 <_realloc_r>
 8013a06:	4606      	mov	r6, r0
 8013a08:	2800      	cmp	r0, #0
 8013a0a:	d1e0      	bne.n	80139ce <__ssputs_r+0x5a>
 8013a0c:	6921      	ldr	r1, [r4, #16]
 8013a0e:	4650      	mov	r0, sl
 8013a10:	f7ff fb34 	bl	801307c <_free_r>
 8013a14:	230c      	movs	r3, #12
 8013a16:	f8ca 3000 	str.w	r3, [sl]
 8013a1a:	89a3      	ldrh	r3, [r4, #12]
 8013a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a20:	81a3      	strh	r3, [r4, #12]
 8013a22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a26:	e7e9      	b.n	80139fc <__ssputs_r+0x88>

08013a28 <_svfiprintf_r>:
 8013a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a2c:	4698      	mov	r8, r3
 8013a2e:	898b      	ldrh	r3, [r1, #12]
 8013a30:	061b      	lsls	r3, r3, #24
 8013a32:	b09d      	sub	sp, #116	; 0x74
 8013a34:	4607      	mov	r7, r0
 8013a36:	460d      	mov	r5, r1
 8013a38:	4614      	mov	r4, r2
 8013a3a:	d50e      	bpl.n	8013a5a <_svfiprintf_r+0x32>
 8013a3c:	690b      	ldr	r3, [r1, #16]
 8013a3e:	b963      	cbnz	r3, 8013a5a <_svfiprintf_r+0x32>
 8013a40:	2140      	movs	r1, #64	; 0x40
 8013a42:	f7ff fb8f 	bl	8013164 <_malloc_r>
 8013a46:	6028      	str	r0, [r5, #0]
 8013a48:	6128      	str	r0, [r5, #16]
 8013a4a:	b920      	cbnz	r0, 8013a56 <_svfiprintf_r+0x2e>
 8013a4c:	230c      	movs	r3, #12
 8013a4e:	603b      	str	r3, [r7, #0]
 8013a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a54:	e0d0      	b.n	8013bf8 <_svfiprintf_r+0x1d0>
 8013a56:	2340      	movs	r3, #64	; 0x40
 8013a58:	616b      	str	r3, [r5, #20]
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8013a5e:	2320      	movs	r3, #32
 8013a60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013a64:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a68:	2330      	movs	r3, #48	; 0x30
 8013a6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013c10 <_svfiprintf_r+0x1e8>
 8013a6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013a72:	f04f 0901 	mov.w	r9, #1
 8013a76:	4623      	mov	r3, r4
 8013a78:	469a      	mov	sl, r3
 8013a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a7e:	b10a      	cbz	r2, 8013a84 <_svfiprintf_r+0x5c>
 8013a80:	2a25      	cmp	r2, #37	; 0x25
 8013a82:	d1f9      	bne.n	8013a78 <_svfiprintf_r+0x50>
 8013a84:	ebba 0b04 	subs.w	fp, sl, r4
 8013a88:	d00b      	beq.n	8013aa2 <_svfiprintf_r+0x7a>
 8013a8a:	465b      	mov	r3, fp
 8013a8c:	4622      	mov	r2, r4
 8013a8e:	4629      	mov	r1, r5
 8013a90:	4638      	mov	r0, r7
 8013a92:	f7ff ff6f 	bl	8013974 <__ssputs_r>
 8013a96:	3001      	adds	r0, #1
 8013a98:	f000 80a9 	beq.w	8013bee <_svfiprintf_r+0x1c6>
 8013a9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a9e:	445a      	add	r2, fp
 8013aa0:	9209      	str	r2, [sp, #36]	; 0x24
 8013aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	f000 80a1 	beq.w	8013bee <_svfiprintf_r+0x1c6>
 8013aac:	2300      	movs	r3, #0
 8013aae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013ab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013ab6:	f10a 0a01 	add.w	sl, sl, #1
 8013aba:	9304      	str	r3, [sp, #16]
 8013abc:	9307      	str	r3, [sp, #28]
 8013abe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013ac2:	931a      	str	r3, [sp, #104]	; 0x68
 8013ac4:	4654      	mov	r4, sl
 8013ac6:	2205      	movs	r2, #5
 8013ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013acc:	4850      	ldr	r0, [pc, #320]	; (8013c10 <_svfiprintf_r+0x1e8>)
 8013ace:	f7ec fba7 	bl	8000220 <memchr>
 8013ad2:	9a04      	ldr	r2, [sp, #16]
 8013ad4:	b9d8      	cbnz	r0, 8013b0e <_svfiprintf_r+0xe6>
 8013ad6:	06d0      	lsls	r0, r2, #27
 8013ad8:	bf44      	itt	mi
 8013ada:	2320      	movmi	r3, #32
 8013adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ae0:	0711      	lsls	r1, r2, #28
 8013ae2:	bf44      	itt	mi
 8013ae4:	232b      	movmi	r3, #43	; 0x2b
 8013ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013aea:	f89a 3000 	ldrb.w	r3, [sl]
 8013aee:	2b2a      	cmp	r3, #42	; 0x2a
 8013af0:	d015      	beq.n	8013b1e <_svfiprintf_r+0xf6>
 8013af2:	9a07      	ldr	r2, [sp, #28]
 8013af4:	4654      	mov	r4, sl
 8013af6:	2000      	movs	r0, #0
 8013af8:	f04f 0c0a 	mov.w	ip, #10
 8013afc:	4621      	mov	r1, r4
 8013afe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b02:	3b30      	subs	r3, #48	; 0x30
 8013b04:	2b09      	cmp	r3, #9
 8013b06:	d94d      	bls.n	8013ba4 <_svfiprintf_r+0x17c>
 8013b08:	b1b0      	cbz	r0, 8013b38 <_svfiprintf_r+0x110>
 8013b0a:	9207      	str	r2, [sp, #28]
 8013b0c:	e014      	b.n	8013b38 <_svfiprintf_r+0x110>
 8013b0e:	eba0 0308 	sub.w	r3, r0, r8
 8013b12:	fa09 f303 	lsl.w	r3, r9, r3
 8013b16:	4313      	orrs	r3, r2
 8013b18:	9304      	str	r3, [sp, #16]
 8013b1a:	46a2      	mov	sl, r4
 8013b1c:	e7d2      	b.n	8013ac4 <_svfiprintf_r+0x9c>
 8013b1e:	9b03      	ldr	r3, [sp, #12]
 8013b20:	1d19      	adds	r1, r3, #4
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	9103      	str	r1, [sp, #12]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	bfbb      	ittet	lt
 8013b2a:	425b      	neglt	r3, r3
 8013b2c:	f042 0202 	orrlt.w	r2, r2, #2
 8013b30:	9307      	strge	r3, [sp, #28]
 8013b32:	9307      	strlt	r3, [sp, #28]
 8013b34:	bfb8      	it	lt
 8013b36:	9204      	strlt	r2, [sp, #16]
 8013b38:	7823      	ldrb	r3, [r4, #0]
 8013b3a:	2b2e      	cmp	r3, #46	; 0x2e
 8013b3c:	d10c      	bne.n	8013b58 <_svfiprintf_r+0x130>
 8013b3e:	7863      	ldrb	r3, [r4, #1]
 8013b40:	2b2a      	cmp	r3, #42	; 0x2a
 8013b42:	d134      	bne.n	8013bae <_svfiprintf_r+0x186>
 8013b44:	9b03      	ldr	r3, [sp, #12]
 8013b46:	1d1a      	adds	r2, r3, #4
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	9203      	str	r2, [sp, #12]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	bfb8      	it	lt
 8013b50:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013b54:	3402      	adds	r4, #2
 8013b56:	9305      	str	r3, [sp, #20]
 8013b58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013c20 <_svfiprintf_r+0x1f8>
 8013b5c:	7821      	ldrb	r1, [r4, #0]
 8013b5e:	2203      	movs	r2, #3
 8013b60:	4650      	mov	r0, sl
 8013b62:	f7ec fb5d 	bl	8000220 <memchr>
 8013b66:	b138      	cbz	r0, 8013b78 <_svfiprintf_r+0x150>
 8013b68:	9b04      	ldr	r3, [sp, #16]
 8013b6a:	eba0 000a 	sub.w	r0, r0, sl
 8013b6e:	2240      	movs	r2, #64	; 0x40
 8013b70:	4082      	lsls	r2, r0
 8013b72:	4313      	orrs	r3, r2
 8013b74:	3401      	adds	r4, #1
 8013b76:	9304      	str	r3, [sp, #16]
 8013b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b7c:	4825      	ldr	r0, [pc, #148]	; (8013c14 <_svfiprintf_r+0x1ec>)
 8013b7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013b82:	2206      	movs	r2, #6
 8013b84:	f7ec fb4c 	bl	8000220 <memchr>
 8013b88:	2800      	cmp	r0, #0
 8013b8a:	d038      	beq.n	8013bfe <_svfiprintf_r+0x1d6>
 8013b8c:	4b22      	ldr	r3, [pc, #136]	; (8013c18 <_svfiprintf_r+0x1f0>)
 8013b8e:	bb1b      	cbnz	r3, 8013bd8 <_svfiprintf_r+0x1b0>
 8013b90:	9b03      	ldr	r3, [sp, #12]
 8013b92:	3307      	adds	r3, #7
 8013b94:	f023 0307 	bic.w	r3, r3, #7
 8013b98:	3308      	adds	r3, #8
 8013b9a:	9303      	str	r3, [sp, #12]
 8013b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b9e:	4433      	add	r3, r6
 8013ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8013ba2:	e768      	b.n	8013a76 <_svfiprintf_r+0x4e>
 8013ba4:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ba8:	460c      	mov	r4, r1
 8013baa:	2001      	movs	r0, #1
 8013bac:	e7a6      	b.n	8013afc <_svfiprintf_r+0xd4>
 8013bae:	2300      	movs	r3, #0
 8013bb0:	3401      	adds	r4, #1
 8013bb2:	9305      	str	r3, [sp, #20]
 8013bb4:	4619      	mov	r1, r3
 8013bb6:	f04f 0c0a 	mov.w	ip, #10
 8013bba:	4620      	mov	r0, r4
 8013bbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013bc0:	3a30      	subs	r2, #48	; 0x30
 8013bc2:	2a09      	cmp	r2, #9
 8013bc4:	d903      	bls.n	8013bce <_svfiprintf_r+0x1a6>
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d0c6      	beq.n	8013b58 <_svfiprintf_r+0x130>
 8013bca:	9105      	str	r1, [sp, #20]
 8013bcc:	e7c4      	b.n	8013b58 <_svfiprintf_r+0x130>
 8013bce:	fb0c 2101 	mla	r1, ip, r1, r2
 8013bd2:	4604      	mov	r4, r0
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	e7f0      	b.n	8013bba <_svfiprintf_r+0x192>
 8013bd8:	ab03      	add	r3, sp, #12
 8013bda:	9300      	str	r3, [sp, #0]
 8013bdc:	462a      	mov	r2, r5
 8013bde:	4b0f      	ldr	r3, [pc, #60]	; (8013c1c <_svfiprintf_r+0x1f4>)
 8013be0:	a904      	add	r1, sp, #16
 8013be2:	4638      	mov	r0, r7
 8013be4:	f7fd fdec 	bl	80117c0 <_printf_float>
 8013be8:	1c42      	adds	r2, r0, #1
 8013bea:	4606      	mov	r6, r0
 8013bec:	d1d6      	bne.n	8013b9c <_svfiprintf_r+0x174>
 8013bee:	89ab      	ldrh	r3, [r5, #12]
 8013bf0:	065b      	lsls	r3, r3, #25
 8013bf2:	f53f af2d 	bmi.w	8013a50 <_svfiprintf_r+0x28>
 8013bf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013bf8:	b01d      	add	sp, #116	; 0x74
 8013bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bfe:	ab03      	add	r3, sp, #12
 8013c00:	9300      	str	r3, [sp, #0]
 8013c02:	462a      	mov	r2, r5
 8013c04:	4b05      	ldr	r3, [pc, #20]	; (8013c1c <_svfiprintf_r+0x1f4>)
 8013c06:	a904      	add	r1, sp, #16
 8013c08:	4638      	mov	r0, r7
 8013c0a:	f7fe f87d 	bl	8011d08 <_printf_i>
 8013c0e:	e7eb      	b.n	8013be8 <_svfiprintf_r+0x1c0>
 8013c10:	080153cc 	.word	0x080153cc
 8013c14:	080153d6 	.word	0x080153d6
 8013c18:	080117c1 	.word	0x080117c1
 8013c1c:	08013975 	.word	0x08013975
 8013c20:	080153d2 	.word	0x080153d2

08013c24 <__sflush_r>:
 8013c24:	898a      	ldrh	r2, [r1, #12]
 8013c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c2a:	4605      	mov	r5, r0
 8013c2c:	0710      	lsls	r0, r2, #28
 8013c2e:	460c      	mov	r4, r1
 8013c30:	d458      	bmi.n	8013ce4 <__sflush_r+0xc0>
 8013c32:	684b      	ldr	r3, [r1, #4]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	dc05      	bgt.n	8013c44 <__sflush_r+0x20>
 8013c38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	dc02      	bgt.n	8013c44 <__sflush_r+0x20>
 8013c3e:	2000      	movs	r0, #0
 8013c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013c46:	2e00      	cmp	r6, #0
 8013c48:	d0f9      	beq.n	8013c3e <__sflush_r+0x1a>
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013c50:	682f      	ldr	r7, [r5, #0]
 8013c52:	6a21      	ldr	r1, [r4, #32]
 8013c54:	602b      	str	r3, [r5, #0]
 8013c56:	d032      	beq.n	8013cbe <__sflush_r+0x9a>
 8013c58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013c5a:	89a3      	ldrh	r3, [r4, #12]
 8013c5c:	075a      	lsls	r2, r3, #29
 8013c5e:	d505      	bpl.n	8013c6c <__sflush_r+0x48>
 8013c60:	6863      	ldr	r3, [r4, #4]
 8013c62:	1ac0      	subs	r0, r0, r3
 8013c64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013c66:	b10b      	cbz	r3, 8013c6c <__sflush_r+0x48>
 8013c68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013c6a:	1ac0      	subs	r0, r0, r3
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	4602      	mov	r2, r0
 8013c70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013c72:	6a21      	ldr	r1, [r4, #32]
 8013c74:	4628      	mov	r0, r5
 8013c76:	47b0      	blx	r6
 8013c78:	1c43      	adds	r3, r0, #1
 8013c7a:	89a3      	ldrh	r3, [r4, #12]
 8013c7c:	d106      	bne.n	8013c8c <__sflush_r+0x68>
 8013c7e:	6829      	ldr	r1, [r5, #0]
 8013c80:	291d      	cmp	r1, #29
 8013c82:	d82b      	bhi.n	8013cdc <__sflush_r+0xb8>
 8013c84:	4a29      	ldr	r2, [pc, #164]	; (8013d2c <__sflush_r+0x108>)
 8013c86:	410a      	asrs	r2, r1
 8013c88:	07d6      	lsls	r6, r2, #31
 8013c8a:	d427      	bmi.n	8013cdc <__sflush_r+0xb8>
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	6062      	str	r2, [r4, #4]
 8013c90:	04d9      	lsls	r1, r3, #19
 8013c92:	6922      	ldr	r2, [r4, #16]
 8013c94:	6022      	str	r2, [r4, #0]
 8013c96:	d504      	bpl.n	8013ca2 <__sflush_r+0x7e>
 8013c98:	1c42      	adds	r2, r0, #1
 8013c9a:	d101      	bne.n	8013ca0 <__sflush_r+0x7c>
 8013c9c:	682b      	ldr	r3, [r5, #0]
 8013c9e:	b903      	cbnz	r3, 8013ca2 <__sflush_r+0x7e>
 8013ca0:	6560      	str	r0, [r4, #84]	; 0x54
 8013ca2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ca4:	602f      	str	r7, [r5, #0]
 8013ca6:	2900      	cmp	r1, #0
 8013ca8:	d0c9      	beq.n	8013c3e <__sflush_r+0x1a>
 8013caa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013cae:	4299      	cmp	r1, r3
 8013cb0:	d002      	beq.n	8013cb8 <__sflush_r+0x94>
 8013cb2:	4628      	mov	r0, r5
 8013cb4:	f7ff f9e2 	bl	801307c <_free_r>
 8013cb8:	2000      	movs	r0, #0
 8013cba:	6360      	str	r0, [r4, #52]	; 0x34
 8013cbc:	e7c0      	b.n	8013c40 <__sflush_r+0x1c>
 8013cbe:	2301      	movs	r3, #1
 8013cc0:	4628      	mov	r0, r5
 8013cc2:	47b0      	blx	r6
 8013cc4:	1c41      	adds	r1, r0, #1
 8013cc6:	d1c8      	bne.n	8013c5a <__sflush_r+0x36>
 8013cc8:	682b      	ldr	r3, [r5, #0]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d0c5      	beq.n	8013c5a <__sflush_r+0x36>
 8013cce:	2b1d      	cmp	r3, #29
 8013cd0:	d001      	beq.n	8013cd6 <__sflush_r+0xb2>
 8013cd2:	2b16      	cmp	r3, #22
 8013cd4:	d101      	bne.n	8013cda <__sflush_r+0xb6>
 8013cd6:	602f      	str	r7, [r5, #0]
 8013cd8:	e7b1      	b.n	8013c3e <__sflush_r+0x1a>
 8013cda:	89a3      	ldrh	r3, [r4, #12]
 8013cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ce0:	81a3      	strh	r3, [r4, #12]
 8013ce2:	e7ad      	b.n	8013c40 <__sflush_r+0x1c>
 8013ce4:	690f      	ldr	r7, [r1, #16]
 8013ce6:	2f00      	cmp	r7, #0
 8013ce8:	d0a9      	beq.n	8013c3e <__sflush_r+0x1a>
 8013cea:	0793      	lsls	r3, r2, #30
 8013cec:	680e      	ldr	r6, [r1, #0]
 8013cee:	bf08      	it	eq
 8013cf0:	694b      	ldreq	r3, [r1, #20]
 8013cf2:	600f      	str	r7, [r1, #0]
 8013cf4:	bf18      	it	ne
 8013cf6:	2300      	movne	r3, #0
 8013cf8:	eba6 0807 	sub.w	r8, r6, r7
 8013cfc:	608b      	str	r3, [r1, #8]
 8013cfe:	f1b8 0f00 	cmp.w	r8, #0
 8013d02:	dd9c      	ble.n	8013c3e <__sflush_r+0x1a>
 8013d04:	6a21      	ldr	r1, [r4, #32]
 8013d06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013d08:	4643      	mov	r3, r8
 8013d0a:	463a      	mov	r2, r7
 8013d0c:	4628      	mov	r0, r5
 8013d0e:	47b0      	blx	r6
 8013d10:	2800      	cmp	r0, #0
 8013d12:	dc06      	bgt.n	8013d22 <__sflush_r+0xfe>
 8013d14:	89a3      	ldrh	r3, [r4, #12]
 8013d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d1a:	81a3      	strh	r3, [r4, #12]
 8013d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d20:	e78e      	b.n	8013c40 <__sflush_r+0x1c>
 8013d22:	4407      	add	r7, r0
 8013d24:	eba8 0800 	sub.w	r8, r8, r0
 8013d28:	e7e9      	b.n	8013cfe <__sflush_r+0xda>
 8013d2a:	bf00      	nop
 8013d2c:	dfbffffe 	.word	0xdfbffffe

08013d30 <_fflush_r>:
 8013d30:	b538      	push	{r3, r4, r5, lr}
 8013d32:	690b      	ldr	r3, [r1, #16]
 8013d34:	4605      	mov	r5, r0
 8013d36:	460c      	mov	r4, r1
 8013d38:	b913      	cbnz	r3, 8013d40 <_fflush_r+0x10>
 8013d3a:	2500      	movs	r5, #0
 8013d3c:	4628      	mov	r0, r5
 8013d3e:	bd38      	pop	{r3, r4, r5, pc}
 8013d40:	b118      	cbz	r0, 8013d4a <_fflush_r+0x1a>
 8013d42:	6a03      	ldr	r3, [r0, #32]
 8013d44:	b90b      	cbnz	r3, 8013d4a <_fflush_r+0x1a>
 8013d46:	f7fe f98d 	bl	8012064 <__sinit>
 8013d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d0f3      	beq.n	8013d3a <_fflush_r+0xa>
 8013d52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013d54:	07d0      	lsls	r0, r2, #31
 8013d56:	d404      	bmi.n	8013d62 <_fflush_r+0x32>
 8013d58:	0599      	lsls	r1, r3, #22
 8013d5a:	d402      	bmi.n	8013d62 <_fflush_r+0x32>
 8013d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013d5e:	f7fe fb02 	bl	8012366 <__retarget_lock_acquire_recursive>
 8013d62:	4628      	mov	r0, r5
 8013d64:	4621      	mov	r1, r4
 8013d66:	f7ff ff5d 	bl	8013c24 <__sflush_r>
 8013d6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013d6c:	07da      	lsls	r2, r3, #31
 8013d6e:	4605      	mov	r5, r0
 8013d70:	d4e4      	bmi.n	8013d3c <_fflush_r+0xc>
 8013d72:	89a3      	ldrh	r3, [r4, #12]
 8013d74:	059b      	lsls	r3, r3, #22
 8013d76:	d4e1      	bmi.n	8013d3c <_fflush_r+0xc>
 8013d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013d7a:	f7fe faf5 	bl	8012368 <__retarget_lock_release_recursive>
 8013d7e:	e7dd      	b.n	8013d3c <_fflush_r+0xc>

08013d80 <memmove>:
 8013d80:	4288      	cmp	r0, r1
 8013d82:	b510      	push	{r4, lr}
 8013d84:	eb01 0402 	add.w	r4, r1, r2
 8013d88:	d902      	bls.n	8013d90 <memmove+0x10>
 8013d8a:	4284      	cmp	r4, r0
 8013d8c:	4623      	mov	r3, r4
 8013d8e:	d807      	bhi.n	8013da0 <memmove+0x20>
 8013d90:	1e43      	subs	r3, r0, #1
 8013d92:	42a1      	cmp	r1, r4
 8013d94:	d008      	beq.n	8013da8 <memmove+0x28>
 8013d96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013d9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013d9e:	e7f8      	b.n	8013d92 <memmove+0x12>
 8013da0:	4402      	add	r2, r0
 8013da2:	4601      	mov	r1, r0
 8013da4:	428a      	cmp	r2, r1
 8013da6:	d100      	bne.n	8013daa <memmove+0x2a>
 8013da8:	bd10      	pop	{r4, pc}
 8013daa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013dae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013db2:	e7f7      	b.n	8013da4 <memmove+0x24>

08013db4 <_sbrk_r>:
 8013db4:	b538      	push	{r3, r4, r5, lr}
 8013db6:	4d06      	ldr	r5, [pc, #24]	; (8013dd0 <_sbrk_r+0x1c>)
 8013db8:	2300      	movs	r3, #0
 8013dba:	4604      	mov	r4, r0
 8013dbc:	4608      	mov	r0, r1
 8013dbe:	602b      	str	r3, [r5, #0]
 8013dc0:	f7ef f9d4 	bl	800316c <_sbrk>
 8013dc4:	1c43      	adds	r3, r0, #1
 8013dc6:	d102      	bne.n	8013dce <_sbrk_r+0x1a>
 8013dc8:	682b      	ldr	r3, [r5, #0]
 8013dca:	b103      	cbz	r3, 8013dce <_sbrk_r+0x1a>
 8013dcc:	6023      	str	r3, [r4, #0]
 8013dce:	bd38      	pop	{r3, r4, r5, pc}
 8013dd0:	20005ad0 	.word	0x20005ad0

08013dd4 <__assert_func>:
 8013dd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013dd6:	4614      	mov	r4, r2
 8013dd8:	461a      	mov	r2, r3
 8013dda:	4b09      	ldr	r3, [pc, #36]	; (8013e00 <__assert_func+0x2c>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	4605      	mov	r5, r0
 8013de0:	68d8      	ldr	r0, [r3, #12]
 8013de2:	b14c      	cbz	r4, 8013df8 <__assert_func+0x24>
 8013de4:	4b07      	ldr	r3, [pc, #28]	; (8013e04 <__assert_func+0x30>)
 8013de6:	9100      	str	r1, [sp, #0]
 8013de8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013dec:	4906      	ldr	r1, [pc, #24]	; (8013e08 <__assert_func+0x34>)
 8013dee:	462b      	mov	r3, r5
 8013df0:	f000 f872 	bl	8013ed8 <fiprintf>
 8013df4:	f000 f882 	bl	8013efc <abort>
 8013df8:	4b04      	ldr	r3, [pc, #16]	; (8013e0c <__assert_func+0x38>)
 8013dfa:	461c      	mov	r4, r3
 8013dfc:	e7f3      	b.n	8013de6 <__assert_func+0x12>
 8013dfe:	bf00      	nop
 8013e00:	200001e0 	.word	0x200001e0
 8013e04:	080153e7 	.word	0x080153e7
 8013e08:	080153f4 	.word	0x080153f4
 8013e0c:	08015422 	.word	0x08015422

08013e10 <_calloc_r>:
 8013e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013e12:	fba1 2402 	umull	r2, r4, r1, r2
 8013e16:	b94c      	cbnz	r4, 8013e2c <_calloc_r+0x1c>
 8013e18:	4611      	mov	r1, r2
 8013e1a:	9201      	str	r2, [sp, #4]
 8013e1c:	f7ff f9a2 	bl	8013164 <_malloc_r>
 8013e20:	9a01      	ldr	r2, [sp, #4]
 8013e22:	4605      	mov	r5, r0
 8013e24:	b930      	cbnz	r0, 8013e34 <_calloc_r+0x24>
 8013e26:	4628      	mov	r0, r5
 8013e28:	b003      	add	sp, #12
 8013e2a:	bd30      	pop	{r4, r5, pc}
 8013e2c:	220c      	movs	r2, #12
 8013e2e:	6002      	str	r2, [r0, #0]
 8013e30:	2500      	movs	r5, #0
 8013e32:	e7f8      	b.n	8013e26 <_calloc_r+0x16>
 8013e34:	4621      	mov	r1, r4
 8013e36:	f7fe f9c2 	bl	80121be <memset>
 8013e3a:	e7f4      	b.n	8013e26 <_calloc_r+0x16>

08013e3c <__ascii_mbtowc>:
 8013e3c:	b082      	sub	sp, #8
 8013e3e:	b901      	cbnz	r1, 8013e42 <__ascii_mbtowc+0x6>
 8013e40:	a901      	add	r1, sp, #4
 8013e42:	b142      	cbz	r2, 8013e56 <__ascii_mbtowc+0x1a>
 8013e44:	b14b      	cbz	r3, 8013e5a <__ascii_mbtowc+0x1e>
 8013e46:	7813      	ldrb	r3, [r2, #0]
 8013e48:	600b      	str	r3, [r1, #0]
 8013e4a:	7812      	ldrb	r2, [r2, #0]
 8013e4c:	1e10      	subs	r0, r2, #0
 8013e4e:	bf18      	it	ne
 8013e50:	2001      	movne	r0, #1
 8013e52:	b002      	add	sp, #8
 8013e54:	4770      	bx	lr
 8013e56:	4610      	mov	r0, r2
 8013e58:	e7fb      	b.n	8013e52 <__ascii_mbtowc+0x16>
 8013e5a:	f06f 0001 	mvn.w	r0, #1
 8013e5e:	e7f8      	b.n	8013e52 <__ascii_mbtowc+0x16>

08013e60 <_realloc_r>:
 8013e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e64:	4680      	mov	r8, r0
 8013e66:	4614      	mov	r4, r2
 8013e68:	460e      	mov	r6, r1
 8013e6a:	b921      	cbnz	r1, 8013e76 <_realloc_r+0x16>
 8013e6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e70:	4611      	mov	r1, r2
 8013e72:	f7ff b977 	b.w	8013164 <_malloc_r>
 8013e76:	b92a      	cbnz	r2, 8013e84 <_realloc_r+0x24>
 8013e78:	f7ff f900 	bl	801307c <_free_r>
 8013e7c:	4625      	mov	r5, r4
 8013e7e:	4628      	mov	r0, r5
 8013e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e84:	f000 f841 	bl	8013f0a <_malloc_usable_size_r>
 8013e88:	4284      	cmp	r4, r0
 8013e8a:	4607      	mov	r7, r0
 8013e8c:	d802      	bhi.n	8013e94 <_realloc_r+0x34>
 8013e8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013e92:	d812      	bhi.n	8013eba <_realloc_r+0x5a>
 8013e94:	4621      	mov	r1, r4
 8013e96:	4640      	mov	r0, r8
 8013e98:	f7ff f964 	bl	8013164 <_malloc_r>
 8013e9c:	4605      	mov	r5, r0
 8013e9e:	2800      	cmp	r0, #0
 8013ea0:	d0ed      	beq.n	8013e7e <_realloc_r+0x1e>
 8013ea2:	42bc      	cmp	r4, r7
 8013ea4:	4622      	mov	r2, r4
 8013ea6:	4631      	mov	r1, r6
 8013ea8:	bf28      	it	cs
 8013eaa:	463a      	movcs	r2, r7
 8013eac:	f7fe fa5d 	bl	801236a <memcpy>
 8013eb0:	4631      	mov	r1, r6
 8013eb2:	4640      	mov	r0, r8
 8013eb4:	f7ff f8e2 	bl	801307c <_free_r>
 8013eb8:	e7e1      	b.n	8013e7e <_realloc_r+0x1e>
 8013eba:	4635      	mov	r5, r6
 8013ebc:	e7df      	b.n	8013e7e <_realloc_r+0x1e>

08013ebe <__ascii_wctomb>:
 8013ebe:	b149      	cbz	r1, 8013ed4 <__ascii_wctomb+0x16>
 8013ec0:	2aff      	cmp	r2, #255	; 0xff
 8013ec2:	bf85      	ittet	hi
 8013ec4:	238a      	movhi	r3, #138	; 0x8a
 8013ec6:	6003      	strhi	r3, [r0, #0]
 8013ec8:	700a      	strbls	r2, [r1, #0]
 8013eca:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013ece:	bf98      	it	ls
 8013ed0:	2001      	movls	r0, #1
 8013ed2:	4770      	bx	lr
 8013ed4:	4608      	mov	r0, r1
 8013ed6:	4770      	bx	lr

08013ed8 <fiprintf>:
 8013ed8:	b40e      	push	{r1, r2, r3}
 8013eda:	b503      	push	{r0, r1, lr}
 8013edc:	4601      	mov	r1, r0
 8013ede:	ab03      	add	r3, sp, #12
 8013ee0:	4805      	ldr	r0, [pc, #20]	; (8013ef8 <fiprintf+0x20>)
 8013ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ee6:	6800      	ldr	r0, [r0, #0]
 8013ee8:	9301      	str	r3, [sp, #4]
 8013eea:	f000 f83f 	bl	8013f6c <_vfiprintf_r>
 8013eee:	b002      	add	sp, #8
 8013ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ef4:	b003      	add	sp, #12
 8013ef6:	4770      	bx	lr
 8013ef8:	200001e0 	.word	0x200001e0

08013efc <abort>:
 8013efc:	b508      	push	{r3, lr}
 8013efe:	2006      	movs	r0, #6
 8013f00:	f000 fa0c 	bl	801431c <raise>
 8013f04:	2001      	movs	r0, #1
 8013f06:	f7ef f8b9 	bl	800307c <_exit>

08013f0a <_malloc_usable_size_r>:
 8013f0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f0e:	1f18      	subs	r0, r3, #4
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	bfbc      	itt	lt
 8013f14:	580b      	ldrlt	r3, [r1, r0]
 8013f16:	18c0      	addlt	r0, r0, r3
 8013f18:	4770      	bx	lr

08013f1a <__sfputc_r>:
 8013f1a:	6893      	ldr	r3, [r2, #8]
 8013f1c:	3b01      	subs	r3, #1
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	b410      	push	{r4}
 8013f22:	6093      	str	r3, [r2, #8]
 8013f24:	da08      	bge.n	8013f38 <__sfputc_r+0x1e>
 8013f26:	6994      	ldr	r4, [r2, #24]
 8013f28:	42a3      	cmp	r3, r4
 8013f2a:	db01      	blt.n	8013f30 <__sfputc_r+0x16>
 8013f2c:	290a      	cmp	r1, #10
 8013f2e:	d103      	bne.n	8013f38 <__sfputc_r+0x1e>
 8013f30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f34:	f000 b934 	b.w	80141a0 <__swbuf_r>
 8013f38:	6813      	ldr	r3, [r2, #0]
 8013f3a:	1c58      	adds	r0, r3, #1
 8013f3c:	6010      	str	r0, [r2, #0]
 8013f3e:	7019      	strb	r1, [r3, #0]
 8013f40:	4608      	mov	r0, r1
 8013f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f46:	4770      	bx	lr

08013f48 <__sfputs_r>:
 8013f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f4a:	4606      	mov	r6, r0
 8013f4c:	460f      	mov	r7, r1
 8013f4e:	4614      	mov	r4, r2
 8013f50:	18d5      	adds	r5, r2, r3
 8013f52:	42ac      	cmp	r4, r5
 8013f54:	d101      	bne.n	8013f5a <__sfputs_r+0x12>
 8013f56:	2000      	movs	r0, #0
 8013f58:	e007      	b.n	8013f6a <__sfputs_r+0x22>
 8013f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f5e:	463a      	mov	r2, r7
 8013f60:	4630      	mov	r0, r6
 8013f62:	f7ff ffda 	bl	8013f1a <__sfputc_r>
 8013f66:	1c43      	adds	r3, r0, #1
 8013f68:	d1f3      	bne.n	8013f52 <__sfputs_r+0xa>
 8013f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013f6c <_vfiprintf_r>:
 8013f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f70:	460d      	mov	r5, r1
 8013f72:	b09d      	sub	sp, #116	; 0x74
 8013f74:	4614      	mov	r4, r2
 8013f76:	4698      	mov	r8, r3
 8013f78:	4606      	mov	r6, r0
 8013f7a:	b118      	cbz	r0, 8013f84 <_vfiprintf_r+0x18>
 8013f7c:	6a03      	ldr	r3, [r0, #32]
 8013f7e:	b90b      	cbnz	r3, 8013f84 <_vfiprintf_r+0x18>
 8013f80:	f7fe f870 	bl	8012064 <__sinit>
 8013f84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013f86:	07d9      	lsls	r1, r3, #31
 8013f88:	d405      	bmi.n	8013f96 <_vfiprintf_r+0x2a>
 8013f8a:	89ab      	ldrh	r3, [r5, #12]
 8013f8c:	059a      	lsls	r2, r3, #22
 8013f8e:	d402      	bmi.n	8013f96 <_vfiprintf_r+0x2a>
 8013f90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013f92:	f7fe f9e8 	bl	8012366 <__retarget_lock_acquire_recursive>
 8013f96:	89ab      	ldrh	r3, [r5, #12]
 8013f98:	071b      	lsls	r3, r3, #28
 8013f9a:	d501      	bpl.n	8013fa0 <_vfiprintf_r+0x34>
 8013f9c:	692b      	ldr	r3, [r5, #16]
 8013f9e:	b99b      	cbnz	r3, 8013fc8 <_vfiprintf_r+0x5c>
 8013fa0:	4629      	mov	r1, r5
 8013fa2:	4630      	mov	r0, r6
 8013fa4:	f000 f93a 	bl	801421c <__swsetup_r>
 8013fa8:	b170      	cbz	r0, 8013fc8 <_vfiprintf_r+0x5c>
 8013faa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013fac:	07dc      	lsls	r4, r3, #31
 8013fae:	d504      	bpl.n	8013fba <_vfiprintf_r+0x4e>
 8013fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013fb4:	b01d      	add	sp, #116	; 0x74
 8013fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fba:	89ab      	ldrh	r3, [r5, #12]
 8013fbc:	0598      	lsls	r0, r3, #22
 8013fbe:	d4f7      	bmi.n	8013fb0 <_vfiprintf_r+0x44>
 8013fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013fc2:	f7fe f9d1 	bl	8012368 <__retarget_lock_release_recursive>
 8013fc6:	e7f3      	b.n	8013fb0 <_vfiprintf_r+0x44>
 8013fc8:	2300      	movs	r3, #0
 8013fca:	9309      	str	r3, [sp, #36]	; 0x24
 8013fcc:	2320      	movs	r3, #32
 8013fce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013fd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8013fd6:	2330      	movs	r3, #48	; 0x30
 8013fd8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801418c <_vfiprintf_r+0x220>
 8013fdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013fe0:	f04f 0901 	mov.w	r9, #1
 8013fe4:	4623      	mov	r3, r4
 8013fe6:	469a      	mov	sl, r3
 8013fe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013fec:	b10a      	cbz	r2, 8013ff2 <_vfiprintf_r+0x86>
 8013fee:	2a25      	cmp	r2, #37	; 0x25
 8013ff0:	d1f9      	bne.n	8013fe6 <_vfiprintf_r+0x7a>
 8013ff2:	ebba 0b04 	subs.w	fp, sl, r4
 8013ff6:	d00b      	beq.n	8014010 <_vfiprintf_r+0xa4>
 8013ff8:	465b      	mov	r3, fp
 8013ffa:	4622      	mov	r2, r4
 8013ffc:	4629      	mov	r1, r5
 8013ffe:	4630      	mov	r0, r6
 8014000:	f7ff ffa2 	bl	8013f48 <__sfputs_r>
 8014004:	3001      	adds	r0, #1
 8014006:	f000 80a9 	beq.w	801415c <_vfiprintf_r+0x1f0>
 801400a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801400c:	445a      	add	r2, fp
 801400e:	9209      	str	r2, [sp, #36]	; 0x24
 8014010:	f89a 3000 	ldrb.w	r3, [sl]
 8014014:	2b00      	cmp	r3, #0
 8014016:	f000 80a1 	beq.w	801415c <_vfiprintf_r+0x1f0>
 801401a:	2300      	movs	r3, #0
 801401c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014020:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014024:	f10a 0a01 	add.w	sl, sl, #1
 8014028:	9304      	str	r3, [sp, #16]
 801402a:	9307      	str	r3, [sp, #28]
 801402c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014030:	931a      	str	r3, [sp, #104]	; 0x68
 8014032:	4654      	mov	r4, sl
 8014034:	2205      	movs	r2, #5
 8014036:	f814 1b01 	ldrb.w	r1, [r4], #1
 801403a:	4854      	ldr	r0, [pc, #336]	; (801418c <_vfiprintf_r+0x220>)
 801403c:	f7ec f8f0 	bl	8000220 <memchr>
 8014040:	9a04      	ldr	r2, [sp, #16]
 8014042:	b9d8      	cbnz	r0, 801407c <_vfiprintf_r+0x110>
 8014044:	06d1      	lsls	r1, r2, #27
 8014046:	bf44      	itt	mi
 8014048:	2320      	movmi	r3, #32
 801404a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801404e:	0713      	lsls	r3, r2, #28
 8014050:	bf44      	itt	mi
 8014052:	232b      	movmi	r3, #43	; 0x2b
 8014054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014058:	f89a 3000 	ldrb.w	r3, [sl]
 801405c:	2b2a      	cmp	r3, #42	; 0x2a
 801405e:	d015      	beq.n	801408c <_vfiprintf_r+0x120>
 8014060:	9a07      	ldr	r2, [sp, #28]
 8014062:	4654      	mov	r4, sl
 8014064:	2000      	movs	r0, #0
 8014066:	f04f 0c0a 	mov.w	ip, #10
 801406a:	4621      	mov	r1, r4
 801406c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014070:	3b30      	subs	r3, #48	; 0x30
 8014072:	2b09      	cmp	r3, #9
 8014074:	d94d      	bls.n	8014112 <_vfiprintf_r+0x1a6>
 8014076:	b1b0      	cbz	r0, 80140a6 <_vfiprintf_r+0x13a>
 8014078:	9207      	str	r2, [sp, #28]
 801407a:	e014      	b.n	80140a6 <_vfiprintf_r+0x13a>
 801407c:	eba0 0308 	sub.w	r3, r0, r8
 8014080:	fa09 f303 	lsl.w	r3, r9, r3
 8014084:	4313      	orrs	r3, r2
 8014086:	9304      	str	r3, [sp, #16]
 8014088:	46a2      	mov	sl, r4
 801408a:	e7d2      	b.n	8014032 <_vfiprintf_r+0xc6>
 801408c:	9b03      	ldr	r3, [sp, #12]
 801408e:	1d19      	adds	r1, r3, #4
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	9103      	str	r1, [sp, #12]
 8014094:	2b00      	cmp	r3, #0
 8014096:	bfbb      	ittet	lt
 8014098:	425b      	neglt	r3, r3
 801409a:	f042 0202 	orrlt.w	r2, r2, #2
 801409e:	9307      	strge	r3, [sp, #28]
 80140a0:	9307      	strlt	r3, [sp, #28]
 80140a2:	bfb8      	it	lt
 80140a4:	9204      	strlt	r2, [sp, #16]
 80140a6:	7823      	ldrb	r3, [r4, #0]
 80140a8:	2b2e      	cmp	r3, #46	; 0x2e
 80140aa:	d10c      	bne.n	80140c6 <_vfiprintf_r+0x15a>
 80140ac:	7863      	ldrb	r3, [r4, #1]
 80140ae:	2b2a      	cmp	r3, #42	; 0x2a
 80140b0:	d134      	bne.n	801411c <_vfiprintf_r+0x1b0>
 80140b2:	9b03      	ldr	r3, [sp, #12]
 80140b4:	1d1a      	adds	r2, r3, #4
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	9203      	str	r2, [sp, #12]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	bfb8      	it	lt
 80140be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80140c2:	3402      	adds	r4, #2
 80140c4:	9305      	str	r3, [sp, #20]
 80140c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801419c <_vfiprintf_r+0x230>
 80140ca:	7821      	ldrb	r1, [r4, #0]
 80140cc:	2203      	movs	r2, #3
 80140ce:	4650      	mov	r0, sl
 80140d0:	f7ec f8a6 	bl	8000220 <memchr>
 80140d4:	b138      	cbz	r0, 80140e6 <_vfiprintf_r+0x17a>
 80140d6:	9b04      	ldr	r3, [sp, #16]
 80140d8:	eba0 000a 	sub.w	r0, r0, sl
 80140dc:	2240      	movs	r2, #64	; 0x40
 80140de:	4082      	lsls	r2, r0
 80140e0:	4313      	orrs	r3, r2
 80140e2:	3401      	adds	r4, #1
 80140e4:	9304      	str	r3, [sp, #16]
 80140e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140ea:	4829      	ldr	r0, [pc, #164]	; (8014190 <_vfiprintf_r+0x224>)
 80140ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80140f0:	2206      	movs	r2, #6
 80140f2:	f7ec f895 	bl	8000220 <memchr>
 80140f6:	2800      	cmp	r0, #0
 80140f8:	d03f      	beq.n	801417a <_vfiprintf_r+0x20e>
 80140fa:	4b26      	ldr	r3, [pc, #152]	; (8014194 <_vfiprintf_r+0x228>)
 80140fc:	bb1b      	cbnz	r3, 8014146 <_vfiprintf_r+0x1da>
 80140fe:	9b03      	ldr	r3, [sp, #12]
 8014100:	3307      	adds	r3, #7
 8014102:	f023 0307 	bic.w	r3, r3, #7
 8014106:	3308      	adds	r3, #8
 8014108:	9303      	str	r3, [sp, #12]
 801410a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801410c:	443b      	add	r3, r7
 801410e:	9309      	str	r3, [sp, #36]	; 0x24
 8014110:	e768      	b.n	8013fe4 <_vfiprintf_r+0x78>
 8014112:	fb0c 3202 	mla	r2, ip, r2, r3
 8014116:	460c      	mov	r4, r1
 8014118:	2001      	movs	r0, #1
 801411a:	e7a6      	b.n	801406a <_vfiprintf_r+0xfe>
 801411c:	2300      	movs	r3, #0
 801411e:	3401      	adds	r4, #1
 8014120:	9305      	str	r3, [sp, #20]
 8014122:	4619      	mov	r1, r3
 8014124:	f04f 0c0a 	mov.w	ip, #10
 8014128:	4620      	mov	r0, r4
 801412a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801412e:	3a30      	subs	r2, #48	; 0x30
 8014130:	2a09      	cmp	r2, #9
 8014132:	d903      	bls.n	801413c <_vfiprintf_r+0x1d0>
 8014134:	2b00      	cmp	r3, #0
 8014136:	d0c6      	beq.n	80140c6 <_vfiprintf_r+0x15a>
 8014138:	9105      	str	r1, [sp, #20]
 801413a:	e7c4      	b.n	80140c6 <_vfiprintf_r+0x15a>
 801413c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014140:	4604      	mov	r4, r0
 8014142:	2301      	movs	r3, #1
 8014144:	e7f0      	b.n	8014128 <_vfiprintf_r+0x1bc>
 8014146:	ab03      	add	r3, sp, #12
 8014148:	9300      	str	r3, [sp, #0]
 801414a:	462a      	mov	r2, r5
 801414c:	4b12      	ldr	r3, [pc, #72]	; (8014198 <_vfiprintf_r+0x22c>)
 801414e:	a904      	add	r1, sp, #16
 8014150:	4630      	mov	r0, r6
 8014152:	f7fd fb35 	bl	80117c0 <_printf_float>
 8014156:	4607      	mov	r7, r0
 8014158:	1c78      	adds	r0, r7, #1
 801415a:	d1d6      	bne.n	801410a <_vfiprintf_r+0x19e>
 801415c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801415e:	07d9      	lsls	r1, r3, #31
 8014160:	d405      	bmi.n	801416e <_vfiprintf_r+0x202>
 8014162:	89ab      	ldrh	r3, [r5, #12]
 8014164:	059a      	lsls	r2, r3, #22
 8014166:	d402      	bmi.n	801416e <_vfiprintf_r+0x202>
 8014168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801416a:	f7fe f8fd 	bl	8012368 <__retarget_lock_release_recursive>
 801416e:	89ab      	ldrh	r3, [r5, #12]
 8014170:	065b      	lsls	r3, r3, #25
 8014172:	f53f af1d 	bmi.w	8013fb0 <_vfiprintf_r+0x44>
 8014176:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014178:	e71c      	b.n	8013fb4 <_vfiprintf_r+0x48>
 801417a:	ab03      	add	r3, sp, #12
 801417c:	9300      	str	r3, [sp, #0]
 801417e:	462a      	mov	r2, r5
 8014180:	4b05      	ldr	r3, [pc, #20]	; (8014198 <_vfiprintf_r+0x22c>)
 8014182:	a904      	add	r1, sp, #16
 8014184:	4630      	mov	r0, r6
 8014186:	f7fd fdbf 	bl	8011d08 <_printf_i>
 801418a:	e7e4      	b.n	8014156 <_vfiprintf_r+0x1ea>
 801418c:	080153cc 	.word	0x080153cc
 8014190:	080153d6 	.word	0x080153d6
 8014194:	080117c1 	.word	0x080117c1
 8014198:	08013f49 	.word	0x08013f49
 801419c:	080153d2 	.word	0x080153d2

080141a0 <__swbuf_r>:
 80141a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141a2:	460e      	mov	r6, r1
 80141a4:	4614      	mov	r4, r2
 80141a6:	4605      	mov	r5, r0
 80141a8:	b118      	cbz	r0, 80141b2 <__swbuf_r+0x12>
 80141aa:	6a03      	ldr	r3, [r0, #32]
 80141ac:	b90b      	cbnz	r3, 80141b2 <__swbuf_r+0x12>
 80141ae:	f7fd ff59 	bl	8012064 <__sinit>
 80141b2:	69a3      	ldr	r3, [r4, #24]
 80141b4:	60a3      	str	r3, [r4, #8]
 80141b6:	89a3      	ldrh	r3, [r4, #12]
 80141b8:	071a      	lsls	r2, r3, #28
 80141ba:	d525      	bpl.n	8014208 <__swbuf_r+0x68>
 80141bc:	6923      	ldr	r3, [r4, #16]
 80141be:	b31b      	cbz	r3, 8014208 <__swbuf_r+0x68>
 80141c0:	6823      	ldr	r3, [r4, #0]
 80141c2:	6922      	ldr	r2, [r4, #16]
 80141c4:	1a98      	subs	r0, r3, r2
 80141c6:	6963      	ldr	r3, [r4, #20]
 80141c8:	b2f6      	uxtb	r6, r6
 80141ca:	4283      	cmp	r3, r0
 80141cc:	4637      	mov	r7, r6
 80141ce:	dc04      	bgt.n	80141da <__swbuf_r+0x3a>
 80141d0:	4621      	mov	r1, r4
 80141d2:	4628      	mov	r0, r5
 80141d4:	f7ff fdac 	bl	8013d30 <_fflush_r>
 80141d8:	b9e0      	cbnz	r0, 8014214 <__swbuf_r+0x74>
 80141da:	68a3      	ldr	r3, [r4, #8]
 80141dc:	3b01      	subs	r3, #1
 80141de:	60a3      	str	r3, [r4, #8]
 80141e0:	6823      	ldr	r3, [r4, #0]
 80141e2:	1c5a      	adds	r2, r3, #1
 80141e4:	6022      	str	r2, [r4, #0]
 80141e6:	701e      	strb	r6, [r3, #0]
 80141e8:	6962      	ldr	r2, [r4, #20]
 80141ea:	1c43      	adds	r3, r0, #1
 80141ec:	429a      	cmp	r2, r3
 80141ee:	d004      	beq.n	80141fa <__swbuf_r+0x5a>
 80141f0:	89a3      	ldrh	r3, [r4, #12]
 80141f2:	07db      	lsls	r3, r3, #31
 80141f4:	d506      	bpl.n	8014204 <__swbuf_r+0x64>
 80141f6:	2e0a      	cmp	r6, #10
 80141f8:	d104      	bne.n	8014204 <__swbuf_r+0x64>
 80141fa:	4621      	mov	r1, r4
 80141fc:	4628      	mov	r0, r5
 80141fe:	f7ff fd97 	bl	8013d30 <_fflush_r>
 8014202:	b938      	cbnz	r0, 8014214 <__swbuf_r+0x74>
 8014204:	4638      	mov	r0, r7
 8014206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014208:	4621      	mov	r1, r4
 801420a:	4628      	mov	r0, r5
 801420c:	f000 f806 	bl	801421c <__swsetup_r>
 8014210:	2800      	cmp	r0, #0
 8014212:	d0d5      	beq.n	80141c0 <__swbuf_r+0x20>
 8014214:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014218:	e7f4      	b.n	8014204 <__swbuf_r+0x64>
	...

0801421c <__swsetup_r>:
 801421c:	b538      	push	{r3, r4, r5, lr}
 801421e:	4b2a      	ldr	r3, [pc, #168]	; (80142c8 <__swsetup_r+0xac>)
 8014220:	4605      	mov	r5, r0
 8014222:	6818      	ldr	r0, [r3, #0]
 8014224:	460c      	mov	r4, r1
 8014226:	b118      	cbz	r0, 8014230 <__swsetup_r+0x14>
 8014228:	6a03      	ldr	r3, [r0, #32]
 801422a:	b90b      	cbnz	r3, 8014230 <__swsetup_r+0x14>
 801422c:	f7fd ff1a 	bl	8012064 <__sinit>
 8014230:	89a3      	ldrh	r3, [r4, #12]
 8014232:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014236:	0718      	lsls	r0, r3, #28
 8014238:	d422      	bmi.n	8014280 <__swsetup_r+0x64>
 801423a:	06d9      	lsls	r1, r3, #27
 801423c:	d407      	bmi.n	801424e <__swsetup_r+0x32>
 801423e:	2309      	movs	r3, #9
 8014240:	602b      	str	r3, [r5, #0]
 8014242:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014246:	81a3      	strh	r3, [r4, #12]
 8014248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801424c:	e034      	b.n	80142b8 <__swsetup_r+0x9c>
 801424e:	0758      	lsls	r0, r3, #29
 8014250:	d512      	bpl.n	8014278 <__swsetup_r+0x5c>
 8014252:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014254:	b141      	cbz	r1, 8014268 <__swsetup_r+0x4c>
 8014256:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801425a:	4299      	cmp	r1, r3
 801425c:	d002      	beq.n	8014264 <__swsetup_r+0x48>
 801425e:	4628      	mov	r0, r5
 8014260:	f7fe ff0c 	bl	801307c <_free_r>
 8014264:	2300      	movs	r3, #0
 8014266:	6363      	str	r3, [r4, #52]	; 0x34
 8014268:	89a3      	ldrh	r3, [r4, #12]
 801426a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801426e:	81a3      	strh	r3, [r4, #12]
 8014270:	2300      	movs	r3, #0
 8014272:	6063      	str	r3, [r4, #4]
 8014274:	6923      	ldr	r3, [r4, #16]
 8014276:	6023      	str	r3, [r4, #0]
 8014278:	89a3      	ldrh	r3, [r4, #12]
 801427a:	f043 0308 	orr.w	r3, r3, #8
 801427e:	81a3      	strh	r3, [r4, #12]
 8014280:	6923      	ldr	r3, [r4, #16]
 8014282:	b94b      	cbnz	r3, 8014298 <__swsetup_r+0x7c>
 8014284:	89a3      	ldrh	r3, [r4, #12]
 8014286:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801428a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801428e:	d003      	beq.n	8014298 <__swsetup_r+0x7c>
 8014290:	4621      	mov	r1, r4
 8014292:	4628      	mov	r0, r5
 8014294:	f000 f884 	bl	80143a0 <__smakebuf_r>
 8014298:	89a0      	ldrh	r0, [r4, #12]
 801429a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801429e:	f010 0301 	ands.w	r3, r0, #1
 80142a2:	d00a      	beq.n	80142ba <__swsetup_r+0x9e>
 80142a4:	2300      	movs	r3, #0
 80142a6:	60a3      	str	r3, [r4, #8]
 80142a8:	6963      	ldr	r3, [r4, #20]
 80142aa:	425b      	negs	r3, r3
 80142ac:	61a3      	str	r3, [r4, #24]
 80142ae:	6923      	ldr	r3, [r4, #16]
 80142b0:	b943      	cbnz	r3, 80142c4 <__swsetup_r+0xa8>
 80142b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80142b6:	d1c4      	bne.n	8014242 <__swsetup_r+0x26>
 80142b8:	bd38      	pop	{r3, r4, r5, pc}
 80142ba:	0781      	lsls	r1, r0, #30
 80142bc:	bf58      	it	pl
 80142be:	6963      	ldrpl	r3, [r4, #20]
 80142c0:	60a3      	str	r3, [r4, #8]
 80142c2:	e7f4      	b.n	80142ae <__swsetup_r+0x92>
 80142c4:	2000      	movs	r0, #0
 80142c6:	e7f7      	b.n	80142b8 <__swsetup_r+0x9c>
 80142c8:	200001e0 	.word	0x200001e0

080142cc <_raise_r>:
 80142cc:	291f      	cmp	r1, #31
 80142ce:	b538      	push	{r3, r4, r5, lr}
 80142d0:	4604      	mov	r4, r0
 80142d2:	460d      	mov	r5, r1
 80142d4:	d904      	bls.n	80142e0 <_raise_r+0x14>
 80142d6:	2316      	movs	r3, #22
 80142d8:	6003      	str	r3, [r0, #0]
 80142da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80142de:	bd38      	pop	{r3, r4, r5, pc}
 80142e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80142e2:	b112      	cbz	r2, 80142ea <_raise_r+0x1e>
 80142e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80142e8:	b94b      	cbnz	r3, 80142fe <_raise_r+0x32>
 80142ea:	4620      	mov	r0, r4
 80142ec:	f000 f830 	bl	8014350 <_getpid_r>
 80142f0:	462a      	mov	r2, r5
 80142f2:	4601      	mov	r1, r0
 80142f4:	4620      	mov	r0, r4
 80142f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80142fa:	f000 b817 	b.w	801432c <_kill_r>
 80142fe:	2b01      	cmp	r3, #1
 8014300:	d00a      	beq.n	8014318 <_raise_r+0x4c>
 8014302:	1c59      	adds	r1, r3, #1
 8014304:	d103      	bne.n	801430e <_raise_r+0x42>
 8014306:	2316      	movs	r3, #22
 8014308:	6003      	str	r3, [r0, #0]
 801430a:	2001      	movs	r0, #1
 801430c:	e7e7      	b.n	80142de <_raise_r+0x12>
 801430e:	2400      	movs	r4, #0
 8014310:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014314:	4628      	mov	r0, r5
 8014316:	4798      	blx	r3
 8014318:	2000      	movs	r0, #0
 801431a:	e7e0      	b.n	80142de <_raise_r+0x12>

0801431c <raise>:
 801431c:	4b02      	ldr	r3, [pc, #8]	; (8014328 <raise+0xc>)
 801431e:	4601      	mov	r1, r0
 8014320:	6818      	ldr	r0, [r3, #0]
 8014322:	f7ff bfd3 	b.w	80142cc <_raise_r>
 8014326:	bf00      	nop
 8014328:	200001e0 	.word	0x200001e0

0801432c <_kill_r>:
 801432c:	b538      	push	{r3, r4, r5, lr}
 801432e:	4d07      	ldr	r5, [pc, #28]	; (801434c <_kill_r+0x20>)
 8014330:	2300      	movs	r3, #0
 8014332:	4604      	mov	r4, r0
 8014334:	4608      	mov	r0, r1
 8014336:	4611      	mov	r1, r2
 8014338:	602b      	str	r3, [r5, #0]
 801433a:	f7ee fe8f 	bl	800305c <_kill>
 801433e:	1c43      	adds	r3, r0, #1
 8014340:	d102      	bne.n	8014348 <_kill_r+0x1c>
 8014342:	682b      	ldr	r3, [r5, #0]
 8014344:	b103      	cbz	r3, 8014348 <_kill_r+0x1c>
 8014346:	6023      	str	r3, [r4, #0]
 8014348:	bd38      	pop	{r3, r4, r5, pc}
 801434a:	bf00      	nop
 801434c:	20005ad0 	.word	0x20005ad0

08014350 <_getpid_r>:
 8014350:	f7ee be7c 	b.w	800304c <_getpid>

08014354 <__swhatbuf_r>:
 8014354:	b570      	push	{r4, r5, r6, lr}
 8014356:	460c      	mov	r4, r1
 8014358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801435c:	2900      	cmp	r1, #0
 801435e:	b096      	sub	sp, #88	; 0x58
 8014360:	4615      	mov	r5, r2
 8014362:	461e      	mov	r6, r3
 8014364:	da0d      	bge.n	8014382 <__swhatbuf_r+0x2e>
 8014366:	89a3      	ldrh	r3, [r4, #12]
 8014368:	f013 0f80 	tst.w	r3, #128	; 0x80
 801436c:	f04f 0100 	mov.w	r1, #0
 8014370:	bf0c      	ite	eq
 8014372:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014376:	2340      	movne	r3, #64	; 0x40
 8014378:	2000      	movs	r0, #0
 801437a:	6031      	str	r1, [r6, #0]
 801437c:	602b      	str	r3, [r5, #0]
 801437e:	b016      	add	sp, #88	; 0x58
 8014380:	bd70      	pop	{r4, r5, r6, pc}
 8014382:	466a      	mov	r2, sp
 8014384:	f000 f848 	bl	8014418 <_fstat_r>
 8014388:	2800      	cmp	r0, #0
 801438a:	dbec      	blt.n	8014366 <__swhatbuf_r+0x12>
 801438c:	9901      	ldr	r1, [sp, #4]
 801438e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014392:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014396:	4259      	negs	r1, r3
 8014398:	4159      	adcs	r1, r3
 801439a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801439e:	e7eb      	b.n	8014378 <__swhatbuf_r+0x24>

080143a0 <__smakebuf_r>:
 80143a0:	898b      	ldrh	r3, [r1, #12]
 80143a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80143a4:	079d      	lsls	r5, r3, #30
 80143a6:	4606      	mov	r6, r0
 80143a8:	460c      	mov	r4, r1
 80143aa:	d507      	bpl.n	80143bc <__smakebuf_r+0x1c>
 80143ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80143b0:	6023      	str	r3, [r4, #0]
 80143b2:	6123      	str	r3, [r4, #16]
 80143b4:	2301      	movs	r3, #1
 80143b6:	6163      	str	r3, [r4, #20]
 80143b8:	b002      	add	sp, #8
 80143ba:	bd70      	pop	{r4, r5, r6, pc}
 80143bc:	ab01      	add	r3, sp, #4
 80143be:	466a      	mov	r2, sp
 80143c0:	f7ff ffc8 	bl	8014354 <__swhatbuf_r>
 80143c4:	9900      	ldr	r1, [sp, #0]
 80143c6:	4605      	mov	r5, r0
 80143c8:	4630      	mov	r0, r6
 80143ca:	f7fe fecb 	bl	8013164 <_malloc_r>
 80143ce:	b948      	cbnz	r0, 80143e4 <__smakebuf_r+0x44>
 80143d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143d4:	059a      	lsls	r2, r3, #22
 80143d6:	d4ef      	bmi.n	80143b8 <__smakebuf_r+0x18>
 80143d8:	f023 0303 	bic.w	r3, r3, #3
 80143dc:	f043 0302 	orr.w	r3, r3, #2
 80143e0:	81a3      	strh	r3, [r4, #12]
 80143e2:	e7e3      	b.n	80143ac <__smakebuf_r+0xc>
 80143e4:	89a3      	ldrh	r3, [r4, #12]
 80143e6:	6020      	str	r0, [r4, #0]
 80143e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143ec:	81a3      	strh	r3, [r4, #12]
 80143ee:	9b00      	ldr	r3, [sp, #0]
 80143f0:	6163      	str	r3, [r4, #20]
 80143f2:	9b01      	ldr	r3, [sp, #4]
 80143f4:	6120      	str	r0, [r4, #16]
 80143f6:	b15b      	cbz	r3, 8014410 <__smakebuf_r+0x70>
 80143f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80143fc:	4630      	mov	r0, r6
 80143fe:	f000 f81d 	bl	801443c <_isatty_r>
 8014402:	b128      	cbz	r0, 8014410 <__smakebuf_r+0x70>
 8014404:	89a3      	ldrh	r3, [r4, #12]
 8014406:	f023 0303 	bic.w	r3, r3, #3
 801440a:	f043 0301 	orr.w	r3, r3, #1
 801440e:	81a3      	strh	r3, [r4, #12]
 8014410:	89a3      	ldrh	r3, [r4, #12]
 8014412:	431d      	orrs	r5, r3
 8014414:	81a5      	strh	r5, [r4, #12]
 8014416:	e7cf      	b.n	80143b8 <__smakebuf_r+0x18>

08014418 <_fstat_r>:
 8014418:	b538      	push	{r3, r4, r5, lr}
 801441a:	4d07      	ldr	r5, [pc, #28]	; (8014438 <_fstat_r+0x20>)
 801441c:	2300      	movs	r3, #0
 801441e:	4604      	mov	r4, r0
 8014420:	4608      	mov	r0, r1
 8014422:	4611      	mov	r1, r2
 8014424:	602b      	str	r3, [r5, #0]
 8014426:	f7ee fe78 	bl	800311a <_fstat>
 801442a:	1c43      	adds	r3, r0, #1
 801442c:	d102      	bne.n	8014434 <_fstat_r+0x1c>
 801442e:	682b      	ldr	r3, [r5, #0]
 8014430:	b103      	cbz	r3, 8014434 <_fstat_r+0x1c>
 8014432:	6023      	str	r3, [r4, #0]
 8014434:	bd38      	pop	{r3, r4, r5, pc}
 8014436:	bf00      	nop
 8014438:	20005ad0 	.word	0x20005ad0

0801443c <_isatty_r>:
 801443c:	b538      	push	{r3, r4, r5, lr}
 801443e:	4d06      	ldr	r5, [pc, #24]	; (8014458 <_isatty_r+0x1c>)
 8014440:	2300      	movs	r3, #0
 8014442:	4604      	mov	r4, r0
 8014444:	4608      	mov	r0, r1
 8014446:	602b      	str	r3, [r5, #0]
 8014448:	f7ee fe77 	bl	800313a <_isatty>
 801444c:	1c43      	adds	r3, r0, #1
 801444e:	d102      	bne.n	8014456 <_isatty_r+0x1a>
 8014450:	682b      	ldr	r3, [r5, #0]
 8014452:	b103      	cbz	r3, 8014456 <_isatty_r+0x1a>
 8014454:	6023      	str	r3, [r4, #0]
 8014456:	bd38      	pop	{r3, r4, r5, pc}
 8014458:	20005ad0 	.word	0x20005ad0

0801445c <powf>:
 801445c:	b508      	push	{r3, lr}
 801445e:	ed2d 8b04 	vpush	{d8-d9}
 8014462:	eeb0 8a60 	vmov.f32	s16, s1
 8014466:	eeb0 9a40 	vmov.f32	s18, s0
 801446a:	f000 f85b 	bl	8014524 <__ieee754_powf>
 801446e:	eeb4 8a48 	vcmp.f32	s16, s16
 8014472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014476:	eef0 8a40 	vmov.f32	s17, s0
 801447a:	d63e      	bvs.n	80144fa <powf+0x9e>
 801447c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8014480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014484:	d112      	bne.n	80144ac <powf+0x50>
 8014486:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801448a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801448e:	d039      	beq.n	8014504 <powf+0xa8>
 8014490:	eeb0 0a48 	vmov.f32	s0, s16
 8014494:	f000 f839 	bl	801450a <finitef>
 8014498:	b378      	cbz	r0, 80144fa <powf+0x9e>
 801449a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801449e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144a2:	d52a      	bpl.n	80144fa <powf+0x9e>
 80144a4:	f7fd ff34 	bl	8012310 <__errno>
 80144a8:	2322      	movs	r3, #34	; 0x22
 80144aa:	e014      	b.n	80144d6 <powf+0x7a>
 80144ac:	f000 f82d 	bl	801450a <finitef>
 80144b0:	b998      	cbnz	r0, 80144da <powf+0x7e>
 80144b2:	eeb0 0a49 	vmov.f32	s0, s18
 80144b6:	f000 f828 	bl	801450a <finitef>
 80144ba:	b170      	cbz	r0, 80144da <powf+0x7e>
 80144bc:	eeb0 0a48 	vmov.f32	s0, s16
 80144c0:	f000 f823 	bl	801450a <finitef>
 80144c4:	b148      	cbz	r0, 80144da <powf+0x7e>
 80144c6:	eef4 8a68 	vcmp.f32	s17, s17
 80144ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144ce:	d7e9      	bvc.n	80144a4 <powf+0x48>
 80144d0:	f7fd ff1e 	bl	8012310 <__errno>
 80144d4:	2321      	movs	r3, #33	; 0x21
 80144d6:	6003      	str	r3, [r0, #0]
 80144d8:	e00f      	b.n	80144fa <powf+0x9e>
 80144da:	eef5 8a40 	vcmp.f32	s17, #0.0
 80144de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144e2:	d10a      	bne.n	80144fa <powf+0x9e>
 80144e4:	eeb0 0a49 	vmov.f32	s0, s18
 80144e8:	f000 f80f 	bl	801450a <finitef>
 80144ec:	b128      	cbz	r0, 80144fa <powf+0x9e>
 80144ee:	eeb0 0a48 	vmov.f32	s0, s16
 80144f2:	f000 f80a 	bl	801450a <finitef>
 80144f6:	2800      	cmp	r0, #0
 80144f8:	d1d4      	bne.n	80144a4 <powf+0x48>
 80144fa:	eeb0 0a68 	vmov.f32	s0, s17
 80144fe:	ecbd 8b04 	vpop	{d8-d9}
 8014502:	bd08      	pop	{r3, pc}
 8014504:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8014508:	e7f7      	b.n	80144fa <powf+0x9e>

0801450a <finitef>:
 801450a:	b082      	sub	sp, #8
 801450c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014510:	9801      	ldr	r0, [sp, #4]
 8014512:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014516:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801451a:	bfac      	ite	ge
 801451c:	2000      	movge	r0, #0
 801451e:	2001      	movlt	r0, #1
 8014520:	b002      	add	sp, #8
 8014522:	4770      	bx	lr

08014524 <__ieee754_powf>:
 8014524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014528:	ee10 4a90 	vmov	r4, s1
 801452c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8014530:	ed2d 8b02 	vpush	{d8}
 8014534:	ee10 7a10 	vmov	r7, s0
 8014538:	eeb0 8a40 	vmov.f32	s16, s0
 801453c:	eef0 8a60 	vmov.f32	s17, s1
 8014540:	d10c      	bne.n	801455c <__ieee754_powf+0x38>
 8014542:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8014546:	007f      	lsls	r7, r7, #1
 8014548:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 801454c:	f240 8292 	bls.w	8014a74 <__ieee754_powf+0x550>
 8014550:	ee38 0a28 	vadd.f32	s0, s16, s17
 8014554:	ecbd 8b02 	vpop	{d8}
 8014558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801455c:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8014560:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8014564:	dcf4      	bgt.n	8014550 <__ieee754_powf+0x2c>
 8014566:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801456a:	dd08      	ble.n	801457e <__ieee754_powf+0x5a>
 801456c:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8014570:	d1ee      	bne.n	8014550 <__ieee754_powf+0x2c>
 8014572:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8014576:	0064      	lsls	r4, r4, #1
 8014578:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801457c:	e7e6      	b.n	801454c <__ieee754_powf+0x28>
 801457e:	2f00      	cmp	r7, #0
 8014580:	da20      	bge.n	80145c4 <__ieee754_powf+0xa0>
 8014582:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8014586:	da2d      	bge.n	80145e4 <__ieee754_powf+0xc0>
 8014588:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801458c:	f2c0 827b 	blt.w	8014a86 <__ieee754_powf+0x562>
 8014590:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8014594:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8014598:	fa48 f603 	asr.w	r6, r8, r3
 801459c:	fa06 f303 	lsl.w	r3, r6, r3
 80145a0:	4543      	cmp	r3, r8
 80145a2:	f040 8270 	bne.w	8014a86 <__ieee754_powf+0x562>
 80145a6:	f006 0601 	and.w	r6, r6, #1
 80145aa:	f1c6 0602 	rsb	r6, r6, #2
 80145ae:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80145b2:	d11f      	bne.n	80145f4 <__ieee754_powf+0xd0>
 80145b4:	2c00      	cmp	r4, #0
 80145b6:	f280 8263 	bge.w	8014a80 <__ieee754_powf+0x55c>
 80145ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80145be:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80145c2:	e7c7      	b.n	8014554 <__ieee754_powf+0x30>
 80145c4:	2600      	movs	r6, #0
 80145c6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80145ca:	d1f0      	bne.n	80145ae <__ieee754_powf+0x8a>
 80145cc:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80145d0:	f000 8250 	beq.w	8014a74 <__ieee754_powf+0x550>
 80145d4:	dd08      	ble.n	80145e8 <__ieee754_powf+0xc4>
 80145d6:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 80148dc <__ieee754_powf+0x3b8>
 80145da:	2c00      	cmp	r4, #0
 80145dc:	bfa8      	it	ge
 80145de:	eeb0 0a68 	vmovge.f32	s0, s17
 80145e2:	e7b7      	b.n	8014554 <__ieee754_powf+0x30>
 80145e4:	2602      	movs	r6, #2
 80145e6:	e7ee      	b.n	80145c6 <__ieee754_powf+0xa2>
 80145e8:	2c00      	cmp	r4, #0
 80145ea:	f280 8246 	bge.w	8014a7a <__ieee754_powf+0x556>
 80145ee:	eeb1 0a68 	vneg.f32	s0, s17
 80145f2:	e7af      	b.n	8014554 <__ieee754_powf+0x30>
 80145f4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80145f8:	d102      	bne.n	8014600 <__ieee754_powf+0xdc>
 80145fa:	ee28 0a08 	vmul.f32	s0, s16, s16
 80145fe:	e7a9      	b.n	8014554 <__ieee754_powf+0x30>
 8014600:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8014604:	eeb0 0a48 	vmov.f32	s0, s16
 8014608:	d107      	bne.n	801461a <__ieee754_powf+0xf6>
 801460a:	2f00      	cmp	r7, #0
 801460c:	db05      	blt.n	801461a <__ieee754_powf+0xf6>
 801460e:	ecbd 8b02 	vpop	{d8}
 8014612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014616:	f000 badf 	b.w	8014bd8 <__ieee754_sqrtf>
 801461a:	f000 fa4d 	bl	8014ab8 <fabsf>
 801461e:	b125      	cbz	r5, 801462a <__ieee754_powf+0x106>
 8014620:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8014624:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8014628:	d115      	bne.n	8014656 <__ieee754_powf+0x132>
 801462a:	2c00      	cmp	r4, #0
 801462c:	bfbc      	itt	lt
 801462e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8014632:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8014636:	2f00      	cmp	r7, #0
 8014638:	da8c      	bge.n	8014554 <__ieee754_powf+0x30>
 801463a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 801463e:	4335      	orrs	r5, r6
 8014640:	d104      	bne.n	801464c <__ieee754_powf+0x128>
 8014642:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014646:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801464a:	e783      	b.n	8014554 <__ieee754_powf+0x30>
 801464c:	2e01      	cmp	r6, #1
 801464e:	d181      	bne.n	8014554 <__ieee754_powf+0x30>
 8014650:	eeb1 0a40 	vneg.f32	s0, s0
 8014654:	e77e      	b.n	8014554 <__ieee754_powf+0x30>
 8014656:	0ff8      	lsrs	r0, r7, #31
 8014658:	3801      	subs	r0, #1
 801465a:	ea56 0300 	orrs.w	r3, r6, r0
 801465e:	d104      	bne.n	801466a <__ieee754_powf+0x146>
 8014660:	ee38 8a48 	vsub.f32	s16, s16, s16
 8014664:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8014668:	e774      	b.n	8014554 <__ieee754_powf+0x30>
 801466a:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 801466e:	dd73      	ble.n	8014758 <__ieee754_powf+0x234>
 8014670:	4b9b      	ldr	r3, [pc, #620]	; (80148e0 <__ieee754_powf+0x3bc>)
 8014672:	429d      	cmp	r5, r3
 8014674:	dc08      	bgt.n	8014688 <__ieee754_powf+0x164>
 8014676:	2c00      	cmp	r4, #0
 8014678:	da0b      	bge.n	8014692 <__ieee754_powf+0x16e>
 801467a:	2000      	movs	r0, #0
 801467c:	ecbd 8b02 	vpop	{d8}
 8014680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014684:	f000 baa2 	b.w	8014bcc <__math_oflowf>
 8014688:	4b96      	ldr	r3, [pc, #600]	; (80148e4 <__ieee754_powf+0x3c0>)
 801468a:	429d      	cmp	r5, r3
 801468c:	dd08      	ble.n	80146a0 <__ieee754_powf+0x17c>
 801468e:	2c00      	cmp	r4, #0
 8014690:	dcf3      	bgt.n	801467a <__ieee754_powf+0x156>
 8014692:	2000      	movs	r0, #0
 8014694:	ecbd 8b02 	vpop	{d8}
 8014698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801469c:	f000 ba90 	b.w	8014bc0 <__math_uflowf>
 80146a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80146a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80146a8:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80148e8 <__ieee754_powf+0x3c4>
 80146ac:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80146b0:	eee0 6a67 	vfms.f32	s13, s0, s15
 80146b4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80146b8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80146bc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80146c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80146c4:	eddf 7a89 	vldr	s15, [pc, #548]	; 80148ec <__ieee754_powf+0x3c8>
 80146c8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80146cc:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80148f0 <__ieee754_powf+0x3cc>
 80146d0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80146d4:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80148f4 <__ieee754_powf+0x3d0>
 80146d8:	eef0 6a67 	vmov.f32	s13, s15
 80146dc:	eee0 6a07 	vfma.f32	s13, s0, s14
 80146e0:	ee16 3a90 	vmov	r3, s13
 80146e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80146e8:	f023 030f 	bic.w	r3, r3, #15
 80146ec:	ee06 3a90 	vmov	s13, r3
 80146f0:	eee0 6a47 	vfms.f32	s13, s0, s14
 80146f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80146f8:	3e01      	subs	r6, #1
 80146fa:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80146fe:	4306      	orrs	r6, r0
 8014700:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014704:	f024 040f 	bic.w	r4, r4, #15
 8014708:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801470c:	bf08      	it	eq
 801470e:	eeb0 8a47 	vmoveq.f32	s16, s14
 8014712:	ee07 4a10 	vmov	s14, r4
 8014716:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801471a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801471e:	ee07 3a90 	vmov	s15, r3
 8014722:	eee7 0a27 	vfma.f32	s1, s14, s15
 8014726:	ee07 4a10 	vmov	s14, r4
 801472a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801472e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8014732:	ee17 1a10 	vmov	r1, s14
 8014736:	2900      	cmp	r1, #0
 8014738:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801473c:	f340 817c 	ble.w	8014a38 <__ieee754_powf+0x514>
 8014740:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8014744:	f340 80f8 	ble.w	8014938 <__ieee754_powf+0x414>
 8014748:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801474c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014750:	bf4c      	ite	mi
 8014752:	2001      	movmi	r0, #1
 8014754:	2000      	movpl	r0, #0
 8014756:	e791      	b.n	801467c <__ieee754_powf+0x158>
 8014758:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 801475c:	bf01      	itttt	eq
 801475e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80148f8 <__ieee754_powf+0x3d4>
 8014762:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8014766:	f06f 0317 	mvneq.w	r3, #23
 801476a:	ee17 5a90 	vmoveq	r5, s15
 801476e:	ea4f 52e5 	mov.w	r2, r5, asr #23
 8014772:	bf18      	it	ne
 8014774:	2300      	movne	r3, #0
 8014776:	3a7f      	subs	r2, #127	; 0x7f
 8014778:	441a      	add	r2, r3
 801477a:	4b60      	ldr	r3, [pc, #384]	; (80148fc <__ieee754_powf+0x3d8>)
 801477c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8014780:	429d      	cmp	r5, r3
 8014782:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8014786:	dd06      	ble.n	8014796 <__ieee754_powf+0x272>
 8014788:	4b5d      	ldr	r3, [pc, #372]	; (8014900 <__ieee754_powf+0x3dc>)
 801478a:	429d      	cmp	r5, r3
 801478c:	f340 80a4 	ble.w	80148d8 <__ieee754_powf+0x3b4>
 8014790:	3201      	adds	r2, #1
 8014792:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8014796:	2500      	movs	r5, #0
 8014798:	4b5a      	ldr	r3, [pc, #360]	; (8014904 <__ieee754_powf+0x3e0>)
 801479a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801479e:	ee07 1a10 	vmov	s14, r1
 80147a2:	edd3 5a00 	vldr	s11, [r3]
 80147a6:	4b58      	ldr	r3, [pc, #352]	; (8014908 <__ieee754_powf+0x3e4>)
 80147a8:	ee75 7a87 	vadd.f32	s15, s11, s14
 80147ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80147b0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80147b4:	1049      	asrs	r1, r1, #1
 80147b6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80147ba:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80147be:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80147c2:	ee37 6a65 	vsub.f32	s12, s14, s11
 80147c6:	ee07 1a90 	vmov	s15, r1
 80147ca:	ee26 5a24 	vmul.f32	s10, s12, s9
 80147ce:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80147d2:	ee15 7a10 	vmov	r7, s10
 80147d6:	401f      	ands	r7, r3
 80147d8:	ee06 7a90 	vmov	s13, r7
 80147dc:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80147e0:	ee37 7a65 	vsub.f32	s14, s14, s11
 80147e4:	ee65 7a05 	vmul.f32	s15, s10, s10
 80147e8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80147ec:	eddf 5a47 	vldr	s11, [pc, #284]	; 801490c <__ieee754_powf+0x3e8>
 80147f0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8014910 <__ieee754_powf+0x3ec>
 80147f4:	eee7 5a87 	vfma.f32	s11, s15, s14
 80147f8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8014914 <__ieee754_powf+0x3f0>
 80147fc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8014800:	eddf 5a39 	vldr	s11, [pc, #228]	; 80148e8 <__ieee754_powf+0x3c4>
 8014804:	eee7 5a27 	vfma.f32	s11, s14, s15
 8014808:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8014918 <__ieee754_powf+0x3f4>
 801480c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8014810:	eddf 5a42 	vldr	s11, [pc, #264]	; 801491c <__ieee754_powf+0x3f8>
 8014814:	ee26 6a24 	vmul.f32	s12, s12, s9
 8014818:	eee7 5a27 	vfma.f32	s11, s14, s15
 801481c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8014820:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8014824:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014828:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801482c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8014830:	eef0 5a67 	vmov.f32	s11, s15
 8014834:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8014838:	ee75 5a87 	vadd.f32	s11, s11, s14
 801483c:	ee15 1a90 	vmov	r1, s11
 8014840:	4019      	ands	r1, r3
 8014842:	ee05 1a90 	vmov	s11, r1
 8014846:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801484a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801484e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014852:	ee67 7a85 	vmul.f32	s15, s15, s10
 8014856:	eee6 7a25 	vfma.f32	s15, s12, s11
 801485a:	eeb0 6a67 	vmov.f32	s12, s15
 801485e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8014862:	ee16 1a10 	vmov	r1, s12
 8014866:	4019      	ands	r1, r3
 8014868:	ee07 1a10 	vmov	s14, r1
 801486c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8014870:	ee06 1a10 	vmov	s12, r1
 8014874:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014878:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8014920 <__ieee754_powf+0x3fc>
 801487c:	4929      	ldr	r1, [pc, #164]	; (8014924 <__ieee754_powf+0x400>)
 801487e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8014928 <__ieee754_powf+0x404>
 8014882:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014886:	ed9f 7a29 	vldr	s14, [pc, #164]	; 801492c <__ieee754_powf+0x408>
 801488a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801488e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8014892:	ed91 7a00 	vldr	s14, [r1]
 8014896:	ee77 7a87 	vadd.f32	s15, s15, s14
 801489a:	ee07 2a10 	vmov	s14, r2
 801489e:	eef0 6a67 	vmov.f32	s13, s15
 80148a2:	4a23      	ldr	r2, [pc, #140]	; (8014930 <__ieee754_powf+0x40c>)
 80148a4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80148a8:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80148ac:	ed92 5a00 	vldr	s10, [r2]
 80148b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80148b4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80148b8:	ee76 6a87 	vadd.f32	s13, s13, s14
 80148bc:	ee16 2a90 	vmov	r2, s13
 80148c0:	4013      	ands	r3, r2
 80148c2:	ee06 3a90 	vmov	s13, r3
 80148c6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80148ca:	ee37 7a45 	vsub.f32	s14, s14, s10
 80148ce:	eea6 7a65 	vfms.f32	s14, s12, s11
 80148d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80148d6:	e70f      	b.n	80146f8 <__ieee754_powf+0x1d4>
 80148d8:	2501      	movs	r5, #1
 80148da:	e75d      	b.n	8014798 <__ieee754_powf+0x274>
 80148dc:	00000000 	.word	0x00000000
 80148e0:	3f7ffff3 	.word	0x3f7ffff3
 80148e4:	3f800007 	.word	0x3f800007
 80148e8:	3eaaaaab 	.word	0x3eaaaaab
 80148ec:	3fb8aa3b 	.word	0x3fb8aa3b
 80148f0:	36eca570 	.word	0x36eca570
 80148f4:	3fb8aa00 	.word	0x3fb8aa00
 80148f8:	4b800000 	.word	0x4b800000
 80148fc:	001cc471 	.word	0x001cc471
 8014900:	005db3d6 	.word	0x005db3d6
 8014904:	08015524 	.word	0x08015524
 8014908:	fffff000 	.word	0xfffff000
 801490c:	3e6c3255 	.word	0x3e6c3255
 8014910:	3e53f142 	.word	0x3e53f142
 8014914:	3e8ba305 	.word	0x3e8ba305
 8014918:	3edb6db7 	.word	0x3edb6db7
 801491c:	3f19999a 	.word	0x3f19999a
 8014920:	3f76384f 	.word	0x3f76384f
 8014924:	08015534 	.word	0x08015534
 8014928:	3f763800 	.word	0x3f763800
 801492c:	369dc3a0 	.word	0x369dc3a0
 8014930:	0801552c 	.word	0x0801552c
 8014934:	3338aa3c 	.word	0x3338aa3c
 8014938:	f040 8093 	bne.w	8014a62 <__ieee754_powf+0x53e>
 801493c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8014934 <__ieee754_powf+0x410>
 8014940:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014944:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8014948:	eef4 6ac7 	vcmpe.f32	s13, s14
 801494c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014950:	f73f aefa 	bgt.w	8014748 <__ieee754_powf+0x224>
 8014954:	15db      	asrs	r3, r3, #23
 8014956:	3b7e      	subs	r3, #126	; 0x7e
 8014958:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801495c:	4118      	asrs	r0, r3
 801495e:	4408      	add	r0, r1
 8014960:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8014964:	4a49      	ldr	r2, [pc, #292]	; (8014a8c <__ieee754_powf+0x568>)
 8014966:	3b7f      	subs	r3, #127	; 0x7f
 8014968:	411a      	asrs	r2, r3
 801496a:	4002      	ands	r2, r0
 801496c:	ee07 2a10 	vmov	s14, r2
 8014970:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8014974:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8014978:	f1c3 0317 	rsb	r3, r3, #23
 801497c:	4118      	asrs	r0, r3
 801497e:	2900      	cmp	r1, #0
 8014980:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014984:	bfb8      	it	lt
 8014986:	4240      	neglt	r0, r0
 8014988:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801498c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8014a90 <__ieee754_powf+0x56c>
 8014990:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8014a94 <__ieee754_powf+0x570>
 8014994:	ee17 3a10 	vmov	r3, s14
 8014998:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801499c:	f023 030f 	bic.w	r3, r3, #15
 80149a0:	ee07 3a10 	vmov	s14, r3
 80149a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80149a8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80149ac:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80149b0:	eddf 7a39 	vldr	s15, [pc, #228]	; 8014a98 <__ieee754_powf+0x574>
 80149b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80149b8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80149bc:	eef0 6a67 	vmov.f32	s13, s15
 80149c0:	eee7 6a06 	vfma.f32	s13, s14, s12
 80149c4:	eef0 5a66 	vmov.f32	s11, s13
 80149c8:	eee7 5a46 	vfms.f32	s11, s14, s12
 80149cc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80149d0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80149d4:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8014a9c <__ieee754_powf+0x578>
 80149d8:	eddf 5a31 	vldr	s11, [pc, #196]	; 8014aa0 <__ieee754_powf+0x57c>
 80149dc:	eea7 6a25 	vfma.f32	s12, s14, s11
 80149e0:	eddf 5a30 	vldr	s11, [pc, #192]	; 8014aa4 <__ieee754_powf+0x580>
 80149e4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80149e8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8014aa8 <__ieee754_powf+0x584>
 80149ec:	eea5 6a87 	vfma.f32	s12, s11, s14
 80149f0:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8014aac <__ieee754_powf+0x588>
 80149f4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80149f8:	eeb0 6a66 	vmov.f32	s12, s13
 80149fc:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8014a00:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014a04:	ee66 5a86 	vmul.f32	s11, s13, s12
 8014a08:	ee36 6a47 	vsub.f32	s12, s12, s14
 8014a0c:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8014a10:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8014a14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014a1c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014a20:	ee10 3a10 	vmov	r3, s0
 8014a24:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8014a28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014a2c:	da1f      	bge.n	8014a6e <__ieee754_powf+0x54a>
 8014a2e:	f000 f84b 	bl	8014ac8 <scalbnf>
 8014a32:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014a36:	e58d      	b.n	8014554 <__ieee754_powf+0x30>
 8014a38:	4a1d      	ldr	r2, [pc, #116]	; (8014ab0 <__ieee754_powf+0x58c>)
 8014a3a:	4293      	cmp	r3, r2
 8014a3c:	dd07      	ble.n	8014a4e <__ieee754_powf+0x52a>
 8014a3e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a46:	bf4c      	ite	mi
 8014a48:	2001      	movmi	r0, #1
 8014a4a:	2000      	movpl	r0, #0
 8014a4c:	e622      	b.n	8014694 <__ieee754_powf+0x170>
 8014a4e:	d108      	bne.n	8014a62 <__ieee754_powf+0x53e>
 8014a50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014a54:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8014a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a5c:	f6ff af7a 	blt.w	8014954 <__ieee754_powf+0x430>
 8014a60:	e7ed      	b.n	8014a3e <__ieee754_powf+0x51a>
 8014a62:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8014a66:	f73f af75 	bgt.w	8014954 <__ieee754_powf+0x430>
 8014a6a:	2000      	movs	r0, #0
 8014a6c:	e78c      	b.n	8014988 <__ieee754_powf+0x464>
 8014a6e:	ee00 3a10 	vmov	s0, r3
 8014a72:	e7de      	b.n	8014a32 <__ieee754_powf+0x50e>
 8014a74:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014a78:	e56c      	b.n	8014554 <__ieee754_powf+0x30>
 8014a7a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8014ab4 <__ieee754_powf+0x590>
 8014a7e:	e569      	b.n	8014554 <__ieee754_powf+0x30>
 8014a80:	eeb0 0a48 	vmov.f32	s0, s16
 8014a84:	e566      	b.n	8014554 <__ieee754_powf+0x30>
 8014a86:	2600      	movs	r6, #0
 8014a88:	e591      	b.n	80145ae <__ieee754_powf+0x8a>
 8014a8a:	bf00      	nop
 8014a8c:	ff800000 	.word	0xff800000
 8014a90:	3f317218 	.word	0x3f317218
 8014a94:	3f317200 	.word	0x3f317200
 8014a98:	35bfbe8c 	.word	0x35bfbe8c
 8014a9c:	b5ddea0e 	.word	0xb5ddea0e
 8014aa0:	3331bb4c 	.word	0x3331bb4c
 8014aa4:	388ab355 	.word	0x388ab355
 8014aa8:	bb360b61 	.word	0xbb360b61
 8014aac:	3e2aaaab 	.word	0x3e2aaaab
 8014ab0:	43160000 	.word	0x43160000
 8014ab4:	00000000 	.word	0x00000000

08014ab8 <fabsf>:
 8014ab8:	ee10 3a10 	vmov	r3, s0
 8014abc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014ac0:	ee00 3a10 	vmov	s0, r3
 8014ac4:	4770      	bx	lr
	...

08014ac8 <scalbnf>:
 8014ac8:	ee10 3a10 	vmov	r3, s0
 8014acc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8014ad0:	d02b      	beq.n	8014b2a <scalbnf+0x62>
 8014ad2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8014ad6:	d302      	bcc.n	8014ade <scalbnf+0x16>
 8014ad8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014adc:	4770      	bx	lr
 8014ade:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8014ae2:	d123      	bne.n	8014b2c <scalbnf+0x64>
 8014ae4:	4b24      	ldr	r3, [pc, #144]	; (8014b78 <scalbnf+0xb0>)
 8014ae6:	eddf 7a25 	vldr	s15, [pc, #148]	; 8014b7c <scalbnf+0xb4>
 8014aea:	4298      	cmp	r0, r3
 8014aec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014af0:	db17      	blt.n	8014b22 <scalbnf+0x5a>
 8014af2:	ee10 3a10 	vmov	r3, s0
 8014af6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014afa:	3a19      	subs	r2, #25
 8014afc:	f24c 3150 	movw	r1, #50000	; 0xc350
 8014b00:	4288      	cmp	r0, r1
 8014b02:	dd15      	ble.n	8014b30 <scalbnf+0x68>
 8014b04:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8014b80 <scalbnf+0xb8>
 8014b08:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8014b84 <scalbnf+0xbc>
 8014b0c:	ee10 3a10 	vmov	r3, s0
 8014b10:	eeb0 7a67 	vmov.f32	s14, s15
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	bfb8      	it	lt
 8014b18:	eef0 7a66 	vmovlt.f32	s15, s13
 8014b1c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8014b20:	4770      	bx	lr
 8014b22:	eddf 7a19 	vldr	s15, [pc, #100]	; 8014b88 <scalbnf+0xc0>
 8014b26:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014b2a:	4770      	bx	lr
 8014b2c:	0dd2      	lsrs	r2, r2, #23
 8014b2e:	e7e5      	b.n	8014afc <scalbnf+0x34>
 8014b30:	4410      	add	r0, r2
 8014b32:	28fe      	cmp	r0, #254	; 0xfe
 8014b34:	dce6      	bgt.n	8014b04 <scalbnf+0x3c>
 8014b36:	2800      	cmp	r0, #0
 8014b38:	dd06      	ble.n	8014b48 <scalbnf+0x80>
 8014b3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014b3e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8014b42:	ee00 3a10 	vmov	s0, r3
 8014b46:	4770      	bx	lr
 8014b48:	f110 0f16 	cmn.w	r0, #22
 8014b4c:	da09      	bge.n	8014b62 <scalbnf+0x9a>
 8014b4e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8014b88 <scalbnf+0xc0>
 8014b52:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8014b8c <scalbnf+0xc4>
 8014b56:	ee10 3a10 	vmov	r3, s0
 8014b5a:	eeb0 7a67 	vmov.f32	s14, s15
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	e7d9      	b.n	8014b16 <scalbnf+0x4e>
 8014b62:	3019      	adds	r0, #25
 8014b64:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014b68:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8014b6c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8014b90 <scalbnf+0xc8>
 8014b70:	ee07 3a90 	vmov	s15, r3
 8014b74:	e7d7      	b.n	8014b26 <scalbnf+0x5e>
 8014b76:	bf00      	nop
 8014b78:	ffff3cb0 	.word	0xffff3cb0
 8014b7c:	4c000000 	.word	0x4c000000
 8014b80:	7149f2ca 	.word	0x7149f2ca
 8014b84:	f149f2ca 	.word	0xf149f2ca
 8014b88:	0da24260 	.word	0x0da24260
 8014b8c:	8da24260 	.word	0x8da24260
 8014b90:	33000000 	.word	0x33000000

08014b94 <with_errnof>:
 8014b94:	b513      	push	{r0, r1, r4, lr}
 8014b96:	4604      	mov	r4, r0
 8014b98:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014b9c:	f7fd fbb8 	bl	8012310 <__errno>
 8014ba0:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014ba4:	6004      	str	r4, [r0, #0]
 8014ba6:	b002      	add	sp, #8
 8014ba8:	bd10      	pop	{r4, pc}

08014baa <xflowf>:
 8014baa:	b130      	cbz	r0, 8014bba <xflowf+0x10>
 8014bac:	eef1 7a40 	vneg.f32	s15, s0
 8014bb0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014bb4:	2022      	movs	r0, #34	; 0x22
 8014bb6:	f7ff bfed 	b.w	8014b94 <with_errnof>
 8014bba:	eef0 7a40 	vmov.f32	s15, s0
 8014bbe:	e7f7      	b.n	8014bb0 <xflowf+0x6>

08014bc0 <__math_uflowf>:
 8014bc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014bc8 <__math_uflowf+0x8>
 8014bc4:	f7ff bff1 	b.w	8014baa <xflowf>
 8014bc8:	10000000 	.word	0x10000000

08014bcc <__math_oflowf>:
 8014bcc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014bd4 <__math_oflowf+0x8>
 8014bd0:	f7ff bfeb 	b.w	8014baa <xflowf>
 8014bd4:	70000000 	.word	0x70000000

08014bd8 <__ieee754_sqrtf>:
 8014bd8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014bdc:	4770      	bx	lr
	...

08014be0 <_init>:
 8014be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014be2:	bf00      	nop
 8014be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014be6:	bc08      	pop	{r3}
 8014be8:	469e      	mov	lr, r3
 8014bea:	4770      	bx	lr

08014bec <_fini>:
 8014bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bee:	bf00      	nop
 8014bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014bf2:	bc08      	pop	{r3}
 8014bf4:	469e      	mov	lr, r3
 8014bf6:	4770      	bx	lr
