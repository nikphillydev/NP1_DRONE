
Flight Control Computer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021c94  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001180  08021e78  08021e78  00022e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022ff8  08022ff8  00025370  2**0
                  CONTENTS
  4 .ARM          00000008  08022ff8  08022ff8  00023ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023000  08023000  00025370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08023000  08023000  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08023008  08023008  00024008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  08023010  00025000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018510  20000370  08023380  00025370  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20018880  08023380  00025880  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025370  2**0
                  CONTENTS, READONLY
 12 .debug_info   00047f76  00000000  00000000  000253a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000097f2  00000000  00000000  0006d316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002dd8  00000000  00000000  00076b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000231a  00000000  00000000  000798e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035f9f  00000000  00000000  0007bbfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003dd26  00000000  00000000  000b1b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00126ded  00000000  00000000  000ef8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  002166ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000da5c  00000000  00000000  00216734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00224190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000370 	.word	0x20000370
 80001fc:	00000000 	.word	0x00000000
 8000200:	08021e5c 	.word	0x08021e5c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000374 	.word	0x20000374
 800021c:	08021e5c 	.word	0x08021e5c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <_ZNSt5tupleIJP9IIRFilterSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f805 	bl	8000fa2 <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEEC2Ev>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEEC2Ev>:
      constexpr _Tuple_impl()
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f809 	bl	8000fc2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9IIRFilterEEEC2Ev>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f81c 	bl	8000ff0 <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EEC2Ev>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9IIRFilterEEEC2Ev>:
      _Tuple_impl()
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f805 	bl	8000fda <_ZNSt10_Head_baseILj1ESt14default_deleteI9IIRFilterELb1EEC2Ev>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_ZNSt10_Head_baseILj1ESt14default_deleteI9IIRFilterELb1EEC2Ev>:
      constexpr _Head_base()
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EEC2Ev>:
      constexpr _Head_base()
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <_ZN2np10lock_guardC1ERPv>:
{
	/*
	 * Class to implement mutex RAII for CMSIS-V2
	 */
public:
	lock_guard(osMutexId_t& mutex) : mutex(mutex) { osMutexAcquire(this->mutex, osWaitForever); }
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001026:	4618      	mov	r0, r3
 8001028:	f00e f8ad 	bl	800f186 <osMutexAcquire>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <_ZN2np10lock_guardD1Ev>:
	~lock_guard() { osMutexRelease(mutex); }
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f00e f8e9 	bl	800f21c <osMutexRelease>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <_ZN6BMI088C1ER19__SPI_HandleTypeDefRPvP12GPIO_TypeDefS5_ttS3_S3_>:
#include "Drivers/BMI088.hpp"
#include "Drivers/usb.hpp"
#include "Utility/lock_guard.hpp"
#include <cstdio>

BMI088::BMI088(SPI_HandleTypeDef& spi_handle, osMutexId_t& spi_mutex, GPIO_TypeDef* acc_cs_port, GPIO_TypeDef* gyro_cs_port, 
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	603b      	str	r3, [r7, #0]
			uint16_t acc_cs_pin, uint16_t gyro_cs_pin, osMutexId_t& accel_data_mutex, osMutexId_t& gyro_data_mutex)
	: spi_handle(spi_handle),
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	601a      	str	r2, [r3, #0]
	  spi_mutex(spi_mutex),
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	605a      	str	r2, [r3, #4]
	  acc_cs_port(acc_cs_port),
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	609a      	str	r2, [r3, #8]
	  gyro_cs_port(gyro_cs_port),
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	60da      	str	r2, [r3, #12]
	  acc_cs_pin(acc_cs_pin),
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	8bba      	ldrh	r2, [r7, #28]
 800107e:	821a      	strh	r2, [r3, #16]
	  gyro_cs_pin(gyro_cs_pin),
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	8c3a      	ldrh	r2, [r7, #32]
 8001084:	825a      	strh	r2, [r3, #18]
	  accel_data_mutex(accel_data_mutex),
	  gyro_data_mutex(gyro_data_mutex) {}
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4a14      	ldr	r2, [pc, #80]	@ (80010dc <_ZN6BMI088C1ER19__SPI_HandleTypeDefRPvP12GPIO_TypeDefS5_ttS3_S3_+0x88>)
 800108a:	619a      	str	r2, [r3, #24]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4a14      	ldr	r2, [pc, #80]	@ (80010e0 <_ZN6BMI088C1ER19__SPI_HandleTypeDefRPvP12GPIO_TypeDefS5_ttS3_S3_+0x8c>)
 8001090:	61da      	str	r2, [r3, #28]
	  accel_data_mutex(accel_data_mutex),
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001096:	621a      	str	r2, [r3, #32]
	  gyro_data_mutex(gyro_data_mutex) {}
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800109c:	625a      	str	r2, [r3, #36]	@ 0x24
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3328      	adds	r3, #40	@ 0x28
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3334      	adds	r3, #52	@ 0x34
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	3344      	adds	r3, #68	@ 0x44
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3350      	adds	r3, #80	@ 0x50
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	3a6b5c0f 	.word	0x3a6b5c0f
 80010e0:	398ba058 	.word	0x398ba058

080010e4 <_ZNSt15__uniq_ptr_dataI9IIRFilterSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 f817 	bl	8002128 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ffe5 	bl	80010e4 <_ZNSt15__uniq_ptr_dataI9IIRFilterSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZN6BMI0884initEv>:

bool BMI088::init()
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08e      	sub	sp, #56	@ 0x38
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	bool status = false;
 800112c:	2300      	movs	r3, #0
 800112e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];

	// Accelerometer requires rising edge on CS pin to switch to SPI mode
	HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_RESET);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6898      	ldr	r0, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	8a1b      	ldrh	r3, [r3, #16]
 800113a:	2200      	movs	r2, #0
 800113c:	4619      	mov	r1, r3
 800113e:	f004 ff65 	bl	800600c <HAL_GPIO_WritePin>
	osDelay(10);
 8001142:	200a      	movs	r0, #10
 8001144:	f00d ff51 	bl	800efea <osDelay>
	HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_SET);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6898      	ldr	r0, [r3, #8]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	8a1b      	ldrh	r3, [r3, #16]
 8001150:	2201      	movs	r2, #1
 8001152:	4619      	mov	r1, r3
 8001154:	f004 ff5a 	bl	800600c <HAL_GPIO_WritePin>
	osDelay(10);
 8001158:	200a      	movs	r0, #10
 800115a:	f00d ff46 	bl	800efea <osDelay>
	
	// Perform soft-reset of accelerometer
	tx_data[0] = 0xB6;
 800115e:	23b6      	movs	r3, #182	@ 0xb6
 8001160:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_ACC_SOFTRESET, tx_data, 1);
 8001164:	f107 0220 	add.w	r2, r7, #32
 8001168:	2301      	movs	r3, #1
 800116a:	217e      	movs	r1, #126	@ 0x7e
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 fe51 	bl	8001e14 <_ZN6BMI08820write_accel_registerEhPht>
 8001172:	4603      	mov	r3, r0
 8001174:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001178:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800117c:	f083 0301 	eor.w	r3, r3, #1
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <_ZN6BMI0884initEv+0x68>
 8001186:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800118a:	e20f      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 800118c:	200a      	movs	r0, #10
 800118e:	f00d ff2c 	bl	800efea <osDelay>

	// Perform soft-reset of gyroscope
	tx_data[0] = 0xB6;
 8001192:	23b6      	movs	r3, #182	@ 0xb6
 8001194:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_GYRO_SOFTRESET, tx_data, 1);
 8001198:	f107 0220 	add.w	r2, r7, #32
 800119c:	2301      	movs	r3, #1
 800119e:	2114      	movs	r1, #20
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 fec9 	bl	8001f38 <_ZN6BMI08819write_gyro_registerEhPht>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 80011ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011b0:	f083 0301 	eor.w	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <_ZN6BMI0884initEv+0x9c>
 80011ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011be:	e1f5      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 80011c0:	200a      	movs	r0, #10
 80011c2:	f00d ff12 	bl	800efea <osDelay>
	/*
	 * ACCELEROMETER SETUP
	 */

	// Accelerometer requires rising edge on CS pin to switch to SPI mode
	HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_RESET);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6898      	ldr	r0, [r3, #8]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	8a1b      	ldrh	r3, [r3, #16]
 80011ce:	2200      	movs	r2, #0
 80011d0:	4619      	mov	r1, r3
 80011d2:	f004 ff1b 	bl	800600c <HAL_GPIO_WritePin>
	osDelay(10);
 80011d6:	200a      	movs	r0, #10
 80011d8:	f00d ff07 	bl	800efea <osDelay>
	HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_SET);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6898      	ldr	r0, [r3, #8]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	8a1b      	ldrh	r3, [r3, #16]
 80011e4:	2201      	movs	r2, #1
 80011e6:	4619      	mov	r1, r3
 80011e8:	f004 ff10 	bl	800600c <HAL_GPIO_WritePin>
	osDelay(10);
 80011ec:	200a      	movs	r0, #10
 80011ee:	f00d fefc 	bl	800efea <osDelay>

	// Check accelerometer chip ID
	rx_data[0] = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	773b      	strb	r3, [r7, #28]
	status = read_accel_register(REG_ACC_CHIP_ID, rx_data, 1);
 80011f6:	f107 021c 	add.w	r2, r7, #28
 80011fa:	2301      	movs	r3, #1
 80011fc:	2100      	movs	r1, #0
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 fc8c 	bl	8001b1c <_ZN6BMI08819read_accel_registerEhPht>
 8001204:	4603      	mov	r3, r0
 8001206:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (status && rx_data[0] == 0x1E)
 800120a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800120e:	2b00      	cmp	r3, #0
 8001210:	d01e      	beq.n	8001250 <_ZN6BMI0884initEv+0x12c>
 8001212:	7f3b      	ldrb	r3, [r7, #28]
 8001214:	2b1e      	cmp	r3, #30
 8001216:	d11b      	bne.n	8001250 <_ZN6BMI0884initEv+0x12c>
	{
		USB_Log("Found BMI088 accelerometer, starting initialization.", CRITICAL);
 8001218:	2101      	movs	r1, #1
 800121a:	48c9      	ldr	r0, [pc, #804]	@ (8001540 <_ZN6BMI0884initEv+0x41c>)
 800121c:	f002 fa2a 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	else
	{
		USB_Log("Failed to find BMI088 accelerometer. Initialization failed.", ERR);
		return false;
	}
	osDelay(10);
 8001220:	200a      	movs	r0, #10
 8001222:	f00d fee2 	bl	800efea <osDelay>

	// Set 400Hz ODR, no over-sampling (145Hz BW)
	tx_data[0] = 0xAA;
 8001226:	23aa      	movs	r3, #170	@ 0xaa
 8001228:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_ACC_CONF, tx_data, 1);
 800122c:	f107 0220 	add.w	r2, r7, #32
 8001230:	2301      	movs	r3, #1
 8001232:	2140      	movs	r1, #64	@ 0x40
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 fded 	bl	8001e14 <_ZN6BMI08820write_accel_registerEhPht>
 800123a:	4603      	mov	r3, r0
 800123c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001240:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001244:	f083 0301 	eor.w	r3, r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d106      	bne.n	800125c <_ZN6BMI0884initEv+0x138>
 800124e:	e008      	b.n	8001262 <_ZN6BMI0884initEv+0x13e>
		USB_Log("Failed to find BMI088 accelerometer. Initialization failed.", ERR);
 8001250:	2102      	movs	r1, #2
 8001252:	48bc      	ldr	r0, [pc, #752]	@ (8001544 <_ZN6BMI0884initEv+0x420>)
 8001254:	f002 fa0e 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
		return false;
 8001258:	2300      	movs	r3, #0
 800125a:	e1a7      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	if (!status) return status;
 800125c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001260:	e1a4      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 8001262:	200a      	movs	r0, #10
 8001264:	f00d fec1 	bl	800efea <osDelay>

	// Initilize accelerometer IIR Filters
	float ACCEL_ODR = 400;			// Hz
 8001268:	4bb7      	ldr	r3, [pc, #732]	@ (8001548 <_ZN6BMI0884initEv+0x424>)
 800126a:	61bb      	str	r3, [r7, #24]
	float ACCEL_CUTOFF = 10;		// Hz
 800126c:	4bb7      	ldr	r3, [pc, #732]	@ (800154c <_ZN6BMI0884initEv+0x428>)
 800126e:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < accel_filters.size(); i++)
 8001270:	2300      	movs	r3, #0
 8001272:	637b      	str	r3, [r7, #52]	@ 0x34
 8001274:	e01d      	b.n	80012b2 <_ZN6BMI0884initEv+0x18e>
	{
		accel_filters[i] = std::make_unique<IIRFilter>(ACCEL_CUTOFF, ACCEL_ODR);
 8001276:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800127a:	f107 0218 	add.w	r2, r7, #24
 800127e:	f107 0114 	add.w	r1, r7, #20
 8001282:	4618      	mov	r0, r3
 8001284:	f000 ff26 	bl	80020d4 <_ZSt11make_uniqueI9IIRFilterJRfS1_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3344      	adds	r3, #68	@ 0x44
 800128c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800128e:	4618      	mov	r0, r3
 8001290:	f000 ff11 	bl	80020b6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8001294:	4602      	mov	r2, r0
 8001296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129a:	4619      	mov	r1, r3
 800129c:	4610      	mov	r0, r2
 800129e:	f7ff ff31 	bl	8001104 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>
 80012a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fed8 	bl	800205c <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev>
	for (size_t i = 0; i < accel_filters.size(); i++)
 80012ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012ae:	3301      	adds	r3, #1
 80012b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3344      	adds	r3, #68	@ 0x44
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fef2 	bl	80020a0 <_ZNKSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE4sizeEv>
 80012bc:	4602      	mov	r2, r0
 80012be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d3d8      	bcc.n	8001276 <_ZN6BMI0884initEv+0x152>
	}

	// Set +-3g range (10920 LSB/g)
	tx_data[0] = 0x00;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_ACC_RANGE, tx_data, 1);
 80012ca:	f107 0220 	add.w	r2, r7, #32
 80012ce:	2301      	movs	r3, #1
 80012d0:	2141      	movs	r1, #65	@ 0x41
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 fd9e 	bl	8001e14 <_ZN6BMI08820write_accel_registerEhPht>
 80012d8:	4603      	mov	r3, r0
 80012da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 80012de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012e2:	f083 0301 	eor.w	r3, r3, #1
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <_ZN6BMI0884initEv+0x1ce>
 80012ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012f0:	e15c      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 80012f2:	200a      	movs	r0, #10
 80012f4:	f00d fe79 	bl	800efea <osDelay>

	// Configure INT1 (output, push-pull, active high)
	tx_data[0] = 0x0A;
 80012f8:	230a      	movs	r3, #10
 80012fa:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_INT1_IO_CTRL, tx_data, 1);
 80012fe:	f107 0220 	add.w	r2, r7, #32
 8001302:	2301      	movs	r3, #1
 8001304:	2153      	movs	r1, #83	@ 0x53
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 fd84 	bl	8001e14 <_ZN6BMI08820write_accel_registerEhPht>
 800130c:	4603      	mov	r3, r0
 800130e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001312:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001316:	f083 0301 	eor.w	r3, r3, #1
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <_ZN6BMI0884initEv+0x202>
 8001320:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001324:	e142      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 8001326:	200a      	movs	r0, #10
 8001328:	f00d fe5f 	bl	800efea <osDelay>

	// Map accelerometer data ready interrupt to INT1
	tx_data[0] = 0x04;
 800132c:	2304      	movs	r3, #4
 800132e:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_INT_MAP_DATA, tx_data, 1);
 8001332:	f107 0220 	add.w	r2, r7, #32
 8001336:	2301      	movs	r3, #1
 8001338:	2158      	movs	r1, #88	@ 0x58
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 fd6a 	bl	8001e14 <_ZN6BMI08820write_accel_registerEhPht>
 8001340:	4603      	mov	r3, r0
 8001342:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001346:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800134a:	f083 0301 	eor.w	r3, r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <_ZN6BMI0884initEv+0x236>
 8001354:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001358:	e128      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 800135a:	200a      	movs	r0, #10
 800135c:	f00d fe45 	bl	800efea <osDelay>

	// Switch accelerometer into active mode (enable data acquisition)
	tx_data[0] = 0x00;
 8001360:	2300      	movs	r3, #0
 8001362:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_ACC_PWR_CONF, tx_data, 1);
 8001366:	f107 0220 	add.w	r2, r7, #32
 800136a:	2301      	movs	r3, #1
 800136c:	217c      	movs	r1, #124	@ 0x7c
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 fd50 	bl	8001e14 <_ZN6BMI08820write_accel_registerEhPht>
 8001374:	4603      	mov	r3, r0
 8001376:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 800137a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800137e:	f083 0301 	eor.w	r3, r3, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <_ZN6BMI0884initEv+0x26a>
 8001388:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800138c:	e10e      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 800138e:	200a      	movs	r0, #10
 8001390:	f00d fe2b 	bl	800efea <osDelay>

	// Turn accelerometer ON
	tx_data[0] = 0x04;
 8001394:	2304      	movs	r3, #4
 8001396:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_ACC_PWR_CTRL, tx_data, 1);
 800139a:	f107 0220 	add.w	r2, r7, #32
 800139e:	2301      	movs	r3, #1
 80013a0:	217d      	movs	r1, #125	@ 0x7d
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 fd36 	bl	8001e14 <_ZN6BMI08820write_accel_registerEhPht>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 80013ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013b2:	f083 0301 	eor.w	r3, r3, #1
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <_ZN6BMI0884initEv+0x29e>
 80013bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013c0:	e0f4      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 80013c2:	200a      	movs	r0, #10
 80013c4:	f00d fe11 	bl	800efea <osDelay>

	USB_Log("BMI088 accelerometer initialized OK.", CRITICAL);
 80013c8:	2101      	movs	r1, #1
 80013ca:	4861      	ldr	r0, [pc, #388]	@ (8001550 <_ZN6BMI0884initEv+0x42c>)
 80013cc:	f002 f952 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 80013d0:	2064      	movs	r0, #100	@ 0x64
 80013d2:	f00d fe0a 	bl	800efea <osDelay>
	/*
	 * GYROSCOPE SETUP
	 */

	// Check gyroscope chip ID
	rx_data[0] = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	773b      	strb	r3, [r7, #28]
	status = read_gyro_register(REG_GYRO_CHIP_ID, rx_data, 1);
 80013da:	f107 021c 	add.w	r2, r7, #28
 80013de:	2301      	movs	r3, #1
 80013e0:	2100      	movs	r1, #0
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 fc58 	bl	8001c98 <_ZN6BMI08818read_gyro_registerEhPht>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (status && rx_data[0] == 0x0F)
 80013ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d01e      	beq.n	8001434 <_ZN6BMI0884initEv+0x310>
 80013f6:	7f3b      	ldrb	r3, [r7, #28]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d11b      	bne.n	8001434 <_ZN6BMI0884initEv+0x310>
	{
		USB_Log("Found BMI088 gyroscope, starting initialization.", CRITICAL);
 80013fc:	2101      	movs	r1, #1
 80013fe:	4855      	ldr	r0, [pc, #340]	@ (8001554 <_ZN6BMI0884initEv+0x430>)
 8001400:	f002 f938 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	else
	{
		USB_Log("Failed to find BMI088 gyroscope. Initialization failed.", ERR);
		return false;
	}
	osDelay(10);
 8001404:	200a      	movs	r0, #10
 8001406:	f00d fdf0 	bl	800efea <osDelay>

	// Set 400Hz ODR (47Hz BW)
	tx_data[0] = 0x03;
 800140a:	2303      	movs	r3, #3
 800140c:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_GYRO_BANDWIDTH, tx_data, 1);
 8001410:	f107 0220 	add.w	r2, r7, #32
 8001414:	2301      	movs	r3, #1
 8001416:	2110      	movs	r1, #16
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fd8d 	bl	8001f38 <_ZN6BMI08819write_gyro_registerEhPht>
 800141e:	4603      	mov	r3, r0
 8001420:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001424:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001428:	f083 0301 	eor.w	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <_ZN6BMI0884initEv+0x31c>
 8001432:	e008      	b.n	8001446 <_ZN6BMI0884initEv+0x322>
		USB_Log("Failed to find BMI088 gyroscope. Initialization failed.", ERR);
 8001434:	2102      	movs	r1, #2
 8001436:	4848      	ldr	r0, [pc, #288]	@ (8001558 <_ZN6BMI0884initEv+0x434>)
 8001438:	f002 f91c 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
		return false;
 800143c:	2300      	movs	r3, #0
 800143e:	e0b5      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	if (!status) return status;
 8001440:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001444:	e0b2      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 8001446:	200a      	movs	r0, #10
 8001448:	f00d fdcf 	bl	800efea <osDelay>

	// Initilize gyroscope IIR Filters
	float GYRO_ODR = 400;		// Hz
 800144c:	4b3e      	ldr	r3, [pc, #248]	@ (8001548 <_ZN6BMI0884initEv+0x424>)
 800144e:	613b      	str	r3, [r7, #16]
	float GYRO_CUTOFF = 50;		// Hz
 8001450:	4b42      	ldr	r3, [pc, #264]	@ (800155c <_ZN6BMI0884initEv+0x438>)
 8001452:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; i < gyro_filters.size(); i++)
 8001454:	2300      	movs	r3, #0
 8001456:	633b      	str	r3, [r7, #48]	@ 0x30
 8001458:	e01d      	b.n	8001496 <_ZN6BMI0884initEv+0x372>
	{
		gyro_filters[i] = std::make_unique<IIRFilter>(GYRO_CUTOFF, GYRO_ODR);
 800145a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800145e:	f107 0210 	add.w	r2, r7, #16
 8001462:	f107 010c 	add.w	r1, r7, #12
 8001466:	4618      	mov	r0, r3
 8001468:	f000 fe34 	bl	80020d4 <_ZSt11make_uniqueI9IIRFilterJRfS1_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3350      	adds	r3, #80	@ 0x50
 8001470:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001472:	4618      	mov	r0, r3
 8001474:	f000 fe1f 	bl	80020b6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8001478:	4602      	mov	r2, r0
 800147a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800147e:	4619      	mov	r1, r3
 8001480:	4610      	mov	r0, r2
 8001482:	f7ff fe3f 	bl	8001104 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>
 8001486:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fde6 	bl	800205c <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev>
	for (size_t i = 0; i < gyro_filters.size(); i++)
 8001490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001492:	3301      	adds	r3, #1
 8001494:	633b      	str	r3, [r7, #48]	@ 0x30
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3350      	adds	r3, #80	@ 0x50
 800149a:	4618      	mov	r0, r3
 800149c:	f000 fe00 	bl	80020a0 <_ZNKSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE4sizeEv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d3d8      	bcc.n	800145a <_ZN6BMI0884initEv+0x336>
	}

	// Set +-500 deg/s range (65.536 LSB/deg/s)
	tx_data[0] = 0x02;
 80014a8:	2302      	movs	r3, #2
 80014aa:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_GYRO_RANGE, tx_data, 1);
 80014ae:	f107 0220 	add.w	r2, r7, #32
 80014b2:	2301      	movs	r3, #1
 80014b4:	210f      	movs	r1, #15
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 fd3e 	bl	8001f38 <_ZN6BMI08819write_gyro_registerEhPht>
 80014bc:	4603      	mov	r3, r0
 80014be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 80014c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014c6:	f083 0301 	eor.w	r3, r3, #1
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <_ZN6BMI0884initEv+0x3b2>
 80014d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014d4:	e06a      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 80014d6:	200a      	movs	r0, #10
 80014d8:	f00d fd87 	bl	800efea <osDelay>

	// Configure INT3 (push-pull, active high)
	tx_data[0] = 0x01;
 80014dc:	2301      	movs	r3, #1
 80014de:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_INT3_INT4_IO_CONF, tx_data, 1);
 80014e2:	f107 0220 	add.w	r2, r7, #32
 80014e6:	2301      	movs	r3, #1
 80014e8:	2116      	movs	r1, #22
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 fd24 	bl	8001f38 <_ZN6BMI08819write_gyro_registerEhPht>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 80014f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014fa:	f083 0301 	eor.w	r3, r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <_ZN6BMI0884initEv+0x3e6>
 8001504:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001508:	e050      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 800150a:	200a      	movs	r0, #10
 800150c:	f00d fd6d 	bl	800efea <osDelay>

	// Map gyroscope data ready interrupt to INT3
	tx_data[0] = 0x01;
 8001510:	2301      	movs	r3, #1
 8001512:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_INT3_INT4_IO_MAP, tx_data, 1);
 8001516:	f107 0220 	add.w	r2, r7, #32
 800151a:	2301      	movs	r3, #1
 800151c:	2118      	movs	r1, #24
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 fd0a 	bl	8001f38 <_ZN6BMI08819write_gyro_registerEhPht>
 8001524:	4603      	mov	r3, r0
 8001526:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 800152a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800152e:	f083 0301 	eor.w	r3, r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d013      	beq.n	8001560 <_ZN6BMI0884initEv+0x43c>
 8001538:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800153c:	e036      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
 800153e:	bf00      	nop
 8001540:	08021e78 	.word	0x08021e78
 8001544:	08021eb0 	.word	0x08021eb0
 8001548:	43c80000 	.word	0x43c80000
 800154c:	41200000 	.word	0x41200000
 8001550:	08021eec 	.word	0x08021eec
 8001554:	08021f14 	.word	0x08021f14
 8001558:	08021f48 	.word	0x08021f48
 800155c:	42480000 	.word	0x42480000
	osDelay(10);
 8001560:	200a      	movs	r0, #10
 8001562:	f00d fd42 	bl	800efea <osDelay>

	// Enable gyroscope new data interrupt
	tx_data[0] = 0x80;
 8001566:	2380      	movs	r3, #128	@ 0x80
 8001568:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_GYRO_INT_CTRL, tx_data, 1);
 800156c:	f107 0220 	add.w	r2, r7, #32
 8001570:	2301      	movs	r3, #1
 8001572:	2115      	movs	r1, #21
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 fcdf 	bl	8001f38 <_ZN6BMI08819write_gyro_registerEhPht>
 800157a:	4603      	mov	r3, r0
 800157c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001580:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001584:	f083 0301 	eor.w	r3, r3, #1
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d002      	beq.n	8001594 <_ZN6BMI0884initEv+0x470>
 800158e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001592:	e00b      	b.n	80015ac <_ZN6BMI0884initEv+0x488>
	osDelay(10);
 8001594:	200a      	movs	r0, #10
 8001596:	f00d fd28 	bl	800efea <osDelay>

	USB_Log("BMI088 gyroscope initialized OK.", CRITICAL);
 800159a:	2101      	movs	r1, #1
 800159c:	4805      	ldr	r0, [pc, #20]	@ (80015b4 <_ZN6BMI0884initEv+0x490>)
 800159e:	f002 f869 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 80015a2:	2064      	movs	r0, #100	@ 0x64
 80015a4:	f00d fd21 	bl	800efea <osDelay>

	return status;
 80015a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3738      	adds	r7, #56	@ 0x38
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	08021f80 	.word	0x08021f80

080015b8 <_ZN6BMI08825service_irq_accelerometerEv>:

bool BMI088::service_irq_accelerometer()
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b08b      	sub	sp, #44	@ 0x2c
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	// Read raw accelerometer data
	uint8_t rx_data[6];
	bool status = read_accel_register(REG_ACC_X_LSB, rx_data, sizeof(rx_data));
 80015c0:	f107 020c 	add.w	r2, r7, #12
 80015c4:	2306      	movs	r3, #6
 80015c6:	2112      	movs	r1, #18
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 faa7 	bl	8001b1c <_ZN6BMI08819read_accel_registerEhPht>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status)
 80015d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 809e 	beq.w	800171a <_ZN6BMI08825service_irq_accelerometerEv+0x162>
	{
		// Convert raw data into engineering units
		int16_t accel_x_int16 = (rx_data[1] << 8) | rx_data[0];
 80015de:	7b7b      	ldrb	r3, [r7, #13]
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	7b3b      	ldrb	r3, [r7, #12]
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
		int16_t accel_y_int16 = (rx_data[3] << 8) | rx_data[2];
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	7bbb      	ldrb	r3, [r7, #14]
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	4313      	orrs	r3, r2
 80015f8:	847b      	strh	r3, [r7, #34]	@ 0x22
		int16_t accel_z_int16 = (rx_data[5] << 8) | rx_data[4];
 80015fa:	7c7b      	ldrb	r3, [r7, #17]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b21a      	sxth	r2, r3
 8001600:	7c3b      	ldrb	r3, [r7, #16]
 8001602:	b21b      	sxth	r3, r3
 8001604:	4313      	orrs	r3, r2
 8001606:	843b      	strh	r3, [r7, #32]
		
		float bmi_x = accel_filters[0]->update(accel_x_int16 * acc_conversion);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3344      	adds	r3, #68	@ 0x44
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f000 fd51 	bl	80020b6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8001614:	4603      	mov	r3, r0
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fda2 	bl	8002160 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 800161c:	4602      	mov	r2, r0
 800161e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001634:	eeb0 0a67 	vmov.f32	s0, s15
 8001638:	4610      	mov	r0, r2
 800163a:	f002 fe83 	bl	8004344 <_ZN9IIRFilter6updateEf>
 800163e:	ed87 0a07 	vstr	s0, [r7, #28]
		float bmi_y = accel_filters[1]->update(accel_y_int16 * acc_conversion);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3344      	adds	r3, #68	@ 0x44
 8001646:	2101      	movs	r1, #1
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fd34 	bl	80020b6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 800164e:	4603      	mov	r3, r0
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fd85 	bl	8002160 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 8001656:	4602      	mov	r2, r0
 8001658:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800165c:	ee07 3a90 	vmov	s15, r3
 8001660:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	edd3 7a06 	vldr	s15, [r3, #24]
 800166a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166e:	eeb0 0a67 	vmov.f32	s0, s15
 8001672:	4610      	mov	r0, r2
 8001674:	f002 fe66 	bl	8004344 <_ZN9IIRFilter6updateEf>
 8001678:	ed87 0a06 	vstr	s0, [r7, #24]
		float bmi_z = accel_filters[2]->update(accel_z_int16 * acc_conversion);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3344      	adds	r3, #68	@ 0x44
 8001680:	2102      	movs	r1, #2
 8001682:	4618      	mov	r0, r3
 8001684:	f000 fd17 	bl	80020b6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8001688:	4603      	mov	r3, r0
 800168a:	4618      	mov	r0, r3
 800168c:	f000 fd68 	bl	8002160 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 8001690:	4602      	mov	r2, r0
 8001692:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001696:	ee07 3a90 	vmov	s15, r3
 800169a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80016a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a8:	eeb0 0a67 	vmov.f32	s0, s15
 80016ac:	4610      	mov	r0, r2
 80016ae:	f002 fe49 	bl	8004344 <_ZN9IIRFilter6updateEf>
 80016b2:	ed87 0a05 	vstr	s0, [r7, #20]

		{
			np::lock_guard lock(accel_data_mutex);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1a      	ldr	r2, [r3, #32]
 80016ba:	f107 0308 	add.w	r3, r7, #8
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fca3 	bl	800100c <_ZN2np10lock_guardC1ERPv>
			linear_accelerations[0] = bmi_x;
 80016c6:	69fc      	ldr	r4, [r7, #28]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3328      	adds	r3, #40	@ 0x28
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fd52 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 80016d4:	4603      	mov	r3, r0
 80016d6:	601c      	str	r4, [r3, #0]
			linear_accelerations[1] = bmi_y;
 80016d8:	69bc      	ldr	r4, [r7, #24]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3328      	adds	r3, #40	@ 0x28
 80016de:	2101      	movs	r1, #1
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 fd49 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 80016e6:	4603      	mov	r3, r0
 80016e8:	601c      	str	r4, [r3, #0]
			linear_accelerations[2] = bmi_z;
 80016ea:	697c      	ldr	r4, [r7, #20]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3328      	adds	r3, #40	@ 0x28
 80016f0:	2102      	movs	r1, #2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fd40 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 80016f8:	4603      	mov	r3, r0
 80016fa:	601c      	str	r4, [r3, #0]
		}
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fc98 	bl	8001036 <_ZN2np10lock_guardD1Ev>

		// Clear data ready interrupt
		bool temp = read_accel_register(REG_ACC_INT_STAT_1, rx_data, 1);
 8001706:	f107 020c 	add.w	r2, r7, #12
 800170a:	2301      	movs	r3, #1
 800170c:	211d      	movs	r1, #29
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 fa04 	bl	8001b1c <_ZN6BMI08819read_accel_registerEhPht>
 8001714:	4603      	mov	r3, r0
 8001716:	74fb      	strb	r3, [r7, #19]
 8001718:	e003      	b.n	8001722 <_ZN6BMI08825service_irq_accelerometerEv+0x16a>
		(void)temp;
	}
	else
	{
		USB_Log("ERROR reading BMI088 accelerometer data.", ERR);
 800171a:	2102      	movs	r1, #2
 800171c:	4804      	ldr	r0, [pc, #16]	@ (8001730 <_ZN6BMI08825service_irq_accelerometerEv+0x178>)
 800171e:	f001 ffa9 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 8001722:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001726:	4618      	mov	r0, r3
 8001728:	372c      	adds	r7, #44	@ 0x2c
 800172a:	46bd      	mov	sp, r7
 800172c:	bd90      	pop	{r4, r7, pc}
 800172e:	bf00      	nop
 8001730:	08021fa4 	.word	0x08021fa4

08001734 <_ZN6BMI08821service_irq_gyroscopeEv>:

bool BMI088::service_irq_gyroscope()
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b08b      	sub	sp, #44	@ 0x2c
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	// Read raw gyroscope data
	uint8_t rx_data[6];
	bool status = read_gyro_register(REG_RATE_X_LSB, rx_data, sizeof(rx_data));
 800173c:	f107 020c 	add.w	r2, r7, #12
 8001740:	2306      	movs	r3, #6
 8001742:	2102      	movs	r1, #2
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 faa7 	bl	8001c98 <_ZN6BMI08818read_gyro_registerEhPht>
 800174a:	4603      	mov	r3, r0
 800174c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status)
 8001750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 8095 	beq.w	8001884 <_ZN6BMI08821service_irq_gyroscopeEv+0x150>
	{
		// Convert raw data into engineering units
		int16_t rate_x_int16 = (rx_data[1] << 8) | rx_data[0];
 800175a:	7b7b      	ldrb	r3, [r7, #13]
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	b21a      	sxth	r2, r3
 8001760:	7b3b      	ldrb	r3, [r7, #12]
 8001762:	b21b      	sxth	r3, r3
 8001764:	4313      	orrs	r3, r2
 8001766:	84bb      	strh	r3, [r7, #36]	@ 0x24
		int16_t rate_y_int16 = (rx_data[3] << 8) | rx_data[2];
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	b21a      	sxth	r2, r3
 800176e:	7bbb      	ldrb	r3, [r7, #14]
 8001770:	b21b      	sxth	r3, r3
 8001772:	4313      	orrs	r3, r2
 8001774:	847b      	strh	r3, [r7, #34]	@ 0x22
		int16_t rate_z_int16 = (rx_data[5] << 8) | rx_data[4];
 8001776:	7c7b      	ldrb	r3, [r7, #17]
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	b21a      	sxth	r2, r3
 800177c:	7c3b      	ldrb	r3, [r7, #16]
 800177e:	b21b      	sxth	r3, r3
 8001780:	4313      	orrs	r3, r2
 8001782:	843b      	strh	r3, [r7, #32]

		float bmi_x = gyro_filters[0]->update(rate_x_int16 * gyro_conversion);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3350      	adds	r3, #80	@ 0x50
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fc93 	bl	80020b6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8001790:	4603      	mov	r3, r0
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fce4 	bl	8002160 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 8001798:	4602      	mov	r2, r0
 800179a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80017ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b0:	eeb0 0a67 	vmov.f32	s0, s15
 80017b4:	4610      	mov	r0, r2
 80017b6:	f002 fdc5 	bl	8004344 <_ZN9IIRFilter6updateEf>
 80017ba:	ed87 0a07 	vstr	s0, [r7, #28]
		float bmi_y = gyro_filters[1]->update(rate_y_int16 * gyro_conversion);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3350      	adds	r3, #80	@ 0x50
 80017c2:	2101      	movs	r1, #1
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fc76 	bl	80020b6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 fcc7 	bl	8002160 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 80017d2:	4602      	mov	r2, r0
 80017d4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80017d8:	ee07 3a90 	vmov	s15, r3
 80017dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	edd3 7a07 	vldr	s15, [r3, #28]
 80017e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ea:	eeb0 0a67 	vmov.f32	s0, s15
 80017ee:	4610      	mov	r0, r2
 80017f0:	f002 fda8 	bl	8004344 <_ZN9IIRFilter6updateEf>
 80017f4:	ed87 0a06 	vstr	s0, [r7, #24]
		float bmi_z = gyro_filters[2]->update(rate_z_int16 * gyro_conversion);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3350      	adds	r3, #80	@ 0x50
 80017fc:	2102      	movs	r1, #2
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 fc59 	bl	80020b6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8001804:	4603      	mov	r3, r0
 8001806:	4618      	mov	r0, r3
 8001808:	f000 fcaa 	bl	8002160 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 800180c:	4602      	mov	r2, r0
 800180e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001824:	eeb0 0a67 	vmov.f32	s0, s15
 8001828:	4610      	mov	r0, r2
 800182a:	f002 fd8b 	bl	8004344 <_ZN9IIRFilter6updateEf>
 800182e:	ed87 0a05 	vstr	s0, [r7, #20]

		np::lock_guard lock(gyro_data_mutex);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fbe5 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		angular_velocities[0] = bmi_x;
 8001842:	69fc      	ldr	r4, [r7, #28]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3334      	adds	r3, #52	@ 0x34
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f000 fc94 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8001850:	4603      	mov	r3, r0
 8001852:	601c      	str	r4, [r3, #0]
		angular_velocities[1] = bmi_y;
 8001854:	69bc      	ldr	r4, [r7, #24]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3334      	adds	r3, #52	@ 0x34
 800185a:	2101      	movs	r1, #1
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fc8b 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8001862:	4603      	mov	r3, r0
 8001864:	601c      	str	r4, [r3, #0]
		angular_velocities[2] = bmi_z;
 8001866:	697c      	ldr	r4, [r7, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3334      	adds	r3, #52	@ 0x34
 800186c:	2102      	movs	r1, #2
 800186e:	4618      	mov	r0, r3
 8001870:	f000 fc82 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8001874:	4603      	mov	r3, r0
 8001876:	601c      	str	r4, [r3, #0]

		// Interrupt cleared automatically after 280-400us
	}
 8001878:	f107 0308 	add.w	r3, r7, #8
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fbda 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 8001882:	e003      	b.n	800188c <_ZN6BMI08821service_irq_gyroscopeEv+0x158>
	else
	{
		USB_Log("ERROR reading BMI088 gyroscope data.", ERR);
 8001884:	2102      	movs	r1, #2
 8001886:	4804      	ldr	r0, [pc, #16]	@ (8001898 <_ZN6BMI08821service_irq_gyroscopeEv+0x164>)
 8001888:	f001 fef4 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 800188c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001890:	4618      	mov	r0, r3
 8001892:	372c      	adds	r7, #44	@ 0x2c
 8001894:	46bd      	mov	sp, r7
 8001896:	bd90      	pop	{r4, r7, pc}
 8001898:	08021fd0 	.word	0x08021fd0

0800189c <_ZN6BMI08823service_irq_temperatureEv>:

bool BMI088::service_irq_temperature()
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	// Read raw temperature data
	uint8_t rx_data[2];
	bool status = read_accel_register(REG_TEMP_MSB, rx_data, sizeof(rx_data));
 80018a4:	f107 0210 	add.w	r2, r7, #16
 80018a8:	2302      	movs	r3, #2
 80018aa:	2122      	movs	r1, #34	@ 0x22
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f935 	bl	8001b1c <_ZN6BMI08819read_accel_registerEhPht>
 80018b2:	4603      	mov	r3, r0
 80018b4:	757b      	strb	r3, [r7, #21]

	if (status)
 80018b6:	7d7b      	ldrb	r3, [r7, #21]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d036      	beq.n	800192a <_ZN6BMI08823service_irq_temperatureEv+0x8e>
	{
		// Convert raw data into engineering units
		uint16_t temp_uint11 = (rx_data[0] << 3) | (rx_data[1] >> 5);
 80018bc:	7c3b      	ldrb	r3, [r7, #16]
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	b21a      	sxth	r2, r3
 80018c2:	7c7b      	ldrb	r3, [r7, #17]
 80018c4:	095b      	lsrs	r3, r3, #5
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	b21b      	sxth	r3, r3
 80018ca:	4313      	orrs	r3, r2
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	827b      	strh	r3, [r7, #18]
		int16_t temp_int11 = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	82fb      	strh	r3, [r7, #22]
		if (temp_uint11 > 1023)
 80018d4:	8a7b      	ldrh	r3, [r7, #18]
 80018d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018da:	d305      	bcc.n	80018e8 <_ZN6BMI08823service_irq_temperatureEv+0x4c>
		{
			temp_int11 = temp_uint11 - 2048;
 80018dc:	8a7b      	ldrh	r3, [r7, #18]
 80018de:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	82fb      	strh	r3, [r7, #22]
 80018e6:	e001      	b.n	80018ec <_ZN6BMI08823service_irq_temperatureEv+0x50>
		}
		else
		{
			temp_int11 = temp_uint11;
 80018e8:	8a7b      	ldrh	r3, [r7, #18]
 80018ea:	82fb      	strh	r3, [r7, #22]
		}
		np::lock_guard lock(accel_data_mutex);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1a      	ldr	r2, [r3, #32]
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	4611      	mov	r1, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fb88 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		temperature = temp_int11 * 0.125f + 23.0f;
 80018fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001908:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 800190c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001910:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8001914:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	}
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fb87 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 8001928:	e003      	b.n	8001932 <_ZN6BMI08823service_irq_temperatureEv+0x96>
	else
	{
		USB_Log("ERROR reading BMI088 temperature data.", ERR);
 800192a:	2102      	movs	r1, #2
 800192c:	4803      	ldr	r0, [pc, #12]	@ (800193c <_ZN6BMI08823service_irq_temperatureEv+0xa0>)
 800192e:	f001 fea1 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 8001932:	7d7b      	ldrb	r3, [r7, #21]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	08021ff8 	.word	0x08021ff8

08001940 <_ZN6BMI08815log_data_to_gcsEv>:

void BMI088::log_data_to_gcs()
{
 8001940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001944:	b0b8      	sub	sp, #224	@ 0xe0
 8001946:	af0e      	add	r7, sp, #56	@ 0x38
 8001948:	61f8      	str	r0, [r7, #28]
	char string[128];
	{
		np::lock_guard lock1(accel_data_mutex);
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	6a1a      	ldr	r2, [r3, #32]
 800194e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fb59 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		np::lock_guard lock2(gyro_data_mutex);
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800195e:	f107 0320 	add.w	r3, r7, #32
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fb51 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
				linear_accelerations[0],
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3328      	adds	r3, #40	@ 0x28
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f000 fc01 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8001976:	4603      	mov	r3, r0
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fe0c 	bl	8000598 <__aeabi_f2d>
 8001980:	4680      	mov	r8, r0
 8001982:	4689      	mov	r9, r1
				linear_accelerations[1],
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	3328      	adds	r3, #40	@ 0x28
 8001988:	2101      	movs	r1, #1
 800198a:	4618      	mov	r0, r3
 800198c:	f000 fbf4 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8001990:	4603      	mov	r3, r0
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fdff 	bl	8000598 <__aeabi_f2d>
 800199a:	4682      	mov	sl, r0
 800199c:	468b      	mov	fp, r1
				linear_accelerations[2],
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3328      	adds	r3, #40	@ 0x28
 80019a2:	2102      	movs	r1, #2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 fbe7 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 80019aa:	4603      	mov	r3, r0
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fdf2 	bl	8000598 <__aeabi_f2d>
 80019b4:	e9c7 0104 	strd	r0, r1, [r7, #16]
				angular_velocities[0],
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	3334      	adds	r3, #52	@ 0x34
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fbda 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 80019c4:	4603      	mov	r3, r0
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fde5 	bl	8000598 <__aeabi_f2d>
 80019ce:	e9c7 0102 	strd	r0, r1, [r7, #8]
				angular_velocities[1],
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3334      	adds	r3, #52	@ 0x34
 80019d6:	2101      	movs	r1, #1
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 fbcd 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 80019de:	4603      	mov	r3, r0
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fdd8 	bl	8000598 <__aeabi_f2d>
 80019e8:	e9c7 0100 	strd	r0, r1, [r7]
				angular_velocities[2],
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	3334      	adds	r3, #52	@ 0x34
 80019f0:	2102      	movs	r1, #2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fbc0 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 80019f8:	4603      	mov	r3, r0
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fdcb 	bl	8000598 <__aeabi_f2d>
 8001a02:	4604      	mov	r4, r0
 8001a04:	460d      	mov	r5, r1
				temperature);
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fdc4 	bl	8000598 <__aeabi_f2d>
 8001a10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a14:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8001a18:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 8001a1c:	ed97 7b00 	vldr	d7, [r7]
 8001a20:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001a24:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a28:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001a2c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a30:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001a34:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001a38:	e9cd 8900 	strd	r8, r9, [sp]
 8001a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a70 <_ZN6BMI08815log_data_to_gcsEv+0x130>)
 8001a3e:	2180      	movs	r1, #128	@ 0x80
 8001a40:	4618      	mov	r0, r3
 8001a42:	f01e f931 	bl	801fca8 <sniprintf>
	}
 8001a46:	f107 0320 	add.w	r3, r7, #32
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff faf3 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 8001a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff faee 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	USB_Log(string, SENSOR);
 8001a5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a5e:	2103      	movs	r1, #3
 8001a60:	4618      	mov	r0, r3
 8001a62:	f001 fe07 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
}
 8001a66:	bf00      	nop
 8001a68:	37a8      	adds	r7, #168	@ 0xa8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a70:	08022020 	.word	0x08022020

08001a74 <_ZN6BMI08824get_linear_accelerationsEv>:

std::array<float, 3> BMI088::get_linear_accelerations()
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	@ 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6178      	str	r0, [r7, #20]
	np::lock_guard lock(accel_data_mutex);
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	6a1a      	ldr	r2, [r3, #32]
 8001a80:	f107 0318 	add.w	r3, r7, #24
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fac0 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	return linear_accelerations;
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	f107 031c 	add.w	r3, r7, #28
 8001a92:	3228      	adds	r2, #40	@ 0x28
 8001a94:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8001a9a:	f107 0318 	add.w	r3, r7, #24
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fac9 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	return linear_accelerations;
 8001aa4:	69f9      	ldr	r1, [r7, #28]
 8001aa6:	6a3a      	ldr	r2, [r7, #32]
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	ee06 1a90 	vmov	s13, r1
 8001aae:	ee07 2a10 	vmov	s14, r2
 8001ab2:	ee07 3a90 	vmov	s15, r3
}
 8001ab6:	eeb0 0a66 	vmov.f32	s0, s13
 8001aba:	eef0 0a47 	vmov.f32	s1, s14
 8001abe:	eeb0 1a67 	vmov.f32	s2, s15
 8001ac2:	3728      	adds	r7, #40	@ 0x28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_ZN6BMI08822get_angular_velocitiesEv>:

std::array<float, 3> BMI088::get_angular_velocities()
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	@ 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6178      	str	r0, [r7, #20]
	np::lock_guard lock(gyro_data_mutex);
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fa96 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	return angular_velocities;
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	f107 031c 	add.w	r3, r7, #28
 8001ae6:	3234      	adds	r2, #52	@ 0x34
 8001ae8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8001aee:	f107 0318 	add.w	r3, r7, #24
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fa9f 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	return angular_velocities;
 8001af8:	69f9      	ldr	r1, [r7, #28]
 8001afa:	6a3a      	ldr	r2, [r7, #32]
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	ee06 1a90 	vmov	s13, r1
 8001b02:	ee07 2a10 	vmov	s14, r2
 8001b06:	ee07 3a90 	vmov	s15, r3
}
 8001b0a:	eeb0 0a66 	vmov.f32	s0, s13
 8001b0e:	eef0 0a47 	vmov.f32	s1, s14
 8001b12:	eeb0 1a67 	vmov.f32	s2, s15
 8001b16:	3728      	adds	r7, #40	@ 0x28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_ZN6BMI08819read_accel_registerEhPht>:
 *
 *  Low-level register read / write
 *
 */
bool BMI088::read_accel_register(uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 8001b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b20:	b091      	sub	sp, #68	@ 0x44
 8001b22:	af02      	add	r7, sp, #8
 8001b24:	6178      	str	r0, [r7, #20]
 8001b26:	60fa      	str	r2, [r7, #12]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	74fb      	strb	r3, [r7, #19]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	823b      	strh	r3, [r7, #16]
	{
		USB_Log("BMI088 accelerometer register read failed.\n", ERR);
	}

	return status;
}
 8001b32:	466b      	mov	r3, sp
 8001b34:	461e      	mov	r6, r3
	bool status = false;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint16_t num_bytes = data_len + 2;
 8001b3c:	8a3b      	ldrh	r3, [r7, #16]
 8001b3e:	3302      	adds	r3, #2
 8001b40:	863b      	strh	r3, [r7, #48]	@ 0x30
	uint8_t tx_buffer[num_bytes];
 8001b42:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8001b44:	460b      	mov	r3, r1
 8001b46:	3b01      	subs	r3, #1
 8001b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b4a:	b28b      	uxth	r3, r1
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	00c3      	lsls	r3, r0, #3
 8001b5e:	6838      	ldr	r0, [r7, #0]
 8001b60:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b64:	6838      	ldr	r0, [r7, #0]
 8001b66:	00c2      	lsls	r2, r0, #3
 8001b68:	b28b      	uxth	r3, r1
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	469a      	mov	sl, r3
 8001b6e:	4693      	mov	fp, r2
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b84:	460b      	mov	r3, r1
 8001b86:	3307      	adds	r3, #7
 8001b88:	08db      	lsrs	r3, r3, #3
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	ebad 0d03 	sub.w	sp, sp, r3
 8001b90:	ab02      	add	r3, sp, #8
 8001b92:	3300      	adds	r3, #0
 8001b94:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t rx_buffer[num_bytes];
 8001b96:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8001b98:	460b      	mov	r3, r1
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b9e:	b28b      	uxth	r3, r1
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4698      	mov	r8, r3
 8001ba4:	4691      	mov	r9, r2
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bba:	b28b      	uxth	r3, r1
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	461c      	mov	r4, r3
 8001bc0:	4615      	mov	r5, r2
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	00eb      	lsls	r3, r5, #3
 8001bcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bd0:	00e2      	lsls	r2, r4, #3
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	3307      	adds	r3, #7
 8001bd6:	08db      	lsrs	r3, r3, #3
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	ebad 0d03 	sub.w	sp, sp, r3
 8001bde:	ab02      	add	r3, sp, #8
 8001be0:	3300      	adds	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
	tx_buffer[0] = 0x80 | reg_addr;	// Read operation
 8001be4:	7cfb      	ldrb	r3, [r7, #19]
 8001be6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bee:	701a      	strb	r2, [r3, #0]
		np::lock_guard lock(spi_mutex);
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fa06 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_RESET);
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	6898      	ldr	r0, [r3, #8]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	8a1b      	ldrh	r3, [r3, #16]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f004 f9fe 	bl	800600c <HAL_GPIO_WritePin>
		status = (HAL_SPI_TransmitReceive(&spi_handle, tx_buffer, rx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001c16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c1a:	9200      	str	r2, [sp, #0]
 8001c1c:	6a3a      	ldr	r2, [r7, #32]
 8001c1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c20:	f007 ffc7 	bl	8009bb2 <HAL_SPI_TransmitReceive>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	bf0c      	ite	eq
 8001c2a:	2301      	moveq	r3, #1
 8001c2c:	2300      	movne	r3, #0
 8001c2e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_SET);
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	6898      	ldr	r0, [r3, #8]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	8a1b      	ldrh	r3, [r3, #16]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f004 f9e5 	bl	800600c <HAL_GPIO_WritePin>
	}
 8001c42:	f107 031c 	add.w	r3, r7, #28
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff f9f5 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	if (status)
 8001c4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d013      	beq.n	8001c7c <_ZN6BMI08819read_accel_registerEhPht+0x160>
		for (int i = 2; i < num_bytes; i++)
 8001c54:	2302      	movs	r3, #2
 8001c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c58:	e00b      	b.n	8001c72 <_ZN6BMI08819read_accel_registerEhPht+0x156>
			rx_data[i - 2] = rx_buffer[i];
 8001c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c5c:	3b02      	subs	r3, #2
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	4413      	add	r3, r2
 8001c62:	6a39      	ldr	r1, [r7, #32]
 8001c64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c66:	440a      	add	r2, r1
 8001c68:	7812      	ldrb	r2, [r2, #0]
 8001c6a:	701a      	strb	r2, [r3, #0]
		for (int i = 2; i < num_bytes; i++)
 8001c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c6e:	3301      	adds	r3, #1
 8001c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c72:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001c74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c76:	429a      	cmp	r2, r3
 8001c78:	dbef      	blt.n	8001c5a <_ZN6BMI08819read_accel_registerEhPht+0x13e>
 8001c7a:	e003      	b.n	8001c84 <_ZN6BMI08819read_accel_registerEhPht+0x168>
		USB_Log("BMI088 accelerometer register read failed.\n", ERR);
 8001c7c:	2102      	movs	r1, #2
 8001c7e:	4805      	ldr	r0, [pc, #20]	@ (8001c94 <_ZN6BMI08819read_accel_registerEhPht+0x178>)
 8001c80:	f001 fcf8 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	return status;
 8001c84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c88:	46b5      	mov	sp, r6
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	373c      	adds	r7, #60	@ 0x3c
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c94:	0802204c 	.word	0x0802204c

08001c98 <_ZN6BMI08818read_gyro_registerEhPht>:

bool BMI088::read_gyro_register(uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 8001c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c9c:	b091      	sub	sp, #68	@ 0x44
 8001c9e:	af02      	add	r7, sp, #8
 8001ca0:	6178      	str	r0, [r7, #20]
 8001ca2:	60fa      	str	r2, [r7, #12]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	74fb      	strb	r3, [r7, #19]
 8001caa:	4613      	mov	r3, r2
 8001cac:	823b      	strh	r3, [r7, #16]
	{
		USB_Log("BMI088 gyroscope register read failed.\n", ERR);
	}

	return status;
}
 8001cae:	466b      	mov	r3, sp
 8001cb0:	461e      	mov	r6, r3
	bool status = false;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint16_t num_bytes = data_len + 1;
 8001cb8:	8a3b      	ldrh	r3, [r7, #16]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	863b      	strh	r3, [r7, #48]	@ 0x30
	uint8_t tx_buffer[num_bytes];
 8001cbe:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cc6:	b28b      	uxth	r3, r1
 8001cc8:	2200      	movs	r2, #0
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	00c3      	lsls	r3, r0, #3
 8001cda:	6838      	ldr	r0, [r7, #0]
 8001cdc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ce0:	6838      	ldr	r0, [r7, #0]
 8001ce2:	00c2      	lsls	r2, r0, #3
 8001ce4:	b28b      	uxth	r3, r1
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	469a      	mov	sl, r3
 8001cea:	4693      	mov	fp, r2
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001cf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001cfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d00:	460b      	mov	r3, r1
 8001d02:	3307      	adds	r3, #7
 8001d04:	08db      	lsrs	r3, r3, #3
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	ebad 0d03 	sub.w	sp, sp, r3
 8001d0c:	ab02      	add	r3, sp, #8
 8001d0e:	3300      	adds	r3, #0
 8001d10:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t rx_buffer[num_bytes];
 8001d12:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8001d14:	460b      	mov	r3, r1
 8001d16:	3b01      	subs	r3, #1
 8001d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d1a:	b28b      	uxth	r3, r1
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4698      	mov	r8, r3
 8001d20:	4691      	mov	r9, r2
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d36:	b28b      	uxth	r3, r1
 8001d38:	2200      	movs	r2, #0
 8001d3a:	461c      	mov	r4, r3
 8001d3c:	4615      	mov	r5, r2
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	00eb      	lsls	r3, r5, #3
 8001d48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d4c:	00e2      	lsls	r2, r4, #3
 8001d4e:	460b      	mov	r3, r1
 8001d50:	3307      	adds	r3, #7
 8001d52:	08db      	lsrs	r3, r3, #3
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	ebad 0d03 	sub.w	sp, sp, r3
 8001d5a:	ab02      	add	r3, sp, #8
 8001d5c:	3300      	adds	r3, #0
 8001d5e:	623b      	str	r3, [r7, #32]
	tx_buffer[0] = 0x80 | reg_addr;	// Read operation
 8001d60:	7cfb      	ldrb	r3, [r7, #19]
 8001d62:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d6a:	701a      	strb	r2, [r3, #0]
		np::lock_guard lock(spi_mutex);
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	f107 031c 	add.w	r3, r7, #28
 8001d74:	4611      	mov	r1, r2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff f948 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		HAL_GPIO_WritePin(gyro_cs_port, gyro_cs_pin, GPIO_PIN_RESET);
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	68d8      	ldr	r0, [r3, #12]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	8a5b      	ldrh	r3, [r3, #18]
 8001d84:	2200      	movs	r2, #0
 8001d86:	4619      	mov	r1, r3
 8001d88:	f004 f940 	bl	800600c <HAL_GPIO_WritePin>
		status = (HAL_SPI_TransmitReceive(&spi_handle, tx_buffer, rx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001d92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d96:	9200      	str	r2, [sp, #0]
 8001d98:	6a3a      	ldr	r2, [r7, #32]
 8001d9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d9c:	f007 ff09 	bl	8009bb2 <HAL_SPI_TransmitReceive>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	bf0c      	ite	eq
 8001da6:	2301      	moveq	r3, #1
 8001da8:	2300      	movne	r3, #0
 8001daa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		HAL_GPIO_WritePin(gyro_cs_port, gyro_cs_pin, GPIO_PIN_SET);
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	68d8      	ldr	r0, [r3, #12]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	8a5b      	ldrh	r3, [r3, #18]
 8001db6:	2201      	movs	r2, #1
 8001db8:	4619      	mov	r1, r3
 8001dba:	f004 f927 	bl	800600c <HAL_GPIO_WritePin>
	}
 8001dbe:	f107 031c 	add.w	r3, r7, #28
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff f937 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	if (status)
 8001dc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d013      	beq.n	8001df8 <_ZN6BMI08818read_gyro_registerEhPht+0x160>
		for (int i = 1; i < num_bytes; i++)
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dd4:	e00b      	b.n	8001dee <_ZN6BMI08818read_gyro_registerEhPht+0x156>
			rx_data[i - 1] = rx_buffer[i];
 8001dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4413      	add	r3, r2
 8001dde:	6a39      	ldr	r1, [r7, #32]
 8001de0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001de2:	440a      	add	r2, r1
 8001de4:	7812      	ldrb	r2, [r2, #0]
 8001de6:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < num_bytes; i++)
 8001de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dea:	3301      	adds	r3, #1
 8001dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dee:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001df0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001df2:	429a      	cmp	r2, r3
 8001df4:	dbef      	blt.n	8001dd6 <_ZN6BMI08818read_gyro_registerEhPht+0x13e>
 8001df6:	e003      	b.n	8001e00 <_ZN6BMI08818read_gyro_registerEhPht+0x168>
		USB_Log("BMI088 gyroscope register read failed.\n", ERR);
 8001df8:	2102      	movs	r1, #2
 8001dfa:	4805      	ldr	r0, [pc, #20]	@ (8001e10 <_ZN6BMI08818read_gyro_registerEhPht+0x178>)
 8001dfc:	f001 fc3a 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	return status;
 8001e00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e04:	46b5      	mov	sp, r6
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	373c      	adds	r7, #60	@ 0x3c
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e10:	08022078 	.word	0x08022078

08001e14 <_ZN6BMI08820write_accel_registerEhPht>:

bool BMI088::write_accel_register(uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8001e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e18:	b08b      	sub	sp, #44	@ 0x2c
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	461a      	mov	r2, r3
 8001e22:	460b      	mov	r3, r1
 8001e24:	72fb      	strb	r3, [r7, #11]
 8001e26:	4613      	mov	r3, r2
 8001e28:	813b      	strh	r3, [r7, #8]
	{
		USB_Log("BMI088 accelerometer register write failed.\n", ERR);
	}

	return status;
}
 8001e2a:	466b      	mov	r3, sp
 8001e2c:	461e      	mov	r6, r3
	bool status = false;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint16_t num_bytes = data_len + 1;
 8001e34:	893b      	ldrh	r3, [r7, #8]
 8001e36:	3301      	adds	r3, #1
 8001e38:	843b      	strh	r3, [r7, #32]
	uint8_t tx_buffer[num_bytes];
 8001e3a:	8c39      	ldrh	r1, [r7, #32]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	b28b      	uxth	r3, r1
 8001e44:	2200      	movs	r2, #0
 8001e46:	4698      	mov	r8, r3
 8001e48:	4691      	mov	r9, r2
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e5e:	b28b      	uxth	r3, r1
 8001e60:	2200      	movs	r2, #0
 8001e62:	461c      	mov	r4, r3
 8001e64:	4615      	mov	r5, r2
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	00eb      	lsls	r3, r5, #3
 8001e70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e74:	00e2      	lsls	r2, r4, #3
 8001e76:	460b      	mov	r3, r1
 8001e78:	3307      	adds	r3, #7
 8001e7a:	08db      	lsrs	r3, r3, #3
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	ebad 0d03 	sub.w	sp, sp, r3
 8001e82:	466b      	mov	r3, sp
 8001e84:	3300      	adds	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]
	tx_buffer[0] = reg_addr;	// Write operation
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	7afa      	ldrb	r2, [r7, #11]
 8001e8c:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8001e8e:	2301      	movs	r3, #1
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e92:	e00c      	b.n	8001eae <_ZN6BMI08820write_accel_registerEhPht+0x9a>
		tx_buffer[i] = tx_data[i - 1];
 8001e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e96:	3b01      	subs	r3, #1
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	7819      	ldrb	r1, [r3, #0]
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea2:	4413      	add	r3, r2
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eaa:	3301      	adds	r3, #1
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eae:	8c3b      	ldrh	r3, [r7, #32]
 8001eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	dbee      	blt.n	8001e94 <_ZN6BMI08820write_accel_registerEhPht+0x80>
		np::lock_guard lock(spi_mutex);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff f8a3 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_RESET);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6898      	ldr	r0, [r3, #8]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8a1b      	ldrh	r3, [r3, #16]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f004 f89b 	bl	800600c <HAL_GPIO_WritePin>
		status = (HAL_SPI_Transmit(&spi_handle, tx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	8c3a      	ldrh	r2, [r7, #32]
 8001edc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ee0:	69b9      	ldr	r1, [r7, #24]
 8001ee2:	f007 fcf0 	bl	80098c6 <HAL_SPI_Transmit>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf0c      	ite	eq
 8001eec:	2301      	moveq	r3, #1
 8001eee:	2300      	movne	r3, #0
 8001ef0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_SET);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6898      	ldr	r0, [r3, #8]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8a1b      	ldrh	r3, [r3, #16]
 8001efc:	2201      	movs	r2, #1
 8001efe:	4619      	mov	r1, r3
 8001f00:	f004 f884 	bl	800600c <HAL_GPIO_WritePin>
	}
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff f894 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	if (!status)
 8001f0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f12:	f083 0301 	eor.w	r3, r3, #1
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <_ZN6BMI08820write_accel_registerEhPht+0x110>
		USB_Log("BMI088 accelerometer register write failed.\n", ERR);
 8001f1c:	2102      	movs	r1, #2
 8001f1e:	4805      	ldr	r0, [pc, #20]	@ (8001f34 <_ZN6BMI08820write_accel_registerEhPht+0x120>)
 8001f20:	f001 fba8 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	return status;
 8001f24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f28:	46b5      	mov	sp, r6
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	372c      	adds	r7, #44	@ 0x2c
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f34:	080220a0 	.word	0x080220a0

08001f38 <_ZN6BMI08819write_gyro_registerEhPht>:

bool BMI088::write_gyro_register(uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8001f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f3c:	b08b      	sub	sp, #44	@ 0x2c
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	461a      	mov	r2, r3
 8001f46:	460b      	mov	r3, r1
 8001f48:	72fb      	strb	r3, [r7, #11]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	813b      	strh	r3, [r7, #8]
	{
		USB_Log("BMI088 gyroscope register write failed.\n", ERR);
	}

	return status;
}
 8001f4e:	466b      	mov	r3, sp
 8001f50:	461e      	mov	r6, r3
	bool status = false;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint16_t num_bytes = data_len + 1;
 8001f58:	893b      	ldrh	r3, [r7, #8]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	843b      	strh	r3, [r7, #32]
	uint8_t tx_buffer[num_bytes];
 8001f5e:	8c39      	ldrh	r1, [r7, #32]
 8001f60:	460b      	mov	r3, r1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	b28b      	uxth	r3, r1
 8001f68:	2200      	movs	r2, #0
 8001f6a:	4698      	mov	r8, r3
 8001f6c:	4691      	mov	r9, r2
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f82:	b28b      	uxth	r3, r1
 8001f84:	2200      	movs	r2, #0
 8001f86:	461c      	mov	r4, r3
 8001f88:	4615      	mov	r5, r2
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	00eb      	lsls	r3, r5, #3
 8001f94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f98:	00e2      	lsls	r2, r4, #3
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	3307      	adds	r3, #7
 8001f9e:	08db      	lsrs	r3, r3, #3
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	ebad 0d03 	sub.w	sp, sp, r3
 8001fa6:	466b      	mov	r3, sp
 8001fa8:	3300      	adds	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]
	tx_buffer[0] = reg_addr;	// Write operation
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	7afa      	ldrb	r2, [r7, #11]
 8001fb0:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fb6:	e00c      	b.n	8001fd2 <_ZN6BMI08819write_gyro_registerEhPht+0x9a>
		tx_buffer[i] = tx_data[i - 1];
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	7819      	ldrb	r1, [r3, #0]
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	4413      	add	r3, r2
 8001fc8:	460a      	mov	r2, r1
 8001fca:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fce:	3301      	adds	r3, #1
 8001fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fd2:	8c3b      	ldrh	r3, [r7, #32]
 8001fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	dbee      	blt.n	8001fb8 <_ZN6BMI08819write_gyro_registerEhPht+0x80>
		np::lock_guard lock(spi_mutex);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff f811 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		HAL_GPIO_WritePin(gyro_cs_port, gyro_cs_pin, GPIO_PIN_RESET);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	68d8      	ldr	r0, [r3, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8a5b      	ldrh	r3, [r3, #18]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f004 f809 	bl	800600c <HAL_GPIO_WritePin>
		status = (HAL_SPI_Transmit(&spi_handle, tx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	8c3a      	ldrh	r2, [r7, #32]
 8002000:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002004:	69b9      	ldr	r1, [r7, #24]
 8002006:	f007 fc5e 	bl	80098c6 <HAL_SPI_Transmit>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		HAL_GPIO_WritePin(gyro_cs_port, gyro_cs_pin, GPIO_PIN_SET);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	68d8      	ldr	r0, [r3, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8a5b      	ldrh	r3, [r3, #18]
 8002020:	2201      	movs	r2, #1
 8002022:	4619      	mov	r1, r3
 8002024:	f003 fff2 	bl	800600c <HAL_GPIO_WritePin>
	}
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff f802 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	if (!status)
 8002032:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002036:	f083 0301 	eor.w	r3, r3, #1
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <_ZN6BMI08819write_gyro_registerEhPht+0x110>
		USB_Log("BMI088 gyroscope register write failed.\n", ERR);
 8002040:	2102      	movs	r1, #2
 8002042:	4805      	ldr	r0, [pc, #20]	@ (8002058 <_ZN6BMI08819write_gyro_registerEhPht+0x120>)
 8002044:	f001 fb16 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	return status;
 8002048:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800204c:	46b5      	mov	sp, r6
}
 800204e:	4618      	mov	r0, r3
 8002050:	372c      	adds	r7, #44	@ 0x2c
 8002052:	46bd      	mov	sp, r7
 8002054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002058:	080220d0 	.word	0x080220d0

0800205c <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800205c:	b590      	push	{r4, r7, lr}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4618      	mov	r0, r3
 8002068:	f000 f895 	bl	8002196 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 800206c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00c      	beq.n	8002090 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f89a 	bl	80021b0 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EE11get_deleterEv>
 800207c:	4604      	mov	r4, r0
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 f8a3 	bl	80021ca <_ZSt4moveIRP9IIRFilterEONSt16remove_referenceIT_E4typeEOS4_>
 8002084:	4603      	mov	r3, r0
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	4620      	mov	r0, r4
 800208c:	f000 f8a8 	bl	80021e0 <_ZNKSt14default_deleteI9IIRFilterEclEPS0_>
	__ptr = pointer();
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
      }
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4618      	mov	r0, r3
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	bd90      	pop	{r4, r7, pc}

080020a0 <_ZNKSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE4sizeEv>:
      { return const_reverse_iterator(begin()); }

      // Capacity.
      [[__gnu__::__const__, __nodiscard__]]
      constexpr size_type
      size() const noexcept { return _Nm; }
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	2303      	movs	r3, #3
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>:
      empty() const noexcept { return size() == 0; }

      // Element access.
      [[__nodiscard__]]
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6839      	ldr	r1, [r7, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 f89b 	bl	8002200 <_ZNSt14__array_traitsISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE6_S_refERA3_KS4_j>
 80020ca:	4603      	mov	r3, r0
      }
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_ZSt11make_uniqueI9IIRFilterJRfS1_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	ed2d 8b02 	vpush	{d8}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80020e4:	2034      	movs	r0, #52	@ 0x34
 80020e6:	f01a fdbd 	bl	801cc64 <_Znwj>
 80020ea:	4603      	mov	r3, r0
 80020ec:	461c      	mov	r4, r3
 80020ee:	68b8      	ldr	r0, [r7, #8]
 80020f0:	f000 f895 	bl	800221e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80020f4:	4603      	mov	r3, r0
 80020f6:	ed93 8a00 	vldr	s16, [r3]
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f88f 	bl	800221e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8002100:	4603      	mov	r3, r0
 8002102:	edd3 7a00 	vldr	s15, [r3]
 8002106:	eef0 0a67 	vmov.f32	s1, s15
 800210a:	eeb0 0a48 	vmov.f32	s0, s16
 800210e:	4620      	mov	r0, r4
 8002110:	f002 f80e 	bl	8004130 <_ZN9IIRFilterC1Eff>
 8002114:	4621      	mov	r1, r4
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 f89c 	bl	8002254 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	ecbd 8b02 	vpop	{d8}
 8002126:	bd90      	pop	{r4, r7, pc}

08002128 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8002132:	6838      	ldr	r0, [r7, #0]
 8002134:	f000 f8bd 	bl	80022b2 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE7releaseEv>
 8002138:	4603      	mov	r3, r0
 800213a:	4619      	mov	r1, r3
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f898 	bl	8002272 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 8002142:	6838      	ldr	r0, [r7, #0]
 8002144:	f000 f8ca 	bl	80022dc <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE10_M_deleterEv>
 8002148:	4603      	mov	r3, r0
 800214a:	4618      	mov	r0, r3
 800214c:	f000 f8d3 	bl	80022f6 <_ZSt7forwardISt14default_deleteI9IIRFilterEEOT_RNSt16remove_referenceIS3_E4typeE>
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f8c3 	bl	80022dc <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 8002156:	687b      	ldr	r3, [r7, #4]
      }
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	return get();
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f8cf 	bl	800230c <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EE3getEv>
 800216e:	4603      	mov	r3, r0
      }
 8002170:	4618      	mov	r0, r3
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <_ZNSt5arrayIfLj3EEixEj>:
      operator[](size_type __n) noexcept
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6839      	ldr	r1, [r7, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f000 f8cd 	bl	8002326 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 800218c:	4603      	mov	r3, r0
      }
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 f8cf 	bl	8002344 <_ZSt3getILj0EJP9IIRFilterSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80021a6:	4603      	mov	r3, r0
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f88e 	bl	80022dc <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE10_M_deleterEv>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <_ZSt4moveIRP9IIRFilterEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <_ZNKSt14default_deleteI9IIRFilterEclEPS0_>:
      operator()(_Tp* __ptr) const
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <_ZNKSt14default_deleteI9IIRFilterEclEPS0_+0x18>
 80021f0:	2134      	movs	r1, #52	@ 0x34
 80021f2:	4618      	mov	r0, r3
 80021f4:	f01a fd34 	bl	801cc60 <_ZdlPvj>
      }
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <_ZNSt14__array_traitsISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE6_S_refERA3_KS4_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <_ZNSt15__uniq_ptr_dataI9IIRFilterSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f000 f88a 	bl	800235e <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EEC1EPS0_>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6839      	ldr	r1, [r7, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ffe6 	bl	8002234 <_ZNSt15__uniq_ptr_dataI9IIRFilterSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8002272:	b590      	push	{r4, r7, lr}
 8002274:	b085      	sub	sp, #20
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ff8a 	bl	8002196 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 8002282:	4603      	mov	r3, r0
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8002288:	683c      	ldr	r4, [r7, #0]
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ff83 	bl	8002196 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 8002290:	4603      	mov	r3, r0
 8002292:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d007      	beq.n	80022aa <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f81e 	bl	80022dc <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE10_M_deleterEv>
 80022a0:	4603      	mov	r3, r0
 80022a2:	68f9      	ldr	r1, [r7, #12]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff9b 	bl	80021e0 <_ZNKSt14default_deleteI9IIRFilterEclEPS0_>
      }
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd90      	pop	{r4, r7, pc}

080022b2 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff ff6b 	bl	8002196 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 80022c0:	4603      	mov	r3, r0
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ff65 	bl	8002196 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
	return __p;
 80022d2:	68fb      	ldr	r3, [r7, #12]
      }
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f84d 	bl	8002386 <_ZSt3getILj1EJP9IIRFilterSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <_ZSt7forwardISt14default_deleteI9IIRFilterEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f841 	bl	800239e <_ZNKSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 800231c:	4603      	mov	r3, r0
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	4413      	add	r3, r2
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <_ZSt3getILj0EJP9IIRFilterSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4618      	mov	r0, r3
 8002350:	f000 f833 	bl	80023ba <_ZSt12__get_helperILj0EP9IIRFilterJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002354:	4603      	mov	r3, r0
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800235e:	b590      	push	{r4, r7, lr}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe fe0c 	bl	8000f88 <_ZNSt5tupleIJP9IIRFilterSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8002370:	683c      	ldr	r4, [r7, #0]
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ff0f 	bl	8002196 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 8002378:	4603      	mov	r3, r0
 800237a:	601c      	str	r4, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bd90      	pop	{r4, r7, pc}

08002386 <_ZSt3getILj1EJP9IIRFilterSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f81f 	bl	80023d2 <_ZSt12__get_helperILj1ESt14default_deleteI9IIRFilterEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8002394:	4603      	mov	r3, r0
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <_ZNKSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 f81e 	bl	80023ea <_ZSt3getILj0EJP9IIRFilterSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80023ae:	4603      	mov	r3, r0
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <_ZSt12__get_helperILj0EP9IIRFilterJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f81e 	bl	8002404 <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEE7_M_headERS4_>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <_ZSt12__get_helperILj1ESt14default_deleteI9IIRFilterEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f81f 	bl	800241e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9IIRFilterEEE7_M_headERS3_>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <_ZSt3getILj0EJP9IIRFilterSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 f81e 	bl	8002436 <_ZSt12__get_helperILj0EP9IIRFilterJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f81d 	bl	800244e <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EE7_M_headERS2_>
 8002414:	4603      	mov	r3, r0
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9IIRFilterEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f81c 	bl	8002464 <_ZNSt10_Head_baseILj1ESt14default_deleteI9IIRFilterELb1EE7_M_headERS3_>
 800242c:	4603      	mov	r3, r0
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <_ZSt12__get_helperILj0EP9IIRFilterJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f81b 	bl	800247a <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEE7_M_headERKS4_>
 8002444:	4603      	mov	r3, r0
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <_ZNSt10_Head_baseILj1ESt14default_deleteI9IIRFilterELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4618      	mov	r0, r3
 8002486:	f000 f805 	bl	8002494 <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EE7_M_headERKS2_>
 800248a:	4603      	mov	r3, r0
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <_ZN6BMP388C1ER19__I2C_HandleTypeDefRPvS3_>:
#include "Drivers/usb.hpp"
#include "Utility/lock_guard.hpp"
#include <cmath>
#include <cstdio>

BMP388::BMP388(I2C_HandleTypeDef& i2c_handle, osMutexId_t& i2c_mutex, osMutexId_t& baro_data_mutex)
 80024aa:	b480      	push	{r7}
 80024ac:	b085      	sub	sp, #20
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	603b      	str	r3, [r7, #0]
	:i2c_handle(i2c_handle),
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	601a      	str	r2, [r3, #0]
	 i2c_mutex(i2c_mutex),
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	605a      	str	r2, [r3, #4]
	 baro_data_mutex(baro_data_mutex) {}
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2276      	movs	r2, #118	@ 0x76
 80024c8:	721a      	strb	r2, [r3, #8]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	645a      	str	r2, [r3, #68]	@ 0x44
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <_ZN6BMP3884initEv>:

bool BMP388::init()
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	bool status = false;
 80024e8:	2300      	movs	r3, #0
 80024ea:	75fb      	strb	r3, [r7, #23]
	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];

	// Check chip ID
	rx_data[0] = 0x00;
 80024ec:	2300      	movs	r3, #0
 80024ee:	733b      	strb	r3, [r7, #12]
	status = read_register(REG_CHIP_ID, rx_data, 1);
 80024f0:	f107 020c 	add.w	r2, r7, #12
 80024f4:	2301      	movs	r3, #1
 80024f6:	2100      	movs	r1, #0
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fd35 	bl	8002f68 <_ZN6BMP38813read_registerEhPht>
 80024fe:	4603      	mov	r3, r0
 8002500:	75fb      	strb	r3, [r7, #23]
	if (status && rx_data[0] == 0x50)
 8002502:	7dfb      	ldrb	r3, [r7, #23]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01b      	beq.n	8002540 <_ZN6BMP3884initEv+0x60>
 8002508:	7b3b      	ldrb	r3, [r7, #12]
 800250a:	2b50      	cmp	r3, #80	@ 0x50
 800250c:	d118      	bne.n	8002540 <_ZN6BMP3884initEv+0x60>
	{
		USB_Log("Found BMP388, starting initialization.", CRITICAL);
 800250e:	2101      	movs	r1, #1
 8002510:	485b      	ldr	r0, [pc, #364]	@ (8002680 <_ZN6BMP3884initEv+0x1a0>)
 8002512:	f001 f8af 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	else
	{
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
		return false;
	}
	osDelay(10);
 8002516:	200a      	movs	r0, #10
 8002518:	f00c fd67 	bl	800efea <osDelay>

	// Perform soft-reset of device
	tx_data[0] = 0xB6;
 800251c:	23b6      	movs	r3, #182	@ 0xb6
 800251e:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_CMD, tx_data, 1);
 8002520:	f107 0210 	add.w	r2, r7, #16
 8002524:	2301      	movs	r3, #1
 8002526:	217e      	movs	r1, #126	@ 0x7e
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fd5f 	bl	8002fec <_ZN6BMP38814write_registerEhPht>
 800252e:	4603      	mov	r3, r0
 8002530:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8002532:	7dfb      	ldrb	r3, [r7, #23]
 8002534:	f083 0301 	eor.w	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <_ZN6BMP3884initEv+0x6c>
 800253e:	e007      	b.n	8002550 <_ZN6BMP3884initEv+0x70>
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
 8002540:	2102      	movs	r1, #2
 8002542:	4850      	ldr	r0, [pc, #320]	@ (8002684 <_ZN6BMP3884initEv+0x1a4>)
 8002544:	f001 f896 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
		return false;
 8002548:	2300      	movs	r3, #0
 800254a:	e094      	b.n	8002676 <_ZN6BMP3884initEv+0x196>
	if (!status) return status;
 800254c:	7dfb      	ldrb	r3, [r7, #23]
 800254e:	e092      	b.n	8002676 <_ZN6BMP3884initEv+0x196>
	osDelay(10);
 8002550:	200a      	movs	r0, #10
 8002552:	f00c fd4a 	bl	800efea <osDelay>

	// Read, calculate, and store calibration coefficients
	status = read_calibration_nvm();
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fa66 	bl	8002a28 <_ZN6BMP38820read_calibration_nvmEv>
 800255c:	4603      	mov	r3, r0
 800255e:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8002560:	7dfb      	ldrb	r3, [r7, #23]
 8002562:	f083 0301 	eor.w	r3, r3, #1
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <_ZN6BMP3884initEv+0x90>
 800256c:	7dfb      	ldrb	r3, [r7, #23]
 800256e:	e082      	b.n	8002676 <_ZN6BMP3884initEv+0x196>

	// Set pressure measurement to ultra-high resolution (x16 over-sampling, 20 bit / 0.17 Pa),
	// set temperature measurement to low power (x2 over-sampling, 17 bit / 0.0025 degC)
	tx_data[0] = 0x0C;
 8002570:	230c      	movs	r3, #12
 8002572:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_OSR, tx_data, 1);
 8002574:	f107 0210 	add.w	r2, r7, #16
 8002578:	2301      	movs	r3, #1
 800257a:	211c      	movs	r1, #28
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 fd35 	bl	8002fec <_ZN6BMP38814write_registerEhPht>
 8002582:	4603      	mov	r3, r0
 8002584:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8002586:	7dfb      	ldrb	r3, [r7, #23]
 8002588:	f083 0301 	eor.w	r3, r3, #1
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <_ZN6BMP3884initEv+0xb6>
 8002592:	7dfb      	ldrb	r3, [r7, #23]
 8002594:	e06f      	b.n	8002676 <_ZN6BMP3884initEv+0x196>
	osDelay(10);
 8002596:	200a      	movs	r0, #10
 8002598:	f00c fd27 	bl	800efea <osDelay>

	// Set 25Hz ODR
	tx_data[0] = 0x03;
 800259c:	2303      	movs	r3, #3
 800259e:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_ODR, tx_data, 1);
 80025a0:	f107 0210 	add.w	r2, r7, #16
 80025a4:	2301      	movs	r3, #1
 80025a6:	211d      	movs	r1, #29
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fd1f 	bl	8002fec <_ZN6BMP38814write_registerEhPht>
 80025ae:	4603      	mov	r3, r0
 80025b0:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 80025b2:	7dfb      	ldrb	r3, [r7, #23]
 80025b4:	f083 0301 	eor.w	r3, r3, #1
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <_ZN6BMP3884initEv+0xe2>
 80025be:	7dfb      	ldrb	r3, [r7, #23]
 80025c0:	e059      	b.n	8002676 <_ZN6BMP3884initEv+0x196>
	osDelay(10);
 80025c2:	200a      	movs	r0, #10
 80025c4:	f00c fd11 	bl	800efea <osDelay>

	// Set IIR filter coefficient to 15
	tx_data[0] = 0x04;
 80025c8:	2304      	movs	r3, #4
 80025ca:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_CONFIG, tx_data, 1);
 80025cc:	f107 0210 	add.w	r2, r7, #16
 80025d0:	2301      	movs	r3, #1
 80025d2:	211f      	movs	r1, #31
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fd09 	bl	8002fec <_ZN6BMP38814write_registerEhPht>
 80025da:	4603      	mov	r3, r0
 80025dc:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 80025de:	7dfb      	ldrb	r3, [r7, #23]
 80025e0:	f083 0301 	eor.w	r3, r3, #1
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <_ZN6BMP3884initEv+0x10e>
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
 80025ec:	e043      	b.n	8002676 <_ZN6BMP3884initEv+0x196>
	osDelay(10);
 80025ee:	200a      	movs	r0, #10
 80025f0:	f00c fcfb 	bl	800efea <osDelay>

	// Compute startup pressure for initial altitude reference
	status = compute_startup_pressure();
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fc53 	bl	8002ea0 <_ZN6BMP38824compute_startup_pressureEv>
 80025fa:	4603      	mov	r3, r0
 80025fc:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
 8002600:	f083 0301 	eor.w	r3, r3, #1
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <_ZN6BMP3884initEv+0x12e>
 800260a:	7dfb      	ldrb	r3, [r7, #23]
 800260c:	e033      	b.n	8002676 <_ZN6BMP3884initEv+0x196>

	// Switch device into normal mode and enable pressure, temperature sensor
	tx_data[0] = 0x33;
 800260e:	2333      	movs	r3, #51	@ 0x33
 8002610:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_PWR_CTRL, tx_data, 1);
 8002612:	f107 0210 	add.w	r2, r7, #16
 8002616:	2301      	movs	r3, #1
 8002618:	211b      	movs	r1, #27
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fce6 	bl	8002fec <_ZN6BMP38814write_registerEhPht>
 8002620:	4603      	mov	r3, r0
 8002622:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8002624:	7dfb      	ldrb	r3, [r7, #23]
 8002626:	f083 0301 	eor.w	r3, r3, #1
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <_ZN6BMP3884initEv+0x154>
 8002630:	7dfb      	ldrb	r3, [r7, #23]
 8002632:	e020      	b.n	8002676 <_ZN6BMP3884initEv+0x196>
	osDelay(10);
 8002634:	200a      	movs	r0, #10
 8002636:	f00c fcd8 	bl	800efea <osDelay>

	// Enable data ready interrupt (temperature and pressure) and configure INT pin (active high, push-pull)
	tx_data[0] = 0x42;
 800263a:	2342      	movs	r3, #66	@ 0x42
 800263c:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_INT_CTRL, tx_data, 1);
 800263e:	f107 0210 	add.w	r2, r7, #16
 8002642:	2301      	movs	r3, #1
 8002644:	2119      	movs	r1, #25
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 fcd0 	bl	8002fec <_ZN6BMP38814write_registerEhPht>
 800264c:	4603      	mov	r3, r0
 800264e:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8002650:	7dfb      	ldrb	r3, [r7, #23]
 8002652:	f083 0301 	eor.w	r3, r3, #1
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <_ZN6BMP3884initEv+0x180>
 800265c:	7dfb      	ldrb	r3, [r7, #23]
 800265e:	e00a      	b.n	8002676 <_ZN6BMP3884initEv+0x196>
	osDelay(10);
 8002660:	200a      	movs	r0, #10
 8002662:	f00c fcc2 	bl	800efea <osDelay>

	USB_Log("BMP388 initialized OK.", CRITICAL);
 8002666:	2101      	movs	r1, #1
 8002668:	4807      	ldr	r0, [pc, #28]	@ (8002688 <_ZN6BMP3884initEv+0x1a8>)
 800266a:	f001 f803 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 800266e:	2064      	movs	r0, #100	@ 0x64
 8002670:	f00c fcbb 	bl	800efea <osDelay>

	return status;
 8002674:	7dfb      	ldrb	r3, [r7, #23]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	080220fc 	.word	0x080220fc
 8002684:	08022124 	.word	0x08022124
 8002688:	08022154 	.word	0x08022154

0800268c <_ZN6BMP38811service_irqEv>:

bool BMP388::service_irq()
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b092      	sub	sp, #72	@ 0x48
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	// Compute compensated temperature

	uint8_t rx_temp_data[3];
	bool status_temp = read_register(REG_DATA_3, rx_temp_data, sizeof(rx_temp_data));
 8002694:	f107 0214 	add.w	r2, r7, #20
 8002698:	2303      	movs	r3, #3
 800269a:	2107      	movs	r1, #7
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fc63 	bl	8002f68 <_ZN6BMP38813read_registerEhPht>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (status_temp)
 80026a8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d039      	beq.n	8002724 <_ZN6BMP38811service_irqEv+0x98>
	{
		uint32_t temp_raw = (rx_temp_data[2] << 16) | (rx_temp_data[1] << 8) | rx_temp_data[0];
 80026b0:	7dbb      	ldrb	r3, [r7, #22]
 80026b2:	041a      	lsls	r2, r3, #16
 80026b4:	7d7b      	ldrb	r3, [r7, #21]
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	4313      	orrs	r3, r2
 80026ba:	7d3a      	ldrb	r2, [r7, #20]
 80026bc:	4313      	orrs	r3, r2
 80026be:	643b      	str	r3, [r7, #64]	@ 0x40

		float temp_partial_data1 = (float)temp_raw - calib_data.par_t1;
 80026c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026c2:	ee07 3a90 	vmov	s15, r3
 80026c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80026d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		float temp_partial_data2 = temp_partial_data1 * calib_data.par_t2;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	edd3 7a04 	vldr	s15, [r3, #16]
 80026de:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80026e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		np::lock_guard lock(baro_data_mutex);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026ee:	f107 030c 	add.w	r3, r7, #12
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fc89 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		temperature = temp_partial_data2 + (temp_partial_data1 * temp_partial_data1) * calib_data.par_t3;
 80026fa:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80026fe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	edd3 7a05 	vldr	s15, [r3, #20]
 8002708:	ee27 7a27 	vmul.f32	s14, s14, s15
 800270c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
	}
 800271a:	f107 030c 	add.w	r3, r7, #12
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fc89 	bl	8001036 <_ZN2np10lock_guardD1Ev>

	// Compute compensated pressure

	uint8_t rx_press_data[3];
	bool status_pressure = read_register(REG_DATA_0, rx_press_data, sizeof(rx_press_data));
 8002724:	f107 0210 	add.w	r2, r7, #16
 8002728:	2303      	movs	r3, #3
 800272a:	2104      	movs	r1, #4
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 fc1b 	bl	8002f68 <_ZN6BMP38813read_registerEhPht>
 8002732:	4603      	mov	r3, r0
 8002734:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	
	if (status_temp && status_pressure)
 8002738:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 8119 	beq.w	8002974 <_ZN6BMP38811service_irqEv+0x2e8>
 8002742:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 8114 	beq.w	8002974 <_ZN6BMP38811service_irqEv+0x2e8>
	{
		uint32_t press_raw = (rx_press_data[2] << 16) | (rx_press_data[1] << 8) | rx_press_data[0];
 800274c:	7cbb      	ldrb	r3, [r7, #18]
 800274e:	041a      	lsls	r2, r3, #16
 8002750:	7c7b      	ldrb	r3, [r7, #17]
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	4313      	orrs	r3, r2
 8002756:	7c3a      	ldrb	r2, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	633b      	str	r3, [r7, #48]	@ 0x30

		np::lock_guard lock(baro_data_mutex);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002760:	f107 0308 	add.w	r3, r7, #8
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe fc50 	bl	800100c <_ZN2np10lock_guardC1ERPv>

		float press_partial_data1 = calib_data.par_p6 * temperature;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		float press_partial_data2 = calib_data.par_p7 * (temperature * temperature);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002792:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800279a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		float press_partial_data3 = calib_data.par_p8 * (temperature * temperature * temperature);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80027b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80027ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		float press_partial_out1 = calib_data.par_p5 + press_partial_data1 + press_partial_data2 + press_partial_data3;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80027cc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80027d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027d4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80027d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027dc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80027e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e4:	edc7 7a08 	vstr	s15, [r7, #32]

		press_partial_data1 = calib_data.par_p2 * temperature;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	ed93 7a07 	vldr	s14, [r3, #28]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80027f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		press_partial_data2 = calib_data.par_p3 * (temperature * temperature);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	ed93 7a08 	vldr	s14, [r3, #32]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800280e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002816:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		press_partial_data3 = calib_data.par_p4 * (temperature * temperature * temperature);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800282c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002836:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800283a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		float press_partial_out2 = (float)press_raw * (calib_data.par_p1 + press_partial_data1 + press_partial_data2 + press_partial_data3);
 8002842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	edd3 6a06 	vldr	s13, [r3, #24]
 8002852:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002856:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800285a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800285e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002862:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800286a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286e:	edc7 7a07 	vstr	s15, [r7, #28]

		press_partial_data1 = (float)press_raw * (float)press_raw;
 8002872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002874:	ee07 3a90 	vmov	s15, r3
 8002878:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800287c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287e:	ee07 3a90 	vmov	s15, r3
 8002882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		press_partial_data2 = calib_data.par_p9 + calib_data.par_p10 * temperature;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80028a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		press_partial_data3 = press_partial_data1 *	press_partial_data2;
 80028ac:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80028b0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80028b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		float press_partial_out3 = press_partial_data3 + ((float)press_raw * (float)press_raw * (float)press_raw) * calib_data.par_p11;
 80028bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028be:	ee07 3a90 	vmov	s15, r3
 80028c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c8:	ee07 3a90 	vmov	s15, r3
 80028cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d6:	ee07 3a90 	vmov	s15, r3
 80028da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80028e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ec:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80028f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f4:	edc7 7a06 	vstr	s15, [r7, #24]

		pressure = press_partial_out1 + press_partial_out2 + press_partial_out3;
 80028f8:	ed97 7a08 	vldr	s14, [r7, #32]
 80028fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002900:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002904:	edd7 7a06 	vldr	s15, [r7, #24]
 8002908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

		// Compute altitude

		if (pressure && startup_pressure)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002918:	eef5 7a40 	vcmp.f32	s15, #0.0
 800291c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002920:	d022      	beq.n	8002968 <_ZN6BMP38811service_irqEv+0x2dc>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002928:	eef5 7a40 	vcmp.f32	s15, #0.0
 800292c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002930:	d01a      	beq.n	8002968 <_ZN6BMP38811service_irqEv+0x2dc>
		{
			altitude = 44330 * (1 - powf(pressure / startup_pressure, 1.0 / 5.25579));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800293e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002942:	eddf 0a16 	vldr	s1, [pc, #88]	@ 800299c <_ZN6BMP38811service_irqEv+0x310>
 8002946:	eeb0 0a66 	vmov.f32	s0, s13
 800294a:	f01a fa2f 	bl	801cdac <powf>
 800294e:	eef0 7a40 	vmov.f32	s15, s0
 8002952:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800295a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80029a0 <_ZN6BMP38811service_irqEv+0x314>
 800295e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
		}

		// Data ready INT cleared automatically 2.5 ms after the interrupt assertion
	}
 8002968:	f107 0308 	add.w	r3, r7, #8
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe fb62 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 8002972:	e003      	b.n	800297c <_ZN6BMP38811service_irqEv+0x2f0>
	else
	{
		USB_Log("ERROR reading BMP388 data.", ERR);
 8002974:	2102      	movs	r1, #2
 8002976:	480b      	ldr	r0, [pc, #44]	@ (80029a4 <_ZN6BMP38811service_irqEv+0x318>)
 8002978:	f000 fe7c 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	}

	return status_temp && status_pressure;
 800297c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <_ZN6BMP38811service_irqEv+0x304>
 8002984:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <_ZN6BMP38811service_irqEv+0x304>
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <_ZN6BMP38811service_irqEv+0x306>
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3748      	adds	r7, #72	@ 0x48
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	3e42d52f 	.word	0x3e42d52f
 80029a0:	472d2a00 	.word	0x472d2a00
 80029a4:	0802216c 	.word	0x0802216c

080029a8 <_ZN6BMP38815log_data_to_gcsEv>:

void BMP388::log_data_to_gcs()
{
 80029a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029ac:	b0aa      	sub	sp, #168	@ 0xa8
 80029ae:	af06      	add	r7, sp, #24
 80029b0:	6078      	str	r0, [r7, #4]
	char string[128];
	{
		np::lock_guard lock(baro_data_mutex);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029b6:	f107 030c 	add.w	r3, r7, #12
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe fb25 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		snprintf(string, 128, "BMP388 %.2f %.2f %.2f", pressure, altitude, temperature);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fd fde6 	bl	8000598 <__aeabi_f2d>
 80029cc:	4604      	mov	r4, r0
 80029ce:	460d      	mov	r5, r1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fddf 	bl	8000598 <__aeabi_f2d>
 80029da:	4680      	mov	r8, r0
 80029dc:	4689      	mov	r9, r1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fdd8 	bl	8000598 <__aeabi_f2d>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	f107 0010 	add.w	r0, r7, #16
 80029f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80029f4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80029f8:	e9cd 4500 	strd	r4, r5, [sp]
 80029fc:	4a09      	ldr	r2, [pc, #36]	@ (8002a24 <_ZN6BMP38815log_data_to_gcsEv+0x7c>)
 80029fe:	2180      	movs	r1, #128	@ 0x80
 8002a00:	f01d f952 	bl	801fca8 <sniprintf>
	}
 8002a04:	f107 030c 	add.w	r3, r7, #12
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe fb14 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	USB_Log(string, SENSOR);
 8002a0e:	f107 0310 	add.w	r3, r7, #16
 8002a12:	2103      	movs	r1, #3
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 fe2d 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
}
 8002a1a:	bf00      	nop
 8002a1c:	3790      	adds	r7, #144	@ 0x90
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a24:	08022188 	.word	0x08022188

08002a28 <_ZN6BMP38820read_calibration_nvmEv>:
	np::lock_guard lock(baro_data_mutex);
	return temperature;
}

bool BMP388::read_calibration_nvm()
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08a      	sub	sp, #40	@ 0x28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	bool status = false;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t rx_data[2];

	// PAR T1
	status = read_register(REG_NVM_PAR_T1_LSB, rx_data, 2);
 8002a36:	f107 020c 	add.w	r2, r7, #12
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	2131      	movs	r1, #49	@ 0x31
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fa92 	bl	8002f68 <_ZN6BMP38813read_registerEhPht>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a4e:	f083 0301 	eor.w	r3, r3, #1
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <_ZN6BMP38820read_calibration_nvmEv+0x36>
 8002a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a5c:	e21b      	b.n	8002e96 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	uint16_t par_t1_raw = (rx_data[1] << 8) | rx_data[0];
 8002a5e:	7b7b      	ldrb	r3, [r7, #13]
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	b21a      	sxth	r2, r3
 8002a64:	7b3b      	ldrb	r3, [r7, #12]
 8002a66:	b21b      	sxth	r3, r3
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	b21b      	sxth	r3, r3
 8002a6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	calib_data.par_t1 = (float)par_t1_raw / powf(2, -8);
 8002a6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a70:	ee07 3a90 	vmov	s15, r3
 8002a74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a78:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002d68 <_ZN6BMP38820read_calibration_nvmEv+0x340>
 8002a7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	edc3 7a03 	vstr	s15, [r3, #12]

	// PAR T2
	status = read_register(REG_NVM_PAR_T2_LSB, rx_data, 2);
 8002a86:	f107 020c 	add.w	r2, r7, #12
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	2133      	movs	r1, #51	@ 0x33
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fa6a 	bl	8002f68 <_ZN6BMP38813read_registerEhPht>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002a9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a9e:	f083 0301 	eor.w	r3, r3, #1
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <_ZN6BMP38820read_calibration_nvmEv+0x86>
 8002aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002aac:	e1f3      	b.n	8002e96 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	uint16_t par_t2_raw = (rx_data[1] << 8) | rx_data[0];
 8002aae:	7b7b      	ldrb	r3, [r7, #13]
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	b21a      	sxth	r2, r3
 8002ab4:	7b3b      	ldrb	r3, [r7, #12]
 8002ab6:	b21b      	sxth	r3, r3
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	b21b      	sxth	r3, r3
 8002abc:	847b      	strh	r3, [r7, #34]	@ 0x22
	calib_data.par_t2 = (float)par_t2_raw / powf(2, 30);
 8002abe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ac8:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002d6c <_ZN6BMP38820read_calibration_nvmEv+0x344>
 8002acc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	edc3 7a04 	vstr	s15, [r3, #16]

	// PAR T3
	status = read_register(REG_NVM_PAR_T3, rx_data, 1);
 8002ad6:	f107 020c 	add.w	r2, r7, #12
 8002ada:	2301      	movs	r3, #1
 8002adc:	2135      	movs	r1, #53	@ 0x35
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fa42 	bl	8002f68 <_ZN6BMP38813read_registerEhPht>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002aea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002aee:	f083 0301 	eor.w	r3, r3, #1
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <_ZN6BMP38820read_calibration_nvmEv+0xd6>
 8002af8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002afc:	e1cb      	b.n	8002e96 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_t3_raw = rx_data[0];
 8002afe:	7b3b      	ldrb	r3, [r7, #12]
 8002b00:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	calib_data.par_t3 = (float)par_t3_raw / powf(2, 48);
 8002b04:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8002b08:	ee07 3a90 	vmov	s15, r3
 8002b0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b10:	eddf 6a9f 	vldr	s13, [pc, #636]	@ 8002d90 <_ZN6BMP38820read_calibration_nvmEv+0x368>
 8002b14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	edc3 7a05 	vstr	s15, [r3, #20]

	// PAR P1
	status = read_register(REG_NVM_PAR_P1_LSB, rx_data, 2);
 8002b1e:	f107 020c 	add.w	r2, r7, #12
 8002b22:	2302      	movs	r3, #2
 8002b24:	2136      	movs	r1, #54	@ 0x36
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fa1e 	bl	8002f68 <_ZN6BMP38813read_registerEhPht>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002b32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b36:	f083 0301 	eor.w	r3, r3, #1
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <_ZN6BMP38820read_calibration_nvmEv+0x11e>
 8002b40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b44:	e1a7      	b.n	8002e96 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int16_t par_p1_raw = (rx_data[1] << 8) | rx_data[0];
 8002b46:	7b7b      	ldrb	r3, [r7, #13]
 8002b48:	021b      	lsls	r3, r3, #8
 8002b4a:	b21a      	sxth	r2, r3
 8002b4c:	7b3b      	ldrb	r3, [r7, #12]
 8002b4e:	b21b      	sxth	r3, r3
 8002b50:	4313      	orrs	r3, r2
 8002b52:	83fb      	strh	r3, [r7, #30]
	calib_data.par_p1 = ((float)par_p1_raw - powf(2, 14)) / powf(2, 20);
 8002b54:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b58:	ee07 3a90 	vmov	s15, r3
 8002b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b60:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002d70 <_ZN6BMP38820read_calibration_nvmEv+0x348>
 8002b64:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002b68:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8002d74 <_ZN6BMP38820read_calibration_nvmEv+0x34c>
 8002b6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	edc3 7a06 	vstr	s15, [r3, #24]

	// PAR P2
	status = read_register(REG_NVM_PAR_P2_LSB, rx_data, 2);
 8002b76:	f107 020c 	add.w	r2, r7, #12
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	2138      	movs	r1, #56	@ 0x38
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f9f2 	bl	8002f68 <_ZN6BMP38813read_registerEhPht>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b8e:	f083 0301 	eor.w	r3, r3, #1
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <_ZN6BMP38820read_calibration_nvmEv+0x176>
 8002b98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b9c:	e17b      	b.n	8002e96 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int16_t par_p2_raw = (rx_data[1] << 8) | rx_data[0];
 8002b9e:	7b7b      	ldrb	r3, [r7, #13]
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	b21a      	sxth	r2, r3
 8002ba4:	7b3b      	ldrb	r3, [r7, #12]
 8002ba6:	b21b      	sxth	r3, r3
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	83bb      	strh	r3, [r7, #28]
	calib_data.par_p2 = ((float)par_p2_raw - powf(2, 14)) / powf(2, 29);
 8002bac:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002bb0:	ee07 3a90 	vmov	s15, r3
 8002bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bb8:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8002d70 <_ZN6BMP38820read_calibration_nvmEv+0x348>
 8002bbc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002bc0:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8002d78 <_ZN6BMP38820read_calibration_nvmEv+0x350>
 8002bc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	edc3 7a07 	vstr	s15, [r3, #28]

	// PAR P3
	status = read_register(REG_NVM_PAR_P3, rx_data, 1);
 8002bce:	f107 020c 	add.w	r2, r7, #12
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	213a      	movs	r1, #58	@ 0x3a
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f9c6 	bl	8002f68 <_ZN6BMP38813read_registerEhPht>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002be2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002be6:	f083 0301 	eor.w	r3, r3, #1
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <_ZN6BMP38820read_calibration_nvmEv+0x1ce>
 8002bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bf4:	e14f      	b.n	8002e96 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_p3_raw = rx_data[0];
 8002bf6:	7b3b      	ldrb	r3, [r7, #12]
 8002bf8:	76fb      	strb	r3, [r7, #27]
	calib_data.par_p3 = (float)par_p3_raw / powf(2, 32);
 8002bfa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002bfe:	ee07 3a90 	vmov	s15, r3
 8002c02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c06:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8002d7c <_ZN6BMP38820read_calibration_nvmEv+0x354>
 8002c0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	edc3 7a08 	vstr	s15, [r3, #32]

	// PAR P4
	status = read_register(REG_NVM_PAR_P4, rx_data, 1);
 8002c14:	f107 020c 	add.w	r2, r7, #12
 8002c18:	2301      	movs	r3, #1
 8002c1a:	213b      	movs	r1, #59	@ 0x3b
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f9a3 	bl	8002f68 <_ZN6BMP38813read_registerEhPht>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002c28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c2c:	f083 0301 	eor.w	r3, r3, #1
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <_ZN6BMP38820read_calibration_nvmEv+0x214>
 8002c36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c3a:	e12c      	b.n	8002e96 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_p4_raw = rx_data[0];
 8002c3c:	7b3b      	ldrb	r3, [r7, #12]
 8002c3e:	76bb      	strb	r3, [r7, #26]
	calib_data.par_p4 = (float)par_p4_raw / powf(2, 37);
 8002c40:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002c44:	ee07 3a90 	vmov	s15, r3
 8002c48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c4c:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002d80 <_ZN6BMP38820read_calibration_nvmEv+0x358>
 8002c50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// PAR P5
	status = read_register(REG_NVM_PAR_P5_LSB, rx_data, 2);
 8002c5a:	f107 020c 	add.w	r2, r7, #12
 8002c5e:	2302      	movs	r3, #2
 8002c60:	213c      	movs	r1, #60	@ 0x3c
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f980 	bl	8002f68 <_ZN6BMP38813read_registerEhPht>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002c6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c72:	f083 0301 	eor.w	r3, r3, #1
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <_ZN6BMP38820read_calibration_nvmEv+0x25a>
 8002c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c80:	e109      	b.n	8002e96 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	uint16_t par_p5_raw = (rx_data[1] << 8) | rx_data[0];
 8002c82:	7b7b      	ldrb	r3, [r7, #13]
 8002c84:	021b      	lsls	r3, r3, #8
 8002c86:	b21a      	sxth	r2, r3
 8002c88:	7b3b      	ldrb	r3, [r7, #12]
 8002c8a:	b21b      	sxth	r3, r3
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	b21b      	sxth	r3, r3
 8002c90:	833b      	strh	r3, [r7, #24]
	calib_data.par_p5 = (float)par_p5_raw / powf(2, -3);
 8002c92:	8b3b      	ldrh	r3, [r7, #24]
 8002c94:	ee07 3a90 	vmov	s15, r3
 8002c98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c9c:	eef4 6a00 	vmov.f32	s13, #64	@ 0x3e000000  0.125
 8002ca0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// PAR P6
	status = read_register(REG_NVM_PAR_P6_LSB, rx_data, 2);
 8002caa:	f107 020c 	add.w	r2, r7, #12
 8002cae:	2302      	movs	r3, #2
 8002cb0:	213e      	movs	r1, #62	@ 0x3e
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f958 	bl	8002f68 <_ZN6BMP38813read_registerEhPht>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cc2:	f083 0301 	eor.w	r3, r3, #1
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <_ZN6BMP38820read_calibration_nvmEv+0x2aa>
 8002ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cd0:	e0e1      	b.n	8002e96 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	uint16_t par_p6_raw = (rx_data[1] << 8) | rx_data[0];
 8002cd2:	7b7b      	ldrb	r3, [r7, #13]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	b21a      	sxth	r2, r3
 8002cd8:	7b3b      	ldrb	r3, [r7, #12]
 8002cda:	b21b      	sxth	r3, r3
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	b21b      	sxth	r3, r3
 8002ce0:	82fb      	strh	r3, [r7, #22]
	calib_data.par_p6 = (float)par_p6_raw / powf(2, 6);
 8002ce2:	8afb      	ldrh	r3, [r7, #22]
 8002ce4:	ee07 3a90 	vmov	s15, r3
 8002ce8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cec:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8002d84 <_ZN6BMP38820read_calibration_nvmEv+0x35c>
 8002cf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// PAR P7
	status = read_register(REG_NVM_PAR_P7, rx_data, 1);
 8002cfa:	f107 020c 	add.w	r2, r7, #12
 8002cfe:	2301      	movs	r3, #1
 8002d00:	2140      	movs	r1, #64	@ 0x40
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f930 	bl	8002f68 <_ZN6BMP38813read_registerEhPht>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d12:	f083 0301 	eor.w	r3, r3, #1
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <_ZN6BMP38820read_calibration_nvmEv+0x2fa>
 8002d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d20:	e0b9      	b.n	8002e96 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_p7_raw = rx_data[0];
 8002d22:	7b3b      	ldrb	r3, [r7, #12]
 8002d24:	757b      	strb	r3, [r7, #21]
	calib_data.par_p7 = (float)par_p7_raw / powf(2, 8);
 8002d26:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002d2a:	ee07 3a90 	vmov	s15, r3
 8002d2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d32:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002d88 <_ZN6BMP38820read_calibration_nvmEv+0x360>
 8002d36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	// PAR P8
	status = read_register(REG_NVM_PAR_P8, rx_data, 1);
 8002d40:	f107 020c 	add.w	r2, r7, #12
 8002d44:	2301      	movs	r3, #1
 8002d46:	2141      	movs	r1, #65	@ 0x41
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f90d 	bl	8002f68 <_ZN6BMP38813read_registerEhPht>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002d54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d58:	f083 0301 	eor.w	r3, r3, #1
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d01a      	beq.n	8002d98 <_ZN6BMP38820read_calibration_nvmEv+0x370>
 8002d62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d66:	e096      	b.n	8002e96 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
 8002d68:	3b800000 	.word	0x3b800000
 8002d6c:	4e800000 	.word	0x4e800000
 8002d70:	46800000 	.word	0x46800000
 8002d74:	49800000 	.word	0x49800000
 8002d78:	4e000000 	.word	0x4e000000
 8002d7c:	4f800000 	.word	0x4f800000
 8002d80:	52000000 	.word	0x52000000
 8002d84:	42800000 	.word	0x42800000
 8002d88:	43800000 	.word	0x43800000
 8002d8c:	47000000 	.word	0x47000000
 8002d90:	57800000 	.word	0x57800000
 8002d94:	60000000 	.word	0x60000000
	int8_t par_p8_raw = rx_data[0];
 8002d98:	7b3b      	ldrb	r3, [r7, #12]
 8002d9a:	753b      	strb	r3, [r7, #20]
	calib_data.par_p8 = (float)par_p8_raw / powf(2, 15);
 8002d9c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002da0:	ee07 3a90 	vmov	s15, r3
 8002da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002da8:	ed5f 6a08 	vldr	s13, [pc, #-32]	@ 8002d8c <_ZN6BMP38820read_calibration_nvmEv+0x364>
 8002dac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	// PAR P9
	status = read_register(REG_NVM_PAR_P9_LSB, rx_data, 2);
 8002db6:	f107 020c 	add.w	r2, r7, #12
 8002dba:	2302      	movs	r3, #2
 8002dbc:	2142      	movs	r1, #66	@ 0x42
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f8d2 	bl	8002f68 <_ZN6BMP38813read_registerEhPht>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002dca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002dce:	f083 0301 	eor.w	r3, r3, #1
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <_ZN6BMP38820read_calibration_nvmEv+0x3b6>
 8002dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ddc:	e05b      	b.n	8002e96 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int16_t par_p9_raw = (rx_data[1] << 8) | rx_data[0];
 8002dde:	7b7b      	ldrb	r3, [r7, #13]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	b21a      	sxth	r2, r3
 8002de4:	7b3b      	ldrb	r3, [r7, #12]
 8002de6:	b21b      	sxth	r3, r3
 8002de8:	4313      	orrs	r3, r2
 8002dea:	827b      	strh	r3, [r7, #18]
	calib_data.par_p9 = (float)par_p9_raw / powf(2, 48);
 8002dec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002df0:	ee07 3a90 	vmov	s15, r3
 8002df4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002df8:	ed5f 6a1b 	vldr	s13, [pc, #-108]	@ 8002d90 <_ZN6BMP38820read_calibration_nvmEv+0x368>
 8002dfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	// PAR P10
	status = read_register(REG_NVM_PAR_P10, rx_data, 1);
 8002e06:	f107 020c 	add.w	r2, r7, #12
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	2144      	movs	r1, #68	@ 0x44
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f8aa 	bl	8002f68 <_ZN6BMP38813read_registerEhPht>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e1e:	f083 0301 	eor.w	r3, r3, #1
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <_ZN6BMP38820read_calibration_nvmEv+0x406>
 8002e28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e2c:	e033      	b.n	8002e96 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_p10_raw = rx_data[0];
 8002e2e:	7b3b      	ldrb	r3, [r7, #12]
 8002e30:	747b      	strb	r3, [r7, #17]
	calib_data.par_p10 = (float)par_p10_raw / powf(2, 48);
 8002e32:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002e36:	ee07 3a90 	vmov	s15, r3
 8002e3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e3e:	ed5f 6a2c 	vldr	s13, [pc, #-176]	@ 8002d90 <_ZN6BMP38820read_calibration_nvmEv+0x368>
 8002e42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

	// PAR P11
	status = read_register(REG_NVM_PAR_P11, rx_data, 1);
 8002e4c:	f107 020c 	add.w	r2, r7, #12
 8002e50:	2301      	movs	r3, #1
 8002e52:	2145      	movs	r1, #69	@ 0x45
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f887 	bl	8002f68 <_ZN6BMP38813read_registerEhPht>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002e60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e64:	f083 0301 	eor.w	r3, r3, #1
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <_ZN6BMP38820read_calibration_nvmEv+0x44c>
 8002e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e72:	e010      	b.n	8002e96 <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_p11_raw = rx_data[0];
 8002e74:	7b3b      	ldrb	r3, [r7, #12]
 8002e76:	743b      	strb	r3, [r7, #16]
	calib_data.par_p11 = (float)par_p11_raw / powf(2, 65);
 8002e78:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002e7c:	ee07 3a90 	vmov	s15, r3
 8002e80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e84:	ed5f 6a3d 	vldr	s13, [pc, #-244]	@ 8002d94 <_ZN6BMP38820read_calibration_nvmEv+0x36c>
 8002e88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

	return status;
 8002e92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3728      	adds	r7, #40	@ 0x28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop

08002ea0 <_ZN6BMP38824compute_startup_pressureEv>:

bool BMP388::compute_startup_pressure()
{
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b089      	sub	sp, #36	@ 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
	/* Compute the average current pressure (for initial altitude reference) */
	bool status = false;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	77fb      	strb	r3, [r7, #31]
	uint8_t tx_data[2];
	uint8_t sample_num = 50;
 8002eac:	2332      	movs	r3, #50	@ 0x32
 8002eae:	74fb      	strb	r3, [r7, #19]
	float running_pressure = 0;
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	61bb      	str	r3, [r7, #24]

	for (int i = 0; i < sample_num; i++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	e031      	b.n	8002f20 <_ZN6BMP38824compute_startup_pressureEv+0x80>
	{
		// Switch sensor into forced mode (take one reading, return to sleep)
		tx_data[0] = 0x13;
 8002ebc:	2313      	movs	r3, #19
 8002ebe:	743b      	strb	r3, [r7, #16]
		status = write_register(REG_PWR_CTRL, tx_data, 1);
 8002ec0:	f107 0210 	add.w	r2, r7, #16
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	211b      	movs	r1, #27
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f88f 	bl	8002fec <_ZN6BMP38814write_registerEhPht>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	77fb      	strb	r3, [r7, #31]
		if (!status) return status;
 8002ed2:	7ffb      	ldrb	r3, [r7, #31]
 8002ed4:	f083 0301 	eor.w	r3, r3, #1
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <_ZN6BMP38824compute_startup_pressureEv+0x42>
 8002ede:	7ffc      	ldrb	r4, [r7, #31]
 8002ee0:	e03c      	b.n	8002f5c <_ZN6BMP38824compute_startup_pressureEv+0xbc>
		osDelay(40);
 8002ee2:	2028      	movs	r0, #40	@ 0x28
 8002ee4:	f00c f881 	bl	800efea <osDelay>
		service_irq();
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff fbcf 	bl	800268c <_ZN6BMP38811service_irqEv>
		np::lock_guard lock(baro_data_mutex);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ef2:	f107 0308 	add.w	r3, r7, #8
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fe f887 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		running_pressure += pressure;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002f04:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f0c:	edc7 7a06 	vstr	s15, [r7, #24]
	}
 8002f10:	f107 0308 	add.w	r3, r7, #8
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fe f88e 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	for (int i = 0; i < sample_num; i++)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	7cfb      	ldrb	r3, [r7, #19]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	dbc9      	blt.n	8002ebc <_ZN6BMP38824compute_startup_pressureEv+0x1c>
	np::lock_guard lock(baro_data_mutex);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f2c:	f107 030c 	add.w	r3, r7, #12
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe f86a 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	startup_pressure = running_pressure / sample_num;
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	ee07 3a90 	vmov	s15, r3
 8002f3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f42:	edd7 6a06 	vldr	s13, [r7, #24]
 8002f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	return status;
 8002f50:	7ffc      	ldrb	r4, [r7, #31]
}
 8002f52:	f107 030c 	add.w	r3, r7, #12
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe f86d 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 8002f5c:	4623      	mov	r3, r4
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3724      	adds	r7, #36	@ 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd90      	pop	{r4, r7, pc}
	...

08002f68 <_ZN6BMP38813read_registerEhPht>:
 *
 *  Low-level register read / write
 *
 */
bool BMP388::read_register(uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	@ 0x28
 8002f6c:	af04      	add	r7, sp, #16
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	461a      	mov	r2, r3
 8002f74:	460b      	mov	r3, r1
 8002f76:	72fb      	strb	r3, [r7, #11]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	813b      	strh	r3, [r7, #8]
	bool status = false;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	75fb      	strb	r3, [r7, #23]
	{
		np::lock_guard lock(i2c_mutex);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	f107 0310 	add.w	r3, r7, #16
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe f83e 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		status = (HAL_I2C_Mem_Read(&i2c_handle, (BMP388_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, rx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	7a1b      	ldrb	r3, [r3, #8]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	b299      	uxth	r1, r3
 8002f9c:	7afb      	ldrb	r3, [r7, #11]
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fa4:	9302      	str	r3, [sp, #8]
 8002fa6:	893b      	ldrh	r3, [r7, #8]
 8002fa8:	9301      	str	r3, [sp, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	2301      	movs	r3, #1
 8002fb0:	f003 fa0c 	bl	80063cc <HAL_I2C_Mem_Read>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bf0c      	ite	eq
 8002fba:	2301      	moveq	r3, #1
 8002fbc:	2300      	movne	r3, #0
 8002fbe:	75fb      	strb	r3, [r7, #23]
	}
 8002fc0:	f107 0310 	add.w	r3, r7, #16
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe f836 	bl	8001036 <_ZN2np10lock_guardD1Ev>

	if (!status)
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	f083 0301 	eor.w	r3, r3, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <_ZN6BMP38813read_registerEhPht+0x76>
	{
		USB_Log("BMP388 register read failed.\n", ERR);
 8002fd6:	2102      	movs	r1, #2
 8002fd8:	4803      	ldr	r0, [pc, #12]	@ (8002fe8 <_ZN6BMP38813read_registerEhPht+0x80>)
 8002fda:	f000 fb4b 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	080221a0 	.word	0x080221a0

08002fec <_ZN6BMP38814write_registerEhPht>:

bool BMP388::write_register(uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	@ 0x28
 8002ff0:	af04      	add	r7, sp, #16
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	607a      	str	r2, [r7, #4]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	72fb      	strb	r3, [r7, #11]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	813b      	strh	r3, [r7, #8]
	bool status = false;
 8003000:	2300      	movs	r3, #0
 8003002:	75fb      	strb	r3, [r7, #23]
	{
		np::lock_guard lock(i2c_mutex);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	f107 0310 	add.w	r3, r7, #16
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd fffc 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		status = (HAL_I2C_Mem_Write(&i2c_handle, (BMP388_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, tx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	7a1b      	ldrb	r3, [r3, #8]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	b299      	uxth	r1, r3
 8003020:	7afb      	ldrb	r3, [r7, #11]
 8003022:	b29a      	uxth	r2, r3
 8003024:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003028:	9302      	str	r3, [sp, #8]
 800302a:	893b      	ldrh	r3, [r7, #8]
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	2301      	movs	r3, #1
 8003034:	f003 f8b6 	bl	80061a4 <HAL_I2C_Mem_Write>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	bf0c      	ite	eq
 800303e:	2301      	moveq	r3, #1
 8003040:	2300      	movne	r3, #0
 8003042:	75fb      	strb	r3, [r7, #23]
	}
 8003044:	f107 0310 	add.w	r3, r7, #16
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd fff4 	bl	8001036 <_ZN2np10lock_guardD1Ev>

	if (!status)
 800304e:	7dfb      	ldrb	r3, [r7, #23]
 8003050:	f083 0301 	eor.w	r3, r3, #1
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <_ZN6BMP38814write_registerEhPht+0x76>
	{
		USB_Log("BMP388 register write failed.\n", ERR);
 800305a:	2102      	movs	r1, #2
 800305c:	4803      	ldr	r0, [pc, #12]	@ (800306c <_ZN6BMP38814write_registerEhPht+0x80>)
 800305e:	f000 fb09 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 8003062:	7dfb      	ldrb	r3, [r7, #23]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	080221c0 	.word	0x080221c0

08003070 <_ZN23LIS3MDL_CalibrationDataC1Ev>:
#define REG_INT_SRC					0x31
#define REG_INT_THS_L				0x32
#define REG_INT_THS_H				0x33


struct LIS3MDL_CalibrationData
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a07      	ldr	r2, [pc, #28]	@ (8003098 <_ZN23LIS3MDL_CalibrationDataC1Ev+0x28>)
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a06      	ldr	r2, [pc, #24]	@ (800309c <_ZN23LIS3MDL_CalibrationDataC1Ev+0x2c>)
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a06      	ldr	r2, [pc, #24]	@ (80030a0 <_ZN23LIS3MDL_CalibrationDataC1Ev+0x30>)
 8003088:	609a      	str	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	be9ff2e5 	.word	0xbe9ff2e5
 800309c:	be8b020c 	.word	0xbe8b020c
 80030a0:	bdbc6a7f 	.word	0xbdbc6a7f

080030a4 <_ZN7LIS3MDLC1ER19__I2C_HandleTypeDefRPvS3_>:
#include "Utility/lock_guard.hpp"
#include <cmath>
#include <cstdio>


LIS3MDL::LIS3MDL(I2C_HandleTypeDef& i2c_handle, osMutexId_t& i2c_mutex, osMutexId_t& mag_data_mutex)
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
	:i2c_handle(i2c_handle),
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	601a      	str	r2, [r3, #0]
	 i2c_mutex(i2c_mutex),
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	605a      	str	r2, [r3, #4]
	 mag_data_mutex(mag_data_mutex) {}
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	221c      	movs	r2, #28
 80030c2:	721a      	strb	r2, [r3, #8]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	330c      	adds	r3, #12
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff ffd1 	bl	8003070 <_ZN23LIS3MDL_CalibrationDataC1Ev>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4a0a      	ldr	r2, [pc, #40]	@ (80030fc <_ZN7LIS3MDLC1ER19__I2C_HandleTypeDefRPvS3_+0x58>)
 80030d2:	619a      	str	r2, [r3, #24]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	61da      	str	r2, [r3, #28]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	3320      	adds	r3, #32
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	605a      	str	r2, [r3, #4]
 80030e4:	609a      	str	r2, [r3, #8]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	332c      	adds	r3, #44	@ 0x2c
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	605a      	str	r2, [r3, #4]
 80030f0:	609a      	str	r2, [r3, #8]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	45d5d000 	.word	0x45d5d000

08003100 <_ZN7LIS3MDL4initEv>:

bool LIS3MDL::init()
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	@ 0x28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	bool status = false;
 8003108:	2300      	movs	r3, #0
 800310a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];

	// Check chip ID
	rx_data[0] = 0x00;
 800310e:	2300      	movs	r3, #0
 8003110:	753b      	strb	r3, [r7, #20]
	status = read_register(REG_WHO_AM_I, rx_data, 1);
 8003112:	f107 0214 	add.w	r2, r7, #20
 8003116:	2301      	movs	r3, #1
 8003118:	210f      	movs	r1, #15
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fa1e 	bl	800355c <_ZN7LIS3MDL13read_registerEhPht>
 8003120:	4603      	mov	r3, r0
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (status && rx_data[0] == 0x3D)
 8003126:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800312a:	2b00      	cmp	r3, #0
 800312c:	d01d      	beq.n	800316a <_ZN7LIS3MDL4initEv+0x6a>
 800312e:	7d3b      	ldrb	r3, [r7, #20]
 8003130:	2b3d      	cmp	r3, #61	@ 0x3d
 8003132:	d11a      	bne.n	800316a <_ZN7LIS3MDL4initEv+0x6a>
	{
		USB_Log("Found LIS3MDL, starting initialization.", CRITICAL);
 8003134:	2101      	movs	r1, #1
 8003136:	4864      	ldr	r0, [pc, #400]	@ (80032c8 <_ZN7LIS3MDL4initEv+0x1c8>)
 8003138:	f000 fa9c 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	else
	{
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
		return false;
	}
	osDelay(10);
 800313c:	200a      	movs	r0, #10
 800313e:	f00b ff54 	bl	800efea <osDelay>

	// Perform soft-reset of device
	tx_data[0] = 0x04;
 8003142:	2304      	movs	r3, #4
 8003144:	763b      	strb	r3, [r7, #24]
	status = write_register(REG_CTRL_REG2, tx_data, 1);
 8003146:	f107 0218 	add.w	r2, r7, #24
 800314a:	2301      	movs	r3, #1
 800314c:	2121      	movs	r1, #33	@ 0x21
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fa4e 	bl	80035f0 <_ZN7LIS3MDL14write_registerEhPht>
 8003154:	4603      	mov	r3, r0
 8003156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (!status) return status;
 800315a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800315e:	f083 0301 	eor.w	r3, r3, #1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d106      	bne.n	8003176 <_ZN7LIS3MDL4initEv+0x76>
 8003168:	e008      	b.n	800317c <_ZN7LIS3MDL4initEv+0x7c>
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
 800316a:	2102      	movs	r1, #2
 800316c:	4857      	ldr	r0, [pc, #348]	@ (80032cc <_ZN7LIS3MDL4initEv+0x1cc>)
 800316e:	f000 fa81 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
		return false;
 8003172:	2300      	movs	r3, #0
 8003174:	e0a3      	b.n	80032be <_ZN7LIS3MDL4initEv+0x1be>
	if (!status) return status;
 8003176:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800317a:	e0a0      	b.n	80032be <_ZN7LIS3MDL4initEv+0x1be>
	osDelay(10);
 800317c:	200a      	movs	r0, #10
 800317e:	f00b ff34 	bl	800efea <osDelay>

	// Set +-4G range
	tx_data[0] = 0x00;
 8003182:	2300      	movs	r3, #0
 8003184:	763b      	strb	r3, [r7, #24]
	status = write_register(REG_CTRL_REG2, tx_data, 1);
 8003186:	f107 0218 	add.w	r2, r7, #24
 800318a:	2301      	movs	r3, #1
 800318c:	2121      	movs	r1, #33	@ 0x21
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fa2e 	bl	80035f0 <_ZN7LIS3MDL14write_registerEhPht>
 8003194:	4603      	mov	r3, r0
 8003196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (!status) return status;
 800319a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800319e:	f083 0301 	eor.w	r3, r3, #1
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <_ZN7LIS3MDL4initEv+0xae>
 80031a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031ac:	e087      	b.n	80032be <_ZN7LIS3MDL4initEv+0x1be>
	osDelay(10);
 80031ae:	200a      	movs	r0, #10
 80031b0:	f00b ff1b 	bl	800efea <osDelay>

	// Set X,Y axes ultra-high performance mode, 40Hz ODR, enable temperature sensor
	tx_data[0] = 0xF8;
 80031b4:	23f8      	movs	r3, #248	@ 0xf8
 80031b6:	763b      	strb	r3, [r7, #24]
	status = write_register(REG_CTRL_REG1, tx_data, 1);
 80031b8:	f107 0218 	add.w	r2, r7, #24
 80031bc:	2301      	movs	r3, #1
 80031be:	2120      	movs	r1, #32
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fa15 	bl	80035f0 <_ZN7LIS3MDL14write_registerEhPht>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (!status) return status;
 80031cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031d0:	f083 0301 	eor.w	r3, r3, #1
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <_ZN7LIS3MDL4initEv+0xe0>
 80031da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031de:	e06e      	b.n	80032be <_ZN7LIS3MDL4initEv+0x1be>
	osDelay(10);
 80031e0:	200a      	movs	r0, #10
 80031e2:	f00b ff02 	bl	800efea <osDelay>

	// Set Z axis ultra-high performance mode
	tx_data[0] = 0x0C;
 80031e6:	230c      	movs	r3, #12
 80031e8:	763b      	strb	r3, [r7, #24]
	status = write_register(REG_CTRL_REG4, tx_data, 1);
 80031ea:	f107 0218 	add.w	r2, r7, #24
 80031ee:	2301      	movs	r3, #1
 80031f0:	2123      	movs	r1, #35	@ 0x23
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f9fc 	bl	80035f0 <_ZN7LIS3MDL14write_registerEhPht>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (!status) return status;
 80031fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003202:	f083 0301 	eor.w	r3, r3, #1
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <_ZN7LIS3MDL4initEv+0x112>
 800320c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003210:	e055      	b.n	80032be <_ZN7LIS3MDL4initEv+0x1be>
	osDelay(10);
 8003212:	200a      	movs	r0, #10
 8003214:	f00b fee9 	bl	800efea <osDelay>

	// Initilize IIR Filters
	float ODR = 40;				// Hz
 8003218:	4b2d      	ldr	r3, [pc, #180]	@ (80032d0 <_ZN7LIS3MDL4initEv+0x1d0>)
 800321a:	613b      	str	r3, [r7, #16]
	float CUTOFF = 10;			// Hz
 800321c:	4b2d      	ldr	r3, [pc, #180]	@ (80032d4 <_ZN7LIS3MDL4initEv+0x1d4>)
 800321e:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; i < filters.size(); i++)
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	@ 0x24
 8003224:	e01d      	b.n	8003262 <_ZN7LIS3MDL4initEv+0x162>
	{
		filters[i] = std::make_unique<IIRFilter>(CUTOFF, ODR);
 8003226:	f107 031c 	add.w	r3, r7, #28
 800322a:	f107 0210 	add.w	r2, r7, #16
 800322e:	f107 010c 	add.w	r1, r7, #12
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe ff4e 	bl	80020d4 <_ZSt11make_uniqueI9IIRFilterJRfS1_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	332c      	adds	r3, #44	@ 0x2c
 800323c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe ff39 	bl	80020b6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8003244:	4602      	mov	r2, r0
 8003246:	f107 031c 	add.w	r3, r7, #28
 800324a:	4619      	mov	r1, r3
 800324c:	4610      	mov	r0, r2
 800324e:	f7fd ff59 	bl	8001104 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>
 8003252:	f107 031c 	add.w	r3, r7, #28
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe ff00 	bl	800205c <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev>
	for (size_t i = 0; i < filters.size(); i++)
 800325c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325e:	3301      	adds	r3, #1
 8003260:	627b      	str	r3, [r7, #36]	@ 0x24
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	332c      	adds	r3, #44	@ 0x2c
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe ff1a 	bl	80020a0 <_ZNKSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE4sizeEv>
 800326c:	4602      	mov	r2, r0
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	4293      	cmp	r3, r2
 8003272:	d3d8      	bcc.n	8003226 <_ZN7LIS3MDL4initEv+0x126>
	}

	// Switch to continuous-conversion mode
	tx_data[0] = 0x00;
 8003274:	2300      	movs	r3, #0
 8003276:	763b      	strb	r3, [r7, #24]
	status = write_register(REG_CTRL_REG3, tx_data, 1);
 8003278:	f107 0218 	add.w	r2, r7, #24
 800327c:	2301      	movs	r3, #1
 800327e:	2122      	movs	r1, #34	@ 0x22
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f9b5 	bl	80035f0 <_ZN7LIS3MDL14write_registerEhPht>
 8003286:	4603      	mov	r3, r0
 8003288:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (!status) return status;
 800328c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003290:	f083 0301 	eor.w	r3, r3, #1
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <_ZN7LIS3MDL4initEv+0x1a0>
 800329a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800329e:	e00e      	b.n	80032be <_ZN7LIS3MDL4initEv+0x1be>
	osDelay(10);
 80032a0:	200a      	movs	r0, #10
 80032a2:	f00b fea2 	bl	800efea <osDelay>

	// Read data to clear DRDY interrupt
	service_irq();
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f818 	bl	80032dc <_ZN7LIS3MDL11service_irqEv>

	USB_Log("LIS3MDL initialized OK.", CRITICAL);
 80032ac:	2101      	movs	r1, #1
 80032ae:	480a      	ldr	r0, [pc, #40]	@ (80032d8 <_ZN7LIS3MDL4initEv+0x1d8>)
 80032b0:	f000 f9e0 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 80032b4:	2064      	movs	r0, #100	@ 0x64
 80032b6:	f00b fe98 	bl	800efea <osDelay>

	return status;
 80032ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3728      	adds	r7, #40	@ 0x28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	080221e0 	.word	0x080221e0
 80032cc:	08022208 	.word	0x08022208
 80032d0:	42200000 	.word	0x42200000
 80032d4:	41200000 	.word	0x41200000
 80032d8:	08022238 	.word	0x08022238

080032dc <_ZN7LIS3MDL11service_irqEv>:

bool LIS3MDL::service_irq()
{
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b08b      	sub	sp, #44	@ 0x2c
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[6];
	bool status = read_register(REG_OUT_X_L, raw_data, sizeof(raw_data));
 80032e4:	f107 020c 	add.w	r2, r7, #12
 80032e8:	2306      	movs	r3, #6
 80032ea:	2128      	movs	r1, #40	@ 0x28
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f935 	bl	800355c <_ZN7LIS3MDL13read_registerEhPht>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status)
 80032f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80a4 	beq.w	800344a <_ZN7LIS3MDL11service_irqEv+0x16e>
	{
		int16_t raw_x_int16 = (raw_data[1] << 8) | raw_data[0];
 8003302:	7b7b      	ldrb	r3, [r7, #13]
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	b21a      	sxth	r2, r3
 8003308:	7b3b      	ldrb	r3, [r7, #12]
 800330a:	b21b      	sxth	r3, r3
 800330c:	4313      	orrs	r3, r2
 800330e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		int16_t raw_y_int16 = (raw_data[3] << 8) | raw_data[2];
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	b21a      	sxth	r2, r3
 8003316:	7bbb      	ldrb	r3, [r7, #14]
 8003318:	b21b      	sxth	r3, r3
 800331a:	4313      	orrs	r3, r2
 800331c:	847b      	strh	r3, [r7, #34]	@ 0x22
		int16_t raw_z_int16 = (raw_data[5] << 8) | raw_data[4];
 800331e:	7c7b      	ldrb	r3, [r7, #17]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	b21a      	sxth	r2, r3
 8003324:	7c3b      	ldrb	r3, [r7, #16]
 8003326:	b21b      	sxth	r3, r3
 8003328:	4313      	orrs	r3, r2
 800332a:	843b      	strh	r3, [r7, #32]

		float LIS3_x = filters[0]->update(raw_x_int16 / LSB_per_gauss - calib_data.x_offset);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	332c      	adds	r3, #44	@ 0x2c
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe febf 	bl	80020b6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8003338:	4603      	mov	r3, r0
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe ff10 	bl	8002160 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 8003340:	4602      	mov	r2, r0
 8003342:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	edd3 7a06 	vldr	s15, [r3, #24]
 8003354:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	edd3 7a03 	vldr	s15, [r3, #12]
 800335e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003362:	eeb0 0a67 	vmov.f32	s0, s15
 8003366:	4610      	mov	r0, r2
 8003368:	f000 ffec 	bl	8004344 <_ZN9IIRFilter6updateEf>
 800336c:	ed87 0a07 	vstr	s0, [r7, #28]
		float LIS3_y = filters[1]->update(raw_y_int16 / LSB_per_gauss - calib_data.y_offset);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	332c      	adds	r3, #44	@ 0x2c
 8003374:	2101      	movs	r1, #1
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe fe9d 	bl	80020b6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 800337c:	4603      	mov	r3, r0
 800337e:	4618      	mov	r0, r3
 8003380:	f7fe feee 	bl	8002160 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 8003384:	4602      	mov	r2, r0
 8003386:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	edd3 7a06 	vldr	s15, [r3, #24]
 8003398:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	edd3 7a04 	vldr	s15, [r3, #16]
 80033a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033a6:	eeb0 0a67 	vmov.f32	s0, s15
 80033aa:	4610      	mov	r0, r2
 80033ac:	f000 ffca 	bl	8004344 <_ZN9IIRFilter6updateEf>
 80033b0:	ed87 0a06 	vstr	s0, [r7, #24]
		float LIS3_z = filters[2]->update(raw_z_int16 / LSB_per_gauss - calib_data.z_offset);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	332c      	adds	r3, #44	@ 0x2c
 80033b8:	2102      	movs	r1, #2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe fe7b 	bl	80020b6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 80033c0:	4603      	mov	r3, r0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fecc 	bl	8002160 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 80033c8:	4602      	mov	r2, r0
 80033ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80033dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80033e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ea:	eeb0 0a67 	vmov.f32	s0, s15
 80033ee:	4610      	mov	r0, r2
 80033f0:	f000 ffa8 	bl	8004344 <_ZN9IIRFilter6updateEf>
 80033f4:	ed87 0a05 	vstr	s0, [r7, #20]

		np::lock_guard lock(mag_data_mutex);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	f107 0308 	add.w	r3, r7, #8
 8003400:	4611      	mov	r1, r2
 8003402:	4618      	mov	r0, r3
 8003404:	f7fd fe02 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		axis_intensities[0] = LIS3_x;
 8003408:	69fc      	ldr	r4, [r7, #28]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3320      	adds	r3, #32
 800340e:	2100      	movs	r1, #0
 8003410:	4618      	mov	r0, r3
 8003412:	f7fe feb1 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8003416:	4603      	mov	r3, r0
 8003418:	601c      	str	r4, [r3, #0]
		axis_intensities[1] = LIS3_y;
 800341a:	69bc      	ldr	r4, [r7, #24]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3320      	adds	r3, #32
 8003420:	2101      	movs	r1, #1
 8003422:	4618      	mov	r0, r3
 8003424:	f7fe fea8 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8003428:	4603      	mov	r3, r0
 800342a:	601c      	str	r4, [r3, #0]
		axis_intensities[2] = LIS3_z;
 800342c:	697c      	ldr	r4, [r7, #20]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3320      	adds	r3, #32
 8003432:	2102      	movs	r1, #2
 8003434:	4618      	mov	r0, r3
 8003436:	f7fe fe9f 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 800343a:	4603      	mov	r3, r0
 800343c:	601c      	str	r4, [r3, #0]

		// DRDY interrupt cleared automatically after read
	}
 800343e:	f107 0308 	add.w	r3, r7, #8
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd fdf7 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 8003448:	e003      	b.n	8003452 <_ZN7LIS3MDL11service_irqEv+0x176>
	else
	{
		USB_Log("ERR reading LIS3MDL data.", ERR);
 800344a:	2102      	movs	r1, #2
 800344c:	4804      	ldr	r0, [pc, #16]	@ (8003460 <_ZN7LIS3MDL11service_irqEv+0x184>)
 800344e:	f000 f911 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 8003452:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003456:	4618      	mov	r0, r3
 8003458:	372c      	adds	r7, #44	@ 0x2c
 800345a:	46bd      	mov	sp, r7
 800345c:	bd90      	pop	{r4, r7, pc}
 800345e:	bf00      	nop
 8003460:	08022250 	.word	0x08022250

08003464 <_ZN7LIS3MDL15log_data_to_gcsEv>:

void LIS3MDL::log_data_to_gcs()
{
 8003464:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003468:	b0aa      	sub	sp, #168	@ 0xa8
 800346a:	af06      	add	r7, sp, #24
 800346c:	6078      	str	r0, [r7, #4]
	char string[128];
	{
		np::lock_guard lock(mag_data_mutex);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69da      	ldr	r2, [r3, #28]
 8003472:	f107 030c 	add.w	r3, r7, #12
 8003476:	4611      	mov	r1, r2
 8003478:	4618      	mov	r0, r3
 800347a:	f7fd fdc7 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		snprintf(string, 128, "LIS3MDL %.2f %.2f %.2f", axis_intensities[0], axis_intensities[1], axis_intensities[2]);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3320      	adds	r3, #32
 8003482:	2100      	movs	r1, #0
 8003484:	4618      	mov	r0, r3
 8003486:	f7fe fe77 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 800348a:	4603      	mov	r3, r0
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7fd f882 	bl	8000598 <__aeabi_f2d>
 8003494:	4604      	mov	r4, r0
 8003496:	460d      	mov	r5, r1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3320      	adds	r3, #32
 800349c:	2101      	movs	r1, #1
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fe fe6a 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 80034a4:	4603      	mov	r3, r0
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fd f875 	bl	8000598 <__aeabi_f2d>
 80034ae:	4680      	mov	r8, r0
 80034b0:	4689      	mov	r9, r1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3320      	adds	r3, #32
 80034b6:	2102      	movs	r1, #2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fe fe5d 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 80034be:	4603      	mov	r3, r0
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd f868 	bl	8000598 <__aeabi_f2d>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	f107 0010 	add.w	r0, r7, #16
 80034d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80034d4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80034d8:	e9cd 4500 	strd	r4, r5, [sp]
 80034dc:	4a09      	ldr	r2, [pc, #36]	@ (8003504 <_ZN7LIS3MDL15log_data_to_gcsEv+0xa0>)
 80034de:	2180      	movs	r1, #128	@ 0x80
 80034e0:	f01c fbe2 	bl	801fca8 <sniprintf>
	}
 80034e4:	f107 030c 	add.w	r3, r7, #12
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fd fda4 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	USB_Log(string, SENSOR);
 80034ee:	f107 0310 	add.w	r3, r7, #16
 80034f2:	2103      	movs	r1, #3
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 f8bd 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
}
 80034fa:	bf00      	nop
 80034fc:	3790      	adds	r7, #144	@ 0x90
 80034fe:	46bd      	mov	sp, r7
 8003500:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003504:	0802226c 	.word	0x0802226c

08003508 <_ZN7LIS3MDL20get_axis_intensitiesEv>:

std::array<float, 3> LIS3MDL::get_axis_intensities()
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	@ 0x28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6178      	str	r0, [r7, #20]
	np::lock_guard lock(mag_data_mutex);
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	f107 0318 	add.w	r3, r7, #24
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f7fd fd76 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	return axis_intensities;
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	f107 031c 	add.w	r3, r7, #28
 8003526:	3220      	adds	r2, #32
 8003528:	ca07      	ldmia	r2, {r0, r1, r2}
 800352a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800352e:	f107 0318 	add.w	r3, r7, #24
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd fd7f 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	return axis_intensities;
 8003538:	69f9      	ldr	r1, [r7, #28]
 800353a:	6a3a      	ldr	r2, [r7, #32]
 800353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353e:	ee06 1a90 	vmov	s13, r1
 8003542:	ee07 2a10 	vmov	s14, r2
 8003546:	ee07 3a90 	vmov	s15, r3
}
 800354a:	eeb0 0a66 	vmov.f32	s0, s13
 800354e:	eef0 0a47 	vmov.f32	s1, s14
 8003552:	eeb0 1a67 	vmov.f32	s2, s15
 8003556:	3728      	adds	r7, #40	@ 0x28
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <_ZN7LIS3MDL13read_registerEhPht>:
 *
 *  Low-level register read / write
 *
 */
bool LIS3MDL::read_register(uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08a      	sub	sp, #40	@ 0x28
 8003560:	af04      	add	r7, sp, #16
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	461a      	mov	r2, r3
 8003568:	460b      	mov	r3, r1
 800356a:	72fb      	strb	r3, [r7, #11]
 800356c:	4613      	mov	r3, r2
 800356e:	813b      	strh	r3, [r7, #8]
	bool status = false;
 8003570:	2300      	movs	r3, #0
 8003572:	75fb      	strb	r3, [r7, #23]

	if (data_len > 1)
 8003574:	893b      	ldrh	r3, [r7, #8]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d903      	bls.n	8003582 <_ZN7LIS3MDL13read_registerEhPht+0x26>
	{
		// In order to read multiple bytes, it is necessary to assert the most significant bit of the address field
		reg_addr |= 0x80;
 800357a:	7afb      	ldrb	r3, [r7, #11]
 800357c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003580:	72fb      	strb	r3, [r7, #11]
	}

	{
		np::lock_guard lock(i2c_mutex);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	f107 0310 	add.w	r3, r7, #16
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f7fd fd3d 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		status = (HAL_I2C_Mem_Read(&i2c_handle, (LIS3MDL_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, rx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	7a1b      	ldrb	r3, [r3, #8]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	b299      	uxth	r1, r3
 800359e:	7afb      	ldrb	r3, [r7, #11]
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80035a6:	9302      	str	r3, [sp, #8]
 80035a8:	893b      	ldrh	r3, [r7, #8]
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	2301      	movs	r3, #1
 80035b2:	f002 ff0b 	bl	80063cc <HAL_I2C_Mem_Read>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	75fb      	strb	r3, [r7, #23]
	}
 80035c2:	f107 0310 	add.w	r3, r7, #16
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fd fd35 	bl	8001036 <_ZN2np10lock_guardD1Ev>

	if (!status)
 80035cc:	7dfb      	ldrb	r3, [r7, #23]
 80035ce:	f083 0301 	eor.w	r3, r3, #1
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <_ZN7LIS3MDL13read_registerEhPht+0x84>
	{
		USB_Log("LIS3MDL register read failed.\n", ERR);
 80035d8:	2102      	movs	r1, #2
 80035da:	4804      	ldr	r0, [pc, #16]	@ (80035ec <_ZN7LIS3MDL13read_registerEhPht+0x90>)
 80035dc:	f000 f84a 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 80035e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	08022284 	.word	0x08022284

080035f0 <_ZN7LIS3MDL14write_registerEhPht>:

bool LIS3MDL::write_register(uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08a      	sub	sp, #40	@ 0x28
 80035f4:	af04      	add	r7, sp, #16
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	607a      	str	r2, [r7, #4]
 80035fa:	461a      	mov	r2, r3
 80035fc:	460b      	mov	r3, r1
 80035fe:	72fb      	strb	r3, [r7, #11]
 8003600:	4613      	mov	r3, r2
 8003602:	813b      	strh	r3, [r7, #8]
	bool status = false;
 8003604:	2300      	movs	r3, #0
 8003606:	75fb      	strb	r3, [r7, #23]
	{
		np::lock_guard lock(i2c_mutex);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	f107 0310 	add.w	r3, r7, #16
 8003610:	4611      	mov	r1, r2
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd fcfa 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		status = (HAL_I2C_Mem_Write(&i2c_handle, (LIS3MDL_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, tx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	7a1b      	ldrb	r3, [r3, #8]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	b299      	uxth	r1, r3
 8003624:	7afb      	ldrb	r3, [r7, #11]
 8003626:	b29a      	uxth	r2, r3
 8003628:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800362c:	9302      	str	r3, [sp, #8]
 800362e:	893b      	ldrh	r3, [r7, #8]
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	2301      	movs	r3, #1
 8003638:	f002 fdb4 	bl	80061a4 <HAL_I2C_Mem_Write>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	bf0c      	ite	eq
 8003642:	2301      	moveq	r3, #1
 8003644:	2300      	movne	r3, #0
 8003646:	75fb      	strb	r3, [r7, #23]
	}
 8003648:	f107 0310 	add.w	r3, r7, #16
 800364c:	4618      	mov	r0, r3
 800364e:	f7fd fcf2 	bl	8001036 <_ZN2np10lock_guardD1Ev>

	if (!status)
 8003652:	7dfb      	ldrb	r3, [r7, #23]
 8003654:	f083 0301 	eor.w	r3, r3, #1
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <_ZN7LIS3MDL14write_registerEhPht+0x76>
	{
		USB_Log("LIS3MDL register write failed.\n", ERR);
 800365e:	2102      	movs	r1, #2
 8003660:	4803      	ldr	r0, [pc, #12]	@ (8003670 <_ZN7LIS3MDL14write_registerEhPht+0x80>)
 8003662:	f000 f807 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 8003666:	7dfb      	ldrb	r3, [r7, #23]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	080222a4 	.word	0x080222a4

08003674 <_Z7USB_LogPKc9Log_Level>:
#include "usbd_cdc_if.h"
#include "usbd_def.h"
#include <cstdio>

void USB_Log(const char* string, Log_Level level)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	ed2d 8b02 	vpush	{d8}
 800367a:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800367e:	af04      	add	r7, sp, #16
 8003680:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003684:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003688:	6018      	str	r0, [r3, #0]
 800368a:	460a      	mov	r2, r1
 800368c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003690:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003694:	701a      	strb	r2, [r3, #0]
	char str[512];
	float seconds = (float)osKernelGetTickCount() / (float)osKernelGetTickFreq();
 8003696:	f00b fb27 	bl	800ece8 <osKernelGetTickCount>
 800369a:	ee07 0a90 	vmov	s15, r0
 800369e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80036a2:	f00b fb36 	bl	800ed12 <osKernelGetTickFreq>
 80036a6:	ee07 0a90 	vmov	s15, r0
 80036aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036ae:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80036b2:	edc7 7a84 	vstr	s15, [r7, #528]	@ 0x210

	switch (level) {
 80036b6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80036ba:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b05      	cmp	r3, #5
 80036c2:	f200 8081 	bhi.w	80037c8 <_Z7USB_LogPKc9Log_Level+0x154>
 80036c6:	a201      	add	r2, pc, #4	@ (adr r2, 80036cc <_Z7USB_LogPKc9Log_Level+0x58>)
 80036c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036cc:	080036e5 	.word	0x080036e5
 80036d0:	08003711 	.word	0x08003711
 80036d4:	0800373d 	.word	0x0800373d
 80036d8:	08003769 	.word	0x08003769
 80036dc:	08003795 	.word	0x08003795
 80036e0:	080037af 	.word	0x080037af
		case INFO:
			snprintf(str, 512, "LOG %.2f INFO %s\n", seconds, string);
 80036e4:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80036e8:	f7fc ff56 	bl	8000598 <__aeabi_f2d>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	f107 0010 	add.w	r0, r7, #16
 80036f4:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 80036f8:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 80036fc:	6809      	ldr	r1, [r1, #0]
 80036fe:	9102      	str	r1, [sp, #8]
 8003700:	e9cd 2300 	strd	r2, r3, [sp]
 8003704:	4a58      	ldr	r2, [pc, #352]	@ (8003868 <_Z7USB_LogPKc9Log_Level+0x1f4>)
 8003706:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800370a:	f01c facd 	bl	801fca8 <sniprintf>
			break;
 800370e:	e071      	b.n	80037f4 <_Z7USB_LogPKc9Log_Level+0x180>
		case CRITICAL:
			snprintf(str, 512, "LOG %.2f CRIT %s\n", seconds, string);
 8003710:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8003714:	f7fc ff40 	bl	8000598 <__aeabi_f2d>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	f107 0010 	add.w	r0, r7, #16
 8003720:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8003724:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 8003728:	6809      	ldr	r1, [r1, #0]
 800372a:	9102      	str	r1, [sp, #8]
 800372c:	e9cd 2300 	strd	r2, r3, [sp]
 8003730:	4a4e      	ldr	r2, [pc, #312]	@ (800386c <_Z7USB_LogPKc9Log_Level+0x1f8>)
 8003732:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003736:	f01c fab7 	bl	801fca8 <sniprintf>
			break;
 800373a:	e05b      	b.n	80037f4 <_Z7USB_LogPKc9Log_Level+0x180>
		case ERR:
			snprintf(str, 512, "LOG %.2f ERR %s\n", seconds, string);
 800373c:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8003740:	f7fc ff2a 	bl	8000598 <__aeabi_f2d>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	f107 0010 	add.w	r0, r7, #16
 800374c:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8003750:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 8003754:	6809      	ldr	r1, [r1, #0]
 8003756:	9102      	str	r1, [sp, #8]
 8003758:	e9cd 2300 	strd	r2, r3, [sp]
 800375c:	4a44      	ldr	r2, [pc, #272]	@ (8003870 <_Z7USB_LogPKc9Log_Level+0x1fc>)
 800375e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003762:	f01c faa1 	bl	801fca8 <sniprintf>
			break;
 8003766:	e045      	b.n	80037f4 <_Z7USB_LogPKc9Log_Level+0x180>
		case SENSOR:
			snprintf(str, 512, "SENSOR %.2f %s\n", seconds, string);
 8003768:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 800376c:	f7fc ff14 	bl	8000598 <__aeabi_f2d>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	f107 0010 	add.w	r0, r7, #16
 8003778:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 800377c:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 8003780:	6809      	ldr	r1, [r1, #0]
 8003782:	9102      	str	r1, [sp, #8]
 8003784:	e9cd 2300 	strd	r2, r3, [sp]
 8003788:	4a3a      	ldr	r2, [pc, #232]	@ (8003874 <_Z7USB_LogPKc9Log_Level+0x200>)
 800378a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800378e:	f01c fa8b 	bl	801fca8 <sniprintf>
			break;
 8003792:	e02f      	b.n	80037f4 <_Z7USB_LogPKc9Log_Level+0x180>
		case STATE:
			snprintf(str, 512, "STATE %s\n", string);
 8003794:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003798:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800379c:	f107 0010 	add.w	r0, r7, #16
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a35      	ldr	r2, [pc, #212]	@ (8003878 <_Z7USB_LogPKc9Log_Level+0x204>)
 80037a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80037a8:	f01c fa7e 	bl	801fca8 <sniprintf>
			break;
 80037ac:	e022      	b.n	80037f4 <_Z7USB_LogPKc9Log_Level+0x180>
		case RAW:
			snprintf(str, 512, "%s\n", string);
 80037ae:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80037b2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80037b6:	f107 0010 	add.w	r0, r7, #16
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a2f      	ldr	r2, [pc, #188]	@ (800387c <_Z7USB_LogPKc9Log_Level+0x208>)
 80037be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80037c2:	f01c fa71 	bl	801fca8 <sniprintf>
			break;
 80037c6:	e015      	b.n	80037f4 <_Z7USB_LogPKc9Log_Level+0x180>
		default:
			snprintf(str, 512, "LOG %.2f ERR INVALID LOG FORMATTING: %s\n", seconds, string);
 80037c8:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80037cc:	f7fc fee4 	bl	8000598 <__aeabi_f2d>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	f107 0010 	add.w	r0, r7, #16
 80037d8:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 80037dc:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 80037e0:	6809      	ldr	r1, [r1, #0]
 80037e2:	9102      	str	r1, [sp, #8]
 80037e4:	e9cd 2300 	strd	r2, r3, [sp]
 80037e8:	4a25      	ldr	r2, [pc, #148]	@ (8003880 <_Z7USB_LogPKc9Log_Level+0x20c>)
 80037ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80037ee:	f01c fa5b 	bl	801fca8 <sniprintf>
			break;
 80037f2:	bf00      	nop
	}


	np::lock_guard lock(usbMutexHandle);
 80037f4:	f107 030c 	add.w	r3, r7, #12
 80037f8:	4922      	ldr	r1, [pc, #136]	@ (8003884 <_Z7USB_LogPKc9Log_Level+0x210>)
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fd fc06 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	uint8_t status = CDC_Transmit_FS((uint8_t*)str, strlen(str));
 8003800:	f107 0310 	add.w	r3, r7, #16
 8003804:	4618      	mov	r0, r3
 8003806:	f7fc fd5b 	bl	80002c0 <strlen>
 800380a:	4603      	mov	r3, r0
 800380c:	b29a      	uxth	r2, r3
 800380e:	f107 0310 	add.w	r3, r7, #16
 8003812:	4611      	mov	r1, r2
 8003814:	4618      	mov	r0, r3
 8003816:	f00f f90d 	bl	8012a34 <CDC_Transmit_FS>
 800381a:	4603      	mov	r3, r0
 800381c:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	while (status == USBD_BUSY)
 8003820:	e012      	b.n	8003848 <_Z7USB_LogPKc9Log_Level+0x1d4>
	{
		osDelay(1);
 8003822:	2001      	movs	r0, #1
 8003824:	f00b fbe1 	bl	800efea <osDelay>
		status = CDC_Transmit_FS((uint8_t*)str, strlen(str));
 8003828:	f107 0310 	add.w	r3, r7, #16
 800382c:	4618      	mov	r0, r3
 800382e:	f7fc fd47 	bl	80002c0 <strlen>
 8003832:	4603      	mov	r3, r0
 8003834:	b29a      	uxth	r2, r3
 8003836:	f107 0310 	add.w	r3, r7, #16
 800383a:	4611      	mov	r1, r2
 800383c:	4618      	mov	r0, r3
 800383e:	f00f f8f9 	bl	8012a34 <CDC_Transmit_FS>
 8003842:	4603      	mov	r3, r0
 8003844:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	while (status == USBD_BUSY)
 8003848:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800384c:	2b01      	cmp	r3, #1
 800384e:	d0e8      	beq.n	8003822 <_Z7USB_LogPKc9Log_Level+0x1ae>
	np::lock_guard lock(usbMutexHandle);
 8003850:	f107 030c 	add.w	r3, r7, #12
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd fbee 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	}
}
 800385a:	bf00      	nop
 800385c:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003860:	46bd      	mov	sp, r7
 8003862:	ecbd 8b02 	vpop	{d8}
 8003866:	bd80      	pop	{r7, pc}
 8003868:	080222c4 	.word	0x080222c4
 800386c:	080222d8 	.word	0x080222d8
 8003870:	080222ec 	.word	0x080222ec
 8003874:	08022300 	.word	0x08022300
 8003878:	08022310 	.word	0x08022310
 800387c:	0802231c 	.word	0x0802231c
 8003880:	08022320 	.word	0x08022320
 8003884:	200053e0 	.word	0x200053e0

08003888 <sensor_fusion_thread>:
 *
 * THREADS
 *
 */
void sensor_fusion_thread()
{
 8003888:	b590      	push	{r4, r7, lr}
 800388a:	ed2d 8b02 	vpush	{d8}
 800388e:	b087      	sub	sp, #28
 8003890:	af02      	add	r7, sp, #8
	osDelay(400);
 8003892:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8003896:	f00b fba8 	bl	800efea <osDelay>
	USB_Log("--- SENSOR FUSION THREAD STARTING ---", CRITICAL);
 800389a:	2101      	movs	r1, #1
 800389c:	486d      	ldr	r0, [pc, #436]	@ (8003a54 <sensor_fusion_thread+0x1cc>)
 800389e:	f7ff fee9 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	osDelay(10);
 80038a2:	200a      	movs	r0, #10
 80038a4:	f00b fba1 	bl	800efea <osDelay>

	// Initialize sensors
	bool imu_init = imu.init();
 80038a8:	486b      	ldr	r0, [pc, #428]	@ (8003a58 <sensor_fusion_thread+0x1d0>)
 80038aa:	f7fd fc3b 	bl	8001124 <_ZN6BMI0884initEv>
 80038ae:	4603      	mov	r3, r0
 80038b0:	72fb      	strb	r3, [r7, #11]
	bool baro_init = barometer.init();
 80038b2:	486a      	ldr	r0, [pc, #424]	@ (8003a5c <sensor_fusion_thread+0x1d4>)
 80038b4:	f7fe fe14 	bl	80024e0 <_ZN6BMP3884initEv>
 80038b8:	4603      	mov	r3, r0
 80038ba:	72bb      	strb	r3, [r7, #10]
	bool mag_init = magnetometer.init();
 80038bc:	4868      	ldr	r0, [pc, #416]	@ (8003a60 <sensor_fusion_thread+0x1d8>)
 80038be:	f7ff fc1f 	bl	8003100 <_ZN7LIS3MDL4initEv>
 80038c2:	4603      	mov	r3, r0
 80038c4:	727b      	strb	r3, [r7, #9]

	if (imu_init && baro_init && mag_init)
 80038c6:	7afb      	ldrb	r3, [r7, #11]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 8250 	beq.w	8003d6e <sensor_fusion_thread+0x4e6>
 80038ce:	7abb      	ldrb	r3, [r7, #10]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 824c 	beq.w	8003d6e <sensor_fusion_thread+0x4e6>
 80038d6:	7a7b      	ldrb	r3, [r7, #9]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8248 	beq.w	8003d6e <sensor_fusion_thread+0x4e6>
	{
		USB_Log("All sensors initialized successfully.", CRITICAL);
 80038de:	2101      	movs	r1, #1
 80038e0:	4860      	ldr	r0, [pc, #384]	@ (8003a64 <sensor_fusion_thread+0x1dc>)
 80038e2:	f7ff fec7 	bl	8003674 <_Z7USB_LogPKc9Log_Level>

		// Initialize MotionFX Sensor Fusion library
		initialize_sensor_fusion();
 80038e6:	f000 faed 	bl	8003ec4 <initialize_sensor_fusion>

		// Setup magnetometer calibration if necessary
		if (calibrate_mag)
 80038ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003a68 <sensor_fusion_thread+0x1e0>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <sensor_fusion_thread+0x80>
		{
			USB_Log("Please, slowly rotate the device in a figure 8 pattern in space to calibrate the magnetometer...", INFO);
 80038f2:	2100      	movs	r1, #0
 80038f4:	485d      	ldr	r0, [pc, #372]	@ (8003a6c <sensor_fusion_thread+0x1e4>)
 80038f6:	f7ff febd 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
			MotionFX_MagCal_init(mag_calib_period_ms, 1);
 80038fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003a70 <sensor_fusion_thread+0x1e8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2101      	movs	r1, #1
 8003900:	4618      	mov	r0, r3
 8003902:	f018 fea5 	bl	801c650 <MotionFX_MagCal_init>
 8003906:	e009      	b.n	800391c <sensor_fusion_thread+0x94>
		}
		else
		{
			mag_calibrated = true;
 8003908:	4b5a      	ldr	r3, [pc, #360]	@ (8003a74 <sensor_fusion_thread+0x1ec>)
 800390a:	2201      	movs	r2, #1
 800390c:	701a      	strb	r2, [r3, #0]
			USB_Log("Starting sensor fusion.", CRITICAL);
 800390e:	2101      	movs	r1, #1
 8003910:	4859      	ldr	r0, [pc, #356]	@ (8003a78 <sensor_fusion_thread+0x1f0>)
 8003912:	f7ff feaf 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
			osDelay(10);
 8003916:	200a      	movs	r0, #10
 8003918:	f00b fb67 	bl	800efea <osDelay>
		}

		// Initialize last_wake_time variable with the current time
		uint32_t last_wake_time = osKernelGetTickCount();
 800391c:	f00b f9e4 	bl	800ece8 <osKernelGetTickCount>
 8003920:	60f8      	str	r0, [r7, #12]

		while (1)
		{
			if (!mag_calibrated)
 8003922:	4b54      	ldr	r3, [pc, #336]	@ (8003a74 <sensor_fusion_thread+0x1ec>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	f083 0301 	eor.w	r3, r3, #1
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 80b5 	beq.w	8003a9c <sensor_fusion_thread+0x214>
			{
				/*
				 * Perform magnetometer calibration
				 */
				last_wake_time += mag_calib_period_ms;
 8003932:	4b4f      	ldr	r3, [pc, #316]	@ (8003a70 <sensor_fusion_thread+0x1e8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4413      	add	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
				osDelayUntil(last_wake_time);
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f00b fb6f 	bl	800f020 <osDelayUntil>

				// Get magnetometer data
				mag_intensities = magnetometer.get_axis_intensities();
 8003942:	4847      	ldr	r0, [pc, #284]	@ (8003a60 <sensor_fusion_thread+0x1d8>)
 8003944:	f7ff fde0 	bl	8003508 <_ZN7LIS3MDL20get_axis_intensitiesEv>
 8003948:	eef0 6a40 	vmov.f32	s13, s0
 800394c:	eeb0 7a60 	vmov.f32	s14, s1
 8003950:	eef0 7a41 	vmov.f32	s15, s2
 8003954:	4b49      	ldr	r3, [pc, #292]	@ (8003a7c <sensor_fusion_thread+0x1f4>)
 8003956:	edc3 6a00 	vstr	s13, [r3]
 800395a:	ed83 7a01 	vstr	s14, [r3, #4]
 800395e:	edc3 7a02 	vstr	s15, [r3, #8]
				mag_data_in.mag[0] = mag_intensities[0] * GAUSS_TO_uTESLA / 50;		// in uT/50
 8003962:	2100      	movs	r1, #0
 8003964:	4845      	ldr	r0, [pc, #276]	@ (8003a7c <sensor_fusion_thread+0x1f4>)
 8003966:	f7fe fc07 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 800396a:	4603      	mov	r3, r0
 800396c:	edd3 7a00 	vldr	s15, [r3]
 8003970:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8003a80 <sensor_fusion_thread+0x1f8>
 8003974:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003978:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8003a84 <sensor_fusion_thread+0x1fc>
 800397c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003980:	4b41      	ldr	r3, [pc, #260]	@ (8003a88 <sensor_fusion_thread+0x200>)
 8003982:	edc3 7a00 	vstr	s15, [r3]
				mag_data_in.mag[1] = mag_intensities[1] * GAUSS_TO_uTESLA / 50;
 8003986:	2101      	movs	r1, #1
 8003988:	483c      	ldr	r0, [pc, #240]	@ (8003a7c <sensor_fusion_thread+0x1f4>)
 800398a:	f7fe fbf5 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 800398e:	4603      	mov	r3, r0
 8003990:	edd3 7a00 	vldr	s15, [r3]
 8003994:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8003a80 <sensor_fusion_thread+0x1f8>
 8003998:	ee27 7a87 	vmul.f32	s14, s15, s14
 800399c:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8003a84 <sensor_fusion_thread+0x1fc>
 80039a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039a4:	4b38      	ldr	r3, [pc, #224]	@ (8003a88 <sensor_fusion_thread+0x200>)
 80039a6:	edc3 7a01 	vstr	s15, [r3, #4]
				mag_data_in.mag[2] = mag_intensities[2] * GAUSS_TO_uTESLA / 50;
 80039aa:	2102      	movs	r1, #2
 80039ac:	4833      	ldr	r0, [pc, #204]	@ (8003a7c <sensor_fusion_thread+0x1f4>)
 80039ae:	f7fe fbe3 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 80039b2:	4603      	mov	r3, r0
 80039b4:	edd3 7a00 	vldr	s15, [r3]
 80039b8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8003a80 <sensor_fusion_thread+0x1f8>
 80039bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039c0:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8003a84 <sensor_fusion_thread+0x1fc>
 80039c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039c8:	4b2f      	ldr	r3, [pc, #188]	@ (8003a88 <sensor_fusion_thread+0x200>)
 80039ca:	edc3 7a02 	vstr	s15, [r3, #8]

				// Apply timestamp to data
				mag_data_in.time_stamp = mag_calib_timestamp;	// in ms
 80039ce:	4b2f      	ldr	r3, [pc, #188]	@ (8003a8c <sensor_fusion_thread+0x204>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	4b2c      	ldr	r3, [pc, #176]	@ (8003a88 <sensor_fusion_thread+0x200>)
 80039d6:	60da      	str	r2, [r3, #12]
				mag_calib_timestamp += mag_calib_period_ms;
 80039d8:	4b2c      	ldr	r3, [pc, #176]	@ (8003a8c <sensor_fusion_thread+0x204>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	4b24      	ldr	r3, [pc, #144]	@ (8003a70 <sensor_fusion_thread+0x1e8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4413      	add	r3, r2
 80039e2:	4a2a      	ldr	r2, [pc, #168]	@ (8003a8c <sensor_fusion_thread+0x204>)
 80039e4:	6013      	str	r3, [r2, #0]

				// Run calibration
				MotionFX_MagCal_run(&mag_data_in);
 80039e6:	4828      	ldr	r0, [pc, #160]	@ (8003a88 <sensor_fusion_thread+0x200>)
 80039e8:	f018 fec2 	bl	801c770 <MotionFX_MagCal_run>
				MotionFX_MagCal_getParams(&mag_data_out);
 80039ec:	4828      	ldr	r0, [pc, #160]	@ (8003a90 <sensor_fusion_thread+0x208>)
 80039ee:	f019 f8f1 	bl	801cbd4 <MotionFX_MagCal_getParams>

				if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 80039f2:	4b27      	ldr	r3, [pc, #156]	@ (8003a90 <sensor_fusion_thread+0x208>)
 80039f4:	7b1b      	ldrb	r3, [r3, #12]
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d193      	bne.n	8003922 <sensor_fusion_thread+0x9a>
				{
					hard_iron[0] = mag_data_out.hi_bias[0];
 80039fa:	4b25      	ldr	r3, [pc, #148]	@ (8003a90 <sensor_fusion_thread+0x208>)
 80039fc:	681c      	ldr	r4, [r3, #0]
 80039fe:	2100      	movs	r1, #0
 8003a00:	4824      	ldr	r0, [pc, #144]	@ (8003a94 <sensor_fusion_thread+0x20c>)
 8003a02:	f7fe fbb9 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8003a06:	4603      	mov	r3, r0
 8003a08:	601c      	str	r4, [r3, #0]
					hard_iron[1] = mag_data_out.hi_bias[1];
 8003a0a:	4b21      	ldr	r3, [pc, #132]	@ (8003a90 <sensor_fusion_thread+0x208>)
 8003a0c:	685c      	ldr	r4, [r3, #4]
 8003a0e:	2101      	movs	r1, #1
 8003a10:	4820      	ldr	r0, [pc, #128]	@ (8003a94 <sensor_fusion_thread+0x20c>)
 8003a12:	f7fe fbb1 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8003a16:	4603      	mov	r3, r0
 8003a18:	601c      	str	r4, [r3, #0]
					hard_iron[2] = mag_data_out.hi_bias[2];
 8003a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003a90 <sensor_fusion_thread+0x208>)
 8003a1c:	689c      	ldr	r4, [r3, #8]
 8003a1e:	2102      	movs	r1, #2
 8003a20:	481c      	ldr	r0, [pc, #112]	@ (8003a94 <sensor_fusion_thread+0x20c>)
 8003a22:	f7fe fba9 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8003a26:	4603      	mov	r3, r0
 8003a28:	601c      	str	r4, [r3, #0]

					// Disable magnetometer calibration
					mag_calibrated = true;
 8003a2a:	4b12      	ldr	r3, [pc, #72]	@ (8003a74 <sensor_fusion_thread+0x1ec>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	701a      	strb	r2, [r3, #0]
					USB_Log("Magnetomer calibration complete.", INFO);
 8003a30:	2100      	movs	r1, #0
 8003a32:	4819      	ldr	r0, [pc, #100]	@ (8003a98 <sensor_fusion_thread+0x210>)
 8003a34:	f7ff fe1e 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
					MotionFX_MagCal_init(mag_calib_period_ms, 0);
 8003a38:	4b0d      	ldr	r3, [pc, #52]	@ (8003a70 <sensor_fusion_thread+0x1e8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f018 fe06 	bl	801c650 <MotionFX_MagCal_init>

					USB_Log("Starting sensor fusion.", CRITICAL);
 8003a44:	2101      	movs	r1, #1
 8003a46:	480c      	ldr	r0, [pc, #48]	@ (8003a78 <sensor_fusion_thread+0x1f0>)
 8003a48:	f7ff fe14 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
					osDelay(10);
 8003a4c:	200a      	movs	r0, #10
 8003a4e:	f00b facc 	bl	800efea <osDelay>
 8003a52:	e766      	b.n	8003922 <sensor_fusion_thread+0x9a>
 8003a54:	0802234c 	.word	0x0802234c
 8003a58:	20000be8 	.word	0x20000be8
 8003a5c:	20000c44 	.word	0x20000c44
 8003a60:	20000c9c 	.word	0x20000c9c
 8003a64:	08022374 	.word	0x08022374
 8003a68:	20000004 	.word	0x20000004
 8003a6c:	0802239c 	.word	0x0802239c
 8003a70:	20000008 	.word	0x20000008
 8003a74:	20000cf8 	.word	0x20000cf8
 8003a78:	08022400 	.word	0x08022400
 8003a7c:	20000cec 	.word	0x20000cec
 8003a80:	42c80000 	.word	0x42c80000
 8003a84:	42480000 	.word	0x42480000
 8003a88:	2000171c 	.word	0x2000171c
 8003a8c:	20000cfc 	.word	0x20000cfc
 8003a90:	2000172c 	.word	0x2000172c
 8003a94:	20000d00 	.word	0x20000d00
 8003a98:	08022418 	.word	0x08022418
			else
			{
				/*
				 * Run Sensor Fusion algorithm
				 */
				last_wake_time += fusion_period_ms;
 8003a9c:	4bbc      	ldr	r3, [pc, #752]	@ (8003d90 <sensor_fusion_thread+0x508>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
				osDelayUntil(last_wake_time);
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f00b faba 	bl	800f020 <osDelayUntil>

				// Get sensor data
				linear_accelerations = imu.get_linear_accelerations();
 8003aac:	48b9      	ldr	r0, [pc, #740]	@ (8003d94 <sensor_fusion_thread+0x50c>)
 8003aae:	f7fd ffe1 	bl	8001a74 <_ZN6BMI08824get_linear_accelerationsEv>
 8003ab2:	eef0 6a40 	vmov.f32	s13, s0
 8003ab6:	eeb0 7a60 	vmov.f32	s14, s1
 8003aba:	eef0 7a41 	vmov.f32	s15, s2
 8003abe:	4bb6      	ldr	r3, [pc, #728]	@ (8003d98 <sensor_fusion_thread+0x510>)
 8003ac0:	edc3 6a00 	vstr	s13, [r3]
 8003ac4:	ed83 7a01 	vstr	s14, [r3, #4]
 8003ac8:	edc3 7a02 	vstr	s15, [r3, #8]
				angular_velocities = imu.get_angular_velocities();
 8003acc:	48b1      	ldr	r0, [pc, #708]	@ (8003d94 <sensor_fusion_thread+0x50c>)
 8003ace:	f7fd fffb 	bl	8001ac8 <_ZN6BMI08822get_angular_velocitiesEv>
 8003ad2:	eef0 6a40 	vmov.f32	s13, s0
 8003ad6:	eeb0 7a60 	vmov.f32	s14, s1
 8003ada:	eef0 7a41 	vmov.f32	s15, s2
 8003ade:	4baf      	ldr	r3, [pc, #700]	@ (8003d9c <sensor_fusion_thread+0x514>)
 8003ae0:	edc3 6a00 	vstr	s13, [r3]
 8003ae4:	ed83 7a01 	vstr	s14, [r3, #4]
 8003ae8:	edc3 7a02 	vstr	s15, [r3, #8]
				mag_intensities = magnetometer.get_axis_intensities();
 8003aec:	48ac      	ldr	r0, [pc, #688]	@ (8003da0 <sensor_fusion_thread+0x518>)
 8003aee:	f7ff fd0b 	bl	8003508 <_ZN7LIS3MDL20get_axis_intensitiesEv>
 8003af2:	eef0 6a40 	vmov.f32	s13, s0
 8003af6:	eeb0 7a60 	vmov.f32	s14, s1
 8003afa:	eef0 7a41 	vmov.f32	s15, s2
 8003afe:	4ba9      	ldr	r3, [pc, #676]	@ (8003da4 <sensor_fusion_thread+0x51c>)
 8003b00:	edc3 6a00 	vstr	s13, [r3]
 8003b04:	ed83 7a01 	vstr	s14, [r3, #4]
 8003b08:	edc3 7a02 	vstr	s15, [r3, #8]

				// Compute delta time since last update
				current_time = ulHighFrequencyTimerCounts * COUNTS_TO_SECONDS;
 8003b0c:	4ba6      	ldr	r3, [pc, #664]	@ (8003da8 <sensor_fusion_thread+0x520>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	ee07 3a90 	vmov	s15, r3
 8003b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b18:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8003dac <sensor_fusion_thread+0x524>
 8003b1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b20:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8003db0 <sensor_fusion_thread+0x528>
 8003b24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b28:	4ba2      	ldr	r3, [pc, #648]	@ (8003db4 <sensor_fusion_thread+0x52c>)
 8003b2a:	edc3 7a00 	vstr	s15, [r3]
				dT = current_time - last_time;
 8003b2e:	4ba1      	ldr	r3, [pc, #644]	@ (8003db4 <sensor_fusion_thread+0x52c>)
 8003b30:	ed93 7a00 	vldr	s14, [r3]
 8003b34:	4ba0      	ldr	r3, [pc, #640]	@ (8003db8 <sensor_fusion_thread+0x530>)
 8003b36:	edd3 7a00 	vldr	s15, [r3]
 8003b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b3e:	4b9f      	ldr	r3, [pc, #636]	@ (8003dbc <sensor_fusion_thread+0x534>)
 8003b40:	edc3 7a00 	vstr	s15, [r3]
				last_time = current_time;
 8003b44:	4b9b      	ldr	r3, [pc, #620]	@ (8003db4 <sensor_fusion_thread+0x52c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a9b      	ldr	r2, [pc, #620]	@ (8003db8 <sensor_fusion_thread+0x530>)
 8003b4a:	6013      	str	r3, [r2, #0]

				// Apply sensor data to MotionFX input struct
				data_in.acc[0] = linear_accelerations[0] * MS2_TO_G;			// in g
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4892      	ldr	r0, [pc, #584]	@ (8003d98 <sensor_fusion_thread+0x510>)
 8003b50:	f7fe fb12 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8003b54:	4603      	mov	r3, r0
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fc fd1d 	bl	8000598 <__aeabi_f2d>
 8003b5e:	a388      	add	r3, pc, #544	@ (adr r3, 8003d80 <sensor_fusion_thread+0x4f8>)
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	f7fc fe9a 	bl	800089c <__aeabi_ddiv>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	4619      	mov	r1, r3
 8003b70:	f7fd f842 	bl	8000bf8 <__aeabi_d2f>
 8003b74:	4603      	mov	r3, r0
 8003b76:	4a92      	ldr	r2, [pc, #584]	@ (8003dc0 <sensor_fusion_thread+0x538>)
 8003b78:	60d3      	str	r3, [r2, #12]
				data_in.acc[1] = linear_accelerations[1] * MS2_TO_G;
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	4886      	ldr	r0, [pc, #536]	@ (8003d98 <sensor_fusion_thread+0x510>)
 8003b7e:	f7fe fafb 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8003b82:	4603      	mov	r3, r0
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fc fd06 	bl	8000598 <__aeabi_f2d>
 8003b8c:	a37c      	add	r3, pc, #496	@ (adr r3, 8003d80 <sensor_fusion_thread+0x4f8>)
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	f7fc fe83 	bl	800089c <__aeabi_ddiv>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	f7fd f82b 	bl	8000bf8 <__aeabi_d2f>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	4a86      	ldr	r2, [pc, #536]	@ (8003dc0 <sensor_fusion_thread+0x538>)
 8003ba6:	6113      	str	r3, [r2, #16]
				data_in.acc[2] = linear_accelerations[2] * MS2_TO_G;
 8003ba8:	2102      	movs	r1, #2
 8003baa:	487b      	ldr	r0, [pc, #492]	@ (8003d98 <sensor_fusion_thread+0x510>)
 8003bac:	f7fe fae4 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fc fcef 	bl	8000598 <__aeabi_f2d>
 8003bba:	a371      	add	r3, pc, #452	@ (adr r3, 8003d80 <sensor_fusion_thread+0x4f8>)
 8003bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc0:	f7fc fe6c 	bl	800089c <__aeabi_ddiv>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4610      	mov	r0, r2
 8003bca:	4619      	mov	r1, r3
 8003bcc:	f7fd f814 	bl	8000bf8 <__aeabi_d2f>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	4a7b      	ldr	r2, [pc, #492]	@ (8003dc0 <sensor_fusion_thread+0x538>)
 8003bd4:	6153      	str	r3, [r2, #20]
				data_in.gyro[0] = angular_velocities[0] * RADIANS_TO_DEGREES;	// in dps
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4870      	ldr	r0, [pc, #448]	@ (8003d9c <sensor_fusion_thread+0x514>)
 8003bda:	f7fe facd 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8003bde:	4603      	mov	r3, r0
 8003be0:	edd3 7a00 	vldr	s15, [r3]
 8003be4:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8003dc4 <sensor_fusion_thread+0x53c>
 8003be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bec:	ee17 0a90 	vmov	r0, s15
 8003bf0:	f7fc fcd2 	bl	8000598 <__aeabi_f2d>
 8003bf4:	a364      	add	r3, pc, #400	@ (adr r3, 8003d88 <sensor_fusion_thread+0x500>)
 8003bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfa:	f7fc fe4f 	bl	800089c <__aeabi_ddiv>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	4610      	mov	r0, r2
 8003c04:	4619      	mov	r1, r3
 8003c06:	f7fc fff7 	bl	8000bf8 <__aeabi_d2f>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	4a6c      	ldr	r2, [pc, #432]	@ (8003dc0 <sensor_fusion_thread+0x538>)
 8003c0e:	6193      	str	r3, [r2, #24]
				data_in.gyro[1] = angular_velocities[1] * RADIANS_TO_DEGREES;
 8003c10:	2101      	movs	r1, #1
 8003c12:	4862      	ldr	r0, [pc, #392]	@ (8003d9c <sensor_fusion_thread+0x514>)
 8003c14:	f7fe fab0 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	edd3 7a00 	vldr	s15, [r3]
 8003c1e:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8003dc4 <sensor_fusion_thread+0x53c>
 8003c22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c26:	ee17 0a90 	vmov	r0, s15
 8003c2a:	f7fc fcb5 	bl	8000598 <__aeabi_f2d>
 8003c2e:	a356      	add	r3, pc, #344	@ (adr r3, 8003d88 <sensor_fusion_thread+0x500>)
 8003c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c34:	f7fc fe32 	bl	800089c <__aeabi_ddiv>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	4619      	mov	r1, r3
 8003c40:	f7fc ffda 	bl	8000bf8 <__aeabi_d2f>
 8003c44:	4603      	mov	r3, r0
 8003c46:	4a5e      	ldr	r2, [pc, #376]	@ (8003dc0 <sensor_fusion_thread+0x538>)
 8003c48:	61d3      	str	r3, [r2, #28]
				data_in.gyro[2] = angular_velocities[2] * RADIANS_TO_DEGREES;
 8003c4a:	2102      	movs	r1, #2
 8003c4c:	4853      	ldr	r0, [pc, #332]	@ (8003d9c <sensor_fusion_thread+0x514>)
 8003c4e:	f7fe fa93 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8003c52:	4603      	mov	r3, r0
 8003c54:	edd3 7a00 	vldr	s15, [r3]
 8003c58:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8003dc4 <sensor_fusion_thread+0x53c>
 8003c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c60:	ee17 0a90 	vmov	r0, s15
 8003c64:	f7fc fc98 	bl	8000598 <__aeabi_f2d>
 8003c68:	a347      	add	r3, pc, #284	@ (adr r3, 8003d88 <sensor_fusion_thread+0x500>)
 8003c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6e:	f7fc fe15 	bl	800089c <__aeabi_ddiv>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f7fc ffbd 	bl	8000bf8 <__aeabi_d2f>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4a4f      	ldr	r2, [pc, #316]	@ (8003dc0 <sensor_fusion_thread+0x538>)
 8003c82:	6213      	str	r3, [r2, #32]
				data_in.mag[0] = mag_intensities[0] * GAUSS_TO_uTESLA / 50 - hard_iron[0];		// in uT/50
 8003c84:	2100      	movs	r1, #0
 8003c86:	4847      	ldr	r0, [pc, #284]	@ (8003da4 <sensor_fusion_thread+0x51c>)
 8003c88:	f7fe fa76 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	edd3 7a00 	vldr	s15, [r3]
 8003c92:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003dc8 <sensor_fusion_thread+0x540>
 8003c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c9a:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8003dcc <sensor_fusion_thread+0x544>
 8003c9e:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	484a      	ldr	r0, [pc, #296]	@ (8003dd0 <sensor_fusion_thread+0x548>)
 8003ca6:	f7fe fa67 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8003caa:	4603      	mov	r3, r0
 8003cac:	edd3 7a00 	vldr	s15, [r3]
 8003cb0:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003cb4:	4b42      	ldr	r3, [pc, #264]	@ (8003dc0 <sensor_fusion_thread+0x538>)
 8003cb6:	edc3 7a00 	vstr	s15, [r3]
				data_in.mag[1] = mag_intensities[1] * GAUSS_TO_uTESLA / 50 - hard_iron[1];
 8003cba:	2101      	movs	r1, #1
 8003cbc:	4839      	ldr	r0, [pc, #228]	@ (8003da4 <sensor_fusion_thread+0x51c>)
 8003cbe:	f7fe fa5b 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	edd3 7a00 	vldr	s15, [r3]
 8003cc8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003dc8 <sensor_fusion_thread+0x540>
 8003ccc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cd0:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8003dcc <sensor_fusion_thread+0x544>
 8003cd4:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8003cd8:	2101      	movs	r1, #1
 8003cda:	483d      	ldr	r0, [pc, #244]	@ (8003dd0 <sensor_fusion_thread+0x548>)
 8003cdc:	f7fe fa4c 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	edd3 7a00 	vldr	s15, [r3]
 8003ce6:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003cea:	4b35      	ldr	r3, [pc, #212]	@ (8003dc0 <sensor_fusion_thread+0x538>)
 8003cec:	edc3 7a01 	vstr	s15, [r3, #4]
				data_in.mag[2] = mag_intensities[2] * GAUSS_TO_uTESLA / 50 - hard_iron[2];
 8003cf0:	2102      	movs	r1, #2
 8003cf2:	482c      	ldr	r0, [pc, #176]	@ (8003da4 <sensor_fusion_thread+0x51c>)
 8003cf4:	f7fe fa40 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	edd3 7a00 	vldr	s15, [r3]
 8003cfe:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003dc8 <sensor_fusion_thread+0x540>
 8003d02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d06:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8003dcc <sensor_fusion_thread+0x544>
 8003d0a:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8003d0e:	2102      	movs	r1, #2
 8003d10:	482f      	ldr	r0, [pc, #188]	@ (8003dd0 <sensor_fusion_thread+0x548>)
 8003d12:	f7fe fa31 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8003d16:	4603      	mov	r3, r0
 8003d18:	edd3 7a00 	vldr	s15, [r3]
 8003d1c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003d20:	4b27      	ldr	r3, [pc, #156]	@ (8003dc0 <sensor_fusion_thread+0x538>)
 8003d22:	edc3 7a02 	vstr	s15, [r3, #8]

				// Kalman filter predict and update
				MotionFX_propagate(mfxstate, &data_out, &data_in, &dT);
 8003d26:	4b25      	ldr	r3, [pc, #148]	@ (8003dbc <sensor_fusion_thread+0x534>)
 8003d28:	4a25      	ldr	r2, [pc, #148]	@ (8003dc0 <sensor_fusion_thread+0x538>)
 8003d2a:	492a      	ldr	r1, [pc, #168]	@ (8003dd4 <sensor_fusion_thread+0x54c>)
 8003d2c:	482a      	ldr	r0, [pc, #168]	@ (8003dd8 <sensor_fusion_thread+0x550>)
 8003d2e:	f018 fb93 	bl	801c458 <MotionFX_propagate>
				MotionFX_update(mfxstate, &data_out, &data_in, &dT, NULL);
 8003d32:	2300      	movs	r3, #0
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	4b21      	ldr	r3, [pc, #132]	@ (8003dbc <sensor_fusion_thread+0x534>)
 8003d38:	4a21      	ldr	r2, [pc, #132]	@ (8003dc0 <sensor_fusion_thread+0x538>)
 8003d3a:	4926      	ldr	r1, [pc, #152]	@ (8003dd4 <sensor_fusion_thread+0x54c>)
 8003d3c:	4826      	ldr	r0, [pc, #152]	@ (8003dd8 <sensor_fusion_thread+0x550>)
 8003d3e:	f018 fb7b 	bl	801c438 <MotionFX_update>

				// TODO: add complimentary filter for accelerometer intergration and optical flow

				// Update drone state variable
				{
					np::lock_guard lock(stateMutexHandle);
 8003d42:	1d3b      	adds	r3, r7, #4
 8003d44:	4925      	ldr	r1, [pc, #148]	@ (8003ddc <sensor_fusion_thread+0x554>)
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fd f960 	bl	800100c <_ZN2np10lock_guardC1ERPv>
					drone_state.roll = data_out.rotation[2];
 8003d4c:	4b21      	ldr	r3, [pc, #132]	@ (8003dd4 <sensor_fusion_thread+0x54c>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	4a23      	ldr	r2, [pc, #140]	@ (8003de0 <sensor_fusion_thread+0x558>)
 8003d52:	6013      	str	r3, [r2, #0]
					drone_state.pitch = data_out.rotation[1];
 8003d54:	4b1f      	ldr	r3, [pc, #124]	@ (8003dd4 <sensor_fusion_thread+0x54c>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	4a21      	ldr	r2, [pc, #132]	@ (8003de0 <sensor_fusion_thread+0x558>)
 8003d5a:	6053      	str	r3, [r2, #4]
					drone_state.yaw = data_out.rotation[0];
 8003d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd4 <sensor_fusion_thread+0x54c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1f      	ldr	r2, [pc, #124]	@ (8003de0 <sensor_fusion_thread+0x558>)
 8003d62:	6093      	str	r3, [r2, #8]
				}
 8003d64:	1d3b      	adds	r3, r7, #4
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fd f965 	bl	8001036 <_ZN2np10lock_guardD1Ev>

				// TODO: send to control system queue!
			}
		}
 8003d6c:	e5d9      	b.n	8003922 <sensor_fusion_thread+0x9a>
	}
	vTaskDelete( NULL );
 8003d6e:	2000      	movs	r0, #0
 8003d70:	f00c fc50 	bl	8010614 <vTaskDelete>
}
 8003d74:	bf00      	nop
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	ecbd 8b02 	vpop	{d8}
 8003d7e:	bd90      	pop	{r4, r7, pc}
 8003d80:	3a92a305 	.word	0x3a92a305
 8003d84:	40239d01 	.word	0x40239d01
 8003d88:	54442d18 	.word	0x54442d18
 8003d8c:	400921fb 	.word	0x400921fb
 8003d90:	2000000c 	.word	0x2000000c
 8003d94:	20000be8 	.word	0x20000be8
 8003d98:	20000cd4 	.word	0x20000cd4
 8003d9c:	20000ce0 	.word	0x20000ce0
 8003da0:	20000c9c 	.word	0x20000c9c
 8003da4:	20000cec 	.word	0x20000cec
 8003da8:	200057c4 	.word	0x200057c4
 8003dac:	44d48000 	.word	0x44d48000
 8003db0:	4d221fe8 	.word	0x4d221fe8
 8003db4:	20001740 	.word	0x20001740
 8003db8:	2000173c 	.word	0x2000173c
 8003dbc:	20001744 	.word	0x20001744
 8003dc0:	200016bc 	.word	0x200016bc
 8003dc4:	43340000 	.word	0x43340000
 8003dc8:	42c80000 	.word	0x42c80000
 8003dcc:	42480000 	.word	0x42480000
 8003dd0:	20000d00 	.word	0x20000d00
 8003dd4:	200016e0 	.word	0x200016e0
 8003dd8:	20000d0c 	.word	0x20000d0c
 8003ddc:	200055d8 	.word	0x200055d8
 8003de0:	20001748 	.word	0x20001748

08003de4 <logging_thread>:

void logging_thread()
{
 8003de4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003de8:	b0a0      	sub	sp, #128	@ 0x80
 8003dea:	af06      	add	r7, sp, #24
	osDelay(400);
 8003dec:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8003df0:	f00b f8fb 	bl	800efea <osDelay>
	USB_Log("--- LOGGING THREAD STARTING ---", CRITICAL);
 8003df4:	2101      	movs	r1, #1
 8003df6:	482b      	ldr	r0, [pc, #172]	@ (8003ea4 <logging_thread+0xc0>)
 8003df8:	f7ff fc3c 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
	osDelay(10);
 8003dfc:	200a      	movs	r0, #10
 8003dfe:	f00b f8f4 	bl	800efea <osDelay>

	char state_log[100];
	while (1)
	{
		if (!mag_calibrated) { osDelay(500); continue; }
 8003e02:	4b29      	ldr	r3, [pc, #164]	@ (8003ea8 <logging_thread+0xc4>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	f083 0301 	eor.w	r3, r3, #1
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d004      	beq.n	8003e1a <logging_thread+0x36>
 8003e10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003e14:	f00b f8e9 	bl	800efea <osDelay>
 8003e18:	e042      	b.n	8003ea0 <logging_thread+0xbc>
		{
			np::lock_guard lock(stateMutexHandle);
 8003e1a:	463b      	mov	r3, r7
 8003e1c:	4923      	ldr	r1, [pc, #140]	@ (8003eac <logging_thread+0xc8>)
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fd f8f4 	bl	800100c <_ZN2np10lock_guardC1ERPv>
			snprintf(state_log, sizeof(state_log), "%.2f %.2f %.2f", drone_state.roll, drone_state.pitch, drone_state.yaw);
 8003e24:	4b22      	ldr	r3, [pc, #136]	@ (8003eb0 <logging_thread+0xcc>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fc fbb5 	bl	8000598 <__aeabi_f2d>
 8003e2e:	4604      	mov	r4, r0
 8003e30:	460d      	mov	r5, r1
 8003e32:	4b1f      	ldr	r3, [pc, #124]	@ (8003eb0 <logging_thread+0xcc>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fc fbae 	bl	8000598 <__aeabi_f2d>
 8003e3c:	4680      	mov	r8, r0
 8003e3e:	4689      	mov	r9, r1
 8003e40:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb0 <logging_thread+0xcc>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fc fba7 	bl	8000598 <__aeabi_f2d>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	1d38      	adds	r0, r7, #4
 8003e50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e54:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003e58:	e9cd 4500 	strd	r4, r5, [sp]
 8003e5c:	4a15      	ldr	r2, [pc, #84]	@ (8003eb4 <logging_thread+0xd0>)
 8003e5e:	2164      	movs	r1, #100	@ 0x64
 8003e60:	f01b ff22 	bl	801fca8 <sniprintf>
		}
 8003e64:	463b      	mov	r3, r7
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fd f8e5 	bl	8001036 <_ZN2np10lock_guardD1Ev>
		USB_Log(state_log, STATE);		// Log drone state data
 8003e6c:	1d3b      	adds	r3, r7, #4
 8003e6e:	2104      	movs	r1, #4
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fbff 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
		osDelay(10);
 8003e76:	200a      	movs	r0, #10
 8003e78:	f00b f8b7 	bl	800efea <osDelay>
		imu.log_data_to_gcs();			// Log IMU data
 8003e7c:	480e      	ldr	r0, [pc, #56]	@ (8003eb8 <logging_thread+0xd4>)
 8003e7e:	f7fd fd5f 	bl	8001940 <_ZN6BMI08815log_data_to_gcsEv>
		osDelay(10);
 8003e82:	200a      	movs	r0, #10
 8003e84:	f00b f8b1 	bl	800efea <osDelay>
		barometer.log_data_to_gcs();	// Log barometer data
 8003e88:	480c      	ldr	r0, [pc, #48]	@ (8003ebc <logging_thread+0xd8>)
 8003e8a:	f7fe fd8d 	bl	80029a8 <_ZN6BMP38815log_data_to_gcsEv>
		osDelay(10);
 8003e8e:	200a      	movs	r0, #10
 8003e90:	f00b f8ab 	bl	800efea <osDelay>
		magnetometer.log_data_to_gcs();	// Log magnetometer data
 8003e94:	480a      	ldr	r0, [pc, #40]	@ (8003ec0 <logging_thread+0xdc>)
 8003e96:	f7ff fae5 	bl	8003464 <_ZN7LIS3MDL15log_data_to_gcsEv>

		osDelay(50);					// Further throttle loop
 8003e9a:	2032      	movs	r0, #50	@ 0x32
 8003e9c:	f00b f8a5 	bl	800efea <osDelay>
	}
 8003ea0:	e7af      	b.n	8003e02 <logging_thread+0x1e>
 8003ea2:	bf00      	nop
 8003ea4:	0802243c 	.word	0x0802243c
 8003ea8:	20000cf8 	.word	0x20000cf8
 8003eac:	200055d8 	.word	0x200055d8
 8003eb0:	20001748 	.word	0x20001748
 8003eb4:	0802245c 	.word	0x0802245c
 8003eb8:	20000be8 	.word	0x20000be8
 8003ebc:	20000c44 	.word	0x20000c44
 8003ec0:	20000c9c 	.word	0x20000c9c

08003ec4 <initialize_sensor_fusion>:
 *
 * FUNCTIONS
 *
 */
void initialize_sensor_fusion()
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
	// Check MotionFX state size
	if (STATE_SIZE < MotionFX_GetStateSize())
 8003ec8:	f018 f930 	bl	801c12c <MotionFX_GetStateSize>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f5b3 6f18 	cmp.w	r3, #2432	@ 0x980
 8003ed2:	bf8c      	ite	hi
 8003ed4:	2301      	movhi	r3, #1
 8003ed6:	2300      	movls	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d009      	beq.n	8003ef2 <initialize_sensor_fusion+0x2e>
	{
		USB_Log("MotionFX algorithm state not enough memory", ERR);
 8003ede:	2102      	movs	r1, #2
 8003ee0:	4828      	ldr	r0, [pc, #160]	@ (8003f84 <initialize_sensor_fusion+0xc0>)
 8003ee2:	f7ff fbc7 	bl	8003674 <_Z7USB_LogPKc9Log_Level>
		osDelay(500);
 8003ee6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003eea:	f00b f87e 	bl	800efea <osDelay>
		Error_Handler();
 8003eee:	f000 ffd9 	bl	8004ea4 <Error_Handler>
	}
	MotionFX_initialize((MFXState_t *)mfxstate);
 8003ef2:	4825      	ldr	r0, [pc, #148]	@ (8003f88 <initialize_sensor_fusion+0xc4>)
 8003ef4:	f018 f91e 	bl	801c134 <MotionFX_initialize>

	// Turn library knobs...
	MotionFX_getKnobs(mfxstate, &iKnobs);
 8003ef8:	4924      	ldr	r1, [pc, #144]	@ (8003f8c <initialize_sensor_fusion+0xc8>)
 8003efa:	4823      	ldr	r0, [pc, #140]	@ (8003f88 <initialize_sensor_fusion+0xc4>)
 8003efc:	f018 fa1e 	bl	801c33c <MotionFX_getKnobs>

	iKnobs.acc_orientation[0] = 'w';	// positive orientation to the
 8003f00:	4b22      	ldr	r3, [pc, #136]	@ (8003f8c <initialize_sensor_fusion+0xc8>)
 8003f02:	2277      	movs	r2, #119	@ 0x77
 8003f04:	775a      	strb	r2, [r3, #29]
	iKnobs.acc_orientation[1] = 's';	// 	   board's reference frame
 8003f06:	4b21      	ldr	r3, [pc, #132]	@ (8003f8c <initialize_sensor_fusion+0xc8>)
 8003f08:	2273      	movs	r2, #115	@ 0x73
 8003f0a:	779a      	strb	r2, [r3, #30]
	iKnobs.acc_orientation[2] = 'u';
 8003f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8003f8c <initialize_sensor_fusion+0xc8>)
 8003f0e:	2275      	movs	r2, #117	@ 0x75
 8003f10:	77da      	strb	r2, [r3, #31]
	iKnobs.gyro_orientation[0] = 'w';
 8003f12:	4b1e      	ldr	r3, [pc, #120]	@ (8003f8c <initialize_sensor_fusion+0xc8>)
 8003f14:	2277      	movs	r2, #119	@ 0x77
 8003f16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	iKnobs.gyro_orientation[1] = 's';
 8003f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8003f8c <initialize_sensor_fusion+0xc8>)
 8003f1c:	2273      	movs	r2, #115	@ 0x73
 8003f1e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	iKnobs.gyro_orientation[2] = 'u';
 8003f22:	4b1a      	ldr	r3, [pc, #104]	@ (8003f8c <initialize_sensor_fusion+0xc8>)
 8003f24:	2275      	movs	r2, #117	@ 0x75
 8003f26:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	iKnobs.mag_orientation[0] = 'n';
 8003f2a:	4b18      	ldr	r3, [pc, #96]	@ (8003f8c <initialize_sensor_fusion+0xc8>)
 8003f2c:	226e      	movs	r2, #110	@ 0x6e
 8003f2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	iKnobs.mag_orientation[1] = 'w';
 8003f32:	4b16      	ldr	r3, [pc, #88]	@ (8003f8c <initialize_sensor_fusion+0xc8>)
 8003f34:	2277      	movs	r2, #119	@ 0x77
 8003f36:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	iKnobs.mag_orientation[2] = 'u';
 8003f3a:	4b14      	ldr	r3, [pc, #80]	@ (8003f8c <initialize_sensor_fusion+0xc8>)
 8003f3c:	2275      	movs	r2, #117	@ 0x75
 8003f3e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

	iKnobs.gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 8003f42:	4b12      	ldr	r3, [pc, #72]	@ (8003f8c <initialize_sensor_fusion+0xc8>)
 8003f44:	4a12      	ldr	r2, [pc, #72]	@ (8003f90 <initialize_sensor_fusion+0xcc>)
 8003f46:	615a      	str	r2, [r3, #20]
	iKnobs.gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 8003f48:	4b10      	ldr	r3, [pc, #64]	@ (8003f8c <initialize_sensor_fusion+0xc8>)
 8003f4a:	4a12      	ldr	r2, [pc, #72]	@ (8003f94 <initialize_sensor_fusion+0xd0>)
 8003f4c:	619a      	str	r2, [r3, #24]
	iKnobs.gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 8003f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f8c <initialize_sensor_fusion+0xc8>)
 8003f50:	4a11      	ldr	r2, [pc, #68]	@ (8003f98 <initialize_sensor_fusion+0xd4>)
 8003f52:	611a      	str	r2, [r3, #16]

	iKnobs.output_type = MFX_ENGINE_OUTPUT_NED;	// NED output orientation
 8003f54:	4b0d      	ldr	r3, [pc, #52]	@ (8003f8c <initialize_sensor_fusion+0xc8>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	iKnobs.LMode = 1;							// static learning
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f8c <initialize_sensor_fusion+0xc8>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	731a      	strb	r2, [r3, #12]
	iKnobs.modx = 1;							// decimation of MotionFX_update call frequency
 8003f62:	4b0a      	ldr	r3, [pc, #40]	@ (8003f8c <initialize_sensor_fusion+0xc8>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	771a      	strb	r2, [r3, #28]

	MotionFX_setKnobs(mfxstate, &iKnobs);
 8003f68:	4908      	ldr	r1, [pc, #32]	@ (8003f8c <initialize_sensor_fusion+0xc8>)
 8003f6a:	4807      	ldr	r0, [pc, #28]	@ (8003f88 <initialize_sensor_fusion+0xc4>)
 8003f6c:	f018 f99a 	bl	801c2a4 <MotionFX_setKnobs>

	// Enable 9-axis sensor fusion
	MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8003f70:	2100      	movs	r1, #0
 8003f72:	4805      	ldr	r0, [pc, #20]	@ (8003f88 <initialize_sensor_fusion+0xc4>)
 8003f74:	f018 fa20 	bl	801c3b8 <MotionFX_enable_6X>
	MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 8003f78:	2101      	movs	r1, #1
 8003f7a:	4803      	ldr	r0, [pc, #12]	@ (8003f88 <initialize_sensor_fusion+0xc4>)
 8003f7c:	f018 fa3c 	bl	801c3f8 <MotionFX_enable_9X>
}
 8003f80:	bf00      	nop
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	0802246c 	.word	0x0802246c
 8003f88:	20000d0c 	.word	0x20000d0c
 8003f8c:	2000168c 	.word	0x2000168c
 8003f90:	3ac88a48 	.word	0x3ac88a48
 8003f94:	3b83126f 	.word	0x3b83126f
 8003f98:	3b449ba6 	.word	0x3b449ba6

08003f9c <service_BMI088_Accel>:

void service_BMI088_Accel(){ imu.service_irq_accelerometer(); }
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	4802      	ldr	r0, [pc, #8]	@ (8003fac <service_BMI088_Accel+0x10>)
 8003fa2:	f7fd fb09 	bl	80015b8 <_ZN6BMI08825service_irq_accelerometerEv>
 8003fa6:	bf00      	nop
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000be8 	.word	0x20000be8

08003fb0 <service_BMI088_Gyro>:
void service_BMI088_Gyro() { imu.service_irq_gyroscope(); }
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	4802      	ldr	r0, [pc, #8]	@ (8003fc0 <service_BMI088_Gyro+0x10>)
 8003fb6:	f7fd fbbd 	bl	8001734 <_ZN6BMI08821service_irq_gyroscopeEv>
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000be8 	.word	0x20000be8

08003fc4 <service_BMP388>:
void service_BMP388() { barometer.service_irq(); }
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	4802      	ldr	r0, [pc, #8]	@ (8003fd4 <service_BMP388+0x10>)
 8003fca:	f7fe fb5f 	bl	800268c <_ZN6BMP38811service_irqEv>
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000c44 	.word	0x20000c44

08003fd8 <service_LIS3MDL>:
void service_LIS3MDL() {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
	magnetometer.service_irq();
 8003fdc:	4803      	ldr	r0, [pc, #12]	@ (8003fec <service_LIS3MDL+0x14>)
 8003fde:	f7ff f97d 	bl	80032dc <_ZN7LIS3MDL11service_irqEv>
	imu.service_irq_temperature();	// Magnetometer low output data rate, so include IMU temperature read here
 8003fe2:	4803      	ldr	r0, [pc, #12]	@ (8003ff0 <service_LIS3MDL+0x18>)
 8003fe4:	f7fd fc5a 	bl	800189c <_ZN6BMI08823service_irq_temperatureEv>
}
 8003fe8:	bf00      	nop
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20000c9c 	.word	0x20000c9c
 8003ff0:	20000be8 	.word	0x20000be8

08003ff4 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev>:
    struct array
 8003ff4:	b590      	push	{r4, r7, lr}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev+0x24>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f103 040c 	add.w	r4, r3, #12
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	429c      	cmp	r4, r3
 800400c:	d004      	beq.n	8004018 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev+0x24>
 800400e:	3c04      	subs	r4, #4
 8004010:	4620      	mov	r0, r4
 8004012:	f7fe f823 	bl	800205c <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev>
 8004016:	e7f7      	b.n	8004008 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev+0x14>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4618      	mov	r0, r3
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	bd90      	pop	{r4, r7, pc}

08004022 <_ZN7LIS3MDLD1Ev>:
	const float y_offset = -0.2715;
	const float z_offset = -0.0920;
};


class LIS3MDL
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	332c      	adds	r3, #44	@ 0x2c
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff ffe0 	bl	8003ff4 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <_ZN6BMI088D1Ev>:
#define REG_GYRO_FIFO_CONFIG_0	0x3D
#define	REG_GYRO_FIFO_CONFIG_1  0x3E
#define	REG_GYRO_FIFO_DATA		0x3F


class BMI088
 800403e:	b580      	push	{r7, lr}
 8004040:	b082      	sub	sp, #8
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3350      	adds	r3, #80	@ 0x50
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff ffd2 	bl	8003ff4 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3344      	adds	r3, #68	@ 0x44
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ffcd 	bl	8003ff4 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4618      	mov	r0, r3
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <_Z41__static_initialization_and_destruction_0ii>:
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af06      	add	r7, sp, #24
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d122      	bne.n	80040ba <_Z41__static_initialization_and_destruction_0ii+0x56>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800407a:	4293      	cmp	r3, r2
 800407c:	d11d      	bne.n	80040ba <_Z41__static_initialization_and_destruction_0ii+0x56>
		GYRO_CS_Pin, accelDataMutexHandle, gyroDataMutexHandle);
 800407e:	4b18      	ldr	r3, [pc, #96]	@ (80040e0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004080:	9304      	str	r3, [sp, #16]
 8004082:	4b18      	ldr	r3, [pc, #96]	@ (80040e4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004084:	9303      	str	r3, [sp, #12]
 8004086:	2301      	movs	r3, #1
 8004088:	9302      	str	r3, [sp, #8]
 800408a:	2310      	movs	r3, #16
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004098:	4a13      	ldr	r2, [pc, #76]	@ (80040e8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800409a:	4914      	ldr	r1, [pc, #80]	@ (80040ec <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800409c:	4814      	ldr	r0, [pc, #80]	@ (80040f0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800409e:	f7fc ffd9 	bl	8001054 <_ZN6BMI088C1ER19__SPI_HandleTypeDefRPvP12GPIO_TypeDefS5_ttS3_S3_>
BMP388 barometer(hi2c2, i2c2MutexHandle, baroDataMutexHandle);
 80040a2:	4b14      	ldr	r3, [pc, #80]	@ (80040f4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80040a4:	4a14      	ldr	r2, [pc, #80]	@ (80040f8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80040a6:	4915      	ldr	r1, [pc, #84]	@ (80040fc <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80040a8:	4815      	ldr	r0, [pc, #84]	@ (8004100 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80040aa:	f7fe f9fe 	bl	80024aa <_ZN6BMP388C1ER19__I2C_HandleTypeDefRPvS3_>
LIS3MDL magnetometer(hi2c2, i2c2MutexHandle, magDataMutexHandle);
 80040ae:	4b15      	ldr	r3, [pc, #84]	@ (8004104 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80040b0:	4a11      	ldr	r2, [pc, #68]	@ (80040f8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80040b2:	4912      	ldr	r1, [pc, #72]	@ (80040fc <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80040b4:	4814      	ldr	r0, [pc, #80]	@ (8004108 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80040b6:	f7fe fff5 	bl	80030a4 <_ZN7LIS3MDLC1ER19__I2C_HandleTypeDefRPvS3_>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d105      	bne.n	80040d6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80040ca:	480f      	ldr	r0, [pc, #60]	@ (8004108 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80040cc:	f7ff ffa9 	bl	8004022 <_ZN7LIS3MDLD1Ev>
BMI088 imu(hspi1, spi1MutexHandle, ACCEL_CS_GPIO_Port, GYRO_CS_GPIO_Port, ACCEL_CS_Pin,
 80040d0:	4807      	ldr	r0, [pc, #28]	@ (80040f0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80040d2:	f7ff ffb4 	bl	800403e <_ZN6BMI088D1Ev>
}
 80040d6:	bf00      	nop
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	200054dc 	.word	0x200054dc
 80040e4:	20005488 	.word	0x20005488
 80040e8:	2000538c 	.word	0x2000538c
 80040ec:	200057c8 	.word	0x200057c8
 80040f0:	20000be8 	.word	0x20000be8
 80040f4:	20005530 	.word	0x20005530
 80040f8:	20005434 	.word	0x20005434
 80040fc:	20005770 	.word	0x20005770
 8004100:	20000c44 	.word	0x20000c44
 8004104:	20005584 	.word	0x20005584
 8004108:	20000c9c 	.word	0x20000c9c

0800410c <_GLOBAL__sub_I_imu>:
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
 8004110:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004114:	2001      	movs	r0, #1
 8004116:	f7ff ffa5 	bl	8004064 <_Z41__static_initialization_and_destruction_0ii>
 800411a:	bd80      	pop	{r7, pc}

0800411c <_GLOBAL__sub_D_imu>:
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
 8004120:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004124:	2000      	movs	r0, #0
 8004126:	f7ff ff9d 	bl	8004064 <_Z41__static_initialization_and_destruction_0ii>
 800412a:	bd80      	pop	{r7, pc}
 800412c:	0000      	movs	r0, r0
	...

08004130 <_ZN9IIRFilterC1Eff>:
 */
#include "Utility/IIRFilter.hpp"
#include <cmath>


IIRFilter::IIRFilter(float cutoff_frequency, float sampling_frequency)
 8004130:	b590      	push	{r4, r7, lr}
 8004132:	ed2d 8b02 	vpush	{d8}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004140:	edc7 0a01 	vstr	s1, [r7, #4]
	: cutoff_frequency{cutoff_frequency},
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	601a      	str	r2, [r3, #0]
	  sampling_frequency{sampling_frequency},
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	605a      	str	r2, [r3, #4]
	  K{tanf(M_PI * (cutoff_frequency / sampling_frequency))}
 8004150:	ed97 7a02 	vldr	s14, [r7, #8]
 8004154:	edd7 7a01 	vldr	s15, [r7, #4]
 8004158:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800415c:	ee16 0a90 	vmov	r0, s13
 8004160:	f7fc fa1a 	bl	8000598 <__aeabi_f2d>
 8004164:	a375      	add	r3, pc, #468	@ (adr r3, 800433c <_ZN9IIRFilterC1Eff+0x20c>)
 8004166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416a:	f7fc fa6d 	bl	8000648 <__aeabi_dmul>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4610      	mov	r0, r2
 8004174:	4619      	mov	r1, r3
 8004176:	f7fc fd3f 	bl	8000bf8 <__aeabi_d2f>
 800417a:	4603      	mov	r3, r0
 800417c:	ee00 3a10 	vmov	s0, r3
 8004180:	f018 fefe 	bl	801cf80 <tanf>
 8004184:	eef0 7a40 	vmov.f32	s15, s0
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	edc3 7a02 	vstr	s15, [r3, #8]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4a69      	ldr	r2, [pc, #420]	@ (8004338 <_ZN9IIRFilterC1Eff+0x208>)
 8004192:	60da      	str	r2, [r3, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	3310      	adds	r3, #16
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	609a      	str	r2, [r3, #8]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	331c      	adds	r3, #28
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3324      	adds	r3, #36	@ 0x24
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	605a      	str	r2, [r3, #4]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	332c      	adds	r3, #44	@ 0x2c
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	605a      	str	r2, [r3, #4]
{
	a[0] = (K * K) / (K * K + K / Q + 1);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80041ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80041da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	edd3 5a02 	vldr	s11, [r3, #8]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	ed93 6a03 	vldr	s12, [r3, #12]
 80041ea:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80041ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041fa:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3310      	adds	r3, #16
 8004202:	2100      	movs	r1, #0
 8004204:	4618      	mov	r0, r3
 8004206:	f7fd ffb7 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 800420a:	4603      	mov	r3, r0
 800420c:	ed83 8a00 	vstr	s16, [r3]
	a[1] = 2 * a[0];
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	3310      	adds	r3, #16
 8004214:	2100      	movs	r1, #0
 8004216:	4618      	mov	r0, r3
 8004218:	f7fd ffae 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 800421c:	4603      	mov	r3, r0
 800421e:	edd3 7a00 	vldr	s15, [r3]
 8004222:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3310      	adds	r3, #16
 800422a:	2101      	movs	r1, #1
 800422c:	4618      	mov	r0, r3
 800422e:	f7fd ffa3 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8004232:	4603      	mov	r3, r0
 8004234:	ed83 8a00 	vstr	s16, [r3]
	a[2] = a[0];
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3310      	adds	r3, #16
 800423c:	2100      	movs	r1, #0
 800423e:	4618      	mov	r0, r3
 8004240:	f7fd ff9a 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8004244:	4603      	mov	r3, r0
 8004246:	681c      	ldr	r4, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	3310      	adds	r3, #16
 800424c:	2102      	movs	r1, #2
 800424e:	4618      	mov	r0, r3
 8004250:	f7fd ff92 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8004254:	4603      	mov	r3, r0
 8004256:	601c      	str	r4, [r3, #0]

	b[0] = (2 * (K * K - 1)) / (K * K + K / Q + 1);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	ed93 7a02 	vldr	s14, [r3, #8]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	edd3 7a02 	vldr	s15, [r3, #8]
 8004264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004268:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800426c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004270:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	edd3 6a02 	vldr	s13, [r3, #8]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004280:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	edd3 5a02 	vldr	s11, [r3, #8]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	ed93 6a03 	vldr	s12, [r3, #12]
 8004290:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004294:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004298:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800429c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042a0:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	331c      	adds	r3, #28
 80042a8:	2100      	movs	r1, #0
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 f8fd 	bl	80044aa <_ZNSt5arrayIfLj2EEixEj>
 80042b0:	4603      	mov	r3, r0
 80042b2:	ed83 8a00 	vstr	s16, [r3]
	b[1] = (K * K - K / Q + 1) / (K * K + K / Q + 1);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	edd3 7a02 	vldr	s15, [r3, #8]
 80042c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	ed93 6a02 	vldr	s12, [r3, #8]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	edd3 6a03 	vldr	s13, [r3, #12]
 80042d2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80042d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80042ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	edd3 5a02 	vldr	s11, [r3, #8]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	ed93 6a03 	vldr	s12, [r3, #12]
 80042fe:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800430a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800430e:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	331c      	adds	r3, #28
 8004316:	2101      	movs	r1, #1
 8004318:	4618      	mov	r0, r3
 800431a:	f000 f8c6 	bl	80044aa <_ZNSt5arrayIfLj2EEixEj>
 800431e:	4603      	mov	r3, r0
 8004320:	ed83 8a00 	vstr	s16, [r3]
}
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	ecbd 8b02 	vpop	{d8}
 8004330:	bd90      	pop	{r4, r7, pc}
 8004332:	bf00      	nop
 8004334:	f3af 8000 	nop.w
 8004338:	3f350481 	.word	0x3f350481
 800433c:	54442d18 	.word	0x54442d18
 8004340:	400921fb 	.word	0x400921fb

08004344 <_ZN9IIRFilter6updateEf>:

float IIRFilter::update(float input)
{
 8004344:	b590      	push	{r4, r7, lr}
 8004346:	ed2d 8b02 	vpush	{d8}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	ed87 0a00 	vstr	s0, [r7]
	float sum1 = a[0] * input + a[1] * prev_input[0] + a[2] * prev_input[1];
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3310      	adds	r3, #16
 8004358:	2100      	movs	r1, #0
 800435a:	4618      	mov	r0, r3
 800435c:	f7fd ff0c 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 8004360:	4603      	mov	r3, r0
 8004362:	ed93 7a00 	vldr	s14, [r3]
 8004366:	edd7 7a00 	vldr	s15, [r7]
 800436a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3310      	adds	r3, #16
 8004372:	2101      	movs	r1, #1
 8004374:	4618      	mov	r0, r3
 8004376:	f7fd feff 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 800437a:	4603      	mov	r3, r0
 800437c:	edd3 8a00 	vldr	s17, [r3]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3324      	adds	r3, #36	@ 0x24
 8004384:	2100      	movs	r1, #0
 8004386:	4618      	mov	r0, r3
 8004388:	f000 f88f 	bl	80044aa <_ZNSt5arrayIfLj2EEixEj>
 800438c:	4603      	mov	r3, r0
 800438e:	edd3 7a00 	vldr	s15, [r3]
 8004392:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004396:	ee38 8a27 	vadd.f32	s16, s16, s15
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3310      	adds	r3, #16
 800439e:	2102      	movs	r1, #2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fd fee9 	bl	8002178 <_ZNSt5arrayIfLj3EEixEj>
 80043a6:	4603      	mov	r3, r0
 80043a8:	edd3 8a00 	vldr	s17, [r3]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3324      	adds	r3, #36	@ 0x24
 80043b0:	2101      	movs	r1, #1
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 f879 	bl	80044aa <_ZNSt5arrayIfLj2EEixEj>
 80043b8:	4603      	mov	r3, r0
 80043ba:	edd3 7a00 	vldr	s15, [r3]
 80043be:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80043c2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80043c6:	edc7 7a05 	vstr	s15, [r7, #20]
	float sum2 = b[0] * prev_output[0] + b[1] * prev_output[1];
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	331c      	adds	r3, #28
 80043ce:	2100      	movs	r1, #0
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 f86a 	bl	80044aa <_ZNSt5arrayIfLj2EEixEj>
 80043d6:	4603      	mov	r3, r0
 80043d8:	ed93 8a00 	vldr	s16, [r3]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	332c      	adds	r3, #44	@ 0x2c
 80043e0:	2100      	movs	r1, #0
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 f861 	bl	80044aa <_ZNSt5arrayIfLj2EEixEj>
 80043e8:	4603      	mov	r3, r0
 80043ea:	edd3 7a00 	vldr	s15, [r3]
 80043ee:	ee28 8a27 	vmul.f32	s16, s16, s15
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	331c      	adds	r3, #28
 80043f6:	2101      	movs	r1, #1
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 f856 	bl	80044aa <_ZNSt5arrayIfLj2EEixEj>
 80043fe:	4603      	mov	r3, r0
 8004400:	edd3 8a00 	vldr	s17, [r3]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	332c      	adds	r3, #44	@ 0x2c
 8004408:	2101      	movs	r1, #1
 800440a:	4618      	mov	r0, r3
 800440c:	f000 f84d 	bl	80044aa <_ZNSt5arrayIfLj2EEixEj>
 8004410:	4603      	mov	r3, r0
 8004412:	edd3 7a00 	vldr	s15, [r3]
 8004416:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800441a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800441e:	edc7 7a04 	vstr	s15, [r7, #16]
	float output = sum1 - sum2;
 8004422:	ed97 7a05 	vldr	s14, [r7, #20]
 8004426:	edd7 7a04 	vldr	s15, [r7, #16]
 800442a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800442e:	edc7 7a03 	vstr	s15, [r7, #12]

	prev_input[1] = prev_input[0];
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3324      	adds	r3, #36	@ 0x24
 8004436:	2100      	movs	r1, #0
 8004438:	4618      	mov	r0, r3
 800443a:	f000 f836 	bl	80044aa <_ZNSt5arrayIfLj2EEixEj>
 800443e:	4603      	mov	r3, r0
 8004440:	681c      	ldr	r4, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3324      	adds	r3, #36	@ 0x24
 8004446:	2101      	movs	r1, #1
 8004448:	4618      	mov	r0, r3
 800444a:	f000 f82e 	bl	80044aa <_ZNSt5arrayIfLj2EEixEj>
 800444e:	4603      	mov	r3, r0
 8004450:	601c      	str	r4, [r3, #0]
	prev_input[0] = input;
 8004452:	683c      	ldr	r4, [r7, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3324      	adds	r3, #36	@ 0x24
 8004458:	2100      	movs	r1, #0
 800445a:	4618      	mov	r0, r3
 800445c:	f000 f825 	bl	80044aa <_ZNSt5arrayIfLj2EEixEj>
 8004460:	4603      	mov	r3, r0
 8004462:	601c      	str	r4, [r3, #0]
	prev_output[1] = prev_output[0];
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	332c      	adds	r3, #44	@ 0x2c
 8004468:	2100      	movs	r1, #0
 800446a:	4618      	mov	r0, r3
 800446c:	f000 f81d 	bl	80044aa <_ZNSt5arrayIfLj2EEixEj>
 8004470:	4603      	mov	r3, r0
 8004472:	681c      	ldr	r4, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	332c      	adds	r3, #44	@ 0x2c
 8004478:	2101      	movs	r1, #1
 800447a:	4618      	mov	r0, r3
 800447c:	f000 f815 	bl	80044aa <_ZNSt5arrayIfLj2EEixEj>
 8004480:	4603      	mov	r3, r0
 8004482:	601c      	str	r4, [r3, #0]
	prev_output[0] = output;
 8004484:	68fc      	ldr	r4, [r7, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	332c      	adds	r3, #44	@ 0x2c
 800448a:	2100      	movs	r1, #0
 800448c:	4618      	mov	r0, r3
 800448e:	f000 f80c 	bl	80044aa <_ZNSt5arrayIfLj2EEixEj>
 8004492:	4603      	mov	r3, r0
 8004494:	601c      	str	r4, [r3, #0]
	return output;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	ee07 3a90 	vmov	s15, r3
}
 800449c:	eeb0 0a67 	vmov.f32	s0, s15
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	ecbd 8b02 	vpop	{d8}
 80044a8:	bd90      	pop	{r4, r7, pc}

080044aa <_ZNSt5arrayIfLj2EEixEj>:
      operator[](size_type __n) noexcept
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6839      	ldr	r1, [r7, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 f805 	bl	80044c8 <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>
 80044be:	4603      	mov	r3, r0
      }
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	4413      	add	r3, r2
 80044da:	4618      	mov	r0, r3
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of spi1Mutex */
  spi1MutexHandle = osMutexNew(&spi1Mutex_attributes);
 80044ec:	4833      	ldr	r0, [pc, #204]	@ (80045bc <MX_FREERTOS_Init+0xd4>)
 80044ee:	f00a fdc4 	bl	800f07a <osMutexNew>
 80044f2:	4603      	mov	r3, r0
 80044f4:	4a32      	ldr	r2, [pc, #200]	@ (80045c0 <MX_FREERTOS_Init+0xd8>)
 80044f6:	6013      	str	r3, [r2, #0]

  /* creation of usbMutex */
  usbMutexHandle = osMutexNew(&usbMutex_attributes);
 80044f8:	4832      	ldr	r0, [pc, #200]	@ (80045c4 <MX_FREERTOS_Init+0xdc>)
 80044fa:	f00a fdbe 	bl	800f07a <osMutexNew>
 80044fe:	4603      	mov	r3, r0
 8004500:	4a31      	ldr	r2, [pc, #196]	@ (80045c8 <MX_FREERTOS_Init+0xe0>)
 8004502:	6013      	str	r3, [r2, #0]

  /* creation of i2c2Mutex */
  i2c2MutexHandle = osMutexNew(&i2c2Mutex_attributes);
 8004504:	4831      	ldr	r0, [pc, #196]	@ (80045cc <MX_FREERTOS_Init+0xe4>)
 8004506:	f00a fdb8 	bl	800f07a <osMutexNew>
 800450a:	4603      	mov	r3, r0
 800450c:	4a30      	ldr	r2, [pc, #192]	@ (80045d0 <MX_FREERTOS_Init+0xe8>)
 800450e:	6013      	str	r3, [r2, #0]

  /* creation of accelDataMutex */
  accelDataMutexHandle = osMutexNew(&accelDataMutex_attributes);
 8004510:	4830      	ldr	r0, [pc, #192]	@ (80045d4 <MX_FREERTOS_Init+0xec>)
 8004512:	f00a fdb2 	bl	800f07a <osMutexNew>
 8004516:	4603      	mov	r3, r0
 8004518:	4a2f      	ldr	r2, [pc, #188]	@ (80045d8 <MX_FREERTOS_Init+0xf0>)
 800451a:	6013      	str	r3, [r2, #0]

  /* creation of gyroDataMutex */
  gyroDataMutexHandle = osMutexNew(&gyroDataMutex_attributes);
 800451c:	482f      	ldr	r0, [pc, #188]	@ (80045dc <MX_FREERTOS_Init+0xf4>)
 800451e:	f00a fdac 	bl	800f07a <osMutexNew>
 8004522:	4603      	mov	r3, r0
 8004524:	4a2e      	ldr	r2, [pc, #184]	@ (80045e0 <MX_FREERTOS_Init+0xf8>)
 8004526:	6013      	str	r3, [r2, #0]

  /* creation of baroDataMutex */
  baroDataMutexHandle = osMutexNew(&baroDataMutex_attributes);
 8004528:	482e      	ldr	r0, [pc, #184]	@ (80045e4 <MX_FREERTOS_Init+0xfc>)
 800452a:	f00a fda6 	bl	800f07a <osMutexNew>
 800452e:	4603      	mov	r3, r0
 8004530:	4a2d      	ldr	r2, [pc, #180]	@ (80045e8 <MX_FREERTOS_Init+0x100>)
 8004532:	6013      	str	r3, [r2, #0]

  /* creation of magDataMutex */
  magDataMutexHandle = osMutexNew(&magDataMutex_attributes);
 8004534:	482d      	ldr	r0, [pc, #180]	@ (80045ec <MX_FREERTOS_Init+0x104>)
 8004536:	f00a fda0 	bl	800f07a <osMutexNew>
 800453a:	4603      	mov	r3, r0
 800453c:	4a2c      	ldr	r2, [pc, #176]	@ (80045f0 <MX_FREERTOS_Init+0x108>)
 800453e:	6013      	str	r3, [r2, #0]

  /* creation of stateMutex */
  stateMutexHandle = osMutexNew(&stateMutex_attributes);
 8004540:	482c      	ldr	r0, [pc, #176]	@ (80045f4 <MX_FREERTOS_Init+0x10c>)
 8004542:	f00a fd9a 	bl	800f07a <osMutexNew>
 8004546:	4603      	mov	r3, r0
 8004548:	4a2b      	ldr	r2, [pc, #172]	@ (80045f8 <MX_FREERTOS_Init+0x110>)
 800454a:	6013      	str	r3, [r2, #0]

  /* creation of uart2Mutex */
  uart2MutexHandle = osMutexNew(&uart2Mutex_attributes);
 800454c:	482b      	ldr	r0, [pc, #172]	@ (80045fc <MX_FREERTOS_Init+0x114>)
 800454e:	f00a fd94 	bl	800f07a <osMutexNew>
 8004552:	4603      	mov	r3, r0
 8004554:	4a2a      	ldr	r2, [pc, #168]	@ (8004600 <MX_FREERTOS_Init+0x118>)
 8004556:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sensorFusionTask */
  sensorFusionTaskHandle = osThreadNew(start_sensor_fusion_task, NULL, &sensorFusionTask_attributes);
 8004558:	4a2a      	ldr	r2, [pc, #168]	@ (8004604 <MX_FREERTOS_Init+0x11c>)
 800455a:	2100      	movs	r1, #0
 800455c:	482a      	ldr	r0, [pc, #168]	@ (8004608 <MX_FREERTOS_Init+0x120>)
 800455e:	f00a fbe1 	bl	800ed24 <osThreadNew>
 8004562:	4603      	mov	r3, r0
 8004564:	4a29      	ldr	r2, [pc, #164]	@ (800460c <MX_FREERTOS_Init+0x124>)
 8004566:	6013      	str	r3, [r2, #0]

  /* creation of accIRQTask */
  accIRQTaskHandle = osThreadNew(start_acc_irq_task, NULL, &accIRQTask_attributes);
 8004568:	4a29      	ldr	r2, [pc, #164]	@ (8004610 <MX_FREERTOS_Init+0x128>)
 800456a:	2100      	movs	r1, #0
 800456c:	4829      	ldr	r0, [pc, #164]	@ (8004614 <MX_FREERTOS_Init+0x12c>)
 800456e:	f00a fbd9 	bl	800ed24 <osThreadNew>
 8004572:	4603      	mov	r3, r0
 8004574:	4a28      	ldr	r2, [pc, #160]	@ (8004618 <MX_FREERTOS_Init+0x130>)
 8004576:	6013      	str	r3, [r2, #0]

  /* creation of gyroIRQTask */
  gyroIRQTaskHandle = osThreadNew(start_gyro_irq_task, NULL, &gyroIRQTask_attributes);
 8004578:	4a28      	ldr	r2, [pc, #160]	@ (800461c <MX_FREERTOS_Init+0x134>)
 800457a:	2100      	movs	r1, #0
 800457c:	4828      	ldr	r0, [pc, #160]	@ (8004620 <MX_FREERTOS_Init+0x138>)
 800457e:	f00a fbd1 	bl	800ed24 <osThreadNew>
 8004582:	4603      	mov	r3, r0
 8004584:	4a27      	ldr	r2, [pc, #156]	@ (8004624 <MX_FREERTOS_Init+0x13c>)
 8004586:	6013      	str	r3, [r2, #0]

  /* creation of baroIRQTask */
  baroIRQTaskHandle = osThreadNew(start_baro_irq_task, NULL, &baroIRQTask_attributes);
 8004588:	4a27      	ldr	r2, [pc, #156]	@ (8004628 <MX_FREERTOS_Init+0x140>)
 800458a:	2100      	movs	r1, #0
 800458c:	4827      	ldr	r0, [pc, #156]	@ (800462c <MX_FREERTOS_Init+0x144>)
 800458e:	f00a fbc9 	bl	800ed24 <osThreadNew>
 8004592:	4603      	mov	r3, r0
 8004594:	4a26      	ldr	r2, [pc, #152]	@ (8004630 <MX_FREERTOS_Init+0x148>)
 8004596:	6013      	str	r3, [r2, #0]

  /* creation of magIRQTask */
  magIRQTaskHandle = osThreadNew(start_mag_irq_task, NULL, &magIRQTask_attributes);
 8004598:	4a26      	ldr	r2, [pc, #152]	@ (8004634 <MX_FREERTOS_Init+0x14c>)
 800459a:	2100      	movs	r1, #0
 800459c:	4826      	ldr	r0, [pc, #152]	@ (8004638 <MX_FREERTOS_Init+0x150>)
 800459e:	f00a fbc1 	bl	800ed24 <osThreadNew>
 80045a2:	4603      	mov	r3, r0
 80045a4:	4a25      	ldr	r2, [pc, #148]	@ (800463c <MX_FREERTOS_Init+0x154>)
 80045a6:	6013      	str	r3, [r2, #0]

  /* creation of loggingTask */
  loggingTaskHandle = osThreadNew(start_logging_task, NULL, &loggingTask_attributes);
 80045a8:	4a25      	ldr	r2, [pc, #148]	@ (8004640 <MX_FREERTOS_Init+0x158>)
 80045aa:	2100      	movs	r1, #0
 80045ac:	4825      	ldr	r0, [pc, #148]	@ (8004644 <MX_FREERTOS_Init+0x15c>)
 80045ae:	f00a fbb9 	bl	800ed24 <osThreadNew>
 80045b2:	4603      	mov	r3, r0
 80045b4:	4a24      	ldr	r2, [pc, #144]	@ (8004648 <MX_FREERTOS_Init+0x160>)
 80045b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80045b8:	bf00      	nop
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	08022728 	.word	0x08022728
 80045c0:	2000538c 	.word	0x2000538c
 80045c4:	08022738 	.word	0x08022738
 80045c8:	200053e0 	.word	0x200053e0
 80045cc:	08022748 	.word	0x08022748
 80045d0:	20005434 	.word	0x20005434
 80045d4:	08022758 	.word	0x08022758
 80045d8:	20005488 	.word	0x20005488
 80045dc:	08022768 	.word	0x08022768
 80045e0:	200054dc 	.word	0x200054dc
 80045e4:	08022778 	.word	0x08022778
 80045e8:	20005530 	.word	0x20005530
 80045ec:	08022788 	.word	0x08022788
 80045f0:	20005584 	.word	0x20005584
 80045f4:	08022798 	.word	0x08022798
 80045f8:	200055d8 	.word	0x200055d8
 80045fc:	080227a8 	.word	0x080227a8
 8004600:	2000562c 	.word	0x2000562c
 8004604:	08022650 	.word	0x08022650
 8004608:	0800464d 	.word	0x0800464d
 800460c:	20001754 	.word	0x20001754
 8004610:	08022674 	.word	0x08022674
 8004614:	08004661 	.word	0x08004661
 8004618:	20003808 	.word	0x20003808
 800461c:	08022698 	.word	0x08022698
 8004620:	0800467d 	.word	0x0800467d
 8004624:	20003cbc 	.word	0x20003cbc
 8004628:	080226bc 	.word	0x080226bc
 800462c:	08004699 	.word	0x08004699
 8004630:	20004170 	.word	0x20004170
 8004634:	080226e0 	.word	0x080226e0
 8004638:	080046b5 	.word	0x080046b5
 800463c:	20004624 	.word	0x20004624
 8004640:	08022704 	.word	0x08022704
 8004644:	080046d1 	.word	0x080046d1
 8004648:	20004ad8 	.word	0x20004ad8

0800464c <start_sensor_fusion_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_sensor_fusion_task */
void start_sensor_fusion_task(void *argument)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_sensor_fusion_task */
  /* Infinite loop */
  sensor_fusion_thread();
 8004654:	f7ff f918 	bl	8003888 <sensor_fusion_thread>
  /* USER CODE END start_sensor_fusion_task */
}
 8004658:	bf00      	nop
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <start_acc_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_acc_irq_task */
void start_acc_irq_task(void *argument)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_acc_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
 8004668:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800466c:	2101      	movs	r1, #1
 800466e:	2001      	movs	r0, #1
 8004670:	f00a fc3a 	bl	800eee8 <osThreadFlagsWait>
		service_BMI088_Accel();
 8004674:	f7ff fc92 	bl	8003f9c <service_BMI088_Accel>
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
 8004678:	bf00      	nop
 800467a:	e7f5      	b.n	8004668 <start_acc_irq_task+0x8>

0800467c <start_gyro_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_gyro_irq_task */
void start_gyro_irq_task(void *argument)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_gyro_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
 8004684:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004688:	2101      	movs	r1, #1
 800468a:	2001      	movs	r0, #1
 800468c:	f00a fc2c 	bl	800eee8 <osThreadFlagsWait>
		service_BMI088_Gyro();
 8004690:	f7ff fc8e 	bl	8003fb0 <service_BMI088_Gyro>
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
 8004694:	bf00      	nop
 8004696:	e7f5      	b.n	8004684 <start_gyro_irq_task+0x8>

08004698 <start_baro_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_baro_irq_task */
void start_baro_irq_task(void *argument)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_baro_irq_task */
  /* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
 80046a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80046a4:	2101      	movs	r1, #1
 80046a6:	2001      	movs	r0, #1
 80046a8:	f00a fc1e 	bl	800eee8 <osThreadFlagsWait>
		service_BMP388();
 80046ac:	f7ff fc8a 	bl	8003fc4 <service_BMP388>
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
 80046b0:	bf00      	nop
 80046b2:	e7f5      	b.n	80046a0 <start_baro_irq_task+0x8>

080046b4 <start_mag_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_mag_irq_task */
void start_mag_irq_task(void *argument)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_mag_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
 80046bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80046c0:	2101      	movs	r1, #1
 80046c2:	2001      	movs	r0, #1
 80046c4:	f00a fc10 	bl	800eee8 <osThreadFlagsWait>
		service_LIS3MDL();
 80046c8:	f7ff fc86 	bl	8003fd8 <service_LIS3MDL>
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
 80046cc:	bf00      	nop
 80046ce:	e7f5      	b.n	80046bc <start_mag_irq_task+0x8>

080046d0 <start_logging_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_logging_task */
void start_logging_task(void *argument)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_logging_task */
	/* Infinite loop */
	logging_thread();
 80046d8:	f7ff fb84 	bl	8003de4 <logging_thread>
  /* USER CODE END start_logging_task */
}
 80046dc:	bf00      	nop
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_GPIO_EXTI_Callback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	4603      	mov	r3, r0
 80046ec:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ACCEL_INT_Pin)
 80046ee:	88fb      	ldrh	r3, [r7, #6]
 80046f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046f4:	d106      	bne.n	8004704 <HAL_GPIO_EXTI_Callback+0x20>
	{
		osThreadFlagsSet(accIRQTaskHandle, 0x00000001U);
 80046f6:	4b15      	ldr	r3, [pc, #84]	@ (800474c <HAL_GPIO_EXTI_Callback+0x68>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2101      	movs	r1, #1
 80046fc:	4618      	mov	r0, r3
 80046fe:	f00a fba5 	bl	800ee4c <osThreadFlagsSet>
	}
	else if (GPIO_Pin == MAG_DRDY_Pin)
	{
		osThreadFlagsSet(magIRQTaskHandle, 0x00000001U);
	}
}
 8004702:	e01e      	b.n	8004742 <HAL_GPIO_EXTI_Callback+0x5e>
	else if (GPIO_Pin == GYRO_INT_Pin)
 8004704:	88fb      	ldrh	r3, [r7, #6]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d106      	bne.n	8004718 <HAL_GPIO_EXTI_Callback+0x34>
		osThreadFlagsSet(gyroIRQTaskHandle, 0x00000001U);
 800470a:	4b11      	ldr	r3, [pc, #68]	@ (8004750 <HAL_GPIO_EXTI_Callback+0x6c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2101      	movs	r1, #1
 8004710:	4618      	mov	r0, r3
 8004712:	f00a fb9b 	bl	800ee4c <osThreadFlagsSet>
}
 8004716:	e014      	b.n	8004742 <HAL_GPIO_EXTI_Callback+0x5e>
	else if (GPIO_Pin == BMP_INT_Pin)
 8004718:	88fb      	ldrh	r3, [r7, #6]
 800471a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800471e:	d106      	bne.n	800472e <HAL_GPIO_EXTI_Callback+0x4a>
		osThreadFlagsSet(baroIRQTaskHandle, 0x00000001U);
 8004720:	4b0c      	ldr	r3, [pc, #48]	@ (8004754 <HAL_GPIO_EXTI_Callback+0x70>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2101      	movs	r1, #1
 8004726:	4618      	mov	r0, r3
 8004728:	f00a fb90 	bl	800ee4c <osThreadFlagsSet>
}
 800472c:	e009      	b.n	8004742 <HAL_GPIO_EXTI_Callback+0x5e>
	else if (GPIO_Pin == MAG_DRDY_Pin)
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004734:	d105      	bne.n	8004742 <HAL_GPIO_EXTI_Callback+0x5e>
		osThreadFlagsSet(magIRQTaskHandle, 0x00000001U);
 8004736:	4b08      	ldr	r3, [pc, #32]	@ (8004758 <HAL_GPIO_EXTI_Callback+0x74>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2101      	movs	r1, #1
 800473c:	4618      	mov	r0, r3
 800473e:	f00a fb85 	bl	800ee4c <osThreadFlagsSet>
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20003808 	.word	0x20003808
 8004750:	20003cbc 	.word	0x20003cbc
 8004754:	20004170 	.word	0x20004170
 8004758:	20004624 	.word	0x20004624

0800475c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004760:	4b0d      	ldr	r3, [pc, #52]	@ (8004798 <MX_CRC_Init+0x3c>)
 8004762:	4a0e      	ldr	r2, [pc, #56]	@ (800479c <MX_CRC_Init+0x40>)
 8004764:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004766:	4b0c      	ldr	r3, [pc, #48]	@ (8004798 <MX_CRC_Init+0x3c>)
 8004768:	2200      	movs	r2, #0
 800476a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800476c:	4b0a      	ldr	r3, [pc, #40]	@ (8004798 <MX_CRC_Init+0x3c>)
 800476e:	2200      	movs	r2, #0
 8004770:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8004772:	4b09      	ldr	r3, [pc, #36]	@ (8004798 <MX_CRC_Init+0x3c>)
 8004774:	2200      	movs	r2, #0
 8004776:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004778:	4b07      	ldr	r3, [pc, #28]	@ (8004798 <MX_CRC_Init+0x3c>)
 800477a:	2200      	movs	r2, #0
 800477c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800477e:	4b06      	ldr	r3, [pc, #24]	@ (8004798 <MX_CRC_Init+0x3c>)
 8004780:	2201      	movs	r2, #1
 8004782:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004784:	4804      	ldr	r0, [pc, #16]	@ (8004798 <MX_CRC_Init+0x3c>)
 8004786:	f001 f807 	bl	8005798 <HAL_CRC_Init>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8004790:	f000 fb88 	bl	8004ea4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004794:	bf00      	nop
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20005680 	.word	0x20005680
 800479c:	40023000 	.word	0x40023000

080047a0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a0a      	ldr	r2, [pc, #40]	@ (80047d8 <HAL_CRC_MspInit+0x38>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d10b      	bne.n	80047ca <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80047b2:	4b0a      	ldr	r3, [pc, #40]	@ (80047dc <HAL_CRC_MspInit+0x3c>)
 80047b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b6:	4a09      	ldr	r2, [pc, #36]	@ (80047dc <HAL_CRC_MspInit+0x3c>)
 80047b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80047bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80047be:	4b07      	ldr	r3, [pc, #28]	@ (80047dc <HAL_CRC_MspInit+0x3c>)
 80047c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80047ca:	bf00      	nop
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40023000 	.word	0x40023000
 80047dc:	40021000 	.word	0x40021000

080047e0 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80047e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004864 <MX_FDCAN1_Init+0x84>)
 80047e6:	4a20      	ldr	r2, [pc, #128]	@ (8004868 <MX_FDCAN1_Init+0x88>)
 80047e8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80047ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004864 <MX_FDCAN1_Init+0x84>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80047f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004864 <MX_FDCAN1_Init+0x84>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80047f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004864 <MX_FDCAN1_Init+0x84>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80047fc:	4b19      	ldr	r3, [pc, #100]	@ (8004864 <MX_FDCAN1_Init+0x84>)
 80047fe:	2201      	movs	r2, #1
 8004800:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8004802:	4b18      	ldr	r3, [pc, #96]	@ (8004864 <MX_FDCAN1_Init+0x84>)
 8004804:	2201      	movs	r2, #1
 8004806:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8004808:	4b16      	ldr	r3, [pc, #88]	@ (8004864 <MX_FDCAN1_Init+0x84>)
 800480a:	2200      	movs	r2, #0
 800480c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800480e:	4b15      	ldr	r3, [pc, #84]	@ (8004864 <MX_FDCAN1_Init+0x84>)
 8004810:	2210      	movs	r2, #16
 8004812:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8004814:	4b13      	ldr	r3, [pc, #76]	@ (8004864 <MX_FDCAN1_Init+0x84>)
 8004816:	2201      	movs	r2, #1
 8004818:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 800481a:	4b12      	ldr	r3, [pc, #72]	@ (8004864 <MX_FDCAN1_Init+0x84>)
 800481c:	2201      	movs	r2, #1
 800481e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8004820:	4b10      	ldr	r3, [pc, #64]	@ (8004864 <MX_FDCAN1_Init+0x84>)
 8004822:	2201      	movs	r2, #1
 8004824:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8004826:	4b0f      	ldr	r3, [pc, #60]	@ (8004864 <MX_FDCAN1_Init+0x84>)
 8004828:	2201      	movs	r2, #1
 800482a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800482c:	4b0d      	ldr	r3, [pc, #52]	@ (8004864 <MX_FDCAN1_Init+0x84>)
 800482e:	2201      	movs	r2, #1
 8004830:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8004832:	4b0c      	ldr	r3, [pc, #48]	@ (8004864 <MX_FDCAN1_Init+0x84>)
 8004834:	2201      	movs	r2, #1
 8004836:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8004838:	4b0a      	ldr	r3, [pc, #40]	@ (8004864 <MX_FDCAN1_Init+0x84>)
 800483a:	2201      	movs	r2, #1
 800483c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800483e:	4b09      	ldr	r3, [pc, #36]	@ (8004864 <MX_FDCAN1_Init+0x84>)
 8004840:	2200      	movs	r2, #0
 8004842:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8004844:	4b07      	ldr	r3, [pc, #28]	@ (8004864 <MX_FDCAN1_Init+0x84>)
 8004846:	2200      	movs	r2, #0
 8004848:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800484a:	4b06      	ldr	r3, [pc, #24]	@ (8004864 <MX_FDCAN1_Init+0x84>)
 800484c:	2200      	movs	r2, #0
 800484e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8004850:	4804      	ldr	r0, [pc, #16]	@ (8004864 <MX_FDCAN1_Init+0x84>)
 8004852:	f001 f893 	bl	800597c <HAL_FDCAN_Init>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800485c:	f000 fb22 	bl	8004ea4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8004860:	bf00      	nop
 8004862:	bd80      	pop	{r7, pc}
 8004864:	200056a4 	.word	0x200056a4
 8004868:	40006400 	.word	0x40006400

0800486c <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8004870:	4b1f      	ldr	r3, [pc, #124]	@ (80048f0 <MX_FDCAN2_Init+0x84>)
 8004872:	4a20      	ldr	r2, [pc, #128]	@ (80048f4 <MX_FDCAN2_Init+0x88>)
 8004874:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8004876:	4b1e      	ldr	r3, [pc, #120]	@ (80048f0 <MX_FDCAN2_Init+0x84>)
 8004878:	2200      	movs	r2, #0
 800487a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800487c:	4b1c      	ldr	r3, [pc, #112]	@ (80048f0 <MX_FDCAN2_Init+0x84>)
 800487e:	2200      	movs	r2, #0
 8004880:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8004882:	4b1b      	ldr	r3, [pc, #108]	@ (80048f0 <MX_FDCAN2_Init+0x84>)
 8004884:	2200      	movs	r2, #0
 8004886:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8004888:	4b19      	ldr	r3, [pc, #100]	@ (80048f0 <MX_FDCAN2_Init+0x84>)
 800488a:	2201      	movs	r2, #1
 800488c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = ENABLE;
 800488e:	4b18      	ldr	r3, [pc, #96]	@ (80048f0 <MX_FDCAN2_Init+0x84>)
 8004890:	2201      	movs	r2, #1
 8004892:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8004894:	4b16      	ldr	r3, [pc, #88]	@ (80048f0 <MX_FDCAN2_Init+0x84>)
 8004896:	2200      	movs	r2, #0
 8004898:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800489a:	4b15      	ldr	r3, [pc, #84]	@ (80048f0 <MX_FDCAN2_Init+0x84>)
 800489c:	2210      	movs	r2, #16
 800489e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80048a0:	4b13      	ldr	r3, [pc, #76]	@ (80048f0 <MX_FDCAN2_Init+0x84>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 80048a6:	4b12      	ldr	r3, [pc, #72]	@ (80048f0 <MX_FDCAN2_Init+0x84>)
 80048a8:	2201      	movs	r2, #1
 80048aa:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 80048ac:	4b10      	ldr	r3, [pc, #64]	@ (80048f0 <MX_FDCAN2_Init+0x84>)
 80048ae:	2201      	movs	r2, #1
 80048b0:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80048b2:	4b0f      	ldr	r3, [pc, #60]	@ (80048f0 <MX_FDCAN2_Init+0x84>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80048b8:	4b0d      	ldr	r3, [pc, #52]	@ (80048f0 <MX_FDCAN2_Init+0x84>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80048be:	4b0c      	ldr	r3, [pc, #48]	@ (80048f0 <MX_FDCAN2_Init+0x84>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80048c4:	4b0a      	ldr	r3, [pc, #40]	@ (80048f0 <MX_FDCAN2_Init+0x84>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80048ca:	4b09      	ldr	r3, [pc, #36]	@ (80048f0 <MX_FDCAN2_Init+0x84>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80048d0:	4b07      	ldr	r3, [pc, #28]	@ (80048f0 <MX_FDCAN2_Init+0x84>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80048d6:	4b06      	ldr	r3, [pc, #24]	@ (80048f0 <MX_FDCAN2_Init+0x84>)
 80048d8:	2200      	movs	r2, #0
 80048da:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80048dc:	4804      	ldr	r0, [pc, #16]	@ (80048f0 <MX_FDCAN2_Init+0x84>)
 80048de:	f001 f84d 	bl	800597c <HAL_FDCAN_Init>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80048e8:	f000 fadc 	bl	8004ea4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80048ec:	bf00      	nop
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20005708 	.word	0x20005708
 80048f4:	40006800 	.word	0x40006800

080048f8 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b0a0      	sub	sp, #128	@ 0x80
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004900:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	605a      	str	r2, [r3, #4]
 800490a:	609a      	str	r2, [r3, #8]
 800490c:	60da      	str	r2, [r3, #12]
 800490e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004910:	f107 0318 	add.w	r3, r7, #24
 8004914:	2254      	movs	r2, #84	@ 0x54
 8004916:	2100      	movs	r1, #0
 8004918:	4618      	mov	r0, r3
 800491a:	f01b fa3c 	bl	801fd96 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a48      	ldr	r2, [pc, #288]	@ (8004a44 <HAL_FDCAN_MspInit+0x14c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d142      	bne.n	80049ae <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004928:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800492c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800492e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004932:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004934:	f107 0318 	add.w	r3, r7, #24
 8004938:	4618      	mov	r0, r3
 800493a:	f004 fccb 	bl	80092d4 <HAL_RCCEx_PeriphCLKConfig>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004944:	f000 faae 	bl	8004ea4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8004948:	4b3f      	ldr	r3, [pc, #252]	@ (8004a48 <HAL_FDCAN_MspInit+0x150>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3301      	adds	r3, #1
 800494e:	4a3e      	ldr	r2, [pc, #248]	@ (8004a48 <HAL_FDCAN_MspInit+0x150>)
 8004950:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8004952:	4b3d      	ldr	r3, [pc, #244]	@ (8004a48 <HAL_FDCAN_MspInit+0x150>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d10b      	bne.n	8004972 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800495a:	4b3c      	ldr	r3, [pc, #240]	@ (8004a4c <HAL_FDCAN_MspInit+0x154>)
 800495c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495e:	4a3b      	ldr	r2, [pc, #236]	@ (8004a4c <HAL_FDCAN_MspInit+0x154>)
 8004960:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004964:	6593      	str	r3, [r2, #88]	@ 0x58
 8004966:	4b39      	ldr	r3, [pc, #228]	@ (8004a4c <HAL_FDCAN_MspInit+0x154>)
 8004968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004972:	4b36      	ldr	r3, [pc, #216]	@ (8004a4c <HAL_FDCAN_MspInit+0x154>)
 8004974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004976:	4a35      	ldr	r2, [pc, #212]	@ (8004a4c <HAL_FDCAN_MspInit+0x154>)
 8004978:	f043 0302 	orr.w	r3, r3, #2
 800497c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800497e:	4b33      	ldr	r3, [pc, #204]	@ (8004a4c <HAL_FDCAN_MspInit+0x154>)
 8004980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800498a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800498e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004990:	2302      	movs	r3, #2
 8004992:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004994:	2300      	movs	r3, #0
 8004996:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004998:	2300      	movs	r3, #0
 800499a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800499c:	2309      	movs	r3, #9
 800499e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049a0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80049a4:	4619      	mov	r1, r3
 80049a6:	482a      	ldr	r0, [pc, #168]	@ (8004a50 <HAL_FDCAN_MspInit+0x158>)
 80049a8:	f001 f9ae 	bl	8005d08 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 80049ac:	e045      	b.n	8004a3a <HAL_FDCAN_MspInit+0x142>
  else if(fdcanHandle->Instance==FDCAN2)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a28      	ldr	r2, [pc, #160]	@ (8004a54 <HAL_FDCAN_MspInit+0x15c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d140      	bne.n	8004a3a <HAL_FDCAN_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80049b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80049be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049c2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049c4:	f107 0318 	add.w	r3, r7, #24
 80049c8:	4618      	mov	r0, r3
 80049ca:	f004 fc83 	bl	80092d4 <HAL_RCCEx_PeriphCLKConfig>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <HAL_FDCAN_MspInit+0xe0>
      Error_Handler();
 80049d4:	f000 fa66 	bl	8004ea4 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80049d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a48 <HAL_FDCAN_MspInit+0x150>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3301      	adds	r3, #1
 80049de:	4a1a      	ldr	r2, [pc, #104]	@ (8004a48 <HAL_FDCAN_MspInit+0x150>)
 80049e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80049e2:	4b19      	ldr	r3, [pc, #100]	@ (8004a48 <HAL_FDCAN_MspInit+0x150>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d10b      	bne.n	8004a02 <HAL_FDCAN_MspInit+0x10a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80049ea:	4b18      	ldr	r3, [pc, #96]	@ (8004a4c <HAL_FDCAN_MspInit+0x154>)
 80049ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ee:	4a17      	ldr	r2, [pc, #92]	@ (8004a4c <HAL_FDCAN_MspInit+0x154>)
 80049f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80049f6:	4b15      	ldr	r3, [pc, #84]	@ (8004a4c <HAL_FDCAN_MspInit+0x154>)
 80049f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a02:	4b12      	ldr	r3, [pc, #72]	@ (8004a4c <HAL_FDCAN_MspInit+0x154>)
 8004a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a06:	4a11      	ldr	r2, [pc, #68]	@ (8004a4c <HAL_FDCAN_MspInit+0x154>)
 8004a08:	f043 0302 	orr.w	r3, r3, #2
 8004a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a4c <HAL_FDCAN_MspInit+0x154>)
 8004a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004a1a:	2360      	movs	r3, #96	@ 0x60
 8004a1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a1e:	2302      	movs	r3, #2
 8004a20:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a26:	2300      	movs	r3, #0
 8004a28:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8004a2a:	2309      	movs	r3, #9
 8004a2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a2e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004a32:	4619      	mov	r1, r3
 8004a34:	4806      	ldr	r0, [pc, #24]	@ (8004a50 <HAL_FDCAN_MspInit+0x158>)
 8004a36:	f001 f967 	bl	8005d08 <HAL_GPIO_Init>
}
 8004a3a:	bf00      	nop
 8004a3c:	3780      	adds	r7, #128	@ 0x80
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40006400 	.word	0x40006400
 8004a48:	2000576c 	.word	0x2000576c
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	48000400 	.word	0x48000400
 8004a54:	40006800 	.word	0x40006800

08004a58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	@ 0x28
 8004a5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a5e:	f107 0314 	add.w	r3, r7, #20
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	605a      	str	r2, [r3, #4]
 8004a68:	609a      	str	r2, [r3, #8]
 8004a6a:	60da      	str	r2, [r3, #12]
 8004a6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a6e:	4b72      	ldr	r3, [pc, #456]	@ (8004c38 <MX_GPIO_Init+0x1e0>)
 8004a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a72:	4a71      	ldr	r2, [pc, #452]	@ (8004c38 <MX_GPIO_Init+0x1e0>)
 8004a74:	f043 0304 	orr.w	r3, r3, #4
 8004a78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a7a:	4b6f      	ldr	r3, [pc, #444]	@ (8004c38 <MX_GPIO_Init+0x1e0>)
 8004a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a86:	4b6c      	ldr	r3, [pc, #432]	@ (8004c38 <MX_GPIO_Init+0x1e0>)
 8004a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a8a:	4a6b      	ldr	r2, [pc, #428]	@ (8004c38 <MX_GPIO_Init+0x1e0>)
 8004a8c:	f043 0320 	orr.w	r3, r3, #32
 8004a90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a92:	4b69      	ldr	r3, [pc, #420]	@ (8004c38 <MX_GPIO_Init+0x1e0>)
 8004a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a9e:	4b66      	ldr	r3, [pc, #408]	@ (8004c38 <MX_GPIO_Init+0x1e0>)
 8004aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aa2:	4a65      	ldr	r2, [pc, #404]	@ (8004c38 <MX_GPIO_Init+0x1e0>)
 8004aa4:	f043 0301 	orr.w	r3, r3, #1
 8004aa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004aaa:	4b63      	ldr	r3, [pc, #396]	@ (8004c38 <MX_GPIO_Init+0x1e0>)
 8004aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ab6:	4b60      	ldr	r3, [pc, #384]	@ (8004c38 <MX_GPIO_Init+0x1e0>)
 8004ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aba:	4a5f      	ldr	r2, [pc, #380]	@ (8004c38 <MX_GPIO_Init+0x1e0>)
 8004abc:	f043 0302 	orr.w	r3, r3, #2
 8004ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ac2:	4b5d      	ldr	r3, [pc, #372]	@ (8004c38 <MX_GPIO_Init+0x1e0>)
 8004ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO2_Pin|GPIO3_Pin, GPIO_PIN_RESET);
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8004ad4:	4859      	ldr	r0, [pc, #356]	@ (8004c3c <MX_GPIO_Init+0x1e4>)
 8004ad6:	f001 fa99 	bl	800600c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GYRO_CS_Pin|ACCEL_CS_Pin, GPIO_PIN_SET);
 8004ada:	2201      	movs	r2, #1
 8004adc:	2111      	movs	r1, #17
 8004ade:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ae2:	f001 fa93 	bl	800600c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CC2500_CS_GPIO_Port, CC2500_CS_Pin, GPIO_PIN_SET);
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	2102      	movs	r1, #2
 8004aea:	4855      	ldr	r0, [pc, #340]	@ (8004c40 <MX_GPIO_Init+0x1e8>)
 8004aec:	f001 fa8e 	bl	800600c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO8_Pin|GPIO9_Pin|GPIO7_Pin|GPIO4_Pin
 8004af0:	2200      	movs	r2, #0
 8004af2:	f648 4190 	movw	r1, #35984	@ 0x8c90
 8004af6:	4852      	ldr	r0, [pc, #328]	@ (8004c40 <MX_GPIO_Init+0x1e8>)
 8004af8:	f001 fa88 	bl	800600c <HAL_GPIO_WritePin>
                          |GPIO1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO6_Pin|GPIO5_Pin, GPIO_PIN_RESET);
 8004afc:	2200      	movs	r2, #0
 8004afe:	f44f 4104 	mov.w	r1, #33792	@ 0x8400
 8004b02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b06:	f001 fa81 	bl	800600c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO2_Pin GPIO3_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO3_Pin;
 8004b0a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8004b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b10:	2301      	movs	r3, #1
 8004b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b1c:	f107 0314 	add.w	r3, r7, #20
 8004b20:	4619      	mov	r1, r3
 8004b22:	4846      	ldr	r0, [pc, #280]	@ (8004c3c <MX_GPIO_Init+0x1e4>)
 8004b24:	f001 f8f0 	bl	8005d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_INT_Pin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin;
 8004b28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b2e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004b34:	2302      	movs	r3, #2
 8004b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_INT_GPIO_Port, &GPIO_InitStruct);
 8004b38:	f107 0314 	add.w	r3, r7, #20
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	483f      	ldr	r0, [pc, #252]	@ (8004c3c <MX_GPIO_Init+0x1e4>)
 8004b40:	f001 f8e2 	bl	8005d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_CS_Pin ACCEL_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin|ACCEL_CS_Pin;
 8004b44:	2311      	movs	r3, #17
 8004b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b50:	2300      	movs	r3, #0
 8004b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b54:	f107 0314 	add.w	r3, r7, #20
 8004b58:	4619      	mov	r1, r3
 8004b5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b5e:	f001 f8d3 	bl	8005d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8004b62:	2302      	movs	r3, #2
 8004b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b66:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8004b70:	f107 0314 	add.w	r3, r7, #20
 8004b74:	4619      	mov	r1, r3
 8004b76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b7a:	f001 f8c5 	bl	8005d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : CC2500_GDO0_Pin CC2500_GDO2_Pin MAG_INT_Pin */
  GPIO_InitStruct.Pin = CC2500_GDO0_Pin|CC2500_GDO2_Pin|MAG_INT_Pin;
 8004b7e:	f242 0305 	movw	r3, #8197	@ 0x2005
 8004b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b84:	2300      	movs	r3, #0
 8004b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b8c:	f107 0314 	add.w	r3, r7, #20
 8004b90:	4619      	mov	r1, r3
 8004b92:	482b      	ldr	r0, [pc, #172]	@ (8004c40 <MX_GPIO_Init+0x1e8>)
 8004b94:	f001 f8b8 	bl	8005d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : CC2500_CS_Pin */
  GPIO_InitStruct.Pin = CC2500_CS_Pin;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CC2500_CS_GPIO_Port, &GPIO_InitStruct);
 8004ba8:	f107 0314 	add.w	r3, r7, #20
 8004bac:	4619      	mov	r1, r3
 8004bae:	4824      	ldr	r0, [pc, #144]	@ (8004c40 <MX_GPIO_Init+0x1e8>)
 8004bb0:	f001 f8aa 	bl	8005d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO8_Pin GPIO9_Pin GPIO7_Pin GPIO4_Pin
                           GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO8_Pin|GPIO9_Pin|GPIO7_Pin|GPIO4_Pin
 8004bb4:	f648 4390 	movw	r3, #35984	@ 0x8c90
 8004bb8:	617b      	str	r3, [r7, #20]
                          |GPIO1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bc6:	f107 0314 	add.w	r3, r7, #20
 8004bca:	4619      	mov	r1, r3
 8004bcc:	481c      	ldr	r0, [pc, #112]	@ (8004c40 <MX_GPIO_Init+0x1e8>)
 8004bce:	f001 f89b 	bl	8005d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAG_DRDY_Pin BMP_INT_Pin */
  GPIO_InitStruct.Pin = MAG_DRDY_Pin|BMP_INT_Pin;
 8004bd2:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8004bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004bd8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004bde:	2302      	movs	r3, #2
 8004be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004be2:	f107 0314 	add.w	r3, r7, #20
 8004be6:	4619      	mov	r1, r3
 8004be8:	4815      	ldr	r0, [pc, #84]	@ (8004c40 <MX_GPIO_Init+0x1e8>)
 8004bea:	f001 f88d 	bl	8005d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO6_Pin GPIO5_Pin */
  GPIO_InitStruct.Pin = GPIO6_Pin|GPIO5_Pin;
 8004bee:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8004bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c00:	f107 0314 	add.w	r3, r7, #20
 8004c04:	4619      	mov	r1, r3
 8004c06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c0a:	f001 f87d 	bl	8005d08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8004c0e:	2200      	movs	r2, #0
 8004c10:	2105      	movs	r1, #5
 8004c12:	2007      	movs	r0, #7
 8004c14:	f000 fd98 	bl	8005748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004c18:	2007      	movs	r0, #7
 8004c1a:	f000 fdaf 	bl	800577c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004c1e:	2200      	movs	r2, #0
 8004c20:	2105      	movs	r1, #5
 8004c22:	2028      	movs	r0, #40	@ 0x28
 8004c24:	f000 fd90 	bl	8005748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004c28:	2028      	movs	r0, #40	@ 0x28
 8004c2a:	f000 fda7 	bl	800577c <HAL_NVIC_EnableIRQ>

}
 8004c2e:	bf00      	nop
 8004c30:	3728      	adds	r7, #40	@ 0x28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	48000800 	.word	0x48000800
 8004c40:	48000400 	.word	0x48000400

08004c44 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004c48:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb8 <MX_I2C2_Init+0x74>)
 8004c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8004cbc <MX_I2C2_Init+0x78>)
 8004c4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40621236;
 8004c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8004cb8 <MX_I2C2_Init+0x74>)
 8004c50:	4a1b      	ldr	r2, [pc, #108]	@ (8004cc0 <MX_I2C2_Init+0x7c>)
 8004c52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004c54:	4b18      	ldr	r3, [pc, #96]	@ (8004cb8 <MX_I2C2_Init+0x74>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c5a:	4b17      	ldr	r3, [pc, #92]	@ (8004cb8 <MX_I2C2_Init+0x74>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c60:	4b15      	ldr	r3, [pc, #84]	@ (8004cb8 <MX_I2C2_Init+0x74>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004c66:	4b14      	ldr	r3, [pc, #80]	@ (8004cb8 <MX_I2C2_Init+0x74>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004c6c:	4b12      	ldr	r3, [pc, #72]	@ (8004cb8 <MX_I2C2_Init+0x74>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c72:	4b11      	ldr	r3, [pc, #68]	@ (8004cb8 <MX_I2C2_Init+0x74>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c78:	4b0f      	ldr	r3, [pc, #60]	@ (8004cb8 <MX_I2C2_Init+0x74>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004c7e:	480e      	ldr	r0, [pc, #56]	@ (8004cb8 <MX_I2C2_Init+0x74>)
 8004c80:	f001 f9f4 	bl	800606c <HAL_I2C_Init>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004c8a:	f000 f90b 	bl	8004ea4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004c8e:	2100      	movs	r1, #0
 8004c90:	4809      	ldr	r0, [pc, #36]	@ (8004cb8 <MX_I2C2_Init+0x74>)
 8004c92:	f001 ff77 	bl	8006b84 <HAL_I2CEx_ConfigAnalogFilter>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004c9c:	f000 f902 	bl	8004ea4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	4805      	ldr	r0, [pc, #20]	@ (8004cb8 <MX_I2C2_Init+0x74>)
 8004ca4:	f001 ffb9 	bl	8006c1a <HAL_I2CEx_ConfigDigitalFilter>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004cae:	f000 f8f9 	bl	8004ea4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004cb2:	bf00      	nop
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20005770 	.word	0x20005770
 8004cbc:	40005800 	.word	0x40005800
 8004cc0:	40621236 	.word	0x40621236

08004cc4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b09e      	sub	sp, #120	@ 0x78
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ccc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	605a      	str	r2, [r3, #4]
 8004cd6:	609a      	str	r2, [r3, #8]
 8004cd8:	60da      	str	r2, [r3, #12]
 8004cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004cdc:	f107 0310 	add.w	r3, r7, #16
 8004ce0:	2254      	movs	r2, #84	@ 0x54
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f01b f856 	bl	801fd96 <memset>
  if(i2cHandle->Instance==I2C2)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a1f      	ldr	r2, [pc, #124]	@ (8004d6c <HAL_I2C_MspInit+0xa8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d137      	bne.n	8004d64 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004cf4:	2380      	movs	r3, #128	@ 0x80
 8004cf6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cfc:	f107 0310 	add.w	r3, r7, #16
 8004d00:	4618      	mov	r0, r3
 8004d02:	f004 fae7 	bl	80092d4 <HAL_RCCEx_PeriphCLKConfig>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004d0c:	f000 f8ca 	bl	8004ea4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d10:	4b17      	ldr	r3, [pc, #92]	@ (8004d70 <HAL_I2C_MspInit+0xac>)
 8004d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d14:	4a16      	ldr	r2, [pc, #88]	@ (8004d70 <HAL_I2C_MspInit+0xac>)
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d1c:	4b14      	ldr	r3, [pc, #80]	@ (8004d70 <HAL_I2C_MspInit+0xac>)
 8004d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004d28:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004d2c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d2e:	2312      	movs	r3, #18
 8004d30:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d36:	2300      	movs	r3, #0
 8004d38:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004d3a:	2304      	movs	r3, #4
 8004d3c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d3e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004d42:	4619      	mov	r1, r3
 8004d44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d48:	f000 ffde 	bl	8005d08 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004d4c:	4b08      	ldr	r3, [pc, #32]	@ (8004d70 <HAL_I2C_MspInit+0xac>)
 8004d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d50:	4a07      	ldr	r2, [pc, #28]	@ (8004d70 <HAL_I2C_MspInit+0xac>)
 8004d52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d56:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d58:	4b05      	ldr	r3, [pc, #20]	@ (8004d70 <HAL_I2C_MspInit+0xac>)
 8004d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d60:	60bb      	str	r3, [r7, #8]
 8004d62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004d64:	bf00      	nop
 8004d66:	3778      	adds	r7, #120	@ 0x78
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40005800 	.word	0x40005800
 8004d70:	40021000 	.word	0x40021000

08004d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d78:	f000 fbf7 	bl	800556a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d7c:	f000 f81a 	bl	8004db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d80:	f7ff fe6a 	bl	8004a58 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8004d84:	f7ff fd2c 	bl	80047e0 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8004d88:	f7ff fd70 	bl	800486c <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8004d8c:	f7ff ff5a 	bl	8004c44 <MX_I2C2_Init>
  MX_SPI1_Init();
 8004d90:	f000 f88e 	bl	8004eb0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8004d94:	f000 fb1c 	bl	80053d0 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8004d98:	f000 face 	bl	8005338 <MX_TIM16_Init>
  MX_CRC_Init();
 8004d9c:	f7ff fcde 	bl	800475c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_Device_Init();
 8004da0:	f00d fd8a 	bl	80128b8 <MX_USB_Device_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004da4:	f009 ff56 	bl	800ec54 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8004da8:	f7ff fb9e 	bl	80044e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004dac:	f009 ff76 	bl	800ec9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004db0:	bf00      	nop
 8004db2:	e7fd      	b.n	8004db0 <main+0x3c>

08004db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b094      	sub	sp, #80	@ 0x50
 8004db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004dba:	f107 0318 	add.w	r3, r7, #24
 8004dbe:	2238      	movs	r2, #56	@ 0x38
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f01a ffe7 	bl	801fd96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004dc8:	1d3b      	adds	r3, r7, #4
 8004dca:	2200      	movs	r2, #0
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	605a      	str	r2, [r3, #4]
 8004dd0:	609a      	str	r2, [r3, #8]
 8004dd2:	60da      	str	r2, [r3, #12]
 8004dd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	f003 fc6c 	bl	80086b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8004ddc:	2321      	movs	r3, #33	@ 0x21
 8004dde:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004de0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004de4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004de6:	2301      	movs	r3, #1
 8004de8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004dea:	2302      	movs	r3, #2
 8004dec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004dee:	2303      	movs	r3, #3
 8004df0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004df2:	2304      	movs	r3, #4
 8004df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004df6:	2355      	movs	r3, #85	@ 0x55
 8004df8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8004dfe:	2308      	movs	r3, #8
 8004e00:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004e02:	2302      	movs	r3, #2
 8004e04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e06:	f107 0318 	add.w	r3, r7, #24
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f003 fd06 	bl	800881c <HAL_RCC_OscConfig>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004e16:	f000 f845 	bl	8004ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e1a:	230f      	movs	r3, #15
 8004e1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004e26:	2300      	movs	r3, #0
 8004e28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004e2e:	1d3b      	adds	r3, r7, #4
 8004e30:	2104      	movs	r1, #4
 8004e32:	4618      	mov	r0, r3
 8004e34:	f004 f804 	bl	8008e40 <HAL_RCC_ClockConfig>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004e3e:	f000 f831 	bl	8004ea4 <Error_Handler>
  }
}
 8004e42:	bf00      	nop
 8004e44:	3750      	adds	r7, #80	@ 0x50
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */

void configureTimerForRunTimeStats(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerCounts = 0;
 8004e50:	4b03      	ldr	r3, [pc, #12]	@ (8004e60 <configureTimerForRunTimeStats+0x14>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim16);
 8004e56:	4803      	ldr	r0, [pc, #12]	@ (8004e64 <configureTimerForRunTimeStats+0x18>)
 8004e58:	f005 fa86 	bl	800a368 <HAL_TIM_Base_Start_IT>
}
 8004e5c:	bf00      	nop
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	200057c4 	.word	0x200057c4
 8004e64:	2000587c 	.word	0x2000587c

08004e68 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerCounts;
 8004e6c:	4b03      	ldr	r3, [pc, #12]	@ (8004e7c <getRunTimeCounterValue+0x14>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	200057c4 	.word	0x200057c4

08004e80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a04      	ldr	r2, [pc, #16]	@ (8004ea0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d101      	bne.n	8004e96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004e92:	f000 fb83 	bl	800559c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004e96:	bf00      	nop
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40001000 	.word	0x40001000

08004ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ea8:	b672      	cpsid	i
}
 8004eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004eac:	bf00      	nop
 8004eae:	e7fd      	b.n	8004eac <Error_Handler+0x8>

08004eb0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f24 <MX_SPI1_Init+0x74>)
 8004eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8004f28 <MX_SPI1_Init+0x78>)
 8004eb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004eba:	4b1a      	ldr	r3, [pc, #104]	@ (8004f24 <MX_SPI1_Init+0x74>)
 8004ebc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004ec0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004ec2:	4b18      	ldr	r3, [pc, #96]	@ (8004f24 <MX_SPI1_Init+0x74>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ec8:	4b16      	ldr	r3, [pc, #88]	@ (8004f24 <MX_SPI1_Init+0x74>)
 8004eca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004ece:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ed0:	4b14      	ldr	r3, [pc, #80]	@ (8004f24 <MX_SPI1_Init+0x74>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ed6:	4b13      	ldr	r3, [pc, #76]	@ (8004f24 <MX_SPI1_Init+0x74>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004edc:	4b11      	ldr	r3, [pc, #68]	@ (8004f24 <MX_SPI1_Init+0x74>)
 8004ede:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ee2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8004f24 <MX_SPI1_Init+0x74>)
 8004ee6:	2218      	movs	r2, #24
 8004ee8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004eea:	4b0e      	ldr	r3, [pc, #56]	@ (8004f24 <MX_SPI1_Init+0x74>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8004f24 <MX_SPI1_Init+0x74>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8004f24 <MX_SPI1_Init+0x74>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004efc:	4b09      	ldr	r3, [pc, #36]	@ (8004f24 <MX_SPI1_Init+0x74>)
 8004efe:	2207      	movs	r2, #7
 8004f00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004f02:	4b08      	ldr	r3, [pc, #32]	@ (8004f24 <MX_SPI1_Init+0x74>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004f08:	4b06      	ldr	r3, [pc, #24]	@ (8004f24 <MX_SPI1_Init+0x74>)
 8004f0a:	2208      	movs	r2, #8
 8004f0c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004f0e:	4805      	ldr	r0, [pc, #20]	@ (8004f24 <MX_SPI1_Init+0x74>)
 8004f10:	f004 fc2e 	bl	8009770 <HAL_SPI_Init>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004f1a:	f7ff ffc3 	bl	8004ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004f1e:	bf00      	nop
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	200057c8 	.word	0x200057c8
 8004f28:	40013000 	.word	0x40013000

08004f2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08a      	sub	sp, #40	@ 0x28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f34:	f107 0314 	add.w	r3, r7, #20
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	605a      	str	r2, [r3, #4]
 8004f3e:	609a      	str	r2, [r3, #8]
 8004f40:	60da      	str	r2, [r3, #12]
 8004f42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a17      	ldr	r2, [pc, #92]	@ (8004fa8 <HAL_SPI_MspInit+0x7c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d128      	bne.n	8004fa0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f4e:	4b17      	ldr	r3, [pc, #92]	@ (8004fac <HAL_SPI_MspInit+0x80>)
 8004f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f52:	4a16      	ldr	r2, [pc, #88]	@ (8004fac <HAL_SPI_MspInit+0x80>)
 8004f54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f58:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f5a:	4b14      	ldr	r3, [pc, #80]	@ (8004fac <HAL_SPI_MspInit+0x80>)
 8004f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f66:	4b11      	ldr	r3, [pc, #68]	@ (8004fac <HAL_SPI_MspInit+0x80>)
 8004f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f6a:	4a10      	ldr	r2, [pc, #64]	@ (8004fac <HAL_SPI_MspInit+0x80>)
 8004f6c:	f043 0301 	orr.w	r3, r3, #1
 8004f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f72:	4b0e      	ldr	r3, [pc, #56]	@ (8004fac <HAL_SPI_MspInit+0x80>)
 8004f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004f7e:	23e0      	movs	r3, #224	@ 0xe0
 8004f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f82:	2302      	movs	r3, #2
 8004f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004f8e:	2305      	movs	r3, #5
 8004f90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f92:	f107 0314 	add.w	r3, r7, #20
 8004f96:	4619      	mov	r1, r3
 8004f98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f9c:	f000 feb4 	bl	8005d08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	3728      	adds	r7, #40	@ 0x28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40013000 	.word	0x40013000
 8004fac:	40021000 	.word	0x40021000

08004fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fb6:	4b12      	ldr	r3, [pc, #72]	@ (8005000 <HAL_MspInit+0x50>)
 8004fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fba:	4a11      	ldr	r2, [pc, #68]	@ (8005000 <HAL_MspInit+0x50>)
 8004fbc:	f043 0301 	orr.w	r3, r3, #1
 8004fc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8004fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8005000 <HAL_MspInit+0x50>)
 8004fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	607b      	str	r3, [r7, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fce:	4b0c      	ldr	r3, [pc, #48]	@ (8005000 <HAL_MspInit+0x50>)
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd2:	4a0b      	ldr	r2, [pc, #44]	@ (8005000 <HAL_MspInit+0x50>)
 8004fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fda:	4b09      	ldr	r3, [pc, #36]	@ (8005000 <HAL_MspInit+0x50>)
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fe2:	603b      	str	r3, [r7, #0]
 8004fe4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	210f      	movs	r1, #15
 8004fea:	f06f 0001 	mvn.w	r0, #1
 8004fee:	f000 fbab 	bl	8005748 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004ff2:	f003 fc03 	bl	80087fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ff6:	bf00      	nop
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40021000 	.word	0x40021000

08005004 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08c      	sub	sp, #48	@ 0x30
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800500c:	2300      	movs	r3, #0
 800500e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005014:	4b2c      	ldr	r3, [pc, #176]	@ (80050c8 <HAL_InitTick+0xc4>)
 8005016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005018:	4a2b      	ldr	r2, [pc, #172]	@ (80050c8 <HAL_InitTick+0xc4>)
 800501a:	f043 0310 	orr.w	r3, r3, #16
 800501e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005020:	4b29      	ldr	r3, [pc, #164]	@ (80050c8 <HAL_InitTick+0xc4>)
 8005022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	60bb      	str	r3, [r7, #8]
 800502a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800502c:	f107 020c 	add.w	r2, r7, #12
 8005030:	f107 0310 	add.w	r3, r7, #16
 8005034:	4611      	mov	r1, r2
 8005036:	4618      	mov	r0, r3
 8005038:	f004 f8d6 	bl	80091e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800503c:	f004 f8a8 	bl	8009190 <HAL_RCC_GetPCLK1Freq>
 8005040:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005044:	4a21      	ldr	r2, [pc, #132]	@ (80050cc <HAL_InitTick+0xc8>)
 8005046:	fba2 2303 	umull	r2, r3, r2, r3
 800504a:	0c9b      	lsrs	r3, r3, #18
 800504c:	3b01      	subs	r3, #1
 800504e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005050:	4b1f      	ldr	r3, [pc, #124]	@ (80050d0 <HAL_InitTick+0xcc>)
 8005052:	4a20      	ldr	r2, [pc, #128]	@ (80050d4 <HAL_InitTick+0xd0>)
 8005054:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005056:	4b1e      	ldr	r3, [pc, #120]	@ (80050d0 <HAL_InitTick+0xcc>)
 8005058:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800505c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800505e:	4a1c      	ldr	r2, [pc, #112]	@ (80050d0 <HAL_InitTick+0xcc>)
 8005060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005062:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005064:	4b1a      	ldr	r3, [pc, #104]	@ (80050d0 <HAL_InitTick+0xcc>)
 8005066:	2200      	movs	r2, #0
 8005068:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800506a:	4b19      	ldr	r3, [pc, #100]	@ (80050d0 <HAL_InitTick+0xcc>)
 800506c:	2200      	movs	r2, #0
 800506e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8005070:	4817      	ldr	r0, [pc, #92]	@ (80050d0 <HAL_InitTick+0xcc>)
 8005072:	f005 f921 	bl	800a2b8 <HAL_TIM_Base_Init>
 8005076:	4603      	mov	r3, r0
 8005078:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800507c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005080:	2b00      	cmp	r3, #0
 8005082:	d11b      	bne.n	80050bc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005084:	4812      	ldr	r0, [pc, #72]	@ (80050d0 <HAL_InitTick+0xcc>)
 8005086:	f005 f96f 	bl	800a368 <HAL_TIM_Base_Start_IT>
 800508a:	4603      	mov	r3, r0
 800508c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8005090:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005094:	2b00      	cmp	r3, #0
 8005096:	d111      	bne.n	80050bc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005098:	2036      	movs	r0, #54	@ 0x36
 800509a:	f000 fb6f 	bl	800577c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b0f      	cmp	r3, #15
 80050a2:	d808      	bhi.n	80050b6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80050a4:	2200      	movs	r2, #0
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	2036      	movs	r0, #54	@ 0x36
 80050aa:	f000 fb4d 	bl	8005748 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80050ae:	4a0a      	ldr	r2, [pc, #40]	@ (80050d8 <HAL_InitTick+0xd4>)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	e002      	b.n	80050bc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80050bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3730      	adds	r7, #48	@ 0x30
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40021000 	.word	0x40021000
 80050cc:	431bde83 	.word	0x431bde83
 80050d0:	2000582c 	.word	0x2000582c
 80050d4:	40001000 	.word	0x40001000
 80050d8:	20000014 	.word	0x20000014

080050dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80050e0:	bf00      	nop
 80050e2:	e7fd      	b.n	80050e0 <NMI_Handler+0x4>

080050e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050e8:	bf00      	nop
 80050ea:	e7fd      	b.n	80050e8 <HardFault_Handler+0x4>

080050ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050f0:	bf00      	nop
 80050f2:	e7fd      	b.n	80050f0 <MemManage_Handler+0x4>

080050f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050f8:	bf00      	nop
 80050fa:	e7fd      	b.n	80050f8 <BusFault_Handler+0x4>

080050fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005100:	bf00      	nop
 8005102:	e7fd      	b.n	8005100 <UsageFault_Handler+0x4>

08005104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005108:	bf00      	nop
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT_Pin);
 8005116:	2002      	movs	r0, #2
 8005118:	f000 ff90 	bl	800603c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800511c:	bf00      	nop
 800511e:	bd80      	pop	{r7, pc}

08005120 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005124:	4802      	ldr	r0, [pc, #8]	@ (8005130 <USB_LP_IRQHandler+0x10>)
 8005126:	f001 feb4 	bl	8006e92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800512a:	bf00      	nop
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20018234 	.word	0x20018234

08005134 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  ++ulHighFrequencyTimerCounts;		// Needed for FREERTOS stats
 8005138:	4b04      	ldr	r3, [pc, #16]	@ (800514c <TIM1_UP_TIM16_IRQHandler+0x18>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3301      	adds	r3, #1
 800513e:	4a03      	ldr	r2, [pc, #12]	@ (800514c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005140:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005142:	4803      	ldr	r0, [pc, #12]	@ (8005150 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8005144:	f005 f988 	bl	800a458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005148:	bf00      	nop
 800514a:	bd80      	pop	{r7, pc}
 800514c:	200057c4 	.word	0x200057c4
 8005150:	2000587c 	.word	0x2000587c

08005154 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAG_DRDY_Pin);
 8005158:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800515c:	f000 ff6e 	bl	800603c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BMP_INT_Pin);
 8005160:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005164:	f000 ff6a 	bl	800603c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INT_Pin);
 8005168:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800516c:	f000 ff66 	bl	800603c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005170:	bf00      	nop
 8005172:	bd80      	pop	{r7, pc}

08005174 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005178:	4802      	ldr	r0, [pc, #8]	@ (8005184 <TIM6_DAC_IRQHandler+0x10>)
 800517a:	f005 f96d 	bl	800a458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800517e:	bf00      	nop
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	2000582c 	.word	0x2000582c

08005188 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  return 1;
 800518c:	2301      	movs	r3, #1
}
 800518e:	4618      	mov	r0, r3
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <_kill>:

int _kill(int pid, int sig)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80051a2:	f01a fef5 	bl	801ff90 <__errno>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2216      	movs	r2, #22
 80051aa:	601a      	str	r2, [r3, #0]
  return -1;
 80051ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <_exit>:

void _exit (int status)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80051c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff ffe7 	bl	8005198 <_kill>
  while (1) {}    /* Make sure we hang here */
 80051ca:	bf00      	nop
 80051cc:	e7fd      	b.n	80051ca <_exit+0x12>

080051ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b086      	sub	sp, #24
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]
 80051de:	e00a      	b.n	80051f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80051e0:	f3af 8000 	nop.w
 80051e4:	4601      	mov	r1, r0
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	60ba      	str	r2, [r7, #8]
 80051ec:	b2ca      	uxtb	r2, r1
 80051ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	3301      	adds	r3, #1
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	dbf0      	blt.n	80051e0 <_read+0x12>
  }

  return len;
 80051fe:	687b      	ldr	r3, [r7, #4]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005214:	2300      	movs	r3, #0
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	e009      	b.n	800522e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	60ba      	str	r2, [r7, #8]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	3301      	adds	r3, #1
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	429a      	cmp	r2, r3
 8005234:	dbf1      	blt.n	800521a <_write+0x12>
  }
  return len;
 8005236:	687b      	ldr	r3, [r7, #4]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <_close>:

int _close(int file)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005248:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005268:	605a      	str	r2, [r3, #4]
  return 0;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <_isatty>:

int _isatty(int file)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005280:	2301      	movs	r3, #1
}
 8005282:	4618      	mov	r0, r3
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800528e:	b480      	push	{r7}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80052b0:	4a14      	ldr	r2, [pc, #80]	@ (8005304 <_sbrk+0x5c>)
 80052b2:	4b15      	ldr	r3, [pc, #84]	@ (8005308 <_sbrk+0x60>)
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80052bc:	4b13      	ldr	r3, [pc, #76]	@ (800530c <_sbrk+0x64>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d102      	bne.n	80052ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052c4:	4b11      	ldr	r3, [pc, #68]	@ (800530c <_sbrk+0x64>)
 80052c6:	4a12      	ldr	r2, [pc, #72]	@ (8005310 <_sbrk+0x68>)
 80052c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052ca:	4b10      	ldr	r3, [pc, #64]	@ (800530c <_sbrk+0x64>)
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4413      	add	r3, r2
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d207      	bcs.n	80052e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052d8:	f01a fe5a 	bl	801ff90 <__errno>
 80052dc:	4603      	mov	r3, r0
 80052de:	220c      	movs	r2, #12
 80052e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052e6:	e009      	b.n	80052fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052e8:	4b08      	ldr	r3, [pc, #32]	@ (800530c <_sbrk+0x64>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052ee:	4b07      	ldr	r3, [pc, #28]	@ (800530c <_sbrk+0x64>)
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4413      	add	r3, r2
 80052f6:	4a05      	ldr	r2, [pc, #20]	@ (800530c <_sbrk+0x64>)
 80052f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052fa:	68fb      	ldr	r3, [r7, #12]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	20020000 	.word	0x20020000
 8005308:	00000400 	.word	0x00000400
 800530c:	20005878 	.word	0x20005878
 8005310:	20018880 	.word	0x20018880

08005314 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005318:	4b06      	ldr	r3, [pc, #24]	@ (8005334 <SystemInit+0x20>)
 800531a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800531e:	4a05      	ldr	r2, [pc, #20]	@ (8005334 <SystemInit+0x20>)
 8005320:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005324:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005328:	bf00      	nop
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	e000ed00 	.word	0xe000ed00

08005338 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800533c:	4b0f      	ldr	r3, [pc, #60]	@ (800537c <MX_TIM16_Init+0x44>)
 800533e:	4a10      	ldr	r2, [pc, #64]	@ (8005380 <MX_TIM16_Init+0x48>)
 8005340:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8005342:	4b0e      	ldr	r3, [pc, #56]	@ (800537c <MX_TIM16_Init+0x44>)
 8005344:	2200      	movs	r2, #0
 8005346:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005348:	4b0c      	ldr	r3, [pc, #48]	@ (800537c <MX_TIM16_Init+0x44>)
 800534a:	2200      	movs	r2, #0
 800534c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1699;
 800534e:	4b0b      	ldr	r3, [pc, #44]	@ (800537c <MX_TIM16_Init+0x44>)
 8005350:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8005354:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005356:	4b09      	ldr	r3, [pc, #36]	@ (800537c <MX_TIM16_Init+0x44>)
 8005358:	2200      	movs	r2, #0
 800535a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800535c:	4b07      	ldr	r3, [pc, #28]	@ (800537c <MX_TIM16_Init+0x44>)
 800535e:	2200      	movs	r2, #0
 8005360:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005362:	4b06      	ldr	r3, [pc, #24]	@ (800537c <MX_TIM16_Init+0x44>)
 8005364:	2200      	movs	r2, #0
 8005366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005368:	4804      	ldr	r0, [pc, #16]	@ (800537c <MX_TIM16_Init+0x44>)
 800536a:	f004 ffa5 	bl	800a2b8 <HAL_TIM_Base_Init>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005374:	f7ff fd96 	bl	8004ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005378:	bf00      	nop
 800537a:	bd80      	pop	{r7, pc}
 800537c:	2000587c 	.word	0x2000587c
 8005380:	40014400 	.word	0x40014400

08005384 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a0d      	ldr	r2, [pc, #52]	@ (80053c8 <HAL_TIM_Base_MspInit+0x44>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d113      	bne.n	80053be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005396:	4b0d      	ldr	r3, [pc, #52]	@ (80053cc <HAL_TIM_Base_MspInit+0x48>)
 8005398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800539a:	4a0c      	ldr	r2, [pc, #48]	@ (80053cc <HAL_TIM_Base_MspInit+0x48>)
 800539c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80053a2:	4b0a      	ldr	r3, [pc, #40]	@ (80053cc <HAL_TIM_Base_MspInit+0x48>)
 80053a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 80053ae:	2200      	movs	r2, #0
 80053b0:	2105      	movs	r1, #5
 80053b2:	2019      	movs	r0, #25
 80053b4:	f000 f9c8 	bl	8005748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80053b8:	2019      	movs	r0, #25
 80053ba:	f000 f9df 	bl	800577c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80053be:	bf00      	nop
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	40014400 	.word	0x40014400
 80053cc:	40021000 	.word	0x40021000

080053d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80053d4:	4b22      	ldr	r3, [pc, #136]	@ (8005460 <MX_USART2_UART_Init+0x90>)
 80053d6:	4a23      	ldr	r2, [pc, #140]	@ (8005464 <MX_USART2_UART_Init+0x94>)
 80053d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80053da:	4b21      	ldr	r3, [pc, #132]	@ (8005460 <MX_USART2_UART_Init+0x90>)
 80053dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80053e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80053e2:	4b1f      	ldr	r3, [pc, #124]	@ (8005460 <MX_USART2_UART_Init+0x90>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80053e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005460 <MX_USART2_UART_Init+0x90>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80053ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005460 <MX_USART2_UART_Init+0x90>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80053f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005460 <MX_USART2_UART_Init+0x90>)
 80053f6:	220c      	movs	r2, #12
 80053f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053fa:	4b19      	ldr	r3, [pc, #100]	@ (8005460 <MX_USART2_UART_Init+0x90>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005400:	4b17      	ldr	r3, [pc, #92]	@ (8005460 <MX_USART2_UART_Init+0x90>)
 8005402:	2200      	movs	r2, #0
 8005404:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005406:	4b16      	ldr	r3, [pc, #88]	@ (8005460 <MX_USART2_UART_Init+0x90>)
 8005408:	2200      	movs	r2, #0
 800540a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800540c:	4b14      	ldr	r3, [pc, #80]	@ (8005460 <MX_USART2_UART_Init+0x90>)
 800540e:	2200      	movs	r2, #0
 8005410:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005412:	4b13      	ldr	r3, [pc, #76]	@ (8005460 <MX_USART2_UART_Init+0x90>)
 8005414:	2200      	movs	r2, #0
 8005416:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005418:	4811      	ldr	r0, [pc, #68]	@ (8005460 <MX_USART2_UART_Init+0x90>)
 800541a:	f005 fa8f 	bl	800a93c <HAL_UART_Init>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005424:	f7ff fd3e 	bl	8004ea4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005428:	2100      	movs	r1, #0
 800542a:	480d      	ldr	r0, [pc, #52]	@ (8005460 <MX_USART2_UART_Init+0x90>)
 800542c:	f006 f82a 	bl	800b484 <HAL_UARTEx_SetTxFifoThreshold>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005436:	f7ff fd35 	bl	8004ea4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800543a:	2100      	movs	r1, #0
 800543c:	4808      	ldr	r0, [pc, #32]	@ (8005460 <MX_USART2_UART_Init+0x90>)
 800543e:	f006 f85f 	bl	800b500 <HAL_UARTEx_SetRxFifoThreshold>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005448:	f7ff fd2c 	bl	8004ea4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800544c:	4804      	ldr	r0, [pc, #16]	@ (8005460 <MX_USART2_UART_Init+0x90>)
 800544e:	f005 ffe0 	bl	800b412 <HAL_UARTEx_DisableFifoMode>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005458:	f7ff fd24 	bl	8004ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800545c:	bf00      	nop
 800545e:	bd80      	pop	{r7, pc}
 8005460:	200058c8 	.word	0x200058c8
 8005464:	40004400 	.word	0x40004400

08005468 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b09e      	sub	sp, #120	@ 0x78
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005470:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	605a      	str	r2, [r3, #4]
 800547a:	609a      	str	r2, [r3, #8]
 800547c:	60da      	str	r2, [r3, #12]
 800547e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005480:	f107 0310 	add.w	r3, r7, #16
 8005484:	2254      	movs	r2, #84	@ 0x54
 8005486:	2100      	movs	r1, #0
 8005488:	4618      	mov	r0, r3
 800548a:	f01a fc84 	bl	801fd96 <memset>
  if(uartHandle->Instance==USART2)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1f      	ldr	r2, [pc, #124]	@ (8005510 <HAL_UART_MspInit+0xa8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d136      	bne.n	8005506 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005498:	2302      	movs	r3, #2
 800549a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800549c:	2300      	movs	r3, #0
 800549e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054a0:	f107 0310 	add.w	r3, r7, #16
 80054a4:	4618      	mov	r0, r3
 80054a6:	f003 ff15 	bl	80092d4 <HAL_RCCEx_PeriphCLKConfig>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80054b0:	f7ff fcf8 	bl	8004ea4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80054b4:	4b17      	ldr	r3, [pc, #92]	@ (8005514 <HAL_UART_MspInit+0xac>)
 80054b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b8:	4a16      	ldr	r2, [pc, #88]	@ (8005514 <HAL_UART_MspInit+0xac>)
 80054ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054be:	6593      	str	r3, [r2, #88]	@ 0x58
 80054c0:	4b14      	ldr	r3, [pc, #80]	@ (8005514 <HAL_UART_MspInit+0xac>)
 80054c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054cc:	4b11      	ldr	r3, [pc, #68]	@ (8005514 <HAL_UART_MspInit+0xac>)
 80054ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054d0:	4a10      	ldr	r2, [pc, #64]	@ (8005514 <HAL_UART_MspInit+0xac>)
 80054d2:	f043 0301 	orr.w	r3, r3, #1
 80054d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005514 <HAL_UART_MspInit+0xac>)
 80054da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	60bb      	str	r3, [r7, #8]
 80054e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80054e4:	230c      	movs	r3, #12
 80054e6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e8:	2302      	movs	r3, #2
 80054ea:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ec:	2300      	movs	r3, #0
 80054ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054f0:	2300      	movs	r3, #0
 80054f2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80054f4:	2307      	movs	r3, #7
 80054f6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80054fc:	4619      	mov	r1, r3
 80054fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005502:	f000 fc01 	bl	8005d08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005506:	bf00      	nop
 8005508:	3778      	adds	r7, #120	@ 0x78
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	40004400 	.word	0x40004400
 8005514:	40021000 	.word	0x40021000

08005518 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005518:	480d      	ldr	r0, [pc, #52]	@ (8005550 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800551a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800551c:	f7ff fefa 	bl	8005314 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005520:	480c      	ldr	r0, [pc, #48]	@ (8005554 <LoopForever+0x6>)
  ldr r1, =_edata
 8005522:	490d      	ldr	r1, [pc, #52]	@ (8005558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005524:	4a0d      	ldr	r2, [pc, #52]	@ (800555c <LoopForever+0xe>)
  movs r3, #0
 8005526:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005528:	e002      	b.n	8005530 <LoopCopyDataInit>

0800552a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800552a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800552c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800552e:	3304      	adds	r3, #4

08005530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005534:	d3f9      	bcc.n	800552a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005536:	4a0a      	ldr	r2, [pc, #40]	@ (8005560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005538:	4c0a      	ldr	r4, [pc, #40]	@ (8005564 <LoopForever+0x16>)
  movs r3, #0
 800553a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800553c:	e001      	b.n	8005542 <LoopFillZerobss>

0800553e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800553e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005540:	3204      	adds	r2, #4

08005542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005544:	d3fb      	bcc.n	800553e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005546:	f01a fd29 	bl	801ff9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800554a:	f7ff fc13 	bl	8004d74 <main>

0800554e <LoopForever>:

LoopForever:
    b LoopForever
 800554e:	e7fe      	b.n	800554e <LoopForever>
  ldr   r0, =_estack
 8005550:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005558:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 800555c:	08023010 	.word	0x08023010
  ldr r2, =_sbss
 8005560:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 8005564:	20018880 	.word	0x20018880

08005568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005568:	e7fe      	b.n	8005568 <ADC1_2_IRQHandler>

0800556a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b082      	sub	sp, #8
 800556e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005574:	2003      	movs	r0, #3
 8005576:	f000 f8dc 	bl	8005732 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800557a:	200f      	movs	r0, #15
 800557c:	f7ff fd42 	bl	8005004 <HAL_InitTick>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	71fb      	strb	r3, [r7, #7]
 800558a:	e001      	b.n	8005590 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800558c:	f7ff fd10 	bl	8004fb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005590:	79fb      	ldrb	r3, [r7, #7]

}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055a0:	4b05      	ldr	r3, [pc, #20]	@ (80055b8 <HAL_IncTick+0x1c>)
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	4b05      	ldr	r3, [pc, #20]	@ (80055bc <HAL_IncTick+0x20>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4413      	add	r3, r2
 80055aa:	4a03      	ldr	r2, [pc, #12]	@ (80055b8 <HAL_IncTick+0x1c>)
 80055ac:	6013      	str	r3, [r2, #0]
}
 80055ae:	bf00      	nop
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	2000595c 	.word	0x2000595c
 80055bc:	20000018 	.word	0x20000018

080055c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
  return uwTick;
 80055c4:	4b03      	ldr	r3, [pc, #12]	@ (80055d4 <HAL_GetTick+0x14>)
 80055c6:	681b      	ldr	r3, [r3, #0]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	2000595c 	.word	0x2000595c

080055d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055e8:	4b0c      	ldr	r3, [pc, #48]	@ (800561c <__NVIC_SetPriorityGrouping+0x44>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80055f4:	4013      	ands	r3, r2
 80055f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005600:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800560a:	4a04      	ldr	r2, [pc, #16]	@ (800561c <__NVIC_SetPriorityGrouping+0x44>)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	60d3      	str	r3, [r2, #12]
}
 8005610:	bf00      	nop
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	e000ed00 	.word	0xe000ed00

08005620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005624:	4b04      	ldr	r3, [pc, #16]	@ (8005638 <__NVIC_GetPriorityGrouping+0x18>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	0a1b      	lsrs	r3, r3, #8
 800562a:	f003 0307 	and.w	r3, r3, #7
}
 800562e:	4618      	mov	r0, r3
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	e000ed00 	.word	0xe000ed00

0800563c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	4603      	mov	r3, r0
 8005644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800564a:	2b00      	cmp	r3, #0
 800564c:	db0b      	blt.n	8005666 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800564e:	79fb      	ldrb	r3, [r7, #7]
 8005650:	f003 021f 	and.w	r2, r3, #31
 8005654:	4907      	ldr	r1, [pc, #28]	@ (8005674 <__NVIC_EnableIRQ+0x38>)
 8005656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800565a:	095b      	lsrs	r3, r3, #5
 800565c:	2001      	movs	r0, #1
 800565e:	fa00 f202 	lsl.w	r2, r0, r2
 8005662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	e000e100 	.word	0xe000e100

08005678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	4603      	mov	r3, r0
 8005680:	6039      	str	r1, [r7, #0]
 8005682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005688:	2b00      	cmp	r3, #0
 800568a:	db0a      	blt.n	80056a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	b2da      	uxtb	r2, r3
 8005690:	490c      	ldr	r1, [pc, #48]	@ (80056c4 <__NVIC_SetPriority+0x4c>)
 8005692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005696:	0112      	lsls	r2, r2, #4
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	440b      	add	r3, r1
 800569c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056a0:	e00a      	b.n	80056b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	4908      	ldr	r1, [pc, #32]	@ (80056c8 <__NVIC_SetPriority+0x50>)
 80056a8:	79fb      	ldrb	r3, [r7, #7]
 80056aa:	f003 030f 	and.w	r3, r3, #15
 80056ae:	3b04      	subs	r3, #4
 80056b0:	0112      	lsls	r2, r2, #4
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	440b      	add	r3, r1
 80056b6:	761a      	strb	r2, [r3, #24]
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	e000e100 	.word	0xe000e100
 80056c8:	e000ed00 	.word	0xe000ed00

080056cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b089      	sub	sp, #36	@ 0x24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	f1c3 0307 	rsb	r3, r3, #7
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	bf28      	it	cs
 80056ea:	2304      	movcs	r3, #4
 80056ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	3304      	adds	r3, #4
 80056f2:	2b06      	cmp	r3, #6
 80056f4:	d902      	bls.n	80056fc <NVIC_EncodePriority+0x30>
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	3b03      	subs	r3, #3
 80056fa:	e000      	b.n	80056fe <NVIC_EncodePriority+0x32>
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005700:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	fa02 f303 	lsl.w	r3, r2, r3
 800570a:	43da      	mvns	r2, r3
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	401a      	ands	r2, r3
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005714:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	fa01 f303 	lsl.w	r3, r1, r3
 800571e:	43d9      	mvns	r1, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005724:	4313      	orrs	r3, r2
         );
}
 8005726:	4618      	mov	r0, r3
 8005728:	3724      	adds	r7, #36	@ 0x24
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b082      	sub	sp, #8
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff ff4c 	bl	80055d8 <__NVIC_SetPriorityGrouping>
}
 8005740:	bf00      	nop
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	4603      	mov	r3, r0
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005756:	f7ff ff63 	bl	8005620 <__NVIC_GetPriorityGrouping>
 800575a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	68b9      	ldr	r1, [r7, #8]
 8005760:	6978      	ldr	r0, [r7, #20]
 8005762:	f7ff ffb3 	bl	80056cc <NVIC_EncodePriority>
 8005766:	4602      	mov	r2, r0
 8005768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800576c:	4611      	mov	r1, r2
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff ff82 	bl	8005678 <__NVIC_SetPriority>
}
 8005774:	bf00      	nop
 8005776:	3718      	adds	r7, #24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	4603      	mov	r3, r0
 8005784:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff ff56 	bl	800563c <__NVIC_EnableIRQ>
}
 8005790:	bf00      	nop
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e054      	b.n	8005854 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	7f5b      	ldrb	r3, [r3, #29]
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d105      	bne.n	80057c0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fe fff0 	bl	80047a0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	791b      	ldrb	r3, [r3, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10c      	bne.n	80057e8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a22      	ldr	r2, [pc, #136]	@ (800585c <HAL_CRC_Init+0xc4>)
 80057d4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0218 	bic.w	r2, r2, #24
 80057e4:	609a      	str	r2, [r3, #8]
 80057e6:	e00c      	b.n	8005802 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6899      	ldr	r1, [r3, #8]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	461a      	mov	r2, r3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f834 	bl	8005860 <HAL_CRCEx_Polynomial_Set>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e028      	b.n	8005854 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	795b      	ldrb	r3, [r3, #5]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d105      	bne.n	8005816 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005812:	611a      	str	r2, [r3, #16]
 8005814:	e004      	b.n	8005820 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6912      	ldr	r2, [r2, #16]
 800581e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695a      	ldr	r2, [r3, #20]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699a      	ldr	r2, [r3, #24]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	04c11db7 	.word	0x04c11db7

08005860 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005870:	231f      	movs	r3, #31
 8005872:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d102      	bne.n	8005884 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	75fb      	strb	r3, [r7, #23]
 8005882:	e063      	b.n	800594c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005884:	bf00      	nop
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1e5a      	subs	r2, r3, #1
 800588a:	613a      	str	r2, [r7, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d009      	beq.n	80058a4 <HAL_CRCEx_Polynomial_Set+0x44>
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f003 031f 	and.w	r3, r3, #31
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	fa22 f303 	lsr.w	r3, r2, r3
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0f0      	beq.n	8005886 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b18      	cmp	r3, #24
 80058a8:	d846      	bhi.n	8005938 <HAL_CRCEx_Polynomial_Set+0xd8>
 80058aa:	a201      	add	r2, pc, #4	@ (adr r2, 80058b0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80058ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b0:	0800593f 	.word	0x0800593f
 80058b4:	08005939 	.word	0x08005939
 80058b8:	08005939 	.word	0x08005939
 80058bc:	08005939 	.word	0x08005939
 80058c0:	08005939 	.word	0x08005939
 80058c4:	08005939 	.word	0x08005939
 80058c8:	08005939 	.word	0x08005939
 80058cc:	08005939 	.word	0x08005939
 80058d0:	0800592d 	.word	0x0800592d
 80058d4:	08005939 	.word	0x08005939
 80058d8:	08005939 	.word	0x08005939
 80058dc:	08005939 	.word	0x08005939
 80058e0:	08005939 	.word	0x08005939
 80058e4:	08005939 	.word	0x08005939
 80058e8:	08005939 	.word	0x08005939
 80058ec:	08005939 	.word	0x08005939
 80058f0:	08005921 	.word	0x08005921
 80058f4:	08005939 	.word	0x08005939
 80058f8:	08005939 	.word	0x08005939
 80058fc:	08005939 	.word	0x08005939
 8005900:	08005939 	.word	0x08005939
 8005904:	08005939 	.word	0x08005939
 8005908:	08005939 	.word	0x08005939
 800590c:	08005939 	.word	0x08005939
 8005910:	08005915 	.word	0x08005915
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2b06      	cmp	r3, #6
 8005918:	d913      	bls.n	8005942 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800591e:	e010      	b.n	8005942 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	2b07      	cmp	r3, #7
 8005924:	d90f      	bls.n	8005946 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800592a:	e00c      	b.n	8005946 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	2b0f      	cmp	r3, #15
 8005930:	d90b      	bls.n	800594a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005936:	e008      	b.n	800594a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	75fb      	strb	r3, [r7, #23]
        break;
 800593c:	e006      	b.n	800594c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800593e:	bf00      	nop
 8005940:	e004      	b.n	800594c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005942:	bf00      	nop
 8005944:	e002      	b.n	800594c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005946:	bf00      	nop
 8005948:	e000      	b.n	800594c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800594a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800594c:	7dfb      	ldrb	r3, [r7, #23]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10d      	bne.n	800596e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f023 0118 	bic.w	r1, r3, #24
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	430a      	orrs	r2, r1
 800596c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800596e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005970:	4618      	mov	r0, r3
 8005972:	371c      	adds	r7, #28
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e147      	b.n	8005c1e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d106      	bne.n	80059a8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7fe ffa8 	bl	80048f8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0210 	bic.w	r2, r2, #16
 80059b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059b8:	f7ff fe02 	bl	80055c0 <HAL_GetTick>
 80059bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80059be:	e012      	b.n	80059e6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80059c0:	f7ff fdfe 	bl	80055c0 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b0a      	cmp	r3, #10
 80059cc:	d90b      	bls.n	80059e6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059d2:	f043 0201 	orr.w	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2203      	movs	r2, #3
 80059de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e11b      	b.n	8005c1e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	f003 0308 	and.w	r3, r3, #8
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d0e5      	beq.n	80059c0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699a      	ldr	r2, [r3, #24]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0201 	orr.w	r2, r2, #1
 8005a02:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a04:	f7ff fddc 	bl	80055c0 <HAL_GetTick>
 8005a08:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005a0a:	e012      	b.n	8005a32 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005a0c:	f7ff fdd8 	bl	80055c0 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b0a      	cmp	r3, #10
 8005a18:	d90b      	bls.n	8005a32 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a1e:	f043 0201 	orr.w	r2, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2203      	movs	r2, #3
 8005a2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e0f5      	b.n	8005c1e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0e5      	beq.n	8005a0c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699a      	ldr	r2, [r3, #24]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0202 	orr.w	r2, r2, #2
 8005a4e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a74      	ldr	r2, [pc, #464]	@ (8005c28 <HAL_FDCAN_Init+0x2ac>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d103      	bne.n	8005a62 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005a5a:	4a74      	ldr	r2, [pc, #464]	@ (8005c2c <HAL_FDCAN_Init+0x2b0>)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	7c1b      	ldrb	r3, [r3, #16]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d108      	bne.n	8005a7c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	699a      	ldr	r2, [r3, #24]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a78:	619a      	str	r2, [r3, #24]
 8005a7a:	e007      	b.n	8005a8c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a8a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	7c5b      	ldrb	r3, [r3, #17]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d108      	bne.n	8005aa6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005aa2:	619a      	str	r2, [r3, #24]
 8005aa4:	e007      	b.n	8005ab6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	699a      	ldr	r2, [r3, #24]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ab4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	7c9b      	ldrb	r3, [r3, #18]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d108      	bne.n	8005ad0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699a      	ldr	r2, [r3, #24]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005acc:	619a      	str	r2, [r3, #24]
 8005ace:	e007      	b.n	8005ae0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ade:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	699a      	ldr	r2, [r3, #24]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005b04:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0210 	bic.w	r2, r2, #16
 8005b14:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d108      	bne.n	8005b30 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	699a      	ldr	r2, [r3, #24]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0204 	orr.w	r2, r2, #4
 8005b2c:	619a      	str	r2, [r3, #24]
 8005b2e:	e02c      	b.n	8005b8a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d028      	beq.n	8005b8a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d01c      	beq.n	8005b7a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699a      	ldr	r2, [r3, #24]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b4e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691a      	ldr	r2, [r3, #16]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0210 	orr.w	r2, r2, #16
 8005b5e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d110      	bne.n	8005b8a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699a      	ldr	r2, [r3, #24]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0220 	orr.w	r2, r2, #32
 8005b76:	619a      	str	r2, [r3, #24]
 8005b78:	e007      	b.n	8005b8a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	699a      	ldr	r2, [r3, #24]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f042 0220 	orr.w	r2, r2, #32
 8005b88:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b9a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005ba2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005bb2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005bb4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bbe:	d115      	bne.n	8005bec <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005bce:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005bd8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be0:	3b01      	subs	r3, #1
 8005be2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005be8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005bea:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f814 	bl	8005c30 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40006400 	.word	0x40006400
 8005c2c:	40006500 	.word	0x40006500

08005c30 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005c38:	4b30      	ldr	r3, [pc, #192]	@ (8005cfc <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005c3a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a2f      	ldr	r2, [pc, #188]	@ (8005d00 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d103      	bne.n	8005c4e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005c4c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a2c      	ldr	r2, [pc, #176]	@ (8005d04 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d103      	bne.n	8005c60 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8005c5e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c6e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c76:	041a      	lsls	r2, r3, #16
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c94:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9c:	061a      	lsls	r2, r3, #24
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	e005      	b.n	8005ce2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d3f3      	bcc.n	8005cd6 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8005cee:	bf00      	nop
 8005cf0:	bf00      	nop
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	4000a400 	.word	0x4000a400
 8005d00:	40006800 	.word	0x40006800
 8005d04:	40006c00 	.word	0x40006c00

08005d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d16:	e15a      	b.n	8005fce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	fa01 f303 	lsl.w	r3, r1, r3
 8005d24:	4013      	ands	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 814c 	beq.w	8005fc8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f003 0303 	and.w	r3, r3, #3
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d005      	beq.n	8005d48 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d130      	bne.n	8005daa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	2203      	movs	r2, #3
 8005d54:	fa02 f303 	lsl.w	r3, r2, r3
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d7e:	2201      	movs	r2, #1
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	43db      	mvns	r3, r3
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	091b      	lsrs	r3, r3, #4
 8005d94:	f003 0201 	and.w	r2, r3, #1
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d017      	beq.n	8005de6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	2203      	movs	r2, #3
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d123      	bne.n	8005e3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	08da      	lsrs	r2, r3, #3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	3208      	adds	r2, #8
 8005dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f003 0307 	and.w	r3, r3, #7
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	220f      	movs	r2, #15
 8005e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0e:	43db      	mvns	r3, r3
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4013      	ands	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	691a      	ldr	r2, [r3, #16]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	fa02 f303 	lsl.w	r3, r2, r3
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	08da      	lsrs	r2, r3, #3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3208      	adds	r2, #8
 8005e34:	6939      	ldr	r1, [r7, #16]
 8005e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	2203      	movs	r2, #3
 8005e46:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4a:	43db      	mvns	r3, r3
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f003 0203 	and.w	r2, r3, #3
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 80a6 	beq.w	8005fc8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e7c:	4b5b      	ldr	r3, [pc, #364]	@ (8005fec <HAL_GPIO_Init+0x2e4>)
 8005e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e80:	4a5a      	ldr	r2, [pc, #360]	@ (8005fec <HAL_GPIO_Init+0x2e4>)
 8005e82:	f043 0301 	orr.w	r3, r3, #1
 8005e86:	6613      	str	r3, [r2, #96]	@ 0x60
 8005e88:	4b58      	ldr	r3, [pc, #352]	@ (8005fec <HAL_GPIO_Init+0x2e4>)
 8005e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	60bb      	str	r3, [r7, #8]
 8005e92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e94:	4a56      	ldr	r2, [pc, #344]	@ (8005ff0 <HAL_GPIO_Init+0x2e8>)
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	089b      	lsrs	r3, r3, #2
 8005e9a:	3302      	adds	r3, #2
 8005e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f003 0303 	and.w	r3, r3, #3
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	220f      	movs	r2, #15
 8005eac:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb0:	43db      	mvns	r3, r3
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005ebe:	d01f      	beq.n	8005f00 <HAL_GPIO_Init+0x1f8>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a4c      	ldr	r2, [pc, #304]	@ (8005ff4 <HAL_GPIO_Init+0x2ec>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d019      	beq.n	8005efc <HAL_GPIO_Init+0x1f4>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a4b      	ldr	r2, [pc, #300]	@ (8005ff8 <HAL_GPIO_Init+0x2f0>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d013      	beq.n	8005ef8 <HAL_GPIO_Init+0x1f0>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a4a      	ldr	r2, [pc, #296]	@ (8005ffc <HAL_GPIO_Init+0x2f4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d00d      	beq.n	8005ef4 <HAL_GPIO_Init+0x1ec>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a49      	ldr	r2, [pc, #292]	@ (8006000 <HAL_GPIO_Init+0x2f8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d007      	beq.n	8005ef0 <HAL_GPIO_Init+0x1e8>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a48      	ldr	r2, [pc, #288]	@ (8006004 <HAL_GPIO_Init+0x2fc>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d101      	bne.n	8005eec <HAL_GPIO_Init+0x1e4>
 8005ee8:	2305      	movs	r3, #5
 8005eea:	e00a      	b.n	8005f02 <HAL_GPIO_Init+0x1fa>
 8005eec:	2306      	movs	r3, #6
 8005eee:	e008      	b.n	8005f02 <HAL_GPIO_Init+0x1fa>
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	e006      	b.n	8005f02 <HAL_GPIO_Init+0x1fa>
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e004      	b.n	8005f02 <HAL_GPIO_Init+0x1fa>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e002      	b.n	8005f02 <HAL_GPIO_Init+0x1fa>
 8005efc:	2301      	movs	r3, #1
 8005efe:	e000      	b.n	8005f02 <HAL_GPIO_Init+0x1fa>
 8005f00:	2300      	movs	r3, #0
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	f002 0203 	and.w	r2, r2, #3
 8005f08:	0092      	lsls	r2, r2, #2
 8005f0a:	4093      	lsls	r3, r2
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f12:	4937      	ldr	r1, [pc, #220]	@ (8005ff0 <HAL_GPIO_Init+0x2e8>)
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	089b      	lsrs	r3, r3, #2
 8005f18:	3302      	adds	r3, #2
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f20:	4b39      	ldr	r3, [pc, #228]	@ (8006008 <HAL_GPIO_Init+0x300>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f44:	4a30      	ldr	r2, [pc, #192]	@ (8006008 <HAL_GPIO_Init+0x300>)
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8006008 <HAL_GPIO_Init+0x300>)
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	43db      	mvns	r3, r3
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4013      	ands	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f6e:	4a26      	ldr	r2, [pc, #152]	@ (8006008 <HAL_GPIO_Init+0x300>)
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005f74:	4b24      	ldr	r3, [pc, #144]	@ (8006008 <HAL_GPIO_Init+0x300>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	4013      	ands	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f98:	4a1b      	ldr	r2, [pc, #108]	@ (8006008 <HAL_GPIO_Init+0x300>)
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006008 <HAL_GPIO_Init+0x300>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	43db      	mvns	r3, r3
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4013      	ands	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005fc2:	4a11      	ldr	r2, [pc, #68]	@ (8006008 <HAL_GPIO_Init+0x300>)
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f47f ae9d 	bne.w	8005d18 <HAL_GPIO_Init+0x10>
  }
}
 8005fde:	bf00      	nop
 8005fe0:	bf00      	nop
 8005fe2:	371c      	adds	r7, #28
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	40010000 	.word	0x40010000
 8005ff4:	48000400 	.word	0x48000400
 8005ff8:	48000800 	.word	0x48000800
 8005ffc:	48000c00 	.word	0x48000c00
 8006000:	48001000 	.word	0x48001000
 8006004:	48001400 	.word	0x48001400
 8006008:	40010400 	.word	0x40010400

0800600c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	460b      	mov	r3, r1
 8006016:	807b      	strh	r3, [r7, #2]
 8006018:	4613      	mov	r3, r2
 800601a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800601c:	787b      	ldrb	r3, [r7, #1]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006022:	887a      	ldrh	r2, [r7, #2]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006028:	e002      	b.n	8006030 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800602a:	887a      	ldrh	r2, [r7, #2]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	4603      	mov	r3, r0
 8006044:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006046:	4b08      	ldr	r3, [pc, #32]	@ (8006068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006048:	695a      	ldr	r2, [r3, #20]
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	4013      	ands	r3, r2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d006      	beq.n	8006060 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006052:	4a05      	ldr	r2, [pc, #20]	@ (8006068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006054:	88fb      	ldrh	r3, [r7, #6]
 8006056:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006058:	88fb      	ldrh	r3, [r7, #6]
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe fb42 	bl	80046e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006060:	bf00      	nop
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	40010400 	.word	0x40010400

0800606c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e08d      	b.n	800619a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fe fe16 	bl	8004cc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2224      	movs	r2, #36	@ 0x24
 800609c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0201 	bic.w	r2, r2, #1
 80060ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80060bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d107      	bne.n	80060e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689a      	ldr	r2, [r3, #8]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060e2:	609a      	str	r2, [r3, #8]
 80060e4:	e006      	b.n	80060f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689a      	ldr	r2, [r3, #8]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80060f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d108      	bne.n	800610e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800610a:	605a      	str	r2, [r3, #4]
 800610c:	e007      	b.n	800611e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800611c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6812      	ldr	r2, [r2, #0]
 8006128:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800612c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006130:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006140:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	69d9      	ldr	r1, [r3, #28]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a1a      	ldr	r2, [r3, #32]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0201 	orr.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2220      	movs	r2, #32
 8006186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	4608      	mov	r0, r1
 80061ae:	4611      	mov	r1, r2
 80061b0:	461a      	mov	r2, r3
 80061b2:	4603      	mov	r3, r0
 80061b4:	817b      	strh	r3, [r7, #10]
 80061b6:	460b      	mov	r3, r1
 80061b8:	813b      	strh	r3, [r7, #8]
 80061ba:	4613      	mov	r3, r2
 80061bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b20      	cmp	r3, #32
 80061c8:	f040 80f9 	bne.w	80063be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d002      	beq.n	80061d8 <HAL_I2C_Mem_Write+0x34>
 80061d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d105      	bne.n	80061e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061de:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e0ed      	b.n	80063c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <HAL_I2C_Mem_Write+0x4e>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e0e6      	b.n	80063c0 <HAL_I2C_Mem_Write+0x21c>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80061fa:	f7ff f9e1 	bl	80055c0 <HAL_GetTick>
 80061fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	2319      	movs	r3, #25
 8006206:	2201      	movs	r2, #1
 8006208:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 fac3 	bl	8006798 <I2C_WaitOnFlagUntilTimeout>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e0d1      	b.n	80063c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2221      	movs	r2, #33	@ 0x21
 8006220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2240      	movs	r2, #64	@ 0x40
 8006228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6a3a      	ldr	r2, [r7, #32]
 8006236:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800623c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006244:	88f8      	ldrh	r0, [r7, #6]
 8006246:	893a      	ldrh	r2, [r7, #8]
 8006248:	8979      	ldrh	r1, [r7, #10]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	4603      	mov	r3, r0
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 f9d3 	bl	8006600 <I2C_RequestMemoryWrite>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e0a9      	b.n	80063c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006270:	b29b      	uxth	r3, r3
 8006272:	2bff      	cmp	r3, #255	@ 0xff
 8006274:	d90e      	bls.n	8006294 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	22ff      	movs	r2, #255	@ 0xff
 800627a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006280:	b2da      	uxtb	r2, r3
 8006282:	8979      	ldrh	r1, [r7, #10]
 8006284:	2300      	movs	r3, #0
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f000 fc47 	bl	8006b20 <I2C_TransferConfig>
 8006292:	e00f      	b.n	80062b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	8979      	ldrh	r1, [r7, #10]
 80062a6:	2300      	movs	r3, #0
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 fc36 	bl	8006b20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 fac6 	bl	800684a <I2C_WaitOnTXISFlagUntilTimeout>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e07b      	b.n	80063c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062cc:	781a      	ldrb	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d034      	beq.n	800636c <HAL_I2C_Mem_Write+0x1c8>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006306:	2b00      	cmp	r3, #0
 8006308:	d130      	bne.n	800636c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006310:	2200      	movs	r2, #0
 8006312:	2180      	movs	r1, #128	@ 0x80
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fa3f 	bl	8006798 <I2C_WaitOnFlagUntilTimeout>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e04d      	b.n	80063c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006328:	b29b      	uxth	r3, r3
 800632a:	2bff      	cmp	r3, #255	@ 0xff
 800632c:	d90e      	bls.n	800634c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	22ff      	movs	r2, #255	@ 0xff
 8006332:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006338:	b2da      	uxtb	r2, r3
 800633a:	8979      	ldrh	r1, [r7, #10]
 800633c:	2300      	movs	r3, #0
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 fbeb 	bl	8006b20 <I2C_TransferConfig>
 800634a:	e00f      	b.n	800636c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800635a:	b2da      	uxtb	r2, r3
 800635c:	8979      	ldrh	r1, [r7, #10]
 800635e:	2300      	movs	r3, #0
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 fbda 	bl	8006b20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006370:	b29b      	uxth	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d19e      	bne.n	80062b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 faac 	bl	80068d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e01a      	b.n	80063c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2220      	movs	r2, #32
 8006390:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6859      	ldr	r1, [r3, #4]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	4b0a      	ldr	r3, [pc, #40]	@ (80063c8 <HAL_I2C_Mem_Write+0x224>)
 800639e:	400b      	ands	r3, r1
 80063a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	e000      	b.n	80063c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80063be:	2302      	movs	r3, #2
  }
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	fe00e800 	.word	0xfe00e800

080063cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	4608      	mov	r0, r1
 80063d6:	4611      	mov	r1, r2
 80063d8:	461a      	mov	r2, r3
 80063da:	4603      	mov	r3, r0
 80063dc:	817b      	strh	r3, [r7, #10]
 80063de:	460b      	mov	r3, r1
 80063e0:	813b      	strh	r3, [r7, #8]
 80063e2:	4613      	mov	r3, r2
 80063e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	f040 80fd 	bne.w	80065ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_I2C_Mem_Read+0x34>
 80063fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d105      	bne.n	800640c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006406:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e0f1      	b.n	80065f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <HAL_I2C_Mem_Read+0x4e>
 8006416:	2302      	movs	r3, #2
 8006418:	e0ea      	b.n	80065f0 <HAL_I2C_Mem_Read+0x224>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006422:	f7ff f8cd 	bl	80055c0 <HAL_GetTick>
 8006426:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	2319      	movs	r3, #25
 800642e:	2201      	movs	r2, #1
 8006430:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 f9af 	bl	8006798 <I2C_WaitOnFlagUntilTimeout>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e0d5      	b.n	80065f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2222      	movs	r2, #34	@ 0x22
 8006448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2240      	movs	r2, #64	@ 0x40
 8006450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a3a      	ldr	r2, [r7, #32]
 800645e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006464:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800646c:	88f8      	ldrh	r0, [r7, #6]
 800646e:	893a      	ldrh	r2, [r7, #8]
 8006470:	8979      	ldrh	r1, [r7, #10]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	9301      	str	r3, [sp, #4]
 8006476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	4603      	mov	r3, r0
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 f913 	bl	80066a8 <I2C_RequestMemoryRead>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e0ad      	b.n	80065f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006498:	b29b      	uxth	r3, r3
 800649a:	2bff      	cmp	r3, #255	@ 0xff
 800649c:	d90e      	bls.n	80064bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	22ff      	movs	r2, #255	@ 0xff
 80064a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	8979      	ldrh	r1, [r7, #10]
 80064ac:	4b52      	ldr	r3, [pc, #328]	@ (80065f8 <HAL_I2C_Mem_Read+0x22c>)
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fb33 	bl	8006b20 <I2C_TransferConfig>
 80064ba:	e00f      	b.n	80064dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	8979      	ldrh	r1, [r7, #10]
 80064ce:	4b4a      	ldr	r3, [pc, #296]	@ (80065f8 <HAL_I2C_Mem_Read+0x22c>)
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 fb22 	bl	8006b20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e2:	2200      	movs	r2, #0
 80064e4:	2104      	movs	r1, #4
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 f956 	bl	8006798 <I2C_WaitOnFlagUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e07c      	b.n	80065f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006500:	b2d2      	uxtb	r2, r2
 8006502:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800651e:	b29b      	uxth	r3, r3
 8006520:	3b01      	subs	r3, #1
 8006522:	b29a      	uxth	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d034      	beq.n	800659c <HAL_I2C_Mem_Read+0x1d0>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006536:	2b00      	cmp	r3, #0
 8006538:	d130      	bne.n	800659c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006540:	2200      	movs	r2, #0
 8006542:	2180      	movs	r1, #128	@ 0x80
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f927 	bl	8006798 <I2C_WaitOnFlagUntilTimeout>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e04d      	b.n	80065f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006558:	b29b      	uxth	r3, r3
 800655a:	2bff      	cmp	r3, #255	@ 0xff
 800655c:	d90e      	bls.n	800657c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	22ff      	movs	r2, #255	@ 0xff
 8006562:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006568:	b2da      	uxtb	r2, r3
 800656a:	8979      	ldrh	r1, [r7, #10]
 800656c:	2300      	movs	r3, #0
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 fad3 	bl	8006b20 <I2C_TransferConfig>
 800657a:	e00f      	b.n	800659c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800658a:	b2da      	uxtb	r2, r3
 800658c:	8979      	ldrh	r1, [r7, #10]
 800658e:	2300      	movs	r3, #0
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fac2 	bl	8006b20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d19a      	bne.n	80064dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 f994 	bl	80068d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e01a      	b.n	80065f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2220      	movs	r2, #32
 80065c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6859      	ldr	r1, [r3, #4]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	4b0b      	ldr	r3, [pc, #44]	@ (80065fc <HAL_I2C_Mem_Read+0x230>)
 80065ce:	400b      	ands	r3, r1
 80065d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	e000      	b.n	80065f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80065ee:	2302      	movs	r3, #2
  }
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	80002400 	.word	0x80002400
 80065fc:	fe00e800 	.word	0xfe00e800

08006600 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af02      	add	r7, sp, #8
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	4608      	mov	r0, r1
 800660a:	4611      	mov	r1, r2
 800660c:	461a      	mov	r2, r3
 800660e:	4603      	mov	r3, r0
 8006610:	817b      	strh	r3, [r7, #10]
 8006612:	460b      	mov	r3, r1
 8006614:	813b      	strh	r3, [r7, #8]
 8006616:	4613      	mov	r3, r2
 8006618:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800661a:	88fb      	ldrh	r3, [r7, #6]
 800661c:	b2da      	uxtb	r2, r3
 800661e:	8979      	ldrh	r1, [r7, #10]
 8006620:	4b20      	ldr	r3, [pc, #128]	@ (80066a4 <I2C_RequestMemoryWrite+0xa4>)
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 fa79 	bl	8006b20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800662e:	69fa      	ldr	r2, [r7, #28]
 8006630:	69b9      	ldr	r1, [r7, #24]
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 f909 	bl	800684a <I2C_WaitOnTXISFlagUntilTimeout>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e02c      	b.n	800669c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006642:	88fb      	ldrh	r3, [r7, #6]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d105      	bne.n	8006654 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006648:	893b      	ldrh	r3, [r7, #8]
 800664a:	b2da      	uxtb	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	629a      	str	r2, [r3, #40]	@ 0x28
 8006652:	e015      	b.n	8006680 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006654:	893b      	ldrh	r3, [r7, #8]
 8006656:	0a1b      	lsrs	r3, r3, #8
 8006658:	b29b      	uxth	r3, r3
 800665a:	b2da      	uxtb	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006662:	69fa      	ldr	r2, [r7, #28]
 8006664:	69b9      	ldr	r1, [r7, #24]
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 f8ef 	bl	800684a <I2C_WaitOnTXISFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e012      	b.n	800669c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006676:	893b      	ldrh	r3, [r7, #8]
 8006678:	b2da      	uxtb	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	2200      	movs	r2, #0
 8006688:	2180      	movs	r1, #128	@ 0x80
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f000 f884 	bl	8006798 <I2C_WaitOnFlagUntilTimeout>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e000      	b.n	800669c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	80002000 	.word	0x80002000

080066a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	4608      	mov	r0, r1
 80066b2:	4611      	mov	r1, r2
 80066b4:	461a      	mov	r2, r3
 80066b6:	4603      	mov	r3, r0
 80066b8:	817b      	strh	r3, [r7, #10]
 80066ba:	460b      	mov	r3, r1
 80066bc:	813b      	strh	r3, [r7, #8]
 80066be:	4613      	mov	r3, r2
 80066c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	8979      	ldrh	r1, [r7, #10]
 80066c8:	4b20      	ldr	r3, [pc, #128]	@ (800674c <I2C_RequestMemoryRead+0xa4>)
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	2300      	movs	r3, #0
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 fa26 	bl	8006b20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066d4:	69fa      	ldr	r2, [r7, #28]
 80066d6:	69b9      	ldr	r1, [r7, #24]
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f8b6 	bl	800684a <I2C_WaitOnTXISFlagUntilTimeout>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e02c      	b.n	8006742 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066e8:	88fb      	ldrh	r3, [r7, #6]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d105      	bne.n	80066fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066ee:	893b      	ldrh	r3, [r7, #8]
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80066f8:	e015      	b.n	8006726 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80066fa:	893b      	ldrh	r3, [r7, #8]
 80066fc:	0a1b      	lsrs	r3, r3, #8
 80066fe:	b29b      	uxth	r3, r3
 8006700:	b2da      	uxtb	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006708:	69fa      	ldr	r2, [r7, #28]
 800670a:	69b9      	ldr	r1, [r7, #24]
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 f89c 	bl	800684a <I2C_WaitOnTXISFlagUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e012      	b.n	8006742 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800671c:	893b      	ldrh	r3, [r7, #8]
 800671e:	b2da      	uxtb	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	2200      	movs	r2, #0
 800672e:	2140      	movs	r1, #64	@ 0x40
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 f831 	bl	8006798 <I2C_WaitOnFlagUntilTimeout>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e000      	b.n	8006742 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	80002000 	.word	0x80002000

08006750 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b02      	cmp	r3, #2
 8006764:	d103      	bne.n	800676e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2200      	movs	r2, #0
 800676c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b01      	cmp	r3, #1
 800677a:	d007      	beq.n	800678c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699a      	ldr	r2, [r3, #24]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0201 	orr.w	r2, r2, #1
 800678a:	619a      	str	r2, [r3, #24]
  }
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	603b      	str	r3, [r7, #0]
 80067a4:	4613      	mov	r3, r2
 80067a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067a8:	e03b      	b.n	8006822 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 f8d6 	bl	8006960 <I2C_IsErrorOccurred>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e041      	b.n	8006842 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067c4:	d02d      	beq.n	8006822 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c6:	f7fe fefb 	bl	80055c0 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d302      	bcc.n	80067dc <I2C_WaitOnFlagUntilTimeout+0x44>
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d122      	bne.n	8006822 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	699a      	ldr	r2, [r3, #24]
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	4013      	ands	r3, r2
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	bf0c      	ite	eq
 80067ec:	2301      	moveq	r3, #1
 80067ee:	2300      	movne	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	461a      	mov	r2, r3
 80067f4:	79fb      	ldrb	r3, [r7, #7]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d113      	bne.n	8006822 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067fe:	f043 0220 	orr.w	r2, r3, #32
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2220      	movs	r2, #32
 800680a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e00f      	b.n	8006842 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	699a      	ldr	r2, [r3, #24]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	4013      	ands	r3, r2
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	429a      	cmp	r2, r3
 8006830:	bf0c      	ite	eq
 8006832:	2301      	moveq	r3, #1
 8006834:	2300      	movne	r3, #0
 8006836:	b2db      	uxtb	r3, r3
 8006838:	461a      	mov	r2, r3
 800683a:	79fb      	ldrb	r3, [r7, #7]
 800683c:	429a      	cmp	r2, r3
 800683e:	d0b4      	beq.n	80067aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	60f8      	str	r0, [r7, #12]
 8006852:	60b9      	str	r1, [r7, #8]
 8006854:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006856:	e033      	b.n	80068c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	68b9      	ldr	r1, [r7, #8]
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 f87f 	bl	8006960 <I2C_IsErrorOccurred>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e031      	b.n	80068d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006872:	d025      	beq.n	80068c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006874:	f7fe fea4 	bl	80055c0 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	429a      	cmp	r2, r3
 8006882:	d302      	bcc.n	800688a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d11a      	bne.n	80068c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b02      	cmp	r3, #2
 8006896:	d013      	beq.n	80068c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800689c:	f043 0220 	orr.w	r2, r3, #32
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e007      	b.n	80068d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d1c4      	bne.n	8006858 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068e4:	e02f      	b.n	8006946 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	68b9      	ldr	r1, [r7, #8]
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 f838 	bl	8006960 <I2C_IsErrorOccurred>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e02d      	b.n	8006956 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068fa:	f7fe fe61 	bl	80055c0 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	429a      	cmp	r2, r3
 8006908:	d302      	bcc.n	8006910 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d11a      	bne.n	8006946 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	f003 0320 	and.w	r3, r3, #32
 800691a:	2b20      	cmp	r3, #32
 800691c:	d013      	beq.n	8006946 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006922:	f043 0220 	orr.w	r2, r3, #32
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2220      	movs	r2, #32
 800692e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e007      	b.n	8006956 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	f003 0320 	and.w	r3, r3, #32
 8006950:	2b20      	cmp	r3, #32
 8006952:	d1c8      	bne.n	80068e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08a      	sub	sp, #40	@ 0x28
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800696c:	2300      	movs	r3, #0
 800696e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800697a:	2300      	movs	r3, #0
 800697c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	f003 0310 	and.w	r3, r3, #16
 8006988:	2b00      	cmp	r3, #0
 800698a:	d068      	beq.n	8006a5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2210      	movs	r2, #16
 8006992:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006994:	e049      	b.n	8006a2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800699c:	d045      	beq.n	8006a2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800699e:	f7fe fe0f 	bl	80055c0 <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d302      	bcc.n	80069b4 <I2C_IsErrorOccurred+0x54>
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d13a      	bne.n	8006a2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069d6:	d121      	bne.n	8006a1c <I2C_IsErrorOccurred+0xbc>
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069de:	d01d      	beq.n	8006a1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80069e0:	7cfb      	ldrb	r3, [r7, #19]
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	d01a      	beq.n	8006a1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80069f6:	f7fe fde3 	bl	80055c0 <HAL_GetTick>
 80069fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069fc:	e00e      	b.n	8006a1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80069fe:	f7fe fddf 	bl	80055c0 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	2b19      	cmp	r3, #25
 8006a0a:	d907      	bls.n	8006a1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	f043 0320 	orr.w	r3, r3, #32
 8006a12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006a1a:	e006      	b.n	8006a2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d1e9      	bne.n	80069fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	f003 0320 	and.w	r3, r3, #32
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	d003      	beq.n	8006a40 <I2C_IsErrorOccurred+0xe0>
 8006a38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0aa      	beq.n	8006996 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d103      	bne.n	8006a50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2220      	movs	r2, #32
 8006a4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	f043 0304 	orr.w	r3, r3, #4
 8006a56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a70:	6a3b      	ldr	r3, [r7, #32]
 8006a72:	f043 0301 	orr.w	r3, r3, #1
 8006a76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00b      	beq.n	8006aaa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	f043 0308 	orr.w	r3, r3, #8
 8006a98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006aa2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00b      	beq.n	8006acc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	f043 0302 	orr.w	r3, r3, #2
 8006aba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ac4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006acc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d01c      	beq.n	8006b0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f7ff fe3b 	bl	8006750 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6859      	ldr	r1, [r3, #4]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8006b1c <I2C_IsErrorOccurred+0x1bc>)
 8006ae6:	400b      	ands	r3, r1
 8006ae8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	431a      	orrs	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3728      	adds	r7, #40	@ 0x28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	fe00e800 	.word	0xfe00e800

08006b20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	607b      	str	r3, [r7, #4]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	817b      	strh	r3, [r7, #10]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b32:	897b      	ldrh	r3, [r7, #10]
 8006b34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b38:	7a7b      	ldrb	r3, [r7, #9]
 8006b3a:	041b      	lsls	r3, r3, #16
 8006b3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	0d5b      	lsrs	r3, r3, #21
 8006b5a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006b5e:	4b08      	ldr	r3, [pc, #32]	@ (8006b80 <I2C_TransferConfig+0x60>)
 8006b60:	430b      	orrs	r3, r1
 8006b62:	43db      	mvns	r3, r3
 8006b64:	ea02 0103 	and.w	r1, r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	03ff63ff 	.word	0x03ff63ff

08006b84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b20      	cmp	r3, #32
 8006b98:	d138      	bne.n	8006c0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d101      	bne.n	8006ba8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	e032      	b.n	8006c0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2224      	movs	r2, #36	@ 0x24
 8006bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 0201 	bic.w	r2, r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006bd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6819      	ldr	r1, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f042 0201 	orr.w	r2, r2, #1
 8006bf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	e000      	b.n	8006c0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c0c:	2302      	movs	r3, #2
  }
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	370c      	adds	r7, #12
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b085      	sub	sp, #20
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b20      	cmp	r3, #32
 8006c2e:	d139      	bne.n	8006ca4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d101      	bne.n	8006c3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e033      	b.n	8006ca6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2224      	movs	r2, #36	@ 0x24
 8006c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0201 	bic.w	r2, r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	021b      	lsls	r3, r3, #8
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0201 	orr.w	r2, r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2220      	movs	r2, #32
 8006c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	e000      	b.n	8006ca6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006ca4:	2302      	movs	r3, #2
  }
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b084      	sub	sp, #16
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e0c0      	b.n	8006e46 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d106      	bne.n	8006cde <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f00b fff3 	bl	8012cc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2203      	movs	r2, #3
 8006ce2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f004 fcab 	bl	800b646 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	73fb      	strb	r3, [r7, #15]
 8006cf4:	e03e      	b.n	8006d74 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006cf6:	7bfa      	ldrb	r2, [r7, #15]
 8006cf8:	6879      	ldr	r1, [r7, #4]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	440b      	add	r3, r1
 8006d04:	3311      	adds	r3, #17
 8006d06:	2201      	movs	r2, #1
 8006d08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006d0a:	7bfa      	ldrb	r2, [r7, #15]
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	440b      	add	r3, r1
 8006d18:	3310      	adds	r3, #16
 8006d1a:	7bfa      	ldrb	r2, [r7, #15]
 8006d1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006d1e:	7bfa      	ldrb	r2, [r7, #15]
 8006d20:	6879      	ldr	r1, [r7, #4]
 8006d22:	4613      	mov	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4413      	add	r3, r2
 8006d28:	00db      	lsls	r3, r3, #3
 8006d2a:	440b      	add	r3, r1
 8006d2c:	3313      	adds	r3, #19
 8006d2e:	2200      	movs	r2, #0
 8006d30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006d32:	7bfa      	ldrb	r2, [r7, #15]
 8006d34:	6879      	ldr	r1, [r7, #4]
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	00db      	lsls	r3, r3, #3
 8006d3e:	440b      	add	r3, r1
 8006d40:	3320      	adds	r3, #32
 8006d42:	2200      	movs	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006d46:	7bfa      	ldrb	r2, [r7, #15]
 8006d48:	6879      	ldr	r1, [r7, #4]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	00db      	lsls	r3, r3, #3
 8006d52:	440b      	add	r3, r1
 8006d54:	3324      	adds	r3, #36	@ 0x24
 8006d56:	2200      	movs	r2, #0
 8006d58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	4613      	mov	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	00db      	lsls	r3, r3, #3
 8006d68:	440b      	add	r3, r1
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
 8006d70:	3301      	adds	r3, #1
 8006d72:	73fb      	strb	r3, [r7, #15]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	791b      	ldrb	r3, [r3, #4]
 8006d78:	7bfa      	ldrb	r2, [r7, #15]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d3bb      	bcc.n	8006cf6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d7e:	2300      	movs	r3, #0
 8006d80:	73fb      	strb	r3, [r7, #15]
 8006d82:	e044      	b.n	8006e0e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006d84:	7bfa      	ldrb	r2, [r7, #15]
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	440b      	add	r3, r1
 8006d92:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006d96:	2200      	movs	r2, #0
 8006d98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006d9a:	7bfa      	ldrb	r2, [r7, #15]
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	440b      	add	r3, r1
 8006da8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006dac:	7bfa      	ldrb	r2, [r7, #15]
 8006dae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006db0:	7bfa      	ldrb	r2, [r7, #15]
 8006db2:	6879      	ldr	r1, [r7, #4]
 8006db4:	4613      	mov	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	440b      	add	r3, r1
 8006dbe:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006dc6:	7bfa      	ldrb	r2, [r7, #15]
 8006dc8:	6879      	ldr	r1, [r7, #4]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	440b      	add	r3, r1
 8006dd4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006dd8:	2200      	movs	r2, #0
 8006dda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006ddc:	7bfa      	ldrb	r2, [r7, #15]
 8006dde:	6879      	ldr	r1, [r7, #4]
 8006de0:	4613      	mov	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	440b      	add	r3, r1
 8006dea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006df2:	7bfa      	ldrb	r2, [r7, #15]
 8006df4:	6879      	ldr	r1, [r7, #4]
 8006df6:	4613      	mov	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	440b      	add	r3, r1
 8006e00:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006e04:	2200      	movs	r2, #0
 8006e06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	73fb      	strb	r3, [r7, #15]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	791b      	ldrb	r3, [r3, #4]
 8006e12:	7bfa      	ldrb	r2, [r7, #15]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d3b5      	bcc.n	8006d84 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6818      	ldr	r0, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006e24:	f004 fc2a 	bl	800b67c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	7a9b      	ldrb	r3, [r3, #10]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d102      	bne.n	8006e44 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f001 fc0e 	bl	8008660 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_PCD_Start+0x16>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e012      	b.n	8006e8a <HAL_PCD_Start+0x3c>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f004 fbd1 	bl	800b618 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f006 f9ae 	bl	800d1dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f006 f9b3 	bl	800d20a <USB_ReadInterrupts>
 8006ea4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fb06 	bl	80074c2 <PCD_EP_ISR_Handler>

    return;
 8006eb6:	e110      	b.n	80070da <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d013      	beq.n	8006eea <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ed4:	b292      	uxth	r2, r2
 8006ed6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f00b ff83 	bl	8012de6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f8fc 	bl	80070e0 <HAL_PCD_SetAddress>

    return;
 8006ee8:	e0f7      	b.n	80070da <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00c      	beq.n	8006f0e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006f06:	b292      	uxth	r2, r2
 8006f08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006f0c:	e0e5      	b.n	80070da <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00c      	beq.n	8006f32 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f2a:	b292      	uxth	r2, r2
 8006f2c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006f30:	e0d3      	b.n	80070da <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d034      	beq.n	8006fa6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f022 0204 	bic.w	r2, r2, #4
 8006f4e:	b292      	uxth	r2, r2
 8006f50:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0208 	bic.w	r2, r2, #8
 8006f66:	b292      	uxth	r2, r2
 8006f68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d107      	bne.n	8006f86 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006f7e:	2100      	movs	r1, #0
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f00c f923 	bl	80131cc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f00b ff66 	bl	8012e58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f9e:	b292      	uxth	r2, r2
 8006fa0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006fa4:	e099      	b.n	80070da <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d027      	beq.n	8007000 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0208 	orr.w	r2, r2, #8
 8006fc2:	b292      	uxth	r2, r2
 8006fc4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fda:	b292      	uxth	r2, r2
 8006fdc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f042 0204 	orr.w	r2, r2, #4
 8006ff2:	b292      	uxth	r2, r2
 8006ff4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f00b ff13 	bl	8012e24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006ffe:	e06c      	b.n	80070da <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007006:	2b00      	cmp	r3, #0
 8007008:	d040      	beq.n	800708c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007012:	b29a      	uxth	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800701c:	b292      	uxth	r2, r2
 800701e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8007028:	2b00      	cmp	r3, #0
 800702a:	d12b      	bne.n	8007084 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007034:	b29a      	uxth	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0204 	orr.w	r2, r2, #4
 800703e:	b292      	uxth	r2, r2
 8007040:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800704c:	b29a      	uxth	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f042 0208 	orr.w	r2, r2, #8
 8007056:	b292      	uxth	r2, r2
 8007058:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800706c:	b29b      	uxth	r3, r3
 800706e:	089b      	lsrs	r3, r3, #2
 8007070:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800707a:	2101      	movs	r1, #1
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f00c f8a5 	bl	80131cc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8007082:	e02a      	b.n	80070da <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f00b fecd 	bl	8012e24 <HAL_PCD_SuspendCallback>
    return;
 800708a:	e026      	b.n	80070da <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00f      	beq.n	80070b6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800709e:	b29a      	uxth	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80070a8:	b292      	uxth	r2, r2
 80070aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f00b fe8b 	bl	8012dca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80070b4:	e011      	b.n	80070da <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00c      	beq.n	80070da <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070d2:	b292      	uxth	r2, r2
 80070d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80070d8:	bf00      	nop
  }
}
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d101      	bne.n	80070fa <HAL_PCD_SetAddress+0x1a>
 80070f6:	2302      	movs	r3, #2
 80070f8:	e012      	b.n	8007120 <HAL_PCD_SetAddress+0x40>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	78fa      	ldrb	r2, [r7, #3]
 8007106:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	78fa      	ldrb	r2, [r7, #3]
 800710e:	4611      	mov	r1, r2
 8007110:	4618      	mov	r0, r3
 8007112:	f006 f84f 	bl	800d1b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	4608      	mov	r0, r1
 8007132:	4611      	mov	r1, r2
 8007134:	461a      	mov	r2, r3
 8007136:	4603      	mov	r3, r0
 8007138:	70fb      	strb	r3, [r7, #3]
 800713a:	460b      	mov	r3, r1
 800713c:	803b      	strh	r3, [r7, #0]
 800713e:	4613      	mov	r3, r2
 8007140:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007146:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800714a:	2b00      	cmp	r3, #0
 800714c:	da0e      	bge.n	800716c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800714e:	78fb      	ldrb	r3, [r7, #3]
 8007150:	f003 0207 	and.w	r2, r3, #7
 8007154:	4613      	mov	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	3310      	adds	r3, #16
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	4413      	add	r3, r2
 8007162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2201      	movs	r2, #1
 8007168:	705a      	strb	r2, [r3, #1]
 800716a:	e00e      	b.n	800718a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800716c:	78fb      	ldrb	r3, [r7, #3]
 800716e:	f003 0207 	and.w	r2, r3, #7
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	00db      	lsls	r3, r3, #3
 800717a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	4413      	add	r3, r2
 8007182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800718a:	78fb      	ldrb	r3, [r7, #3]
 800718c:	f003 0307 	and.w	r3, r3, #7
 8007190:	b2da      	uxtb	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007196:	883b      	ldrh	r3, [r7, #0]
 8007198:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	78ba      	ldrb	r2, [r7, #2]
 80071a4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80071a6:	78bb      	ldrb	r3, [r7, #2]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d102      	bne.n	80071b2 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d101      	bne.n	80071c0 <HAL_PCD_EP_Open+0x98>
 80071bc:	2302      	movs	r3, #2
 80071be:	e00e      	b.n	80071de <HAL_PCD_EP_Open+0xb6>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68f9      	ldr	r1, [r7, #12]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f004 fa72 	bl	800b6b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80071dc:	7afb      	ldrb	r3, [r7, #11]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b084      	sub	sp, #16
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	460b      	mov	r3, r1
 80071f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80071f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	da0e      	bge.n	8007218 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071fa:	78fb      	ldrb	r3, [r7, #3]
 80071fc:	f003 0207 	and.w	r2, r3, #7
 8007200:	4613      	mov	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4413      	add	r3, r2
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	3310      	adds	r3, #16
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	4413      	add	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2201      	movs	r2, #1
 8007214:	705a      	strb	r2, [r3, #1]
 8007216:	e00e      	b.n	8007236 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007218:	78fb      	ldrb	r3, [r7, #3]
 800721a:	f003 0207 	and.w	r2, r3, #7
 800721e:	4613      	mov	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	00db      	lsls	r3, r3, #3
 8007226:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	4413      	add	r3, r2
 800722e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007236:	78fb      	ldrb	r3, [r7, #3]
 8007238:	f003 0307 	and.w	r3, r3, #7
 800723c:	b2da      	uxtb	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007248:	2b01      	cmp	r3, #1
 800724a:	d101      	bne.n	8007250 <HAL_PCD_EP_Close+0x6a>
 800724c:	2302      	movs	r3, #2
 800724e:	e00e      	b.n	800726e <HAL_PCD_EP_Close+0x88>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68f9      	ldr	r1, [r7, #12]
 800725e:	4618      	mov	r0, r3
 8007260:	f004 ff12 	bl	800c088 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b086      	sub	sp, #24
 800727a:	af00      	add	r7, sp, #0
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	603b      	str	r3, [r7, #0]
 8007282:	460b      	mov	r3, r1
 8007284:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007286:	7afb      	ldrb	r3, [r7, #11]
 8007288:	f003 0207 	and.w	r2, r3, #7
 800728c:	4613      	mov	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4413      	add	r3, r2
 800729c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2200      	movs	r2, #0
 80072ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	2200      	movs	r2, #0
 80072b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072b6:	7afb      	ldrb	r3, [r7, #11]
 80072b8:	f003 0307 	and.w	r3, r3, #7
 80072bc:	b2da      	uxtb	r2, r3
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6979      	ldr	r1, [r7, #20]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f005 f8ca 	bl	800c462 <USB_EPStartXfer>

  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	460b      	mov	r3, r1
 80072e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80072e4:	78fb      	ldrb	r3, [r7, #3]
 80072e6:	f003 0207 	and.w	r2, r3, #7
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	4613      	mov	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	440b      	add	r3, r1
 80072f6:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80072fa:	681b      	ldr	r3, [r3, #0]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	607a      	str	r2, [r7, #4]
 8007312:	603b      	str	r3, [r7, #0]
 8007314:	460b      	mov	r3, r1
 8007316:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007318:	7afb      	ldrb	r3, [r7, #11]
 800731a:	f003 0207 	and.w	r2, r3, #7
 800731e:	4613      	mov	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	3310      	adds	r3, #16
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	4413      	add	r3, r2
 800732c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2200      	movs	r2, #0
 800734c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2201      	movs	r2, #1
 8007352:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007354:	7afb      	ldrb	r3, [r7, #11]
 8007356:	f003 0307 	and.w	r3, r3, #7
 800735a:	b2da      	uxtb	r2, r3
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6979      	ldr	r1, [r7, #20]
 8007366:	4618      	mov	r0, r3
 8007368:	f005 f87b 	bl	800c462 <USB_EPStartXfer>

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b084      	sub	sp, #16
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
 800737e:	460b      	mov	r3, r1
 8007380:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007382:	78fb      	ldrb	r3, [r7, #3]
 8007384:	f003 0307 	and.w	r3, r3, #7
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	7912      	ldrb	r2, [r2, #4]
 800738c:	4293      	cmp	r3, r2
 800738e:	d901      	bls.n	8007394 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e03e      	b.n	8007412 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007398:	2b00      	cmp	r3, #0
 800739a:	da0e      	bge.n	80073ba <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800739c:	78fb      	ldrb	r3, [r7, #3]
 800739e:	f003 0207 	and.w	r2, r3, #7
 80073a2:	4613      	mov	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	00db      	lsls	r3, r3, #3
 80073aa:	3310      	adds	r3, #16
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	4413      	add	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2201      	movs	r2, #1
 80073b6:	705a      	strb	r2, [r3, #1]
 80073b8:	e00c      	b.n	80073d4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80073ba:	78fa      	ldrb	r2, [r7, #3]
 80073bc:	4613      	mov	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	4413      	add	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2201      	movs	r2, #1
 80073d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073da:	78fb      	ldrb	r3, [r7, #3]
 80073dc:	f003 0307 	and.w	r3, r3, #7
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d101      	bne.n	80073f4 <HAL_PCD_EP_SetStall+0x7e>
 80073f0:	2302      	movs	r3, #2
 80073f2:	e00e      	b.n	8007412 <HAL_PCD_EP_SetStall+0x9c>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68f9      	ldr	r1, [r7, #12]
 8007402:	4618      	mov	r0, r3
 8007404:	f005 fddc 	bl	800cfc0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	460b      	mov	r3, r1
 8007424:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007426:	78fb      	ldrb	r3, [r7, #3]
 8007428:	f003 030f 	and.w	r3, r3, #15
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	7912      	ldrb	r2, [r2, #4]
 8007430:	4293      	cmp	r3, r2
 8007432:	d901      	bls.n	8007438 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e040      	b.n	80074ba <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800743c:	2b00      	cmp	r3, #0
 800743e:	da0e      	bge.n	800745e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007440:	78fb      	ldrb	r3, [r7, #3]
 8007442:	f003 0207 	and.w	r2, r3, #7
 8007446:	4613      	mov	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	3310      	adds	r3, #16
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	4413      	add	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2201      	movs	r2, #1
 800745a:	705a      	strb	r2, [r3, #1]
 800745c:	e00e      	b.n	800747c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800745e:	78fb      	ldrb	r3, [r7, #3]
 8007460:	f003 0207 	and.w	r2, r3, #7
 8007464:	4613      	mov	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4413      	add	r3, r2
 800746a:	00db      	lsls	r3, r3, #3
 800746c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	4413      	add	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007482:	78fb      	ldrb	r3, [r7, #3]
 8007484:	f003 0307 	and.w	r3, r3, #7
 8007488:	b2da      	uxtb	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007494:	2b01      	cmp	r3, #1
 8007496:	d101      	bne.n	800749c <HAL_PCD_EP_ClrStall+0x82>
 8007498:	2302      	movs	r3, #2
 800749a:	e00e      	b.n	80074ba <HAL_PCD_EP_ClrStall+0xa0>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68f9      	ldr	r1, [r7, #12]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f005 fdd9 	bl	800d062 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b092      	sub	sp, #72	@ 0x48
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80074ca:	e333      	b.n	8007b34 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80074d4:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80074d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	f003 030f 	and.w	r3, r3, #15
 80074de:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 80074e2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f040 8108 	bne.w	80076fc <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80074ec:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80074ee:	f003 0310 	and.w	r3, r3, #16
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d14c      	bne.n	8007590 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007506:	813b      	strh	r3, [r7, #8]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	893b      	ldrh	r3, [r7, #8]
 800750e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007516:	b29b      	uxth	r3, r3
 8007518:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	3310      	adds	r3, #16
 800751e:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007528:	b29b      	uxth	r3, r3
 800752a:	461a      	mov	r2, r3
 800752c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	00db      	lsls	r3, r3, #3
 8007532:	4413      	add	r3, r2
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	6812      	ldr	r2, [r2, #0]
 8007538:	4413      	add	r3, r2
 800753a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007546:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800754a:	695a      	ldr	r2, [r3, #20]
 800754c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800754e:	69db      	ldr	r3, [r3, #28]
 8007550:	441a      	add	r2, r3
 8007552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007554:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007556:	2100      	movs	r1, #0
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f00b fc1c 	bl	8012d96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	7b1b      	ldrb	r3, [r3, #12]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 82e5 	beq.w	8007b34 <PCD_EP_ISR_Handler+0x672>
 800756a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	2b00      	cmp	r3, #0
 8007570:	f040 82e0 	bne.w	8007b34 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	7b1b      	ldrb	r3, [r3, #12]
 8007578:	b2db      	uxtb	r3, r3
 800757a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800757e:	b2da      	uxtb	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	731a      	strb	r2, [r3, #12]
 800758e:	e2d1      	b.n	8007b34 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007596:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80075a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80075a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d032      	beq.n	8007610 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	461a      	mov	r2, r3
 80075b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	4413      	add	r3, r2
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6812      	ldr	r2, [r2, #0]
 80075c2:	4413      	add	r3, r2
 80075c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80075ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075d0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6818      	ldr	r0, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80075dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075de:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80075e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075e2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	f005 fe62 	bl	800d2ae <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80075f6:	4013      	ands	r3, r2
 80075f8:	817b      	strh	r3, [r7, #10]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	897a      	ldrh	r2, [r7, #10]
 8007600:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007604:	b292      	uxth	r2, r2
 8007606:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f00b fb97 	bl	8012d3c <HAL_PCD_SetupStageCallback>
 800760e:	e291      	b.n	8007b34 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007610:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8007614:	2b00      	cmp	r3, #0
 8007616:	f280 828d 	bge.w	8007b34 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	b29a      	uxth	r2, r3
 8007622:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007626:	4013      	ands	r3, r2
 8007628:	81fb      	strh	r3, [r7, #14]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	89fa      	ldrh	r2, [r7, #14]
 8007630:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007634:	b292      	uxth	r2, r2
 8007636:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007640:	b29b      	uxth	r3, r3
 8007642:	461a      	mov	r2, r3
 8007644:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	00db      	lsls	r3, r3, #3
 800764a:	4413      	add	r3, r2
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6812      	ldr	r2, [r2, #0]
 8007650:	4413      	add	r3, r2
 8007652:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800765c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800765e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007660:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007662:	69db      	ldr	r3, [r3, #28]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d019      	beq.n	800769c <PCD_EP_ISR_Handler+0x1da>
 8007668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d015      	beq.n	800769c <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6818      	ldr	r0, [r3, #0]
 8007674:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007676:	6959      	ldr	r1, [r3, #20]
 8007678:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800767a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800767c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800767e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007680:	b29b      	uxth	r3, r3
 8007682:	f005 fe14 	bl	800d2ae <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007686:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007688:	695a      	ldr	r2, [r3, #20]
 800768a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800768c:	69db      	ldr	r3, [r3, #28]
 800768e:	441a      	add	r2, r3
 8007690:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007692:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007694:	2100      	movs	r1, #0
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f00b fb62 	bl	8012d60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80076a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80076a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f040 8242 	bne.w	8007b34 <PCD_EP_ISR_Handler+0x672>
 80076b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80076b2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80076b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076ba:	f000 823b 	beq.w	8007b34 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ce:	81bb      	strh	r3, [r7, #12]
 80076d0:	89bb      	ldrh	r3, [r7, #12]
 80076d2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80076d6:	81bb      	strh	r3, [r7, #12]
 80076d8:	89bb      	ldrh	r3, [r7, #12]
 80076da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80076de:	81bb      	strh	r3, [r7, #12]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	89bb      	ldrh	r3, [r7, #12]
 80076e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	8013      	strh	r3, [r2, #0]
 80076fa:	e21b      	b.n	8007b34 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	461a      	mov	r2, r3
 8007702:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800770e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8007712:	2b00      	cmp	r3, #0
 8007714:	f280 80f1 	bge.w	80078fa <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	461a      	mov	r2, r3
 800771e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	b29a      	uxth	r2, r3
 800772a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800772e:	4013      	ands	r3, r2
 8007730:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007742:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007746:	b292      	uxth	r2, r2
 8007748:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800774a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800774e:	4613      	mov	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	00db      	lsls	r3, r3, #3
 8007756:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	4413      	add	r3, r2
 800775e:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007762:	7b1b      	ldrb	r3, [r3, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d123      	bne.n	80077b0 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007770:	b29b      	uxth	r3, r3
 8007772:	461a      	mov	r2, r3
 8007774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	00db      	lsls	r3, r3, #3
 800777a:	4413      	add	r3, r2
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	6812      	ldr	r2, [r2, #0]
 8007780:	4413      	add	r3, r2
 8007782:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800778c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8007790:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 808b 	beq.w	80078b0 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6818      	ldr	r0, [r3, #0]
 800779e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077a0:	6959      	ldr	r1, [r3, #20]
 80077a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077a4:	88da      	ldrh	r2, [r3, #6]
 80077a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80077aa:	f005 fd80 	bl	800d2ae <USB_ReadPMA>
 80077ae:	e07f      	b.n	80078b0 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80077b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077b2:	78db      	ldrb	r3, [r3, #3]
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d109      	bne.n	80077cc <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80077b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80077ba:	461a      	mov	r2, r3
 80077bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f9c6 	bl	8007b50 <HAL_PCD_EP_DB_Receive>
 80077c4:	4603      	mov	r3, r0
 80077c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80077ca:	e071      	b.n	80078b0 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	461a      	mov	r2, r3
 80077d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077e6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	461a      	mov	r2, r3
 80077ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	441a      	add	r2, r3
 80077f6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80077f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007804:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007808:	b29b      	uxth	r3, r3
 800780a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	461a      	mov	r2, r3
 8007812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	b29b      	uxth	r3, r3
 800781e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d022      	beq.n	800786c <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800782e:	b29b      	uxth	r3, r3
 8007830:	461a      	mov	r2, r3
 8007832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	00db      	lsls	r3, r3, #3
 8007838:	4413      	add	r3, r2
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	6812      	ldr	r2, [r2, #0]
 800783e:	4413      	add	r3, r2
 8007840:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800784a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800784e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007852:	2b00      	cmp	r3, #0
 8007854:	d02c      	beq.n	80078b0 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6818      	ldr	r0, [r3, #0]
 800785a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800785c:	6959      	ldr	r1, [r3, #20]
 800785e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007860:	891a      	ldrh	r2, [r3, #8]
 8007862:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007866:	f005 fd22 	bl	800d2ae <USB_ReadPMA>
 800786a:	e021      	b.n	80078b0 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007874:	b29b      	uxth	r3, r3
 8007876:	461a      	mov	r2, r3
 8007878:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	00db      	lsls	r3, r3, #3
 800787e:	4413      	add	r3, r2
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6812      	ldr	r2, [r2, #0]
 8007884:	4413      	add	r3, r2
 8007886:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800788a:	881b      	ldrh	r3, [r3, #0]
 800788c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007890:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8007894:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007898:	2b00      	cmp	r3, #0
 800789a:	d009      	beq.n	80078b0 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6818      	ldr	r0, [r3, #0]
 80078a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078a2:	6959      	ldr	r1, [r3, #20]
 80078a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078a6:	895a      	ldrh	r2, [r3, #10]
 80078a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80078ac:	f005 fcff 	bl	800d2ae <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80078b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078b2:	69da      	ldr	r2, [r3, #28]
 80078b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80078b8:	441a      	add	r2, r3
 80078ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80078be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078c0:	695a      	ldr	r2, [r3, #20]
 80078c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80078c6:	441a      	add	r2, r3
 80078c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80078cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d005      	beq.n	80078e0 <PCD_EP_ISR_Handler+0x41e>
 80078d4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80078d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d206      	bcs.n	80078ee <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80078e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f00b fa3a 	bl	8012d60 <HAL_PCD_DataOutStageCallback>
 80078ec:	e005      	b.n	80078fa <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078f4:	4618      	mov	r0, r3
 80078f6:	f004 fdb4 	bl	800c462 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80078fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80078fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 8117 	beq.w	8007b34 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8007906:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800790a:	4613      	mov	r3, r2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4413      	add	r3, r2
 8007910:	00db      	lsls	r3, r3, #3
 8007912:	3310      	adds	r3, #16
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	4413      	add	r3, r2
 8007918:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4413      	add	r3, r2
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	b29b      	uxth	r3, r3
 800792c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007934:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	441a      	add	r2, r3
 8007944:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800794a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800794e:	b29b      	uxth	r3, r3
 8007950:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007954:	78db      	ldrb	r3, [r3, #3]
 8007956:	2b01      	cmp	r3, #1
 8007958:	f040 80a1 	bne.w	8007a9e <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800795c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800795e:	2200      	movs	r2, #0
 8007960:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007964:	7b1b      	ldrb	r3, [r3, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 8092 	beq.w	8007a90 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800796c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800796e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007972:	2b00      	cmp	r3, #0
 8007974:	d046      	beq.n	8007a04 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007978:	785b      	ldrb	r3, [r3, #1]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d126      	bne.n	80079cc <PCD_EP_ISR_Handler+0x50a>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	617b      	str	r3, [r7, #20]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800798c:	b29b      	uxth	r3, r3
 800798e:	461a      	mov	r2, r3
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	4413      	add	r3, r2
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	00da      	lsls	r2, r3, #3
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	4413      	add	r3, r2
 80079a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079a4:	613b      	str	r3, [r7, #16]
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	801a      	strh	r2, [r3, #0]
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	801a      	strh	r2, [r3, #0]
 80079ca:	e061      	b.n	8007a90 <PCD_EP_ISR_Handler+0x5ce>
 80079cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079ce:	785b      	ldrb	r3, [r3, #1]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d15d      	bne.n	8007a90 <PCD_EP_ISR_Handler+0x5ce>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	61fb      	str	r3, [r7, #28]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	461a      	mov	r2, r3
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	4413      	add	r3, r2
 80079ea:	61fb      	str	r3, [r7, #28]
 80079ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	00da      	lsls	r2, r3, #3
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	4413      	add	r3, r2
 80079f6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079fa:	61bb      	str	r3, [r7, #24]
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	2200      	movs	r2, #0
 8007a00:	801a      	strh	r2, [r3, #0]
 8007a02:	e045      	b.n	8007a90 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d126      	bne.n	8007a60 <PCD_EP_ISR_Handler+0x59e>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a26:	4413      	add	r3, r2
 8007a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	00da      	lsls	r2, r3, #3
 8007a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a32:	4413      	add	r3, r2
 8007a34:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a38:	623b      	str	r3, [r7, #32]
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	801a      	strh	r2, [r3, #0]
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	881b      	ldrh	r3, [r3, #0]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	801a      	strh	r2, [r3, #0]
 8007a5e:	e017      	b.n	8007a90 <PCD_EP_ISR_Handler+0x5ce>
 8007a60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a62:	785b      	ldrb	r3, [r3, #1]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d113      	bne.n	8007a90 <PCD_EP_ISR_Handler+0x5ce>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	461a      	mov	r2, r3
 8007a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a76:	4413      	add	r3, r2
 8007a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	00da      	lsls	r2, r3, #3
 8007a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a82:	4413      	add	r3, r2
 8007a84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007a90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	4619      	mov	r1, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f00b f97d 	bl	8012d96 <HAL_PCD_DataInStageCallback>
 8007a9c:	e04a      	b.n	8007b34 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007a9e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d13f      	bne.n	8007b28 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	00db      	lsls	r3, r3, #3
 8007aba:	4413      	add	r3, r2
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	6812      	ldr	r2, [r2, #0]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ac6:	881b      	ldrh	r3, [r3, #0]
 8007ac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007acc:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8007ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ad0:	699a      	ldr	r2, [r3, #24]
 8007ad2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d906      	bls.n	8007ae6 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8007ad8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ada:	699a      	ldr	r2, [r3, #24]
 8007adc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007ade:	1ad2      	subs	r2, r2, r3
 8007ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ae2:	619a      	str	r2, [r3, #24]
 8007ae4:	e002      	b.n	8007aec <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8007ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ae8:	2200      	movs	r2, #0
 8007aea:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007aec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d106      	bne.n	8007b02 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007af4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	4619      	mov	r1, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f00b f94b 	bl	8012d96 <HAL_PCD_DataInStageCallback>
 8007b00:	e018      	b.n	8007b34 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007b02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b04:	695a      	ldr	r2, [r3, #20]
 8007b06:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007b08:	441a      	add	r2, r3
 8007b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b0c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b10:	69da      	ldr	r2, [r3, #28]
 8007b12:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007b14:	441a      	add	r2, r3
 8007b16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b18:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b20:	4618      	mov	r0, r3
 8007b22:	f004 fc9e 	bl	800c462 <USB_EPStartXfer>
 8007b26:	e005      	b.n	8007b34 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007b28:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f917 	bl	8007d62 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	b21b      	sxth	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f6ff acc3 	blt.w	80074cc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3748      	adds	r7, #72	@ 0x48
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007b5e:	88fb      	ldrh	r3, [r7, #6]
 8007b60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d07c      	beq.n	8007c62 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	461a      	mov	r2, r3
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	00db      	lsls	r3, r3, #3
 8007b7a:	4413      	add	r3, r2
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	6812      	ldr	r2, [r2, #0]
 8007b80:	4413      	add	r3, r2
 8007b82:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b8c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	699a      	ldr	r2, [r3, #24]
 8007b92:	8b7b      	ldrh	r3, [r7, #26]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d306      	bcc.n	8007ba6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	699a      	ldr	r2, [r3, #24]
 8007b9c:	8b7b      	ldrh	r3, [r7, #26]
 8007b9e:	1ad2      	subs	r2, r2, r3
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	619a      	str	r2, [r3, #24]
 8007ba4:	e002      	b.n	8007bac <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d123      	bne.n	8007bfc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bce:	833b      	strh	r3, [r7, #24]
 8007bd0:	8b3b      	ldrh	r3, [r7, #24]
 8007bd2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007bd6:	833b      	strh	r3, [r7, #24]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	441a      	add	r2, r3
 8007be6:	8b3b      	ldrh	r3, [r7, #24]
 8007be8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007bfc:	88fb      	ldrh	r3, [r7, #6]
 8007bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d01f      	beq.n	8007c46 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c20:	82fb      	strh	r3, [r7, #22]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	461a      	mov	r2, r3
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	441a      	add	r2, r3
 8007c30:	8afb      	ldrh	r3, [r7, #22]
 8007c32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007c46:	8b7b      	ldrh	r3, [r7, #26]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 8085 	beq.w	8007d58 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6818      	ldr	r0, [r3, #0]
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	6959      	ldr	r1, [r3, #20]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	891a      	ldrh	r2, [r3, #8]
 8007c5a:	8b7b      	ldrh	r3, [r7, #26]
 8007c5c:	f005 fb27 	bl	800d2ae <USB_ReadPMA>
 8007c60:	e07a      	b.n	8007d58 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	00db      	lsls	r3, r3, #3
 8007c74:	4413      	add	r3, r2
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	6812      	ldr	r2, [r2, #0]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c80:	881b      	ldrh	r3, [r3, #0]
 8007c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c86:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	699a      	ldr	r2, [r3, #24]
 8007c8c:	8b7b      	ldrh	r3, [r7, #26]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d306      	bcc.n	8007ca0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	699a      	ldr	r2, [r3, #24]
 8007c96:	8b7b      	ldrh	r3, [r7, #26]
 8007c98:	1ad2      	subs	r2, r2, r3
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	619a      	str	r2, [r3, #24]
 8007c9e:	e002      	b.n	8007ca6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d123      	bne.n	8007cf6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4413      	add	r3, r2
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cc8:	83fb      	strh	r3, [r7, #30]
 8007cca:	8bfb      	ldrh	r3, [r7, #30]
 8007ccc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007cd0:	83fb      	strh	r3, [r7, #30]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	441a      	add	r2, r3
 8007ce0:	8bfb      	ldrh	r3, [r7, #30]
 8007ce2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ce6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007cf6:	88fb      	ldrh	r3, [r7, #6]
 8007cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d11f      	bne.n	8007d40 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	461a      	mov	r2, r3
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4413      	add	r3, r2
 8007d0e:	881b      	ldrh	r3, [r3, #0]
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d1a:	83bb      	strh	r3, [r7, #28]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	461a      	mov	r2, r3
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	441a      	add	r2, r3
 8007d2a:	8bbb      	ldrh	r3, [r7, #28]
 8007d2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007d40:	8b7b      	ldrh	r3, [r7, #26]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d008      	beq.n	8007d58 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6818      	ldr	r0, [r3, #0]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	6959      	ldr	r1, [r3, #20]
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	895a      	ldrh	r2, [r3, #10]
 8007d52:	8b7b      	ldrh	r3, [r7, #26]
 8007d54:	f005 faab 	bl	800d2ae <USB_ReadPMA>
    }
  }

  return count;
 8007d58:	8b7b      	ldrh	r3, [r7, #26]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3720      	adds	r7, #32
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b0a6      	sub	sp, #152	@ 0x98
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	60f8      	str	r0, [r7, #12]
 8007d6a:	60b9      	str	r1, [r7, #8]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007d70:	88fb      	ldrh	r3, [r7, #6]
 8007d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f000 81f7 	beq.w	800816a <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	461a      	mov	r2, r3
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	00db      	lsls	r3, r3, #3
 8007d8e:	4413      	add	r3, r2
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	6812      	ldr	r2, [r2, #0]
 8007d94:	4413      	add	r3, r2
 8007d96:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007da0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	699a      	ldr	r2, [r3, #24]
 8007da8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d907      	bls.n	8007dc0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	699a      	ldr	r2, [r3, #24]
 8007db4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007db8:	1ad2      	subs	r2, r2, r3
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	619a      	str	r2, [r3, #24]
 8007dbe:	e002      	b.n	8007dc6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f040 80e1 	bne.w	8007f92 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	785b      	ldrb	r3, [r3, #1]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d126      	bne.n	8007e26 <HAL_PCD_EP_DB_Transmit+0xc4>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	461a      	mov	r2, r3
 8007dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dec:	4413      	add	r3, r2
 8007dee:	633b      	str	r3, [r7, #48]	@ 0x30
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	00da      	lsls	r2, r3, #3
 8007df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df8:	4413      	add	r3, r2
 8007dfa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e02:	881b      	ldrh	r3, [r3, #0]
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0e:	801a      	strh	r2, [r3, #0]
 8007e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e22:	801a      	strh	r2, [r3, #0]
 8007e24:	e01a      	b.n	8007e5c <HAL_PCD_EP_DB_Transmit+0xfa>
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	785b      	ldrb	r3, [r3, #1]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d116      	bne.n	8007e5c <HAL_PCD_EP_DB_Transmit+0xfa>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	461a      	mov	r2, r3
 8007e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e42:	4413      	add	r3, r2
 8007e44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	00da      	lsls	r2, r3, #3
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4e:	4413      	add	r3, r2
 8007e50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e58:	2200      	movs	r2, #0
 8007e5a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	785b      	ldrb	r3, [r3, #1]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d126      	bne.n	8007eb8 <HAL_PCD_EP_DB_Transmit+0x156>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	623b      	str	r3, [r7, #32]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	4413      	add	r3, r2
 8007e80:	623b      	str	r3, [r7, #32]
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	00da      	lsls	r2, r3, #3
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e90:	61fb      	str	r3, [r7, #28]
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	881b      	ldrh	r3, [r3, #0]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	801a      	strh	r2, [r3, #0]
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	801a      	strh	r2, [r3, #0]
 8007eb6:	e017      	b.n	8007ee8 <HAL_PCD_EP_DB_Transmit+0x186>
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	785b      	ldrb	r3, [r3, #1]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d113      	bne.n	8007ee8 <HAL_PCD_EP_DB_Transmit+0x186>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	461a      	mov	r2, r3
 8007ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ece:	4413      	add	r3, r2
 8007ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	00da      	lsls	r2, r3, #3
 8007ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eda:	4413      	add	r3, r2
 8007edc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	78db      	ldrb	r3, [r3, #3]
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d123      	bne.n	8007f38 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f0a:	837b      	strh	r3, [r7, #26]
 8007f0c:	8b7b      	ldrh	r3, [r7, #26]
 8007f0e:	f083 0320 	eor.w	r3, r3, #32
 8007f12:	837b      	strh	r3, [r7, #26]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	461a      	mov	r2, r3
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	441a      	add	r2, r3
 8007f22:	8b7b      	ldrh	r3, [r7, #26]
 8007f24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f00a ff29 	bl	8012d96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007f44:	88fb      	ldrh	r3, [r7, #6]
 8007f46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d01f      	beq.n	8007f8e <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	881b      	ldrh	r3, [r3, #0]
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f68:	833b      	strh	r3, [r7, #24]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	441a      	add	r2, r3
 8007f78:	8b3b      	ldrh	r3, [r7, #24]
 8007f7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	e31f      	b.n	80085d2 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007f92:	88fb      	ldrh	r3, [r7, #6]
 8007f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d021      	beq.n	8007fe0 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	441a      	add	r2, r3
 8007fc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007fcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007fd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	f040 82ca 	bne.w	8008580 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	695a      	ldr	r2, [r3, #20]
 8007ff0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007ff4:	441a      	add	r2, r3
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	69da      	ldr	r2, [r3, #28]
 8007ffe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008002:	441a      	add	r2, r3
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	6a1a      	ldr	r2, [r3, #32]
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	429a      	cmp	r2, r3
 8008012:	d309      	bcc.n	8008028 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	6a1a      	ldr	r2, [r3, #32]
 800801e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008020:	1ad2      	subs	r2, r2, r3
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	621a      	str	r2, [r3, #32]
 8008026:	e015      	b.n	8008054 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	6a1b      	ldr	r3, [r3, #32]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d107      	bne.n	8008040 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8008030:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008034:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800803e:	e009      	b.n	8008054 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	6a1b      	ldr	r3, [r3, #32]
 800804c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	2200      	movs	r2, #0
 8008052:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	785b      	ldrb	r3, [r3, #1]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d15f      	bne.n	800811c <HAL_PCD_EP_DB_Transmit+0x3ba>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	643b      	str	r3, [r7, #64]	@ 0x40
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800806a:	b29b      	uxth	r3, r3
 800806c:	461a      	mov	r2, r3
 800806e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008070:	4413      	add	r3, r2
 8008072:	643b      	str	r3, [r7, #64]	@ 0x40
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	00da      	lsls	r2, r3, #3
 800807a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800807c:	4413      	add	r3, r2
 800807e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008082:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	b29b      	uxth	r3, r3
 800808a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800808e:	b29a      	uxth	r2, r3
 8008090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008092:	801a      	strh	r2, [r3, #0]
 8008094:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10a      	bne.n	80080b0 <HAL_PCD_EP_DB_Transmit+0x34e>
 800809a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	b29b      	uxth	r3, r3
 80080a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ac:	801a      	strh	r2, [r3, #0]
 80080ae:	e051      	b.n	8008154 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80080b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80080b4:	d816      	bhi.n	80080e4 <HAL_PCD_EP_DB_Transmit+0x382>
 80080b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080b8:	085b      	lsrs	r3, r3, #1
 80080ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80080bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080be:	f003 0301 	and.w	r3, r3, #1
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d002      	beq.n	80080cc <HAL_PCD_EP_DB_Transmit+0x36a>
 80080c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080c8:	3301      	adds	r3, #1
 80080ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80080cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ce:	881b      	ldrh	r3, [r3, #0]
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	029b      	lsls	r3, r3, #10
 80080d8:	b29b      	uxth	r3, r3
 80080da:	4313      	orrs	r3, r2
 80080dc:	b29a      	uxth	r2, r3
 80080de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080e0:	801a      	strh	r2, [r3, #0]
 80080e2:	e037      	b.n	8008154 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80080e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080e6:	095b      	lsrs	r3, r3, #5
 80080e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80080ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080ec:	f003 031f 	and.w	r3, r3, #31
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d102      	bne.n	80080fa <HAL_PCD_EP_DB_Transmit+0x398>
 80080f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080f6:	3b01      	subs	r3, #1
 80080f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80080fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	b29a      	uxth	r2, r3
 8008100:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008102:	b29b      	uxth	r3, r3
 8008104:	029b      	lsls	r3, r3, #10
 8008106:	b29b      	uxth	r3, r3
 8008108:	4313      	orrs	r3, r2
 800810a:	b29b      	uxth	r3, r3
 800810c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008114:	b29a      	uxth	r2, r3
 8008116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008118:	801a      	strh	r2, [r3, #0]
 800811a:	e01b      	b.n	8008154 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	785b      	ldrb	r3, [r3, #1]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d117      	bne.n	8008154 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	64bb      	str	r3, [r7, #72]	@ 0x48
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008132:	b29b      	uxth	r3, r3
 8008134:	461a      	mov	r2, r3
 8008136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008138:	4413      	add	r3, r2
 800813a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	00da      	lsls	r2, r3, #3
 8008142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008144:	4413      	add	r3, r2
 8008146:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800814a:	647b      	str	r3, [r7, #68]	@ 0x44
 800814c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800814e:	b29a      	uxth	r2, r3
 8008150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008152:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6818      	ldr	r0, [r3, #0]
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	6959      	ldr	r1, [r3, #20]
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	891a      	ldrh	r2, [r3, #8]
 8008160:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008162:	b29b      	uxth	r3, r3
 8008164:	f005 f861 	bl	800d22a <USB_WritePMA>
 8008168:	e20a      	b.n	8008580 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008172:	b29b      	uxth	r3, r3
 8008174:	461a      	mov	r2, r3
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	00db      	lsls	r3, r3, #3
 800817c:	4413      	add	r3, r2
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	6812      	ldr	r2, [r2, #0]
 8008182:	4413      	add	r3, r2
 8008184:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800818e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	699a      	ldr	r2, [r3, #24]
 8008196:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800819a:	429a      	cmp	r2, r3
 800819c:	d307      	bcc.n	80081ae <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	699a      	ldr	r2, [r3, #24]
 80081a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80081a6:	1ad2      	subs	r2, r2, r3
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	619a      	str	r2, [r3, #24]
 80081ac:	e002      	b.n	80081b4 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2200      	movs	r2, #0
 80081b2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f040 80f6 	bne.w	80083aa <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	785b      	ldrb	r3, [r3, #1]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d126      	bne.n	8008214 <HAL_PCD_EP_DB_Transmit+0x4b2>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	461a      	mov	r2, r3
 80081d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80081da:	4413      	add	r3, r2
 80081dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	00da      	lsls	r2, r3, #3
 80081e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80081e6:	4413      	add	r3, r2
 80081e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80081ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80081ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081fc:	801a      	strh	r2, [r3, #0]
 80081fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	b29b      	uxth	r3, r3
 8008204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800820c:	b29a      	uxth	r2, r3
 800820e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008210:	801a      	strh	r2, [r3, #0]
 8008212:	e01a      	b.n	800824a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	785b      	ldrb	r3, [r3, #1]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d116      	bne.n	800824a <HAL_PCD_EP_DB_Transmit+0x4e8>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800822a:	b29b      	uxth	r3, r3
 800822c:	461a      	mov	r2, r3
 800822e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008230:	4413      	add	r3, r2
 8008232:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	00da      	lsls	r2, r3, #3
 800823a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800823c:	4413      	add	r3, r2
 800823e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008242:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008244:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008246:	2200      	movs	r2, #0
 8008248:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	785b      	ldrb	r3, [r3, #1]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d12f      	bne.n	80082ba <HAL_PCD_EP_DB_Transmit+0x558>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800826a:	b29b      	uxth	r3, r3
 800826c:	461a      	mov	r2, r3
 800826e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008272:	4413      	add	r3, r2
 8008274:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	00da      	lsls	r2, r3, #3
 800827e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008282:	4413      	add	r3, r2
 8008284:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008288:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800828c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	b29b      	uxth	r3, r3
 8008294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008298:	b29a      	uxth	r2, r3
 800829a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800829e:	801a      	strh	r2, [r3, #0]
 80082a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80082a4:	881b      	ldrh	r3, [r3, #0]
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80082b6:	801a      	strh	r2, [r3, #0]
 80082b8:	e01c      	b.n	80082f4 <HAL_PCD_EP_DB_Transmit+0x592>
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	785b      	ldrb	r3, [r3, #1]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d118      	bne.n	80082f4 <HAL_PCD_EP_DB_Transmit+0x592>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	461a      	mov	r2, r3
 80082ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082d2:	4413      	add	r3, r2
 80082d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	00da      	lsls	r2, r3, #3
 80082de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082e2:	4413      	add	r3, r2
 80082e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80082e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80082ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80082f0:	2200      	movs	r2, #0
 80082f2:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	78db      	ldrb	r3, [r3, #3]
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d127      	bne.n	800834c <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	461a      	mov	r2, r3
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	b29b      	uxth	r3, r3
 800830e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008312:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008316:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800831a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800831e:	f083 0320 	eor.w	r3, r3, #32
 8008322:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	441a      	add	r2, r3
 8008334:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008338:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800833c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008340:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008348:	b29b      	uxth	r3, r3
 800834a:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	4619      	mov	r1, r3
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f00a fd1f 	bl	8012d96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008358:	88fb      	ldrh	r3, [r7, #6]
 800835a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d121      	bne.n	80083a6 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	881b      	ldrh	r3, [r3, #0]
 8008372:	b29b      	uxth	r3, r3
 8008374:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008378:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800837c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	461a      	mov	r2, r3
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	441a      	add	r2, r3
 800838e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008392:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008396:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800839a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800839e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	e113      	b.n	80085d2 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80083aa:	88fb      	ldrh	r3, [r7, #6]
 80083ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d121      	bne.n	80083f8 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	461a      	mov	r2, r3
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	881b      	ldrh	r3, [r3, #0]
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ce:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	441a      	add	r2, r3
 80083e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80083e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80083f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80083fe:	2b01      	cmp	r3, #1
 8008400:	f040 80be 	bne.w	8008580 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	695a      	ldr	r2, [r3, #20]
 8008408:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800840c:	441a      	add	r2, r3
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	69da      	ldr	r2, [r3, #28]
 8008416:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800841a:	441a      	add	r2, r3
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	6a1a      	ldr	r2, [r3, #32]
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	429a      	cmp	r2, r3
 800842a:	d309      	bcc.n	8008440 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	6a1a      	ldr	r2, [r3, #32]
 8008436:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008438:	1ad2      	subs	r2, r2, r3
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	621a      	str	r2, [r3, #32]
 800843e:	e015      	b.n	800846c <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	6a1b      	ldr	r3, [r3, #32]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d107      	bne.n	8008458 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8008448:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800844c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008456:	e009      	b.n	800846c <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	6a1b      	ldr	r3, [r3, #32]
 800845c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2200      	movs	r2, #0
 8008462:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	785b      	ldrb	r3, [r3, #1]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d15f      	bne.n	800853a <HAL_PCD_EP_DB_Transmit+0x7d8>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008488:	b29b      	uxth	r3, r3
 800848a:	461a      	mov	r2, r3
 800848c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800848e:	4413      	add	r3, r2
 8008490:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	00da      	lsls	r2, r3, #3
 8008498:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800849a:	4413      	add	r3, r2
 800849c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80084a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80084a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084b0:	801a      	strh	r2, [r3, #0]
 80084b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10a      	bne.n	80084ce <HAL_PCD_EP_DB_Transmit+0x76c>
 80084b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084ba:	881b      	ldrh	r3, [r3, #0]
 80084bc:	b29b      	uxth	r3, r3
 80084be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084ca:	801a      	strh	r2, [r3, #0]
 80084cc:	e04e      	b.n	800856c <HAL_PCD_EP_DB_Transmit+0x80a>
 80084ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80084d2:	d816      	bhi.n	8008502 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80084d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084d6:	085b      	lsrs	r3, r3, #1
 80084d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80084da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084dc:	f003 0301 	and.w	r3, r3, #1
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d002      	beq.n	80084ea <HAL_PCD_EP_DB_Transmit+0x788>
 80084e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084e6:	3301      	adds	r3, #1
 80084e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80084ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	029b      	lsls	r3, r3, #10
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	4313      	orrs	r3, r2
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084fe:	801a      	strh	r2, [r3, #0]
 8008500:	e034      	b.n	800856c <HAL_PCD_EP_DB_Transmit+0x80a>
 8008502:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008504:	095b      	lsrs	r3, r3, #5
 8008506:	663b      	str	r3, [r7, #96]	@ 0x60
 8008508:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800850a:	f003 031f 	and.w	r3, r3, #31
 800850e:	2b00      	cmp	r3, #0
 8008510:	d102      	bne.n	8008518 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8008512:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008514:	3b01      	subs	r3, #1
 8008516:	663b      	str	r3, [r7, #96]	@ 0x60
 8008518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	b29a      	uxth	r2, r3
 800851e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008520:	b29b      	uxth	r3, r3
 8008522:	029b      	lsls	r3, r3, #10
 8008524:	b29b      	uxth	r3, r3
 8008526:	4313      	orrs	r3, r2
 8008528:	b29b      	uxth	r3, r3
 800852a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800852e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008532:	b29a      	uxth	r2, r3
 8008534:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008536:	801a      	strh	r2, [r3, #0]
 8008538:	e018      	b.n	800856c <HAL_PCD_EP_DB_Transmit+0x80a>
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	785b      	ldrb	r3, [r3, #1]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d114      	bne.n	800856c <HAL_PCD_EP_DB_Transmit+0x80a>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800854a:	b29b      	uxth	r3, r3
 800854c:	461a      	mov	r2, r3
 800854e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008550:	4413      	add	r3, r2
 8008552:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	00da      	lsls	r2, r3, #3
 800855a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800855c:	4413      	add	r3, r2
 800855e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008562:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008564:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008566:	b29a      	uxth	r2, r3
 8008568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800856a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6818      	ldr	r0, [r3, #0]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	6959      	ldr	r1, [r3, #20]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	895a      	ldrh	r2, [r3, #10]
 8008578:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800857a:	b29b      	uxth	r3, r3
 800857c:	f004 fe55 	bl	800d22a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	461a      	mov	r2, r3
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	881b      	ldrh	r3, [r3, #0]
 8008590:	b29b      	uxth	r3, r3
 8008592:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008596:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800859a:	82fb      	strh	r3, [r7, #22]
 800859c:	8afb      	ldrh	r3, [r7, #22]
 800859e:	f083 0310 	eor.w	r3, r3, #16
 80085a2:	82fb      	strh	r3, [r7, #22]
 80085a4:	8afb      	ldrh	r3, [r7, #22]
 80085a6:	f083 0320 	eor.w	r3, r3, #32
 80085aa:	82fb      	strh	r3, [r7, #22]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	461a      	mov	r2, r3
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	441a      	add	r2, r3
 80085ba:	8afb      	ldrh	r3, [r7, #22]
 80085bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3798      	adds	r7, #152	@ 0x98
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80085da:	b480      	push	{r7}
 80085dc:	b087      	sub	sp, #28
 80085de:	af00      	add	r7, sp, #0
 80085e0:	60f8      	str	r0, [r7, #12]
 80085e2:	607b      	str	r3, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	817b      	strh	r3, [r7, #10]
 80085e8:	4613      	mov	r3, r2
 80085ea:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80085ec:	897b      	ldrh	r3, [r7, #10]
 80085ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00b      	beq.n	8008610 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80085f8:	897b      	ldrh	r3, [r7, #10]
 80085fa:	f003 0207 	and.w	r2, r3, #7
 80085fe:	4613      	mov	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	00db      	lsls	r3, r3, #3
 8008606:	3310      	adds	r3, #16
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	4413      	add	r3, r2
 800860c:	617b      	str	r3, [r7, #20]
 800860e:	e009      	b.n	8008624 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008610:	897a      	ldrh	r2, [r7, #10]
 8008612:	4613      	mov	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4413      	add	r3, r2
 8008618:	00db      	lsls	r3, r3, #3
 800861a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	4413      	add	r3, r2
 8008622:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008624:	893b      	ldrh	r3, [r7, #8]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d107      	bne.n	800863a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	2200      	movs	r2, #0
 800862e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	b29a      	uxth	r2, r3
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	80da      	strh	r2, [r3, #6]
 8008638:	e00b      	b.n	8008652 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2201      	movs	r2, #1
 800863e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	b29a      	uxth	r2, r3
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	0c1b      	lsrs	r3, r3, #16
 800864c:	b29a      	uxth	r2, r3
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	371c      	adds	r7, #28
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008684:	b29b      	uxth	r3, r3
 8008686:	f043 0301 	orr.w	r3, r3, #1
 800868a:	b29a      	uxth	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008698:	b29b      	uxth	r3, r3
 800869a:	f043 0302 	orr.w	r3, r3, #2
 800869e:	b29a      	uxth	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d141      	bne.n	8008746 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80086c2:	4b4b      	ldr	r3, [pc, #300]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80086ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086ce:	d131      	bne.n	8008734 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80086d0:	4b47      	ldr	r3, [pc, #284]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086d6:	4a46      	ldr	r2, [pc, #280]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80086e0:	4b43      	ldr	r3, [pc, #268]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80086e8:	4a41      	ldr	r2, [pc, #260]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80086ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80086f0:	4b40      	ldr	r3, [pc, #256]	@ (80087f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2232      	movs	r2, #50	@ 0x32
 80086f6:	fb02 f303 	mul.w	r3, r2, r3
 80086fa:	4a3f      	ldr	r2, [pc, #252]	@ (80087f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80086fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008700:	0c9b      	lsrs	r3, r3, #18
 8008702:	3301      	adds	r3, #1
 8008704:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008706:	e002      	b.n	800870e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	3b01      	subs	r3, #1
 800870c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800870e:	4b38      	ldr	r3, [pc, #224]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800871a:	d102      	bne.n	8008722 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1f2      	bne.n	8008708 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008722:	4b33      	ldr	r3, [pc, #204]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800872a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800872e:	d158      	bne.n	80087e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008730:	2303      	movs	r3, #3
 8008732:	e057      	b.n	80087e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008734:	4b2e      	ldr	r3, [pc, #184]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800873a:	4a2d      	ldr	r2, [pc, #180]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800873c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008740:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008744:	e04d      	b.n	80087e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800874c:	d141      	bne.n	80087d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800874e:	4b28      	ldr	r3, [pc, #160]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800875a:	d131      	bne.n	80087c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800875c:	4b24      	ldr	r3, [pc, #144]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800875e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008762:	4a23      	ldr	r2, [pc, #140]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008768:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800876c:	4b20      	ldr	r3, [pc, #128]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008774:	4a1e      	ldr	r2, [pc, #120]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008776:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800877a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800877c:	4b1d      	ldr	r3, [pc, #116]	@ (80087f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2232      	movs	r2, #50	@ 0x32
 8008782:	fb02 f303 	mul.w	r3, r2, r3
 8008786:	4a1c      	ldr	r2, [pc, #112]	@ (80087f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008788:	fba2 2303 	umull	r2, r3, r2, r3
 800878c:	0c9b      	lsrs	r3, r3, #18
 800878e:	3301      	adds	r3, #1
 8008790:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008792:	e002      	b.n	800879a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	3b01      	subs	r3, #1
 8008798:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800879a:	4b15      	ldr	r3, [pc, #84]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087a6:	d102      	bne.n	80087ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1f2      	bne.n	8008794 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80087ae:	4b10      	ldr	r3, [pc, #64]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087ba:	d112      	bne.n	80087e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e011      	b.n	80087e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087c0:	4b0b      	ldr	r3, [pc, #44]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087c6:	4a0a      	ldr	r2, [pc, #40]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80087d0:	e007      	b.n	80087e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80087d2:	4b07      	ldr	r3, [pc, #28]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80087da:	4a05      	ldr	r2, [pc, #20]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80087e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	40007000 	.word	0x40007000
 80087f4:	20000010 	.word	0x20000010
 80087f8:	431bde83 	.word	0x431bde83

080087fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80087fc:	b480      	push	{r7}
 80087fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008800:	4b05      	ldr	r3, [pc, #20]	@ (8008818 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	4a04      	ldr	r2, [pc, #16]	@ (8008818 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008806:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800880a:	6093      	str	r3, [r2, #8]
}
 800880c:	bf00      	nop
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	40007000 	.word	0x40007000

0800881c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b088      	sub	sp, #32
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d101      	bne.n	800882e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e2fe      	b.n	8008e2c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	2b00      	cmp	r3, #0
 8008838:	d075      	beq.n	8008926 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800883a:	4b97      	ldr	r3, [pc, #604]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f003 030c 	and.w	r3, r3, #12
 8008842:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008844:	4b94      	ldr	r3, [pc, #592]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	f003 0303 	and.w	r3, r3, #3
 800884c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	2b0c      	cmp	r3, #12
 8008852:	d102      	bne.n	800885a <HAL_RCC_OscConfig+0x3e>
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	2b03      	cmp	r3, #3
 8008858:	d002      	beq.n	8008860 <HAL_RCC_OscConfig+0x44>
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	2b08      	cmp	r3, #8
 800885e:	d10b      	bne.n	8008878 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008860:	4b8d      	ldr	r3, [pc, #564]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d05b      	beq.n	8008924 <HAL_RCC_OscConfig+0x108>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d157      	bne.n	8008924 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e2d9      	b.n	8008e2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008880:	d106      	bne.n	8008890 <HAL_RCC_OscConfig+0x74>
 8008882:	4b85      	ldr	r3, [pc, #532]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a84      	ldr	r2, [pc, #528]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 8008888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800888c:	6013      	str	r3, [r2, #0]
 800888e:	e01d      	b.n	80088cc <HAL_RCC_OscConfig+0xb0>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008898:	d10c      	bne.n	80088b4 <HAL_RCC_OscConfig+0x98>
 800889a:	4b7f      	ldr	r3, [pc, #508]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a7e      	ldr	r2, [pc, #504]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 80088a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80088a4:	6013      	str	r3, [r2, #0]
 80088a6:	4b7c      	ldr	r3, [pc, #496]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a7b      	ldr	r2, [pc, #492]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 80088ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088b0:	6013      	str	r3, [r2, #0]
 80088b2:	e00b      	b.n	80088cc <HAL_RCC_OscConfig+0xb0>
 80088b4:	4b78      	ldr	r3, [pc, #480]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a77      	ldr	r2, [pc, #476]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 80088ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088be:	6013      	str	r3, [r2, #0]
 80088c0:	4b75      	ldr	r3, [pc, #468]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a74      	ldr	r2, [pc, #464]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 80088c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80088ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d013      	beq.n	80088fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088d4:	f7fc fe74 	bl	80055c0 <HAL_GetTick>
 80088d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80088da:	e008      	b.n	80088ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088dc:	f7fc fe70 	bl	80055c0 <HAL_GetTick>
 80088e0:	4602      	mov	r2, r0
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	2b64      	cmp	r3, #100	@ 0x64
 80088e8:	d901      	bls.n	80088ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e29e      	b.n	8008e2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80088ee:	4b6a      	ldr	r3, [pc, #424]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d0f0      	beq.n	80088dc <HAL_RCC_OscConfig+0xc0>
 80088fa:	e014      	b.n	8008926 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088fc:	f7fc fe60 	bl	80055c0 <HAL_GetTick>
 8008900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008902:	e008      	b.n	8008916 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008904:	f7fc fe5c 	bl	80055c0 <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	2b64      	cmp	r3, #100	@ 0x64
 8008910:	d901      	bls.n	8008916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e28a      	b.n	8008e2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008916:	4b60      	ldr	r3, [pc, #384]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1f0      	bne.n	8008904 <HAL_RCC_OscConfig+0xe8>
 8008922:	e000      	b.n	8008926 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0302 	and.w	r3, r3, #2
 800892e:	2b00      	cmp	r3, #0
 8008930:	d075      	beq.n	8008a1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008932:	4b59      	ldr	r3, [pc, #356]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f003 030c 	and.w	r3, r3, #12
 800893a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800893c:	4b56      	ldr	r3, [pc, #344]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	f003 0303 	and.w	r3, r3, #3
 8008944:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	2b0c      	cmp	r3, #12
 800894a:	d102      	bne.n	8008952 <HAL_RCC_OscConfig+0x136>
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	2b02      	cmp	r3, #2
 8008950:	d002      	beq.n	8008958 <HAL_RCC_OscConfig+0x13c>
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	2b04      	cmp	r3, #4
 8008956:	d11f      	bne.n	8008998 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008958:	4b4f      	ldr	r3, [pc, #316]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008960:	2b00      	cmp	r3, #0
 8008962:	d005      	beq.n	8008970 <HAL_RCC_OscConfig+0x154>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d101      	bne.n	8008970 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e25d      	b.n	8008e2c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008970:	4b49      	ldr	r3, [pc, #292]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	061b      	lsls	r3, r3, #24
 800897e:	4946      	ldr	r1, [pc, #280]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 8008980:	4313      	orrs	r3, r2
 8008982:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008984:	4b45      	ldr	r3, [pc, #276]	@ (8008a9c <HAL_RCC_OscConfig+0x280>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4618      	mov	r0, r3
 800898a:	f7fc fb3b 	bl	8005004 <HAL_InitTick>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d043      	beq.n	8008a1c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e249      	b.n	8008e2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d023      	beq.n	80089e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80089a0:	4b3d      	ldr	r3, [pc, #244]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a3c      	ldr	r2, [pc, #240]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 80089a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ac:	f7fc fe08 	bl	80055c0 <HAL_GetTick>
 80089b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089b2:	e008      	b.n	80089c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089b4:	f7fc fe04 	bl	80055c0 <HAL_GetTick>
 80089b8:	4602      	mov	r2, r0
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d901      	bls.n	80089c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e232      	b.n	8008e2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089c6:	4b34      	ldr	r3, [pc, #208]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d0f0      	beq.n	80089b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089d2:	4b31      	ldr	r3, [pc, #196]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	061b      	lsls	r3, r3, #24
 80089e0:	492d      	ldr	r1, [pc, #180]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	604b      	str	r3, [r1, #4]
 80089e6:	e01a      	b.n	8008a1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089e8:	4b2b      	ldr	r3, [pc, #172]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a2a      	ldr	r2, [pc, #168]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 80089ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f4:	f7fc fde4 	bl	80055c0 <HAL_GetTick>
 80089f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80089fa:	e008      	b.n	8008a0e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089fc:	f7fc fde0 	bl	80055c0 <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d901      	bls.n	8008a0e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e20e      	b.n	8008e2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a0e:	4b22      	ldr	r3, [pc, #136]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1f0      	bne.n	80089fc <HAL_RCC_OscConfig+0x1e0>
 8008a1a:	e000      	b.n	8008a1e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0308 	and.w	r3, r3, #8
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d041      	beq.n	8008aae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d01c      	beq.n	8008a6c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a32:	4b19      	ldr	r3, [pc, #100]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 8008a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a38:	4a17      	ldr	r2, [pc, #92]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 8008a3a:	f043 0301 	orr.w	r3, r3, #1
 8008a3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a42:	f7fc fdbd 	bl	80055c0 <HAL_GetTick>
 8008a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a48:	e008      	b.n	8008a5c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a4a:	f7fc fdb9 	bl	80055c0 <HAL_GetTick>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d901      	bls.n	8008a5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e1e7      	b.n	8008e2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 8008a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a62:	f003 0302 	and.w	r3, r3, #2
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d0ef      	beq.n	8008a4a <HAL_RCC_OscConfig+0x22e>
 8008a6a:	e020      	b.n	8008aae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 8008a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a72:	4a09      	ldr	r2, [pc, #36]	@ (8008a98 <HAL_RCC_OscConfig+0x27c>)
 8008a74:	f023 0301 	bic.w	r3, r3, #1
 8008a78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a7c:	f7fc fda0 	bl	80055c0 <HAL_GetTick>
 8008a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008a82:	e00d      	b.n	8008aa0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a84:	f7fc fd9c 	bl	80055c0 <HAL_GetTick>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d906      	bls.n	8008aa0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e1ca      	b.n	8008e2c <HAL_RCC_OscConfig+0x610>
 8008a96:	bf00      	nop
 8008a98:	40021000 	.word	0x40021000
 8008a9c:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008aa0:	4b8c      	ldr	r3, [pc, #560]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008aa6:	f003 0302 	and.w	r3, r3, #2
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1ea      	bne.n	8008a84 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0304 	and.w	r3, r3, #4
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	f000 80a6 	beq.w	8008c08 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008abc:	2300      	movs	r3, #0
 8008abe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008ac0:	4b84      	ldr	r3, [pc, #528]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d101      	bne.n	8008ad0 <HAL_RCC_OscConfig+0x2b4>
 8008acc:	2301      	movs	r3, #1
 8008ace:	e000      	b.n	8008ad2 <HAL_RCC_OscConfig+0x2b6>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00d      	beq.n	8008af2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ad6:	4b7f      	ldr	r3, [pc, #508]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ada:	4a7e      	ldr	r2, [pc, #504]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ae0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ae2:	4b7c      	ldr	r3, [pc, #496]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008aee:	2301      	movs	r3, #1
 8008af0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008af2:	4b79      	ldr	r3, [pc, #484]	@ (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d118      	bne.n	8008b30 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008afe:	4b76      	ldr	r3, [pc, #472]	@ (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a75      	ldr	r2, [pc, #468]	@ (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b0a:	f7fc fd59 	bl	80055c0 <HAL_GetTick>
 8008b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b10:	e008      	b.n	8008b24 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b12:	f7fc fd55 	bl	80055c0 <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d901      	bls.n	8008b24 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e183      	b.n	8008e2c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b24:	4b6c      	ldr	r3, [pc, #432]	@ (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d0f0      	beq.n	8008b12 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d108      	bne.n	8008b4a <HAL_RCC_OscConfig+0x32e>
 8008b38:	4b66      	ldr	r3, [pc, #408]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b3e:	4a65      	ldr	r2, [pc, #404]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008b40:	f043 0301 	orr.w	r3, r3, #1
 8008b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008b48:	e024      	b.n	8008b94 <HAL_RCC_OscConfig+0x378>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	2b05      	cmp	r3, #5
 8008b50:	d110      	bne.n	8008b74 <HAL_RCC_OscConfig+0x358>
 8008b52:	4b60      	ldr	r3, [pc, #384]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b58:	4a5e      	ldr	r2, [pc, #376]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008b5a:	f043 0304 	orr.w	r3, r3, #4
 8008b5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008b62:	4b5c      	ldr	r3, [pc, #368]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b68:	4a5a      	ldr	r2, [pc, #360]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008b6a:	f043 0301 	orr.w	r3, r3, #1
 8008b6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008b72:	e00f      	b.n	8008b94 <HAL_RCC_OscConfig+0x378>
 8008b74:	4b57      	ldr	r3, [pc, #348]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b7a:	4a56      	ldr	r2, [pc, #344]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008b7c:	f023 0301 	bic.w	r3, r3, #1
 8008b80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008b84:	4b53      	ldr	r3, [pc, #332]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b8a:	4a52      	ldr	r2, [pc, #328]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008b8c:	f023 0304 	bic.w	r3, r3, #4
 8008b90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d016      	beq.n	8008bca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b9c:	f7fc fd10 	bl	80055c0 <HAL_GetTick>
 8008ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ba2:	e00a      	b.n	8008bba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ba4:	f7fc fd0c 	bl	80055c0 <HAL_GetTick>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d901      	bls.n	8008bba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e138      	b.n	8008e2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008bba:	4b46      	ldr	r3, [pc, #280]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bc0:	f003 0302 	and.w	r3, r3, #2
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d0ed      	beq.n	8008ba4 <HAL_RCC_OscConfig+0x388>
 8008bc8:	e015      	b.n	8008bf6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bca:	f7fc fcf9 	bl	80055c0 <HAL_GetTick>
 8008bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008bd0:	e00a      	b.n	8008be8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bd2:	f7fc fcf5 	bl	80055c0 <HAL_GetTick>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d901      	bls.n	8008be8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e121      	b.n	8008e2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008be8:	4b3a      	ldr	r3, [pc, #232]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bee:	f003 0302 	and.w	r3, r3, #2
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1ed      	bne.n	8008bd2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008bf6:	7ffb      	ldrb	r3, [r7, #31]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d105      	bne.n	8008c08 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bfc:	4b35      	ldr	r3, [pc, #212]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c00:	4a34      	ldr	r2, [pc, #208]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008c02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c06:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 0320 	and.w	r3, r3, #32
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d03c      	beq.n	8008c8e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d01c      	beq.n	8008c56 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008c1c:	4b2d      	ldr	r3, [pc, #180]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c22:	4a2c      	ldr	r2, [pc, #176]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008c24:	f043 0301 	orr.w	r3, r3, #1
 8008c28:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c2c:	f7fc fcc8 	bl	80055c0 <HAL_GetTick>
 8008c30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008c32:	e008      	b.n	8008c46 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c34:	f7fc fcc4 	bl	80055c0 <HAL_GetTick>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d901      	bls.n	8008c46 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008c42:	2303      	movs	r3, #3
 8008c44:	e0f2      	b.n	8008e2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008c46:	4b23      	ldr	r3, [pc, #140]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008c48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c4c:	f003 0302 	and.w	r3, r3, #2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d0ef      	beq.n	8008c34 <HAL_RCC_OscConfig+0x418>
 8008c54:	e01b      	b.n	8008c8e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c56:	4b1f      	ldr	r3, [pc, #124]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008c5e:	f023 0301 	bic.w	r3, r3, #1
 8008c62:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c66:	f7fc fcab 	bl	80055c0 <HAL_GetTick>
 8008c6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008c6c:	e008      	b.n	8008c80 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c6e:	f7fc fca7 	bl	80055c0 <HAL_GetTick>
 8008c72:	4602      	mov	r2, r0
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	d901      	bls.n	8008c80 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	e0d5      	b.n	8008e2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008c80:	4b14      	ldr	r3, [pc, #80]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008c82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c86:	f003 0302 	and.w	r3, r3, #2
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1ef      	bne.n	8008c6e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	69db      	ldr	r3, [r3, #28]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 80c9 	beq.w	8008e2a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008c98:	4b0e      	ldr	r3, [pc, #56]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f003 030c 	and.w	r3, r3, #12
 8008ca0:	2b0c      	cmp	r3, #12
 8008ca2:	f000 8083 	beq.w	8008dac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	69db      	ldr	r3, [r3, #28]
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d15e      	bne.n	8008d6c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cae:	4b09      	ldr	r3, [pc, #36]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a08      	ldr	r2, [pc, #32]	@ (8008cd4 <HAL_RCC_OscConfig+0x4b8>)
 8008cb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cba:	f7fc fc81 	bl	80055c0 <HAL_GetTick>
 8008cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008cc0:	e00c      	b.n	8008cdc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cc2:	f7fc fc7d 	bl	80055c0 <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d905      	bls.n	8008cdc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e0ab      	b.n	8008e2c <HAL_RCC_OscConfig+0x610>
 8008cd4:	40021000 	.word	0x40021000
 8008cd8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008cdc:	4b55      	ldr	r3, [pc, #340]	@ (8008e34 <HAL_RCC_OscConfig+0x618>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1ec      	bne.n	8008cc2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ce8:	4b52      	ldr	r3, [pc, #328]	@ (8008e34 <HAL_RCC_OscConfig+0x618>)
 8008cea:	68da      	ldr	r2, [r3, #12]
 8008cec:	4b52      	ldr	r3, [pc, #328]	@ (8008e38 <HAL_RCC_OscConfig+0x61c>)
 8008cee:	4013      	ands	r3, r2
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	6a11      	ldr	r1, [r2, #32]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008cf8:	3a01      	subs	r2, #1
 8008cfa:	0112      	lsls	r2, r2, #4
 8008cfc:	4311      	orrs	r1, r2
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008d02:	0212      	lsls	r2, r2, #8
 8008d04:	4311      	orrs	r1, r2
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008d0a:	0852      	lsrs	r2, r2, #1
 8008d0c:	3a01      	subs	r2, #1
 8008d0e:	0552      	lsls	r2, r2, #21
 8008d10:	4311      	orrs	r1, r2
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008d16:	0852      	lsrs	r2, r2, #1
 8008d18:	3a01      	subs	r2, #1
 8008d1a:	0652      	lsls	r2, r2, #25
 8008d1c:	4311      	orrs	r1, r2
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008d22:	06d2      	lsls	r2, r2, #27
 8008d24:	430a      	orrs	r2, r1
 8008d26:	4943      	ldr	r1, [pc, #268]	@ (8008e34 <HAL_RCC_OscConfig+0x618>)
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d2c:	4b41      	ldr	r3, [pc, #260]	@ (8008e34 <HAL_RCC_OscConfig+0x618>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a40      	ldr	r2, [pc, #256]	@ (8008e34 <HAL_RCC_OscConfig+0x618>)
 8008d32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008d38:	4b3e      	ldr	r3, [pc, #248]	@ (8008e34 <HAL_RCC_OscConfig+0x618>)
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	4a3d      	ldr	r2, [pc, #244]	@ (8008e34 <HAL_RCC_OscConfig+0x618>)
 8008d3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d44:	f7fc fc3c 	bl	80055c0 <HAL_GetTick>
 8008d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d4a:	e008      	b.n	8008d5e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d4c:	f7fc fc38 	bl	80055c0 <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d901      	bls.n	8008d5e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e066      	b.n	8008e2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d5e:	4b35      	ldr	r3, [pc, #212]	@ (8008e34 <HAL_RCC_OscConfig+0x618>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d0f0      	beq.n	8008d4c <HAL_RCC_OscConfig+0x530>
 8008d6a:	e05e      	b.n	8008e2a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d6c:	4b31      	ldr	r3, [pc, #196]	@ (8008e34 <HAL_RCC_OscConfig+0x618>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a30      	ldr	r2, [pc, #192]	@ (8008e34 <HAL_RCC_OscConfig+0x618>)
 8008d72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d78:	f7fc fc22 	bl	80055c0 <HAL_GetTick>
 8008d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d7e:	e008      	b.n	8008d92 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d80:	f7fc fc1e 	bl	80055c0 <HAL_GetTick>
 8008d84:	4602      	mov	r2, r0
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d901      	bls.n	8008d92 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e04c      	b.n	8008e2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d92:	4b28      	ldr	r3, [pc, #160]	@ (8008e34 <HAL_RCC_OscConfig+0x618>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1f0      	bne.n	8008d80 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008d9e:	4b25      	ldr	r3, [pc, #148]	@ (8008e34 <HAL_RCC_OscConfig+0x618>)
 8008da0:	68da      	ldr	r2, [r3, #12]
 8008da2:	4924      	ldr	r1, [pc, #144]	@ (8008e34 <HAL_RCC_OscConfig+0x618>)
 8008da4:	4b25      	ldr	r3, [pc, #148]	@ (8008e3c <HAL_RCC_OscConfig+0x620>)
 8008da6:	4013      	ands	r3, r2
 8008da8:	60cb      	str	r3, [r1, #12]
 8008daa:	e03e      	b.n	8008e2a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	69db      	ldr	r3, [r3, #28]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d101      	bne.n	8008db8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e039      	b.n	8008e2c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008db8:	4b1e      	ldr	r3, [pc, #120]	@ (8008e34 <HAL_RCC_OscConfig+0x618>)
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f003 0203 	and.w	r2, r3, #3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a1b      	ldr	r3, [r3, #32]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d12c      	bne.n	8008e26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d123      	bne.n	8008e26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d11b      	bne.n	8008e26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d113      	bne.n	8008e26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e08:	085b      	lsrs	r3, r3, #1
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d109      	bne.n	8008e26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e1c:	085b      	lsrs	r3, r3, #1
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d001      	beq.n	8008e2a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e000      	b.n	8008e2c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3720      	adds	r7, #32
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	40021000 	.word	0x40021000
 8008e38:	019f800c 	.word	0x019f800c
 8008e3c:	feeefffc 	.word	0xfeeefffc

08008e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e11e      	b.n	8009096 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e58:	4b91      	ldr	r3, [pc, #580]	@ (80090a0 <HAL_RCC_ClockConfig+0x260>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 030f 	and.w	r3, r3, #15
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d910      	bls.n	8008e88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e66:	4b8e      	ldr	r3, [pc, #568]	@ (80090a0 <HAL_RCC_ClockConfig+0x260>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f023 020f 	bic.w	r2, r3, #15
 8008e6e:	498c      	ldr	r1, [pc, #560]	@ (80090a0 <HAL_RCC_ClockConfig+0x260>)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e76:	4b8a      	ldr	r3, [pc, #552]	@ (80090a0 <HAL_RCC_ClockConfig+0x260>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 030f 	and.w	r3, r3, #15
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d001      	beq.n	8008e88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e106      	b.n	8009096 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d073      	beq.n	8008f7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	2b03      	cmp	r3, #3
 8008e9a:	d129      	bne.n	8008ef0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e9c:	4b81      	ldr	r3, [pc, #516]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d101      	bne.n	8008eac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e0f4      	b.n	8009096 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008eac:	f000 f9ce 	bl	800924c <RCC_GetSysClockFreqFromPLLSource>
 8008eb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	4a7c      	ldr	r2, [pc, #496]	@ (80090a8 <HAL_RCC_ClockConfig+0x268>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d93f      	bls.n	8008f3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008eba:	4b7a      	ldr	r3, [pc, #488]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d009      	beq.n	8008eda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d033      	beq.n	8008f3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d12f      	bne.n	8008f3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008eda:	4b72      	ldr	r3, [pc, #456]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ee2:	4a70      	ldr	r2, [pc, #448]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8008ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ee8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008eea:	2380      	movs	r3, #128	@ 0x80
 8008eec:	617b      	str	r3, [r7, #20]
 8008eee:	e024      	b.n	8008f3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d107      	bne.n	8008f08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ef8:	4b6a      	ldr	r3, [pc, #424]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d109      	bne.n	8008f18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e0c6      	b.n	8009096 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f08:	4b66      	ldr	r3, [pc, #408]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d101      	bne.n	8008f18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e0be      	b.n	8009096 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008f18:	f000 f8ce 	bl	80090b8 <HAL_RCC_GetSysClockFreq>
 8008f1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	4a61      	ldr	r2, [pc, #388]	@ (80090a8 <HAL_RCC_ClockConfig+0x268>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d909      	bls.n	8008f3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008f26:	4b5f      	ldr	r3, [pc, #380]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f2e:	4a5d      	ldr	r2, [pc, #372]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8008f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008f36:	2380      	movs	r3, #128	@ 0x80
 8008f38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f3a:	4b5a      	ldr	r3, [pc, #360]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	f023 0203 	bic.w	r2, r3, #3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	4957      	ldr	r1, [pc, #348]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f4c:	f7fc fb38 	bl	80055c0 <HAL_GetTick>
 8008f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f52:	e00a      	b.n	8008f6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f54:	f7fc fb34 	bl	80055c0 <HAL_GetTick>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d901      	bls.n	8008f6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e095      	b.n	8009096 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f6a:	4b4e      	ldr	r3, [pc, #312]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f003 020c 	and.w	r2, r3, #12
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d1eb      	bne.n	8008f54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0302 	and.w	r3, r3, #2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d023      	beq.n	8008fd0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0304 	and.w	r3, r3, #4
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d005      	beq.n	8008fa0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f94:	4b43      	ldr	r3, [pc, #268]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	4a42      	ldr	r2, [pc, #264]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8008f9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008f9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0308 	and.w	r3, r3, #8
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d007      	beq.n	8008fbc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008fac:	4b3d      	ldr	r3, [pc, #244]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008fb4:	4a3b      	ldr	r2, [pc, #236]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8008fb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008fba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fbc:	4b39      	ldr	r3, [pc, #228]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	4936      	ldr	r1, [pc, #216]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	608b      	str	r3, [r1, #8]
 8008fce:	e008      	b.n	8008fe2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	2b80      	cmp	r3, #128	@ 0x80
 8008fd4:	d105      	bne.n	8008fe2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008fd6:	4b33      	ldr	r3, [pc, #204]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	4a32      	ldr	r2, [pc, #200]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8008fdc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008fe0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80090a0 <HAL_RCC_ClockConfig+0x260>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 030f 	and.w	r3, r3, #15
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d21d      	bcs.n	800902c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80090a0 <HAL_RCC_ClockConfig+0x260>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f023 020f 	bic.w	r2, r3, #15
 8008ff8:	4929      	ldr	r1, [pc, #164]	@ (80090a0 <HAL_RCC_ClockConfig+0x260>)
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009000:	f7fc fade 	bl	80055c0 <HAL_GetTick>
 8009004:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009006:	e00a      	b.n	800901e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009008:	f7fc fada 	bl	80055c0 <HAL_GetTick>
 800900c:	4602      	mov	r2, r0
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009016:	4293      	cmp	r3, r2
 8009018:	d901      	bls.n	800901e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800901a:	2303      	movs	r3, #3
 800901c:	e03b      	b.n	8009096 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800901e:	4b20      	ldr	r3, [pc, #128]	@ (80090a0 <HAL_RCC_ClockConfig+0x260>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 030f 	and.w	r3, r3, #15
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	429a      	cmp	r2, r3
 800902a:	d1ed      	bne.n	8009008 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 0304 	and.w	r3, r3, #4
 8009034:	2b00      	cmp	r3, #0
 8009036:	d008      	beq.n	800904a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009038:	4b1a      	ldr	r3, [pc, #104]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	4917      	ldr	r1, [pc, #92]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8009046:	4313      	orrs	r3, r2
 8009048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 0308 	and.w	r3, r3, #8
 8009052:	2b00      	cmp	r3, #0
 8009054:	d009      	beq.n	800906a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009056:	4b13      	ldr	r3, [pc, #76]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	00db      	lsls	r3, r3, #3
 8009064:	490f      	ldr	r1, [pc, #60]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8009066:	4313      	orrs	r3, r2
 8009068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800906a:	f000 f825 	bl	80090b8 <HAL_RCC_GetSysClockFreq>
 800906e:	4602      	mov	r2, r0
 8009070:	4b0c      	ldr	r3, [pc, #48]	@ (80090a4 <HAL_RCC_ClockConfig+0x264>)
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	091b      	lsrs	r3, r3, #4
 8009076:	f003 030f 	and.w	r3, r3, #15
 800907a:	490c      	ldr	r1, [pc, #48]	@ (80090ac <HAL_RCC_ClockConfig+0x26c>)
 800907c:	5ccb      	ldrb	r3, [r1, r3]
 800907e:	f003 031f 	and.w	r3, r3, #31
 8009082:	fa22 f303 	lsr.w	r3, r2, r3
 8009086:	4a0a      	ldr	r2, [pc, #40]	@ (80090b0 <HAL_RCC_ClockConfig+0x270>)
 8009088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800908a:	4b0a      	ldr	r3, [pc, #40]	@ (80090b4 <HAL_RCC_ClockConfig+0x274>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4618      	mov	r0, r3
 8009090:	f7fb ffb8 	bl	8005004 <HAL_InitTick>
 8009094:	4603      	mov	r3, r0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3718      	adds	r7, #24
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	40022000 	.word	0x40022000
 80090a4:	40021000 	.word	0x40021000
 80090a8:	04c4b400 	.word	0x04c4b400
 80090ac:	080227b8 	.word	0x080227b8
 80090b0:	20000010 	.word	0x20000010
 80090b4:	20000014 	.word	0x20000014

080090b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b087      	sub	sp, #28
 80090bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80090be:	4b2c      	ldr	r3, [pc, #176]	@ (8009170 <HAL_RCC_GetSysClockFreq+0xb8>)
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f003 030c 	and.w	r3, r3, #12
 80090c6:	2b04      	cmp	r3, #4
 80090c8:	d102      	bne.n	80090d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80090ca:	4b2a      	ldr	r3, [pc, #168]	@ (8009174 <HAL_RCC_GetSysClockFreq+0xbc>)
 80090cc:	613b      	str	r3, [r7, #16]
 80090ce:	e047      	b.n	8009160 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80090d0:	4b27      	ldr	r3, [pc, #156]	@ (8009170 <HAL_RCC_GetSysClockFreq+0xb8>)
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	f003 030c 	and.w	r3, r3, #12
 80090d8:	2b08      	cmp	r3, #8
 80090da:	d102      	bne.n	80090e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80090dc:	4b25      	ldr	r3, [pc, #148]	@ (8009174 <HAL_RCC_GetSysClockFreq+0xbc>)
 80090de:	613b      	str	r3, [r7, #16]
 80090e0:	e03e      	b.n	8009160 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80090e2:	4b23      	ldr	r3, [pc, #140]	@ (8009170 <HAL_RCC_GetSysClockFreq+0xb8>)
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	f003 030c 	and.w	r3, r3, #12
 80090ea:	2b0c      	cmp	r3, #12
 80090ec:	d136      	bne.n	800915c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80090ee:	4b20      	ldr	r3, [pc, #128]	@ (8009170 <HAL_RCC_GetSysClockFreq+0xb8>)
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	f003 0303 	and.w	r3, r3, #3
 80090f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80090f8:	4b1d      	ldr	r3, [pc, #116]	@ (8009170 <HAL_RCC_GetSysClockFreq+0xb8>)
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	091b      	lsrs	r3, r3, #4
 80090fe:	f003 030f 	and.w	r3, r3, #15
 8009102:	3301      	adds	r3, #1
 8009104:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2b03      	cmp	r3, #3
 800910a:	d10c      	bne.n	8009126 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800910c:	4a19      	ldr	r2, [pc, #100]	@ (8009174 <HAL_RCC_GetSysClockFreq+0xbc>)
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	fbb2 f3f3 	udiv	r3, r2, r3
 8009114:	4a16      	ldr	r2, [pc, #88]	@ (8009170 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009116:	68d2      	ldr	r2, [r2, #12]
 8009118:	0a12      	lsrs	r2, r2, #8
 800911a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800911e:	fb02 f303 	mul.w	r3, r2, r3
 8009122:	617b      	str	r3, [r7, #20]
      break;
 8009124:	e00c      	b.n	8009140 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009126:	4a13      	ldr	r2, [pc, #76]	@ (8009174 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	fbb2 f3f3 	udiv	r3, r2, r3
 800912e:	4a10      	ldr	r2, [pc, #64]	@ (8009170 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009130:	68d2      	ldr	r2, [r2, #12]
 8009132:	0a12      	lsrs	r2, r2, #8
 8009134:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009138:	fb02 f303 	mul.w	r3, r2, r3
 800913c:	617b      	str	r3, [r7, #20]
      break;
 800913e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009140:	4b0b      	ldr	r3, [pc, #44]	@ (8009170 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	0e5b      	lsrs	r3, r3, #25
 8009146:	f003 0303 	and.w	r3, r3, #3
 800914a:	3301      	adds	r3, #1
 800914c:	005b      	lsls	r3, r3, #1
 800914e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009150:	697a      	ldr	r2, [r7, #20]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	fbb2 f3f3 	udiv	r3, r2, r3
 8009158:	613b      	str	r3, [r7, #16]
 800915a:	e001      	b.n	8009160 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800915c:	2300      	movs	r3, #0
 800915e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009160:	693b      	ldr	r3, [r7, #16]
}
 8009162:	4618      	mov	r0, r3
 8009164:	371c      	adds	r7, #28
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	40021000 	.word	0x40021000
 8009174:	00f42400 	.word	0x00f42400

08009178 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009178:	b480      	push	{r7}
 800917a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800917c:	4b03      	ldr	r3, [pc, #12]	@ (800918c <HAL_RCC_GetHCLKFreq+0x14>)
 800917e:	681b      	ldr	r3, [r3, #0]
}
 8009180:	4618      	mov	r0, r3
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	20000010 	.word	0x20000010

08009190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009194:	f7ff fff0 	bl	8009178 <HAL_RCC_GetHCLKFreq>
 8009198:	4602      	mov	r2, r0
 800919a:	4b06      	ldr	r3, [pc, #24]	@ (80091b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	0a1b      	lsrs	r3, r3, #8
 80091a0:	f003 0307 	and.w	r3, r3, #7
 80091a4:	4904      	ldr	r1, [pc, #16]	@ (80091b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80091a6:	5ccb      	ldrb	r3, [r1, r3]
 80091a8:	f003 031f 	and.w	r3, r3, #31
 80091ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	40021000 	.word	0x40021000
 80091b8:	080227c8 	.word	0x080227c8

080091bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80091c0:	f7ff ffda 	bl	8009178 <HAL_RCC_GetHCLKFreq>
 80091c4:	4602      	mov	r2, r0
 80091c6:	4b06      	ldr	r3, [pc, #24]	@ (80091e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	0adb      	lsrs	r3, r3, #11
 80091cc:	f003 0307 	and.w	r3, r3, #7
 80091d0:	4904      	ldr	r1, [pc, #16]	@ (80091e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80091d2:	5ccb      	ldrb	r3, [r1, r3]
 80091d4:	f003 031f 	and.w	r3, r3, #31
 80091d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091dc:	4618      	mov	r0, r3
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	40021000 	.word	0x40021000
 80091e4:	080227c8 	.word	0x080227c8

080091e8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	220f      	movs	r2, #15
 80091f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80091f8:	4b12      	ldr	r3, [pc, #72]	@ (8009244 <HAL_RCC_GetClockConfig+0x5c>)
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	f003 0203 	and.w	r2, r3, #3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009204:	4b0f      	ldr	r3, [pc, #60]	@ (8009244 <HAL_RCC_GetClockConfig+0x5c>)
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009210:	4b0c      	ldr	r3, [pc, #48]	@ (8009244 <HAL_RCC_GetClockConfig+0x5c>)
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800921c:	4b09      	ldr	r3, [pc, #36]	@ (8009244 <HAL_RCC_GetClockConfig+0x5c>)
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	08db      	lsrs	r3, r3, #3
 8009222:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800922a:	4b07      	ldr	r3, [pc, #28]	@ (8009248 <HAL_RCC_GetClockConfig+0x60>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 020f 	and.w	r2, r3, #15
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	601a      	str	r2, [r3, #0]
}
 8009236:	bf00      	nop
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	40021000 	.word	0x40021000
 8009248:	40022000 	.word	0x40022000

0800924c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800924c:	b480      	push	{r7}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009252:	4b1e      	ldr	r3, [pc, #120]	@ (80092cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	f003 0303 	and.w	r3, r3, #3
 800925a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800925c:	4b1b      	ldr	r3, [pc, #108]	@ (80092cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	091b      	lsrs	r3, r3, #4
 8009262:	f003 030f 	and.w	r3, r3, #15
 8009266:	3301      	adds	r3, #1
 8009268:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	2b03      	cmp	r3, #3
 800926e:	d10c      	bne.n	800928a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009270:	4a17      	ldr	r2, [pc, #92]	@ (80092d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	fbb2 f3f3 	udiv	r3, r2, r3
 8009278:	4a14      	ldr	r2, [pc, #80]	@ (80092cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800927a:	68d2      	ldr	r2, [r2, #12]
 800927c:	0a12      	lsrs	r2, r2, #8
 800927e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009282:	fb02 f303 	mul.w	r3, r2, r3
 8009286:	617b      	str	r3, [r7, #20]
    break;
 8009288:	e00c      	b.n	80092a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800928a:	4a11      	ldr	r2, [pc, #68]	@ (80092d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009292:	4a0e      	ldr	r2, [pc, #56]	@ (80092cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009294:	68d2      	ldr	r2, [r2, #12]
 8009296:	0a12      	lsrs	r2, r2, #8
 8009298:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800929c:	fb02 f303 	mul.w	r3, r2, r3
 80092a0:	617b      	str	r3, [r7, #20]
    break;
 80092a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80092a4:	4b09      	ldr	r3, [pc, #36]	@ (80092cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	0e5b      	lsrs	r3, r3, #25
 80092aa:	f003 0303 	and.w	r3, r3, #3
 80092ae:	3301      	adds	r3, #1
 80092b0:	005b      	lsls	r3, r3, #1
 80092b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80092b4:	697a      	ldr	r2, [r7, #20]
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80092bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80092be:	687b      	ldr	r3, [r7, #4]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	371c      	adds	r7, #28
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr
 80092cc:	40021000 	.word	0x40021000
 80092d0:	00f42400 	.word	0x00f42400

080092d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092dc:	2300      	movs	r3, #0
 80092de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092e0:	2300      	movs	r3, #0
 80092e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 8098 	beq.w	8009422 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092f2:	2300      	movs	r3, #0
 80092f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092f6:	4b43      	ldr	r3, [pc, #268]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10d      	bne.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009302:	4b40      	ldr	r3, [pc, #256]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009306:	4a3f      	ldr	r2, [pc, #252]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800930c:	6593      	str	r3, [r2, #88]	@ 0x58
 800930e:	4b3d      	ldr	r3, [pc, #244]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009316:	60bb      	str	r3, [r7, #8]
 8009318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800931a:	2301      	movs	r3, #1
 800931c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800931e:	4b3a      	ldr	r3, [pc, #232]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a39      	ldr	r2, [pc, #228]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009328:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800932a:	f7fc f949 	bl	80055c0 <HAL_GetTick>
 800932e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009330:	e009      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009332:	f7fc f945 	bl	80055c0 <HAL_GetTick>
 8009336:	4602      	mov	r2, r0
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	1ad3      	subs	r3, r2, r3
 800933c:	2b02      	cmp	r3, #2
 800933e:	d902      	bls.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009340:	2303      	movs	r3, #3
 8009342:	74fb      	strb	r3, [r7, #19]
        break;
 8009344:	e005      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009346:	4b30      	ldr	r3, [pc, #192]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0ef      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009352:	7cfb      	ldrb	r3, [r7, #19]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d159      	bne.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009358:	4b2a      	ldr	r3, [pc, #168]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800935a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800935e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009362:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d01e      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	429a      	cmp	r2, r3
 8009372:	d019      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009374:	4b23      	ldr	r3, [pc, #140]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800937a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800937e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009380:	4b20      	ldr	r3, [pc, #128]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009386:	4a1f      	ldr	r2, [pc, #124]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800938c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009390:	4b1c      	ldr	r3, [pc, #112]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009396:	4a1b      	ldr	r2, [pc, #108]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800939c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80093a0:	4a18      	ldr	r2, [pc, #96]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d016      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093b2:	f7fc f905 	bl	80055c0 <HAL_GetTick>
 80093b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093b8:	e00b      	b.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093ba:	f7fc f901 	bl	80055c0 <HAL_GetTick>
 80093be:	4602      	mov	r2, r0
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	1ad3      	subs	r3, r2, r3
 80093c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d902      	bls.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80093cc:	2303      	movs	r3, #3
 80093ce:	74fb      	strb	r3, [r7, #19]
            break;
 80093d0:	e006      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d8:	f003 0302 	and.w	r3, r3, #2
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d0ec      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80093e0:	7cfb      	ldrb	r3, [r7, #19]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10b      	bne.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093e6:	4b07      	ldr	r3, [pc, #28]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093f4:	4903      	ldr	r1, [pc, #12]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80093fc:	e008      	b.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80093fe:	7cfb      	ldrb	r3, [r7, #19]
 8009400:	74bb      	strb	r3, [r7, #18]
 8009402:	e005      	b.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009404:	40021000 	.word	0x40021000
 8009408:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800940c:	7cfb      	ldrb	r3, [r7, #19]
 800940e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009410:	7c7b      	ldrb	r3, [r7, #17]
 8009412:	2b01      	cmp	r3, #1
 8009414:	d105      	bne.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009416:	4ba7      	ldr	r3, [pc, #668]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800941a:	4aa6      	ldr	r2, [pc, #664]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800941c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009420:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00a      	beq.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800942e:	4ba1      	ldr	r3, [pc, #644]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009434:	f023 0203 	bic.w	r2, r3, #3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	499d      	ldr	r1, [pc, #628]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800943e:	4313      	orrs	r3, r2
 8009440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0302 	and.w	r3, r3, #2
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00a      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009450:	4b98      	ldr	r3, [pc, #608]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009456:	f023 020c 	bic.w	r2, r3, #12
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	4995      	ldr	r1, [pc, #596]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009460:	4313      	orrs	r3, r2
 8009462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0304 	and.w	r3, r3, #4
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00a      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009472:	4b90      	ldr	r3, [pc, #576]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009478:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	498c      	ldr	r1, [pc, #560]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009482:	4313      	orrs	r3, r2
 8009484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 0308 	and.w	r3, r3, #8
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00a      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009494:	4b87      	ldr	r3, [pc, #540]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800949a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	4984      	ldr	r1, [pc, #528]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094a4:	4313      	orrs	r3, r2
 80094a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 0310 	and.w	r3, r3, #16
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00a      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80094b6:	4b7f      	ldr	r3, [pc, #508]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	695b      	ldr	r3, [r3, #20]
 80094c4:	497b      	ldr	r1, [pc, #492]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094c6:	4313      	orrs	r3, r2
 80094c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 0320 	and.w	r3, r3, #32
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00a      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094d8:	4b76      	ldr	r3, [pc, #472]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	4973      	ldr	r1, [pc, #460]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094e8:	4313      	orrs	r3, r2
 80094ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00a      	beq.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80094fa:	4b6e      	ldr	r3, [pc, #440]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009500:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	69db      	ldr	r3, [r3, #28]
 8009508:	496a      	ldr	r1, [pc, #424]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800950a:	4313      	orrs	r3, r2
 800950c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00a      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800951c:	4b65      	ldr	r3, [pc, #404]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800951e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009522:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	4962      	ldr	r1, [pc, #392]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800952c:	4313      	orrs	r3, r2
 800952e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00a      	beq.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800953e:	4b5d      	ldr	r3, [pc, #372]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009544:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800954c:	4959      	ldr	r1, [pc, #356]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800954e:	4313      	orrs	r3, r2
 8009550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00a      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009560:	4b54      	ldr	r3, [pc, #336]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009562:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009566:	f023 0203 	bic.w	r2, r3, #3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800956e:	4951      	ldr	r1, [pc, #324]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009570:	4313      	orrs	r3, r2
 8009572:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00a      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009582:	4b4c      	ldr	r3, [pc, #304]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009588:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009590:	4948      	ldr	r1, [pc, #288]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009592:	4313      	orrs	r3, r2
 8009594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d015      	beq.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80095a4:	4b43      	ldr	r3, [pc, #268]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095b2:	4940      	ldr	r1, [pc, #256]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095b4:	4313      	orrs	r3, r2
 80095b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095c2:	d105      	bne.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095c4:	4b3b      	ldr	r3, [pc, #236]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	4a3a      	ldr	r2, [pc, #232]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095ce:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d015      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80095dc:	4b35      	ldr	r3, [pc, #212]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095ea:	4932      	ldr	r1, [pc, #200]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ec:	4313      	orrs	r3, r2
 80095ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80095fa:	d105      	bne.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095fc:	4b2d      	ldr	r3, [pc, #180]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	4a2c      	ldr	r2, [pc, #176]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009602:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009606:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009610:	2b00      	cmp	r3, #0
 8009612:	d015      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009614:	4b27      	ldr	r3, [pc, #156]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800961a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009622:	4924      	ldr	r1, [pc, #144]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009624:	4313      	orrs	r3, r2
 8009626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800962e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009632:	d105      	bne.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009634:	4b1f      	ldr	r3, [pc, #124]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	4a1e      	ldr	r2, [pc, #120]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800963a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800963e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d015      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800964c:	4b19      	ldr	r3, [pc, #100]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800964e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009652:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800965a:	4916      	ldr	r1, [pc, #88]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800965c:	4313      	orrs	r3, r2
 800965e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009666:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800966a:	d105      	bne.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800966c:	4b11      	ldr	r3, [pc, #68]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	4a10      	ldr	r2, [pc, #64]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009672:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009676:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d019      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009684:	4b0b      	ldr	r3, [pc, #44]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800968a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009692:	4908      	ldr	r1, [pc, #32]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009694:	4313      	orrs	r3, r2
 8009696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800969e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096a2:	d109      	bne.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096a4:	4b03      	ldr	r3, [pc, #12]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	4a02      	ldr	r2, [pc, #8]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096ae:	60d3      	str	r3, [r2, #12]
 80096b0:	e002      	b.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80096b2:	bf00      	nop
 80096b4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d015      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80096c4:	4b29      	ldr	r3, [pc, #164]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096d2:	4926      	ldr	r1, [pc, #152]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096d4:	4313      	orrs	r3, r2
 80096d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096e2:	d105      	bne.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80096e4:	4b21      	ldr	r3, [pc, #132]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	4a20      	ldr	r2, [pc, #128]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d015      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80096fc:	4b1b      	ldr	r3, [pc, #108]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009702:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800970a:	4918      	ldr	r1, [pc, #96]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800970c:	4313      	orrs	r3, r2
 800970e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800971a:	d105      	bne.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800971c:	4b13      	ldr	r3, [pc, #76]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	4a12      	ldr	r2, [pc, #72]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009722:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009726:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009730:	2b00      	cmp	r3, #0
 8009732:	d015      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009734:	4b0d      	ldr	r3, [pc, #52]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009736:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800973a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009742:	490a      	ldr	r1, [pc, #40]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009744:	4313      	orrs	r3, r2
 8009746:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800974e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009752:	d105      	bne.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009754:	4b05      	ldr	r3, [pc, #20]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	4a04      	ldr	r2, [pc, #16]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800975a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800975e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009760:	7cbb      	ldrb	r3, [r7, #18]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3718      	adds	r7, #24
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	40021000 	.word	0x40021000

08009770 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d101      	bne.n	8009782 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e09d      	b.n	80098be <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009786:	2b00      	cmp	r3, #0
 8009788:	d108      	bne.n	800979c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009792:	d009      	beq.n	80097a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	61da      	str	r2, [r3, #28]
 800979a:	e005      	b.n	80097a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d106      	bne.n	80097c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7fb fbb2 	bl	8004f2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2202      	movs	r2, #2
 80097cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80097e8:	d902      	bls.n	80097f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80097ea:	2300      	movs	r3, #0
 80097ec:	60fb      	str	r3, [r7, #12]
 80097ee:	e002      	b.n	80097f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80097f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80097f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80097fe:	d007      	beq.n	8009810 <HAL_SPI_Init+0xa0>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009808:	d002      	beq.n	8009810 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009820:	431a      	orrs	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	f003 0302 	and.w	r3, r3, #2
 800982a:	431a      	orrs	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	695b      	ldr	r3, [r3, #20]
 8009830:	f003 0301 	and.w	r3, r3, #1
 8009834:	431a      	orrs	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800983e:	431a      	orrs	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	69db      	ldr	r3, [r3, #28]
 8009844:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009848:	431a      	orrs	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a1b      	ldr	r3, [r3, #32]
 800984e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009852:	ea42 0103 	orr.w	r1, r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800985a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	0c1b      	lsrs	r3, r3, #16
 800986c:	f003 0204 	and.w	r2, r3, #4
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009874:	f003 0310 	and.w	r3, r3, #16
 8009878:	431a      	orrs	r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800987e:	f003 0308 	and.w	r3, r3, #8
 8009882:	431a      	orrs	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800988c:	ea42 0103 	orr.w	r1, r2, r3
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	430a      	orrs	r2, r1
 800989c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	69da      	ldr	r2, [r3, #28]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80098ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b088      	sub	sp, #32
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	60f8      	str	r0, [r7, #12]
 80098ce:	60b9      	str	r1, [r7, #8]
 80098d0:	603b      	str	r3, [r7, #0]
 80098d2:	4613      	mov	r3, r2
 80098d4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098d6:	f7fb fe73 	bl	80055c0 <HAL_GetTick>
 80098da:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80098dc:	88fb      	ldrh	r3, [r7, #6]
 80098de:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d001      	beq.n	80098f0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80098ec:	2302      	movs	r3, #2
 80098ee:	e15c      	b.n	8009baa <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d002      	beq.n	80098fc <HAL_SPI_Transmit+0x36>
 80098f6:	88fb      	ldrh	r3, [r7, #6]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d101      	bne.n	8009900 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	e154      	b.n	8009baa <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009906:	2b01      	cmp	r3, #1
 8009908:	d101      	bne.n	800990e <HAL_SPI_Transmit+0x48>
 800990a:	2302      	movs	r3, #2
 800990c:	e14d      	b.n	8009baa <HAL_SPI_Transmit+0x2e4>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2203      	movs	r2, #3
 800991a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	68ba      	ldr	r2, [r7, #8]
 8009928:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	88fa      	ldrh	r2, [r7, #6]
 800992e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	88fa      	ldrh	r2, [r7, #6]
 8009934:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2200      	movs	r2, #0
 8009940:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2200      	movs	r2, #0
 8009950:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2200      	movs	r2, #0
 8009956:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009960:	d10f      	bne.n	8009982 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009970:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009980:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800998c:	2b40      	cmp	r3, #64	@ 0x40
 800998e:	d007      	beq.n	80099a0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800999e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80099a8:	d952      	bls.n	8009a50 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d002      	beq.n	80099b8 <HAL_SPI_Transmit+0xf2>
 80099b2:	8b7b      	ldrh	r3, [r7, #26]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d145      	bne.n	8009a44 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099bc:	881a      	ldrh	r2, [r3, #0]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c8:	1c9a      	adds	r2, r3, #2
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	3b01      	subs	r3, #1
 80099d6:	b29a      	uxth	r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80099dc:	e032      	b.n	8009a44 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	f003 0302 	and.w	r3, r3, #2
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d112      	bne.n	8009a12 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f0:	881a      	ldrh	r2, [r3, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099fc:	1c9a      	adds	r2, r3, #2
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009a10:	e018      	b.n	8009a44 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a12:	f7fb fdd5 	bl	80055c0 <HAL_GetTick>
 8009a16:	4602      	mov	r2, r0
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	683a      	ldr	r2, [r7, #0]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d803      	bhi.n	8009a2a <HAL_SPI_Transmit+0x164>
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a28:	d102      	bne.n	8009a30 <HAL_SPI_Transmit+0x16a>
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d109      	bne.n	8009a44 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009a40:	2303      	movs	r3, #3
 8009a42:	e0b2      	b.n	8009baa <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1c7      	bne.n	80099de <HAL_SPI_Transmit+0x118>
 8009a4e:	e083      	b.n	8009b58 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d002      	beq.n	8009a5e <HAL_SPI_Transmit+0x198>
 8009a58:	8b7b      	ldrh	r3, [r7, #26]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d177      	bne.n	8009b4e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d912      	bls.n	8009a8e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a6c:	881a      	ldrh	r2, [r3, #0]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a78:	1c9a      	adds	r2, r3, #2
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	3b02      	subs	r3, #2
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009a8c:	e05f      	b.n	8009b4e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	330c      	adds	r3, #12
 8009a98:	7812      	ldrb	r2, [r2, #0]
 8009a9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aa0:	1c5a      	adds	r2, r3, #1
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	3b01      	subs	r3, #1
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009ab4:	e04b      	b.n	8009b4e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f003 0302 	and.w	r3, r3, #2
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d12b      	bne.n	8009b1c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d912      	bls.n	8009af4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ad2:	881a      	ldrh	r2, [r3, #0]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ade:	1c9a      	adds	r2, r3, #2
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	3b02      	subs	r3, #2
 8009aec:	b29a      	uxth	r2, r3
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009af2:	e02c      	b.n	8009b4e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	330c      	adds	r3, #12
 8009afe:	7812      	ldrb	r2, [r2, #0]
 8009b00:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b06:	1c5a      	adds	r2, r3, #1
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	3b01      	subs	r3, #1
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009b1a:	e018      	b.n	8009b4e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b1c:	f7fb fd50 	bl	80055c0 <HAL_GetTick>
 8009b20:	4602      	mov	r2, r0
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	683a      	ldr	r2, [r7, #0]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d803      	bhi.n	8009b34 <HAL_SPI_Transmit+0x26e>
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b32:	d102      	bne.n	8009b3a <HAL_SPI_Transmit+0x274>
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d109      	bne.n	8009b4e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009b4a:	2303      	movs	r3, #3
 8009b4c:	e02d      	b.n	8009baa <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1ae      	bne.n	8009ab6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009b58:	69fa      	ldr	r2, [r7, #28]
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f000 fb65 	bl	800a22c <SPI_EndRxTxTransaction>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d002      	beq.n	8009b6e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d10a      	bne.n	8009b8c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b76:	2300      	movs	r3, #0
 8009b78:	617b      	str	r3, [r7, #20]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	617b      	str	r3, [r7, #20]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	617b      	str	r3, [r7, #20]
 8009b8a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d001      	beq.n	8009ba8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e000      	b.n	8009baa <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8009ba8:	2300      	movs	r3, #0
  }
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3720      	adds	r7, #32
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b08a      	sub	sp, #40	@ 0x28
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	60f8      	str	r0, [r7, #12]
 8009bba:	60b9      	str	r1, [r7, #8]
 8009bbc:	607a      	str	r2, [r7, #4]
 8009bbe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009bc4:	f7fb fcfc 	bl	80055c0 <HAL_GetTick>
 8009bc8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009bd0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009bd8:	887b      	ldrh	r3, [r7, #2]
 8009bda:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8009bdc:	887b      	ldrh	r3, [r7, #2]
 8009bde:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009be0:	7ffb      	ldrb	r3, [r7, #31]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d00c      	beq.n	8009c00 <HAL_SPI_TransmitReceive+0x4e>
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009bec:	d106      	bne.n	8009bfc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d102      	bne.n	8009bfc <HAL_SPI_TransmitReceive+0x4a>
 8009bf6:	7ffb      	ldrb	r3, [r7, #31]
 8009bf8:	2b04      	cmp	r3, #4
 8009bfa:	d001      	beq.n	8009c00 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	e1f3      	b.n	8009fe8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d005      	beq.n	8009c12 <HAL_SPI_TransmitReceive+0x60>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d002      	beq.n	8009c12 <HAL_SPI_TransmitReceive+0x60>
 8009c0c:	887b      	ldrh	r3, [r7, #2]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d101      	bne.n	8009c16 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e1e8      	b.n	8009fe8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d101      	bne.n	8009c24 <HAL_SPI_TransmitReceive+0x72>
 8009c20:	2302      	movs	r3, #2
 8009c22:	e1e1      	b.n	8009fe8 <HAL_SPI_TransmitReceive+0x436>
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2201      	movs	r2, #1
 8009c28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	2b04      	cmp	r3, #4
 8009c36:	d003      	beq.n	8009c40 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2205      	movs	r2, #5
 8009c3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2200      	movs	r2, #0
 8009c44:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	887a      	ldrh	r2, [r7, #2]
 8009c50:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	887a      	ldrh	r2, [r7, #2]
 8009c58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	887a      	ldrh	r2, [r7, #2]
 8009c66:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	887a      	ldrh	r2, [r7, #2]
 8009c6c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2200      	movs	r2, #0
 8009c72:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2200      	movs	r2, #0
 8009c78:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009c82:	d802      	bhi.n	8009c8a <HAL_SPI_TransmitReceive+0xd8>
 8009c84:	8abb      	ldrh	r3, [r7, #20]
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d908      	bls.n	8009c9c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	685a      	ldr	r2, [r3, #4]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009c98:	605a      	str	r2, [r3, #4]
 8009c9a:	e007      	b.n	8009cac <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009caa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cb6:	2b40      	cmp	r3, #64	@ 0x40
 8009cb8:	d007      	beq.n	8009cca <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009cc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009cd2:	f240 8083 	bls.w	8009ddc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d002      	beq.n	8009ce4 <HAL_SPI_TransmitReceive+0x132>
 8009cde:	8afb      	ldrh	r3, [r7, #22]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d16f      	bne.n	8009dc4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce8:	881a      	ldrh	r2, [r3, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf4:	1c9a      	adds	r2, r3, #2
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	3b01      	subs	r3, #1
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d08:	e05c      	b.n	8009dc4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	f003 0302 	and.w	r3, r3, #2
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d11b      	bne.n	8009d50 <HAL_SPI_TransmitReceive+0x19e>
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d016      	beq.n	8009d50 <HAL_SPI_TransmitReceive+0x19e>
 8009d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d113      	bne.n	8009d50 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d2c:	881a      	ldrh	r2, [r3, #0]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d38:	1c9a      	adds	r2, r3, #2
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	3b01      	subs	r3, #1
 8009d46:	b29a      	uxth	r2, r3
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d11c      	bne.n	8009d98 <HAL_SPI_TransmitReceive+0x1e6>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d016      	beq.n	8009d98 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68da      	ldr	r2, [r3, #12]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d74:	b292      	uxth	r2, r2
 8009d76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d7c:	1c9a      	adds	r2, r3, #2
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d94:	2301      	movs	r3, #1
 8009d96:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009d98:	f7fb fc12 	bl	80055c0 <HAL_GetTick>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	6a3b      	ldr	r3, [r7, #32]
 8009da0:	1ad3      	subs	r3, r2, r3
 8009da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d80d      	bhi.n	8009dc4 <HAL_SPI_TransmitReceive+0x212>
 8009da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009daa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009dae:	d009      	beq.n	8009dc4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009dc0:	2303      	movs	r3, #3
 8009dc2:	e111      	b.n	8009fe8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d19d      	bne.n	8009d0a <HAL_SPI_TransmitReceive+0x158>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d197      	bne.n	8009d0a <HAL_SPI_TransmitReceive+0x158>
 8009dda:	e0e5      	b.n	8009fa8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d003      	beq.n	8009dec <HAL_SPI_TransmitReceive+0x23a>
 8009de4:	8afb      	ldrh	r3, [r7, #22]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	f040 80d1 	bne.w	8009f8e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d912      	bls.n	8009e1c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dfa:	881a      	ldrh	r2, [r3, #0]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e06:	1c9a      	adds	r2, r3, #2
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	3b02      	subs	r3, #2
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e1a:	e0b8      	b.n	8009f8e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	330c      	adds	r3, #12
 8009e26:	7812      	ldrb	r2, [r2, #0]
 8009e28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	3b01      	subs	r3, #1
 8009e3c:	b29a      	uxth	r2, r3
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e42:	e0a4      	b.n	8009f8e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	f003 0302 	and.w	r3, r3, #2
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d134      	bne.n	8009ebc <HAL_SPI_TransmitReceive+0x30a>
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d02f      	beq.n	8009ebc <HAL_SPI_TransmitReceive+0x30a>
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d12c      	bne.n	8009ebc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d912      	bls.n	8009e92 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e70:	881a      	ldrh	r2, [r3, #0]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e7c:	1c9a      	adds	r2, r3, #2
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	3b02      	subs	r3, #2
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e90:	e012      	b.n	8009eb8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	330c      	adds	r3, #12
 8009e9c:	7812      	ldrb	r2, [r2, #0]
 8009e9e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea4:	1c5a      	adds	r2, r3, #1
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	f003 0301 	and.w	r3, r3, #1
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d148      	bne.n	8009f5c <HAL_SPI_TransmitReceive+0x3aa>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d042      	beq.n	8009f5c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d923      	bls.n	8009f2a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68da      	ldr	r2, [r3, #12]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eec:	b292      	uxth	r2, r2
 8009eee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ef4:	1c9a      	adds	r2, r3, #2
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	3b02      	subs	r3, #2
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d81f      	bhi.n	8009f58 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	685a      	ldr	r2, [r3, #4]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009f26:	605a      	str	r2, [r3, #4]
 8009f28:	e016      	b.n	8009f58 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f103 020c 	add.w	r2, r3, #12
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f36:	7812      	ldrb	r2, [r2, #0]
 8009f38:	b2d2      	uxtb	r2, r2
 8009f3a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f40:	1c5a      	adds	r2, r3, #1
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	b29a      	uxth	r2, r3
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009f5c:	f7fb fb30 	bl	80055c0 <HAL_GetTick>
 8009f60:	4602      	mov	r2, r0
 8009f62:	6a3b      	ldr	r3, [r7, #32]
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d803      	bhi.n	8009f74 <HAL_SPI_TransmitReceive+0x3c2>
 8009f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f72:	d102      	bne.n	8009f7a <HAL_SPI_TransmitReceive+0x3c8>
 8009f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d109      	bne.n	8009f8e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	e02c      	b.n	8009fe8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f47f af55 	bne.w	8009e44 <HAL_SPI_TransmitReceive+0x292>
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f47f af4e 	bne.w	8009e44 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009fa8:	6a3a      	ldr	r2, [r7, #32]
 8009faa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f000 f93d 	bl	800a22c <SPI_EndRxTxTransaction>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d008      	beq.n	8009fca <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2220      	movs	r2, #32
 8009fbc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e00e      	b.n	8009fe8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e000      	b.n	8009fe8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009fe6:	2300      	movs	r3, #0
  }
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3728      	adds	r7, #40	@ 0x28
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b088      	sub	sp, #32
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	603b      	str	r3, [r7, #0]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a000:	f7fb fade 	bl	80055c0 <HAL_GetTick>
 800a004:	4602      	mov	r2, r0
 800a006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a008:	1a9b      	subs	r3, r3, r2
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	4413      	add	r3, r2
 800a00e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a010:	f7fb fad6 	bl	80055c0 <HAL_GetTick>
 800a014:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a016:	4b39      	ldr	r3, [pc, #228]	@ (800a0fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	015b      	lsls	r3, r3, #5
 800a01c:	0d1b      	lsrs	r3, r3, #20
 800a01e:	69fa      	ldr	r2, [r7, #28]
 800a020:	fb02 f303 	mul.w	r3, r2, r3
 800a024:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a026:	e054      	b.n	800a0d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a02e:	d050      	beq.n	800a0d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a030:	f7fb fac6 	bl	80055c0 <HAL_GetTick>
 800a034:	4602      	mov	r2, r0
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	69fa      	ldr	r2, [r7, #28]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d902      	bls.n	800a046 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d13d      	bne.n	800a0c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	685a      	ldr	r2, [r3, #4]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a054:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a05e:	d111      	bne.n	800a084 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a068:	d004      	beq.n	800a074 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a072:	d107      	bne.n	800a084 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a082:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a08c:	d10f      	bne.n	800a0ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a09c:	601a      	str	r2, [r3, #0]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a0ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e017      	b.n	800a0f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d101      	bne.n	800a0cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	689a      	ldr	r2, [r3, #8]
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	4013      	ands	r3, r2
 800a0dc:	68ba      	ldr	r2, [r7, #8]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	bf0c      	ite	eq
 800a0e2:	2301      	moveq	r3, #1
 800a0e4:	2300      	movne	r3, #0
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	79fb      	ldrb	r3, [r7, #7]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d19b      	bne.n	800a028 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3720      	adds	r7, #32
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	20000010 	.word	0x20000010

0800a100 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b08a      	sub	sp, #40	@ 0x28
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]
 800a10c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a10e:	2300      	movs	r3, #0
 800a110:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a112:	f7fb fa55 	bl	80055c0 <HAL_GetTick>
 800a116:	4602      	mov	r2, r0
 800a118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11a:	1a9b      	subs	r3, r3, r2
 800a11c:	683a      	ldr	r2, [r7, #0]
 800a11e:	4413      	add	r3, r2
 800a120:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a122:	f7fb fa4d 	bl	80055c0 <HAL_GetTick>
 800a126:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	330c      	adds	r3, #12
 800a12e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a130:	4b3d      	ldr	r3, [pc, #244]	@ (800a228 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	4613      	mov	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	4413      	add	r3, r2
 800a13a:	00da      	lsls	r2, r3, #3
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	0d1b      	lsrs	r3, r3, #20
 800a140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a142:	fb02 f303 	mul.w	r3, r2, r3
 800a146:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a148:	e060      	b.n	800a20c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a150:	d107      	bne.n	800a162 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d104      	bne.n	800a162 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a160:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a168:	d050      	beq.n	800a20c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a16a:	f7fb fa29 	bl	80055c0 <HAL_GetTick>
 800a16e:	4602      	mov	r2, r0
 800a170:	6a3b      	ldr	r3, [r7, #32]
 800a172:	1ad3      	subs	r3, r2, r3
 800a174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a176:	429a      	cmp	r2, r3
 800a178:	d902      	bls.n	800a180 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d13d      	bne.n	800a1fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	685a      	ldr	r2, [r3, #4]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a18e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a198:	d111      	bne.n	800a1be <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1a2:	d004      	beq.n	800a1ae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1ac:	d107      	bne.n	800a1be <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a1bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1c6:	d10f      	bne.n	800a1e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a1d6:	601a      	str	r2, [r3, #0]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a1e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	e010      	b.n	800a21e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d101      	bne.n	800a206 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a202:	2300      	movs	r3, #0
 800a204:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	3b01      	subs	r3, #1
 800a20a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	689a      	ldr	r2, [r3, #8]
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	4013      	ands	r3, r2
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d196      	bne.n	800a14a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3728      	adds	r7, #40	@ 0x28
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	20000010 	.word	0x20000010

0800a22c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af02      	add	r7, sp, #8
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	2200      	movs	r2, #0
 800a240:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f7ff ff5b 	bl	800a100 <SPI_WaitFifoStateUntilTimeout>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d007      	beq.n	800a260 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a254:	f043 0220 	orr.w	r2, r3, #32
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a25c:	2303      	movs	r3, #3
 800a25e:	e027      	b.n	800a2b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	2200      	movs	r2, #0
 800a268:	2180      	movs	r1, #128	@ 0x80
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f7ff fec0 	bl	8009ff0 <SPI_WaitFlagStateUntilTimeout>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d007      	beq.n	800a286 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a27a:	f043 0220 	orr.w	r2, r3, #32
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a282:	2303      	movs	r3, #3
 800a284:	e014      	b.n	800a2b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	9300      	str	r3, [sp, #0]
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f7ff ff34 	bl	800a100 <SPI_WaitFifoStateUntilTimeout>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d007      	beq.n	800a2ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2a2:	f043 0220 	orr.w	r2, r3, #32
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	e000      	b.n	800a2b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d101      	bne.n	800a2ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e049      	b.n	800a35e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d106      	bne.n	800a2e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f7fb f850 	bl	8005384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2202      	movs	r2, #2
 800a2e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	3304      	adds	r3, #4
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	4610      	mov	r0, r2
 800a2f8:	f000 fa26 	bl	800a748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
	...

0800a368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a376:	b2db      	uxtb	r3, r3
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d001      	beq.n	800a380 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	e054      	b.n	800a42a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2202      	movs	r2, #2
 800a384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68da      	ldr	r2, [r3, #12]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f042 0201 	orr.w	r2, r2, #1
 800a396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a26      	ldr	r2, [pc, #152]	@ (800a438 <HAL_TIM_Base_Start_IT+0xd0>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d022      	beq.n	800a3e8 <HAL_TIM_Base_Start_IT+0x80>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3aa:	d01d      	beq.n	800a3e8 <HAL_TIM_Base_Start_IT+0x80>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a22      	ldr	r2, [pc, #136]	@ (800a43c <HAL_TIM_Base_Start_IT+0xd4>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d018      	beq.n	800a3e8 <HAL_TIM_Base_Start_IT+0x80>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a21      	ldr	r2, [pc, #132]	@ (800a440 <HAL_TIM_Base_Start_IT+0xd8>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d013      	beq.n	800a3e8 <HAL_TIM_Base_Start_IT+0x80>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a1f      	ldr	r2, [pc, #124]	@ (800a444 <HAL_TIM_Base_Start_IT+0xdc>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d00e      	beq.n	800a3e8 <HAL_TIM_Base_Start_IT+0x80>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a1e      	ldr	r2, [pc, #120]	@ (800a448 <HAL_TIM_Base_Start_IT+0xe0>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d009      	beq.n	800a3e8 <HAL_TIM_Base_Start_IT+0x80>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a1c      	ldr	r2, [pc, #112]	@ (800a44c <HAL_TIM_Base_Start_IT+0xe4>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d004      	beq.n	800a3e8 <HAL_TIM_Base_Start_IT+0x80>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a1b      	ldr	r2, [pc, #108]	@ (800a450 <HAL_TIM_Base_Start_IT+0xe8>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d115      	bne.n	800a414 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	689a      	ldr	r2, [r3, #8]
 800a3ee:	4b19      	ldr	r3, [pc, #100]	@ (800a454 <HAL_TIM_Base_Start_IT+0xec>)
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2b06      	cmp	r3, #6
 800a3f8:	d015      	beq.n	800a426 <HAL_TIM_Base_Start_IT+0xbe>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a400:	d011      	beq.n	800a426 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f042 0201 	orr.w	r2, r2, #1
 800a410:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a412:	e008      	b.n	800a426 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f042 0201 	orr.w	r2, r2, #1
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	e000      	b.n	800a428 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a426:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3714      	adds	r7, #20
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	40012c00 	.word	0x40012c00
 800a43c:	40000400 	.word	0x40000400
 800a440:	40000800 	.word	0x40000800
 800a444:	40000c00 	.word	0x40000c00
 800a448:	40013400 	.word	0x40013400
 800a44c:	40014000 	.word	0x40014000
 800a450:	40015000 	.word	0x40015000
 800a454:	00010007 	.word	0x00010007

0800a458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	f003 0302 	and.w	r3, r3, #2
 800a476:	2b00      	cmp	r3, #0
 800a478:	d020      	beq.n	800a4bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f003 0302 	and.w	r3, r3, #2
 800a480:	2b00      	cmp	r3, #0
 800a482:	d01b      	beq.n	800a4bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f06f 0202 	mvn.w	r2, #2
 800a48c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2201      	movs	r2, #1
 800a492:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	f003 0303 	and.w	r3, r3, #3
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d003      	beq.n	800a4aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f931 	bl	800a70a <HAL_TIM_IC_CaptureCallback>
 800a4a8:	e005      	b.n	800a4b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 f923 	bl	800a6f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 f934 	bl	800a71e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	f003 0304 	and.w	r3, r3, #4
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d020      	beq.n	800a508 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f003 0304 	and.w	r3, r3, #4
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d01b      	beq.n	800a508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f06f 0204 	mvn.w	r2, #4
 800a4d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2202      	movs	r2, #2
 800a4de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	699b      	ldr	r3, [r3, #24]
 800a4e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d003      	beq.n	800a4f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f90b 	bl	800a70a <HAL_TIM_IC_CaptureCallback>
 800a4f4:	e005      	b.n	800a502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f8fd 	bl	800a6f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 f90e 	bl	800a71e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	f003 0308 	and.w	r3, r3, #8
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d020      	beq.n	800a554 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f003 0308 	and.w	r3, r3, #8
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d01b      	beq.n	800a554 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f06f 0208 	mvn.w	r2, #8
 800a524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2204      	movs	r2, #4
 800a52a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	69db      	ldr	r3, [r3, #28]
 800a532:	f003 0303 	and.w	r3, r3, #3
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f8e5 	bl	800a70a <HAL_TIM_IC_CaptureCallback>
 800a540:	e005      	b.n	800a54e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 f8d7 	bl	800a6f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 f8e8 	bl	800a71e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	f003 0310 	and.w	r3, r3, #16
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d020      	beq.n	800a5a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f003 0310 	and.w	r3, r3, #16
 800a564:	2b00      	cmp	r3, #0
 800a566:	d01b      	beq.n	800a5a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f06f 0210 	mvn.w	r2, #16
 800a570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2208      	movs	r2, #8
 800a576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	69db      	ldr	r3, [r3, #28]
 800a57e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a582:	2b00      	cmp	r3, #0
 800a584:	d003      	beq.n	800a58e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f8bf 	bl	800a70a <HAL_TIM_IC_CaptureCallback>
 800a58c:	e005      	b.n	800a59a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f8b1 	bl	800a6f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 f8c2 	bl	800a71e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	f003 0301 	and.w	r3, r3, #1
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00c      	beq.n	800a5c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f003 0301 	and.w	r3, r3, #1
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d007      	beq.n	800a5c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f06f 0201 	mvn.w	r2, #1
 800a5bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f7fa fc5e 	bl	8004e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d104      	bne.n	800a5d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00c      	beq.n	800a5f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d007      	beq.n	800a5f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a5ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 f969 	bl	800a8c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00c      	beq.n	800a616 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a602:	2b00      	cmp	r3, #0
 800a604:	d007      	beq.n	800a616 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a60e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 f961 	bl	800a8d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00c      	beq.n	800a63a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a626:	2b00      	cmp	r3, #0
 800a628:	d007      	beq.n	800a63a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 f87c 	bl	800a732 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	f003 0320 	and.w	r3, r3, #32
 800a640:	2b00      	cmp	r3, #0
 800a642:	d00c      	beq.n	800a65e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f003 0320 	and.w	r3, r3, #32
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d007      	beq.n	800a65e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f06f 0220 	mvn.w	r2, #32
 800a656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f929 	bl	800a8b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a664:	2b00      	cmp	r3, #0
 800a666:	d00c      	beq.n	800a682 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d007      	beq.n	800a682 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a67a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 f935 	bl	800a8ec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00c      	beq.n	800a6a6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a692:	2b00      	cmp	r3, #0
 800a694:	d007      	beq.n	800a6a6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a69e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 f92d 	bl	800a900 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00c      	beq.n	800a6ca <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d007      	beq.n	800a6ca <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a6c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f925 	bl	800a914 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00c      	beq.n	800a6ee <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d007      	beq.n	800a6ee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a6e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f91d 	bl	800a928 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6ee:	bf00      	nop
 800a6f0:	3710      	adds	r7, #16
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6f6:	b480      	push	{r7}
 800a6f8:	b083      	sub	sp, #12
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a6fe:	bf00      	nop
 800a700:	370c      	adds	r7, #12
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a70a:	b480      	push	{r7}
 800a70c:	b083      	sub	sp, #12
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a712:	bf00      	nop
 800a714:	370c      	adds	r7, #12
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr

0800a71e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a71e:	b480      	push	{r7}
 800a720:	b083      	sub	sp, #12
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a726:	bf00      	nop
 800a728:	370c      	adds	r7, #12
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr

0800a732 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a732:	b480      	push	{r7}
 800a734:	b083      	sub	sp, #12
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a73a:	bf00      	nop
 800a73c:	370c      	adds	r7, #12
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
	...

0800a748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a4c      	ldr	r2, [pc, #304]	@ (800a88c <TIM_Base_SetConfig+0x144>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d017      	beq.n	800a790 <TIM_Base_SetConfig+0x48>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a766:	d013      	beq.n	800a790 <TIM_Base_SetConfig+0x48>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a49      	ldr	r2, [pc, #292]	@ (800a890 <TIM_Base_SetConfig+0x148>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d00f      	beq.n	800a790 <TIM_Base_SetConfig+0x48>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a48      	ldr	r2, [pc, #288]	@ (800a894 <TIM_Base_SetConfig+0x14c>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d00b      	beq.n	800a790 <TIM_Base_SetConfig+0x48>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a47      	ldr	r2, [pc, #284]	@ (800a898 <TIM_Base_SetConfig+0x150>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d007      	beq.n	800a790 <TIM_Base_SetConfig+0x48>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a46      	ldr	r2, [pc, #280]	@ (800a89c <TIM_Base_SetConfig+0x154>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d003      	beq.n	800a790 <TIM_Base_SetConfig+0x48>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a45      	ldr	r2, [pc, #276]	@ (800a8a0 <TIM_Base_SetConfig+0x158>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d108      	bne.n	800a7a2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a39      	ldr	r2, [pc, #228]	@ (800a88c <TIM_Base_SetConfig+0x144>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d023      	beq.n	800a7f2 <TIM_Base_SetConfig+0xaa>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7b0:	d01f      	beq.n	800a7f2 <TIM_Base_SetConfig+0xaa>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a36      	ldr	r2, [pc, #216]	@ (800a890 <TIM_Base_SetConfig+0x148>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d01b      	beq.n	800a7f2 <TIM_Base_SetConfig+0xaa>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a35      	ldr	r2, [pc, #212]	@ (800a894 <TIM_Base_SetConfig+0x14c>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d017      	beq.n	800a7f2 <TIM_Base_SetConfig+0xaa>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a34      	ldr	r2, [pc, #208]	@ (800a898 <TIM_Base_SetConfig+0x150>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d013      	beq.n	800a7f2 <TIM_Base_SetConfig+0xaa>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a33      	ldr	r2, [pc, #204]	@ (800a89c <TIM_Base_SetConfig+0x154>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d00f      	beq.n	800a7f2 <TIM_Base_SetConfig+0xaa>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a33      	ldr	r2, [pc, #204]	@ (800a8a4 <TIM_Base_SetConfig+0x15c>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d00b      	beq.n	800a7f2 <TIM_Base_SetConfig+0xaa>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a32      	ldr	r2, [pc, #200]	@ (800a8a8 <TIM_Base_SetConfig+0x160>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d007      	beq.n	800a7f2 <TIM_Base_SetConfig+0xaa>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a31      	ldr	r2, [pc, #196]	@ (800a8ac <TIM_Base_SetConfig+0x164>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d003      	beq.n	800a7f2 <TIM_Base_SetConfig+0xaa>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a2c      	ldr	r2, [pc, #176]	@ (800a8a0 <TIM_Base_SetConfig+0x158>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d108      	bne.n	800a804 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	4313      	orrs	r3, r2
 800a802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	4313      	orrs	r3, r2
 800a810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	689a      	ldr	r2, [r3, #8]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4a18      	ldr	r2, [pc, #96]	@ (800a88c <TIM_Base_SetConfig+0x144>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d013      	beq.n	800a858 <TIM_Base_SetConfig+0x110>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4a1a      	ldr	r2, [pc, #104]	@ (800a89c <TIM_Base_SetConfig+0x154>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d00f      	beq.n	800a858 <TIM_Base_SetConfig+0x110>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4a1a      	ldr	r2, [pc, #104]	@ (800a8a4 <TIM_Base_SetConfig+0x15c>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d00b      	beq.n	800a858 <TIM_Base_SetConfig+0x110>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a19      	ldr	r2, [pc, #100]	@ (800a8a8 <TIM_Base_SetConfig+0x160>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d007      	beq.n	800a858 <TIM_Base_SetConfig+0x110>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	4a18      	ldr	r2, [pc, #96]	@ (800a8ac <TIM_Base_SetConfig+0x164>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d003      	beq.n	800a858 <TIM_Base_SetConfig+0x110>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a13      	ldr	r2, [pc, #76]	@ (800a8a0 <TIM_Base_SetConfig+0x158>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d103      	bne.n	800a860 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	691a      	ldr	r2, [r3, #16]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	f003 0301 	and.w	r3, r3, #1
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d105      	bne.n	800a87e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	f023 0201 	bic.w	r2, r3, #1
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	611a      	str	r2, [r3, #16]
  }
}
 800a87e:	bf00      	nop
 800a880:	3714      	adds	r7, #20
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop
 800a88c:	40012c00 	.word	0x40012c00
 800a890:	40000400 	.word	0x40000400
 800a894:	40000800 	.word	0x40000800
 800a898:	40000c00 	.word	0x40000c00
 800a89c:	40013400 	.word	0x40013400
 800a8a0:	40015000 	.word	0x40015000
 800a8a4:	40014000 	.word	0x40014000
 800a8a8:	40014400 	.word	0x40014400
 800a8ac:	40014800 	.word	0x40014800

0800a8b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8b8:	bf00      	nop
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8cc:	bf00      	nop
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a8e0:	bf00      	nop
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a8f4:	bf00      	nop
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a908:	bf00      	nop
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a91c:	bf00      	nop
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d101      	bne.n	800a94e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	e042      	b.n	800a9d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a954:	2b00      	cmp	r3, #0
 800a956:	d106      	bne.n	800a966 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f7fa fd81 	bl	8005468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2224      	movs	r2, #36	@ 0x24
 800a96a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f022 0201 	bic.w	r2, r2, #1
 800a97c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a982:	2b00      	cmp	r3, #0
 800a984:	d002      	beq.n	800a98c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 fb24 	bl	800afd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f825 	bl	800a9dc <UART_SetConfig>
 800a992:	4603      	mov	r3, r0
 800a994:	2b01      	cmp	r3, #1
 800a996:	d101      	bne.n	800a99c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	e01b      	b.n	800a9d4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	685a      	ldr	r2, [r3, #4]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a9aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	689a      	ldr	r2, [r3, #8]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a9ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f042 0201 	orr.w	r2, r2, #1
 800a9ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fba3 	bl	800b118 <UART_CheckIdleState>
 800a9d2:	4603      	mov	r3, r0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3708      	adds	r7, #8
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9e0:	b08c      	sub	sp, #48	@ 0x30
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	689a      	ldr	r2, [r3, #8]
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	431a      	orrs	r2, r3
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	695b      	ldr	r3, [r3, #20]
 800a9fa:	431a      	orrs	r2, r3
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	69db      	ldr	r3, [r3, #28]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	4baa      	ldr	r3, [pc, #680]	@ (800acb4 <UART_SetConfig+0x2d8>)
 800aa0c:	4013      	ands	r3, r2
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	6812      	ldr	r2, [r2, #0]
 800aa12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa14:	430b      	orrs	r3, r1
 800aa16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	68da      	ldr	r2, [r3, #12]
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	430a      	orrs	r2, r1
 800aa2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	699b      	ldr	r3, [r3, #24]
 800aa32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4a9f      	ldr	r2, [pc, #636]	@ (800acb8 <UART_SetConfig+0x2dc>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d004      	beq.n	800aa48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	6a1b      	ldr	r3, [r3, #32]
 800aa42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa44:	4313      	orrs	r3, r2
 800aa46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800aa52:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	6812      	ldr	r2, [r2, #0]
 800aa5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa5c:	430b      	orrs	r3, r1
 800aa5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa66:	f023 010f 	bic.w	r1, r3, #15
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	430a      	orrs	r2, r1
 800aa74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a90      	ldr	r2, [pc, #576]	@ (800acbc <UART_SetConfig+0x2e0>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d125      	bne.n	800aacc <UART_SetConfig+0xf0>
 800aa80:	4b8f      	ldr	r3, [pc, #572]	@ (800acc0 <UART_SetConfig+0x2e4>)
 800aa82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa86:	f003 0303 	and.w	r3, r3, #3
 800aa8a:	2b03      	cmp	r3, #3
 800aa8c:	d81a      	bhi.n	800aac4 <UART_SetConfig+0xe8>
 800aa8e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa94 <UART_SetConfig+0xb8>)
 800aa90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa94:	0800aaa5 	.word	0x0800aaa5
 800aa98:	0800aab5 	.word	0x0800aab5
 800aa9c:	0800aaad 	.word	0x0800aaad
 800aaa0:	0800aabd 	.word	0x0800aabd
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aaaa:	e116      	b.n	800acda <UART_SetConfig+0x2fe>
 800aaac:	2302      	movs	r3, #2
 800aaae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aab2:	e112      	b.n	800acda <UART_SetConfig+0x2fe>
 800aab4:	2304      	movs	r3, #4
 800aab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aaba:	e10e      	b.n	800acda <UART_SetConfig+0x2fe>
 800aabc:	2308      	movs	r3, #8
 800aabe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aac2:	e10a      	b.n	800acda <UART_SetConfig+0x2fe>
 800aac4:	2310      	movs	r3, #16
 800aac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aaca:	e106      	b.n	800acda <UART_SetConfig+0x2fe>
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a7c      	ldr	r2, [pc, #496]	@ (800acc4 <UART_SetConfig+0x2e8>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d138      	bne.n	800ab48 <UART_SetConfig+0x16c>
 800aad6:	4b7a      	ldr	r3, [pc, #488]	@ (800acc0 <UART_SetConfig+0x2e4>)
 800aad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aadc:	f003 030c 	and.w	r3, r3, #12
 800aae0:	2b0c      	cmp	r3, #12
 800aae2:	d82d      	bhi.n	800ab40 <UART_SetConfig+0x164>
 800aae4:	a201      	add	r2, pc, #4	@ (adr r2, 800aaec <UART_SetConfig+0x110>)
 800aae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaea:	bf00      	nop
 800aaec:	0800ab21 	.word	0x0800ab21
 800aaf0:	0800ab41 	.word	0x0800ab41
 800aaf4:	0800ab41 	.word	0x0800ab41
 800aaf8:	0800ab41 	.word	0x0800ab41
 800aafc:	0800ab31 	.word	0x0800ab31
 800ab00:	0800ab41 	.word	0x0800ab41
 800ab04:	0800ab41 	.word	0x0800ab41
 800ab08:	0800ab41 	.word	0x0800ab41
 800ab0c:	0800ab29 	.word	0x0800ab29
 800ab10:	0800ab41 	.word	0x0800ab41
 800ab14:	0800ab41 	.word	0x0800ab41
 800ab18:	0800ab41 	.word	0x0800ab41
 800ab1c:	0800ab39 	.word	0x0800ab39
 800ab20:	2300      	movs	r3, #0
 800ab22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab26:	e0d8      	b.n	800acda <UART_SetConfig+0x2fe>
 800ab28:	2302      	movs	r3, #2
 800ab2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab2e:	e0d4      	b.n	800acda <UART_SetConfig+0x2fe>
 800ab30:	2304      	movs	r3, #4
 800ab32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab36:	e0d0      	b.n	800acda <UART_SetConfig+0x2fe>
 800ab38:	2308      	movs	r3, #8
 800ab3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab3e:	e0cc      	b.n	800acda <UART_SetConfig+0x2fe>
 800ab40:	2310      	movs	r3, #16
 800ab42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab46:	e0c8      	b.n	800acda <UART_SetConfig+0x2fe>
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a5e      	ldr	r2, [pc, #376]	@ (800acc8 <UART_SetConfig+0x2ec>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d125      	bne.n	800ab9e <UART_SetConfig+0x1c2>
 800ab52:	4b5b      	ldr	r3, [pc, #364]	@ (800acc0 <UART_SetConfig+0x2e4>)
 800ab54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ab5c:	2b30      	cmp	r3, #48	@ 0x30
 800ab5e:	d016      	beq.n	800ab8e <UART_SetConfig+0x1b2>
 800ab60:	2b30      	cmp	r3, #48	@ 0x30
 800ab62:	d818      	bhi.n	800ab96 <UART_SetConfig+0x1ba>
 800ab64:	2b20      	cmp	r3, #32
 800ab66:	d00a      	beq.n	800ab7e <UART_SetConfig+0x1a2>
 800ab68:	2b20      	cmp	r3, #32
 800ab6a:	d814      	bhi.n	800ab96 <UART_SetConfig+0x1ba>
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d002      	beq.n	800ab76 <UART_SetConfig+0x19a>
 800ab70:	2b10      	cmp	r3, #16
 800ab72:	d008      	beq.n	800ab86 <UART_SetConfig+0x1aa>
 800ab74:	e00f      	b.n	800ab96 <UART_SetConfig+0x1ba>
 800ab76:	2300      	movs	r3, #0
 800ab78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab7c:	e0ad      	b.n	800acda <UART_SetConfig+0x2fe>
 800ab7e:	2302      	movs	r3, #2
 800ab80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab84:	e0a9      	b.n	800acda <UART_SetConfig+0x2fe>
 800ab86:	2304      	movs	r3, #4
 800ab88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab8c:	e0a5      	b.n	800acda <UART_SetConfig+0x2fe>
 800ab8e:	2308      	movs	r3, #8
 800ab90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab94:	e0a1      	b.n	800acda <UART_SetConfig+0x2fe>
 800ab96:	2310      	movs	r3, #16
 800ab98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab9c:	e09d      	b.n	800acda <UART_SetConfig+0x2fe>
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a4a      	ldr	r2, [pc, #296]	@ (800accc <UART_SetConfig+0x2f0>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d125      	bne.n	800abf4 <UART_SetConfig+0x218>
 800aba8:	4b45      	ldr	r3, [pc, #276]	@ (800acc0 <UART_SetConfig+0x2e4>)
 800abaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800abb2:	2bc0      	cmp	r3, #192	@ 0xc0
 800abb4:	d016      	beq.n	800abe4 <UART_SetConfig+0x208>
 800abb6:	2bc0      	cmp	r3, #192	@ 0xc0
 800abb8:	d818      	bhi.n	800abec <UART_SetConfig+0x210>
 800abba:	2b80      	cmp	r3, #128	@ 0x80
 800abbc:	d00a      	beq.n	800abd4 <UART_SetConfig+0x1f8>
 800abbe:	2b80      	cmp	r3, #128	@ 0x80
 800abc0:	d814      	bhi.n	800abec <UART_SetConfig+0x210>
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d002      	beq.n	800abcc <UART_SetConfig+0x1f0>
 800abc6:	2b40      	cmp	r3, #64	@ 0x40
 800abc8:	d008      	beq.n	800abdc <UART_SetConfig+0x200>
 800abca:	e00f      	b.n	800abec <UART_SetConfig+0x210>
 800abcc:	2300      	movs	r3, #0
 800abce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abd2:	e082      	b.n	800acda <UART_SetConfig+0x2fe>
 800abd4:	2302      	movs	r3, #2
 800abd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abda:	e07e      	b.n	800acda <UART_SetConfig+0x2fe>
 800abdc:	2304      	movs	r3, #4
 800abde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abe2:	e07a      	b.n	800acda <UART_SetConfig+0x2fe>
 800abe4:	2308      	movs	r3, #8
 800abe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abea:	e076      	b.n	800acda <UART_SetConfig+0x2fe>
 800abec:	2310      	movs	r3, #16
 800abee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abf2:	e072      	b.n	800acda <UART_SetConfig+0x2fe>
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a35      	ldr	r2, [pc, #212]	@ (800acd0 <UART_SetConfig+0x2f4>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d12a      	bne.n	800ac54 <UART_SetConfig+0x278>
 800abfe:	4b30      	ldr	r3, [pc, #192]	@ (800acc0 <UART_SetConfig+0x2e4>)
 800ac00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac0c:	d01a      	beq.n	800ac44 <UART_SetConfig+0x268>
 800ac0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac12:	d81b      	bhi.n	800ac4c <UART_SetConfig+0x270>
 800ac14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac18:	d00c      	beq.n	800ac34 <UART_SetConfig+0x258>
 800ac1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac1e:	d815      	bhi.n	800ac4c <UART_SetConfig+0x270>
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d003      	beq.n	800ac2c <UART_SetConfig+0x250>
 800ac24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac28:	d008      	beq.n	800ac3c <UART_SetConfig+0x260>
 800ac2a:	e00f      	b.n	800ac4c <UART_SetConfig+0x270>
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac32:	e052      	b.n	800acda <UART_SetConfig+0x2fe>
 800ac34:	2302      	movs	r3, #2
 800ac36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac3a:	e04e      	b.n	800acda <UART_SetConfig+0x2fe>
 800ac3c:	2304      	movs	r3, #4
 800ac3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac42:	e04a      	b.n	800acda <UART_SetConfig+0x2fe>
 800ac44:	2308      	movs	r3, #8
 800ac46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac4a:	e046      	b.n	800acda <UART_SetConfig+0x2fe>
 800ac4c:	2310      	movs	r3, #16
 800ac4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac52:	e042      	b.n	800acda <UART_SetConfig+0x2fe>
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a17      	ldr	r2, [pc, #92]	@ (800acb8 <UART_SetConfig+0x2dc>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d13a      	bne.n	800acd4 <UART_SetConfig+0x2f8>
 800ac5e:	4b18      	ldr	r3, [pc, #96]	@ (800acc0 <UART_SetConfig+0x2e4>)
 800ac60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ac68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ac6c:	d01a      	beq.n	800aca4 <UART_SetConfig+0x2c8>
 800ac6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ac72:	d81b      	bhi.n	800acac <UART_SetConfig+0x2d0>
 800ac74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac78:	d00c      	beq.n	800ac94 <UART_SetConfig+0x2b8>
 800ac7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac7e:	d815      	bhi.n	800acac <UART_SetConfig+0x2d0>
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d003      	beq.n	800ac8c <UART_SetConfig+0x2b0>
 800ac84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac88:	d008      	beq.n	800ac9c <UART_SetConfig+0x2c0>
 800ac8a:	e00f      	b.n	800acac <UART_SetConfig+0x2d0>
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac92:	e022      	b.n	800acda <UART_SetConfig+0x2fe>
 800ac94:	2302      	movs	r3, #2
 800ac96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac9a:	e01e      	b.n	800acda <UART_SetConfig+0x2fe>
 800ac9c:	2304      	movs	r3, #4
 800ac9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aca2:	e01a      	b.n	800acda <UART_SetConfig+0x2fe>
 800aca4:	2308      	movs	r3, #8
 800aca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acaa:	e016      	b.n	800acda <UART_SetConfig+0x2fe>
 800acac:	2310      	movs	r3, #16
 800acae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acb2:	e012      	b.n	800acda <UART_SetConfig+0x2fe>
 800acb4:	cfff69f3 	.word	0xcfff69f3
 800acb8:	40008000 	.word	0x40008000
 800acbc:	40013800 	.word	0x40013800
 800acc0:	40021000 	.word	0x40021000
 800acc4:	40004400 	.word	0x40004400
 800acc8:	40004800 	.word	0x40004800
 800accc:	40004c00 	.word	0x40004c00
 800acd0:	40005000 	.word	0x40005000
 800acd4:	2310      	movs	r3, #16
 800acd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4aae      	ldr	r2, [pc, #696]	@ (800af98 <UART_SetConfig+0x5bc>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	f040 8097 	bne.w	800ae14 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ace6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800acea:	2b08      	cmp	r3, #8
 800acec:	d823      	bhi.n	800ad36 <UART_SetConfig+0x35a>
 800acee:	a201      	add	r2, pc, #4	@ (adr r2, 800acf4 <UART_SetConfig+0x318>)
 800acf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf4:	0800ad19 	.word	0x0800ad19
 800acf8:	0800ad37 	.word	0x0800ad37
 800acfc:	0800ad21 	.word	0x0800ad21
 800ad00:	0800ad37 	.word	0x0800ad37
 800ad04:	0800ad27 	.word	0x0800ad27
 800ad08:	0800ad37 	.word	0x0800ad37
 800ad0c:	0800ad37 	.word	0x0800ad37
 800ad10:	0800ad37 	.word	0x0800ad37
 800ad14:	0800ad2f 	.word	0x0800ad2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad18:	f7fe fa3a 	bl	8009190 <HAL_RCC_GetPCLK1Freq>
 800ad1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad1e:	e010      	b.n	800ad42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad20:	4b9e      	ldr	r3, [pc, #632]	@ (800af9c <UART_SetConfig+0x5c0>)
 800ad22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad24:	e00d      	b.n	800ad42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad26:	f7fe f9c7 	bl	80090b8 <HAL_RCC_GetSysClockFreq>
 800ad2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad2c:	e009      	b.n	800ad42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad34:	e005      	b.n	800ad42 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ad36:	2300      	movs	r3, #0
 800ad38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ad40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f000 8130 	beq.w	800afaa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad4e:	4a94      	ldr	r2, [pc, #592]	@ (800afa0 <UART_SetConfig+0x5c4>)
 800ad50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad54:	461a      	mov	r2, r3
 800ad56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad58:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad5c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	685a      	ldr	r2, [r3, #4]
 800ad62:	4613      	mov	r3, r2
 800ad64:	005b      	lsls	r3, r3, #1
 800ad66:	4413      	add	r3, r2
 800ad68:	69ba      	ldr	r2, [r7, #24]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d305      	bcc.n	800ad7a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad74:	69ba      	ldr	r2, [r7, #24]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d903      	bls.n	800ad82 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ad80:	e113      	b.n	800afaa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad84:	2200      	movs	r2, #0
 800ad86:	60bb      	str	r3, [r7, #8]
 800ad88:	60fa      	str	r2, [r7, #12]
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad8e:	4a84      	ldr	r2, [pc, #528]	@ (800afa0 <UART_SetConfig+0x5c4>)
 800ad90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	2200      	movs	r2, #0
 800ad98:	603b      	str	r3, [r7, #0]
 800ad9a:	607a      	str	r2, [r7, #4]
 800ad9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ada0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ada4:	f7f5 ff78 	bl	8000c98 <__aeabi_uldivmod>
 800ada8:	4602      	mov	r2, r0
 800adaa:	460b      	mov	r3, r1
 800adac:	4610      	mov	r0, r2
 800adae:	4619      	mov	r1, r3
 800adb0:	f04f 0200 	mov.w	r2, #0
 800adb4:	f04f 0300 	mov.w	r3, #0
 800adb8:	020b      	lsls	r3, r1, #8
 800adba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800adbe:	0202      	lsls	r2, r0, #8
 800adc0:	6979      	ldr	r1, [r7, #20]
 800adc2:	6849      	ldr	r1, [r1, #4]
 800adc4:	0849      	lsrs	r1, r1, #1
 800adc6:	2000      	movs	r0, #0
 800adc8:	460c      	mov	r4, r1
 800adca:	4605      	mov	r5, r0
 800adcc:	eb12 0804 	adds.w	r8, r2, r4
 800add0:	eb43 0905 	adc.w	r9, r3, r5
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	469a      	mov	sl, r3
 800addc:	4693      	mov	fp, r2
 800adde:	4652      	mov	r2, sl
 800ade0:	465b      	mov	r3, fp
 800ade2:	4640      	mov	r0, r8
 800ade4:	4649      	mov	r1, r9
 800ade6:	f7f5 ff57 	bl	8000c98 <__aeabi_uldivmod>
 800adea:	4602      	mov	r2, r0
 800adec:	460b      	mov	r3, r1
 800adee:	4613      	mov	r3, r2
 800adf0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800adf2:	6a3b      	ldr	r3, [r7, #32]
 800adf4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800adf8:	d308      	bcc.n	800ae0c <UART_SetConfig+0x430>
 800adfa:	6a3b      	ldr	r3, [r7, #32]
 800adfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae00:	d204      	bcs.n	800ae0c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	6a3a      	ldr	r2, [r7, #32]
 800ae08:	60da      	str	r2, [r3, #12]
 800ae0a:	e0ce      	b.n	800afaa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ae12:	e0ca      	b.n	800afaa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	69db      	ldr	r3, [r3, #28]
 800ae18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae1c:	d166      	bne.n	800aeec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ae1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae22:	2b08      	cmp	r3, #8
 800ae24:	d827      	bhi.n	800ae76 <UART_SetConfig+0x49a>
 800ae26:	a201      	add	r2, pc, #4	@ (adr r2, 800ae2c <UART_SetConfig+0x450>)
 800ae28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2c:	0800ae51 	.word	0x0800ae51
 800ae30:	0800ae59 	.word	0x0800ae59
 800ae34:	0800ae61 	.word	0x0800ae61
 800ae38:	0800ae77 	.word	0x0800ae77
 800ae3c:	0800ae67 	.word	0x0800ae67
 800ae40:	0800ae77 	.word	0x0800ae77
 800ae44:	0800ae77 	.word	0x0800ae77
 800ae48:	0800ae77 	.word	0x0800ae77
 800ae4c:	0800ae6f 	.word	0x0800ae6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae50:	f7fe f99e 	bl	8009190 <HAL_RCC_GetPCLK1Freq>
 800ae54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae56:	e014      	b.n	800ae82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae58:	f7fe f9b0 	bl	80091bc <HAL_RCC_GetPCLK2Freq>
 800ae5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae5e:	e010      	b.n	800ae82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae60:	4b4e      	ldr	r3, [pc, #312]	@ (800af9c <UART_SetConfig+0x5c0>)
 800ae62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae64:	e00d      	b.n	800ae82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae66:	f7fe f927 	bl	80090b8 <HAL_RCC_GetSysClockFreq>
 800ae6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae6c:	e009      	b.n	800ae82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae74:	e005      	b.n	800ae82 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ae76:	2300      	movs	r3, #0
 800ae78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ae80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f000 8090 	beq.w	800afaa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae8e:	4a44      	ldr	r2, [pc, #272]	@ (800afa0 <UART_SetConfig+0x5c4>)
 800ae90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae94:	461a      	mov	r2, r3
 800ae96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae98:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae9c:	005a      	lsls	r2, r3, #1
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	085b      	lsrs	r3, r3, #1
 800aea4:	441a      	add	r2, r3
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aeb0:	6a3b      	ldr	r3, [r7, #32]
 800aeb2:	2b0f      	cmp	r3, #15
 800aeb4:	d916      	bls.n	800aee4 <UART_SetConfig+0x508>
 800aeb6:	6a3b      	ldr	r3, [r7, #32]
 800aeb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aebc:	d212      	bcs.n	800aee4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aebe:	6a3b      	ldr	r3, [r7, #32]
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	f023 030f 	bic.w	r3, r3, #15
 800aec6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aec8:	6a3b      	ldr	r3, [r7, #32]
 800aeca:	085b      	lsrs	r3, r3, #1
 800aecc:	b29b      	uxth	r3, r3
 800aece:	f003 0307 	and.w	r3, r3, #7
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	8bfb      	ldrh	r3, [r7, #30]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	8bfa      	ldrh	r2, [r7, #30]
 800aee0:	60da      	str	r2, [r3, #12]
 800aee2:	e062      	b.n	800afaa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800aee4:	2301      	movs	r3, #1
 800aee6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aeea:	e05e      	b.n	800afaa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aeec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aef0:	2b08      	cmp	r3, #8
 800aef2:	d828      	bhi.n	800af46 <UART_SetConfig+0x56a>
 800aef4:	a201      	add	r2, pc, #4	@ (adr r2, 800aefc <UART_SetConfig+0x520>)
 800aef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aefa:	bf00      	nop
 800aefc:	0800af21 	.word	0x0800af21
 800af00:	0800af29 	.word	0x0800af29
 800af04:	0800af31 	.word	0x0800af31
 800af08:	0800af47 	.word	0x0800af47
 800af0c:	0800af37 	.word	0x0800af37
 800af10:	0800af47 	.word	0x0800af47
 800af14:	0800af47 	.word	0x0800af47
 800af18:	0800af47 	.word	0x0800af47
 800af1c:	0800af3f 	.word	0x0800af3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af20:	f7fe f936 	bl	8009190 <HAL_RCC_GetPCLK1Freq>
 800af24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af26:	e014      	b.n	800af52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af28:	f7fe f948 	bl	80091bc <HAL_RCC_GetPCLK2Freq>
 800af2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af2e:	e010      	b.n	800af52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af30:	4b1a      	ldr	r3, [pc, #104]	@ (800af9c <UART_SetConfig+0x5c0>)
 800af32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af34:	e00d      	b.n	800af52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af36:	f7fe f8bf 	bl	80090b8 <HAL_RCC_GetSysClockFreq>
 800af3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af3c:	e009      	b.n	800af52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af44:	e005      	b.n	800af52 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800af46:	2300      	movs	r3, #0
 800af48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
 800af4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800af50:	bf00      	nop
    }

    if (pclk != 0U)
 800af52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af54:	2b00      	cmp	r3, #0
 800af56:	d028      	beq.n	800afaa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af5c:	4a10      	ldr	r2, [pc, #64]	@ (800afa0 <UART_SetConfig+0x5c4>)
 800af5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af62:	461a      	mov	r2, r3
 800af64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af66:	fbb3 f2f2 	udiv	r2, r3, r2
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	085b      	lsrs	r3, r3, #1
 800af70:	441a      	add	r2, r3
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	fbb2 f3f3 	udiv	r3, r2, r3
 800af7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	2b0f      	cmp	r3, #15
 800af80:	d910      	bls.n	800afa4 <UART_SetConfig+0x5c8>
 800af82:	6a3b      	ldr	r3, [r7, #32]
 800af84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af88:	d20c      	bcs.n	800afa4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af8a:	6a3b      	ldr	r3, [r7, #32]
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	60da      	str	r2, [r3, #12]
 800af94:	e009      	b.n	800afaa <UART_SetConfig+0x5ce>
 800af96:	bf00      	nop
 800af98:	40008000 	.word	0x40008000
 800af9c:	00f42400 	.word	0x00f42400
 800afa0:	080227d0 	.word	0x080227d0
      }
      else
      {
        ret = HAL_ERROR;
 800afa4:	2301      	movs	r3, #1
 800afa6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	2201      	movs	r2, #1
 800afae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	2201      	movs	r2, #1
 800afb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	2200      	movs	r2, #0
 800afbe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	2200      	movs	r2, #0
 800afc4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800afc6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3730      	adds	r7, #48	@ 0x30
 800afce:	46bd      	mov	sp, r7
 800afd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800afd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afe0:	f003 0308 	and.w	r3, r3, #8
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d00a      	beq.n	800affe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	430a      	orrs	r2, r1
 800affc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b002:	f003 0301 	and.w	r3, r3, #1
 800b006:	2b00      	cmp	r3, #0
 800b008:	d00a      	beq.n	800b020 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	430a      	orrs	r2, r1
 800b01e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b024:	f003 0302 	and.w	r3, r3, #2
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d00a      	beq.n	800b042 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	430a      	orrs	r2, r1
 800b040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b046:	f003 0304 	and.w	r3, r3, #4
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00a      	beq.n	800b064 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	430a      	orrs	r2, r1
 800b062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b068:	f003 0310 	and.w	r3, r3, #16
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00a      	beq.n	800b086 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	430a      	orrs	r2, r1
 800b084:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b08a:	f003 0320 	and.w	r3, r3, #32
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00a      	beq.n	800b0a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	430a      	orrs	r2, r1
 800b0a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d01a      	beq.n	800b0ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	430a      	orrs	r2, r1
 800b0c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0d2:	d10a      	bne.n	800b0ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	430a      	orrs	r2, r1
 800b0e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00a      	beq.n	800b10c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	430a      	orrs	r2, r1
 800b10a:	605a      	str	r2, [r3, #4]
  }
}
 800b10c:	bf00      	nop
 800b10e:	370c      	adds	r7, #12
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr

0800b118 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b098      	sub	sp, #96	@ 0x60
 800b11c:	af02      	add	r7, sp, #8
 800b11e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b128:	f7fa fa4a 	bl	80055c0 <HAL_GetTick>
 800b12c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f003 0308 	and.w	r3, r3, #8
 800b138:	2b08      	cmp	r3, #8
 800b13a:	d12f      	bne.n	800b19c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b13c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b140:	9300      	str	r3, [sp, #0]
 800b142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b144:	2200      	movs	r2, #0
 800b146:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 f88e 	bl	800b26c <UART_WaitOnFlagUntilTimeout>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d022      	beq.n	800b19c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b15e:	e853 3f00 	ldrex	r3, [r3]
 800b162:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b166:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b16a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	461a      	mov	r2, r3
 800b172:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b174:	647b      	str	r3, [r7, #68]	@ 0x44
 800b176:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b178:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b17a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b17c:	e841 2300 	strex	r3, r2, [r1]
 800b180:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b184:	2b00      	cmp	r3, #0
 800b186:	d1e6      	bne.n	800b156 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2220      	movs	r2, #32
 800b18c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b198:	2303      	movs	r3, #3
 800b19a:	e063      	b.n	800b264 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f003 0304 	and.w	r3, r3, #4
 800b1a6:	2b04      	cmp	r3, #4
 800b1a8:	d149      	bne.n	800b23e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b1ae:	9300      	str	r3, [sp, #0]
 800b1b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 f857 	bl	800b26c <UART_WaitOnFlagUntilTimeout>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d03c      	beq.n	800b23e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1cc:	e853 3f00 	ldrex	r3, [r3]
 800b1d0:	623b      	str	r3, [r7, #32]
   return(result);
 800b1d2:	6a3b      	ldr	r3, [r7, #32]
 800b1d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b1e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1ea:	e841 2300 	strex	r3, r2, [r1]
 800b1ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d1e6      	bne.n	800b1c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	3308      	adds	r3, #8
 800b1fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	e853 3f00 	ldrex	r3, [r3]
 800b204:	60fb      	str	r3, [r7, #12]
   return(result);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f023 0301 	bic.w	r3, r3, #1
 800b20c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	3308      	adds	r3, #8
 800b214:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b216:	61fa      	str	r2, [r7, #28]
 800b218:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b21a:	69b9      	ldr	r1, [r7, #24]
 800b21c:	69fa      	ldr	r2, [r7, #28]
 800b21e:	e841 2300 	strex	r3, r2, [r1]
 800b222:	617b      	str	r3, [r7, #20]
   return(result);
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d1e5      	bne.n	800b1f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2220      	movs	r2, #32
 800b22e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b23a:	2303      	movs	r3, #3
 800b23c:	e012      	b.n	800b264 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2220      	movs	r2, #32
 800b242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2220      	movs	r2, #32
 800b24a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	3758      	adds	r7, #88	@ 0x58
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	603b      	str	r3, [r7, #0]
 800b278:	4613      	mov	r3, r2
 800b27a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b27c:	e04f      	b.n	800b31e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b284:	d04b      	beq.n	800b31e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b286:	f7fa f99b 	bl	80055c0 <HAL_GetTick>
 800b28a:	4602      	mov	r2, r0
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	1ad3      	subs	r3, r2, r3
 800b290:	69ba      	ldr	r2, [r7, #24]
 800b292:	429a      	cmp	r2, r3
 800b294:	d302      	bcc.n	800b29c <UART_WaitOnFlagUntilTimeout+0x30>
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d101      	bne.n	800b2a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b29c:	2303      	movs	r3, #3
 800b29e:	e04e      	b.n	800b33e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f003 0304 	and.w	r3, r3, #4
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d037      	beq.n	800b31e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	2b80      	cmp	r3, #128	@ 0x80
 800b2b2:	d034      	beq.n	800b31e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	2b40      	cmp	r3, #64	@ 0x40
 800b2b8:	d031      	beq.n	800b31e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	69db      	ldr	r3, [r3, #28]
 800b2c0:	f003 0308 	and.w	r3, r3, #8
 800b2c4:	2b08      	cmp	r3, #8
 800b2c6:	d110      	bne.n	800b2ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2208      	movs	r2, #8
 800b2ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2d0:	68f8      	ldr	r0, [r7, #12]
 800b2d2:	f000 f838 	bl	800b346 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2208      	movs	r2, #8
 800b2da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e029      	b.n	800b33e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	69db      	ldr	r3, [r3, #28]
 800b2f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b2f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2f8:	d111      	bne.n	800b31e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b302:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	f000 f81e 	bl	800b346 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2220      	movs	r2, #32
 800b30e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2200      	movs	r2, #0
 800b316:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b31a:	2303      	movs	r3, #3
 800b31c:	e00f      	b.n	800b33e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	69da      	ldr	r2, [r3, #28]
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	4013      	ands	r3, r2
 800b328:	68ba      	ldr	r2, [r7, #8]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	bf0c      	ite	eq
 800b32e:	2301      	moveq	r3, #1
 800b330:	2300      	movne	r3, #0
 800b332:	b2db      	uxtb	r3, r3
 800b334:	461a      	mov	r2, r3
 800b336:	79fb      	ldrb	r3, [r7, #7]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d0a0      	beq.n	800b27e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b346:	b480      	push	{r7}
 800b348:	b095      	sub	sp, #84	@ 0x54
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b356:	e853 3f00 	ldrex	r3, [r3]
 800b35a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b35e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	461a      	mov	r2, r3
 800b36a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b36c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b36e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b370:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b372:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b374:	e841 2300 	strex	r3, r2, [r1]
 800b378:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d1e6      	bne.n	800b34e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	3308      	adds	r3, #8
 800b386:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b388:	6a3b      	ldr	r3, [r7, #32]
 800b38a:	e853 3f00 	ldrex	r3, [r3]
 800b38e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b396:	f023 0301 	bic.w	r3, r3, #1
 800b39a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	3308      	adds	r3, #8
 800b3a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3ac:	e841 2300 	strex	r3, r2, [r1]
 800b3b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1e3      	bne.n	800b380 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d118      	bne.n	800b3f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	e853 3f00 	ldrex	r3, [r3]
 800b3cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	f023 0310 	bic.w	r3, r3, #16
 800b3d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	461a      	mov	r2, r3
 800b3dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3de:	61bb      	str	r3, [r7, #24]
 800b3e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e2:	6979      	ldr	r1, [r7, #20]
 800b3e4:	69ba      	ldr	r2, [r7, #24]
 800b3e6:	e841 2300 	strex	r3, r2, [r1]
 800b3ea:	613b      	str	r3, [r7, #16]
   return(result);
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1e6      	bne.n	800b3c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2220      	movs	r2, #32
 800b3f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b406:	bf00      	nop
 800b408:	3754      	adds	r7, #84	@ 0x54
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr

0800b412 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b412:	b480      	push	{r7}
 800b414:	b085      	sub	sp, #20
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b420:	2b01      	cmp	r3, #1
 800b422:	d101      	bne.n	800b428 <HAL_UARTEx_DisableFifoMode+0x16>
 800b424:	2302      	movs	r3, #2
 800b426:	e027      	b.n	800b478 <HAL_UARTEx_DisableFifoMode+0x66>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2224      	movs	r2, #36	@ 0x24
 800b434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f022 0201 	bic.w	r2, r2, #1
 800b44e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b456:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2220      	movs	r2, #32
 800b46a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b494:	2b01      	cmp	r3, #1
 800b496:	d101      	bne.n	800b49c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b498:	2302      	movs	r3, #2
 800b49a:	e02d      	b.n	800b4f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2224      	movs	r2, #36	@ 0x24
 800b4a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f022 0201 	bic.w	r2, r2, #1
 800b4c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	683a      	ldr	r2, [r7, #0]
 800b4d4:	430a      	orrs	r2, r1
 800b4d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 f84f 	bl	800b57c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2220      	movs	r2, #32
 800b4ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b4f6:	2300      	movs	r3, #0
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3710      	adds	r7, #16
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b510:	2b01      	cmp	r3, #1
 800b512:	d101      	bne.n	800b518 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b514:	2302      	movs	r3, #2
 800b516:	e02d      	b.n	800b574 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2224      	movs	r2, #36	@ 0x24
 800b524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f022 0201 	bic.w	r2, r2, #1
 800b53e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	683a      	ldr	r2, [r7, #0]
 800b550:	430a      	orrs	r2, r1
 800b552:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 f811 	bl	800b57c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68fa      	ldr	r2, [r7, #12]
 800b560:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2220      	movs	r2, #32
 800b566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3710      	adds	r7, #16
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b085      	sub	sp, #20
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d108      	bne.n	800b59e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2201      	movs	r2, #1
 800b598:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b59c:	e031      	b.n	800b602 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b59e:	2308      	movs	r3, #8
 800b5a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b5a2:	2308      	movs	r3, #8
 800b5a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	0e5b      	lsrs	r3, r3, #25
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	f003 0307 	and.w	r3, r3, #7
 800b5b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	0f5b      	lsrs	r3, r3, #29
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	f003 0307 	and.w	r3, r3, #7
 800b5c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5c6:	7bbb      	ldrb	r3, [r7, #14]
 800b5c8:	7b3a      	ldrb	r2, [r7, #12]
 800b5ca:	4911      	ldr	r1, [pc, #68]	@ (800b610 <UARTEx_SetNbDataToProcess+0x94>)
 800b5cc:	5c8a      	ldrb	r2, [r1, r2]
 800b5ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b5d2:	7b3a      	ldrb	r2, [r7, #12]
 800b5d4:	490f      	ldr	r1, [pc, #60]	@ (800b614 <UARTEx_SetNbDataToProcess+0x98>)
 800b5d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5dc:	b29a      	uxth	r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
 800b5e6:	7b7a      	ldrb	r2, [r7, #13]
 800b5e8:	4909      	ldr	r1, [pc, #36]	@ (800b610 <UARTEx_SetNbDataToProcess+0x94>)
 800b5ea:	5c8a      	ldrb	r2, [r1, r2]
 800b5ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b5f0:	7b7a      	ldrb	r2, [r7, #13]
 800b5f2:	4908      	ldr	r1, [pc, #32]	@ (800b614 <UARTEx_SetNbDataToProcess+0x98>)
 800b5f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5fa:	b29a      	uxth	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b602:	bf00      	nop
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	080227e8 	.word	0x080227e8
 800b614:	080227f0 	.word	0x080227f0

0800b618 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b618:	b480      	push	{r7}
 800b61a:	b085      	sub	sp, #20
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b628:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b62c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	b29a      	uxth	r2, r3
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3714      	adds	r7, #20
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr

0800b646 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b646:	b480      	push	{r7}
 800b648:	b085      	sub	sp, #20
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b64e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b652:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b65a:	b29a      	uxth	r2, r3
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	b29b      	uxth	r3, r3
 800b660:	43db      	mvns	r3, r3
 800b662:	b29b      	uxth	r3, r3
 800b664:	4013      	ands	r3, r2
 800b666:	b29a      	uxth	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b66e:	2300      	movs	r3, #0
}
 800b670:	4618      	mov	r0, r3
 800b672:	3714      	adds	r7, #20
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	1d3b      	adds	r3, r7, #4
 800b686:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2201      	movs	r2, #1
 800b68e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2200      	movs	r2, #0
 800b696:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b6aa:	2300      	movs	r3, #0
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3714      	adds	r7, #20
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b0a7      	sub	sp, #156	@ 0x9c
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	4413      	add	r3, r2
 800b6d2:	881b      	ldrh	r3, [r3, #0]
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800b6da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6de:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	78db      	ldrb	r3, [r3, #3]
 800b6e6:	2b03      	cmp	r3, #3
 800b6e8:	d81f      	bhi.n	800b72a <USB_ActivateEndpoint+0x72>
 800b6ea:	a201      	add	r2, pc, #4	@ (adr r2, 800b6f0 <USB_ActivateEndpoint+0x38>)
 800b6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f0:	0800b701 	.word	0x0800b701
 800b6f4:	0800b71d 	.word	0x0800b71d
 800b6f8:	0800b733 	.word	0x0800b733
 800b6fc:	0800b70f 	.word	0x0800b70f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b700:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b704:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b708:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800b70c:	e012      	b.n	800b734 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b70e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b712:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800b716:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800b71a:	e00b      	b.n	800b734 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b71c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b720:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b724:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800b728:	e004      	b.n	800b734 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800b730:	e000      	b.n	800b734 <USB_ActivateEndpoint+0x7c>
      break;
 800b732:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	441a      	add	r2, r3
 800b73e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b742:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b746:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b74a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b74e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b752:	b29b      	uxth	r3, r3
 800b754:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	4413      	add	r3, r2
 800b760:	881b      	ldrh	r3, [r3, #0]
 800b762:	b29b      	uxth	r3, r3
 800b764:	b21b      	sxth	r3, r3
 800b766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b76a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b76e:	b21a      	sxth	r2, r3
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	b21b      	sxth	r3, r3
 800b776:	4313      	orrs	r3, r2
 800b778:	b21b      	sxth	r3, r3
 800b77a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	441a      	add	r2, r3
 800b788:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b78c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b790:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b794:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	7b1b      	ldrb	r3, [r3, #12]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f040 8180 	bne.w	800baaa <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	785b      	ldrb	r3, [r3, #1]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f000 8084 	beq.w	800b8bc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	61bb      	str	r3, [r7, #24]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	4413      	add	r3, r2
 800b7c6:	61bb      	str	r3, [r7, #24]
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	00da      	lsls	r2, r3, #3
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b7d6:	617b      	str	r3, [r7, #20]
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	88db      	ldrh	r3, [r3, #6]
 800b7dc:	085b      	lsrs	r3, r3, #1
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	005b      	lsls	r3, r3, #1
 800b7e2:	b29a      	uxth	r2, r3
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	4413      	add	r3, r2
 800b7f2:	881b      	ldrh	r3, [r3, #0]
 800b7f4:	827b      	strh	r3, [r7, #18]
 800b7f6:	8a7b      	ldrh	r3, [r7, #18]
 800b7f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d01b      	beq.n	800b838 <USB_ActivateEndpoint+0x180>
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	4413      	add	r3, r2
 800b80a:	881b      	ldrh	r3, [r3, #0]
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b816:	823b      	strh	r3, [r7, #16]
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	441a      	add	r2, r3
 800b822:	8a3b      	ldrh	r3, [r7, #16]
 800b824:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b828:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b82c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b830:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b834:	b29b      	uxth	r3, r3
 800b836:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	78db      	ldrb	r3, [r3, #3]
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d020      	beq.n	800b882 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b840:	687a      	ldr	r2, [r7, #4]
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	4413      	add	r3, r2
 800b84a:	881b      	ldrh	r3, [r3, #0]
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b852:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b856:	81bb      	strh	r3, [r7, #12]
 800b858:	89bb      	ldrh	r3, [r7, #12]
 800b85a:	f083 0320 	eor.w	r3, r3, #32
 800b85e:	81bb      	strh	r3, [r7, #12]
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	441a      	add	r2, r3
 800b86a:	89bb      	ldrh	r3, [r7, #12]
 800b86c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	8013      	strh	r3, [r2, #0]
 800b880:	e3f9      	b.n	800c076 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	4413      	add	r3, r2
 800b88c:	881b      	ldrh	r3, [r3, #0]
 800b88e:	b29b      	uxth	r3, r3
 800b890:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b894:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b898:	81fb      	strh	r3, [r7, #14]
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	441a      	add	r2, r3
 800b8a4:	89fb      	ldrh	r3, [r7, #14]
 800b8a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b8aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b8ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	8013      	strh	r3, [r2, #0]
 800b8ba:	e3dc      	b.n	800c076 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8cc:	4413      	add	r3, r2
 800b8ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	00da      	lsls	r2, r3, #3
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d8:	4413      	add	r3, r2
 800b8da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b8de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	88db      	ldrh	r3, [r3, #6]
 800b8e4:	085b      	lsrs	r3, r3, #1
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	005b      	lsls	r3, r3, #1
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ee:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b900:	4413      	add	r3, r2
 800b902:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	00da      	lsls	r2, r3, #3
 800b90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b90c:	4413      	add	r3, r2
 800b90e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b912:	627b      	str	r3, [r7, #36]	@ 0x24
 800b914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b916:	881b      	ldrh	r3, [r3, #0]
 800b918:	b29b      	uxth	r3, r3
 800b91a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b91e:	b29a      	uxth	r2, r3
 800b920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b922:	801a      	strh	r2, [r3, #0]
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	691b      	ldr	r3, [r3, #16]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10a      	bne.n	800b942 <USB_ActivateEndpoint+0x28a>
 800b92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b92e:	881b      	ldrh	r3, [r3, #0]
 800b930:	b29b      	uxth	r3, r3
 800b932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b93a:	b29a      	uxth	r2, r3
 800b93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93e:	801a      	strh	r2, [r3, #0]
 800b940:	e041      	b.n	800b9c6 <USB_ActivateEndpoint+0x30e>
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	691b      	ldr	r3, [r3, #16]
 800b946:	2b3e      	cmp	r3, #62	@ 0x3e
 800b948:	d81c      	bhi.n	800b984 <USB_ActivateEndpoint+0x2cc>
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	085b      	lsrs	r3, r3, #1
 800b950:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	691b      	ldr	r3, [r3, #16]
 800b958:	f003 0301 	and.w	r3, r3, #1
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d004      	beq.n	800b96a <USB_ActivateEndpoint+0x2b2>
 800b960:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b964:	3301      	adds	r3, #1
 800b966:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b96c:	881b      	ldrh	r3, [r3, #0]
 800b96e:	b29a      	uxth	r2, r3
 800b970:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b974:	b29b      	uxth	r3, r3
 800b976:	029b      	lsls	r3, r3, #10
 800b978:	b29b      	uxth	r3, r3
 800b97a:	4313      	orrs	r3, r2
 800b97c:	b29a      	uxth	r2, r3
 800b97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b980:	801a      	strh	r2, [r3, #0]
 800b982:	e020      	b.n	800b9c6 <USB_ActivateEndpoint+0x30e>
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	691b      	ldr	r3, [r3, #16]
 800b988:	095b      	lsrs	r3, r3, #5
 800b98a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	691b      	ldr	r3, [r3, #16]
 800b992:	f003 031f 	and.w	r3, r3, #31
 800b996:	2b00      	cmp	r3, #0
 800b998:	d104      	bne.n	800b9a4 <USB_ActivateEndpoint+0x2ec>
 800b99a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b99e:	3b01      	subs	r3, #1
 800b9a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a6:	881b      	ldrh	r3, [r3, #0]
 800b9a8:	b29a      	uxth	r2, r3
 800b9aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	029b      	lsls	r3, r3, #10
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	4413      	add	r3, r2
 800b9d0:	881b      	ldrh	r3, [r3, #0]
 800b9d2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b9d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b9d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d01b      	beq.n	800ba16 <USB_ActivateEndpoint+0x35e>
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	4413      	add	r3, r2
 800b9e8:	881b      	ldrh	r3, [r3, #0]
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b9f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9f4:	843b      	strh	r3, [r7, #32]
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	441a      	add	r2, r3
 800ba00:	8c3b      	ldrh	r3, [r7, #32]
 800ba02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ba0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d124      	bne.n	800ba68 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	4413      	add	r3, r2
 800ba28:	881b      	ldrh	r3, [r3, #0]
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ba30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba34:	83bb      	strh	r3, [r7, #28]
 800ba36:	8bbb      	ldrh	r3, [r7, #28]
 800ba38:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ba3c:	83bb      	strh	r3, [r7, #28]
 800ba3e:	8bbb      	ldrh	r3, [r7, #28]
 800ba40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ba44:	83bb      	strh	r3, [r7, #28]
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	441a      	add	r2, r3
 800ba50:	8bbb      	ldrh	r3, [r7, #28]
 800ba52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	8013      	strh	r3, [r2, #0]
 800ba66:	e306      	b.n	800c076 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	4413      	add	r3, r2
 800ba72:	881b      	ldrh	r3, [r3, #0]
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ba7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba7e:	83fb      	strh	r3, [r7, #30]
 800ba80:	8bfb      	ldrh	r3, [r7, #30]
 800ba82:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ba86:	83fb      	strh	r3, [r7, #30]
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	441a      	add	r2, r3
 800ba92:	8bfb      	ldrh	r3, [r7, #30]
 800ba94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800baa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	8013      	strh	r3, [r2, #0]
 800baa8:	e2e5      	b.n	800c076 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	78db      	ldrb	r3, [r3, #3]
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d11e      	bne.n	800baf0 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	4413      	add	r3, r2
 800babc:	881b      	ldrh	r3, [r3, #0]
 800babe:	b29b      	uxth	r3, r3
 800bac0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bac4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bac8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	441a      	add	r2, r3
 800bad6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800bada:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bade:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bae2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800bae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800baea:	b29b      	uxth	r3, r3
 800baec:	8013      	strh	r3, [r2, #0]
 800baee:	e01d      	b.n	800bb2c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	009b      	lsls	r3, r3, #2
 800baf8:	4413      	add	r3, r2
 800bafa:	881b      	ldrh	r3, [r3, #0]
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800bb02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb06:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	009b      	lsls	r3, r3, #2
 800bb12:	441a      	add	r2, r3
 800bb14:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800bb18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	461a      	mov	r2, r3
 800bb3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bb3c:	4413      	add	r3, r2
 800bb3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	00da      	lsls	r2, r3, #3
 800bb46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bb48:	4413      	add	r3, r2
 800bb4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bb4e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	891b      	ldrh	r3, [r3, #8]
 800bb54:	085b      	lsrs	r3, r3, #1
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	005b      	lsls	r3, r3, #1
 800bb5a:	b29a      	uxth	r2, r3
 800bb5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb5e:	801a      	strh	r2, [r3, #0]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	677b      	str	r3, [r7, #116]	@ 0x74
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb70:	4413      	add	r3, r2
 800bb72:	677b      	str	r3, [r7, #116]	@ 0x74
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	00da      	lsls	r2, r3, #3
 800bb7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb7c:	4413      	add	r3, r2
 800bb7e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bb82:	673b      	str	r3, [r7, #112]	@ 0x70
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	895b      	ldrh	r3, [r3, #10]
 800bb88:	085b      	lsrs	r3, r3, #1
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	005b      	lsls	r3, r3, #1
 800bb8e:	b29a      	uxth	r2, r3
 800bb90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bb92:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	785b      	ldrb	r3, [r3, #1]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	f040 81af 	bne.w	800befc <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	4413      	add	r3, r2
 800bba8:	881b      	ldrh	r3, [r3, #0]
 800bbaa:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800bbae:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800bbb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d01d      	beq.n	800bbf6 <USB_ActivateEndpoint+0x53e>
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	4413      	add	r3, r2
 800bbc4:	881b      	ldrh	r3, [r3, #0]
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bbcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbd0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	441a      	add	r2, r3
 800bbde:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800bbe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bbe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bbea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bbee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	4413      	add	r3, r2
 800bc00:	881b      	ldrh	r3, [r3, #0]
 800bc02:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800bc06:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800bc0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d01d      	beq.n	800bc4e <USB_ActivateEndpoint+0x596>
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	4413      	add	r3, r2
 800bc1c:	881b      	ldrh	r3, [r3, #0]
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc28:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	441a      	add	r2, r3
 800bc36:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800bc3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	785b      	ldrb	r3, [r3, #1]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d16b      	bne.n	800bd2e <USB_ActivateEndpoint+0x676>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	461a      	mov	r2, r3
 800bc64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc66:	4413      	add	r3, r2
 800bc68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	00da      	lsls	r2, r3, #3
 800bc70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc72:	4413      	add	r3, r2
 800bc74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bc78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc7c:	881b      	ldrh	r3, [r3, #0]
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc88:	801a      	strh	r2, [r3, #0]
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	691b      	ldr	r3, [r3, #16]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d10a      	bne.n	800bca8 <USB_ActivateEndpoint+0x5f0>
 800bc92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc94:	881b      	ldrh	r3, [r3, #0]
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bca0:	b29a      	uxth	r2, r3
 800bca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bca4:	801a      	strh	r2, [r3, #0]
 800bca6:	e05d      	b.n	800bd64 <USB_ActivateEndpoint+0x6ac>
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	691b      	ldr	r3, [r3, #16]
 800bcac:	2b3e      	cmp	r3, #62	@ 0x3e
 800bcae:	d81c      	bhi.n	800bcea <USB_ActivateEndpoint+0x632>
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	691b      	ldr	r3, [r3, #16]
 800bcb4:	085b      	lsrs	r3, r3, #1
 800bcb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	f003 0301 	and.w	r3, r3, #1
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d004      	beq.n	800bcd0 <USB_ActivateEndpoint+0x618>
 800bcc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bcca:	3301      	adds	r3, #1
 800bccc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bcd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcd2:	881b      	ldrh	r3, [r3, #0]
 800bcd4:	b29a      	uxth	r2, r3
 800bcd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	029b      	lsls	r3, r3, #10
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	4313      	orrs	r3, r2
 800bce2:	b29a      	uxth	r2, r3
 800bce4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bce6:	801a      	strh	r2, [r3, #0]
 800bce8:	e03c      	b.n	800bd64 <USB_ActivateEndpoint+0x6ac>
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	691b      	ldr	r3, [r3, #16]
 800bcee:	095b      	lsrs	r3, r3, #5
 800bcf0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	691b      	ldr	r3, [r3, #16]
 800bcf8:	f003 031f 	and.w	r3, r3, #31
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d104      	bne.n	800bd0a <USB_ActivateEndpoint+0x652>
 800bd00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bd04:	3b01      	subs	r3, #1
 800bd06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bd0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd0c:	881b      	ldrh	r3, [r3, #0]
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	029b      	lsls	r3, r3, #10
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd26:	b29a      	uxth	r2, r3
 800bd28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd2a:	801a      	strh	r2, [r3, #0]
 800bd2c:	e01a      	b.n	800bd64 <USB_ActivateEndpoint+0x6ac>
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	785b      	ldrb	r3, [r3, #1]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d116      	bne.n	800bd64 <USB_ActivateEndpoint+0x6ac>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	657b      	str	r3, [r7, #84]	@ 0x54
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	461a      	mov	r2, r3
 800bd44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd46:	4413      	add	r3, r2
 800bd48:	657b      	str	r3, [r7, #84]	@ 0x54
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	00da      	lsls	r2, r3, #3
 800bd50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd52:	4413      	add	r3, r2
 800bd54:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bd58:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	691b      	ldr	r3, [r3, #16]
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd62:	801a      	strh	r2, [r3, #0]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	785b      	ldrb	r3, [r3, #1]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d16b      	bne.n	800be48 <USB_ActivateEndpoint+0x790>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd80:	4413      	add	r3, r2
 800bd82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	00da      	lsls	r2, r3, #3
 800bd8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd8c:	4413      	add	r3, r2
 800bd8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bd92:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bd94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd96:	881b      	ldrh	r3, [r3, #0]
 800bd98:	b29b      	uxth	r3, r3
 800bd9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd9e:	b29a      	uxth	r2, r3
 800bda0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bda2:	801a      	strh	r2, [r3, #0]
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d10a      	bne.n	800bdc2 <USB_ActivateEndpoint+0x70a>
 800bdac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdae:	881b      	ldrh	r3, [r3, #0]
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bdb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bdba:	b29a      	uxth	r2, r3
 800bdbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdbe:	801a      	strh	r2, [r3, #0]
 800bdc0:	e05b      	b.n	800be7a <USB_ActivateEndpoint+0x7c2>
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	691b      	ldr	r3, [r3, #16]
 800bdc6:	2b3e      	cmp	r3, #62	@ 0x3e
 800bdc8:	d81c      	bhi.n	800be04 <USB_ActivateEndpoint+0x74c>
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	691b      	ldr	r3, [r3, #16]
 800bdce:	085b      	lsrs	r3, r3, #1
 800bdd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	691b      	ldr	r3, [r3, #16]
 800bdd8:	f003 0301 	and.w	r3, r3, #1
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d004      	beq.n	800bdea <USB_ActivateEndpoint+0x732>
 800bde0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bde4:	3301      	adds	r3, #1
 800bde6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bdea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdec:	881b      	ldrh	r3, [r3, #0]
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	029b      	lsls	r3, r3, #10
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	b29a      	uxth	r2, r3
 800bdfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be00:	801a      	strh	r2, [r3, #0]
 800be02:	e03a      	b.n	800be7a <USB_ActivateEndpoint+0x7c2>
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	691b      	ldr	r3, [r3, #16]
 800be08:	095b      	lsrs	r3, r3, #5
 800be0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	691b      	ldr	r3, [r3, #16]
 800be12:	f003 031f 	and.w	r3, r3, #31
 800be16:	2b00      	cmp	r3, #0
 800be18:	d104      	bne.n	800be24 <USB_ActivateEndpoint+0x76c>
 800be1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800be1e:	3b01      	subs	r3, #1
 800be20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800be24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be26:	881b      	ldrh	r3, [r3, #0]
 800be28:	b29a      	uxth	r2, r3
 800be2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800be2e:	b29b      	uxth	r3, r3
 800be30:	029b      	lsls	r3, r3, #10
 800be32:	b29b      	uxth	r3, r3
 800be34:	4313      	orrs	r3, r2
 800be36:	b29b      	uxth	r3, r3
 800be38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be40:	b29a      	uxth	r2, r3
 800be42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be44:	801a      	strh	r2, [r3, #0]
 800be46:	e018      	b.n	800be7a <USB_ActivateEndpoint+0x7c2>
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	785b      	ldrb	r3, [r3, #1]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d114      	bne.n	800be7a <USB_ActivateEndpoint+0x7c2>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be56:	b29b      	uxth	r3, r3
 800be58:	461a      	mov	r2, r3
 800be5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be5c:	4413      	add	r3, r2
 800be5e:	647b      	str	r3, [r7, #68]	@ 0x44
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	00da      	lsls	r2, r3, #3
 800be66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be68:	4413      	add	r3, r2
 800be6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800be6e:	643b      	str	r3, [r7, #64]	@ 0x40
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	691b      	ldr	r3, [r3, #16]
 800be74:	b29a      	uxth	r2, r3
 800be76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be78:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	4413      	add	r3, r2
 800be84:	881b      	ldrh	r3, [r3, #0]
 800be86:	b29b      	uxth	r3, r3
 800be88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be90:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800be92:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800be94:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800be98:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800be9a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800be9c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bea0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	441a      	add	r2, r3
 800beac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800beae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800beb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800beb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800beba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	4413      	add	r3, r2
 800becc:	881b      	ldrh	r3, [r3, #0]
 800bece:	b29b      	uxth	r3, r3
 800bed0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bed4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bed8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	441a      	add	r2, r3
 800bee4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bee6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800beea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800beee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	8013      	strh	r3, [r2, #0]
 800befa:	e0bc      	b.n	800c076 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	4413      	add	r3, r2
 800bf06:	881b      	ldrh	r3, [r3, #0]
 800bf08:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800bf0c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bf10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d01d      	beq.n	800bf54 <USB_ActivateEndpoint+0x89c>
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	4413      	add	r3, r2
 800bf22:	881b      	ldrh	r3, [r3, #0]
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf2e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	009b      	lsls	r3, r3, #2
 800bf3a:	441a      	add	r2, r3
 800bf3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bf40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bf4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	4413      	add	r3, r2
 800bf5e:	881b      	ldrh	r3, [r3, #0]
 800bf60:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800bf64:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800bf68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d01d      	beq.n	800bfac <USB_ActivateEndpoint+0x8f4>
 800bf70:	687a      	ldr	r2, [r7, #4]
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	4413      	add	r3, r2
 800bf7a:	881b      	ldrh	r3, [r3, #0]
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf86:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	441a      	add	r2, r3
 800bf94:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800bf98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bfa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfa4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bfa8:	b29b      	uxth	r3, r3
 800bfaa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	78db      	ldrb	r3, [r3, #3]
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d024      	beq.n	800bffe <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	881b      	ldrh	r3, [r3, #0]
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bfc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bfca:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800bfce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800bfd2:	f083 0320 	eor.w	r3, r3, #32
 800bfd6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	441a      	add	r2, r3
 800bfe4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800bfe8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bfec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bff0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	8013      	strh	r3, [r2, #0]
 800bffc:	e01d      	b.n	800c03a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	4413      	add	r3, r2
 800c008:	881b      	ldrh	r3, [r3, #0]
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c010:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c014:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	441a      	add	r2, r3
 800c022:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800c026:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c02a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c02e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c036:	b29b      	uxth	r3, r3
 800c038:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	4413      	add	r3, r2
 800c044:	881b      	ldrh	r3, [r3, #0]
 800c046:	b29b      	uxth	r3, r3
 800c048:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c04c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c050:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	441a      	add	r2, r3
 800c05e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c062:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c066:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c06a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c06e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c072:	b29b      	uxth	r3, r3
 800c074:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c076:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	379c      	adds	r7, #156	@ 0x9c
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr
 800c086:	bf00      	nop

0800c088 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c088:	b480      	push	{r7}
 800c08a:	b08d      	sub	sp, #52	@ 0x34
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	7b1b      	ldrb	r3, [r3, #12]
 800c096:	2b00      	cmp	r3, #0
 800c098:	f040 808e 	bne.w	800c1b8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	785b      	ldrb	r3, [r3, #1]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d044      	beq.n	800c12e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c0a4:	687a      	ldr	r2, [r7, #4]
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	4413      	add	r3, r2
 800c0ae:	881b      	ldrh	r3, [r3, #0]
 800c0b0:	81bb      	strh	r3, [r7, #12]
 800c0b2:	89bb      	ldrh	r3, [r7, #12]
 800c0b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d01b      	beq.n	800c0f4 <USB_DeactivateEndpoint+0x6c>
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	4413      	add	r3, r2
 800c0c6:	881b      	ldrh	r3, [r3, #0]
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0d2:	817b      	strh	r3, [r7, #10]
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	441a      	add	r2, r3
 800c0de:	897b      	ldrh	r3, [r7, #10]
 800c0e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	4413      	add	r3, r2
 800c0fe:	881b      	ldrh	r3, [r3, #0]
 800c100:	b29b      	uxth	r3, r3
 800c102:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c106:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c10a:	813b      	strh	r3, [r7, #8]
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	441a      	add	r2, r3
 800c116:	893b      	ldrh	r3, [r7, #8]
 800c118:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c11c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c128:	b29b      	uxth	r3, r3
 800c12a:	8013      	strh	r3, [r2, #0]
 800c12c:	e192      	b.n	800c454 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	4413      	add	r3, r2
 800c138:	881b      	ldrh	r3, [r3, #0]
 800c13a:	827b      	strh	r3, [r7, #18]
 800c13c:	8a7b      	ldrh	r3, [r7, #18]
 800c13e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c142:	2b00      	cmp	r3, #0
 800c144:	d01b      	beq.n	800c17e <USB_DeactivateEndpoint+0xf6>
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	4413      	add	r3, r2
 800c150:	881b      	ldrh	r3, [r3, #0]
 800c152:	b29b      	uxth	r3, r3
 800c154:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c158:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c15c:	823b      	strh	r3, [r7, #16]
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	441a      	add	r2, r3
 800c168:	8a3b      	ldrh	r3, [r7, #16]
 800c16a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c16e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c172:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	4413      	add	r3, r2
 800c188:	881b      	ldrh	r3, [r3, #0]
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c190:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c194:	81fb      	strh	r3, [r7, #14]
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	441a      	add	r2, r3
 800c1a0:	89fb      	ldrh	r3, [r7, #14]
 800c1a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	8013      	strh	r3, [r2, #0]
 800c1b6:	e14d      	b.n	800c454 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	785b      	ldrb	r3, [r3, #1]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	f040 80a5 	bne.w	800c30c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	009b      	lsls	r3, r3, #2
 800c1ca:	4413      	add	r3, r2
 800c1cc:	881b      	ldrh	r3, [r3, #0]
 800c1ce:	843b      	strh	r3, [r7, #32]
 800c1d0:	8c3b      	ldrh	r3, [r7, #32]
 800c1d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d01b      	beq.n	800c212 <USB_DeactivateEndpoint+0x18a>
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	4413      	add	r3, r2
 800c1e4:	881b      	ldrh	r3, [r3, #0]
 800c1e6:	b29b      	uxth	r3, r3
 800c1e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1f0:	83fb      	strh	r3, [r7, #30]
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	441a      	add	r2, r3
 800c1fc:	8bfb      	ldrh	r3, [r7, #30]
 800c1fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c202:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c206:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c20a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c20e:	b29b      	uxth	r3, r3
 800c210:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	009b      	lsls	r3, r3, #2
 800c21a:	4413      	add	r3, r2
 800c21c:	881b      	ldrh	r3, [r3, #0]
 800c21e:	83bb      	strh	r3, [r7, #28]
 800c220:	8bbb      	ldrh	r3, [r7, #28]
 800c222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c226:	2b00      	cmp	r3, #0
 800c228:	d01b      	beq.n	800c262 <USB_DeactivateEndpoint+0x1da>
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	4413      	add	r3, r2
 800c234:	881b      	ldrh	r3, [r3, #0]
 800c236:	b29b      	uxth	r3, r3
 800c238:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c23c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c240:	837b      	strh	r3, [r7, #26]
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	441a      	add	r2, r3
 800c24c:	8b7b      	ldrh	r3, [r7, #26]
 800c24e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c252:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c256:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c25a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c25e:	b29b      	uxth	r3, r3
 800c260:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	4413      	add	r3, r2
 800c26c:	881b      	ldrh	r3, [r3, #0]
 800c26e:	b29b      	uxth	r3, r3
 800c270:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c278:	833b      	strh	r3, [r7, #24]
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	441a      	add	r2, r3
 800c284:	8b3b      	ldrh	r3, [r7, #24]
 800c286:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c28a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c28e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c292:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c296:	b29b      	uxth	r3, r3
 800c298:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	009b      	lsls	r3, r3, #2
 800c2a2:	4413      	add	r3, r2
 800c2a4:	881b      	ldrh	r3, [r3, #0]
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c2ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2b0:	82fb      	strh	r3, [r7, #22]
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	441a      	add	r2, r3
 800c2bc:	8afb      	ldrh	r3, [r7, #22]
 800c2be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4413      	add	r3, r2
 800c2dc:	881b      	ldrh	r3, [r3, #0]
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c2e8:	82bb      	strh	r3, [r7, #20]
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	441a      	add	r2, r3
 800c2f4:	8abb      	ldrh	r3, [r7, #20]
 800c2f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c306:	b29b      	uxth	r3, r3
 800c308:	8013      	strh	r3, [r2, #0]
 800c30a:	e0a3      	b.n	800c454 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	4413      	add	r3, r2
 800c316:	881b      	ldrh	r3, [r3, #0]
 800c318:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c31a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c31c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c320:	2b00      	cmp	r3, #0
 800c322:	d01b      	beq.n	800c35c <USB_DeactivateEndpoint+0x2d4>
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	4413      	add	r3, r2
 800c32e:	881b      	ldrh	r3, [r3, #0]
 800c330:	b29b      	uxth	r3, r3
 800c332:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c33a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	441a      	add	r2, r3
 800c346:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c348:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c34c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c350:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c358:	b29b      	uxth	r3, r3
 800c35a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	4413      	add	r3, r2
 800c366:	881b      	ldrh	r3, [r3, #0]
 800c368:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800c36a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c36c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c370:	2b00      	cmp	r3, #0
 800c372:	d01b      	beq.n	800c3ac <USB_DeactivateEndpoint+0x324>
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	4413      	add	r3, r2
 800c37e:	881b      	ldrh	r3, [r3, #0]
 800c380:	b29b      	uxth	r3, r3
 800c382:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c38a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	441a      	add	r2, r3
 800c396:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c398:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c39c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	009b      	lsls	r3, r3, #2
 800c3b4:	4413      	add	r3, r2
 800c3b6:	881b      	ldrh	r3, [r3, #0]
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c3be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	441a      	add	r2, r3
 800c3ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c3d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c3dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	4413      	add	r3, r2
 800c3ee:	881b      	ldrh	r3, [r3, #0]
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c3f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	441a      	add	r2, r3
 800c406:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c408:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c40c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c410:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c418:	b29b      	uxth	r3, r3
 800c41a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	4413      	add	r3, r2
 800c426:	881b      	ldrh	r3, [r3, #0]
 800c428:	b29b      	uxth	r3, r3
 800c42a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c42e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c432:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	441a      	add	r2, r3
 800c43e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c440:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c444:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c448:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c44c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c450:	b29b      	uxth	r3, r3
 800c452:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c454:	2300      	movs	r3, #0
}
 800c456:	4618      	mov	r0, r3
 800c458:	3734      	adds	r7, #52	@ 0x34
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr

0800c462 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c462:	b580      	push	{r7, lr}
 800c464:	b0ac      	sub	sp, #176	@ 0xb0
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
 800c46a:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	785b      	ldrb	r3, [r3, #1]
 800c470:	2b01      	cmp	r3, #1
 800c472:	f040 84ca 	bne.w	800ce0a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	699a      	ldr	r2, [r3, #24]
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	691b      	ldr	r3, [r3, #16]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d904      	bls.n	800c48c <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	691b      	ldr	r3, [r3, #16]
 800c486:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c48a:	e003      	b.n	800c494 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	699b      	ldr	r3, [r3, #24]
 800c490:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	7b1b      	ldrb	r3, [r3, #12]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d122      	bne.n	800c4e2 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	6959      	ldr	r1, [r3, #20]
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	88da      	ldrh	r2, [r3, #6]
 800c4a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 febd 	bl	800d22a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	613b      	str	r3, [r7, #16]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	461a      	mov	r2, r3
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	613b      	str	r3, [r7, #16]
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	00da      	lsls	r2, r3, #3
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c4d2:	60fb      	str	r3, [r7, #12]
 800c4d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4d8:	b29a      	uxth	r2, r3
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	801a      	strh	r2, [r3, #0]
 800c4de:	f000 bc6f 	b.w	800cdc0 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	78db      	ldrb	r3, [r3, #3]
 800c4e6:	2b02      	cmp	r3, #2
 800c4e8:	f040 831e 	bne.w	800cb28 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	6a1a      	ldr	r2, [r3, #32]
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	691b      	ldr	r3, [r3, #16]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	f240 82cf 	bls.w	800ca98 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	009b      	lsls	r3, r3, #2
 800c502:	4413      	add	r3, r2
 800c504:	881b      	ldrh	r3, [r3, #0]
 800c506:	b29b      	uxth	r3, r3
 800c508:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c50c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c510:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	441a      	add	r2, r3
 800c51e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c522:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c526:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c52a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c52e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c532:	b29b      	uxth	r3, r3
 800c534:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	6a1a      	ldr	r2, [r3, #32]
 800c53a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c53e:	1ad2      	subs	r2, r2, r3
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	4413      	add	r3, r2
 800c54e:	881b      	ldrh	r3, [r3, #0]
 800c550:	b29b      	uxth	r3, r3
 800c552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c556:	2b00      	cmp	r3, #0
 800c558:	f000 814f 	beq.w	800c7fa <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	785b      	ldrb	r3, [r3, #1]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d16b      	bne.n	800c640 <USB_EPStartXfer+0x1de>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c572:	b29b      	uxth	r3, r3
 800c574:	461a      	mov	r2, r3
 800c576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c578:	4413      	add	r3, r2
 800c57a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	00da      	lsls	r2, r3, #3
 800c582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c584:	4413      	add	r3, r2
 800c586:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c58a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c58e:	881b      	ldrh	r3, [r3, #0]
 800c590:	b29b      	uxth	r3, r3
 800c592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c596:	b29a      	uxth	r2, r3
 800c598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59a:	801a      	strh	r2, [r3, #0]
 800c59c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d10a      	bne.n	800c5ba <USB_EPStartXfer+0x158>
 800c5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a6:	881b      	ldrh	r3, [r3, #0]
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5b2:	b29a      	uxth	r2, r3
 800c5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b6:	801a      	strh	r2, [r3, #0]
 800c5b8:	e05b      	b.n	800c672 <USB_EPStartXfer+0x210>
 800c5ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5be:	2b3e      	cmp	r3, #62	@ 0x3e
 800c5c0:	d81c      	bhi.n	800c5fc <USB_EPStartXfer+0x19a>
 800c5c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5c6:	085b      	lsrs	r3, r3, #1
 800c5c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c5cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5d0:	f003 0301 	and.w	r3, r3, #1
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d004      	beq.n	800c5e2 <USB_EPStartXfer+0x180>
 800c5d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c5dc:	3301      	adds	r3, #1
 800c5de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e4:	881b      	ldrh	r3, [r3, #0]
 800c5e6:	b29a      	uxth	r2, r3
 800c5e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	029b      	lsls	r3, r3, #10
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	b29a      	uxth	r2, r3
 800c5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f8:	801a      	strh	r2, [r3, #0]
 800c5fa:	e03a      	b.n	800c672 <USB_EPStartXfer+0x210>
 800c5fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c600:	095b      	lsrs	r3, r3, #5
 800c602:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c60a:	f003 031f 	and.w	r3, r3, #31
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d104      	bne.n	800c61c <USB_EPStartXfer+0x1ba>
 800c612:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c616:	3b01      	subs	r3, #1
 800c618:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c61e:	881b      	ldrh	r3, [r3, #0]
 800c620:	b29a      	uxth	r2, r3
 800c622:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c626:	b29b      	uxth	r3, r3
 800c628:	029b      	lsls	r3, r3, #10
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	4313      	orrs	r3, r2
 800c62e:	b29b      	uxth	r3, r3
 800c630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c638:	b29a      	uxth	r2, r3
 800c63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63c:	801a      	strh	r2, [r3, #0]
 800c63e:	e018      	b.n	800c672 <USB_EPStartXfer+0x210>
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	785b      	ldrb	r3, [r3, #1]
 800c644:	2b01      	cmp	r3, #1
 800c646:	d114      	bne.n	800c672 <USB_EPStartXfer+0x210>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c64e:	b29b      	uxth	r3, r3
 800c650:	461a      	mov	r2, r3
 800c652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c654:	4413      	add	r3, r2
 800c656:	633b      	str	r3, [r7, #48]	@ 0x30
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	00da      	lsls	r2, r3, #3
 800c65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c660:	4413      	add	r3, r2
 800c662:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c668:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c66c:	b29a      	uxth	r2, r3
 800c66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c670:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	895b      	ldrh	r3, [r3, #10]
 800c676:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	6959      	ldr	r1, [r3, #20]
 800c67e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c682:	b29b      	uxth	r3, r3
 800c684:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 fdce 	bl	800d22a <USB_WritePMA>
            ep->xfer_buff += len;
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	695a      	ldr	r2, [r3, #20]
 800c692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c696:	441a      	add	r2, r3
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	6a1a      	ldr	r2, [r3, #32]
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	691b      	ldr	r3, [r3, #16]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d907      	bls.n	800c6b8 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	6a1a      	ldr	r2, [r3, #32]
 800c6ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c6b0:	1ad2      	subs	r2, r2, r3
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	621a      	str	r2, [r3, #32]
 800c6b6:	e006      	b.n	800c6c6 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	6a1b      	ldr	r3, [r3, #32]
 800c6bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	785b      	ldrb	r3, [r3, #1]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d16b      	bne.n	800c7a6 <USB_EPStartXfer+0x344>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	61bb      	str	r3, [r7, #24]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	461a      	mov	r2, r3
 800c6dc:	69bb      	ldr	r3, [r7, #24]
 800c6de:	4413      	add	r3, r2
 800c6e0:	61bb      	str	r3, [r7, #24]
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	00da      	lsls	r2, r3, #3
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c6f0:	617b      	str	r3, [r7, #20]
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	881b      	ldrh	r3, [r3, #0]
 800c6f6:	b29b      	uxth	r3, r3
 800c6f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c6fc:	b29a      	uxth	r2, r3
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	801a      	strh	r2, [r3, #0]
 800c702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c706:	2b00      	cmp	r3, #0
 800c708:	d10a      	bne.n	800c720 <USB_EPStartXfer+0x2be>
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	881b      	ldrh	r3, [r3, #0]
 800c70e:	b29b      	uxth	r3, r3
 800c710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c718:	b29a      	uxth	r2, r3
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	801a      	strh	r2, [r3, #0]
 800c71e:	e05d      	b.n	800c7dc <USB_EPStartXfer+0x37a>
 800c720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c724:	2b3e      	cmp	r3, #62	@ 0x3e
 800c726:	d81c      	bhi.n	800c762 <USB_EPStartXfer+0x300>
 800c728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c72c:	085b      	lsrs	r3, r3, #1
 800c72e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c736:	f003 0301 	and.w	r3, r3, #1
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d004      	beq.n	800c748 <USB_EPStartXfer+0x2e6>
 800c73e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c742:	3301      	adds	r3, #1
 800c744:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	881b      	ldrh	r3, [r3, #0]
 800c74c:	b29a      	uxth	r2, r3
 800c74e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c752:	b29b      	uxth	r3, r3
 800c754:	029b      	lsls	r3, r3, #10
 800c756:	b29b      	uxth	r3, r3
 800c758:	4313      	orrs	r3, r2
 800c75a:	b29a      	uxth	r2, r3
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	801a      	strh	r2, [r3, #0]
 800c760:	e03c      	b.n	800c7dc <USB_EPStartXfer+0x37a>
 800c762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c766:	095b      	lsrs	r3, r3, #5
 800c768:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c76c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c770:	f003 031f 	and.w	r3, r3, #31
 800c774:	2b00      	cmp	r3, #0
 800c776:	d104      	bne.n	800c782 <USB_EPStartXfer+0x320>
 800c778:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c77c:	3b01      	subs	r3, #1
 800c77e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	881b      	ldrh	r3, [r3, #0]
 800c786:	b29a      	uxth	r2, r3
 800c788:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	029b      	lsls	r3, r3, #10
 800c790:	b29b      	uxth	r3, r3
 800c792:	4313      	orrs	r3, r2
 800c794:	b29b      	uxth	r3, r3
 800c796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c79a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	801a      	strh	r2, [r3, #0]
 800c7a4:	e01a      	b.n	800c7dc <USB_EPStartXfer+0x37a>
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	785b      	ldrb	r3, [r3, #1]
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	d116      	bne.n	800c7dc <USB_EPStartXfer+0x37a>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	623b      	str	r3, [r7, #32]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	6a3b      	ldr	r3, [r7, #32]
 800c7be:	4413      	add	r3, r2
 800c7c0:	623b      	str	r3, [r7, #32]
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	00da      	lsls	r2, r3, #3
 800c7c8:	6a3b      	ldr	r3, [r7, #32]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c7d0:	61fb      	str	r3, [r7, #28]
 800c7d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7d6:	b29a      	uxth	r2, r3
 800c7d8:	69fb      	ldr	r3, [r7, #28]
 800c7da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	891b      	ldrh	r3, [r3, #8]
 800c7e0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	6959      	ldr	r1, [r3, #20]
 800c7e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 fd19 	bl	800d22a <USB_WritePMA>
 800c7f8:	e2e2      	b.n	800cdc0 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	785b      	ldrb	r3, [r3, #1]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d16b      	bne.n	800c8da <USB_EPStartXfer+0x478>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	461a      	mov	r2, r3
 800c810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c812:	4413      	add	r3, r2
 800c814:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	00da      	lsls	r2, r3, #3
 800c81c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c81e:	4413      	add	r3, r2
 800c820:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c824:	647b      	str	r3, [r7, #68]	@ 0x44
 800c826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c828:	881b      	ldrh	r3, [r3, #0]
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c830:	b29a      	uxth	r2, r3
 800c832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c834:	801a      	strh	r2, [r3, #0]
 800c836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d10a      	bne.n	800c854 <USB_EPStartXfer+0x3f2>
 800c83e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c840:	881b      	ldrh	r3, [r3, #0]
 800c842:	b29b      	uxth	r3, r3
 800c844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c84c:	b29a      	uxth	r2, r3
 800c84e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c850:	801a      	strh	r2, [r3, #0]
 800c852:	e05d      	b.n	800c910 <USB_EPStartXfer+0x4ae>
 800c854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c858:	2b3e      	cmp	r3, #62	@ 0x3e
 800c85a:	d81c      	bhi.n	800c896 <USB_EPStartXfer+0x434>
 800c85c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c860:	085b      	lsrs	r3, r3, #1
 800c862:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c86a:	f003 0301 	and.w	r3, r3, #1
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d004      	beq.n	800c87c <USB_EPStartXfer+0x41a>
 800c872:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c876:	3301      	adds	r3, #1
 800c878:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c87c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c87e:	881b      	ldrh	r3, [r3, #0]
 800c880:	b29a      	uxth	r2, r3
 800c882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c886:	b29b      	uxth	r3, r3
 800c888:	029b      	lsls	r3, r3, #10
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	4313      	orrs	r3, r2
 800c88e:	b29a      	uxth	r2, r3
 800c890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c892:	801a      	strh	r2, [r3, #0]
 800c894:	e03c      	b.n	800c910 <USB_EPStartXfer+0x4ae>
 800c896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c89a:	095b      	lsrs	r3, r3, #5
 800c89c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c8a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8a4:	f003 031f 	and.w	r3, r3, #31
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d104      	bne.n	800c8b6 <USB_EPStartXfer+0x454>
 800c8ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c8b0:	3b01      	subs	r3, #1
 800c8b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c8b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8b8:	881b      	ldrh	r3, [r3, #0]
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	029b      	lsls	r3, r3, #10
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8d2:	b29a      	uxth	r2, r3
 800c8d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8d6:	801a      	strh	r2, [r3, #0]
 800c8d8:	e01a      	b.n	800c910 <USB_EPStartXfer+0x4ae>
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	785b      	ldrb	r3, [r3, #1]
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d116      	bne.n	800c910 <USB_EPStartXfer+0x4ae>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	653b      	str	r3, [r7, #80]	@ 0x50
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8f2:	4413      	add	r3, r2
 800c8f4:	653b      	str	r3, [r7, #80]	@ 0x50
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	00da      	lsls	r2, r3, #3
 800c8fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8fe:	4413      	add	r3, r2
 800c900:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c90a:	b29a      	uxth	r2, r3
 800c90c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c90e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	891b      	ldrh	r3, [r3, #8]
 800c914:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	6959      	ldr	r1, [r3, #20]
 800c91c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c920:	b29b      	uxth	r3, r3
 800c922:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 fc7f 	bl	800d22a <USB_WritePMA>
            ep->xfer_buff += len;
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	695a      	ldr	r2, [r3, #20]
 800c930:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c934:	441a      	add	r2, r3
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	6a1a      	ldr	r2, [r3, #32]
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	691b      	ldr	r3, [r3, #16]
 800c942:	429a      	cmp	r2, r3
 800c944:	d907      	bls.n	800c956 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	6a1a      	ldr	r2, [r3, #32]
 800c94a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c94e:	1ad2      	subs	r2, r2, r3
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	621a      	str	r2, [r3, #32]
 800c954:	e006      	b.n	800c964 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	6a1b      	ldr	r3, [r3, #32]
 800c95a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	2200      	movs	r2, #0
 800c962:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	643b      	str	r3, [r7, #64]	@ 0x40
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	785b      	ldrb	r3, [r3, #1]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d16b      	bne.n	800ca48 <USB_EPStartXfer+0x5e6>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	461a      	mov	r2, r3
 800c97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c980:	4413      	add	r3, r2
 800c982:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	00da      	lsls	r2, r3, #3
 800c98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c98c:	4413      	add	r3, r2
 800c98e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c992:	637b      	str	r3, [r7, #52]	@ 0x34
 800c994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c996:	881b      	ldrh	r3, [r3, #0]
 800c998:	b29b      	uxth	r3, r3
 800c99a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9a2:	801a      	strh	r2, [r3, #0]
 800c9a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d10a      	bne.n	800c9c2 <USB_EPStartXfer+0x560>
 800c9ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9ae:	881b      	ldrh	r3, [r3, #0]
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9ba:	b29a      	uxth	r2, r3
 800c9bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9be:	801a      	strh	r2, [r3, #0]
 800c9c0:	e05b      	b.n	800ca7a <USB_EPStartXfer+0x618>
 800c9c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9c6:	2b3e      	cmp	r3, #62	@ 0x3e
 800c9c8:	d81c      	bhi.n	800ca04 <USB_EPStartXfer+0x5a2>
 800c9ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9ce:	085b      	lsrs	r3, r3, #1
 800c9d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c9d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9d8:	f003 0301 	and.w	r3, r3, #1
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d004      	beq.n	800c9ea <USB_EPStartXfer+0x588>
 800c9e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c9ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9ec:	881b      	ldrh	r3, [r3, #0]
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	029b      	lsls	r3, r3, #10
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	b29a      	uxth	r2, r3
 800c9fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca00:	801a      	strh	r2, [r3, #0]
 800ca02:	e03a      	b.n	800ca7a <USB_EPStartXfer+0x618>
 800ca04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca08:	095b      	lsrs	r3, r3, #5
 800ca0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ca0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca12:	f003 031f 	and.w	r3, r3, #31
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d104      	bne.n	800ca24 <USB_EPStartXfer+0x5c2>
 800ca1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ca1e:	3b01      	subs	r3, #1
 800ca20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ca24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca26:	881b      	ldrh	r3, [r3, #0]
 800ca28:	b29a      	uxth	r2, r3
 800ca2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	029b      	lsls	r3, r3, #10
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	4313      	orrs	r3, r2
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca40:	b29a      	uxth	r2, r3
 800ca42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca44:	801a      	strh	r2, [r3, #0]
 800ca46:	e018      	b.n	800ca7a <USB_EPStartXfer+0x618>
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	785b      	ldrb	r3, [r3, #1]
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d114      	bne.n	800ca7a <USB_EPStartXfer+0x618>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca56:	b29b      	uxth	r3, r3
 800ca58:	461a      	mov	r2, r3
 800ca5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca5c:	4413      	add	r3, r2
 800ca5e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	00da      	lsls	r2, r3, #3
 800ca66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca68:	4413      	add	r3, r2
 800ca6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ca6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	895b      	ldrh	r3, [r3, #10]
 800ca7e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	6959      	ldr	r1, [r3, #20]
 800ca86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 fbca 	bl	800d22a <USB_WritePMA>
 800ca96:	e193      	b.n	800cdc0 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	6a1b      	ldr	r3, [r3, #32]
 800ca9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	4413      	add	r3, r2
 800caaa:	881b      	ldrh	r3, [r3, #0]
 800caac:	b29b      	uxth	r3, r3
 800caae:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800cab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cab6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	441a      	add	r2, r3
 800cac4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800cac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cacc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cad8:	b29b      	uxth	r3, r3
 800cada:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	461a      	mov	r2, r3
 800caea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800caec:	4413      	add	r3, r2
 800caee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	00da      	lsls	r2, r3, #3
 800caf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800caf8:	4413      	add	r3, r2
 800cafa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cafe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cb00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb04:	b29a      	uxth	r2, r3
 800cb06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	891b      	ldrh	r3, [r3, #8]
 800cb0e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	6959      	ldr	r1, [r3, #20]
 800cb16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb1a:	b29b      	uxth	r3, r3
 800cb1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 fb82 	bl	800d22a <USB_WritePMA>
 800cb26:	e14b      	b.n	800cdc0 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	6a1a      	ldr	r2, [r3, #32]
 800cb2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb30:	1ad2      	subs	r2, r2, r3
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	4413      	add	r3, r2
 800cb40:	881b      	ldrh	r3, [r3, #0]
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	f000 809a 	beq.w	800cc82 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	673b      	str	r3, [r7, #112]	@ 0x70
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	785b      	ldrb	r3, [r3, #1]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d16b      	bne.n	800cc32 <USB_EPStartXfer+0x7d0>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb64:	b29b      	uxth	r3, r3
 800cb66:	461a      	mov	r2, r3
 800cb68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb6a:	4413      	add	r3, r2
 800cb6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	00da      	lsls	r2, r3, #3
 800cb74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb76:	4413      	add	r3, r2
 800cb78:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cb7c:	667b      	str	r3, [r7, #100]	@ 0x64
 800cb7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb80:	881b      	ldrh	r3, [r3, #0]
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb88:	b29a      	uxth	r2, r3
 800cb8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb8c:	801a      	strh	r2, [r3, #0]
 800cb8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d10a      	bne.n	800cbac <USB_EPStartXfer+0x74a>
 800cb96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb98:	881b      	ldrh	r3, [r3, #0]
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cba4:	b29a      	uxth	r2, r3
 800cba6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cba8:	801a      	strh	r2, [r3, #0]
 800cbaa:	e05b      	b.n	800cc64 <USB_EPStartXfer+0x802>
 800cbac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbb0:	2b3e      	cmp	r3, #62	@ 0x3e
 800cbb2:	d81c      	bhi.n	800cbee <USB_EPStartXfer+0x78c>
 800cbb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbb8:	085b      	lsrs	r3, r3, #1
 800cbba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cbbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbc2:	f003 0301 	and.w	r3, r3, #1
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d004      	beq.n	800cbd4 <USB_EPStartXfer+0x772>
 800cbca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cbce:	3301      	adds	r3, #1
 800cbd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cbd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cbd6:	881b      	ldrh	r3, [r3, #0]
 800cbd8:	b29a      	uxth	r2, r3
 800cbda:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cbde:	b29b      	uxth	r3, r3
 800cbe0:	029b      	lsls	r3, r3, #10
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	b29a      	uxth	r2, r3
 800cbe8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cbea:	801a      	strh	r2, [r3, #0]
 800cbec:	e03a      	b.n	800cc64 <USB_EPStartXfer+0x802>
 800cbee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbf2:	095b      	lsrs	r3, r3, #5
 800cbf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cbf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbfc:	f003 031f 	and.w	r3, r3, #31
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d104      	bne.n	800cc0e <USB_EPStartXfer+0x7ac>
 800cc04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cc08:	3b01      	subs	r3, #1
 800cc0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cc0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc10:	881b      	ldrh	r3, [r3, #0]
 800cc12:	b29a      	uxth	r2, r3
 800cc14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	029b      	lsls	r3, r3, #10
 800cc1c:	b29b      	uxth	r3, r3
 800cc1e:	4313      	orrs	r3, r2
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc2a:	b29a      	uxth	r2, r3
 800cc2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc2e:	801a      	strh	r2, [r3, #0]
 800cc30:	e018      	b.n	800cc64 <USB_EPStartXfer+0x802>
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	785b      	ldrb	r3, [r3, #1]
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d114      	bne.n	800cc64 <USB_EPStartXfer+0x802>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	461a      	mov	r2, r3
 800cc44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cc46:	4413      	add	r3, r2
 800cc48:	673b      	str	r3, [r7, #112]	@ 0x70
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	00da      	lsls	r2, r3, #3
 800cc50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cc52:	4413      	add	r3, r2
 800cc54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cc58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cc5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc5e:	b29a      	uxth	r2, r3
 800cc60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	895b      	ldrh	r3, [r3, #10]
 800cc68:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	6959      	ldr	r1, [r3, #20]
 800cc70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 fad5 	bl	800d22a <USB_WritePMA>
 800cc80:	e09e      	b.n	800cdc0 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	785b      	ldrb	r3, [r3, #1]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d16b      	bne.n	800cd62 <USB_EPStartXfer+0x900>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	461a      	mov	r2, r3
 800cc98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cc9a:	4413      	add	r3, r2
 800cc9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	00da      	lsls	r2, r3, #3
 800cca4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cca6:	4413      	add	r3, r2
 800cca8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ccac:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ccae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ccb0:	881b      	ldrh	r3, [r3, #0]
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ccb8:	b29a      	uxth	r2, r3
 800ccba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ccbc:	801a      	strh	r2, [r3, #0]
 800ccbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d10a      	bne.n	800ccdc <USB_EPStartXfer+0x87a>
 800ccc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ccc8:	881b      	ldrh	r3, [r3, #0]
 800ccca:	b29b      	uxth	r3, r3
 800cccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccd4:	b29a      	uxth	r2, r3
 800ccd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ccd8:	801a      	strh	r2, [r3, #0]
 800ccda:	e063      	b.n	800cda4 <USB_EPStartXfer+0x942>
 800ccdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cce0:	2b3e      	cmp	r3, #62	@ 0x3e
 800cce2:	d81c      	bhi.n	800cd1e <USB_EPStartXfer+0x8bc>
 800cce4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cce8:	085b      	lsrs	r3, r3, #1
 800ccea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ccee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccf2:	f003 0301 	and.w	r3, r3, #1
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d004      	beq.n	800cd04 <USB_EPStartXfer+0x8a2>
 800ccfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ccfe:	3301      	adds	r3, #1
 800cd00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cd04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd06:	881b      	ldrh	r3, [r3, #0]
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	029b      	lsls	r3, r3, #10
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	4313      	orrs	r3, r2
 800cd16:	b29a      	uxth	r2, r3
 800cd18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd1a:	801a      	strh	r2, [r3, #0]
 800cd1c:	e042      	b.n	800cda4 <USB_EPStartXfer+0x942>
 800cd1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd22:	095b      	lsrs	r3, r3, #5
 800cd24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cd28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd2c:	f003 031f 	and.w	r3, r3, #31
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d104      	bne.n	800cd3e <USB_EPStartXfer+0x8dc>
 800cd34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cd3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd40:	881b      	ldrh	r3, [r3, #0]
 800cd42:	b29a      	uxth	r2, r3
 800cd44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	029b      	lsls	r3, r3, #10
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd5a:	b29a      	uxth	r2, r3
 800cd5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd5e:	801a      	strh	r2, [r3, #0]
 800cd60:	e020      	b.n	800cda4 <USB_EPStartXfer+0x942>
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	785b      	ldrb	r3, [r3, #1]
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	d11c      	bne.n	800cda4 <USB_EPStartXfer+0x942>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	461a      	mov	r2, r3
 800cd7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cd7e:	4413      	add	r3, r2
 800cd80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	00da      	lsls	r2, r3, #3
 800cd8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cd8e:	4413      	add	r3, r2
 800cd90:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cd98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd9c:	b29a      	uxth	r2, r3
 800cd9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cda2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	891b      	ldrh	r3, [r3, #8]
 800cda8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	6959      	ldr	r1, [r3, #20]
 800cdb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 fa35 	bl	800d22a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	4413      	add	r3, r2
 800cdca:	881b      	ldrh	r3, [r3, #0]
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cdd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cdd6:	817b      	strh	r3, [r7, #10]
 800cdd8:	897b      	ldrh	r3, [r7, #10]
 800cdda:	f083 0310 	eor.w	r3, r3, #16
 800cdde:	817b      	strh	r3, [r7, #10]
 800cde0:	897b      	ldrh	r3, [r7, #10]
 800cde2:	f083 0320 	eor.w	r3, r3, #32
 800cde6:	817b      	strh	r3, [r7, #10]
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	009b      	lsls	r3, r3, #2
 800cdf0:	441a      	add	r2, r3
 800cdf2:	897b      	ldrh	r3, [r7, #10]
 800cdf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cdfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	8013      	strh	r3, [r2, #0]
 800ce08:	e0d5      	b.n	800cfb6 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	7b1b      	ldrb	r3, [r3, #12]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d156      	bne.n	800cec0 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	699b      	ldr	r3, [r3, #24]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d122      	bne.n	800ce60 <USB_EPStartXfer+0x9fe>
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	78db      	ldrb	r3, [r3, #3]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d11e      	bne.n	800ce60 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	4413      	add	r3, r2
 800ce2c:	881b      	ldrh	r3, [r3, #0]
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce38:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	441a      	add	r2, r3
 800ce46:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ce4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce52:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ce56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce5a:	b29b      	uxth	r3, r3
 800ce5c:	8013      	strh	r3, [r2, #0]
 800ce5e:	e01d      	b.n	800ce9c <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	4413      	add	r3, r2
 800ce6a:	881b      	ldrh	r3, [r3, #0]
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ce72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce76:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	009b      	lsls	r3, r3, #2
 800ce82:	441a      	add	r2, r3
 800ce84:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800ce88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	699a      	ldr	r2, [r3, #24]
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	691b      	ldr	r3, [r3, #16]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d907      	bls.n	800ceb8 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	699a      	ldr	r2, [r3, #24]
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	691b      	ldr	r3, [r3, #16]
 800ceb0:	1ad2      	subs	r2, r2, r3
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	619a      	str	r2, [r3, #24]
 800ceb6:	e054      	b.n	800cf62 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	2200      	movs	r2, #0
 800cebc:	619a      	str	r2, [r3, #24]
 800cebe:	e050      	b.n	800cf62 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	78db      	ldrb	r3, [r3, #3]
 800cec4:	2b02      	cmp	r3, #2
 800cec6:	d142      	bne.n	800cf4e <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	69db      	ldr	r3, [r3, #28]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d048      	beq.n	800cf62 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	4413      	add	r3, r2
 800ceda:	881b      	ldrh	r3, [r3, #0]
 800cedc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cee0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800cee4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d005      	beq.n	800cef8 <USB_EPStartXfer+0xa96>
 800ceec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800cef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d10b      	bne.n	800cf10 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cef8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800cefc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d12e      	bne.n	800cf62 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cf04:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800cf08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d128      	bne.n	800cf62 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	009b      	lsls	r3, r3, #2
 800cf18:	4413      	add	r3, r2
 800cf1a:	881b      	ldrh	r3, [r3, #0]
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf26:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	441a      	add	r2, r3
 800cf34:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800cf38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cf48:	b29b      	uxth	r3, r3
 800cf4a:	8013      	strh	r3, [r2, #0]
 800cf4c:	e009      	b.n	800cf62 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	78db      	ldrb	r3, [r3, #3]
 800cf52:	2b01      	cmp	r3, #1
 800cf54:	d103      	bne.n	800cf5e <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	619a      	str	r2, [r3, #24]
 800cf5c:	e001      	b.n	800cf62 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	e02a      	b.n	800cfb8 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	4413      	add	r3, r2
 800cf6c:	881b      	ldrh	r3, [r3, #0]
 800cf6e:	b29b      	uxth	r3, r3
 800cf70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cf74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf78:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cf7c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cf80:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cf84:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cf88:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cf8c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cf90:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cf94:	687a      	ldr	r2, [r7, #4]
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	441a      	add	r2, r3
 800cf9e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cfa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cfa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cfaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cfb6:	2300      	movs	r3, #0
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	37b0      	adds	r7, #176	@ 0xb0
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b085      	sub	sp, #20
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	785b      	ldrb	r3, [r3, #1]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d020      	beq.n	800d014 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cfd2:	687a      	ldr	r2, [r7, #4]
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	009b      	lsls	r3, r3, #2
 800cfda:	4413      	add	r3, r2
 800cfdc:	881b      	ldrh	r3, [r3, #0]
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cfe4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cfe8:	81bb      	strh	r3, [r7, #12]
 800cfea:	89bb      	ldrh	r3, [r7, #12]
 800cfec:	f083 0310 	eor.w	r3, r3, #16
 800cff0:	81bb      	strh	r3, [r7, #12]
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	009b      	lsls	r3, r3, #2
 800cffa:	441a      	add	r2, r3
 800cffc:	89bb      	ldrh	r3, [r7, #12]
 800cffe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d002:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d00a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d00e:	b29b      	uxth	r3, r3
 800d010:	8013      	strh	r3, [r2, #0]
 800d012:	e01f      	b.n	800d054 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	4413      	add	r3, r2
 800d01e:	881b      	ldrh	r3, [r3, #0]
 800d020:	b29b      	uxth	r3, r3
 800d022:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d02a:	81fb      	strh	r3, [r7, #14]
 800d02c:	89fb      	ldrh	r3, [r7, #14]
 800d02e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d032:	81fb      	strh	r3, [r7, #14]
 800d034:	687a      	ldr	r2, [r7, #4]
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	441a      	add	r2, r3
 800d03e:	89fb      	ldrh	r3, [r7, #14]
 800d040:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d044:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d048:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d04c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d050:	b29b      	uxth	r3, r3
 800d052:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d054:	2300      	movs	r3, #0
}
 800d056:	4618      	mov	r0, r3
 800d058:	3714      	adds	r7, #20
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr

0800d062 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d062:	b480      	push	{r7}
 800d064:	b087      	sub	sp, #28
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
 800d06a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	785b      	ldrb	r3, [r3, #1]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d04c      	beq.n	800d10e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	009b      	lsls	r3, r3, #2
 800d07c:	4413      	add	r3, r2
 800d07e:	881b      	ldrh	r3, [r3, #0]
 800d080:	823b      	strh	r3, [r7, #16]
 800d082:	8a3b      	ldrh	r3, [r7, #16]
 800d084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d01b      	beq.n	800d0c4 <USB_EPClearStall+0x62>
 800d08c:	687a      	ldr	r2, [r7, #4]
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	009b      	lsls	r3, r3, #2
 800d094:	4413      	add	r3, r2
 800d096:	881b      	ldrh	r3, [r3, #0]
 800d098:	b29b      	uxth	r3, r3
 800d09a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d09e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0a2:	81fb      	strh	r3, [r7, #14]
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	009b      	lsls	r3, r3, #2
 800d0ac:	441a      	add	r2, r3
 800d0ae:	89fb      	ldrh	r3, [r7, #14]
 800d0b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d0c0:	b29b      	uxth	r3, r3
 800d0c2:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	78db      	ldrb	r3, [r3, #3]
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d06c      	beq.n	800d1a6 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d0cc:	687a      	ldr	r2, [r7, #4]
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	4413      	add	r3, r2
 800d0d6:	881b      	ldrh	r3, [r3, #0]
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d0de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d0e2:	81bb      	strh	r3, [r7, #12]
 800d0e4:	89bb      	ldrh	r3, [r7, #12]
 800d0e6:	f083 0320 	eor.w	r3, r3, #32
 800d0ea:	81bb      	strh	r3, [r7, #12]
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	009b      	lsls	r3, r3, #2
 800d0f4:	441a      	add	r2, r3
 800d0f6:	89bb      	ldrh	r3, [r7, #12]
 800d0f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d100:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d108:	b29b      	uxth	r3, r3
 800d10a:	8013      	strh	r3, [r2, #0]
 800d10c:	e04b      	b.n	800d1a6 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d10e:	687a      	ldr	r2, [r7, #4]
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	009b      	lsls	r3, r3, #2
 800d116:	4413      	add	r3, r2
 800d118:	881b      	ldrh	r3, [r3, #0]
 800d11a:	82fb      	strh	r3, [r7, #22]
 800d11c:	8afb      	ldrh	r3, [r7, #22]
 800d11e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d122:	2b00      	cmp	r3, #0
 800d124:	d01b      	beq.n	800d15e <USB_EPClearStall+0xfc>
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	009b      	lsls	r3, r3, #2
 800d12e:	4413      	add	r3, r2
 800d130:	881b      	ldrh	r3, [r3, #0]
 800d132:	b29b      	uxth	r3, r3
 800d134:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d138:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d13c:	82bb      	strh	r3, [r7, #20]
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	009b      	lsls	r3, r3, #2
 800d146:	441a      	add	r2, r3
 800d148:	8abb      	ldrh	r3, [r7, #20]
 800d14a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d14e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d152:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	4413      	add	r3, r2
 800d168:	881b      	ldrh	r3, [r3, #0]
 800d16a:	b29b      	uxth	r3, r3
 800d16c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d170:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d174:	827b      	strh	r3, [r7, #18]
 800d176:	8a7b      	ldrh	r3, [r7, #18]
 800d178:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d17c:	827b      	strh	r3, [r7, #18]
 800d17e:	8a7b      	ldrh	r3, [r7, #18]
 800d180:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d184:	827b      	strh	r3, [r7, #18]
 800d186:	687a      	ldr	r2, [r7, #4]
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	009b      	lsls	r3, r3, #2
 800d18e:	441a      	add	r2, r3
 800d190:	8a7b      	ldrh	r3, [r7, #18]
 800d192:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d196:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d19a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d19e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d1a6:	2300      	movs	r3, #0
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	371c      	adds	r7, #28
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b2:	4770      	bx	lr

0800d1b4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	460b      	mov	r3, r1
 800d1be:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d1c0:	78fb      	ldrb	r3, [r7, #3]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d103      	bne.n	800d1ce <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2280      	movs	r2, #128	@ 0x80
 800d1ca:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d1ce:	2300      	movs	r3, #0
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	370c      	adds	r7, #12
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr

0800d1dc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b083      	sub	sp, #12
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1f4:	b29a      	uxth	r2, r3
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d1fc:	2300      	movs	r3, #0
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	370c      	adds	r7, #12
 800d202:	46bd      	mov	sp, r7
 800d204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d208:	4770      	bx	lr

0800d20a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800d20a:	b480      	push	{r7}
 800d20c:	b085      	sub	sp, #20
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d218:	b29b      	uxth	r3, r3
 800d21a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d21c:	68fb      	ldr	r3, [r7, #12]
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3714      	adds	r7, #20
 800d222:	46bd      	mov	sp, r7
 800d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d228:	4770      	bx	lr

0800d22a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d22a:	b480      	push	{r7}
 800d22c:	b08b      	sub	sp, #44	@ 0x2c
 800d22e:	af00      	add	r7, sp, #0
 800d230:	60f8      	str	r0, [r7, #12]
 800d232:	60b9      	str	r1, [r7, #8]
 800d234:	4611      	mov	r1, r2
 800d236:	461a      	mov	r2, r3
 800d238:	460b      	mov	r3, r1
 800d23a:	80fb      	strh	r3, [r7, #6]
 800d23c:	4613      	mov	r3, r2
 800d23e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d240:	88bb      	ldrh	r3, [r7, #4]
 800d242:	3301      	adds	r3, #1
 800d244:	085b      	lsrs	r3, r3, #1
 800d246:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d250:	88fa      	ldrh	r2, [r7, #6]
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	4413      	add	r3, r2
 800d256:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d25a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d260:	e01b      	b.n	800d29a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	3301      	adds	r3, #1
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	021b      	lsls	r3, r3, #8
 800d270:	b21a      	sxth	r2, r3
 800d272:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d276:	4313      	orrs	r3, r2
 800d278:	b21b      	sxth	r3, r3
 800d27a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d27c:	6a3b      	ldr	r3, [r7, #32]
 800d27e:	8a7a      	ldrh	r2, [r7, #18]
 800d280:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d282:	6a3b      	ldr	r3, [r7, #32]
 800d284:	3302      	adds	r3, #2
 800d286:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d288:	69fb      	ldr	r3, [r7, #28]
 800d28a:	3301      	adds	r3, #1
 800d28c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	3301      	adds	r3, #1
 800d292:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d296:	3b01      	subs	r3, #1
 800d298:	627b      	str	r3, [r7, #36]	@ 0x24
 800d29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d1e0      	bne.n	800d262 <USB_WritePMA+0x38>
  }
}
 800d2a0:	bf00      	nop
 800d2a2:	bf00      	nop
 800d2a4:	372c      	adds	r7, #44	@ 0x2c
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr

0800d2ae <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d2ae:	b480      	push	{r7}
 800d2b0:	b08b      	sub	sp, #44	@ 0x2c
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	60f8      	str	r0, [r7, #12]
 800d2b6:	60b9      	str	r1, [r7, #8]
 800d2b8:	4611      	mov	r1, r2
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	460b      	mov	r3, r1
 800d2be:	80fb      	strh	r3, [r7, #6]
 800d2c0:	4613      	mov	r3, r2
 800d2c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d2c4:	88bb      	ldrh	r3, [r7, #4]
 800d2c6:	085b      	lsrs	r3, r3, #1
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d2d4:	88fa      	ldrh	r2, [r7, #6]
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	4413      	add	r3, r2
 800d2da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d2de:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d2e0:	69bb      	ldr	r3, [r7, #24]
 800d2e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d2e4:	e018      	b.n	800d318 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d2e6:	6a3b      	ldr	r3, [r7, #32]
 800d2e8:	881b      	ldrh	r3, [r3, #0]
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d2ee:	6a3b      	ldr	r3, [r7, #32]
 800d2f0:	3302      	adds	r3, #2
 800d2f2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	b2da      	uxtb	r2, r3
 800d2f8:	69fb      	ldr	r3, [r7, #28]
 800d2fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d2fc:	69fb      	ldr	r3, [r7, #28]
 800d2fe:	3301      	adds	r3, #1
 800d300:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	0a1b      	lsrs	r3, r3, #8
 800d306:	b2da      	uxtb	r2, r3
 800d308:	69fb      	ldr	r3, [r7, #28]
 800d30a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d30c:	69fb      	ldr	r3, [r7, #28]
 800d30e:	3301      	adds	r3, #1
 800d310:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d314:	3b01      	subs	r3, #1
 800d316:	627b      	str	r3, [r7, #36]	@ 0x24
 800d318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1e3      	bne.n	800d2e6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d31e:	88bb      	ldrh	r3, [r7, #4]
 800d320:	f003 0301 	and.w	r3, r3, #1
 800d324:	b29b      	uxth	r3, r3
 800d326:	2b00      	cmp	r3, #0
 800d328:	d007      	beq.n	800d33a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800d32a:	6a3b      	ldr	r3, [r7, #32]
 800d32c:	881b      	ldrh	r3, [r3, #0]
 800d32e:	b29b      	uxth	r3, r3
 800d330:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	b2da      	uxtb	r2, r3
 800d336:	69fb      	ldr	r3, [r7, #28]
 800d338:	701a      	strb	r2, [r3, #0]
  }
}
 800d33a:	bf00      	nop
 800d33c:	372c      	adds	r7, #44	@ 0x2c
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr

0800d346 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d346:	b580      	push	{r7, lr}
 800d348:	b084      	sub	sp, #16
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	6078      	str	r0, [r7, #4]
 800d34e:	460b      	mov	r3, r1
 800d350:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d352:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d356:	f005 ff6f 	bl	8013238 <USBD_static_malloc>
 800d35a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d105      	bne.n	800d36e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2200      	movs	r2, #0
 800d366:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800d36a:	2302      	movs	r3, #2
 800d36c:	e066      	b.n	800d43c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	68fa      	ldr	r2, [r7, #12]
 800d372:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	7c1b      	ldrb	r3, [r3, #16]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d119      	bne.n	800d3b2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d37e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d382:	2202      	movs	r2, #2
 800d384:	2181      	movs	r1, #129	@ 0x81
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f005 fdfd 	bl	8012f86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2201      	movs	r2, #1
 800d390:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d392:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d396:	2202      	movs	r2, #2
 800d398:	2101      	movs	r1, #1
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f005 fdf3 	bl	8012f86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2210      	movs	r2, #16
 800d3ac:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800d3b0:	e016      	b.n	800d3e0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d3b2:	2340      	movs	r3, #64	@ 0x40
 800d3b4:	2202      	movs	r2, #2
 800d3b6:	2181      	movs	r1, #129	@ 0x81
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f005 fde4 	bl	8012f86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d3c4:	2340      	movs	r3, #64	@ 0x40
 800d3c6:	2202      	movs	r2, #2
 800d3c8:	2101      	movs	r1, #1
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f005 fddb 	bl	8012f86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2210      	movs	r2, #16
 800d3dc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d3e0:	2308      	movs	r3, #8
 800d3e2:	2203      	movs	r2, #3
 800d3e4:	2182      	movs	r1, #130	@ 0x82
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f005 fdcd 	bl	8012f86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2200      	movs	r2, #0
 800d402:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2200      	movs	r2, #0
 800d40a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	7c1b      	ldrb	r3, [r3, #16]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d109      	bne.n	800d42a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d41c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d420:	2101      	movs	r1, #1
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f005 fe9e 	bl	8013164 <USBD_LL_PrepareReceive>
 800d428:	e007      	b.n	800d43a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d430:	2340      	movs	r3, #64	@ 0x40
 800d432:	2101      	movs	r1, #1
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f005 fe95 	bl	8013164 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d43a:	2300      	movs	r3, #0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3710      	adds	r7, #16
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	460b      	mov	r3, r1
 800d44e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d450:	2181      	movs	r1, #129	@ 0x81
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f005 fdbd 	bl	8012fd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2200      	movs	r2, #0
 800d45c:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d45e:	2101      	movs	r1, #1
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f005 fdb6 	bl	8012fd2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2200      	movs	r2, #0
 800d46a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d46e:	2182      	movs	r1, #130	@ 0x82
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f005 fdae 	bl	8012fd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2200      	movs	r2, #0
 800d482:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00e      	beq.n	800d4ae <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f005 fed7 	bl	8013254 <USBD_static_free>
    pdev->pClassData = NULL;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d4ae:	2300      	movs	r3, #0
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3708      	adds	r7, #8
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b086      	sub	sp, #24
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d4c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d101      	bne.n	800d4e0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d4dc:	2303      	movs	r3, #3
 800d4de:	e0af      	b.n	800d640 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d03f      	beq.n	800d56c <USBD_CDC_Setup+0xb4>
 800d4ec:	2b20      	cmp	r3, #32
 800d4ee:	f040 809f 	bne.w	800d630 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	88db      	ldrh	r3, [r3, #6]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d02e      	beq.n	800d558 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	781b      	ldrb	r3, [r3, #0]
 800d4fe:	b25b      	sxtb	r3, r3
 800d500:	2b00      	cmp	r3, #0
 800d502:	da16      	bge.n	800d532 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d50a:	689b      	ldr	r3, [r3, #8]
 800d50c:	683a      	ldr	r2, [r7, #0]
 800d50e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d510:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d512:	683a      	ldr	r2, [r7, #0]
 800d514:	88d2      	ldrh	r2, [r2, #6]
 800d516:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	88db      	ldrh	r3, [r3, #6]
 800d51c:	2b07      	cmp	r3, #7
 800d51e:	bf28      	it	cs
 800d520:	2307      	movcs	r3, #7
 800d522:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	89fa      	ldrh	r2, [r7, #14]
 800d528:	4619      	mov	r1, r3
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f001 facd 	bl	800eaca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d530:	e085      	b.n	800d63e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	785a      	ldrb	r2, [r3, #1]
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	88db      	ldrh	r3, [r3, #6]
 800d540:	b2da      	uxtb	r2, r3
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d548:	6939      	ldr	r1, [r7, #16]
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	88db      	ldrh	r3, [r3, #6]
 800d54e:	461a      	mov	r2, r3
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f001 fae6 	bl	800eb22 <USBD_CtlPrepareRx>
      break;
 800d556:	e072      	b.n	800d63e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	683a      	ldr	r2, [r7, #0]
 800d562:	7850      	ldrb	r0, [r2, #1]
 800d564:	2200      	movs	r2, #0
 800d566:	6839      	ldr	r1, [r7, #0]
 800d568:	4798      	blx	r3
      break;
 800d56a:	e068      	b.n	800d63e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	785b      	ldrb	r3, [r3, #1]
 800d570:	2b0b      	cmp	r3, #11
 800d572:	d852      	bhi.n	800d61a <USBD_CDC_Setup+0x162>
 800d574:	a201      	add	r2, pc, #4	@ (adr r2, 800d57c <USBD_CDC_Setup+0xc4>)
 800d576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d57a:	bf00      	nop
 800d57c:	0800d5ad 	.word	0x0800d5ad
 800d580:	0800d629 	.word	0x0800d629
 800d584:	0800d61b 	.word	0x0800d61b
 800d588:	0800d61b 	.word	0x0800d61b
 800d58c:	0800d61b 	.word	0x0800d61b
 800d590:	0800d61b 	.word	0x0800d61b
 800d594:	0800d61b 	.word	0x0800d61b
 800d598:	0800d61b 	.word	0x0800d61b
 800d59c:	0800d61b 	.word	0x0800d61b
 800d5a0:	0800d61b 	.word	0x0800d61b
 800d5a4:	0800d5d7 	.word	0x0800d5d7
 800d5a8:	0800d601 	.word	0x0800d601
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	2b03      	cmp	r3, #3
 800d5b6:	d107      	bne.n	800d5c8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d5b8:	f107 030a 	add.w	r3, r7, #10
 800d5bc:	2202      	movs	r2, #2
 800d5be:	4619      	mov	r1, r3
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f001 fa82 	bl	800eaca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d5c6:	e032      	b.n	800d62e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d5c8:	6839      	ldr	r1, [r7, #0]
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f001 fa0c 	bl	800e9e8 <USBD_CtlError>
            ret = USBD_FAIL;
 800d5d0:	2303      	movs	r3, #3
 800d5d2:	75fb      	strb	r3, [r7, #23]
          break;
 800d5d4:	e02b      	b.n	800d62e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	2b03      	cmp	r3, #3
 800d5e0:	d107      	bne.n	800d5f2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d5e2:	f107 030d 	add.w	r3, r7, #13
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f001 fa6d 	bl	800eaca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d5f0:	e01d      	b.n	800d62e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d5f2:	6839      	ldr	r1, [r7, #0]
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f001 f9f7 	bl	800e9e8 <USBD_CtlError>
            ret = USBD_FAIL;
 800d5fa:	2303      	movs	r3, #3
 800d5fc:	75fb      	strb	r3, [r7, #23]
          break;
 800d5fe:	e016      	b.n	800d62e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d606:	b2db      	uxtb	r3, r3
 800d608:	2b03      	cmp	r3, #3
 800d60a:	d00f      	beq.n	800d62c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d60c:	6839      	ldr	r1, [r7, #0]
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f001 f9ea 	bl	800e9e8 <USBD_CtlError>
            ret = USBD_FAIL;
 800d614:	2303      	movs	r3, #3
 800d616:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d618:	e008      	b.n	800d62c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d61a:	6839      	ldr	r1, [r7, #0]
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f001 f9e3 	bl	800e9e8 <USBD_CtlError>
          ret = USBD_FAIL;
 800d622:	2303      	movs	r3, #3
 800d624:	75fb      	strb	r3, [r7, #23]
          break;
 800d626:	e002      	b.n	800d62e <USBD_CDC_Setup+0x176>
          break;
 800d628:	bf00      	nop
 800d62a:	e008      	b.n	800d63e <USBD_CDC_Setup+0x186>
          break;
 800d62c:	bf00      	nop
      }
      break;
 800d62e:	e006      	b.n	800d63e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d630:	6839      	ldr	r1, [r7, #0]
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f001 f9d8 	bl	800e9e8 <USBD_CtlError>
      ret = USBD_FAIL;
 800d638:	2303      	movs	r3, #3
 800d63a:	75fb      	strb	r3, [r7, #23]
      break;
 800d63c:	bf00      	nop
  }

  return (uint8_t)ret;
 800d63e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d640:	4618      	mov	r0, r3
 800d642:	3718      	adds	r7, #24
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b084      	sub	sp, #16
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	460b      	mov	r3, r1
 800d652:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d65a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d662:	2b00      	cmp	r3, #0
 800d664:	d101      	bne.n	800d66a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d666:	2303      	movs	r3, #3
 800d668:	e04f      	b.n	800d70a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d670:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d672:	78fa      	ldrb	r2, [r7, #3]
 800d674:	6879      	ldr	r1, [r7, #4]
 800d676:	4613      	mov	r3, r2
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	4413      	add	r3, r2
 800d67c:	009b      	lsls	r3, r3, #2
 800d67e:	440b      	add	r3, r1
 800d680:	3318      	adds	r3, #24
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d029      	beq.n	800d6dc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d688:	78fa      	ldrb	r2, [r7, #3]
 800d68a:	6879      	ldr	r1, [r7, #4]
 800d68c:	4613      	mov	r3, r2
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	4413      	add	r3, r2
 800d692:	009b      	lsls	r3, r3, #2
 800d694:	440b      	add	r3, r1
 800d696:	3318      	adds	r3, #24
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	78f9      	ldrb	r1, [r7, #3]
 800d69c:	68f8      	ldr	r0, [r7, #12]
 800d69e:	460b      	mov	r3, r1
 800d6a0:	009b      	lsls	r3, r3, #2
 800d6a2:	440b      	add	r3, r1
 800d6a4:	00db      	lsls	r3, r3, #3
 800d6a6:	4403      	add	r3, r0
 800d6a8:	3320      	adds	r3, #32
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	fbb2 f1f3 	udiv	r1, r2, r3
 800d6b0:	fb01 f303 	mul.w	r3, r1, r3
 800d6b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d110      	bne.n	800d6dc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d6ba:	78fa      	ldrb	r2, [r7, #3]
 800d6bc:	6879      	ldr	r1, [r7, #4]
 800d6be:	4613      	mov	r3, r2
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	4413      	add	r3, r2
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	440b      	add	r3, r1
 800d6c8:	3318      	adds	r3, #24
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d6ce:	78f9      	ldrb	r1, [r7, #3]
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f005 fd24 	bl	8013122 <USBD_LL_Transmit>
 800d6da:	e015      	b.n	800d708 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d6ea:	691b      	ldr	r3, [r3, #16]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d00b      	beq.n	800d708 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d6f6:	691b      	ldr	r3, [r3, #16]
 800d6f8:	68ba      	ldr	r2, [r7, #8]
 800d6fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d6fe:	68ba      	ldr	r2, [r7, #8]
 800d700:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d704:	78fa      	ldrb	r2, [r7, #3]
 800d706:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d708:	2300      	movs	r3, #0
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3710      	adds	r7, #16
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}

0800d712 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d712:	b580      	push	{r7, lr}
 800d714:	b084      	sub	sp, #16
 800d716:	af00      	add	r7, sp, #0
 800d718:	6078      	str	r0, [r7, #4]
 800d71a:	460b      	mov	r3, r1
 800d71c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d724:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d101      	bne.n	800d734 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d730:	2303      	movs	r3, #3
 800d732:	e015      	b.n	800d760 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d734:	78fb      	ldrb	r3, [r7, #3]
 800d736:	4619      	mov	r1, r3
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f005 fd34 	bl	80131a6 <USBD_LL_GetRxDataSize>
 800d73e:	4602      	mov	r2, r0
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d74c:	68db      	ldr	r3, [r3, #12]
 800d74e:	68fa      	ldr	r2, [r7, #12]
 800d750:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d754:	68fa      	ldr	r2, [r7, #12]
 800d756:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d75a:	4611      	mov	r1, r2
 800d75c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d75e:	2300      	movs	r3, #0
}
 800d760:	4618      	mov	r0, r3
 800d762:	3710      	adds	r7, #16
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d776:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d101      	bne.n	800d782 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d77e:	2303      	movs	r3, #3
 800d780:	e01a      	b.n	800d7b8 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d014      	beq.n	800d7b6 <USBD_CDC_EP0_RxReady+0x4e>
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d792:	2bff      	cmp	r3, #255	@ 0xff
 800d794:	d00f      	beq.n	800d7b6 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d79c:	689b      	ldr	r3, [r3, #8]
 800d79e:	68fa      	ldr	r2, [r7, #12]
 800d7a0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800d7a4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d7a6:	68fa      	ldr	r2, [r7, #12]
 800d7a8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d7ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	22ff      	movs	r2, #255	@ 0xff
 800d7b2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d7b6:	2300      	movs	r3, #0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3710      	adds	r7, #16
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2243      	movs	r2, #67	@ 0x43
 800d7cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d7ce:	4b03      	ldr	r3, [pc, #12]	@ (800d7dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	370c      	adds	r7, #12
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr
 800d7dc:	200000a4 	.word	0x200000a4

0800d7e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b083      	sub	sp, #12
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2243      	movs	r2, #67	@ 0x43
 800d7ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d7ee:	4b03      	ldr	r3, [pc, #12]	@ (800d7fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr
 800d7fc:	20000060 	.word	0x20000060

0800d800 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d800:	b480      	push	{r7}
 800d802:	b083      	sub	sp, #12
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2243      	movs	r2, #67	@ 0x43
 800d80c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d80e:	4b03      	ldr	r3, [pc, #12]	@ (800d81c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d810:	4618      	mov	r0, r3
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr
 800d81c:	200000e8 	.word	0x200000e8

0800d820 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d820:	b480      	push	{r7}
 800d822:	b083      	sub	sp, #12
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	220a      	movs	r2, #10
 800d82c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d82e:	4b03      	ldr	r3, [pc, #12]	@ (800d83c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d830:	4618      	mov	r0, r3
 800d832:	370c      	adds	r7, #12
 800d834:	46bd      	mov	sp, r7
 800d836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83a:	4770      	bx	lr
 800d83c:	2000001c 	.word	0x2000001c

0800d840 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d840:	b480      	push	{r7}
 800d842:	b083      	sub	sp, #12
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d101      	bne.n	800d854 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d850:	2303      	movs	r3, #3
 800d852:	e004      	b.n	800d85e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	683a      	ldr	r2, [r7, #0]
 800d858:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800d85c:	2300      	movs	r3, #0
}
 800d85e:	4618      	mov	r0, r3
 800d860:	370c      	adds	r7, #12
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr

0800d86a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d86a:	b480      	push	{r7}
 800d86c:	b087      	sub	sp, #28
 800d86e:	af00      	add	r7, sp, #0
 800d870:	60f8      	str	r0, [r7, #12]
 800d872:	60b9      	str	r1, [r7, #8]
 800d874:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d87c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d101      	bne.n	800d888 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d884:	2303      	movs	r3, #3
 800d886:	e008      	b.n	800d89a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	68ba      	ldr	r2, [r7, #8]
 800d88c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d898:	2300      	movs	r3, #0
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	371c      	adds	r7, #28
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a4:	4770      	bx	lr

0800d8a6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d8a6:	b480      	push	{r7}
 800d8a8:	b085      	sub	sp, #20
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
 800d8ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d8b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d101      	bne.n	800d8c2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d8be:	2303      	movs	r3, #3
 800d8c0:	e004      	b.n	800d8cc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	683a      	ldr	r2, [r7, #0]
 800d8c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d8ca:	2300      	movs	r3, #0
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3714      	adds	r7, #20
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b084      	sub	sp, #16
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d8e6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d101      	bne.n	800d8fa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d8f6:	2303      	movs	r3, #3
 800d8f8:	e01a      	b.n	800d930 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d900:	2b00      	cmp	r3, #0
 800d902:	d114      	bne.n	800d92e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	2201      	movs	r2, #1
 800d908:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d922:	2181      	movs	r1, #129	@ 0x81
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f005 fbfc 	bl	8013122 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d92a:	2300      	movs	r3, #0
 800d92c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d92e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d930:	4618      	mov	r0, r3
 800d932:	3710      	adds	r7, #16
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d946:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d101      	bne.n	800d956 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d952:	2303      	movs	r3, #3
 800d954:	e016      	b.n	800d984 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	7c1b      	ldrb	r3, [r3, #16]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d109      	bne.n	800d972 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d964:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d968:	2101      	movs	r1, #1
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f005 fbfa 	bl	8013164 <USBD_LL_PrepareReceive>
 800d970:	e007      	b.n	800d982 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d978:	2340      	movs	r3, #64	@ 0x40
 800d97a:	2101      	movs	r1, #1
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f005 fbf1 	bl	8013164 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d982:	2300      	movs	r3, #0
}
 800d984:	4618      	mov	r0, r3
 800d986:	3710      	adds	r7, #16
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b086      	sub	sp, #24
 800d990:	af00      	add	r7, sp, #0
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	4613      	mov	r3, r2
 800d998:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d101      	bne.n	800d9a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d9a0:	2303      	movs	r3, #3
 800d9a2:	e01f      	b.n	800d9e4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d003      	beq.n	800d9ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	68ba      	ldr	r2, [r7, #8]
 800d9c6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	79fa      	ldrb	r2, [r7, #7]
 800d9d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f005 fa59 	bl	8012e90 <USBD_LL_Init>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d9e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3718      	adds	r7, #24
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}

0800d9ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d101      	bne.n	800da04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800da00:	2303      	movs	r3, #3
 800da02:	e016      	b.n	800da32 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	683a      	ldr	r2, [r7, #0]
 800da08:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da14:	2b00      	cmp	r3, #0
 800da16:	d00b      	beq.n	800da30 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da20:	f107 020e 	add.w	r2, r7, #14
 800da24:	4610      	mov	r0, r2
 800da26:	4798      	blx	r3
 800da28:	4602      	mov	r2, r0
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	3710      	adds	r7, #16
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b082      	sub	sp, #8
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f005 fa84 	bl	8012f50 <USBD_LL_Start>
 800da48:	4603      	mov	r3, r0
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3708      	adds	r7, #8
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}

0800da52 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800da52:	b480      	push	{r7}
 800da54:	b083      	sub	sp, #12
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800da5a:	2300      	movs	r3, #0
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	370c      	adds	r7, #12
 800da60:	46bd      	mov	sp, r7
 800da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da66:	4770      	bx	lr

0800da68 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	460b      	mov	r3, r1
 800da72:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800da74:	2303      	movs	r3, #3
 800da76:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d009      	beq.n	800da96 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	78fa      	ldrb	r2, [r7, #3]
 800da8c:	4611      	mov	r1, r2
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	4798      	blx	r3
 800da92:	4603      	mov	r3, r0
 800da94:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800da96:	7bfb      	ldrb	r3, [r7, #15]
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3710      	adds	r7, #16
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	460b      	mov	r3, r1
 800daaa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d007      	beq.n	800dac6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	78fa      	ldrb	r2, [r7, #3]
 800dac0:	4611      	mov	r1, r2
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	4798      	blx	r3
  }

  return USBD_OK;
 800dac6:	2300      	movs	r3, #0
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3708      	adds	r7, #8
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dae0:	6839      	ldr	r1, [r7, #0]
 800dae2:	4618      	mov	r0, r3
 800dae4:	f000 ff46 	bl	800e974 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2201      	movs	r2, #1
 800daec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800daf6:	461a      	mov	r2, r3
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800db04:	f003 031f 	and.w	r3, r3, #31
 800db08:	2b02      	cmp	r3, #2
 800db0a:	d01a      	beq.n	800db42 <USBD_LL_SetupStage+0x72>
 800db0c:	2b02      	cmp	r3, #2
 800db0e:	d822      	bhi.n	800db56 <USBD_LL_SetupStage+0x86>
 800db10:	2b00      	cmp	r3, #0
 800db12:	d002      	beq.n	800db1a <USBD_LL_SetupStage+0x4a>
 800db14:	2b01      	cmp	r3, #1
 800db16:	d00a      	beq.n	800db2e <USBD_LL_SetupStage+0x5e>
 800db18:	e01d      	b.n	800db56 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800db20:	4619      	mov	r1, r3
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f000 f9ee 	bl	800df04 <USBD_StdDevReq>
 800db28:	4603      	mov	r3, r0
 800db2a:	73fb      	strb	r3, [r7, #15]
      break;
 800db2c:	e020      	b.n	800db70 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800db34:	4619      	mov	r1, r3
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f000 fa52 	bl	800dfe0 <USBD_StdItfReq>
 800db3c:	4603      	mov	r3, r0
 800db3e:	73fb      	strb	r3, [r7, #15]
      break;
 800db40:	e016      	b.n	800db70 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800db48:	4619      	mov	r1, r3
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f000 fa91 	bl	800e072 <USBD_StdEPReq>
 800db50:	4603      	mov	r3, r0
 800db52:	73fb      	strb	r3, [r7, #15]
      break;
 800db54:	e00c      	b.n	800db70 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800db5c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800db60:	b2db      	uxtb	r3, r3
 800db62:	4619      	mov	r1, r3
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f005 fa53 	bl	8013010 <USBD_LL_StallEP>
 800db6a:	4603      	mov	r3, r0
 800db6c:	73fb      	strb	r3, [r7, #15]
      break;
 800db6e:	bf00      	nop
  }

  return ret;
 800db70:	7bfb      	ldrb	r3, [r7, #15]
}
 800db72:	4618      	mov	r0, r3
 800db74:	3710      	adds	r7, #16
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}

0800db7a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800db7a:	b580      	push	{r7, lr}
 800db7c:	b086      	sub	sp, #24
 800db7e:	af00      	add	r7, sp, #0
 800db80:	60f8      	str	r0, [r7, #12]
 800db82:	460b      	mov	r3, r1
 800db84:	607a      	str	r2, [r7, #4]
 800db86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800db88:	7afb      	ldrb	r3, [r7, #11]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d138      	bne.n	800dc00 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800db94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800db9c:	2b03      	cmp	r3, #3
 800db9e:	d14a      	bne.n	800dc36 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	689a      	ldr	r2, [r3, #8]
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d913      	bls.n	800dbd4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	689a      	ldr	r2, [r3, #8]
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	68db      	ldr	r3, [r3, #12]
 800dbb4:	1ad2      	subs	r2, r2, r3
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	68da      	ldr	r2, [r3, #12]
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	689b      	ldr	r3, [r3, #8]
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	bf28      	it	cs
 800dbc6:	4613      	movcs	r3, r2
 800dbc8:	461a      	mov	r2, r3
 800dbca:	6879      	ldr	r1, [r7, #4]
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	f000 ffc5 	bl	800eb5c <USBD_CtlContinueRx>
 800dbd2:	e030      	b.n	800dc36 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbda:	b2db      	uxtb	r3, r3
 800dbdc:	2b03      	cmp	r3, #3
 800dbde:	d10b      	bne.n	800dbf8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbe6:	691b      	ldr	r3, [r3, #16]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d005      	beq.n	800dbf8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbf2:	691b      	ldr	r3, [r3, #16]
 800dbf4:	68f8      	ldr	r0, [r7, #12]
 800dbf6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	f000 ffc0 	bl	800eb7e <USBD_CtlSendStatus>
 800dbfe:	e01a      	b.n	800dc36 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc06:	b2db      	uxtb	r3, r3
 800dc08:	2b03      	cmp	r3, #3
 800dc0a:	d114      	bne.n	800dc36 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc12:	699b      	ldr	r3, [r3, #24]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d00e      	beq.n	800dc36 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc1e:	699b      	ldr	r3, [r3, #24]
 800dc20:	7afa      	ldrb	r2, [r7, #11]
 800dc22:	4611      	mov	r1, r2
 800dc24:	68f8      	ldr	r0, [r7, #12]
 800dc26:	4798      	blx	r3
 800dc28:	4603      	mov	r3, r0
 800dc2a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800dc2c:	7dfb      	ldrb	r3, [r7, #23]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d001      	beq.n	800dc36 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800dc32:	7dfb      	ldrb	r3, [r7, #23]
 800dc34:	e000      	b.n	800dc38 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800dc36:	2300      	movs	r3, #0
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3718      	adds	r7, #24
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b086      	sub	sp, #24
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	460b      	mov	r3, r1
 800dc4a:	607a      	str	r2, [r7, #4]
 800dc4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dc4e:	7afb      	ldrb	r3, [r7, #11]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d16b      	bne.n	800dd2c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	3314      	adds	r3, #20
 800dc58:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800dc60:	2b02      	cmp	r3, #2
 800dc62:	d156      	bne.n	800dd12 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	689a      	ldr	r2, [r3, #8]
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	68db      	ldr	r3, [r3, #12]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d914      	bls.n	800dc9a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	689a      	ldr	r2, [r3, #8]
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	68db      	ldr	r3, [r3, #12]
 800dc78:	1ad2      	subs	r2, r2, r3
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	689b      	ldr	r3, [r3, #8]
 800dc82:	461a      	mov	r2, r3
 800dc84:	6879      	ldr	r1, [r7, #4]
 800dc86:	68f8      	ldr	r0, [r7, #12]
 800dc88:	f000 ff3a 	bl	800eb00 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	2200      	movs	r2, #0
 800dc90:	2100      	movs	r1, #0
 800dc92:	68f8      	ldr	r0, [r7, #12]
 800dc94:	f005 fa66 	bl	8013164 <USBD_LL_PrepareReceive>
 800dc98:	e03b      	b.n	800dd12 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	68da      	ldr	r2, [r3, #12]
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	689b      	ldr	r3, [r3, #8]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d11c      	bne.n	800dce0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	685a      	ldr	r2, [r3, #4]
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d316      	bcc.n	800dce0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	685a      	ldr	r2, [r3, #4]
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d20f      	bcs.n	800dce0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	2100      	movs	r1, #0
 800dcc4:	68f8      	ldr	r0, [r7, #12]
 800dcc6:	f000 ff1b 	bl	800eb00 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2200      	movs	r2, #0
 800dcce:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	68f8      	ldr	r0, [r7, #12]
 800dcda:	f005 fa43 	bl	8013164 <USBD_LL_PrepareReceive>
 800dcde:	e018      	b.n	800dd12 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	2b03      	cmp	r3, #3
 800dcea:	d10b      	bne.n	800dd04 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcf2:	68db      	ldr	r3, [r3, #12]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d005      	beq.n	800dd04 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcfe:	68db      	ldr	r3, [r3, #12]
 800dd00:	68f8      	ldr	r0, [r7, #12]
 800dd02:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd04:	2180      	movs	r1, #128	@ 0x80
 800dd06:	68f8      	ldr	r0, [r7, #12]
 800dd08:	f005 f982 	bl	8013010 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dd0c:	68f8      	ldr	r0, [r7, #12]
 800dd0e:	f000 ff49 	bl	800eba4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d122      	bne.n	800dd62 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800dd1c:	68f8      	ldr	r0, [r7, #12]
 800dd1e:	f7ff fe98 	bl	800da52 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2200      	movs	r2, #0
 800dd26:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800dd2a:	e01a      	b.n	800dd62 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	2b03      	cmp	r3, #3
 800dd36:	d114      	bne.n	800dd62 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd3e:	695b      	ldr	r3, [r3, #20]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d00e      	beq.n	800dd62 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd4a:	695b      	ldr	r3, [r3, #20]
 800dd4c:	7afa      	ldrb	r2, [r7, #11]
 800dd4e:	4611      	mov	r1, r2
 800dd50:	68f8      	ldr	r0, [r7, #12]
 800dd52:	4798      	blx	r3
 800dd54:	4603      	mov	r3, r0
 800dd56:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800dd58:	7dfb      	ldrb	r3, [r7, #23]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d001      	beq.n	800dd62 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800dd5e:	7dfb      	ldrb	r3, [r7, #23]
 800dd60:	e000      	b.n	800dd64 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800dd62:	2300      	movs	r3, #0
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3718      	adds	r7, #24
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b082      	sub	sp, #8
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2201      	movs	r2, #1
 800dd78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2200      	movs	r2, #0
 800dd88:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d101      	bne.n	800dda0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800dd9c:	2303      	movs	r3, #3
 800dd9e:	e02f      	b.n	800de00 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d00f      	beq.n	800ddca <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ddb0:	685b      	ldr	r3, [r3, #4]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d009      	beq.n	800ddca <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	687a      	ldr	r2, [r7, #4]
 800ddc0:	6852      	ldr	r2, [r2, #4]
 800ddc2:	b2d2      	uxtb	r2, r2
 800ddc4:	4611      	mov	r1, r2
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ddca:	2340      	movs	r3, #64	@ 0x40
 800ddcc:	2200      	movs	r2, #0
 800ddce:	2100      	movs	r1, #0
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f005 f8d8 	bl	8012f86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2201      	movs	r2, #1
 800ddda:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2240      	movs	r2, #64	@ 0x40
 800dde2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dde6:	2340      	movs	r3, #64	@ 0x40
 800dde8:	2200      	movs	r2, #0
 800ddea:	2180      	movs	r1, #128	@ 0x80
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f005 f8ca 	bl	8012f86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2240      	movs	r2, #64	@ 0x40
 800ddfc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ddfe:	2300      	movs	r3, #0
}
 800de00:	4618      	mov	r0, r3
 800de02:	3708      	adds	r7, #8
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800de08:	b480      	push	{r7}
 800de0a:	b083      	sub	sp, #12
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	460b      	mov	r3, r1
 800de12:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	78fa      	ldrb	r2, [r7, #3]
 800de18:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800de1a:	2300      	movs	r3, #0
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	370c      	adds	r7, #12
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr

0800de28 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800de28:	b480      	push	{r7}
 800de2a:	b083      	sub	sp, #12
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de36:	b2da      	uxtb	r2, r3
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2204      	movs	r2, #4
 800de42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800de46:	2300      	movs	r3, #0
}
 800de48:	4618      	mov	r0, r3
 800de4a:	370c      	adds	r7, #12
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	4770      	bx	lr

0800de54 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de62:	b2db      	uxtb	r3, r3
 800de64:	2b04      	cmp	r3, #4
 800de66:	d106      	bne.n	800de76 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800de6e:	b2da      	uxtb	r2, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800de76:	2300      	movs	r3, #0
}
 800de78:	4618      	mov	r0, r3
 800de7a:	370c      	adds	r7, #12
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de92:	2b00      	cmp	r3, #0
 800de94:	d101      	bne.n	800de9a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800de96:	2303      	movs	r3, #3
 800de98:	e012      	b.n	800dec0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	2b03      	cmp	r3, #3
 800dea4:	d10b      	bne.n	800debe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800deac:	69db      	ldr	r3, [r3, #28]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d005      	beq.n	800debe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800deb8:	69db      	ldr	r3, [r3, #28]
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800debe:	2300      	movs	r3, #0
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3708      	adds	r7, #8
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}

0800dec8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dec8:	b480      	push	{r7}
 800deca:	b087      	sub	sp, #28
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	3301      	adds	r3, #1
 800dede:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dee6:	8a3b      	ldrh	r3, [r7, #16]
 800dee8:	021b      	lsls	r3, r3, #8
 800deea:	b21a      	sxth	r2, r3
 800deec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800def0:	4313      	orrs	r3, r2
 800def2:	b21b      	sxth	r3, r3
 800def4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800def6:	89fb      	ldrh	r3, [r7, #14]
}
 800def8:	4618      	mov	r0, r3
 800defa:	371c      	adds	r7, #28
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr

0800df04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df0e:	2300      	movs	r3, #0
 800df10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800df1a:	2b40      	cmp	r3, #64	@ 0x40
 800df1c:	d005      	beq.n	800df2a <USBD_StdDevReq+0x26>
 800df1e:	2b40      	cmp	r3, #64	@ 0x40
 800df20:	d853      	bhi.n	800dfca <USBD_StdDevReq+0xc6>
 800df22:	2b00      	cmp	r3, #0
 800df24:	d00b      	beq.n	800df3e <USBD_StdDevReq+0x3a>
 800df26:	2b20      	cmp	r3, #32
 800df28:	d14f      	bne.n	800dfca <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df30:	689b      	ldr	r3, [r3, #8]
 800df32:	6839      	ldr	r1, [r7, #0]
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	4798      	blx	r3
 800df38:	4603      	mov	r3, r0
 800df3a:	73fb      	strb	r3, [r7, #15]
      break;
 800df3c:	e04a      	b.n	800dfd4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	785b      	ldrb	r3, [r3, #1]
 800df42:	2b09      	cmp	r3, #9
 800df44:	d83b      	bhi.n	800dfbe <USBD_StdDevReq+0xba>
 800df46:	a201      	add	r2, pc, #4	@ (adr r2, 800df4c <USBD_StdDevReq+0x48>)
 800df48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df4c:	0800dfa1 	.word	0x0800dfa1
 800df50:	0800dfb5 	.word	0x0800dfb5
 800df54:	0800dfbf 	.word	0x0800dfbf
 800df58:	0800dfab 	.word	0x0800dfab
 800df5c:	0800dfbf 	.word	0x0800dfbf
 800df60:	0800df7f 	.word	0x0800df7f
 800df64:	0800df75 	.word	0x0800df75
 800df68:	0800dfbf 	.word	0x0800dfbf
 800df6c:	0800df97 	.word	0x0800df97
 800df70:	0800df89 	.word	0x0800df89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800df74:	6839      	ldr	r1, [r7, #0]
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f000 f9de 	bl	800e338 <USBD_GetDescriptor>
          break;
 800df7c:	e024      	b.n	800dfc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800df7e:	6839      	ldr	r1, [r7, #0]
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f000 fb6d 	bl	800e660 <USBD_SetAddress>
          break;
 800df86:	e01f      	b.n	800dfc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800df88:	6839      	ldr	r1, [r7, #0]
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f000 fbac 	bl	800e6e8 <USBD_SetConfig>
 800df90:	4603      	mov	r3, r0
 800df92:	73fb      	strb	r3, [r7, #15]
          break;
 800df94:	e018      	b.n	800dfc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800df96:	6839      	ldr	r1, [r7, #0]
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f000 fc4b 	bl	800e834 <USBD_GetConfig>
          break;
 800df9e:	e013      	b.n	800dfc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dfa0:	6839      	ldr	r1, [r7, #0]
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f000 fc7c 	bl	800e8a0 <USBD_GetStatus>
          break;
 800dfa8:	e00e      	b.n	800dfc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dfaa:	6839      	ldr	r1, [r7, #0]
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f000 fcab 	bl	800e908 <USBD_SetFeature>
          break;
 800dfb2:	e009      	b.n	800dfc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dfb4:	6839      	ldr	r1, [r7, #0]
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f000 fcba 	bl	800e930 <USBD_ClrFeature>
          break;
 800dfbc:	e004      	b.n	800dfc8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800dfbe:	6839      	ldr	r1, [r7, #0]
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f000 fd11 	bl	800e9e8 <USBD_CtlError>
          break;
 800dfc6:	bf00      	nop
      }
      break;
 800dfc8:	e004      	b.n	800dfd4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800dfca:	6839      	ldr	r1, [r7, #0]
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f000 fd0b 	bl	800e9e8 <USBD_CtlError>
      break;
 800dfd2:	bf00      	nop
  }

  return ret;
 800dfd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3710      	adds	r7, #16
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
 800dfde:	bf00      	nop

0800dfe0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfea:	2300      	movs	r3, #0
 800dfec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dff6:	2b40      	cmp	r3, #64	@ 0x40
 800dff8:	d005      	beq.n	800e006 <USBD_StdItfReq+0x26>
 800dffa:	2b40      	cmp	r3, #64	@ 0x40
 800dffc:	d82f      	bhi.n	800e05e <USBD_StdItfReq+0x7e>
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d001      	beq.n	800e006 <USBD_StdItfReq+0x26>
 800e002:	2b20      	cmp	r3, #32
 800e004:	d12b      	bne.n	800e05e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e00c:	b2db      	uxtb	r3, r3
 800e00e:	3b01      	subs	r3, #1
 800e010:	2b02      	cmp	r3, #2
 800e012:	d81d      	bhi.n	800e050 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	889b      	ldrh	r3, [r3, #4]
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	2b01      	cmp	r3, #1
 800e01c:	d813      	bhi.n	800e046 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e024:	689b      	ldr	r3, [r3, #8]
 800e026:	6839      	ldr	r1, [r7, #0]
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	4798      	blx	r3
 800e02c:	4603      	mov	r3, r0
 800e02e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	88db      	ldrh	r3, [r3, #6]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d110      	bne.n	800e05a <USBD_StdItfReq+0x7a>
 800e038:	7bfb      	ldrb	r3, [r7, #15]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d10d      	bne.n	800e05a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f000 fd9d 	bl	800eb7e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e044:	e009      	b.n	800e05a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e046:	6839      	ldr	r1, [r7, #0]
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f000 fccd 	bl	800e9e8 <USBD_CtlError>
          break;
 800e04e:	e004      	b.n	800e05a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e050:	6839      	ldr	r1, [r7, #0]
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f000 fcc8 	bl	800e9e8 <USBD_CtlError>
          break;
 800e058:	e000      	b.n	800e05c <USBD_StdItfReq+0x7c>
          break;
 800e05a:	bf00      	nop
      }
      break;
 800e05c:	e004      	b.n	800e068 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e05e:	6839      	ldr	r1, [r7, #0]
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f000 fcc1 	bl	800e9e8 <USBD_CtlError>
      break;
 800e066:	bf00      	nop
  }

  return ret;
 800e068:	7bfb      	ldrb	r3, [r7, #15]
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3710      	adds	r7, #16
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e072:	b580      	push	{r7, lr}
 800e074:	b084      	sub	sp, #16
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
 800e07a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e07c:	2300      	movs	r3, #0
 800e07e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	889b      	ldrh	r3, [r3, #4]
 800e084:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e08e:	2b40      	cmp	r3, #64	@ 0x40
 800e090:	d007      	beq.n	800e0a2 <USBD_StdEPReq+0x30>
 800e092:	2b40      	cmp	r3, #64	@ 0x40
 800e094:	f200 8145 	bhi.w	800e322 <USBD_StdEPReq+0x2b0>
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d00c      	beq.n	800e0b6 <USBD_StdEPReq+0x44>
 800e09c:	2b20      	cmp	r3, #32
 800e09e:	f040 8140 	bne.w	800e322 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0a8:	689b      	ldr	r3, [r3, #8]
 800e0aa:	6839      	ldr	r1, [r7, #0]
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	4798      	blx	r3
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	73fb      	strb	r3, [r7, #15]
      break;
 800e0b4:	e13a      	b.n	800e32c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	785b      	ldrb	r3, [r3, #1]
 800e0ba:	2b03      	cmp	r3, #3
 800e0bc:	d007      	beq.n	800e0ce <USBD_StdEPReq+0x5c>
 800e0be:	2b03      	cmp	r3, #3
 800e0c0:	f300 8129 	bgt.w	800e316 <USBD_StdEPReq+0x2a4>
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d07f      	beq.n	800e1c8 <USBD_StdEPReq+0x156>
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d03c      	beq.n	800e146 <USBD_StdEPReq+0xd4>
 800e0cc:	e123      	b.n	800e316 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	2b02      	cmp	r3, #2
 800e0d8:	d002      	beq.n	800e0e0 <USBD_StdEPReq+0x6e>
 800e0da:	2b03      	cmp	r3, #3
 800e0dc:	d016      	beq.n	800e10c <USBD_StdEPReq+0x9a>
 800e0de:	e02c      	b.n	800e13a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e0e0:	7bbb      	ldrb	r3, [r7, #14]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d00d      	beq.n	800e102 <USBD_StdEPReq+0x90>
 800e0e6:	7bbb      	ldrb	r3, [r7, #14]
 800e0e8:	2b80      	cmp	r3, #128	@ 0x80
 800e0ea:	d00a      	beq.n	800e102 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e0ec:	7bbb      	ldrb	r3, [r7, #14]
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f004 ff8d 	bl	8013010 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e0f6:	2180      	movs	r1, #128	@ 0x80
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f004 ff89 	bl	8013010 <USBD_LL_StallEP>
 800e0fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e100:	e020      	b.n	800e144 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e102:	6839      	ldr	r1, [r7, #0]
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f000 fc6f 	bl	800e9e8 <USBD_CtlError>
              break;
 800e10a:	e01b      	b.n	800e144 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	885b      	ldrh	r3, [r3, #2]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d10e      	bne.n	800e132 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e114:	7bbb      	ldrb	r3, [r7, #14]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00b      	beq.n	800e132 <USBD_StdEPReq+0xc0>
 800e11a:	7bbb      	ldrb	r3, [r7, #14]
 800e11c:	2b80      	cmp	r3, #128	@ 0x80
 800e11e:	d008      	beq.n	800e132 <USBD_StdEPReq+0xc0>
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	88db      	ldrh	r3, [r3, #6]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d104      	bne.n	800e132 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e128:	7bbb      	ldrb	r3, [r7, #14]
 800e12a:	4619      	mov	r1, r3
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f004 ff6f 	bl	8013010 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 fd23 	bl	800eb7e <USBD_CtlSendStatus>

              break;
 800e138:	e004      	b.n	800e144 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e13a:	6839      	ldr	r1, [r7, #0]
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f000 fc53 	bl	800e9e8 <USBD_CtlError>
              break;
 800e142:	bf00      	nop
          }
          break;
 800e144:	e0ec      	b.n	800e320 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e14c:	b2db      	uxtb	r3, r3
 800e14e:	2b02      	cmp	r3, #2
 800e150:	d002      	beq.n	800e158 <USBD_StdEPReq+0xe6>
 800e152:	2b03      	cmp	r3, #3
 800e154:	d016      	beq.n	800e184 <USBD_StdEPReq+0x112>
 800e156:	e030      	b.n	800e1ba <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e158:	7bbb      	ldrb	r3, [r7, #14]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d00d      	beq.n	800e17a <USBD_StdEPReq+0x108>
 800e15e:	7bbb      	ldrb	r3, [r7, #14]
 800e160:	2b80      	cmp	r3, #128	@ 0x80
 800e162:	d00a      	beq.n	800e17a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e164:	7bbb      	ldrb	r3, [r7, #14]
 800e166:	4619      	mov	r1, r3
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f004 ff51 	bl	8013010 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e16e:	2180      	movs	r1, #128	@ 0x80
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f004 ff4d 	bl	8013010 <USBD_LL_StallEP>
 800e176:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e178:	e025      	b.n	800e1c6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e17a:	6839      	ldr	r1, [r7, #0]
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f000 fc33 	bl	800e9e8 <USBD_CtlError>
              break;
 800e182:	e020      	b.n	800e1c6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	885b      	ldrh	r3, [r3, #2]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d11b      	bne.n	800e1c4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e18c:	7bbb      	ldrb	r3, [r7, #14]
 800e18e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e192:	2b00      	cmp	r3, #0
 800e194:	d004      	beq.n	800e1a0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e196:	7bbb      	ldrb	r3, [r7, #14]
 800e198:	4619      	mov	r1, r3
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f004 ff57 	bl	801304e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f000 fcec 	bl	800eb7e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e1ac:	689b      	ldr	r3, [r3, #8]
 800e1ae:	6839      	ldr	r1, [r7, #0]
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	4798      	blx	r3
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e1b8:	e004      	b.n	800e1c4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e1ba:	6839      	ldr	r1, [r7, #0]
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f000 fc13 	bl	800e9e8 <USBD_CtlError>
              break;
 800e1c2:	e000      	b.n	800e1c6 <USBD_StdEPReq+0x154>
              break;
 800e1c4:	bf00      	nop
          }
          break;
 800e1c6:	e0ab      	b.n	800e320 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1ce:	b2db      	uxtb	r3, r3
 800e1d0:	2b02      	cmp	r3, #2
 800e1d2:	d002      	beq.n	800e1da <USBD_StdEPReq+0x168>
 800e1d4:	2b03      	cmp	r3, #3
 800e1d6:	d032      	beq.n	800e23e <USBD_StdEPReq+0x1cc>
 800e1d8:	e097      	b.n	800e30a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e1da:	7bbb      	ldrb	r3, [r7, #14]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d007      	beq.n	800e1f0 <USBD_StdEPReq+0x17e>
 800e1e0:	7bbb      	ldrb	r3, [r7, #14]
 800e1e2:	2b80      	cmp	r3, #128	@ 0x80
 800e1e4:	d004      	beq.n	800e1f0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e1e6:	6839      	ldr	r1, [r7, #0]
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f000 fbfd 	bl	800e9e8 <USBD_CtlError>
                break;
 800e1ee:	e091      	b.n	800e314 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	da0b      	bge.n	800e210 <USBD_StdEPReq+0x19e>
 800e1f8:	7bbb      	ldrb	r3, [r7, #14]
 800e1fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e1fe:	4613      	mov	r3, r2
 800e200:	009b      	lsls	r3, r3, #2
 800e202:	4413      	add	r3, r2
 800e204:	009b      	lsls	r3, r3, #2
 800e206:	3310      	adds	r3, #16
 800e208:	687a      	ldr	r2, [r7, #4]
 800e20a:	4413      	add	r3, r2
 800e20c:	3304      	adds	r3, #4
 800e20e:	e00b      	b.n	800e228 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e210:	7bbb      	ldrb	r3, [r7, #14]
 800e212:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e216:	4613      	mov	r3, r2
 800e218:	009b      	lsls	r3, r3, #2
 800e21a:	4413      	add	r3, r2
 800e21c:	009b      	lsls	r3, r3, #2
 800e21e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	4413      	add	r3, r2
 800e226:	3304      	adds	r3, #4
 800e228:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	2200      	movs	r2, #0
 800e22e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	2202      	movs	r2, #2
 800e234:	4619      	mov	r1, r3
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f000 fc47 	bl	800eaca <USBD_CtlSendData>
              break;
 800e23c:	e06a      	b.n	800e314 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e23e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e242:	2b00      	cmp	r3, #0
 800e244:	da11      	bge.n	800e26a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e246:	7bbb      	ldrb	r3, [r7, #14]
 800e248:	f003 020f 	and.w	r2, r3, #15
 800e24c:	6879      	ldr	r1, [r7, #4]
 800e24e:	4613      	mov	r3, r2
 800e250:	009b      	lsls	r3, r3, #2
 800e252:	4413      	add	r3, r2
 800e254:	009b      	lsls	r3, r3, #2
 800e256:	440b      	add	r3, r1
 800e258:	3324      	adds	r3, #36	@ 0x24
 800e25a:	881b      	ldrh	r3, [r3, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d117      	bne.n	800e290 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e260:	6839      	ldr	r1, [r7, #0]
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f000 fbc0 	bl	800e9e8 <USBD_CtlError>
                  break;
 800e268:	e054      	b.n	800e314 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e26a:	7bbb      	ldrb	r3, [r7, #14]
 800e26c:	f003 020f 	and.w	r2, r3, #15
 800e270:	6879      	ldr	r1, [r7, #4]
 800e272:	4613      	mov	r3, r2
 800e274:	009b      	lsls	r3, r3, #2
 800e276:	4413      	add	r3, r2
 800e278:	009b      	lsls	r3, r3, #2
 800e27a:	440b      	add	r3, r1
 800e27c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e280:	881b      	ldrh	r3, [r3, #0]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d104      	bne.n	800e290 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e286:	6839      	ldr	r1, [r7, #0]
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 fbad 	bl	800e9e8 <USBD_CtlError>
                  break;
 800e28e:	e041      	b.n	800e314 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e290:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e294:	2b00      	cmp	r3, #0
 800e296:	da0b      	bge.n	800e2b0 <USBD_StdEPReq+0x23e>
 800e298:	7bbb      	ldrb	r3, [r7, #14]
 800e29a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e29e:	4613      	mov	r3, r2
 800e2a0:	009b      	lsls	r3, r3, #2
 800e2a2:	4413      	add	r3, r2
 800e2a4:	009b      	lsls	r3, r3, #2
 800e2a6:	3310      	adds	r3, #16
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	4413      	add	r3, r2
 800e2ac:	3304      	adds	r3, #4
 800e2ae:	e00b      	b.n	800e2c8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e2b0:	7bbb      	ldrb	r3, [r7, #14]
 800e2b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2b6:	4613      	mov	r3, r2
 800e2b8:	009b      	lsls	r3, r3, #2
 800e2ba:	4413      	add	r3, r2
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	4413      	add	r3, r2
 800e2c6:	3304      	adds	r3, #4
 800e2c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e2ca:	7bbb      	ldrb	r3, [r7, #14]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d002      	beq.n	800e2d6 <USBD_StdEPReq+0x264>
 800e2d0:	7bbb      	ldrb	r3, [r7, #14]
 800e2d2:	2b80      	cmp	r3, #128	@ 0x80
 800e2d4:	d103      	bne.n	800e2de <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	601a      	str	r2, [r3, #0]
 800e2dc:	e00e      	b.n	800e2fc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e2de:	7bbb      	ldrb	r3, [r7, #14]
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f004 fed2 	bl	801308c <USBD_LL_IsStallEP>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d003      	beq.n	800e2f6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	601a      	str	r2, [r3, #0]
 800e2f4:	e002      	b.n	800e2fc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	2202      	movs	r2, #2
 800e300:	4619      	mov	r1, r3
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 fbe1 	bl	800eaca <USBD_CtlSendData>
              break;
 800e308:	e004      	b.n	800e314 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e30a:	6839      	ldr	r1, [r7, #0]
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f000 fb6b 	bl	800e9e8 <USBD_CtlError>
              break;
 800e312:	bf00      	nop
          }
          break;
 800e314:	e004      	b.n	800e320 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e316:	6839      	ldr	r1, [r7, #0]
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 fb65 	bl	800e9e8 <USBD_CtlError>
          break;
 800e31e:	bf00      	nop
      }
      break;
 800e320:	e004      	b.n	800e32c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e322:	6839      	ldr	r1, [r7, #0]
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f000 fb5f 	bl	800e9e8 <USBD_CtlError>
      break;
 800e32a:	bf00      	nop
  }

  return ret;
 800e32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
	...

0800e338 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b084      	sub	sp, #16
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e342:	2300      	movs	r3, #0
 800e344:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e346:	2300      	movs	r3, #0
 800e348:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e34a:	2300      	movs	r3, #0
 800e34c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	885b      	ldrh	r3, [r3, #2]
 800e352:	0a1b      	lsrs	r3, r3, #8
 800e354:	b29b      	uxth	r3, r3
 800e356:	3b01      	subs	r3, #1
 800e358:	2b0e      	cmp	r3, #14
 800e35a:	f200 8152 	bhi.w	800e602 <USBD_GetDescriptor+0x2ca>
 800e35e:	a201      	add	r2, pc, #4	@ (adr r2, 800e364 <USBD_GetDescriptor+0x2c>)
 800e360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e364:	0800e3d5 	.word	0x0800e3d5
 800e368:	0800e3ed 	.word	0x0800e3ed
 800e36c:	0800e42d 	.word	0x0800e42d
 800e370:	0800e603 	.word	0x0800e603
 800e374:	0800e603 	.word	0x0800e603
 800e378:	0800e5a3 	.word	0x0800e5a3
 800e37c:	0800e5cf 	.word	0x0800e5cf
 800e380:	0800e603 	.word	0x0800e603
 800e384:	0800e603 	.word	0x0800e603
 800e388:	0800e603 	.word	0x0800e603
 800e38c:	0800e603 	.word	0x0800e603
 800e390:	0800e603 	.word	0x0800e603
 800e394:	0800e603 	.word	0x0800e603
 800e398:	0800e603 	.word	0x0800e603
 800e39c:	0800e3a1 	.word	0x0800e3a1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e3a6:	69db      	ldr	r3, [r3, #28]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d00b      	beq.n	800e3c4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e3b2:	69db      	ldr	r3, [r3, #28]
 800e3b4:	687a      	ldr	r2, [r7, #4]
 800e3b6:	7c12      	ldrb	r2, [r2, #16]
 800e3b8:	f107 0108 	add.w	r1, r7, #8
 800e3bc:	4610      	mov	r0, r2
 800e3be:	4798      	blx	r3
 800e3c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e3c2:	e126      	b.n	800e612 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e3c4:	6839      	ldr	r1, [r7, #0]
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f000 fb0e 	bl	800e9e8 <USBD_CtlError>
        err++;
 800e3cc:	7afb      	ldrb	r3, [r7, #11]
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	72fb      	strb	r3, [r7, #11]
      break;
 800e3d2:	e11e      	b.n	800e612 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	687a      	ldr	r2, [r7, #4]
 800e3de:	7c12      	ldrb	r2, [r2, #16]
 800e3e0:	f107 0108 	add.w	r1, r7, #8
 800e3e4:	4610      	mov	r0, r2
 800e3e6:	4798      	blx	r3
 800e3e8:	60f8      	str	r0, [r7, #12]
      break;
 800e3ea:	e112      	b.n	800e612 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	7c1b      	ldrb	r3, [r3, #16]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d10d      	bne.n	800e410 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3fc:	f107 0208 	add.w	r2, r7, #8
 800e400:	4610      	mov	r0, r2
 800e402:	4798      	blx	r3
 800e404:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	3301      	adds	r3, #1
 800e40a:	2202      	movs	r2, #2
 800e40c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e40e:	e100      	b.n	800e612 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e418:	f107 0208 	add.w	r2, r7, #8
 800e41c:	4610      	mov	r0, r2
 800e41e:	4798      	blx	r3
 800e420:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	3301      	adds	r3, #1
 800e426:	2202      	movs	r2, #2
 800e428:	701a      	strb	r2, [r3, #0]
      break;
 800e42a:	e0f2      	b.n	800e612 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	885b      	ldrh	r3, [r3, #2]
 800e430:	b2db      	uxtb	r3, r3
 800e432:	2b05      	cmp	r3, #5
 800e434:	f200 80ac 	bhi.w	800e590 <USBD_GetDescriptor+0x258>
 800e438:	a201      	add	r2, pc, #4	@ (adr r2, 800e440 <USBD_GetDescriptor+0x108>)
 800e43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e43e:	bf00      	nop
 800e440:	0800e459 	.word	0x0800e459
 800e444:	0800e48d 	.word	0x0800e48d
 800e448:	0800e4c1 	.word	0x0800e4c1
 800e44c:	0800e4f5 	.word	0x0800e4f5
 800e450:	0800e529 	.word	0x0800e529
 800e454:	0800e55d 	.word	0x0800e55d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d00b      	beq.n	800e47c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	687a      	ldr	r2, [r7, #4]
 800e46e:	7c12      	ldrb	r2, [r2, #16]
 800e470:	f107 0108 	add.w	r1, r7, #8
 800e474:	4610      	mov	r0, r2
 800e476:	4798      	blx	r3
 800e478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e47a:	e091      	b.n	800e5a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e47c:	6839      	ldr	r1, [r7, #0]
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 fab2 	bl	800e9e8 <USBD_CtlError>
            err++;
 800e484:	7afb      	ldrb	r3, [r7, #11]
 800e486:	3301      	adds	r3, #1
 800e488:	72fb      	strb	r3, [r7, #11]
          break;
 800e48a:	e089      	b.n	800e5a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e492:	689b      	ldr	r3, [r3, #8]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d00b      	beq.n	800e4b0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e49e:	689b      	ldr	r3, [r3, #8]
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	7c12      	ldrb	r2, [r2, #16]
 800e4a4:	f107 0108 	add.w	r1, r7, #8
 800e4a8:	4610      	mov	r0, r2
 800e4aa:	4798      	blx	r3
 800e4ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4ae:	e077      	b.n	800e5a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e4b0:	6839      	ldr	r1, [r7, #0]
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 fa98 	bl	800e9e8 <USBD_CtlError>
            err++;
 800e4b8:	7afb      	ldrb	r3, [r7, #11]
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	72fb      	strb	r3, [r7, #11]
          break;
 800e4be:	e06f      	b.n	800e5a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4c6:	68db      	ldr	r3, [r3, #12]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d00b      	beq.n	800e4e4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	7c12      	ldrb	r2, [r2, #16]
 800e4d8:	f107 0108 	add.w	r1, r7, #8
 800e4dc:	4610      	mov	r0, r2
 800e4de:	4798      	blx	r3
 800e4e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4e2:	e05d      	b.n	800e5a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e4e4:	6839      	ldr	r1, [r7, #0]
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f000 fa7e 	bl	800e9e8 <USBD_CtlError>
            err++;
 800e4ec:	7afb      	ldrb	r3, [r7, #11]
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	72fb      	strb	r3, [r7, #11]
          break;
 800e4f2:	e055      	b.n	800e5a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4fa:	691b      	ldr	r3, [r3, #16]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d00b      	beq.n	800e518 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e506:	691b      	ldr	r3, [r3, #16]
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	7c12      	ldrb	r2, [r2, #16]
 800e50c:	f107 0108 	add.w	r1, r7, #8
 800e510:	4610      	mov	r0, r2
 800e512:	4798      	blx	r3
 800e514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e516:	e043      	b.n	800e5a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e518:	6839      	ldr	r1, [r7, #0]
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 fa64 	bl	800e9e8 <USBD_CtlError>
            err++;
 800e520:	7afb      	ldrb	r3, [r7, #11]
 800e522:	3301      	adds	r3, #1
 800e524:	72fb      	strb	r3, [r7, #11]
          break;
 800e526:	e03b      	b.n	800e5a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e52e:	695b      	ldr	r3, [r3, #20]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00b      	beq.n	800e54c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e53a:	695b      	ldr	r3, [r3, #20]
 800e53c:	687a      	ldr	r2, [r7, #4]
 800e53e:	7c12      	ldrb	r2, [r2, #16]
 800e540:	f107 0108 	add.w	r1, r7, #8
 800e544:	4610      	mov	r0, r2
 800e546:	4798      	blx	r3
 800e548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e54a:	e029      	b.n	800e5a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e54c:	6839      	ldr	r1, [r7, #0]
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f000 fa4a 	bl	800e9e8 <USBD_CtlError>
            err++;
 800e554:	7afb      	ldrb	r3, [r7, #11]
 800e556:	3301      	adds	r3, #1
 800e558:	72fb      	strb	r3, [r7, #11]
          break;
 800e55a:	e021      	b.n	800e5a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e562:	699b      	ldr	r3, [r3, #24]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d00b      	beq.n	800e580 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e56e:	699b      	ldr	r3, [r3, #24]
 800e570:	687a      	ldr	r2, [r7, #4]
 800e572:	7c12      	ldrb	r2, [r2, #16]
 800e574:	f107 0108 	add.w	r1, r7, #8
 800e578:	4610      	mov	r0, r2
 800e57a:	4798      	blx	r3
 800e57c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e57e:	e00f      	b.n	800e5a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e580:	6839      	ldr	r1, [r7, #0]
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f000 fa30 	bl	800e9e8 <USBD_CtlError>
            err++;
 800e588:	7afb      	ldrb	r3, [r7, #11]
 800e58a:	3301      	adds	r3, #1
 800e58c:	72fb      	strb	r3, [r7, #11]
          break;
 800e58e:	e007      	b.n	800e5a0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e590:	6839      	ldr	r1, [r7, #0]
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f000 fa28 	bl	800e9e8 <USBD_CtlError>
          err++;
 800e598:	7afb      	ldrb	r3, [r7, #11]
 800e59a:	3301      	adds	r3, #1
 800e59c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e59e:	bf00      	nop
      }
      break;
 800e5a0:	e037      	b.n	800e612 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	7c1b      	ldrb	r3, [r3, #16]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d109      	bne.n	800e5be <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e5b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5b2:	f107 0208 	add.w	r2, r7, #8
 800e5b6:	4610      	mov	r0, r2
 800e5b8:	4798      	blx	r3
 800e5ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e5bc:	e029      	b.n	800e612 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e5be:	6839      	ldr	r1, [r7, #0]
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f000 fa11 	bl	800e9e8 <USBD_CtlError>
        err++;
 800e5c6:	7afb      	ldrb	r3, [r7, #11]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	72fb      	strb	r3, [r7, #11]
      break;
 800e5cc:	e021      	b.n	800e612 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	7c1b      	ldrb	r3, [r3, #16]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d10d      	bne.n	800e5f2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e5dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5de:	f107 0208 	add.w	r2, r7, #8
 800e5e2:	4610      	mov	r0, r2
 800e5e4:	4798      	blx	r3
 800e5e6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	2207      	movs	r2, #7
 800e5ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e5f0:	e00f      	b.n	800e612 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e5f2:	6839      	ldr	r1, [r7, #0]
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 f9f7 	bl	800e9e8 <USBD_CtlError>
        err++;
 800e5fa:	7afb      	ldrb	r3, [r7, #11]
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	72fb      	strb	r3, [r7, #11]
      break;
 800e600:	e007      	b.n	800e612 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e602:	6839      	ldr	r1, [r7, #0]
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f000 f9ef 	bl	800e9e8 <USBD_CtlError>
      err++;
 800e60a:	7afb      	ldrb	r3, [r7, #11]
 800e60c:	3301      	adds	r3, #1
 800e60e:	72fb      	strb	r3, [r7, #11]
      break;
 800e610:	bf00      	nop
  }

  if (err != 0U)
 800e612:	7afb      	ldrb	r3, [r7, #11]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d11e      	bne.n	800e656 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	88db      	ldrh	r3, [r3, #6]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d016      	beq.n	800e64e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e620:	893b      	ldrh	r3, [r7, #8]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d00e      	beq.n	800e644 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	88da      	ldrh	r2, [r3, #6]
 800e62a:	893b      	ldrh	r3, [r7, #8]
 800e62c:	4293      	cmp	r3, r2
 800e62e:	bf28      	it	cs
 800e630:	4613      	movcs	r3, r2
 800e632:	b29b      	uxth	r3, r3
 800e634:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e636:	893b      	ldrh	r3, [r7, #8]
 800e638:	461a      	mov	r2, r3
 800e63a:	68f9      	ldr	r1, [r7, #12]
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f000 fa44 	bl	800eaca <USBD_CtlSendData>
 800e642:	e009      	b.n	800e658 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e644:	6839      	ldr	r1, [r7, #0]
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 f9ce 	bl	800e9e8 <USBD_CtlError>
 800e64c:	e004      	b.n	800e658 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f000 fa95 	bl	800eb7e <USBD_CtlSendStatus>
 800e654:	e000      	b.n	800e658 <USBD_GetDescriptor+0x320>
    return;
 800e656:	bf00      	nop
  }
}
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop

0800e660 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b084      	sub	sp, #16
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	889b      	ldrh	r3, [r3, #4]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d131      	bne.n	800e6d6 <USBD_SetAddress+0x76>
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	88db      	ldrh	r3, [r3, #6]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d12d      	bne.n	800e6d6 <USBD_SetAddress+0x76>
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	885b      	ldrh	r3, [r3, #2]
 800e67e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e680:	d829      	bhi.n	800e6d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	885b      	ldrh	r3, [r3, #2]
 800e686:	b2db      	uxtb	r3, r3
 800e688:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e68c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e694:	b2db      	uxtb	r3, r3
 800e696:	2b03      	cmp	r3, #3
 800e698:	d104      	bne.n	800e6a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e69a:	6839      	ldr	r1, [r7, #0]
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f000 f9a3 	bl	800e9e8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6a2:	e01d      	b.n	800e6e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	7bfa      	ldrb	r2, [r7, #15]
 800e6a8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e6ac:	7bfb      	ldrb	r3, [r7, #15]
 800e6ae:	4619      	mov	r1, r3
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f004 fd17 	bl	80130e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f000 fa61 	bl	800eb7e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e6bc:	7bfb      	ldrb	r3, [r7, #15]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d004      	beq.n	800e6cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2202      	movs	r2, #2
 800e6c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6ca:	e009      	b.n	800e6e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6d4:	e004      	b.n	800e6e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e6d6:	6839      	ldr	r1, [r7, #0]
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 f985 	bl	800e9e8 <USBD_CtlError>
  }
}
 800e6de:	bf00      	nop
 800e6e0:	bf00      	nop
 800e6e2:	3710      	adds	r7, #16
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}

0800e6e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b084      	sub	sp, #16
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
 800e6f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	885b      	ldrh	r3, [r3, #2]
 800e6fa:	b2da      	uxtb	r2, r3
 800e6fc:	4b4c      	ldr	r3, [pc, #304]	@ (800e830 <USBD_SetConfig+0x148>)
 800e6fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e700:	4b4b      	ldr	r3, [pc, #300]	@ (800e830 <USBD_SetConfig+0x148>)
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	2b01      	cmp	r3, #1
 800e706:	d905      	bls.n	800e714 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e708:	6839      	ldr	r1, [r7, #0]
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f000 f96c 	bl	800e9e8 <USBD_CtlError>
    return USBD_FAIL;
 800e710:	2303      	movs	r3, #3
 800e712:	e088      	b.n	800e826 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e71a:	b2db      	uxtb	r3, r3
 800e71c:	2b02      	cmp	r3, #2
 800e71e:	d002      	beq.n	800e726 <USBD_SetConfig+0x3e>
 800e720:	2b03      	cmp	r3, #3
 800e722:	d025      	beq.n	800e770 <USBD_SetConfig+0x88>
 800e724:	e071      	b.n	800e80a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e726:	4b42      	ldr	r3, [pc, #264]	@ (800e830 <USBD_SetConfig+0x148>)
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d01c      	beq.n	800e768 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e72e:	4b40      	ldr	r3, [pc, #256]	@ (800e830 <USBD_SetConfig+0x148>)
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	461a      	mov	r2, r3
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e738:	4b3d      	ldr	r3, [pc, #244]	@ (800e830 <USBD_SetConfig+0x148>)
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	4619      	mov	r1, r3
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f7ff f992 	bl	800da68 <USBD_SetClassConfig>
 800e744:	4603      	mov	r3, r0
 800e746:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e748:	7bfb      	ldrb	r3, [r7, #15]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d004      	beq.n	800e758 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e74e:	6839      	ldr	r1, [r7, #0]
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f000 f949 	bl	800e9e8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e756:	e065      	b.n	800e824 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f000 fa10 	bl	800eb7e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2203      	movs	r2, #3
 800e762:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e766:	e05d      	b.n	800e824 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f000 fa08 	bl	800eb7e <USBD_CtlSendStatus>
      break;
 800e76e:	e059      	b.n	800e824 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e770:	4b2f      	ldr	r3, [pc, #188]	@ (800e830 <USBD_SetConfig+0x148>)
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d112      	bne.n	800e79e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2202      	movs	r2, #2
 800e77c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e780:	4b2b      	ldr	r3, [pc, #172]	@ (800e830 <USBD_SetConfig+0x148>)
 800e782:	781b      	ldrb	r3, [r3, #0]
 800e784:	461a      	mov	r2, r3
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e78a:	4b29      	ldr	r3, [pc, #164]	@ (800e830 <USBD_SetConfig+0x148>)
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	4619      	mov	r1, r3
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f7ff f985 	bl	800daa0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f000 f9f1 	bl	800eb7e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e79c:	e042      	b.n	800e824 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e79e:	4b24      	ldr	r3, [pc, #144]	@ (800e830 <USBD_SetConfig+0x148>)
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d02a      	beq.n	800e802 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	b2db      	uxtb	r3, r3
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f7ff f973 	bl	800daa0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e7ba:	4b1d      	ldr	r3, [pc, #116]	@ (800e830 <USBD_SetConfig+0x148>)
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	461a      	mov	r2, r3
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e7c4:	4b1a      	ldr	r3, [pc, #104]	@ (800e830 <USBD_SetConfig+0x148>)
 800e7c6:	781b      	ldrb	r3, [r3, #0]
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f7ff f94c 	bl	800da68 <USBD_SetClassConfig>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e7d4:	7bfb      	ldrb	r3, [r7, #15]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d00f      	beq.n	800e7fa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e7da:	6839      	ldr	r1, [r7, #0]
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f000 f903 	bl	800e9e8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f7ff f958 	bl	800daa0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2202      	movs	r2, #2
 800e7f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e7f8:	e014      	b.n	800e824 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f000 f9bf 	bl	800eb7e <USBD_CtlSendStatus>
      break;
 800e800:	e010      	b.n	800e824 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f000 f9bb 	bl	800eb7e <USBD_CtlSendStatus>
      break;
 800e808:	e00c      	b.n	800e824 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e80a:	6839      	ldr	r1, [r7, #0]
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f000 f8eb 	bl	800e9e8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e812:	4b07      	ldr	r3, [pc, #28]	@ (800e830 <USBD_SetConfig+0x148>)
 800e814:	781b      	ldrb	r3, [r3, #0]
 800e816:	4619      	mov	r1, r3
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f7ff f941 	bl	800daa0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e81e:	2303      	movs	r3, #3
 800e820:	73fb      	strb	r3, [r7, #15]
      break;
 800e822:	bf00      	nop
  }

  return ret;
 800e824:	7bfb      	ldrb	r3, [r7, #15]
}
 800e826:	4618      	mov	r0, r3
 800e828:	3710      	adds	r7, #16
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}
 800e82e:	bf00      	nop
 800e830:	20005960 	.word	0x20005960

0800e834 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b082      	sub	sp, #8
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	88db      	ldrh	r3, [r3, #6]
 800e842:	2b01      	cmp	r3, #1
 800e844:	d004      	beq.n	800e850 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e846:	6839      	ldr	r1, [r7, #0]
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f000 f8cd 	bl	800e9e8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e84e:	e023      	b.n	800e898 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e856:	b2db      	uxtb	r3, r3
 800e858:	2b02      	cmp	r3, #2
 800e85a:	dc02      	bgt.n	800e862 <USBD_GetConfig+0x2e>
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	dc03      	bgt.n	800e868 <USBD_GetConfig+0x34>
 800e860:	e015      	b.n	800e88e <USBD_GetConfig+0x5a>
 800e862:	2b03      	cmp	r3, #3
 800e864:	d00b      	beq.n	800e87e <USBD_GetConfig+0x4a>
 800e866:	e012      	b.n	800e88e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2200      	movs	r2, #0
 800e86c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	3308      	adds	r3, #8
 800e872:	2201      	movs	r2, #1
 800e874:	4619      	mov	r1, r3
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 f927 	bl	800eaca <USBD_CtlSendData>
        break;
 800e87c:	e00c      	b.n	800e898 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	3304      	adds	r3, #4
 800e882:	2201      	movs	r2, #1
 800e884:	4619      	mov	r1, r3
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f000 f91f 	bl	800eaca <USBD_CtlSendData>
        break;
 800e88c:	e004      	b.n	800e898 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e88e:	6839      	ldr	r1, [r7, #0]
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f000 f8a9 	bl	800e9e8 <USBD_CtlError>
        break;
 800e896:	bf00      	nop
}
 800e898:	bf00      	nop
 800e89a:	3708      	adds	r7, #8
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b082      	sub	sp, #8
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8b0:	b2db      	uxtb	r3, r3
 800e8b2:	3b01      	subs	r3, #1
 800e8b4:	2b02      	cmp	r3, #2
 800e8b6:	d81e      	bhi.n	800e8f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	88db      	ldrh	r3, [r3, #6]
 800e8bc:	2b02      	cmp	r3, #2
 800e8be:	d004      	beq.n	800e8ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e8c0:	6839      	ldr	r1, [r7, #0]
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f000 f890 	bl	800e9e8 <USBD_CtlError>
        break;
 800e8c8:	e01a      	b.n	800e900 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2201      	movs	r2, #1
 800e8ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d005      	beq.n	800e8e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	68db      	ldr	r3, [r3, #12]
 800e8de:	f043 0202 	orr.w	r2, r3, #2
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	330c      	adds	r3, #12
 800e8ea:	2202      	movs	r2, #2
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f000 f8eb 	bl	800eaca <USBD_CtlSendData>
      break;
 800e8f4:	e004      	b.n	800e900 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e8f6:	6839      	ldr	r1, [r7, #0]
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f000 f875 	bl	800e9e8 <USBD_CtlError>
      break;
 800e8fe:	bf00      	nop
  }
}
 800e900:	bf00      	nop
 800e902:	3708      	adds	r7, #8
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	885b      	ldrh	r3, [r3, #2]
 800e916:	2b01      	cmp	r3, #1
 800e918:	d106      	bne.n	800e928 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2201      	movs	r2, #1
 800e91e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f000 f92b 	bl	800eb7e <USBD_CtlSendStatus>
  }
}
 800e928:	bf00      	nop
 800e92a:	3708      	adds	r7, #8
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e940:	b2db      	uxtb	r3, r3
 800e942:	3b01      	subs	r3, #1
 800e944:	2b02      	cmp	r3, #2
 800e946:	d80b      	bhi.n	800e960 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	885b      	ldrh	r3, [r3, #2]
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	d10c      	bne.n	800e96a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2200      	movs	r2, #0
 800e954:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f000 f910 	bl	800eb7e <USBD_CtlSendStatus>
      }
      break;
 800e95e:	e004      	b.n	800e96a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e960:	6839      	ldr	r1, [r7, #0]
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f000 f840 	bl	800e9e8 <USBD_CtlError>
      break;
 800e968:	e000      	b.n	800e96c <USBD_ClrFeature+0x3c>
      break;
 800e96a:	bf00      	nop
  }
}
 800e96c:	bf00      	nop
 800e96e:	3708      	adds	r7, #8
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b084      	sub	sp, #16
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	781a      	ldrb	r2, [r3, #0]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	3301      	adds	r3, #1
 800e98e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	781a      	ldrb	r2, [r3, #0]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	3301      	adds	r3, #1
 800e99c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e99e:	68f8      	ldr	r0, [r7, #12]
 800e9a0:	f7ff fa92 	bl	800dec8 <SWAPBYTE>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e9b8:	68f8      	ldr	r0, [r7, #12]
 800e9ba:	f7ff fa85 	bl	800dec8 <SWAPBYTE>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	461a      	mov	r2, r3
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e9d2:	68f8      	ldr	r0, [r7, #12]
 800e9d4:	f7ff fa78 	bl	800dec8 <SWAPBYTE>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	461a      	mov	r2, r3
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	80da      	strh	r2, [r3, #6]
}
 800e9e0:	bf00      	nop
 800e9e2:	3710      	adds	r7, #16
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e9f2:	2180      	movs	r1, #128	@ 0x80
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f004 fb0b 	bl	8013010 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e9fa:	2100      	movs	r1, #0
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f004 fb07 	bl	8013010 <USBD_LL_StallEP>
}
 800ea02:	bf00      	nop
 800ea04:	3708      	adds	r7, #8
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}

0800ea0a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ea0a:	b580      	push	{r7, lr}
 800ea0c:	b086      	sub	sp, #24
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	60f8      	str	r0, [r7, #12]
 800ea12:	60b9      	str	r1, [r7, #8]
 800ea14:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ea16:	2300      	movs	r3, #0
 800ea18:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d036      	beq.n	800ea8e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ea24:	6938      	ldr	r0, [r7, #16]
 800ea26:	f000 f836 	bl	800ea96 <USBD_GetLen>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	3301      	adds	r3, #1
 800ea2e:	b29b      	uxth	r3, r3
 800ea30:	005b      	lsls	r3, r3, #1
 800ea32:	b29a      	uxth	r2, r3
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ea38:	7dfb      	ldrb	r3, [r7, #23]
 800ea3a:	68ba      	ldr	r2, [r7, #8]
 800ea3c:	4413      	add	r3, r2
 800ea3e:	687a      	ldr	r2, [r7, #4]
 800ea40:	7812      	ldrb	r2, [r2, #0]
 800ea42:	701a      	strb	r2, [r3, #0]
  idx++;
 800ea44:	7dfb      	ldrb	r3, [r7, #23]
 800ea46:	3301      	adds	r3, #1
 800ea48:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ea4a:	7dfb      	ldrb	r3, [r7, #23]
 800ea4c:	68ba      	ldr	r2, [r7, #8]
 800ea4e:	4413      	add	r3, r2
 800ea50:	2203      	movs	r2, #3
 800ea52:	701a      	strb	r2, [r3, #0]
  idx++;
 800ea54:	7dfb      	ldrb	r3, [r7, #23]
 800ea56:	3301      	adds	r3, #1
 800ea58:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ea5a:	e013      	b.n	800ea84 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ea5c:	7dfb      	ldrb	r3, [r7, #23]
 800ea5e:	68ba      	ldr	r2, [r7, #8]
 800ea60:	4413      	add	r3, r2
 800ea62:	693a      	ldr	r2, [r7, #16]
 800ea64:	7812      	ldrb	r2, [r2, #0]
 800ea66:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	3301      	adds	r3, #1
 800ea6c:	613b      	str	r3, [r7, #16]
    idx++;
 800ea6e:	7dfb      	ldrb	r3, [r7, #23]
 800ea70:	3301      	adds	r3, #1
 800ea72:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ea74:	7dfb      	ldrb	r3, [r7, #23]
 800ea76:	68ba      	ldr	r2, [r7, #8]
 800ea78:	4413      	add	r3, r2
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	701a      	strb	r2, [r3, #0]
    idx++;
 800ea7e:	7dfb      	ldrb	r3, [r7, #23]
 800ea80:	3301      	adds	r3, #1
 800ea82:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d1e7      	bne.n	800ea5c <USBD_GetString+0x52>
 800ea8c:	e000      	b.n	800ea90 <USBD_GetString+0x86>
    return;
 800ea8e:	bf00      	nop
  }
}
 800ea90:	3718      	adds	r7, #24
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}

0800ea96 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ea96:	b480      	push	{r7}
 800ea98:	b085      	sub	sp, #20
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eaa6:	e005      	b.n	800eab4 <USBD_GetLen+0x1e>
  {
    len++;
 800eaa8:	7bfb      	ldrb	r3, [r7, #15]
 800eaaa:	3301      	adds	r3, #1
 800eaac:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	3301      	adds	r3, #1
 800eab2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d1f5      	bne.n	800eaa8 <USBD_GetLen+0x12>
  }

  return len;
 800eabc:	7bfb      	ldrb	r3, [r7, #15]
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3714      	adds	r7, #20
 800eac2:	46bd      	mov	sp, r7
 800eac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac8:	4770      	bx	lr

0800eaca <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b084      	sub	sp, #16
 800eace:	af00      	add	r7, sp, #0
 800ead0:	60f8      	str	r0, [r7, #12]
 800ead2:	60b9      	str	r1, [r7, #8]
 800ead4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	2202      	movs	r2, #2
 800eada:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	687a      	ldr	r2, [r7, #4]
 800eae2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	68ba      	ldr	r2, [r7, #8]
 800eaee:	2100      	movs	r1, #0
 800eaf0:	68f8      	ldr	r0, [r7, #12]
 800eaf2:	f004 fb16 	bl	8013122 <USBD_LL_Transmit>

  return USBD_OK;
 800eaf6:	2300      	movs	r3, #0
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3710      	adds	r7, #16
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b084      	sub	sp, #16
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	60f8      	str	r0, [r7, #12]
 800eb08:	60b9      	str	r1, [r7, #8]
 800eb0a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	68ba      	ldr	r2, [r7, #8]
 800eb10:	2100      	movs	r1, #0
 800eb12:	68f8      	ldr	r0, [r7, #12]
 800eb14:	f004 fb05 	bl	8013122 <USBD_LL_Transmit>

  return USBD_OK;
 800eb18:	2300      	movs	r3, #0
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3710      	adds	r7, #16
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eb22:	b580      	push	{r7, lr}
 800eb24:	b084      	sub	sp, #16
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	60f8      	str	r0, [r7, #12]
 800eb2a:	60b9      	str	r1, [r7, #8]
 800eb2c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	2203      	movs	r2, #3
 800eb32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	68ba      	ldr	r2, [r7, #8]
 800eb4a:	2100      	movs	r1, #0
 800eb4c:	68f8      	ldr	r0, [r7, #12]
 800eb4e:	f004 fb09 	bl	8013164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eb52:	2300      	movs	r3, #0
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3710      	adds	r7, #16
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	60b9      	str	r1, [r7, #8]
 800eb66:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	68ba      	ldr	r2, [r7, #8]
 800eb6c:	2100      	movs	r1, #0
 800eb6e:	68f8      	ldr	r0, [r7, #12]
 800eb70:	f004 faf8 	bl	8013164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3710      	adds	r7, #16
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}

0800eb7e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800eb7e:	b580      	push	{r7, lr}
 800eb80:	b082      	sub	sp, #8
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2204      	movs	r2, #4
 800eb8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800eb8e:	2300      	movs	r3, #0
 800eb90:	2200      	movs	r2, #0
 800eb92:	2100      	movs	r1, #0
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f004 fac4 	bl	8013122 <USBD_LL_Transmit>

  return USBD_OK;
 800eb9a:	2300      	movs	r3, #0
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3708      	adds	r7, #8
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2205      	movs	r2, #5
 800ebb0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	2100      	movs	r1, #0
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f004 fad2 	bl	8013164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ebc0:	2300      	movs	r3, #0
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3708      	adds	r7, #8
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}
	...

0800ebcc <__NVIC_SetPriority>:
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b083      	sub	sp, #12
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	6039      	str	r1, [r7, #0]
 800ebd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ebd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	db0a      	blt.n	800ebf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	b2da      	uxtb	r2, r3
 800ebe4:	490c      	ldr	r1, [pc, #48]	@ (800ec18 <__NVIC_SetPriority+0x4c>)
 800ebe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ebea:	0112      	lsls	r2, r2, #4
 800ebec:	b2d2      	uxtb	r2, r2
 800ebee:	440b      	add	r3, r1
 800ebf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ebf4:	e00a      	b.n	800ec0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	b2da      	uxtb	r2, r3
 800ebfa:	4908      	ldr	r1, [pc, #32]	@ (800ec1c <__NVIC_SetPriority+0x50>)
 800ebfc:	79fb      	ldrb	r3, [r7, #7]
 800ebfe:	f003 030f 	and.w	r3, r3, #15
 800ec02:	3b04      	subs	r3, #4
 800ec04:	0112      	lsls	r2, r2, #4
 800ec06:	b2d2      	uxtb	r2, r2
 800ec08:	440b      	add	r3, r1
 800ec0a:	761a      	strb	r2, [r3, #24]
}
 800ec0c:	bf00      	nop
 800ec0e:	370c      	adds	r7, #12
 800ec10:	46bd      	mov	sp, r7
 800ec12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec16:	4770      	bx	lr
 800ec18:	e000e100 	.word	0xe000e100
 800ec1c:	e000ed00 	.word	0xe000ed00

0800ec20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ec20:	b580      	push	{r7, lr}
 800ec22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ec24:	4b05      	ldr	r3, [pc, #20]	@ (800ec3c <SysTick_Handler+0x1c>)
 800ec26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ec28:	f002 fac0 	bl	80111ac <xTaskGetSchedulerState>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	2b01      	cmp	r3, #1
 800ec30:	d001      	beq.n	800ec36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ec32:	f003 fbc1 	bl	80123b8 <xPortSysTickHandler>
  }
}
 800ec36:	bf00      	nop
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	e000e010 	.word	0xe000e010

0800ec40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ec40:	b580      	push	{r7, lr}
 800ec42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ec44:	2100      	movs	r1, #0
 800ec46:	f06f 0004 	mvn.w	r0, #4
 800ec4a:	f7ff ffbf 	bl	800ebcc <__NVIC_SetPriority>
#endif
}
 800ec4e:	bf00      	nop
 800ec50:	bd80      	pop	{r7, pc}
	...

0800ec54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ec54:	b480      	push	{r7}
 800ec56:	b083      	sub	sp, #12
 800ec58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec5a:	f3ef 8305 	mrs	r3, IPSR
 800ec5e:	603b      	str	r3, [r7, #0]
  return(result);
 800ec60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d003      	beq.n	800ec6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ec66:	f06f 0305 	mvn.w	r3, #5
 800ec6a:	607b      	str	r3, [r7, #4]
 800ec6c:	e00c      	b.n	800ec88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ec6e:	4b0a      	ldr	r3, [pc, #40]	@ (800ec98 <osKernelInitialize+0x44>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d105      	bne.n	800ec82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ec76:	4b08      	ldr	r3, [pc, #32]	@ (800ec98 <osKernelInitialize+0x44>)
 800ec78:	2201      	movs	r2, #1
 800ec7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	607b      	str	r3, [r7, #4]
 800ec80:	e002      	b.n	800ec88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ec82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ec86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ec88:	687b      	ldr	r3, [r7, #4]
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	370c      	adds	r7, #12
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr
 800ec96:	bf00      	nop
 800ec98:	20005964 	.word	0x20005964

0800ec9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b082      	sub	sp, #8
 800eca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eca2:	f3ef 8305 	mrs	r3, IPSR
 800eca6:	603b      	str	r3, [r7, #0]
  return(result);
 800eca8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d003      	beq.n	800ecb6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ecae:	f06f 0305 	mvn.w	r3, #5
 800ecb2:	607b      	str	r3, [r7, #4]
 800ecb4:	e010      	b.n	800ecd8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ecb6:	4b0b      	ldr	r3, [pc, #44]	@ (800ece4 <osKernelStart+0x48>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	2b01      	cmp	r3, #1
 800ecbc:	d109      	bne.n	800ecd2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ecbe:	f7ff ffbf 	bl	800ec40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ecc2:	4b08      	ldr	r3, [pc, #32]	@ (800ece4 <osKernelStart+0x48>)
 800ecc4:	2202      	movs	r2, #2
 800ecc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ecc8:	f001 fdce 	bl	8010868 <vTaskStartScheduler>
      stat = osOK;
 800eccc:	2300      	movs	r3, #0
 800ecce:	607b      	str	r3, [r7, #4]
 800ecd0:	e002      	b.n	800ecd8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ecd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ecd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ecd8:	687b      	ldr	r3, [r7, #4]
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3708      	adds	r7, #8
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
 800ece2:	bf00      	nop
 800ece4:	20005964 	.word	0x20005964

0800ece8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b082      	sub	sp, #8
 800ecec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ecee:	f3ef 8305 	mrs	r3, IPSR
 800ecf2:	603b      	str	r3, [r7, #0]
  return(result);
 800ecf4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d003      	beq.n	800ed02 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800ecfa:	f001 fee3 	bl	8010ac4 <xTaskGetTickCountFromISR>
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	e002      	b.n	800ed08 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800ed02:	f001 fecf 	bl	8010aa4 <xTaskGetTickCount>
 800ed06:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800ed08:	687b      	ldr	r3, [r7, #4]
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3708      	adds	r7, #8
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}

0800ed12 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800ed12:	b480      	push	{r7}
 800ed14:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800ed16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed22:	4770      	bx	lr

0800ed24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b08e      	sub	sp, #56	@ 0x38
 800ed28:	af04      	add	r7, sp, #16
 800ed2a:	60f8      	str	r0, [r7, #12]
 800ed2c:	60b9      	str	r1, [r7, #8]
 800ed2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ed30:	2300      	movs	r3, #0
 800ed32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed34:	f3ef 8305 	mrs	r3, IPSR
 800ed38:	617b      	str	r3, [r7, #20]
  return(result);
 800ed3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d17f      	bne.n	800ee40 <osThreadNew+0x11c>
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d07c      	beq.n	800ee40 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800ed46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ed4a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ed4c:	2318      	movs	r3, #24
 800ed4e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ed50:	2300      	movs	r3, #0
 800ed52:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ed54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ed58:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d045      	beq.n	800edec <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d002      	beq.n	800ed6e <osThreadNew+0x4a>
        name = attr->name;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	699b      	ldr	r3, [r3, #24]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d002      	beq.n	800ed7c <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	699b      	ldr	r3, [r3, #24]
 800ed7a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ed7c:	69fb      	ldr	r3, [r7, #28]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d008      	beq.n	800ed94 <osThreadNew+0x70>
 800ed82:	69fb      	ldr	r3, [r7, #28]
 800ed84:	2b38      	cmp	r3, #56	@ 0x38
 800ed86:	d805      	bhi.n	800ed94 <osThreadNew+0x70>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	f003 0301 	and.w	r3, r3, #1
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d001      	beq.n	800ed98 <osThreadNew+0x74>
        return (NULL);
 800ed94:	2300      	movs	r3, #0
 800ed96:	e054      	b.n	800ee42 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	695b      	ldr	r3, [r3, #20]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d003      	beq.n	800eda8 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	695b      	ldr	r3, [r3, #20]
 800eda4:	089b      	lsrs	r3, r3, #2
 800eda6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	689b      	ldr	r3, [r3, #8]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d00e      	beq.n	800edce <osThreadNew+0xaa>
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	68db      	ldr	r3, [r3, #12]
 800edb4:	2baf      	cmp	r3, #175	@ 0xaf
 800edb6:	d90a      	bls.n	800edce <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d006      	beq.n	800edce <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	695b      	ldr	r3, [r3, #20]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d002      	beq.n	800edce <osThreadNew+0xaa>
        mem = 1;
 800edc8:	2301      	movs	r3, #1
 800edca:	61bb      	str	r3, [r7, #24]
 800edcc:	e010      	b.n	800edf0 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	689b      	ldr	r3, [r3, #8]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d10c      	bne.n	800edf0 <osThreadNew+0xcc>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	68db      	ldr	r3, [r3, #12]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d108      	bne.n	800edf0 <osThreadNew+0xcc>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	691b      	ldr	r3, [r3, #16]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d104      	bne.n	800edf0 <osThreadNew+0xcc>
          mem = 0;
 800ede6:	2300      	movs	r3, #0
 800ede8:	61bb      	str	r3, [r7, #24]
 800edea:	e001      	b.n	800edf0 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800edec:	2300      	movs	r3, #0
 800edee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800edf0:	69bb      	ldr	r3, [r7, #24]
 800edf2:	2b01      	cmp	r3, #1
 800edf4:	d110      	bne.n	800ee18 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800edfa:	687a      	ldr	r2, [r7, #4]
 800edfc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800edfe:	9202      	str	r2, [sp, #8]
 800ee00:	9301      	str	r3, [sp, #4]
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	9300      	str	r3, [sp, #0]
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	6a3a      	ldr	r2, [r7, #32]
 800ee0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ee0c:	68f8      	ldr	r0, [r7, #12]
 800ee0e:	f001 fa41 	bl	8010294 <xTaskCreateStatic>
 800ee12:	4603      	mov	r3, r0
 800ee14:	613b      	str	r3, [r7, #16]
 800ee16:	e013      	b.n	800ee40 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800ee18:	69bb      	ldr	r3, [r7, #24]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d110      	bne.n	800ee40 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ee1e:	6a3b      	ldr	r3, [r7, #32]
 800ee20:	b29a      	uxth	r2, r3
 800ee22:	f107 0310 	add.w	r3, r7, #16
 800ee26:	9301      	str	r3, [sp, #4]
 800ee28:	69fb      	ldr	r3, [r7, #28]
 800ee2a:	9300      	str	r3, [sp, #0]
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ee30:	68f8      	ldr	r0, [r7, #12]
 800ee32:	f001 fa8f 	bl	8010354 <xTaskCreate>
 800ee36:	4603      	mov	r3, r0
 800ee38:	2b01      	cmp	r3, #1
 800ee3a:	d001      	beq.n	800ee40 <osThreadNew+0x11c>
            hTask = NULL;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ee40:	693b      	ldr	r3, [r7, #16]
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3728      	adds	r7, #40	@ 0x28
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
	...

0800ee4c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b088      	sub	sp, #32
 800ee50:	af02      	add	r7, sp, #8
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d002      	beq.n	800ee66 <osThreadFlagsSet+0x1a>
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	da03      	bge.n	800ee6e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800ee66:	f06f 0303 	mvn.w	r3, #3
 800ee6a:	60fb      	str	r3, [r7, #12]
 800ee6c:	e035      	b.n	800eeda <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800ee6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ee72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee74:	f3ef 8305 	mrs	r3, IPSR
 800ee78:	613b      	str	r3, [r7, #16]
  return(result);
 800ee7a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d01f      	beq.n	800eec0 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800ee80:	2300      	movs	r3, #0
 800ee82:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800ee84:	f107 0308 	add.w	r3, r7, #8
 800ee88:	9300      	str	r3, [sp, #0]
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	2201      	movs	r2, #1
 800ee8e:	6839      	ldr	r1, [r7, #0]
 800ee90:	6978      	ldr	r0, [r7, #20]
 800ee92:	f002 fc3b 	bl	801170c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800ee96:	f107 030c 	add.w	r3, r7, #12
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	9200      	str	r2, [sp, #0]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	2100      	movs	r1, #0
 800eea2:	6978      	ldr	r0, [r7, #20]
 800eea4:	f002 fc32 	bl	801170c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d015      	beq.n	800eeda <osThreadFlagsSet+0x8e>
 800eeae:	4b0d      	ldr	r3, [pc, #52]	@ (800eee4 <osThreadFlagsSet+0x98>)
 800eeb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eeb4:	601a      	str	r2, [r3, #0]
 800eeb6:	f3bf 8f4f 	dsb	sy
 800eeba:	f3bf 8f6f 	isb	sy
 800eebe:	e00c      	b.n	800eeda <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800eec0:	2300      	movs	r3, #0
 800eec2:	2201      	movs	r2, #1
 800eec4:	6839      	ldr	r1, [r7, #0]
 800eec6:	6978      	ldr	r0, [r7, #20]
 800eec8:	f002 fb5e 	bl	8011588 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800eecc:	f107 030c 	add.w	r3, r7, #12
 800eed0:	2200      	movs	r2, #0
 800eed2:	2100      	movs	r1, #0
 800eed4:	6978      	ldr	r0, [r7, #20]
 800eed6:	f002 fb57 	bl	8011588 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800eeda:	68fb      	ldr	r3, [r7, #12]
}
 800eedc:	4618      	mov	r0, r3
 800eede:	3718      	adds	r7, #24
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}
 800eee4:	e000ed04 	.word	0xe000ed04

0800eee8 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b08c      	sub	sp, #48	@ 0x30
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	60f8      	str	r0, [r7, #12]
 800eef0:	60b9      	str	r1, [r7, #8]
 800eef2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eef4:	f3ef 8305 	mrs	r3, IPSR
 800eef8:	617b      	str	r3, [r7, #20]
  return(result);
 800eefa:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d003      	beq.n	800ef08 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800ef00:	f06f 0305 	mvn.w	r3, #5
 800ef04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef06:	e06b      	b.n	800efe0 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	da03      	bge.n	800ef16 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800ef0e:	f06f 0303 	mvn.w	r3, #3
 800ef12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef14:	e064      	b.n	800efe0 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	f003 0302 	and.w	r3, r3, #2
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d002      	beq.n	800ef26 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800ef20:	2300      	movs	r3, #0
 800ef22:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ef24:	e001      	b.n	800ef2a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800ef32:	f001 fdb7 	bl	8010aa4 <xTaskGetTickCount>
 800ef36:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800ef38:	f107 0210 	add.w	r2, r7, #16
 800ef3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ef40:	2000      	movs	r0, #0
 800ef42:	f002 fac1 	bl	80114c8 <xTaskNotifyWait>
 800ef46:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800ef48:	69fb      	ldr	r3, [r7, #28]
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d137      	bne.n	800efbe <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800ef4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	4013      	ands	r3, r2
 800ef54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef5a:	4313      	orrs	r3, r2
 800ef5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	f003 0301 	and.w	r3, r3, #1
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d00c      	beq.n	800ef82 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800ef68:	68fa      	ldr	r2, [r7, #12]
 800ef6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef6c:	4013      	ands	r3, r2
 800ef6e:	68fa      	ldr	r2, [r7, #12]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d032      	beq.n	800efda <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d10f      	bne.n	800ef9a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800ef7a:	f06f 0302 	mvn.w	r3, #2
 800ef7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800ef80:	e02e      	b.n	800efe0 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800ef82:	68fa      	ldr	r2, [r7, #12]
 800ef84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef86:	4013      	ands	r3, r2
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d128      	bne.n	800efde <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d103      	bne.n	800ef9a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800ef92:	f06f 0302 	mvn.w	r3, #2
 800ef96:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800ef98:	e022      	b.n	800efe0 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800ef9a:	f001 fd83 	bl	8010aa4 <xTaskGetTickCount>
 800ef9e:	4602      	mov	r2, r0
 800efa0:	6a3b      	ldr	r3, [r7, #32]
 800efa2:	1ad3      	subs	r3, r2, r3
 800efa4:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800efa6:	69ba      	ldr	r2, [r7, #24]
 800efa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efaa:	429a      	cmp	r2, r3
 800efac:	d902      	bls.n	800efb4 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800efae:	2300      	movs	r3, #0
 800efb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800efb2:	e00e      	b.n	800efd2 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800efb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800efb6:	69bb      	ldr	r3, [r7, #24]
 800efb8:	1ad3      	subs	r3, r2, r3
 800efba:	627b      	str	r3, [r7, #36]	@ 0x24
 800efbc:	e009      	b.n	800efd2 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d103      	bne.n	800efcc <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800efc4:	f06f 0302 	mvn.w	r3, #2
 800efc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800efca:	e002      	b.n	800efd2 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800efcc:	f06f 0301 	mvn.w	r3, #1
 800efd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800efd2:	69fb      	ldr	r3, [r7, #28]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d1af      	bne.n	800ef38 <osThreadFlagsWait+0x50>
 800efd8:	e002      	b.n	800efe0 <osThreadFlagsWait+0xf8>
            break;
 800efda:	bf00      	nop
 800efdc:	e000      	b.n	800efe0 <osThreadFlagsWait+0xf8>
            break;
 800efde:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800efe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3730      	adds	r7, #48	@ 0x30
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}

0800efea <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800efea:	b580      	push	{r7, lr}
 800efec:	b084      	sub	sp, #16
 800efee:	af00      	add	r7, sp, #0
 800eff0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eff2:	f3ef 8305 	mrs	r3, IPSR
 800eff6:	60bb      	str	r3, [r7, #8]
  return(result);
 800eff8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800effa:	2b00      	cmp	r3, #0
 800effc:	d003      	beq.n	800f006 <osDelay+0x1c>
    stat = osErrorISR;
 800effe:	f06f 0305 	mvn.w	r3, #5
 800f002:	60fb      	str	r3, [r7, #12]
 800f004:	e007      	b.n	800f016 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f006:	2300      	movs	r3, #0
 800f008:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d002      	beq.n	800f016 <osDelay+0x2c>
      vTaskDelay(ticks);
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f001 fbf3 	bl	80107fc <vTaskDelay>
    }
  }

  return (stat);
 800f016:	68fb      	ldr	r3, [r7, #12]
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3710      	adds	r7, #16
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800f020:	b580      	push	{r7, lr}
 800f022:	b086      	sub	sp, #24
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f028:	f3ef 8305 	mrs	r3, IPSR
 800f02c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f02e:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800f030:	2b00      	cmp	r3, #0
 800f032:	d003      	beq.n	800f03c <osDelayUntil+0x1c>
    stat = osErrorISR;
 800f034:	f06f 0305 	mvn.w	r3, #5
 800f038:	617b      	str	r3, [r7, #20]
 800f03a:	e019      	b.n	800f070 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800f03c:	2300      	movs	r3, #0
 800f03e:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800f040:	f001 fd30 	bl	8010aa4 <xTaskGetTickCount>
 800f044:	4603      	mov	r3, r0
 800f046:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	687a      	ldr	r2, [r7, #4]
 800f04c:	1ad3      	subs	r3, r2, r3
 800f04e:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d009      	beq.n	800f06a <osDelayUntil+0x4a>
 800f056:	693b      	ldr	r3, [r7, #16]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	db06      	blt.n	800f06a <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800f05c:	f107 0308 	add.w	r3, r7, #8
 800f060:	6939      	ldr	r1, [r7, #16]
 800f062:	4618      	mov	r0, r3
 800f064:	f001 fb4a 	bl	80106fc <vTaskDelayUntil>
 800f068:	e002      	b.n	800f070 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800f06a:	f06f 0303 	mvn.w	r3, #3
 800f06e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f070:	697b      	ldr	r3, [r7, #20]
}
 800f072:	4618      	mov	r0, r3
 800f074:	3718      	adds	r7, #24
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}

0800f07a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f07a:	b580      	push	{r7, lr}
 800f07c:	b088      	sub	sp, #32
 800f07e:	af00      	add	r7, sp, #0
 800f080:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f082:	2300      	movs	r3, #0
 800f084:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f086:	f3ef 8305 	mrs	r3, IPSR
 800f08a:	60bb      	str	r3, [r7, #8]
  return(result);
 800f08c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d174      	bne.n	800f17c <osMutexNew+0x102>
    if (attr != NULL) {
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d003      	beq.n	800f0a0 <osMutexNew+0x26>
      type = attr->attr_bits;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	685b      	ldr	r3, [r3, #4]
 800f09c:	61bb      	str	r3, [r7, #24]
 800f09e:	e001      	b.n	800f0a4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f0a4:	69bb      	ldr	r3, [r7, #24]
 800f0a6:	f003 0301 	and.w	r3, r3, #1
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d002      	beq.n	800f0b4 <osMutexNew+0x3a>
      rmtx = 1U;
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	617b      	str	r3, [r7, #20]
 800f0b2:	e001      	b.n	800f0b8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800f0b8:	69bb      	ldr	r3, [r7, #24]
 800f0ba:	f003 0308 	and.w	r3, r3, #8
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d15c      	bne.n	800f17c <osMutexNew+0x102>
      mem = -1;
 800f0c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f0c6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d015      	beq.n	800f0fa <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	689b      	ldr	r3, [r3, #8]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d006      	beq.n	800f0e4 <osMutexNew+0x6a>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	68db      	ldr	r3, [r3, #12]
 800f0da:	2b4f      	cmp	r3, #79	@ 0x4f
 800f0dc:	d902      	bls.n	800f0e4 <osMutexNew+0x6a>
          mem = 1;
 800f0de:	2301      	movs	r3, #1
 800f0e0:	613b      	str	r3, [r7, #16]
 800f0e2:	e00c      	b.n	800f0fe <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	689b      	ldr	r3, [r3, #8]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d108      	bne.n	800f0fe <osMutexNew+0x84>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	68db      	ldr	r3, [r3, #12]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d104      	bne.n	800f0fe <osMutexNew+0x84>
            mem = 0;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	613b      	str	r3, [r7, #16]
 800f0f8:	e001      	b.n	800f0fe <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	2b01      	cmp	r3, #1
 800f102:	d112      	bne.n	800f12a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d007      	beq.n	800f11a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	689b      	ldr	r3, [r3, #8]
 800f10e:	4619      	mov	r1, r3
 800f110:	2004      	movs	r0, #4
 800f112:	f000 fb20 	bl	800f756 <xQueueCreateMutexStatic>
 800f116:	61f8      	str	r0, [r7, #28]
 800f118:	e016      	b.n	800f148 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	689b      	ldr	r3, [r3, #8]
 800f11e:	4619      	mov	r1, r3
 800f120:	2001      	movs	r0, #1
 800f122:	f000 fb18 	bl	800f756 <xQueueCreateMutexStatic>
 800f126:	61f8      	str	r0, [r7, #28]
 800f128:	e00e      	b.n	800f148 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d10b      	bne.n	800f148 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d004      	beq.n	800f140 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800f136:	2004      	movs	r0, #4
 800f138:	f000 faf5 	bl	800f726 <xQueueCreateMutex>
 800f13c:	61f8      	str	r0, [r7, #28]
 800f13e:	e003      	b.n	800f148 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800f140:	2001      	movs	r0, #1
 800f142:	f000 faf0 	bl	800f726 <xQueueCreateMutex>
 800f146:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f148:	69fb      	ldr	r3, [r7, #28]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d00c      	beq.n	800f168 <osMutexNew+0xee>
        if (attr != NULL) {
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d003      	beq.n	800f15c <osMutexNew+0xe2>
          name = attr->name;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	60fb      	str	r3, [r7, #12]
 800f15a:	e001      	b.n	800f160 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800f15c:	2300      	movs	r3, #0
 800f15e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800f160:	68f9      	ldr	r1, [r7, #12]
 800f162:	69f8      	ldr	r0, [r7, #28]
 800f164:	f001 f838 	bl	80101d8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f168:	69fb      	ldr	r3, [r7, #28]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d006      	beq.n	800f17c <osMutexNew+0x102>
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d003      	beq.n	800f17c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f174:	69fb      	ldr	r3, [r7, #28]
 800f176:	f043 0301 	orr.w	r3, r3, #1
 800f17a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f17c:	69fb      	ldr	r3, [r7, #28]
}
 800f17e:	4618      	mov	r0, r3
 800f180:	3720      	adds	r7, #32
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}

0800f186 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f186:	b580      	push	{r7, lr}
 800f188:	b086      	sub	sp, #24
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	6078      	str	r0, [r7, #4]
 800f18e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f023 0301 	bic.w	r3, r3, #1
 800f196:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f003 0301 	and.w	r3, r3, #1
 800f19e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1a4:	f3ef 8305 	mrs	r3, IPSR
 800f1a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800f1aa:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d003      	beq.n	800f1b8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800f1b0:	f06f 0305 	mvn.w	r3, #5
 800f1b4:	617b      	str	r3, [r7, #20]
 800f1b6:	e02c      	b.n	800f212 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d103      	bne.n	800f1c6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800f1be:	f06f 0303 	mvn.w	r3, #3
 800f1c2:	617b      	str	r3, [r7, #20]
 800f1c4:	e025      	b.n	800f212 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d011      	beq.n	800f1f0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f1cc:	6839      	ldr	r1, [r7, #0]
 800f1ce:	6938      	ldr	r0, [r7, #16]
 800f1d0:	f000 fb11 	bl	800f7f6 <xQueueTakeMutexRecursive>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	2b01      	cmp	r3, #1
 800f1d8:	d01b      	beq.n	800f212 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d003      	beq.n	800f1e8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800f1e0:	f06f 0301 	mvn.w	r3, #1
 800f1e4:	617b      	str	r3, [r7, #20]
 800f1e6:	e014      	b.n	800f212 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f1e8:	f06f 0302 	mvn.w	r3, #2
 800f1ec:	617b      	str	r3, [r7, #20]
 800f1ee:	e010      	b.n	800f212 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f1f0:	6839      	ldr	r1, [r7, #0]
 800f1f2:	6938      	ldr	r0, [r7, #16]
 800f1f4:	f000 fdb8 	bl	800fd68 <xQueueSemaphoreTake>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	d009      	beq.n	800f212 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d003      	beq.n	800f20c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800f204:	f06f 0301 	mvn.w	r3, #1
 800f208:	617b      	str	r3, [r7, #20]
 800f20a:	e002      	b.n	800f212 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f20c:	f06f 0302 	mvn.w	r3, #2
 800f210:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800f212:	697b      	ldr	r3, [r7, #20]
}
 800f214:	4618      	mov	r0, r3
 800f216:	3718      	adds	r7, #24
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}

0800f21c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b086      	sub	sp, #24
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f023 0301 	bic.w	r3, r3, #1
 800f22a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f003 0301 	and.w	r3, r3, #1
 800f232:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f234:	2300      	movs	r3, #0
 800f236:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f238:	f3ef 8305 	mrs	r3, IPSR
 800f23c:	60bb      	str	r3, [r7, #8]
  return(result);
 800f23e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f240:	2b00      	cmp	r3, #0
 800f242:	d003      	beq.n	800f24c <osMutexRelease+0x30>
    stat = osErrorISR;
 800f244:	f06f 0305 	mvn.w	r3, #5
 800f248:	617b      	str	r3, [r7, #20]
 800f24a:	e01f      	b.n	800f28c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d103      	bne.n	800f25a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800f252:	f06f 0303 	mvn.w	r3, #3
 800f256:	617b      	str	r3, [r7, #20]
 800f258:	e018      	b.n	800f28c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d009      	beq.n	800f274 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f260:	6938      	ldr	r0, [r7, #16]
 800f262:	f000 fa93 	bl	800f78c <xQueueGiveMutexRecursive>
 800f266:	4603      	mov	r3, r0
 800f268:	2b01      	cmp	r3, #1
 800f26a:	d00f      	beq.n	800f28c <osMutexRelease+0x70>
        stat = osErrorResource;
 800f26c:	f06f 0302 	mvn.w	r3, #2
 800f270:	617b      	str	r3, [r7, #20]
 800f272:	e00b      	b.n	800f28c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f274:	2300      	movs	r3, #0
 800f276:	2200      	movs	r2, #0
 800f278:	2100      	movs	r1, #0
 800f27a:	6938      	ldr	r0, [r7, #16]
 800f27c:	f000 faf2 	bl	800f864 <xQueueGenericSend>
 800f280:	4603      	mov	r3, r0
 800f282:	2b01      	cmp	r3, #1
 800f284:	d002      	beq.n	800f28c <osMutexRelease+0x70>
        stat = osErrorResource;
 800f286:	f06f 0302 	mvn.w	r3, #2
 800f28a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f28c:	697b      	ldr	r3, [r7, #20]
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3718      	adds	r7, #24
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
	...

0800f298 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f298:	b480      	push	{r7}
 800f29a:	b085      	sub	sp, #20
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	60f8      	str	r0, [r7, #12]
 800f2a0:	60b9      	str	r1, [r7, #8]
 800f2a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	4a07      	ldr	r2, [pc, #28]	@ (800f2c4 <vApplicationGetIdleTaskMemory+0x2c>)
 800f2a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	4a06      	ldr	r2, [pc, #24]	@ (800f2c8 <vApplicationGetIdleTaskMemory+0x30>)
 800f2ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f2b6:	601a      	str	r2, [r3, #0]
}
 800f2b8:	bf00      	nop
 800f2ba:	3714      	adds	r7, #20
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr
 800f2c4:	20005968 	.word	0x20005968
 800f2c8:	20005a18 	.word	0x20005a18

0800f2cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f2cc:	b480      	push	{r7}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	60f8      	str	r0, [r7, #12]
 800f2d4:	60b9      	str	r1, [r7, #8]
 800f2d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	4a07      	ldr	r2, [pc, #28]	@ (800f2f8 <vApplicationGetTimerTaskMemory+0x2c>)
 800f2dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	4a06      	ldr	r2, [pc, #24]	@ (800f2fc <vApplicationGetTimerTaskMemory+0x30>)
 800f2e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f2ea:	601a      	str	r2, [r3, #0]
}
 800f2ec:	bf00      	nop
 800f2ee:	3714      	adds	r7, #20
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr
 800f2f8:	20005e18 	.word	0x20005e18
 800f2fc:	20005ec8 	.word	0x20005ec8

0800f300 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f300:	b480      	push	{r7}
 800f302:	b083      	sub	sp, #12
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f103 0208 	add.w	r2, r3, #8
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f318:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f103 0208 	add.w	r2, r3, #8
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f103 0208 	add.w	r2, r3, #8
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2200      	movs	r2, #0
 800f332:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f334:	bf00      	nop
 800f336:	370c      	adds	r7, #12
 800f338:	46bd      	mov	sp, r7
 800f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33e:	4770      	bx	lr

0800f340 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f340:	b480      	push	{r7}
 800f342:	b083      	sub	sp, #12
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2200      	movs	r2, #0
 800f34c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f34e:	bf00      	nop
 800f350:	370c      	adds	r7, #12
 800f352:	46bd      	mov	sp, r7
 800f354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f358:	4770      	bx	lr

0800f35a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f35a:	b480      	push	{r7}
 800f35c:	b085      	sub	sp, #20
 800f35e:	af00      	add	r7, sp, #0
 800f360:	6078      	str	r0, [r7, #4]
 800f362:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	685b      	ldr	r3, [r3, #4]
 800f368:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	68fa      	ldr	r2, [r7, #12]
 800f36e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	689a      	ldr	r2, [r3, #8]
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	689b      	ldr	r3, [r3, #8]
 800f37c:	683a      	ldr	r2, [r7, #0]
 800f37e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	683a      	ldr	r2, [r7, #0]
 800f384:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	687a      	ldr	r2, [r7, #4]
 800f38a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	1c5a      	adds	r2, r3, #1
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	601a      	str	r2, [r3, #0]
}
 800f396:	bf00      	nop
 800f398:	3714      	adds	r7, #20
 800f39a:	46bd      	mov	sp, r7
 800f39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a0:	4770      	bx	lr

0800f3a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f3a2:	b480      	push	{r7}
 800f3a4:	b085      	sub	sp, #20
 800f3a6:	af00      	add	r7, sp, #0
 800f3a8:	6078      	str	r0, [r7, #4]
 800f3aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f3b8:	d103      	bne.n	800f3c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	691b      	ldr	r3, [r3, #16]
 800f3be:	60fb      	str	r3, [r7, #12]
 800f3c0:	e00c      	b.n	800f3dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	3308      	adds	r3, #8
 800f3c6:	60fb      	str	r3, [r7, #12]
 800f3c8:	e002      	b.n	800f3d0 <vListInsert+0x2e>
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	60fb      	str	r3, [r7, #12]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	685b      	ldr	r3, [r3, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	68ba      	ldr	r2, [r7, #8]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	d2f6      	bcs.n	800f3ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	685a      	ldr	r2, [r3, #4]
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	685b      	ldr	r3, [r3, #4]
 800f3e8:	683a      	ldr	r2, [r7, #0]
 800f3ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	68fa      	ldr	r2, [r7, #12]
 800f3f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	683a      	ldr	r2, [r7, #0]
 800f3f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	687a      	ldr	r2, [r7, #4]
 800f3fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	1c5a      	adds	r2, r3, #1
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	601a      	str	r2, [r3, #0]
}
 800f408:	bf00      	nop
 800f40a:	3714      	adds	r7, #20
 800f40c:	46bd      	mov	sp, r7
 800f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f412:	4770      	bx	lr

0800f414 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f414:	b480      	push	{r7}
 800f416:	b085      	sub	sp, #20
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	691b      	ldr	r3, [r3, #16]
 800f420:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	685b      	ldr	r3, [r3, #4]
 800f426:	687a      	ldr	r2, [r7, #4]
 800f428:	6892      	ldr	r2, [r2, #8]
 800f42a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	689b      	ldr	r3, [r3, #8]
 800f430:	687a      	ldr	r2, [r7, #4]
 800f432:	6852      	ldr	r2, [r2, #4]
 800f434:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	687a      	ldr	r2, [r7, #4]
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d103      	bne.n	800f448 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	689a      	ldr	r2, [r3, #8]
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2200      	movs	r2, #0
 800f44c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	1e5a      	subs	r2, r3, #1
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	681b      	ldr	r3, [r3, #0]
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3714      	adds	r7, #20
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr

0800f468 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b084      	sub	sp, #16
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
 800f470:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d10b      	bne.n	800f494 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f480:	f383 8811 	msr	BASEPRI, r3
 800f484:	f3bf 8f6f 	isb	sy
 800f488:	f3bf 8f4f 	dsb	sy
 800f48c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f48e:	bf00      	nop
 800f490:	bf00      	nop
 800f492:	e7fd      	b.n	800f490 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f494:	f002 ff00 	bl	8012298 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4a0:	68f9      	ldr	r1, [r7, #12]
 800f4a2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f4a4:	fb01 f303 	mul.w	r3, r1, r3
 800f4a8:	441a      	add	r2, r3
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	681a      	ldr	r2, [r3, #0]
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681a      	ldr	r2, [r3, #0]
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4c4:	3b01      	subs	r3, #1
 800f4c6:	68f9      	ldr	r1, [r7, #12]
 800f4c8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f4ca:	fb01 f303 	mul.w	r3, r1, r3
 800f4ce:	441a      	add	r2, r3
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	22ff      	movs	r2, #255	@ 0xff
 800f4d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	22ff      	movs	r2, #255	@ 0xff
 800f4e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d114      	bne.n	800f514 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	691b      	ldr	r3, [r3, #16]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d01a      	beq.n	800f528 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	3310      	adds	r3, #16
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f001 fc82 	bl	8010e00 <xTaskRemoveFromEventList>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d012      	beq.n	800f528 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f502:	4b0d      	ldr	r3, [pc, #52]	@ (800f538 <xQueueGenericReset+0xd0>)
 800f504:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f508:	601a      	str	r2, [r3, #0]
 800f50a:	f3bf 8f4f 	dsb	sy
 800f50e:	f3bf 8f6f 	isb	sy
 800f512:	e009      	b.n	800f528 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	3310      	adds	r3, #16
 800f518:	4618      	mov	r0, r3
 800f51a:	f7ff fef1 	bl	800f300 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	3324      	adds	r3, #36	@ 0x24
 800f522:	4618      	mov	r0, r3
 800f524:	f7ff feec 	bl	800f300 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f528:	f002 fee8 	bl	80122fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f52c:	2301      	movs	r3, #1
}
 800f52e:	4618      	mov	r0, r3
 800f530:	3710      	adds	r7, #16
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
 800f536:	bf00      	nop
 800f538:	e000ed04 	.word	0xe000ed04

0800f53c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b08e      	sub	sp, #56	@ 0x38
 800f540:	af02      	add	r7, sp, #8
 800f542:	60f8      	str	r0, [r7, #12]
 800f544:	60b9      	str	r1, [r7, #8]
 800f546:	607a      	str	r2, [r7, #4]
 800f548:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d10b      	bne.n	800f568 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800f550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f554:	f383 8811 	msr	BASEPRI, r3
 800f558:	f3bf 8f6f 	isb	sy
 800f55c:	f3bf 8f4f 	dsb	sy
 800f560:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f562:	bf00      	nop
 800f564:	bf00      	nop
 800f566:	e7fd      	b.n	800f564 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d10b      	bne.n	800f586 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800f56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f572:	f383 8811 	msr	BASEPRI, r3
 800f576:	f3bf 8f6f 	isb	sy
 800f57a:	f3bf 8f4f 	dsb	sy
 800f57e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f580:	bf00      	nop
 800f582:	bf00      	nop
 800f584:	e7fd      	b.n	800f582 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d002      	beq.n	800f592 <xQueueGenericCreateStatic+0x56>
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d001      	beq.n	800f596 <xQueueGenericCreateStatic+0x5a>
 800f592:	2301      	movs	r3, #1
 800f594:	e000      	b.n	800f598 <xQueueGenericCreateStatic+0x5c>
 800f596:	2300      	movs	r3, #0
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d10b      	bne.n	800f5b4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800f59c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5a0:	f383 8811 	msr	BASEPRI, r3
 800f5a4:	f3bf 8f6f 	isb	sy
 800f5a8:	f3bf 8f4f 	dsb	sy
 800f5ac:	623b      	str	r3, [r7, #32]
}
 800f5ae:	bf00      	nop
 800f5b0:	bf00      	nop
 800f5b2:	e7fd      	b.n	800f5b0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d102      	bne.n	800f5c0 <xQueueGenericCreateStatic+0x84>
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d101      	bne.n	800f5c4 <xQueueGenericCreateStatic+0x88>
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	e000      	b.n	800f5c6 <xQueueGenericCreateStatic+0x8a>
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d10b      	bne.n	800f5e2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800f5ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5ce:	f383 8811 	msr	BASEPRI, r3
 800f5d2:	f3bf 8f6f 	isb	sy
 800f5d6:	f3bf 8f4f 	dsb	sy
 800f5da:	61fb      	str	r3, [r7, #28]
}
 800f5dc:	bf00      	nop
 800f5de:	bf00      	nop
 800f5e0:	e7fd      	b.n	800f5de <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f5e2:	2350      	movs	r3, #80	@ 0x50
 800f5e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	2b50      	cmp	r3, #80	@ 0x50
 800f5ea:	d00b      	beq.n	800f604 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800f5ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5f0:	f383 8811 	msr	BASEPRI, r3
 800f5f4:	f3bf 8f6f 	isb	sy
 800f5f8:	f3bf 8f4f 	dsb	sy
 800f5fc:	61bb      	str	r3, [r7, #24]
}
 800f5fe:	bf00      	nop
 800f600:	bf00      	nop
 800f602:	e7fd      	b.n	800f600 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f604:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f60a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d00d      	beq.n	800f62c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f612:	2201      	movs	r2, #1
 800f614:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f618:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f61c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f61e:	9300      	str	r3, [sp, #0]
 800f620:	4613      	mov	r3, r2
 800f622:	687a      	ldr	r2, [r7, #4]
 800f624:	68b9      	ldr	r1, [r7, #8]
 800f626:	68f8      	ldr	r0, [r7, #12]
 800f628:	f000 f840 	bl	800f6ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f62e:	4618      	mov	r0, r3
 800f630:	3730      	adds	r7, #48	@ 0x30
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}

0800f636 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f636:	b580      	push	{r7, lr}
 800f638:	b08a      	sub	sp, #40	@ 0x28
 800f63a:	af02      	add	r7, sp, #8
 800f63c:	60f8      	str	r0, [r7, #12]
 800f63e:	60b9      	str	r1, [r7, #8]
 800f640:	4613      	mov	r3, r2
 800f642:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d10b      	bne.n	800f662 <xQueueGenericCreate+0x2c>
	__asm volatile
 800f64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f64e:	f383 8811 	msr	BASEPRI, r3
 800f652:	f3bf 8f6f 	isb	sy
 800f656:	f3bf 8f4f 	dsb	sy
 800f65a:	613b      	str	r3, [r7, #16]
}
 800f65c:	bf00      	nop
 800f65e:	bf00      	nop
 800f660:	e7fd      	b.n	800f65e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	68ba      	ldr	r2, [r7, #8]
 800f666:	fb02 f303 	mul.w	r3, r2, r3
 800f66a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f66c:	69fb      	ldr	r3, [r7, #28]
 800f66e:	3350      	adds	r3, #80	@ 0x50
 800f670:	4618      	mov	r0, r3
 800f672:	f002 ff33 	bl	80124dc <pvPortMalloc>
 800f676:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f678:	69bb      	ldr	r3, [r7, #24]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d011      	beq.n	800f6a2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f67e:	69bb      	ldr	r3, [r7, #24]
 800f680:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	3350      	adds	r3, #80	@ 0x50
 800f686:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f688:	69bb      	ldr	r3, [r7, #24]
 800f68a:	2200      	movs	r2, #0
 800f68c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f690:	79fa      	ldrb	r2, [r7, #7]
 800f692:	69bb      	ldr	r3, [r7, #24]
 800f694:	9300      	str	r3, [sp, #0]
 800f696:	4613      	mov	r3, r2
 800f698:	697a      	ldr	r2, [r7, #20]
 800f69a:	68b9      	ldr	r1, [r7, #8]
 800f69c:	68f8      	ldr	r0, [r7, #12]
 800f69e:	f000 f805 	bl	800f6ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f6a2:	69bb      	ldr	r3, [r7, #24]
	}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3720      	adds	r7, #32
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	60f8      	str	r0, [r7, #12]
 800f6b4:	60b9      	str	r1, [r7, #8]
 800f6b6:	607a      	str	r2, [r7, #4]
 800f6b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d103      	bne.n	800f6c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f6c0:	69bb      	ldr	r3, [r7, #24]
 800f6c2:	69ba      	ldr	r2, [r7, #24]
 800f6c4:	601a      	str	r2, [r3, #0]
 800f6c6:	e002      	b.n	800f6ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f6c8:	69bb      	ldr	r3, [r7, #24]
 800f6ca:	687a      	ldr	r2, [r7, #4]
 800f6cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f6ce:	69bb      	ldr	r3, [r7, #24]
 800f6d0:	68fa      	ldr	r2, [r7, #12]
 800f6d2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f6d4:	69bb      	ldr	r3, [r7, #24]
 800f6d6:	68ba      	ldr	r2, [r7, #8]
 800f6d8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f6da:	2101      	movs	r1, #1
 800f6dc:	69b8      	ldr	r0, [r7, #24]
 800f6de:	f7ff fec3 	bl	800f468 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f6e2:	69bb      	ldr	r3, [r7, #24]
 800f6e4:	78fa      	ldrb	r2, [r7, #3]
 800f6e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f6ea:	bf00      	nop
 800f6ec:	3710      	adds	r7, #16
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}

0800f6f2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f6f2:	b580      	push	{r7, lr}
 800f6f4:	b082      	sub	sp, #8
 800f6f6:	af00      	add	r7, sp, #0
 800f6f8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d00e      	beq.n	800f71e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2200      	movs	r2, #0
 800f704:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2200      	movs	r2, #0
 800f70a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2200      	movs	r2, #0
 800f710:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f712:	2300      	movs	r3, #0
 800f714:	2200      	movs	r2, #0
 800f716:	2100      	movs	r1, #0
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f000 f8a3 	bl	800f864 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f71e:	bf00      	nop
 800f720:	3708      	adds	r7, #8
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}

0800f726 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f726:	b580      	push	{r7, lr}
 800f728:	b086      	sub	sp, #24
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	4603      	mov	r3, r0
 800f72e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f730:	2301      	movs	r3, #1
 800f732:	617b      	str	r3, [r7, #20]
 800f734:	2300      	movs	r3, #0
 800f736:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f738:	79fb      	ldrb	r3, [r7, #7]
 800f73a:	461a      	mov	r2, r3
 800f73c:	6939      	ldr	r1, [r7, #16]
 800f73e:	6978      	ldr	r0, [r7, #20]
 800f740:	f7ff ff79 	bl	800f636 <xQueueGenericCreate>
 800f744:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f746:	68f8      	ldr	r0, [r7, #12]
 800f748:	f7ff ffd3 	bl	800f6f2 <prvInitialiseMutex>

		return xNewQueue;
 800f74c:	68fb      	ldr	r3, [r7, #12]
	}
 800f74e:	4618      	mov	r0, r3
 800f750:	3718      	adds	r7, #24
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}

0800f756 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f756:	b580      	push	{r7, lr}
 800f758:	b088      	sub	sp, #32
 800f75a:	af02      	add	r7, sp, #8
 800f75c:	4603      	mov	r3, r0
 800f75e:	6039      	str	r1, [r7, #0]
 800f760:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f762:	2301      	movs	r3, #1
 800f764:	617b      	str	r3, [r7, #20]
 800f766:	2300      	movs	r3, #0
 800f768:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f76a:	79fb      	ldrb	r3, [r7, #7]
 800f76c:	9300      	str	r3, [sp, #0]
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	2200      	movs	r2, #0
 800f772:	6939      	ldr	r1, [r7, #16]
 800f774:	6978      	ldr	r0, [r7, #20]
 800f776:	f7ff fee1 	bl	800f53c <xQueueGenericCreateStatic>
 800f77a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f77c:	68f8      	ldr	r0, [r7, #12]
 800f77e:	f7ff ffb8 	bl	800f6f2 <prvInitialiseMutex>

		return xNewQueue;
 800f782:	68fb      	ldr	r3, [r7, #12]
	}
 800f784:	4618      	mov	r0, r3
 800f786:	3718      	adds	r7, #24
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}

0800f78c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800f78c:	b590      	push	{r4, r7, lr}
 800f78e:	b087      	sub	sp, #28
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d10b      	bne.n	800f7b6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800f79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7a2:	f383 8811 	msr	BASEPRI, r3
 800f7a6:	f3bf 8f6f 	isb	sy
 800f7aa:	f3bf 8f4f 	dsb	sy
 800f7ae:	60fb      	str	r3, [r7, #12]
}
 800f7b0:	bf00      	nop
 800f7b2:	bf00      	nop
 800f7b4:	e7fd      	b.n	800f7b2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f7b6:	693b      	ldr	r3, [r7, #16]
 800f7b8:	689c      	ldr	r4, [r3, #8]
 800f7ba:	f001 fce7 	bl	801118c <xTaskGetCurrentTaskHandle>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	429c      	cmp	r4, r3
 800f7c2:	d111      	bne.n	800f7e8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	68db      	ldr	r3, [r3, #12]
 800f7c8:	1e5a      	subs	r2, r3, #1
 800f7ca:	693b      	ldr	r3, [r7, #16]
 800f7cc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f7ce:	693b      	ldr	r3, [r7, #16]
 800f7d0:	68db      	ldr	r3, [r3, #12]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d105      	bne.n	800f7e2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	2200      	movs	r2, #0
 800f7da:	2100      	movs	r1, #0
 800f7dc:	6938      	ldr	r0, [r7, #16]
 800f7de:	f000 f841 	bl	800f864 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	617b      	str	r3, [r7, #20]
 800f7e6:	e001      	b.n	800f7ec <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800f7ec:	697b      	ldr	r3, [r7, #20]
	}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	371c      	adds	r7, #28
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd90      	pop	{r4, r7, pc}

0800f7f6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800f7f6:	b590      	push	{r4, r7, lr}
 800f7f8:	b087      	sub	sp, #28
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	6078      	str	r0, [r7, #4]
 800f7fe:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d10b      	bne.n	800f822 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800f80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f80e:	f383 8811 	msr	BASEPRI, r3
 800f812:	f3bf 8f6f 	isb	sy
 800f816:	f3bf 8f4f 	dsb	sy
 800f81a:	60fb      	str	r3, [r7, #12]
}
 800f81c:	bf00      	nop
 800f81e:	bf00      	nop
 800f820:	e7fd      	b.n	800f81e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	689c      	ldr	r4, [r3, #8]
 800f826:	f001 fcb1 	bl	801118c <xTaskGetCurrentTaskHandle>
 800f82a:	4603      	mov	r3, r0
 800f82c:	429c      	cmp	r4, r3
 800f82e:	d107      	bne.n	800f840 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f830:	693b      	ldr	r3, [r7, #16]
 800f832:	68db      	ldr	r3, [r3, #12]
 800f834:	1c5a      	adds	r2, r3, #1
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800f83a:	2301      	movs	r3, #1
 800f83c:	617b      	str	r3, [r7, #20]
 800f83e:	e00c      	b.n	800f85a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f840:	6839      	ldr	r1, [r7, #0]
 800f842:	6938      	ldr	r0, [r7, #16]
 800f844:	f000 fa90 	bl	800fd68 <xQueueSemaphoreTake>
 800f848:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d004      	beq.n	800f85a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	68db      	ldr	r3, [r3, #12]
 800f854:	1c5a      	adds	r2, r3, #1
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800f85a:	697b      	ldr	r3, [r7, #20]
	}
 800f85c:	4618      	mov	r0, r3
 800f85e:	371c      	adds	r7, #28
 800f860:	46bd      	mov	sp, r7
 800f862:	bd90      	pop	{r4, r7, pc}

0800f864 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b08e      	sub	sp, #56	@ 0x38
 800f868:	af00      	add	r7, sp, #0
 800f86a:	60f8      	str	r0, [r7, #12]
 800f86c:	60b9      	str	r1, [r7, #8]
 800f86e:	607a      	str	r2, [r7, #4]
 800f870:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f872:	2300      	movs	r3, #0
 800f874:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d10b      	bne.n	800f898 <xQueueGenericSend+0x34>
	__asm volatile
 800f880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f884:	f383 8811 	msr	BASEPRI, r3
 800f888:	f3bf 8f6f 	isb	sy
 800f88c:	f3bf 8f4f 	dsb	sy
 800f890:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f892:	bf00      	nop
 800f894:	bf00      	nop
 800f896:	e7fd      	b.n	800f894 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d103      	bne.n	800f8a6 <xQueueGenericSend+0x42>
 800f89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d101      	bne.n	800f8aa <xQueueGenericSend+0x46>
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	e000      	b.n	800f8ac <xQueueGenericSend+0x48>
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d10b      	bne.n	800f8c8 <xQueueGenericSend+0x64>
	__asm volatile
 800f8b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8b4:	f383 8811 	msr	BASEPRI, r3
 800f8b8:	f3bf 8f6f 	isb	sy
 800f8bc:	f3bf 8f4f 	dsb	sy
 800f8c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f8c2:	bf00      	nop
 800f8c4:	bf00      	nop
 800f8c6:	e7fd      	b.n	800f8c4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	2b02      	cmp	r3, #2
 800f8cc:	d103      	bne.n	800f8d6 <xQueueGenericSend+0x72>
 800f8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8d2:	2b01      	cmp	r3, #1
 800f8d4:	d101      	bne.n	800f8da <xQueueGenericSend+0x76>
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	e000      	b.n	800f8dc <xQueueGenericSend+0x78>
 800f8da:	2300      	movs	r3, #0
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d10b      	bne.n	800f8f8 <xQueueGenericSend+0x94>
	__asm volatile
 800f8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8e4:	f383 8811 	msr	BASEPRI, r3
 800f8e8:	f3bf 8f6f 	isb	sy
 800f8ec:	f3bf 8f4f 	dsb	sy
 800f8f0:	623b      	str	r3, [r7, #32]
}
 800f8f2:	bf00      	nop
 800f8f4:	bf00      	nop
 800f8f6:	e7fd      	b.n	800f8f4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f8f8:	f001 fc58 	bl	80111ac <xTaskGetSchedulerState>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d102      	bne.n	800f908 <xQueueGenericSend+0xa4>
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d101      	bne.n	800f90c <xQueueGenericSend+0xa8>
 800f908:	2301      	movs	r3, #1
 800f90a:	e000      	b.n	800f90e <xQueueGenericSend+0xaa>
 800f90c:	2300      	movs	r3, #0
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d10b      	bne.n	800f92a <xQueueGenericSend+0xc6>
	__asm volatile
 800f912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f916:	f383 8811 	msr	BASEPRI, r3
 800f91a:	f3bf 8f6f 	isb	sy
 800f91e:	f3bf 8f4f 	dsb	sy
 800f922:	61fb      	str	r3, [r7, #28]
}
 800f924:	bf00      	nop
 800f926:	bf00      	nop
 800f928:	e7fd      	b.n	800f926 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f92a:	f002 fcb5 	bl	8012298 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f930:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f936:	429a      	cmp	r2, r3
 800f938:	d302      	bcc.n	800f940 <xQueueGenericSend+0xdc>
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	2b02      	cmp	r3, #2
 800f93e:	d129      	bne.n	800f994 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f940:	683a      	ldr	r2, [r7, #0]
 800f942:	68b9      	ldr	r1, [r7, #8]
 800f944:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f946:	f000 fb37 	bl	800ffb8 <prvCopyDataToQueue>
 800f94a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f94e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f950:	2b00      	cmp	r3, #0
 800f952:	d010      	beq.n	800f976 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f956:	3324      	adds	r3, #36	@ 0x24
 800f958:	4618      	mov	r0, r3
 800f95a:	f001 fa51 	bl	8010e00 <xTaskRemoveFromEventList>
 800f95e:	4603      	mov	r3, r0
 800f960:	2b00      	cmp	r3, #0
 800f962:	d013      	beq.n	800f98c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f964:	4b3f      	ldr	r3, [pc, #252]	@ (800fa64 <xQueueGenericSend+0x200>)
 800f966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f96a:	601a      	str	r2, [r3, #0]
 800f96c:	f3bf 8f4f 	dsb	sy
 800f970:	f3bf 8f6f 	isb	sy
 800f974:	e00a      	b.n	800f98c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d007      	beq.n	800f98c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f97c:	4b39      	ldr	r3, [pc, #228]	@ (800fa64 <xQueueGenericSend+0x200>)
 800f97e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f982:	601a      	str	r2, [r3, #0]
 800f984:	f3bf 8f4f 	dsb	sy
 800f988:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f98c:	f002 fcb6 	bl	80122fc <vPortExitCritical>
				return pdPASS;
 800f990:	2301      	movs	r3, #1
 800f992:	e063      	b.n	800fa5c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d103      	bne.n	800f9a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f99a:	f002 fcaf 	bl	80122fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	e05c      	b.n	800fa5c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f9a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d106      	bne.n	800f9b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f9a8:	f107 0314 	add.w	r3, r7, #20
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f001 fa8b 	bl	8010ec8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f9b6:	f002 fca1 	bl	80122fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f9ba:	f000 ffc7 	bl	801094c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f9be:	f002 fc6b 	bl	8012298 <vPortEnterCritical>
 800f9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f9c8:	b25b      	sxtb	r3, r3
 800f9ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f9ce:	d103      	bne.n	800f9d8 <xQueueGenericSend+0x174>
 800f9d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f9d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f9de:	b25b      	sxtb	r3, r3
 800f9e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f9e4:	d103      	bne.n	800f9ee <xQueueGenericSend+0x18a>
 800f9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f9ee:	f002 fc85 	bl	80122fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f9f2:	1d3a      	adds	r2, r7, #4
 800f9f4:	f107 0314 	add.w	r3, r7, #20
 800f9f8:	4611      	mov	r1, r2
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f001 fa7a 	bl	8010ef4 <xTaskCheckForTimeOut>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d124      	bne.n	800fa50 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fa06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fa08:	f000 fbce 	bl	80101a8 <prvIsQueueFull>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d018      	beq.n	800fa44 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fa12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa14:	3310      	adds	r3, #16
 800fa16:	687a      	ldr	r2, [r7, #4]
 800fa18:	4611      	mov	r1, r2
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f001 f99e 	bl	8010d5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fa20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fa22:	f000 fb59 	bl	80100d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fa26:	f000 ff9f 	bl	8010968 <xTaskResumeAll>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	f47f af7c 	bne.w	800f92a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800fa32:	4b0c      	ldr	r3, [pc, #48]	@ (800fa64 <xQueueGenericSend+0x200>)
 800fa34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa38:	601a      	str	r2, [r3, #0]
 800fa3a:	f3bf 8f4f 	dsb	sy
 800fa3e:	f3bf 8f6f 	isb	sy
 800fa42:	e772      	b.n	800f92a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fa44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fa46:	f000 fb47 	bl	80100d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa4a:	f000 ff8d 	bl	8010968 <xTaskResumeAll>
 800fa4e:	e76c      	b.n	800f92a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fa50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fa52:	f000 fb41 	bl	80100d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa56:	f000 ff87 	bl	8010968 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fa5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3738      	adds	r7, #56	@ 0x38
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	e000ed04 	.word	0xe000ed04

0800fa68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b090      	sub	sp, #64	@ 0x40
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	60f8      	str	r0, [r7, #12]
 800fa70:	60b9      	str	r1, [r7, #8]
 800fa72:	607a      	str	r2, [r7, #4]
 800fa74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800fa7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d10b      	bne.n	800fa98 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800fa80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa84:	f383 8811 	msr	BASEPRI, r3
 800fa88:	f3bf 8f6f 	isb	sy
 800fa8c:	f3bf 8f4f 	dsb	sy
 800fa90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fa92:	bf00      	nop
 800fa94:	bf00      	nop
 800fa96:	e7fd      	b.n	800fa94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d103      	bne.n	800faa6 <xQueueGenericSendFromISR+0x3e>
 800fa9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d101      	bne.n	800faaa <xQueueGenericSendFromISR+0x42>
 800faa6:	2301      	movs	r3, #1
 800faa8:	e000      	b.n	800faac <xQueueGenericSendFromISR+0x44>
 800faaa:	2300      	movs	r3, #0
 800faac:	2b00      	cmp	r3, #0
 800faae:	d10b      	bne.n	800fac8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800fab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fab4:	f383 8811 	msr	BASEPRI, r3
 800fab8:	f3bf 8f6f 	isb	sy
 800fabc:	f3bf 8f4f 	dsb	sy
 800fac0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fac2:	bf00      	nop
 800fac4:	bf00      	nop
 800fac6:	e7fd      	b.n	800fac4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	2b02      	cmp	r3, #2
 800facc:	d103      	bne.n	800fad6 <xQueueGenericSendFromISR+0x6e>
 800face:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fad2:	2b01      	cmp	r3, #1
 800fad4:	d101      	bne.n	800fada <xQueueGenericSendFromISR+0x72>
 800fad6:	2301      	movs	r3, #1
 800fad8:	e000      	b.n	800fadc <xQueueGenericSendFromISR+0x74>
 800fada:	2300      	movs	r3, #0
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d10b      	bne.n	800faf8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800fae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fae4:	f383 8811 	msr	BASEPRI, r3
 800fae8:	f3bf 8f6f 	isb	sy
 800faec:	f3bf 8f4f 	dsb	sy
 800faf0:	623b      	str	r3, [r7, #32]
}
 800faf2:	bf00      	nop
 800faf4:	bf00      	nop
 800faf6:	e7fd      	b.n	800faf4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800faf8:	f002 fcae 	bl	8012458 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fafc:	f3ef 8211 	mrs	r2, BASEPRI
 800fb00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb04:	f383 8811 	msr	BASEPRI, r3
 800fb08:	f3bf 8f6f 	isb	sy
 800fb0c:	f3bf 8f4f 	dsb	sy
 800fb10:	61fa      	str	r2, [r7, #28]
 800fb12:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fb14:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fb16:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fb18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fb1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d302      	bcc.n	800fb2a <xQueueGenericSendFromISR+0xc2>
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	2b02      	cmp	r3, #2
 800fb28:	d12f      	bne.n	800fb8a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fb2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fb30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fb34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb38:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fb3a:	683a      	ldr	r2, [r7, #0]
 800fb3c:	68b9      	ldr	r1, [r7, #8]
 800fb3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fb40:	f000 fa3a 	bl	800ffb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fb44:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800fb48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fb4c:	d112      	bne.n	800fb74 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d016      	beq.n	800fb84 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb58:	3324      	adds	r3, #36	@ 0x24
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f001 f950 	bl	8010e00 <xTaskRemoveFromEventList>
 800fb60:	4603      	mov	r3, r0
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d00e      	beq.n	800fb84 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d00b      	beq.n	800fb84 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2201      	movs	r2, #1
 800fb70:	601a      	str	r2, [r3, #0]
 800fb72:	e007      	b.n	800fb84 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fb74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800fb78:	3301      	adds	r3, #1
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	b25a      	sxtb	r2, r3
 800fb7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fb84:	2301      	movs	r3, #1
 800fb86:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800fb88:	e001      	b.n	800fb8e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb90:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fb98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fb9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3740      	adds	r7, #64	@ 0x40
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b08c      	sub	sp, #48	@ 0x30
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	60f8      	str	r0, [r7, #12]
 800fbac:	60b9      	str	r1, [r7, #8]
 800fbae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fbb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d10b      	bne.n	800fbd6 <xQueueReceive+0x32>
	__asm volatile
 800fbbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbc2:	f383 8811 	msr	BASEPRI, r3
 800fbc6:	f3bf 8f6f 	isb	sy
 800fbca:	f3bf 8f4f 	dsb	sy
 800fbce:	623b      	str	r3, [r7, #32]
}
 800fbd0:	bf00      	nop
 800fbd2:	bf00      	nop
 800fbd4:	e7fd      	b.n	800fbd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d103      	bne.n	800fbe4 <xQueueReceive+0x40>
 800fbdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d101      	bne.n	800fbe8 <xQueueReceive+0x44>
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	e000      	b.n	800fbea <xQueueReceive+0x46>
 800fbe8:	2300      	movs	r3, #0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d10b      	bne.n	800fc06 <xQueueReceive+0x62>
	__asm volatile
 800fbee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbf2:	f383 8811 	msr	BASEPRI, r3
 800fbf6:	f3bf 8f6f 	isb	sy
 800fbfa:	f3bf 8f4f 	dsb	sy
 800fbfe:	61fb      	str	r3, [r7, #28]
}
 800fc00:	bf00      	nop
 800fc02:	bf00      	nop
 800fc04:	e7fd      	b.n	800fc02 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fc06:	f001 fad1 	bl	80111ac <xTaskGetSchedulerState>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d102      	bne.n	800fc16 <xQueueReceive+0x72>
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d101      	bne.n	800fc1a <xQueueReceive+0x76>
 800fc16:	2301      	movs	r3, #1
 800fc18:	e000      	b.n	800fc1c <xQueueReceive+0x78>
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d10b      	bne.n	800fc38 <xQueueReceive+0x94>
	__asm volatile
 800fc20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc24:	f383 8811 	msr	BASEPRI, r3
 800fc28:	f3bf 8f6f 	isb	sy
 800fc2c:	f3bf 8f4f 	dsb	sy
 800fc30:	61bb      	str	r3, [r7, #24]
}
 800fc32:	bf00      	nop
 800fc34:	bf00      	nop
 800fc36:	e7fd      	b.n	800fc34 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fc38:	f002 fb2e 	bl	8012298 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fc3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc40:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d01f      	beq.n	800fc88 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fc48:	68b9      	ldr	r1, [r7, #8]
 800fc4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fc4c:	f000 fa1e 	bl	801008c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fc50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc52:	1e5a      	subs	r2, r3, #1
 800fc54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc56:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fc58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc5a:	691b      	ldr	r3, [r3, #16]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d00f      	beq.n	800fc80 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fc60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc62:	3310      	adds	r3, #16
 800fc64:	4618      	mov	r0, r3
 800fc66:	f001 f8cb 	bl	8010e00 <xTaskRemoveFromEventList>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d007      	beq.n	800fc80 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fc70:	4b3c      	ldr	r3, [pc, #240]	@ (800fd64 <xQueueReceive+0x1c0>)
 800fc72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc76:	601a      	str	r2, [r3, #0]
 800fc78:	f3bf 8f4f 	dsb	sy
 800fc7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fc80:	f002 fb3c 	bl	80122fc <vPortExitCritical>
				return pdPASS;
 800fc84:	2301      	movs	r3, #1
 800fc86:	e069      	b.n	800fd5c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d103      	bne.n	800fc96 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fc8e:	f002 fb35 	bl	80122fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fc92:	2300      	movs	r3, #0
 800fc94:	e062      	b.n	800fd5c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fc96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d106      	bne.n	800fcaa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fc9c:	f107 0310 	add.w	r3, r7, #16
 800fca0:	4618      	mov	r0, r3
 800fca2:	f001 f911 	bl	8010ec8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fca6:	2301      	movs	r3, #1
 800fca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fcaa:	f002 fb27 	bl	80122fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fcae:	f000 fe4d 	bl	801094c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fcb2:	f002 faf1 	bl	8012298 <vPortEnterCritical>
 800fcb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fcbc:	b25b      	sxtb	r3, r3
 800fcbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fcc2:	d103      	bne.n	800fccc <xQueueReceive+0x128>
 800fcc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fcd2:	b25b      	sxtb	r3, r3
 800fcd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fcd8:	d103      	bne.n	800fce2 <xQueueReceive+0x13e>
 800fcda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcdc:	2200      	movs	r2, #0
 800fcde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fce2:	f002 fb0b 	bl	80122fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fce6:	1d3a      	adds	r2, r7, #4
 800fce8:	f107 0310 	add.w	r3, r7, #16
 800fcec:	4611      	mov	r1, r2
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f001 f900 	bl	8010ef4 <xTaskCheckForTimeOut>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d123      	bne.n	800fd42 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fcfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fcfc:	f000 fa3e 	bl	801017c <prvIsQueueEmpty>
 800fd00:	4603      	mov	r3, r0
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d017      	beq.n	800fd36 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fd06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd08:	3324      	adds	r3, #36	@ 0x24
 800fd0a:	687a      	ldr	r2, [r7, #4]
 800fd0c:	4611      	mov	r1, r2
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f001 f824 	bl	8010d5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fd14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd16:	f000 f9df 	bl	80100d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fd1a:	f000 fe25 	bl	8010968 <xTaskResumeAll>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d189      	bne.n	800fc38 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800fd24:	4b0f      	ldr	r3, [pc, #60]	@ (800fd64 <xQueueReceive+0x1c0>)
 800fd26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd2a:	601a      	str	r2, [r3, #0]
 800fd2c:	f3bf 8f4f 	dsb	sy
 800fd30:	f3bf 8f6f 	isb	sy
 800fd34:	e780      	b.n	800fc38 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fd36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd38:	f000 f9ce 	bl	80100d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fd3c:	f000 fe14 	bl	8010968 <xTaskResumeAll>
 800fd40:	e77a      	b.n	800fc38 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fd42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd44:	f000 f9c8 	bl	80100d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fd48:	f000 fe0e 	bl	8010968 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fd4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd4e:	f000 fa15 	bl	801017c <prvIsQueueEmpty>
 800fd52:	4603      	mov	r3, r0
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	f43f af6f 	beq.w	800fc38 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fd5a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3730      	adds	r7, #48	@ 0x30
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	e000ed04 	.word	0xe000ed04

0800fd68 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b08e      	sub	sp, #56	@ 0x38
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
 800fd70:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fd72:	2300      	movs	r3, #0
 800fd74:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fd7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d10b      	bne.n	800fd9c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800fd84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd88:	f383 8811 	msr	BASEPRI, r3
 800fd8c:	f3bf 8f6f 	isb	sy
 800fd90:	f3bf 8f4f 	dsb	sy
 800fd94:	623b      	str	r3, [r7, #32]
}
 800fd96:	bf00      	nop
 800fd98:	bf00      	nop
 800fd9a:	e7fd      	b.n	800fd98 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fd9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d00b      	beq.n	800fdbc <xQueueSemaphoreTake+0x54>
	__asm volatile
 800fda4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fda8:	f383 8811 	msr	BASEPRI, r3
 800fdac:	f3bf 8f6f 	isb	sy
 800fdb0:	f3bf 8f4f 	dsb	sy
 800fdb4:	61fb      	str	r3, [r7, #28]
}
 800fdb6:	bf00      	nop
 800fdb8:	bf00      	nop
 800fdba:	e7fd      	b.n	800fdb8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fdbc:	f001 f9f6 	bl	80111ac <xTaskGetSchedulerState>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d102      	bne.n	800fdcc <xQueueSemaphoreTake+0x64>
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d101      	bne.n	800fdd0 <xQueueSemaphoreTake+0x68>
 800fdcc:	2301      	movs	r3, #1
 800fdce:	e000      	b.n	800fdd2 <xQueueSemaphoreTake+0x6a>
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d10b      	bne.n	800fdee <xQueueSemaphoreTake+0x86>
	__asm volatile
 800fdd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdda:	f383 8811 	msr	BASEPRI, r3
 800fdde:	f3bf 8f6f 	isb	sy
 800fde2:	f3bf 8f4f 	dsb	sy
 800fde6:	61bb      	str	r3, [r7, #24]
}
 800fde8:	bf00      	nop
 800fdea:	bf00      	nop
 800fdec:	e7fd      	b.n	800fdea <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fdee:	f002 fa53 	bl	8012298 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fdf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdf6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fdf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d024      	beq.n	800fe48 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fdfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe00:	1e5a      	subs	r2, r3, #1
 800fe02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe04:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fe06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d104      	bne.n	800fe18 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fe0e:	f001 fb47 	bl	80114a0 <pvTaskIncrementMutexHeldCount>
 800fe12:	4602      	mov	r2, r0
 800fe14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe16:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe1a:	691b      	ldr	r3, [r3, #16]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d00f      	beq.n	800fe40 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe22:	3310      	adds	r3, #16
 800fe24:	4618      	mov	r0, r3
 800fe26:	f000 ffeb 	bl	8010e00 <xTaskRemoveFromEventList>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d007      	beq.n	800fe40 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fe30:	4b54      	ldr	r3, [pc, #336]	@ (800ff84 <xQueueSemaphoreTake+0x21c>)
 800fe32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe36:	601a      	str	r2, [r3, #0]
 800fe38:	f3bf 8f4f 	dsb	sy
 800fe3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fe40:	f002 fa5c 	bl	80122fc <vPortExitCritical>
				return pdPASS;
 800fe44:	2301      	movs	r3, #1
 800fe46:	e098      	b.n	800ff7a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d112      	bne.n	800fe74 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fe4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d00b      	beq.n	800fe6c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800fe54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe58:	f383 8811 	msr	BASEPRI, r3
 800fe5c:	f3bf 8f6f 	isb	sy
 800fe60:	f3bf 8f4f 	dsb	sy
 800fe64:	617b      	str	r3, [r7, #20]
}
 800fe66:	bf00      	nop
 800fe68:	bf00      	nop
 800fe6a:	e7fd      	b.n	800fe68 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fe6c:	f002 fa46 	bl	80122fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fe70:	2300      	movs	r3, #0
 800fe72:	e082      	b.n	800ff7a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fe74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d106      	bne.n	800fe88 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fe7a:	f107 030c 	add.w	r3, r7, #12
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f001 f822 	bl	8010ec8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fe84:	2301      	movs	r3, #1
 800fe86:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fe88:	f002 fa38 	bl	80122fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fe8c:	f000 fd5e 	bl	801094c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fe90:	f002 fa02 	bl	8012298 <vPortEnterCritical>
 800fe94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fe9a:	b25b      	sxtb	r3, r3
 800fe9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fea0:	d103      	bne.n	800feaa <xQueueSemaphoreTake+0x142>
 800fea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fea4:	2200      	movs	r2, #0
 800fea6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800feaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800feb0:	b25b      	sxtb	r3, r3
 800feb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800feb6:	d103      	bne.n	800fec0 <xQueueSemaphoreTake+0x158>
 800feb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feba:	2200      	movs	r2, #0
 800febc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fec0:	f002 fa1c 	bl	80122fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fec4:	463a      	mov	r2, r7
 800fec6:	f107 030c 	add.w	r3, r7, #12
 800feca:	4611      	mov	r1, r2
 800fecc:	4618      	mov	r0, r3
 800fece:	f001 f811 	bl	8010ef4 <xTaskCheckForTimeOut>
 800fed2:	4603      	mov	r3, r0
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d132      	bne.n	800ff3e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fed8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800feda:	f000 f94f 	bl	801017c <prvIsQueueEmpty>
 800fede:	4603      	mov	r3, r0
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d026      	beq.n	800ff32 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d109      	bne.n	800ff00 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800feec:	f002 f9d4 	bl	8012298 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fef2:	689b      	ldr	r3, [r3, #8]
 800fef4:	4618      	mov	r0, r3
 800fef6:	f001 f977 	bl	80111e8 <xTaskPriorityInherit>
 800fefa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800fefc:	f002 f9fe 	bl	80122fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ff00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff02:	3324      	adds	r3, #36	@ 0x24
 800ff04:	683a      	ldr	r2, [r7, #0]
 800ff06:	4611      	mov	r1, r2
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f000 ff27 	bl	8010d5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ff0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ff10:	f000 f8e2 	bl	80100d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ff14:	f000 fd28 	bl	8010968 <xTaskResumeAll>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	f47f af67 	bne.w	800fdee <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ff20:	4b18      	ldr	r3, [pc, #96]	@ (800ff84 <xQueueSemaphoreTake+0x21c>)
 800ff22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff26:	601a      	str	r2, [r3, #0]
 800ff28:	f3bf 8f4f 	dsb	sy
 800ff2c:	f3bf 8f6f 	isb	sy
 800ff30:	e75d      	b.n	800fdee <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ff32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ff34:	f000 f8d0 	bl	80100d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ff38:	f000 fd16 	bl	8010968 <xTaskResumeAll>
 800ff3c:	e757      	b.n	800fdee <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ff3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ff40:	f000 f8ca 	bl	80100d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ff44:	f000 fd10 	bl	8010968 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ff48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ff4a:	f000 f917 	bl	801017c <prvIsQueueEmpty>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	f43f af4c 	beq.w	800fdee <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ff56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d00d      	beq.n	800ff78 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ff5c:	f002 f99c 	bl	8012298 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ff60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ff62:	f000 f811 	bl	800ff88 <prvGetDisinheritPriorityAfterTimeout>
 800ff66:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ff68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff6a:	689b      	ldr	r3, [r3, #8]
 800ff6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f001 fa12 	bl	8011398 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ff74:	f002 f9c2 	bl	80122fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ff78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	3738      	adds	r7, #56	@ 0x38
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}
 800ff82:	bf00      	nop
 800ff84:	e000ed04 	.word	0xe000ed04

0800ff88 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ff88:	b480      	push	{r7}
 800ff8a:	b085      	sub	sp, #20
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d006      	beq.n	800ffa6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ffa2:	60fb      	str	r3, [r7, #12]
 800ffa4:	e001      	b.n	800ffaa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
	}
 800ffac:	4618      	mov	r0, r3
 800ffae:	3714      	adds	r7, #20
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb6:	4770      	bx	lr

0800ffb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b086      	sub	sp, #24
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	60f8      	str	r0, [r7, #12]
 800ffc0:	60b9      	str	r1, [r7, #8]
 800ffc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d10d      	bne.n	800fff2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d14d      	bne.n	801007a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	689b      	ldr	r3, [r3, #8]
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f001 f968 	bl	80112b8 <xTaskPriorityDisinherit>
 800ffe8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	2200      	movs	r2, #0
 800ffee:	609a      	str	r2, [r3, #8]
 800fff0:	e043      	b.n	801007a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d119      	bne.n	801002c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	6858      	ldr	r0, [r3, #4]
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010000:	461a      	mov	r2, r3
 8010002:	68b9      	ldr	r1, [r7, #8]
 8010004:	f00f fff1 	bl	801ffea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	685a      	ldr	r2, [r3, #4]
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010010:	441a      	add	r2, r3
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	685a      	ldr	r2, [r3, #4]
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	689b      	ldr	r3, [r3, #8]
 801001e:	429a      	cmp	r2, r3
 8010020:	d32b      	bcc.n	801007a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	681a      	ldr	r2, [r3, #0]
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	605a      	str	r2, [r3, #4]
 801002a:	e026      	b.n	801007a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	68d8      	ldr	r0, [r3, #12]
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010034:	461a      	mov	r2, r3
 8010036:	68b9      	ldr	r1, [r7, #8]
 8010038:	f00f ffd7 	bl	801ffea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	68da      	ldr	r2, [r3, #12]
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010044:	425b      	negs	r3, r3
 8010046:	441a      	add	r2, r3
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	68da      	ldr	r2, [r3, #12]
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	429a      	cmp	r2, r3
 8010056:	d207      	bcs.n	8010068 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	689a      	ldr	r2, [r3, #8]
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010060:	425b      	negs	r3, r3
 8010062:	441a      	add	r2, r3
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2b02      	cmp	r3, #2
 801006c:	d105      	bne.n	801007a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d002      	beq.n	801007a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	3b01      	subs	r3, #1
 8010078:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801007a:	693b      	ldr	r3, [r7, #16]
 801007c:	1c5a      	adds	r2, r3, #1
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8010082:	697b      	ldr	r3, [r7, #20]
}
 8010084:	4618      	mov	r0, r3
 8010086:	3718      	adds	r7, #24
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}

0801008c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b082      	sub	sp, #8
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801009a:	2b00      	cmp	r3, #0
 801009c:	d018      	beq.n	80100d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	68da      	ldr	r2, [r3, #12]
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100a6:	441a      	add	r2, r3
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	68da      	ldr	r2, [r3, #12]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	689b      	ldr	r3, [r3, #8]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d303      	bcc.n	80100c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681a      	ldr	r2, [r3, #0]
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	68d9      	ldr	r1, [r3, #12]
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100c8:	461a      	mov	r2, r3
 80100ca:	6838      	ldr	r0, [r7, #0]
 80100cc:	f00f ff8d 	bl	801ffea <memcpy>
	}
}
 80100d0:	bf00      	nop
 80100d2:	3708      	adds	r7, #8
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b084      	sub	sp, #16
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80100e0:	f002 f8da 	bl	8012298 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80100ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80100ec:	e011      	b.n	8010112 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d012      	beq.n	801011c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	3324      	adds	r3, #36	@ 0x24
 80100fa:	4618      	mov	r0, r3
 80100fc:	f000 fe80 	bl	8010e00 <xTaskRemoveFromEventList>
 8010100:	4603      	mov	r3, r0
 8010102:	2b00      	cmp	r3, #0
 8010104:	d001      	beq.n	801010a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010106:	f000 ff59 	bl	8010fbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801010a:	7bfb      	ldrb	r3, [r7, #15]
 801010c:	3b01      	subs	r3, #1
 801010e:	b2db      	uxtb	r3, r3
 8010110:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010116:	2b00      	cmp	r3, #0
 8010118:	dce9      	bgt.n	80100ee <prvUnlockQueue+0x16>
 801011a:	e000      	b.n	801011e <prvUnlockQueue+0x46>
					break;
 801011c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	22ff      	movs	r2, #255	@ 0xff
 8010122:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8010126:	f002 f8e9 	bl	80122fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801012a:	f002 f8b5 	bl	8012298 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010134:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010136:	e011      	b.n	801015c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	691b      	ldr	r3, [r3, #16]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d012      	beq.n	8010166 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	3310      	adds	r3, #16
 8010144:	4618      	mov	r0, r3
 8010146:	f000 fe5b 	bl	8010e00 <xTaskRemoveFromEventList>
 801014a:	4603      	mov	r3, r0
 801014c:	2b00      	cmp	r3, #0
 801014e:	d001      	beq.n	8010154 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010150:	f000 ff34 	bl	8010fbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010154:	7bbb      	ldrb	r3, [r7, #14]
 8010156:	3b01      	subs	r3, #1
 8010158:	b2db      	uxtb	r3, r3
 801015a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801015c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010160:	2b00      	cmp	r3, #0
 8010162:	dce9      	bgt.n	8010138 <prvUnlockQueue+0x60>
 8010164:	e000      	b.n	8010168 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010166:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	22ff      	movs	r2, #255	@ 0xff
 801016c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010170:	f002 f8c4 	bl	80122fc <vPortExitCritical>
}
 8010174:	bf00      	nop
 8010176:	3710      	adds	r7, #16
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}

0801017c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b084      	sub	sp, #16
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010184:	f002 f888 	bl	8012298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801018c:	2b00      	cmp	r3, #0
 801018e:	d102      	bne.n	8010196 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010190:	2301      	movs	r3, #1
 8010192:	60fb      	str	r3, [r7, #12]
 8010194:	e001      	b.n	801019a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010196:	2300      	movs	r3, #0
 8010198:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801019a:	f002 f8af 	bl	80122fc <vPortExitCritical>

	return xReturn;
 801019e:	68fb      	ldr	r3, [r7, #12]
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	3710      	adds	r7, #16
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}

080101a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b084      	sub	sp, #16
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80101b0:	f002 f872 	bl	8012298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101bc:	429a      	cmp	r2, r3
 80101be:	d102      	bne.n	80101c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80101c0:	2301      	movs	r3, #1
 80101c2:	60fb      	str	r3, [r7, #12]
 80101c4:	e001      	b.n	80101ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80101c6:	2300      	movs	r3, #0
 80101c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80101ca:	f002 f897 	bl	80122fc <vPortExitCritical>

	return xReturn;
 80101ce:	68fb      	ldr	r3, [r7, #12]
}
 80101d0:	4618      	mov	r0, r3
 80101d2:	3710      	adds	r7, #16
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}

080101d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80101d8:	b480      	push	{r7}
 80101da:	b085      	sub	sp, #20
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80101e2:	2300      	movs	r3, #0
 80101e4:	60fb      	str	r3, [r7, #12]
 80101e6:	e014      	b.n	8010212 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80101e8:	4a0f      	ldr	r2, [pc, #60]	@ (8010228 <vQueueAddToRegistry+0x50>)
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d10b      	bne.n	801020c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80101f4:	490c      	ldr	r1, [pc, #48]	@ (8010228 <vQueueAddToRegistry+0x50>)
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	683a      	ldr	r2, [r7, #0]
 80101fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80101fe:	4a0a      	ldr	r2, [pc, #40]	@ (8010228 <vQueueAddToRegistry+0x50>)
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	00db      	lsls	r3, r3, #3
 8010204:	4413      	add	r3, r2
 8010206:	687a      	ldr	r2, [r7, #4]
 8010208:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801020a:	e006      	b.n	801021a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	3301      	adds	r3, #1
 8010210:	60fb      	str	r3, [r7, #12]
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	2b07      	cmp	r3, #7
 8010216:	d9e7      	bls.n	80101e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010218:	bf00      	nop
 801021a:	bf00      	nop
 801021c:	3714      	adds	r7, #20
 801021e:	46bd      	mov	sp, r7
 8010220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010224:	4770      	bx	lr
 8010226:	bf00      	nop
 8010228:	200066c8 	.word	0x200066c8

0801022c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801022c:	b580      	push	{r7, lr}
 801022e:	b086      	sub	sp, #24
 8010230:	af00      	add	r7, sp, #0
 8010232:	60f8      	str	r0, [r7, #12]
 8010234:	60b9      	str	r1, [r7, #8]
 8010236:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801023c:	f002 f82c 	bl	8012298 <vPortEnterCritical>
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010246:	b25b      	sxtb	r3, r3
 8010248:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801024c:	d103      	bne.n	8010256 <vQueueWaitForMessageRestricted+0x2a>
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	2200      	movs	r2, #0
 8010252:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801025c:	b25b      	sxtb	r3, r3
 801025e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010262:	d103      	bne.n	801026c <vQueueWaitForMessageRestricted+0x40>
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	2200      	movs	r2, #0
 8010268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801026c:	f002 f846 	bl	80122fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010274:	2b00      	cmp	r3, #0
 8010276:	d106      	bne.n	8010286 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	3324      	adds	r3, #36	@ 0x24
 801027c:	687a      	ldr	r2, [r7, #4]
 801027e:	68b9      	ldr	r1, [r7, #8]
 8010280:	4618      	mov	r0, r3
 8010282:	f000 fd91 	bl	8010da8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010286:	6978      	ldr	r0, [r7, #20]
 8010288:	f7ff ff26 	bl	80100d8 <prvUnlockQueue>
	}
 801028c:	bf00      	nop
 801028e:	3718      	adds	r7, #24
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}

08010294 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010294:	b580      	push	{r7, lr}
 8010296:	b08e      	sub	sp, #56	@ 0x38
 8010298:	af04      	add	r7, sp, #16
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	60b9      	str	r1, [r7, #8]
 801029e:	607a      	str	r2, [r7, #4]
 80102a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80102a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d10b      	bne.n	80102c0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80102a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102ac:	f383 8811 	msr	BASEPRI, r3
 80102b0:	f3bf 8f6f 	isb	sy
 80102b4:	f3bf 8f4f 	dsb	sy
 80102b8:	623b      	str	r3, [r7, #32]
}
 80102ba:	bf00      	nop
 80102bc:	bf00      	nop
 80102be:	e7fd      	b.n	80102bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80102c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d10b      	bne.n	80102de <xTaskCreateStatic+0x4a>
	__asm volatile
 80102c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102ca:	f383 8811 	msr	BASEPRI, r3
 80102ce:	f3bf 8f6f 	isb	sy
 80102d2:	f3bf 8f4f 	dsb	sy
 80102d6:	61fb      	str	r3, [r7, #28]
}
 80102d8:	bf00      	nop
 80102da:	bf00      	nop
 80102dc:	e7fd      	b.n	80102da <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80102de:	23b0      	movs	r3, #176	@ 0xb0
 80102e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80102e2:	693b      	ldr	r3, [r7, #16]
 80102e4:	2bb0      	cmp	r3, #176	@ 0xb0
 80102e6:	d00b      	beq.n	8010300 <xTaskCreateStatic+0x6c>
	__asm volatile
 80102e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102ec:	f383 8811 	msr	BASEPRI, r3
 80102f0:	f3bf 8f6f 	isb	sy
 80102f4:	f3bf 8f4f 	dsb	sy
 80102f8:	61bb      	str	r3, [r7, #24]
}
 80102fa:	bf00      	nop
 80102fc:	bf00      	nop
 80102fe:	e7fd      	b.n	80102fc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010300:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010304:	2b00      	cmp	r3, #0
 8010306:	d01e      	beq.n	8010346 <xTaskCreateStatic+0xb2>
 8010308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801030a:	2b00      	cmp	r3, #0
 801030c:	d01b      	beq.n	8010346 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801030e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010310:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010314:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010316:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801031a:	2202      	movs	r2, #2
 801031c:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010320:	2300      	movs	r3, #0
 8010322:	9303      	str	r3, [sp, #12]
 8010324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010326:	9302      	str	r3, [sp, #8]
 8010328:	f107 0314 	add.w	r3, r7, #20
 801032c:	9301      	str	r3, [sp, #4]
 801032e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010330:	9300      	str	r3, [sp, #0]
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	687a      	ldr	r2, [r7, #4]
 8010336:	68b9      	ldr	r1, [r7, #8]
 8010338:	68f8      	ldr	r0, [r7, #12]
 801033a:	f000 f851 	bl	80103e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801033e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010340:	f000 f8f8 	bl	8010534 <prvAddNewTaskToReadyList>
 8010344:	e001      	b.n	801034a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010346:	2300      	movs	r3, #0
 8010348:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801034a:	697b      	ldr	r3, [r7, #20]
	}
 801034c:	4618      	mov	r0, r3
 801034e:	3728      	adds	r7, #40	@ 0x28
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}

08010354 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010354:	b580      	push	{r7, lr}
 8010356:	b08c      	sub	sp, #48	@ 0x30
 8010358:	af04      	add	r7, sp, #16
 801035a:	60f8      	str	r0, [r7, #12]
 801035c:	60b9      	str	r1, [r7, #8]
 801035e:	603b      	str	r3, [r7, #0]
 8010360:	4613      	mov	r3, r2
 8010362:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010364:	88fb      	ldrh	r3, [r7, #6]
 8010366:	009b      	lsls	r3, r3, #2
 8010368:	4618      	mov	r0, r3
 801036a:	f002 f8b7 	bl	80124dc <pvPortMalloc>
 801036e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010370:	697b      	ldr	r3, [r7, #20]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d00e      	beq.n	8010394 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010376:	20b0      	movs	r0, #176	@ 0xb0
 8010378:	f002 f8b0 	bl	80124dc <pvPortMalloc>
 801037c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d003      	beq.n	801038c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010384:	69fb      	ldr	r3, [r7, #28]
 8010386:	697a      	ldr	r2, [r7, #20]
 8010388:	631a      	str	r2, [r3, #48]	@ 0x30
 801038a:	e005      	b.n	8010398 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801038c:	6978      	ldr	r0, [r7, #20]
 801038e:	f002 f973 	bl	8012678 <vPortFree>
 8010392:	e001      	b.n	8010398 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010394:	2300      	movs	r3, #0
 8010396:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d017      	beq.n	80103ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801039e:	69fb      	ldr	r3, [r7, #28]
 80103a0:	2200      	movs	r2, #0
 80103a2:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80103a6:	88fa      	ldrh	r2, [r7, #6]
 80103a8:	2300      	movs	r3, #0
 80103aa:	9303      	str	r3, [sp, #12]
 80103ac:	69fb      	ldr	r3, [r7, #28]
 80103ae:	9302      	str	r3, [sp, #8]
 80103b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103b2:	9301      	str	r3, [sp, #4]
 80103b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103b6:	9300      	str	r3, [sp, #0]
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	68b9      	ldr	r1, [r7, #8]
 80103bc:	68f8      	ldr	r0, [r7, #12]
 80103be:	f000 f80f 	bl	80103e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80103c2:	69f8      	ldr	r0, [r7, #28]
 80103c4:	f000 f8b6 	bl	8010534 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80103c8:	2301      	movs	r3, #1
 80103ca:	61bb      	str	r3, [r7, #24]
 80103cc:	e002      	b.n	80103d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80103ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80103d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80103d4:	69bb      	ldr	r3, [r7, #24]
	}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3720      	adds	r7, #32
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
	...

080103e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b088      	sub	sp, #32
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	60f8      	str	r0, [r7, #12]
 80103e8:	60b9      	str	r1, [r7, #8]
 80103ea:	607a      	str	r2, [r7, #4]
 80103ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80103ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103f0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	009b      	lsls	r3, r3, #2
 80103f6:	461a      	mov	r2, r3
 80103f8:	21a5      	movs	r1, #165	@ 0xa5
 80103fa:	f00f fccc 	bl	801fd96 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80103fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010400:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010408:	3b01      	subs	r3, #1
 801040a:	009b      	lsls	r3, r3, #2
 801040c:	4413      	add	r3, r2
 801040e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010410:	69bb      	ldr	r3, [r7, #24]
 8010412:	f023 0307 	bic.w	r3, r3, #7
 8010416:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010418:	69bb      	ldr	r3, [r7, #24]
 801041a:	f003 0307 	and.w	r3, r3, #7
 801041e:	2b00      	cmp	r3, #0
 8010420:	d00b      	beq.n	801043a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8010422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010426:	f383 8811 	msr	BASEPRI, r3
 801042a:	f3bf 8f6f 	isb	sy
 801042e:	f3bf 8f4f 	dsb	sy
 8010432:	617b      	str	r3, [r7, #20]
}
 8010434:	bf00      	nop
 8010436:	bf00      	nop
 8010438:	e7fd      	b.n	8010436 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d01f      	beq.n	8010480 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010440:	2300      	movs	r3, #0
 8010442:	61fb      	str	r3, [r7, #28]
 8010444:	e012      	b.n	801046c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010446:	68ba      	ldr	r2, [r7, #8]
 8010448:	69fb      	ldr	r3, [r7, #28]
 801044a:	4413      	add	r3, r2
 801044c:	7819      	ldrb	r1, [r3, #0]
 801044e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010450:	69fb      	ldr	r3, [r7, #28]
 8010452:	4413      	add	r3, r2
 8010454:	3334      	adds	r3, #52	@ 0x34
 8010456:	460a      	mov	r2, r1
 8010458:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801045a:	68ba      	ldr	r2, [r7, #8]
 801045c:	69fb      	ldr	r3, [r7, #28]
 801045e:	4413      	add	r3, r2
 8010460:	781b      	ldrb	r3, [r3, #0]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d006      	beq.n	8010474 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010466:	69fb      	ldr	r3, [r7, #28]
 8010468:	3301      	adds	r3, #1
 801046a:	61fb      	str	r3, [r7, #28]
 801046c:	69fb      	ldr	r3, [r7, #28]
 801046e:	2b13      	cmp	r3, #19
 8010470:	d9e9      	bls.n	8010446 <prvInitialiseNewTask+0x66>
 8010472:	e000      	b.n	8010476 <prvInitialiseNewTask+0x96>
			{
				break;
 8010474:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010478:	2200      	movs	r2, #0
 801047a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 801047e:	e003      	b.n	8010488 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010482:	2200      	movs	r2, #0
 8010484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801048a:	2b37      	cmp	r3, #55	@ 0x37
 801048c:	d901      	bls.n	8010492 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801048e:	2337      	movs	r3, #55	@ 0x37
 8010490:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010494:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010496:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801049a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801049c:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 801049e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104a0:	2200      	movs	r2, #0
 80104a2:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80104a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104a6:	3304      	adds	r3, #4
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7fe ff49 	bl	800f340 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80104ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104b0:	3318      	adds	r3, #24
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7fe ff44 	bl	800f340 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80104b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80104bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80104c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80104c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80104cc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80104ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104d0:	2200      	movs	r2, #0
 80104d2:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80104d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104d6:	2200      	movs	r2, #0
 80104d8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80104dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104de:	2200      	movs	r2, #0
 80104e0:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80104e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104e6:	335c      	adds	r3, #92	@ 0x5c
 80104e8:	224c      	movs	r2, #76	@ 0x4c
 80104ea:	2100      	movs	r1, #0
 80104ec:	4618      	mov	r0, r3
 80104ee:	f00f fc52 	bl	801fd96 <memset>
 80104f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104f4:	4a0c      	ldr	r2, [pc, #48]	@ (8010528 <prvInitialiseNewTask+0x148>)
 80104f6:	661a      	str	r2, [r3, #96]	@ 0x60
 80104f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104fa:	4a0c      	ldr	r2, [pc, #48]	@ (801052c <prvInitialiseNewTask+0x14c>)
 80104fc:	665a      	str	r2, [r3, #100]	@ 0x64
 80104fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010500:	4a0b      	ldr	r2, [pc, #44]	@ (8010530 <prvInitialiseNewTask+0x150>)
 8010502:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010504:	683a      	ldr	r2, [r7, #0]
 8010506:	68f9      	ldr	r1, [r7, #12]
 8010508:	69b8      	ldr	r0, [r7, #24]
 801050a:	f001 fd93 	bl	8012034 <pxPortInitialiseStack>
 801050e:	4602      	mov	r2, r0
 8010510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010512:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010516:	2b00      	cmp	r3, #0
 8010518:	d002      	beq.n	8010520 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801051a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801051c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801051e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010520:	bf00      	nop
 8010522:	3720      	adds	r7, #32
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}
 8010528:	2001873c 	.word	0x2001873c
 801052c:	200187a4 	.word	0x200187a4
 8010530:	2001880c 	.word	0x2001880c

08010534 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b082      	sub	sp, #8
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801053c:	f001 feac 	bl	8012298 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010540:	4b2d      	ldr	r3, [pc, #180]	@ (80105f8 <prvAddNewTaskToReadyList+0xc4>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	3301      	adds	r3, #1
 8010546:	4a2c      	ldr	r2, [pc, #176]	@ (80105f8 <prvAddNewTaskToReadyList+0xc4>)
 8010548:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801054a:	4b2c      	ldr	r3, [pc, #176]	@ (80105fc <prvAddNewTaskToReadyList+0xc8>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d109      	bne.n	8010566 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010552:	4a2a      	ldr	r2, [pc, #168]	@ (80105fc <prvAddNewTaskToReadyList+0xc8>)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010558:	4b27      	ldr	r3, [pc, #156]	@ (80105f8 <prvAddNewTaskToReadyList+0xc4>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	2b01      	cmp	r3, #1
 801055e:	d110      	bne.n	8010582 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010560:	f000 fd50 	bl	8011004 <prvInitialiseTaskLists>
 8010564:	e00d      	b.n	8010582 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010566:	4b26      	ldr	r3, [pc, #152]	@ (8010600 <prvAddNewTaskToReadyList+0xcc>)
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d109      	bne.n	8010582 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801056e:	4b23      	ldr	r3, [pc, #140]	@ (80105fc <prvAddNewTaskToReadyList+0xc8>)
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010578:	429a      	cmp	r2, r3
 801057a:	d802      	bhi.n	8010582 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801057c:	4a1f      	ldr	r2, [pc, #124]	@ (80105fc <prvAddNewTaskToReadyList+0xc8>)
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010582:	4b20      	ldr	r3, [pc, #128]	@ (8010604 <prvAddNewTaskToReadyList+0xd0>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	3301      	adds	r3, #1
 8010588:	4a1e      	ldr	r2, [pc, #120]	@ (8010604 <prvAddNewTaskToReadyList+0xd0>)
 801058a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801058c:	4b1d      	ldr	r3, [pc, #116]	@ (8010604 <prvAddNewTaskToReadyList+0xd0>)
 801058e:	681a      	ldr	r2, [r3, #0]
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010598:	4b1b      	ldr	r3, [pc, #108]	@ (8010608 <prvAddNewTaskToReadyList+0xd4>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	429a      	cmp	r2, r3
 801059e:	d903      	bls.n	80105a8 <prvAddNewTaskToReadyList+0x74>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105a4:	4a18      	ldr	r2, [pc, #96]	@ (8010608 <prvAddNewTaskToReadyList+0xd4>)
 80105a6:	6013      	str	r3, [r2, #0]
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105ac:	4613      	mov	r3, r2
 80105ae:	009b      	lsls	r3, r3, #2
 80105b0:	4413      	add	r3, r2
 80105b2:	009b      	lsls	r3, r3, #2
 80105b4:	4a15      	ldr	r2, [pc, #84]	@ (801060c <prvAddNewTaskToReadyList+0xd8>)
 80105b6:	441a      	add	r2, r3
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	3304      	adds	r3, #4
 80105bc:	4619      	mov	r1, r3
 80105be:	4610      	mov	r0, r2
 80105c0:	f7fe fecb 	bl	800f35a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80105c4:	f001 fe9a 	bl	80122fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80105c8:	4b0d      	ldr	r3, [pc, #52]	@ (8010600 <prvAddNewTaskToReadyList+0xcc>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d00e      	beq.n	80105ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80105d0:	4b0a      	ldr	r3, [pc, #40]	@ (80105fc <prvAddNewTaskToReadyList+0xc8>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105da:	429a      	cmp	r2, r3
 80105dc:	d207      	bcs.n	80105ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80105de:	4b0c      	ldr	r3, [pc, #48]	@ (8010610 <prvAddNewTaskToReadyList+0xdc>)
 80105e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105e4:	601a      	str	r2, [r3, #0]
 80105e6:	f3bf 8f4f 	dsb	sy
 80105ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80105ee:	bf00      	nop
 80105f0:	3708      	adds	r7, #8
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}
 80105f6:	bf00      	nop
 80105f8:	20006bdc 	.word	0x20006bdc
 80105fc:	20006708 	.word	0x20006708
 8010600:	20006be8 	.word	0x20006be8
 8010604:	20006bf8 	.word	0x20006bf8
 8010608:	20006be4 	.word	0x20006be4
 801060c:	2000670c 	.word	0x2000670c
 8010610:	e000ed04 	.word	0xe000ed04

08010614 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8010614:	b580      	push	{r7, lr}
 8010616:	b084      	sub	sp, #16
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801061c:	f001 fe3c 	bl	8012298 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d102      	bne.n	801062c <vTaskDelete+0x18>
 8010626:	4b2d      	ldr	r3, [pc, #180]	@ (80106dc <vTaskDelete+0xc8>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	e000      	b.n	801062e <vTaskDelete+0x1a>
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	3304      	adds	r3, #4
 8010634:	4618      	mov	r0, r3
 8010636:	f7fe feed 	bl	800f414 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801063e:	2b00      	cmp	r3, #0
 8010640:	d004      	beq.n	801064c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	3318      	adds	r3, #24
 8010646:	4618      	mov	r0, r3
 8010648:	f7fe fee4 	bl	800f414 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801064c:	4b24      	ldr	r3, [pc, #144]	@ (80106e0 <vTaskDelete+0xcc>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	3301      	adds	r3, #1
 8010652:	4a23      	ldr	r2, [pc, #140]	@ (80106e0 <vTaskDelete+0xcc>)
 8010654:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8010656:	4b21      	ldr	r3, [pc, #132]	@ (80106dc <vTaskDelete+0xc8>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	68fa      	ldr	r2, [r7, #12]
 801065c:	429a      	cmp	r2, r3
 801065e:	d10b      	bne.n	8010678 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	3304      	adds	r3, #4
 8010664:	4619      	mov	r1, r3
 8010666:	481f      	ldr	r0, [pc, #124]	@ (80106e4 <vTaskDelete+0xd0>)
 8010668:	f7fe fe77 	bl	800f35a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801066c:	4b1e      	ldr	r3, [pc, #120]	@ (80106e8 <vTaskDelete+0xd4>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	3301      	adds	r3, #1
 8010672:	4a1d      	ldr	r2, [pc, #116]	@ (80106e8 <vTaskDelete+0xd4>)
 8010674:	6013      	str	r3, [r2, #0]
 8010676:	e009      	b.n	801068c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8010678:	4b1c      	ldr	r3, [pc, #112]	@ (80106ec <vTaskDelete+0xd8>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	3b01      	subs	r3, #1
 801067e:	4a1b      	ldr	r2, [pc, #108]	@ (80106ec <vTaskDelete+0xd8>)
 8010680:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8010682:	68f8      	ldr	r0, [r7, #12]
 8010684:	f000 fd2c 	bl	80110e0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8010688:	f000 fd60 	bl	801114c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 801068c:	f001 fe36 	bl	80122fc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8010690:	4b17      	ldr	r3, [pc, #92]	@ (80106f0 <vTaskDelete+0xdc>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d01c      	beq.n	80106d2 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8010698:	4b10      	ldr	r3, [pc, #64]	@ (80106dc <vTaskDelete+0xc8>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	68fa      	ldr	r2, [r7, #12]
 801069e:	429a      	cmp	r2, r3
 80106a0:	d117      	bne.n	80106d2 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80106a2:	4b14      	ldr	r3, [pc, #80]	@ (80106f4 <vTaskDelete+0xe0>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d00b      	beq.n	80106c2 <vTaskDelete+0xae>
	__asm volatile
 80106aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106ae:	f383 8811 	msr	BASEPRI, r3
 80106b2:	f3bf 8f6f 	isb	sy
 80106b6:	f3bf 8f4f 	dsb	sy
 80106ba:	60bb      	str	r3, [r7, #8]
}
 80106bc:	bf00      	nop
 80106be:	bf00      	nop
 80106c0:	e7fd      	b.n	80106be <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80106c2:	4b0d      	ldr	r3, [pc, #52]	@ (80106f8 <vTaskDelete+0xe4>)
 80106c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80106c8:	601a      	str	r2, [r3, #0]
 80106ca:	f3bf 8f4f 	dsb	sy
 80106ce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80106d2:	bf00      	nop
 80106d4:	3710      	adds	r7, #16
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}
 80106da:	bf00      	nop
 80106dc:	20006708 	.word	0x20006708
 80106e0:	20006bf8 	.word	0x20006bf8
 80106e4:	20006bb0 	.word	0x20006bb0
 80106e8:	20006bc4 	.word	0x20006bc4
 80106ec:	20006bdc 	.word	0x20006bdc
 80106f0:	20006be8 	.word	0x20006be8
 80106f4:	20006c04 	.word	0x20006c04
 80106f8:	e000ed04 	.word	0xe000ed04

080106fc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b08a      	sub	sp, #40	@ 0x28
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8010706:	2300      	movs	r3, #0
 8010708:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d10b      	bne.n	8010728 <vTaskDelayUntil+0x2c>
	__asm volatile
 8010710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010714:	f383 8811 	msr	BASEPRI, r3
 8010718:	f3bf 8f6f 	isb	sy
 801071c:	f3bf 8f4f 	dsb	sy
 8010720:	617b      	str	r3, [r7, #20]
}
 8010722:	bf00      	nop
 8010724:	bf00      	nop
 8010726:	e7fd      	b.n	8010724 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d10b      	bne.n	8010746 <vTaskDelayUntil+0x4a>
	__asm volatile
 801072e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010732:	f383 8811 	msr	BASEPRI, r3
 8010736:	f3bf 8f6f 	isb	sy
 801073a:	f3bf 8f4f 	dsb	sy
 801073e:	613b      	str	r3, [r7, #16]
}
 8010740:	bf00      	nop
 8010742:	bf00      	nop
 8010744:	e7fd      	b.n	8010742 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8010746:	4b2a      	ldr	r3, [pc, #168]	@ (80107f0 <vTaskDelayUntil+0xf4>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d00b      	beq.n	8010766 <vTaskDelayUntil+0x6a>
	__asm volatile
 801074e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010752:	f383 8811 	msr	BASEPRI, r3
 8010756:	f3bf 8f6f 	isb	sy
 801075a:	f3bf 8f4f 	dsb	sy
 801075e:	60fb      	str	r3, [r7, #12]
}
 8010760:	bf00      	nop
 8010762:	bf00      	nop
 8010764:	e7fd      	b.n	8010762 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8010766:	f000 f8f1 	bl	801094c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801076a:	4b22      	ldr	r3, [pc, #136]	@ (80107f4 <vTaskDelayUntil+0xf8>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	683a      	ldr	r2, [r7, #0]
 8010776:	4413      	add	r3, r2
 8010778:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	6a3a      	ldr	r2, [r7, #32]
 8010780:	429a      	cmp	r2, r3
 8010782:	d20b      	bcs.n	801079c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	69fa      	ldr	r2, [r7, #28]
 801078a:	429a      	cmp	r2, r3
 801078c:	d211      	bcs.n	80107b2 <vTaskDelayUntil+0xb6>
 801078e:	69fa      	ldr	r2, [r7, #28]
 8010790:	6a3b      	ldr	r3, [r7, #32]
 8010792:	429a      	cmp	r2, r3
 8010794:	d90d      	bls.n	80107b2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8010796:	2301      	movs	r3, #1
 8010798:	627b      	str	r3, [r7, #36]	@ 0x24
 801079a:	e00a      	b.n	80107b2 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	69fa      	ldr	r2, [r7, #28]
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d303      	bcc.n	80107ae <vTaskDelayUntil+0xb2>
 80107a6:	69fa      	ldr	r2, [r7, #28]
 80107a8:	6a3b      	ldr	r3, [r7, #32]
 80107aa:	429a      	cmp	r2, r3
 80107ac:	d901      	bls.n	80107b2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80107ae:	2301      	movs	r3, #1
 80107b0:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	69fa      	ldr	r2, [r7, #28]
 80107b6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80107b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d006      	beq.n	80107cc <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80107be:	69fa      	ldr	r2, [r7, #28]
 80107c0:	6a3b      	ldr	r3, [r7, #32]
 80107c2:	1ad3      	subs	r3, r2, r3
 80107c4:	2100      	movs	r1, #0
 80107c6:	4618      	mov	r0, r3
 80107c8:	f001 f886 	bl	80118d8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80107cc:	f000 f8cc 	bl	8010968 <xTaskResumeAll>
 80107d0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80107d2:	69bb      	ldr	r3, [r7, #24]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d107      	bne.n	80107e8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80107d8:	4b07      	ldr	r3, [pc, #28]	@ (80107f8 <vTaskDelayUntil+0xfc>)
 80107da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80107de:	601a      	str	r2, [r3, #0]
 80107e0:	f3bf 8f4f 	dsb	sy
 80107e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80107e8:	bf00      	nop
 80107ea:	3728      	adds	r7, #40	@ 0x28
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}
 80107f0:	20006c04 	.word	0x20006c04
 80107f4:	20006be0 	.word	0x20006be0
 80107f8:	e000ed04 	.word	0xe000ed04

080107fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b084      	sub	sp, #16
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010804:	2300      	movs	r3, #0
 8010806:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d018      	beq.n	8010840 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801080e:	4b14      	ldr	r3, [pc, #80]	@ (8010860 <vTaskDelay+0x64>)
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d00b      	beq.n	801082e <vTaskDelay+0x32>
	__asm volatile
 8010816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801081a:	f383 8811 	msr	BASEPRI, r3
 801081e:	f3bf 8f6f 	isb	sy
 8010822:	f3bf 8f4f 	dsb	sy
 8010826:	60bb      	str	r3, [r7, #8]
}
 8010828:	bf00      	nop
 801082a:	bf00      	nop
 801082c:	e7fd      	b.n	801082a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801082e:	f000 f88d 	bl	801094c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010832:	2100      	movs	r1, #0
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f001 f84f 	bl	80118d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801083a:	f000 f895 	bl	8010968 <xTaskResumeAll>
 801083e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d107      	bne.n	8010856 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8010846:	4b07      	ldr	r3, [pc, #28]	@ (8010864 <vTaskDelay+0x68>)
 8010848:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801084c:	601a      	str	r2, [r3, #0]
 801084e:	f3bf 8f4f 	dsb	sy
 8010852:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010856:	bf00      	nop
 8010858:	3710      	adds	r7, #16
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}
 801085e:	bf00      	nop
 8010860:	20006c04 	.word	0x20006c04
 8010864:	e000ed04 	.word	0xe000ed04

08010868 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b08a      	sub	sp, #40	@ 0x28
 801086c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801086e:	2300      	movs	r3, #0
 8010870:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010872:	2300      	movs	r3, #0
 8010874:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010876:	463a      	mov	r2, r7
 8010878:	1d39      	adds	r1, r7, #4
 801087a:	f107 0308 	add.w	r3, r7, #8
 801087e:	4618      	mov	r0, r3
 8010880:	f7fe fd0a 	bl	800f298 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010884:	6839      	ldr	r1, [r7, #0]
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	68ba      	ldr	r2, [r7, #8]
 801088a:	9202      	str	r2, [sp, #8]
 801088c:	9301      	str	r3, [sp, #4]
 801088e:	2300      	movs	r3, #0
 8010890:	9300      	str	r3, [sp, #0]
 8010892:	2300      	movs	r3, #0
 8010894:	460a      	mov	r2, r1
 8010896:	4925      	ldr	r1, [pc, #148]	@ (801092c <vTaskStartScheduler+0xc4>)
 8010898:	4825      	ldr	r0, [pc, #148]	@ (8010930 <vTaskStartScheduler+0xc8>)
 801089a:	f7ff fcfb 	bl	8010294 <xTaskCreateStatic>
 801089e:	4603      	mov	r3, r0
 80108a0:	4a24      	ldr	r2, [pc, #144]	@ (8010934 <vTaskStartScheduler+0xcc>)
 80108a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80108a4:	4b23      	ldr	r3, [pc, #140]	@ (8010934 <vTaskStartScheduler+0xcc>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d002      	beq.n	80108b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80108ac:	2301      	movs	r3, #1
 80108ae:	617b      	str	r3, [r7, #20]
 80108b0:	e001      	b.n	80108b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80108b2:	2300      	movs	r3, #0
 80108b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	2b01      	cmp	r3, #1
 80108ba:	d102      	bne.n	80108c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80108bc:	f001 f860 	bl	8011980 <xTimerCreateTimerTask>
 80108c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	2b01      	cmp	r3, #1
 80108c6:	d11d      	bne.n	8010904 <vTaskStartScheduler+0x9c>
	__asm volatile
 80108c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108cc:	f383 8811 	msr	BASEPRI, r3
 80108d0:	f3bf 8f6f 	isb	sy
 80108d4:	f3bf 8f4f 	dsb	sy
 80108d8:	613b      	str	r3, [r7, #16]
}
 80108da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80108dc:	4b16      	ldr	r3, [pc, #88]	@ (8010938 <vTaskStartScheduler+0xd0>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	335c      	adds	r3, #92	@ 0x5c
 80108e2:	4a16      	ldr	r2, [pc, #88]	@ (801093c <vTaskStartScheduler+0xd4>)
 80108e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80108e6:	4b16      	ldr	r3, [pc, #88]	@ (8010940 <vTaskStartScheduler+0xd8>)
 80108e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80108ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80108ee:	4b15      	ldr	r3, [pc, #84]	@ (8010944 <vTaskStartScheduler+0xdc>)
 80108f0:	2201      	movs	r2, #1
 80108f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80108f4:	4b14      	ldr	r3, [pc, #80]	@ (8010948 <vTaskStartScheduler+0xe0>)
 80108f6:	2200      	movs	r2, #0
 80108f8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80108fa:	f7f4 faa7 	bl	8004e4c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80108fe:	f001 fc27 	bl	8012150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010902:	e00f      	b.n	8010924 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801090a:	d10b      	bne.n	8010924 <vTaskStartScheduler+0xbc>
	__asm volatile
 801090c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010910:	f383 8811 	msr	BASEPRI, r3
 8010914:	f3bf 8f6f 	isb	sy
 8010918:	f3bf 8f4f 	dsb	sy
 801091c:	60fb      	str	r3, [r7, #12]
}
 801091e:	bf00      	nop
 8010920:	bf00      	nop
 8010922:	e7fd      	b.n	8010920 <vTaskStartScheduler+0xb8>
}
 8010924:	bf00      	nop
 8010926:	3718      	adds	r7, #24
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}
 801092c:	08022564 	.word	0x08022564
 8010930:	08010fd5 	.word	0x08010fd5
 8010934:	20006c00 	.word	0x20006c00
 8010938:	20006708 	.word	0x20006708
 801093c:	200001b4 	.word	0x200001b4
 8010940:	20006bfc 	.word	0x20006bfc
 8010944:	20006be8 	.word	0x20006be8
 8010948:	20006be0 	.word	0x20006be0

0801094c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801094c:	b480      	push	{r7}
 801094e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010950:	4b04      	ldr	r3, [pc, #16]	@ (8010964 <vTaskSuspendAll+0x18>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	3301      	adds	r3, #1
 8010956:	4a03      	ldr	r2, [pc, #12]	@ (8010964 <vTaskSuspendAll+0x18>)
 8010958:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801095a:	bf00      	nop
 801095c:	46bd      	mov	sp, r7
 801095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010962:	4770      	bx	lr
 8010964:	20006c04 	.word	0x20006c04

08010968 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b084      	sub	sp, #16
 801096c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801096e:	2300      	movs	r3, #0
 8010970:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010972:	2300      	movs	r3, #0
 8010974:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010976:	4b42      	ldr	r3, [pc, #264]	@ (8010a80 <xTaskResumeAll+0x118>)
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d10b      	bne.n	8010996 <xTaskResumeAll+0x2e>
	__asm volatile
 801097e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010982:	f383 8811 	msr	BASEPRI, r3
 8010986:	f3bf 8f6f 	isb	sy
 801098a:	f3bf 8f4f 	dsb	sy
 801098e:	603b      	str	r3, [r7, #0]
}
 8010990:	bf00      	nop
 8010992:	bf00      	nop
 8010994:	e7fd      	b.n	8010992 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010996:	f001 fc7f 	bl	8012298 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801099a:	4b39      	ldr	r3, [pc, #228]	@ (8010a80 <xTaskResumeAll+0x118>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	3b01      	subs	r3, #1
 80109a0:	4a37      	ldr	r2, [pc, #220]	@ (8010a80 <xTaskResumeAll+0x118>)
 80109a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80109a4:	4b36      	ldr	r3, [pc, #216]	@ (8010a80 <xTaskResumeAll+0x118>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d162      	bne.n	8010a72 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80109ac:	4b35      	ldr	r3, [pc, #212]	@ (8010a84 <xTaskResumeAll+0x11c>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d05e      	beq.n	8010a72 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80109b4:	e02f      	b.n	8010a16 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109b6:	4b34      	ldr	r3, [pc, #208]	@ (8010a88 <xTaskResumeAll+0x120>)
 80109b8:	68db      	ldr	r3, [r3, #12]
 80109ba:	68db      	ldr	r3, [r3, #12]
 80109bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	3318      	adds	r3, #24
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7fe fd26 	bl	800f414 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	3304      	adds	r3, #4
 80109cc:	4618      	mov	r0, r3
 80109ce:	f7fe fd21 	bl	800f414 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109d6:	4b2d      	ldr	r3, [pc, #180]	@ (8010a8c <xTaskResumeAll+0x124>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	429a      	cmp	r2, r3
 80109dc:	d903      	bls.n	80109e6 <xTaskResumeAll+0x7e>
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109e2:	4a2a      	ldr	r2, [pc, #168]	@ (8010a8c <xTaskResumeAll+0x124>)
 80109e4:	6013      	str	r3, [r2, #0]
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109ea:	4613      	mov	r3, r2
 80109ec:	009b      	lsls	r3, r3, #2
 80109ee:	4413      	add	r3, r2
 80109f0:	009b      	lsls	r3, r3, #2
 80109f2:	4a27      	ldr	r2, [pc, #156]	@ (8010a90 <xTaskResumeAll+0x128>)
 80109f4:	441a      	add	r2, r3
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	3304      	adds	r3, #4
 80109fa:	4619      	mov	r1, r3
 80109fc:	4610      	mov	r0, r2
 80109fe:	f7fe fcac 	bl	800f35a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a06:	4b23      	ldr	r3, [pc, #140]	@ (8010a94 <xTaskResumeAll+0x12c>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d302      	bcc.n	8010a16 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8010a10:	4b21      	ldr	r3, [pc, #132]	@ (8010a98 <xTaskResumeAll+0x130>)
 8010a12:	2201      	movs	r2, #1
 8010a14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010a16:	4b1c      	ldr	r3, [pc, #112]	@ (8010a88 <xTaskResumeAll+0x120>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d1cb      	bne.n	80109b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d001      	beq.n	8010a28 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010a24:	f000 fb92 	bl	801114c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010a28:	4b1c      	ldr	r3, [pc, #112]	@ (8010a9c <xTaskResumeAll+0x134>)
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d010      	beq.n	8010a56 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010a34:	f000 f858 	bl	8010ae8 <xTaskIncrementTick>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d002      	beq.n	8010a44 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8010a3e:	4b16      	ldr	r3, [pc, #88]	@ (8010a98 <xTaskResumeAll+0x130>)
 8010a40:	2201      	movs	r2, #1
 8010a42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	3b01      	subs	r3, #1
 8010a48:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d1f1      	bne.n	8010a34 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8010a50:	4b12      	ldr	r3, [pc, #72]	@ (8010a9c <xTaskResumeAll+0x134>)
 8010a52:	2200      	movs	r2, #0
 8010a54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010a56:	4b10      	ldr	r3, [pc, #64]	@ (8010a98 <xTaskResumeAll+0x130>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d009      	beq.n	8010a72 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010a5e:	2301      	movs	r3, #1
 8010a60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010a62:	4b0f      	ldr	r3, [pc, #60]	@ (8010aa0 <xTaskResumeAll+0x138>)
 8010a64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a68:	601a      	str	r2, [r3, #0]
 8010a6a:	f3bf 8f4f 	dsb	sy
 8010a6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010a72:	f001 fc43 	bl	80122fc <vPortExitCritical>

	return xAlreadyYielded;
 8010a76:	68bb      	ldr	r3, [r7, #8]
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3710      	adds	r7, #16
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}
 8010a80:	20006c04 	.word	0x20006c04
 8010a84:	20006bdc 	.word	0x20006bdc
 8010a88:	20006b9c 	.word	0x20006b9c
 8010a8c:	20006be4 	.word	0x20006be4
 8010a90:	2000670c 	.word	0x2000670c
 8010a94:	20006708 	.word	0x20006708
 8010a98:	20006bf0 	.word	0x20006bf0
 8010a9c:	20006bec 	.word	0x20006bec
 8010aa0:	e000ed04 	.word	0xe000ed04

08010aa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010aa4:	b480      	push	{r7}
 8010aa6:	b083      	sub	sp, #12
 8010aa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010aaa:	4b05      	ldr	r3, [pc, #20]	@ (8010ac0 <xTaskGetTickCount+0x1c>)
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010ab0:	687b      	ldr	r3, [r7, #4]
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	370c      	adds	r7, #12
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abc:	4770      	bx	lr
 8010abe:	bf00      	nop
 8010ac0:	20006be0 	.word	0x20006be0

08010ac4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010aca:	f001 fcc5 	bl	8012458 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010ace:	2300      	movs	r3, #0
 8010ad0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010ad2:	4b04      	ldr	r3, [pc, #16]	@ (8010ae4 <xTaskGetTickCountFromISR+0x20>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010ad8:	683b      	ldr	r3, [r7, #0]
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3708      	adds	r7, #8
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}
 8010ae2:	bf00      	nop
 8010ae4:	20006be0 	.word	0x20006be0

08010ae8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b086      	sub	sp, #24
 8010aec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010aee:	2300      	movs	r3, #0
 8010af0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010af2:	4b4f      	ldr	r3, [pc, #316]	@ (8010c30 <xTaskIncrementTick+0x148>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	f040 8090 	bne.w	8010c1c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010afc:	4b4d      	ldr	r3, [pc, #308]	@ (8010c34 <xTaskIncrementTick+0x14c>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	3301      	adds	r3, #1
 8010b02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010b04:	4a4b      	ldr	r2, [pc, #300]	@ (8010c34 <xTaskIncrementTick+0x14c>)
 8010b06:	693b      	ldr	r3, [r7, #16]
 8010b08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010b0a:	693b      	ldr	r3, [r7, #16]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d121      	bne.n	8010b54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010b10:	4b49      	ldr	r3, [pc, #292]	@ (8010c38 <xTaskIncrementTick+0x150>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d00b      	beq.n	8010b32 <xTaskIncrementTick+0x4a>
	__asm volatile
 8010b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b1e:	f383 8811 	msr	BASEPRI, r3
 8010b22:	f3bf 8f6f 	isb	sy
 8010b26:	f3bf 8f4f 	dsb	sy
 8010b2a:	603b      	str	r3, [r7, #0]
}
 8010b2c:	bf00      	nop
 8010b2e:	bf00      	nop
 8010b30:	e7fd      	b.n	8010b2e <xTaskIncrementTick+0x46>
 8010b32:	4b41      	ldr	r3, [pc, #260]	@ (8010c38 <xTaskIncrementTick+0x150>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	60fb      	str	r3, [r7, #12]
 8010b38:	4b40      	ldr	r3, [pc, #256]	@ (8010c3c <xTaskIncrementTick+0x154>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	4a3e      	ldr	r2, [pc, #248]	@ (8010c38 <xTaskIncrementTick+0x150>)
 8010b3e:	6013      	str	r3, [r2, #0]
 8010b40:	4a3e      	ldr	r2, [pc, #248]	@ (8010c3c <xTaskIncrementTick+0x154>)
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	6013      	str	r3, [r2, #0]
 8010b46:	4b3e      	ldr	r3, [pc, #248]	@ (8010c40 <xTaskIncrementTick+0x158>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	3301      	adds	r3, #1
 8010b4c:	4a3c      	ldr	r2, [pc, #240]	@ (8010c40 <xTaskIncrementTick+0x158>)
 8010b4e:	6013      	str	r3, [r2, #0]
 8010b50:	f000 fafc 	bl	801114c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010b54:	4b3b      	ldr	r3, [pc, #236]	@ (8010c44 <xTaskIncrementTick+0x15c>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	693a      	ldr	r2, [r7, #16]
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d349      	bcc.n	8010bf2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010b5e:	4b36      	ldr	r3, [pc, #216]	@ (8010c38 <xTaskIncrementTick+0x150>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d104      	bne.n	8010b72 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b68:	4b36      	ldr	r3, [pc, #216]	@ (8010c44 <xTaskIncrementTick+0x15c>)
 8010b6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010b6e:	601a      	str	r2, [r3, #0]
					break;
 8010b70:	e03f      	b.n	8010bf2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b72:	4b31      	ldr	r3, [pc, #196]	@ (8010c38 <xTaskIncrementTick+0x150>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	68db      	ldr	r3, [r3, #12]
 8010b78:	68db      	ldr	r3, [r3, #12]
 8010b7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	685b      	ldr	r3, [r3, #4]
 8010b80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010b82:	693a      	ldr	r2, [r7, #16]
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d203      	bcs.n	8010b92 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010b8a:	4a2e      	ldr	r2, [pc, #184]	@ (8010c44 <xTaskIncrementTick+0x15c>)
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010b90:	e02f      	b.n	8010bf2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	3304      	adds	r3, #4
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7fe fc3c 	bl	800f414 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d004      	beq.n	8010bae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	3318      	adds	r3, #24
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f7fe fc33 	bl	800f414 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bb2:	4b25      	ldr	r3, [pc, #148]	@ (8010c48 <xTaskIncrementTick+0x160>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	d903      	bls.n	8010bc2 <xTaskIncrementTick+0xda>
 8010bba:	68bb      	ldr	r3, [r7, #8]
 8010bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bbe:	4a22      	ldr	r2, [pc, #136]	@ (8010c48 <xTaskIncrementTick+0x160>)
 8010bc0:	6013      	str	r3, [r2, #0]
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bc6:	4613      	mov	r3, r2
 8010bc8:	009b      	lsls	r3, r3, #2
 8010bca:	4413      	add	r3, r2
 8010bcc:	009b      	lsls	r3, r3, #2
 8010bce:	4a1f      	ldr	r2, [pc, #124]	@ (8010c4c <xTaskIncrementTick+0x164>)
 8010bd0:	441a      	add	r2, r3
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	3304      	adds	r3, #4
 8010bd6:	4619      	mov	r1, r3
 8010bd8:	4610      	mov	r0, r2
 8010bda:	f7fe fbbe 	bl	800f35a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010be2:	4b1b      	ldr	r3, [pc, #108]	@ (8010c50 <xTaskIncrementTick+0x168>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010be8:	429a      	cmp	r2, r3
 8010bea:	d3b8      	bcc.n	8010b5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010bec:	2301      	movs	r3, #1
 8010bee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010bf0:	e7b5      	b.n	8010b5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010bf2:	4b17      	ldr	r3, [pc, #92]	@ (8010c50 <xTaskIncrementTick+0x168>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bf8:	4914      	ldr	r1, [pc, #80]	@ (8010c4c <xTaskIncrementTick+0x164>)
 8010bfa:	4613      	mov	r3, r2
 8010bfc:	009b      	lsls	r3, r3, #2
 8010bfe:	4413      	add	r3, r2
 8010c00:	009b      	lsls	r3, r3, #2
 8010c02:	440b      	add	r3, r1
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	2b01      	cmp	r3, #1
 8010c08:	d901      	bls.n	8010c0e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010c0e:	4b11      	ldr	r3, [pc, #68]	@ (8010c54 <xTaskIncrementTick+0x16c>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d007      	beq.n	8010c26 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8010c16:	2301      	movs	r3, #1
 8010c18:	617b      	str	r3, [r7, #20]
 8010c1a:	e004      	b.n	8010c26 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8010c58 <xTaskIncrementTick+0x170>)
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	3301      	adds	r3, #1
 8010c22:	4a0d      	ldr	r2, [pc, #52]	@ (8010c58 <xTaskIncrementTick+0x170>)
 8010c24:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010c26:	697b      	ldr	r3, [r7, #20]
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3718      	adds	r7, #24
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}
 8010c30:	20006c04 	.word	0x20006c04
 8010c34:	20006be0 	.word	0x20006be0
 8010c38:	20006b94 	.word	0x20006b94
 8010c3c:	20006b98 	.word	0x20006b98
 8010c40:	20006bf4 	.word	0x20006bf4
 8010c44:	20006bfc 	.word	0x20006bfc
 8010c48:	20006be4 	.word	0x20006be4
 8010c4c:	2000670c 	.word	0x2000670c
 8010c50:	20006708 	.word	0x20006708
 8010c54:	20006bf0 	.word	0x20006bf0
 8010c58:	20006bec 	.word	0x20006bec

08010c5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b084      	sub	sp, #16
 8010c60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010c62:	4b36      	ldr	r3, [pc, #216]	@ (8010d3c <vTaskSwitchContext+0xe0>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d003      	beq.n	8010c72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010c6a:	4b35      	ldr	r3, [pc, #212]	@ (8010d40 <vTaskSwitchContext+0xe4>)
 8010c6c:	2201      	movs	r2, #1
 8010c6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010c70:	e060      	b.n	8010d34 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 8010c72:	4b33      	ldr	r3, [pc, #204]	@ (8010d40 <vTaskSwitchContext+0xe4>)
 8010c74:	2200      	movs	r2, #0
 8010c76:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010c78:	f7f4 f8f6 	bl	8004e68 <getRunTimeCounterValue>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	4a31      	ldr	r2, [pc, #196]	@ (8010d44 <vTaskSwitchContext+0xe8>)
 8010c80:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8010c82:	4b30      	ldr	r3, [pc, #192]	@ (8010d44 <vTaskSwitchContext+0xe8>)
 8010c84:	681a      	ldr	r2, [r3, #0]
 8010c86:	4b30      	ldr	r3, [pc, #192]	@ (8010d48 <vTaskSwitchContext+0xec>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d909      	bls.n	8010ca2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8010c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8010d4c <vTaskSwitchContext+0xf0>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8010c94:	4a2b      	ldr	r2, [pc, #172]	@ (8010d44 <vTaskSwitchContext+0xe8>)
 8010c96:	6810      	ldr	r0, [r2, #0]
 8010c98:	4a2b      	ldr	r2, [pc, #172]	@ (8010d48 <vTaskSwitchContext+0xec>)
 8010c9a:	6812      	ldr	r2, [r2, #0]
 8010c9c:	1a82      	subs	r2, r0, r2
 8010c9e:	440a      	add	r2, r1
 8010ca0:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8010ca2:	4b28      	ldr	r3, [pc, #160]	@ (8010d44 <vTaskSwitchContext+0xe8>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	4a28      	ldr	r2, [pc, #160]	@ (8010d48 <vTaskSwitchContext+0xec>)
 8010ca8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010caa:	4b29      	ldr	r3, [pc, #164]	@ (8010d50 <vTaskSwitchContext+0xf4>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	60fb      	str	r3, [r7, #12]
 8010cb0:	e011      	b.n	8010cd6 <vTaskSwitchContext+0x7a>
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d10b      	bne.n	8010cd0 <vTaskSwitchContext+0x74>
	__asm volatile
 8010cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cbc:	f383 8811 	msr	BASEPRI, r3
 8010cc0:	f3bf 8f6f 	isb	sy
 8010cc4:	f3bf 8f4f 	dsb	sy
 8010cc8:	607b      	str	r3, [r7, #4]
}
 8010cca:	bf00      	nop
 8010ccc:	bf00      	nop
 8010cce:	e7fd      	b.n	8010ccc <vTaskSwitchContext+0x70>
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	3b01      	subs	r3, #1
 8010cd4:	60fb      	str	r3, [r7, #12]
 8010cd6:	491f      	ldr	r1, [pc, #124]	@ (8010d54 <vTaskSwitchContext+0xf8>)
 8010cd8:	68fa      	ldr	r2, [r7, #12]
 8010cda:	4613      	mov	r3, r2
 8010cdc:	009b      	lsls	r3, r3, #2
 8010cde:	4413      	add	r3, r2
 8010ce0:	009b      	lsls	r3, r3, #2
 8010ce2:	440b      	add	r3, r1
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d0e3      	beq.n	8010cb2 <vTaskSwitchContext+0x56>
 8010cea:	68fa      	ldr	r2, [r7, #12]
 8010cec:	4613      	mov	r3, r2
 8010cee:	009b      	lsls	r3, r3, #2
 8010cf0:	4413      	add	r3, r2
 8010cf2:	009b      	lsls	r3, r3, #2
 8010cf4:	4a17      	ldr	r2, [pc, #92]	@ (8010d54 <vTaskSwitchContext+0xf8>)
 8010cf6:	4413      	add	r3, r2
 8010cf8:	60bb      	str	r3, [r7, #8]
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	685b      	ldr	r3, [r3, #4]
 8010cfe:	685a      	ldr	r2, [r3, #4]
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	605a      	str	r2, [r3, #4]
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	685a      	ldr	r2, [r3, #4]
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	3308      	adds	r3, #8
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d104      	bne.n	8010d1a <vTaskSwitchContext+0xbe>
 8010d10:	68bb      	ldr	r3, [r7, #8]
 8010d12:	685b      	ldr	r3, [r3, #4]
 8010d14:	685a      	ldr	r2, [r3, #4]
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	605a      	str	r2, [r3, #4]
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	685b      	ldr	r3, [r3, #4]
 8010d1e:	68db      	ldr	r3, [r3, #12]
 8010d20:	4a0a      	ldr	r2, [pc, #40]	@ (8010d4c <vTaskSwitchContext+0xf0>)
 8010d22:	6013      	str	r3, [r2, #0]
 8010d24:	4a0a      	ldr	r2, [pc, #40]	@ (8010d50 <vTaskSwitchContext+0xf4>)
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010d2a:	4b08      	ldr	r3, [pc, #32]	@ (8010d4c <vTaskSwitchContext+0xf0>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	335c      	adds	r3, #92	@ 0x5c
 8010d30:	4a09      	ldr	r2, [pc, #36]	@ (8010d58 <vTaskSwitchContext+0xfc>)
 8010d32:	6013      	str	r3, [r2, #0]
}
 8010d34:	bf00      	nop
 8010d36:	3710      	adds	r7, #16
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}
 8010d3c:	20006c04 	.word	0x20006c04
 8010d40:	20006bf0 	.word	0x20006bf0
 8010d44:	20006c0c 	.word	0x20006c0c
 8010d48:	20006c08 	.word	0x20006c08
 8010d4c:	20006708 	.word	0x20006708
 8010d50:	20006be4 	.word	0x20006be4
 8010d54:	2000670c 	.word	0x2000670c
 8010d58:	200001b4 	.word	0x200001b4

08010d5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b084      	sub	sp, #16
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
 8010d64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d10b      	bne.n	8010d84 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d70:	f383 8811 	msr	BASEPRI, r3
 8010d74:	f3bf 8f6f 	isb	sy
 8010d78:	f3bf 8f4f 	dsb	sy
 8010d7c:	60fb      	str	r3, [r7, #12]
}
 8010d7e:	bf00      	nop
 8010d80:	bf00      	nop
 8010d82:	e7fd      	b.n	8010d80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010d84:	4b07      	ldr	r3, [pc, #28]	@ (8010da4 <vTaskPlaceOnEventList+0x48>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	3318      	adds	r3, #24
 8010d8a:	4619      	mov	r1, r3
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f7fe fb08 	bl	800f3a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010d92:	2101      	movs	r1, #1
 8010d94:	6838      	ldr	r0, [r7, #0]
 8010d96:	f000 fd9f 	bl	80118d8 <prvAddCurrentTaskToDelayedList>
}
 8010d9a:	bf00      	nop
 8010d9c:	3710      	adds	r7, #16
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}
 8010da2:	bf00      	nop
 8010da4:	20006708 	.word	0x20006708

08010da8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b086      	sub	sp, #24
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	60f8      	str	r0, [r7, #12]
 8010db0:	60b9      	str	r1, [r7, #8]
 8010db2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d10b      	bne.n	8010dd2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8010dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dbe:	f383 8811 	msr	BASEPRI, r3
 8010dc2:	f3bf 8f6f 	isb	sy
 8010dc6:	f3bf 8f4f 	dsb	sy
 8010dca:	617b      	str	r3, [r7, #20]
}
 8010dcc:	bf00      	nop
 8010dce:	bf00      	nop
 8010dd0:	e7fd      	b.n	8010dce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8010dfc <vTaskPlaceOnEventListRestricted+0x54>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	3318      	adds	r3, #24
 8010dd8:	4619      	mov	r1, r3
 8010dda:	68f8      	ldr	r0, [r7, #12]
 8010ddc:	f7fe fabd 	bl	800f35a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d002      	beq.n	8010dec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8010de6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010dea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010dec:	6879      	ldr	r1, [r7, #4]
 8010dee:	68b8      	ldr	r0, [r7, #8]
 8010df0:	f000 fd72 	bl	80118d8 <prvAddCurrentTaskToDelayedList>
	}
 8010df4:	bf00      	nop
 8010df6:	3718      	adds	r7, #24
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	20006708 	.word	0x20006708

08010e00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b086      	sub	sp, #24
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	68db      	ldr	r3, [r3, #12]
 8010e0c:	68db      	ldr	r3, [r3, #12]
 8010e0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d10b      	bne.n	8010e2e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8010e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e1a:	f383 8811 	msr	BASEPRI, r3
 8010e1e:	f3bf 8f6f 	isb	sy
 8010e22:	f3bf 8f4f 	dsb	sy
 8010e26:	60fb      	str	r3, [r7, #12]
}
 8010e28:	bf00      	nop
 8010e2a:	bf00      	nop
 8010e2c:	e7fd      	b.n	8010e2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	3318      	adds	r3, #24
 8010e32:	4618      	mov	r0, r3
 8010e34:	f7fe faee 	bl	800f414 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e38:	4b1d      	ldr	r3, [pc, #116]	@ (8010eb0 <xTaskRemoveFromEventList+0xb0>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d11d      	bne.n	8010e7c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010e40:	693b      	ldr	r3, [r7, #16]
 8010e42:	3304      	adds	r3, #4
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7fe fae5 	bl	800f414 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010e4a:	693b      	ldr	r3, [r7, #16]
 8010e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e4e:	4b19      	ldr	r3, [pc, #100]	@ (8010eb4 <xTaskRemoveFromEventList+0xb4>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	429a      	cmp	r2, r3
 8010e54:	d903      	bls.n	8010e5e <xTaskRemoveFromEventList+0x5e>
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e5a:	4a16      	ldr	r2, [pc, #88]	@ (8010eb4 <xTaskRemoveFromEventList+0xb4>)
 8010e5c:	6013      	str	r3, [r2, #0]
 8010e5e:	693b      	ldr	r3, [r7, #16]
 8010e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e62:	4613      	mov	r3, r2
 8010e64:	009b      	lsls	r3, r3, #2
 8010e66:	4413      	add	r3, r2
 8010e68:	009b      	lsls	r3, r3, #2
 8010e6a:	4a13      	ldr	r2, [pc, #76]	@ (8010eb8 <xTaskRemoveFromEventList+0xb8>)
 8010e6c:	441a      	add	r2, r3
 8010e6e:	693b      	ldr	r3, [r7, #16]
 8010e70:	3304      	adds	r3, #4
 8010e72:	4619      	mov	r1, r3
 8010e74:	4610      	mov	r0, r2
 8010e76:	f7fe fa70 	bl	800f35a <vListInsertEnd>
 8010e7a:	e005      	b.n	8010e88 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010e7c:	693b      	ldr	r3, [r7, #16]
 8010e7e:	3318      	adds	r3, #24
 8010e80:	4619      	mov	r1, r3
 8010e82:	480e      	ldr	r0, [pc, #56]	@ (8010ebc <xTaskRemoveFromEventList+0xbc>)
 8010e84:	f7fe fa69 	bl	800f35a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010e88:	693b      	ldr	r3, [r7, #16]
 8010e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8010ec0 <xTaskRemoveFromEventList+0xc0>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d905      	bls.n	8010ea2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010e96:	2301      	movs	r3, #1
 8010e98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8010ec4 <xTaskRemoveFromEventList+0xc4>)
 8010e9c:	2201      	movs	r2, #1
 8010e9e:	601a      	str	r2, [r3, #0]
 8010ea0:	e001      	b.n	8010ea6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010ea6:	697b      	ldr	r3, [r7, #20]
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3718      	adds	r7, #24
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}
 8010eb0:	20006c04 	.word	0x20006c04
 8010eb4:	20006be4 	.word	0x20006be4
 8010eb8:	2000670c 	.word	0x2000670c
 8010ebc:	20006b9c 	.word	0x20006b9c
 8010ec0:	20006708 	.word	0x20006708
 8010ec4:	20006bf0 	.word	0x20006bf0

08010ec8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010ec8:	b480      	push	{r7}
 8010eca:	b083      	sub	sp, #12
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010ed0:	4b06      	ldr	r3, [pc, #24]	@ (8010eec <vTaskInternalSetTimeOutState+0x24>)
 8010ed2:	681a      	ldr	r2, [r3, #0]
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010ed8:	4b05      	ldr	r3, [pc, #20]	@ (8010ef0 <vTaskInternalSetTimeOutState+0x28>)
 8010eda:	681a      	ldr	r2, [r3, #0]
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	605a      	str	r2, [r3, #4]
}
 8010ee0:	bf00      	nop
 8010ee2:	370c      	adds	r7, #12
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr
 8010eec:	20006bf4 	.word	0x20006bf4
 8010ef0:	20006be0 	.word	0x20006be0

08010ef4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b088      	sub	sp, #32
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
 8010efc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d10b      	bne.n	8010f1c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f08:	f383 8811 	msr	BASEPRI, r3
 8010f0c:	f3bf 8f6f 	isb	sy
 8010f10:	f3bf 8f4f 	dsb	sy
 8010f14:	613b      	str	r3, [r7, #16]
}
 8010f16:	bf00      	nop
 8010f18:	bf00      	nop
 8010f1a:	e7fd      	b.n	8010f18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d10b      	bne.n	8010f3a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8010f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f26:	f383 8811 	msr	BASEPRI, r3
 8010f2a:	f3bf 8f6f 	isb	sy
 8010f2e:	f3bf 8f4f 	dsb	sy
 8010f32:	60fb      	str	r3, [r7, #12]
}
 8010f34:	bf00      	nop
 8010f36:	bf00      	nop
 8010f38:	e7fd      	b.n	8010f36 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8010f3a:	f001 f9ad 	bl	8012298 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8010fb4 <xTaskCheckForTimeOut+0xc0>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	685b      	ldr	r3, [r3, #4]
 8010f48:	69ba      	ldr	r2, [r7, #24]
 8010f4a:	1ad3      	subs	r3, r2, r3
 8010f4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010f56:	d102      	bne.n	8010f5e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	61fb      	str	r3, [r7, #28]
 8010f5c:	e023      	b.n	8010fa6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681a      	ldr	r2, [r3, #0]
 8010f62:	4b15      	ldr	r3, [pc, #84]	@ (8010fb8 <xTaskCheckForTimeOut+0xc4>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d007      	beq.n	8010f7a <xTaskCheckForTimeOut+0x86>
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	69ba      	ldr	r2, [r7, #24]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d302      	bcc.n	8010f7a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010f74:	2301      	movs	r3, #1
 8010f76:	61fb      	str	r3, [r7, #28]
 8010f78:	e015      	b.n	8010fa6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	697a      	ldr	r2, [r7, #20]
 8010f80:	429a      	cmp	r2, r3
 8010f82:	d20b      	bcs.n	8010f9c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	681a      	ldr	r2, [r3, #0]
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	1ad2      	subs	r2, r2, r3
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f7ff ff99 	bl	8010ec8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010f96:	2300      	movs	r3, #0
 8010f98:	61fb      	str	r3, [r7, #28]
 8010f9a:	e004      	b.n	8010fa6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010fa6:	f001 f9a9 	bl	80122fc <vPortExitCritical>

	return xReturn;
 8010faa:	69fb      	ldr	r3, [r7, #28]
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	3720      	adds	r7, #32
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}
 8010fb4:	20006be0 	.word	0x20006be0
 8010fb8:	20006bf4 	.word	0x20006bf4

08010fbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010fbc:	b480      	push	{r7}
 8010fbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010fc0:	4b03      	ldr	r3, [pc, #12]	@ (8010fd0 <vTaskMissedYield+0x14>)
 8010fc2:	2201      	movs	r2, #1
 8010fc4:	601a      	str	r2, [r3, #0]
}
 8010fc6:	bf00      	nop
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fce:	4770      	bx	lr
 8010fd0:	20006bf0 	.word	0x20006bf0

08010fd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b082      	sub	sp, #8
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010fdc:	f000 f852 	bl	8011084 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010fe0:	4b06      	ldr	r3, [pc, #24]	@ (8010ffc <prvIdleTask+0x28>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	2b01      	cmp	r3, #1
 8010fe6:	d9f9      	bls.n	8010fdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8010fe8:	4b05      	ldr	r3, [pc, #20]	@ (8011000 <prvIdleTask+0x2c>)
 8010fea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010fee:	601a      	str	r2, [r3, #0]
 8010ff0:	f3bf 8f4f 	dsb	sy
 8010ff4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010ff8:	e7f0      	b.n	8010fdc <prvIdleTask+0x8>
 8010ffa:	bf00      	nop
 8010ffc:	2000670c 	.word	0x2000670c
 8011000:	e000ed04 	.word	0xe000ed04

08011004 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b082      	sub	sp, #8
 8011008:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801100a:	2300      	movs	r3, #0
 801100c:	607b      	str	r3, [r7, #4]
 801100e:	e00c      	b.n	801102a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011010:	687a      	ldr	r2, [r7, #4]
 8011012:	4613      	mov	r3, r2
 8011014:	009b      	lsls	r3, r3, #2
 8011016:	4413      	add	r3, r2
 8011018:	009b      	lsls	r3, r3, #2
 801101a:	4a12      	ldr	r2, [pc, #72]	@ (8011064 <prvInitialiseTaskLists+0x60>)
 801101c:	4413      	add	r3, r2
 801101e:	4618      	mov	r0, r3
 8011020:	f7fe f96e 	bl	800f300 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	3301      	adds	r3, #1
 8011028:	607b      	str	r3, [r7, #4]
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2b37      	cmp	r3, #55	@ 0x37
 801102e:	d9ef      	bls.n	8011010 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011030:	480d      	ldr	r0, [pc, #52]	@ (8011068 <prvInitialiseTaskLists+0x64>)
 8011032:	f7fe f965 	bl	800f300 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011036:	480d      	ldr	r0, [pc, #52]	@ (801106c <prvInitialiseTaskLists+0x68>)
 8011038:	f7fe f962 	bl	800f300 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801103c:	480c      	ldr	r0, [pc, #48]	@ (8011070 <prvInitialiseTaskLists+0x6c>)
 801103e:	f7fe f95f 	bl	800f300 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011042:	480c      	ldr	r0, [pc, #48]	@ (8011074 <prvInitialiseTaskLists+0x70>)
 8011044:	f7fe f95c 	bl	800f300 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011048:	480b      	ldr	r0, [pc, #44]	@ (8011078 <prvInitialiseTaskLists+0x74>)
 801104a:	f7fe f959 	bl	800f300 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801104e:	4b0b      	ldr	r3, [pc, #44]	@ (801107c <prvInitialiseTaskLists+0x78>)
 8011050:	4a05      	ldr	r2, [pc, #20]	@ (8011068 <prvInitialiseTaskLists+0x64>)
 8011052:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011054:	4b0a      	ldr	r3, [pc, #40]	@ (8011080 <prvInitialiseTaskLists+0x7c>)
 8011056:	4a05      	ldr	r2, [pc, #20]	@ (801106c <prvInitialiseTaskLists+0x68>)
 8011058:	601a      	str	r2, [r3, #0]
}
 801105a:	bf00      	nop
 801105c:	3708      	adds	r7, #8
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}
 8011062:	bf00      	nop
 8011064:	2000670c 	.word	0x2000670c
 8011068:	20006b6c 	.word	0x20006b6c
 801106c:	20006b80 	.word	0x20006b80
 8011070:	20006b9c 	.word	0x20006b9c
 8011074:	20006bb0 	.word	0x20006bb0
 8011078:	20006bc8 	.word	0x20006bc8
 801107c:	20006b94 	.word	0x20006b94
 8011080:	20006b98 	.word	0x20006b98

08011084 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b082      	sub	sp, #8
 8011088:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801108a:	e019      	b.n	80110c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801108c:	f001 f904 	bl	8012298 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011090:	4b10      	ldr	r3, [pc, #64]	@ (80110d4 <prvCheckTasksWaitingTermination+0x50>)
 8011092:	68db      	ldr	r3, [r3, #12]
 8011094:	68db      	ldr	r3, [r3, #12]
 8011096:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	3304      	adds	r3, #4
 801109c:	4618      	mov	r0, r3
 801109e:	f7fe f9b9 	bl	800f414 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80110a2:	4b0d      	ldr	r3, [pc, #52]	@ (80110d8 <prvCheckTasksWaitingTermination+0x54>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	3b01      	subs	r3, #1
 80110a8:	4a0b      	ldr	r2, [pc, #44]	@ (80110d8 <prvCheckTasksWaitingTermination+0x54>)
 80110aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80110ac:	4b0b      	ldr	r3, [pc, #44]	@ (80110dc <prvCheckTasksWaitingTermination+0x58>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	3b01      	subs	r3, #1
 80110b2:	4a0a      	ldr	r2, [pc, #40]	@ (80110dc <prvCheckTasksWaitingTermination+0x58>)
 80110b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80110b6:	f001 f921 	bl	80122fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f000 f810 	bl	80110e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80110c0:	4b06      	ldr	r3, [pc, #24]	@ (80110dc <prvCheckTasksWaitingTermination+0x58>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d1e1      	bne.n	801108c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80110c8:	bf00      	nop
 80110ca:	bf00      	nop
 80110cc:	3708      	adds	r7, #8
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	bf00      	nop
 80110d4:	20006bb0 	.word	0x20006bb0
 80110d8:	20006bdc 	.word	0x20006bdc
 80110dc:	20006bc4 	.word	0x20006bc4

080110e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b084      	sub	sp, #16
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	335c      	adds	r3, #92	@ 0x5c
 80110ec:	4618      	mov	r0, r3
 80110ee:	f00e fe9f 	bl	801fe30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d108      	bne.n	801110e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011100:	4618      	mov	r0, r3
 8011102:	f001 fab9 	bl	8012678 <vPortFree>
				vPortFree( pxTCB );
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f001 fab6 	bl	8012678 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801110c:	e019      	b.n	8011142 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8011114:	2b01      	cmp	r3, #1
 8011116:	d103      	bne.n	8011120 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011118:	6878      	ldr	r0, [r7, #4]
 801111a:	f001 faad 	bl	8012678 <vPortFree>
	}
 801111e:	e010      	b.n	8011142 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8011126:	2b02      	cmp	r3, #2
 8011128:	d00b      	beq.n	8011142 <prvDeleteTCB+0x62>
	__asm volatile
 801112a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801112e:	f383 8811 	msr	BASEPRI, r3
 8011132:	f3bf 8f6f 	isb	sy
 8011136:	f3bf 8f4f 	dsb	sy
 801113a:	60fb      	str	r3, [r7, #12]
}
 801113c:	bf00      	nop
 801113e:	bf00      	nop
 8011140:	e7fd      	b.n	801113e <prvDeleteTCB+0x5e>
	}
 8011142:	bf00      	nop
 8011144:	3710      	adds	r7, #16
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}
	...

0801114c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801114c:	b480      	push	{r7}
 801114e:	b083      	sub	sp, #12
 8011150:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011152:	4b0c      	ldr	r3, [pc, #48]	@ (8011184 <prvResetNextTaskUnblockTime+0x38>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d104      	bne.n	8011166 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801115c:	4b0a      	ldr	r3, [pc, #40]	@ (8011188 <prvResetNextTaskUnblockTime+0x3c>)
 801115e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011162:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011164:	e008      	b.n	8011178 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011166:	4b07      	ldr	r3, [pc, #28]	@ (8011184 <prvResetNextTaskUnblockTime+0x38>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	68db      	ldr	r3, [r3, #12]
 801116c:	68db      	ldr	r3, [r3, #12]
 801116e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	685b      	ldr	r3, [r3, #4]
 8011174:	4a04      	ldr	r2, [pc, #16]	@ (8011188 <prvResetNextTaskUnblockTime+0x3c>)
 8011176:	6013      	str	r3, [r2, #0]
}
 8011178:	bf00      	nop
 801117a:	370c      	adds	r7, #12
 801117c:	46bd      	mov	sp, r7
 801117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011182:	4770      	bx	lr
 8011184:	20006b94 	.word	0x20006b94
 8011188:	20006bfc 	.word	0x20006bfc

0801118c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801118c:	b480      	push	{r7}
 801118e:	b083      	sub	sp, #12
 8011190:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8011192:	4b05      	ldr	r3, [pc, #20]	@ (80111a8 <xTaskGetCurrentTaskHandle+0x1c>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	607b      	str	r3, [r7, #4]

		return xReturn;
 8011198:	687b      	ldr	r3, [r7, #4]
	}
 801119a:	4618      	mov	r0, r3
 801119c:	370c      	adds	r7, #12
 801119e:	46bd      	mov	sp, r7
 80111a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a4:	4770      	bx	lr
 80111a6:	bf00      	nop
 80111a8:	20006708 	.word	0x20006708

080111ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80111ac:	b480      	push	{r7}
 80111ae:	b083      	sub	sp, #12
 80111b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80111b2:	4b0b      	ldr	r3, [pc, #44]	@ (80111e0 <xTaskGetSchedulerState+0x34>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d102      	bne.n	80111c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80111ba:	2301      	movs	r3, #1
 80111bc:	607b      	str	r3, [r7, #4]
 80111be:	e008      	b.n	80111d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80111c0:	4b08      	ldr	r3, [pc, #32]	@ (80111e4 <xTaskGetSchedulerState+0x38>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d102      	bne.n	80111ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80111c8:	2302      	movs	r3, #2
 80111ca:	607b      	str	r3, [r7, #4]
 80111cc:	e001      	b.n	80111d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80111ce:	2300      	movs	r3, #0
 80111d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80111d2:	687b      	ldr	r3, [r7, #4]
	}
 80111d4:	4618      	mov	r0, r3
 80111d6:	370c      	adds	r7, #12
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr
 80111e0:	20006be8 	.word	0x20006be8
 80111e4:	20006c04 	.word	0x20006c04

080111e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b084      	sub	sp, #16
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80111f4:	2300      	movs	r3, #0
 80111f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d051      	beq.n	80112a2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011202:	4b2a      	ldr	r3, [pc, #168]	@ (80112ac <xTaskPriorityInherit+0xc4>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011208:	429a      	cmp	r2, r3
 801120a:	d241      	bcs.n	8011290 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	699b      	ldr	r3, [r3, #24]
 8011210:	2b00      	cmp	r3, #0
 8011212:	db06      	blt.n	8011222 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011214:	4b25      	ldr	r3, [pc, #148]	@ (80112ac <xTaskPriorityInherit+0xc4>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801121a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	6959      	ldr	r1, [r3, #20]
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801122a:	4613      	mov	r3, r2
 801122c:	009b      	lsls	r3, r3, #2
 801122e:	4413      	add	r3, r2
 8011230:	009b      	lsls	r3, r3, #2
 8011232:	4a1f      	ldr	r2, [pc, #124]	@ (80112b0 <xTaskPriorityInherit+0xc8>)
 8011234:	4413      	add	r3, r2
 8011236:	4299      	cmp	r1, r3
 8011238:	d122      	bne.n	8011280 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	3304      	adds	r3, #4
 801123e:	4618      	mov	r0, r3
 8011240:	f7fe f8e8 	bl	800f414 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011244:	4b19      	ldr	r3, [pc, #100]	@ (80112ac <xTaskPriorityInherit+0xc4>)
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801124a:	68bb      	ldr	r3, [r7, #8]
 801124c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011252:	4b18      	ldr	r3, [pc, #96]	@ (80112b4 <xTaskPriorityInherit+0xcc>)
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	429a      	cmp	r2, r3
 8011258:	d903      	bls.n	8011262 <xTaskPriorityInherit+0x7a>
 801125a:	68bb      	ldr	r3, [r7, #8]
 801125c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801125e:	4a15      	ldr	r2, [pc, #84]	@ (80112b4 <xTaskPriorityInherit+0xcc>)
 8011260:	6013      	str	r3, [r2, #0]
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011266:	4613      	mov	r3, r2
 8011268:	009b      	lsls	r3, r3, #2
 801126a:	4413      	add	r3, r2
 801126c:	009b      	lsls	r3, r3, #2
 801126e:	4a10      	ldr	r2, [pc, #64]	@ (80112b0 <xTaskPriorityInherit+0xc8>)
 8011270:	441a      	add	r2, r3
 8011272:	68bb      	ldr	r3, [r7, #8]
 8011274:	3304      	adds	r3, #4
 8011276:	4619      	mov	r1, r3
 8011278:	4610      	mov	r0, r2
 801127a:	f7fe f86e 	bl	800f35a <vListInsertEnd>
 801127e:	e004      	b.n	801128a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011280:	4b0a      	ldr	r3, [pc, #40]	@ (80112ac <xTaskPriorityInherit+0xc4>)
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801128a:	2301      	movs	r3, #1
 801128c:	60fb      	str	r3, [r7, #12]
 801128e:	e008      	b.n	80112a2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011294:	4b05      	ldr	r3, [pc, #20]	@ (80112ac <xTaskPriorityInherit+0xc4>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801129a:	429a      	cmp	r2, r3
 801129c:	d201      	bcs.n	80112a2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801129e:	2301      	movs	r3, #1
 80112a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80112a2:	68fb      	ldr	r3, [r7, #12]
	}
 80112a4:	4618      	mov	r0, r3
 80112a6:	3710      	adds	r7, #16
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}
 80112ac:	20006708 	.word	0x20006708
 80112b0:	2000670c 	.word	0x2000670c
 80112b4:	20006be4 	.word	0x20006be4

080112b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b086      	sub	sp, #24
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80112c4:	2300      	movs	r3, #0
 80112c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d058      	beq.n	8011380 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80112ce:	4b2f      	ldr	r3, [pc, #188]	@ (801138c <xTaskPriorityDisinherit+0xd4>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	693a      	ldr	r2, [r7, #16]
 80112d4:	429a      	cmp	r2, r3
 80112d6:	d00b      	beq.n	80112f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80112d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112dc:	f383 8811 	msr	BASEPRI, r3
 80112e0:	f3bf 8f6f 	isb	sy
 80112e4:	f3bf 8f4f 	dsb	sy
 80112e8:	60fb      	str	r3, [r7, #12]
}
 80112ea:	bf00      	nop
 80112ec:	bf00      	nop
 80112ee:	e7fd      	b.n	80112ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80112f0:	693b      	ldr	r3, [r7, #16]
 80112f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d10b      	bne.n	8011310 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80112f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112fc:	f383 8811 	msr	BASEPRI, r3
 8011300:	f3bf 8f6f 	isb	sy
 8011304:	f3bf 8f4f 	dsb	sy
 8011308:	60bb      	str	r3, [r7, #8]
}
 801130a:	bf00      	nop
 801130c:	bf00      	nop
 801130e:	e7fd      	b.n	801130c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011314:	1e5a      	subs	r2, r3, #1
 8011316:	693b      	ldr	r3, [r7, #16]
 8011318:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801131a:	693b      	ldr	r3, [r7, #16]
 801131c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801131e:	693b      	ldr	r3, [r7, #16]
 8011320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011322:	429a      	cmp	r2, r3
 8011324:	d02c      	beq.n	8011380 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011326:	693b      	ldr	r3, [r7, #16]
 8011328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801132a:	2b00      	cmp	r3, #0
 801132c:	d128      	bne.n	8011380 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801132e:	693b      	ldr	r3, [r7, #16]
 8011330:	3304      	adds	r3, #4
 8011332:	4618      	mov	r0, r3
 8011334:	f7fe f86e 	bl	800f414 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011338:	693b      	ldr	r3, [r7, #16]
 801133a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801133c:	693b      	ldr	r3, [r7, #16]
 801133e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011344:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011348:	693b      	ldr	r3, [r7, #16]
 801134a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801134c:	693b      	ldr	r3, [r7, #16]
 801134e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011350:	4b0f      	ldr	r3, [pc, #60]	@ (8011390 <xTaskPriorityDisinherit+0xd8>)
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	429a      	cmp	r2, r3
 8011356:	d903      	bls.n	8011360 <xTaskPriorityDisinherit+0xa8>
 8011358:	693b      	ldr	r3, [r7, #16]
 801135a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801135c:	4a0c      	ldr	r2, [pc, #48]	@ (8011390 <xTaskPriorityDisinherit+0xd8>)
 801135e:	6013      	str	r3, [r2, #0]
 8011360:	693b      	ldr	r3, [r7, #16]
 8011362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011364:	4613      	mov	r3, r2
 8011366:	009b      	lsls	r3, r3, #2
 8011368:	4413      	add	r3, r2
 801136a:	009b      	lsls	r3, r3, #2
 801136c:	4a09      	ldr	r2, [pc, #36]	@ (8011394 <xTaskPriorityDisinherit+0xdc>)
 801136e:	441a      	add	r2, r3
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	3304      	adds	r3, #4
 8011374:	4619      	mov	r1, r3
 8011376:	4610      	mov	r0, r2
 8011378:	f7fd ffef 	bl	800f35a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801137c:	2301      	movs	r3, #1
 801137e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011380:	697b      	ldr	r3, [r7, #20]
	}
 8011382:	4618      	mov	r0, r3
 8011384:	3718      	adds	r7, #24
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}
 801138a:	bf00      	nop
 801138c:	20006708 	.word	0x20006708
 8011390:	20006be4 	.word	0x20006be4
 8011394:	2000670c 	.word	0x2000670c

08011398 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011398:	b580      	push	{r7, lr}
 801139a:	b088      	sub	sp, #32
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
 80113a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80113a6:	2301      	movs	r3, #1
 80113a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d06c      	beq.n	801148a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80113b0:	69bb      	ldr	r3, [r7, #24]
 80113b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d10b      	bne.n	80113d0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80113b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113bc:	f383 8811 	msr	BASEPRI, r3
 80113c0:	f3bf 8f6f 	isb	sy
 80113c4:	f3bf 8f4f 	dsb	sy
 80113c8:	60fb      	str	r3, [r7, #12]
}
 80113ca:	bf00      	nop
 80113cc:	bf00      	nop
 80113ce:	e7fd      	b.n	80113cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80113d0:	69bb      	ldr	r3, [r7, #24]
 80113d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80113d4:	683a      	ldr	r2, [r7, #0]
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d902      	bls.n	80113e0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	61fb      	str	r3, [r7, #28]
 80113de:	e002      	b.n	80113e6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80113e0:	69bb      	ldr	r3, [r7, #24]
 80113e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80113e4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80113e6:	69bb      	ldr	r3, [r7, #24]
 80113e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113ea:	69fa      	ldr	r2, [r7, #28]
 80113ec:	429a      	cmp	r2, r3
 80113ee:	d04c      	beq.n	801148a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80113f0:	69bb      	ldr	r3, [r7, #24]
 80113f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80113f4:	697a      	ldr	r2, [r7, #20]
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d147      	bne.n	801148a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80113fa:	4b26      	ldr	r3, [pc, #152]	@ (8011494 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	69ba      	ldr	r2, [r7, #24]
 8011400:	429a      	cmp	r2, r3
 8011402:	d10b      	bne.n	801141c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8011404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011408:	f383 8811 	msr	BASEPRI, r3
 801140c:	f3bf 8f6f 	isb	sy
 8011410:	f3bf 8f4f 	dsb	sy
 8011414:	60bb      	str	r3, [r7, #8]
}
 8011416:	bf00      	nop
 8011418:	bf00      	nop
 801141a:	e7fd      	b.n	8011418 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801141c:	69bb      	ldr	r3, [r7, #24]
 801141e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011420:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011422:	69bb      	ldr	r3, [r7, #24]
 8011424:	69fa      	ldr	r2, [r7, #28]
 8011426:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011428:	69bb      	ldr	r3, [r7, #24]
 801142a:	699b      	ldr	r3, [r3, #24]
 801142c:	2b00      	cmp	r3, #0
 801142e:	db04      	blt.n	801143a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011430:	69fb      	ldr	r3, [r7, #28]
 8011432:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011436:	69bb      	ldr	r3, [r7, #24]
 8011438:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801143a:	69bb      	ldr	r3, [r7, #24]
 801143c:	6959      	ldr	r1, [r3, #20]
 801143e:	693a      	ldr	r2, [r7, #16]
 8011440:	4613      	mov	r3, r2
 8011442:	009b      	lsls	r3, r3, #2
 8011444:	4413      	add	r3, r2
 8011446:	009b      	lsls	r3, r3, #2
 8011448:	4a13      	ldr	r2, [pc, #76]	@ (8011498 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801144a:	4413      	add	r3, r2
 801144c:	4299      	cmp	r1, r3
 801144e:	d11c      	bne.n	801148a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011450:	69bb      	ldr	r3, [r7, #24]
 8011452:	3304      	adds	r3, #4
 8011454:	4618      	mov	r0, r3
 8011456:	f7fd ffdd 	bl	800f414 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801145a:	69bb      	ldr	r3, [r7, #24]
 801145c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801145e:	4b0f      	ldr	r3, [pc, #60]	@ (801149c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	429a      	cmp	r2, r3
 8011464:	d903      	bls.n	801146e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8011466:	69bb      	ldr	r3, [r7, #24]
 8011468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801146a:	4a0c      	ldr	r2, [pc, #48]	@ (801149c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801146c:	6013      	str	r3, [r2, #0]
 801146e:	69bb      	ldr	r3, [r7, #24]
 8011470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011472:	4613      	mov	r3, r2
 8011474:	009b      	lsls	r3, r3, #2
 8011476:	4413      	add	r3, r2
 8011478:	009b      	lsls	r3, r3, #2
 801147a:	4a07      	ldr	r2, [pc, #28]	@ (8011498 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801147c:	441a      	add	r2, r3
 801147e:	69bb      	ldr	r3, [r7, #24]
 8011480:	3304      	adds	r3, #4
 8011482:	4619      	mov	r1, r3
 8011484:	4610      	mov	r0, r2
 8011486:	f7fd ff68 	bl	800f35a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801148a:	bf00      	nop
 801148c:	3720      	adds	r7, #32
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}
 8011492:	bf00      	nop
 8011494:	20006708 	.word	0x20006708
 8011498:	2000670c 	.word	0x2000670c
 801149c:	20006be4 	.word	0x20006be4

080114a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80114a0:	b480      	push	{r7}
 80114a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80114a4:	4b07      	ldr	r3, [pc, #28]	@ (80114c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d004      	beq.n	80114b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80114ac:	4b05      	ldr	r3, [pc, #20]	@ (80114c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80114b2:	3201      	adds	r2, #1
 80114b4:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 80114b6:	4b03      	ldr	r3, [pc, #12]	@ (80114c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80114b8:	681b      	ldr	r3, [r3, #0]
	}
 80114ba:	4618      	mov	r0, r3
 80114bc:	46bd      	mov	sp, r7
 80114be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c2:	4770      	bx	lr
 80114c4:	20006708 	.word	0x20006708

080114c8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b086      	sub	sp, #24
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	60f8      	str	r0, [r7, #12]
 80114d0:	60b9      	str	r1, [r7, #8]
 80114d2:	607a      	str	r2, [r7, #4]
 80114d4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80114d6:	f000 fedf 	bl	8012298 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80114da:	4b29      	ldr	r3, [pc, #164]	@ (8011580 <xTaskNotifyWait+0xb8>)
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80114e2:	b2db      	uxtb	r3, r3
 80114e4:	2b02      	cmp	r3, #2
 80114e6:	d01c      	beq.n	8011522 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80114e8:	4b25      	ldr	r3, [pc, #148]	@ (8011580 <xTaskNotifyWait+0xb8>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	f8d3 10a8 	ldr.w	r1, [r3, #168]	@ 0xa8
 80114f0:	68fa      	ldr	r2, [r7, #12]
 80114f2:	43d2      	mvns	r2, r2
 80114f4:	400a      	ands	r2, r1
 80114f6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80114fa:	4b21      	ldr	r3, [pc, #132]	@ (8011580 <xTaskNotifyWait+0xb8>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	2201      	movs	r2, #1
 8011500:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d00b      	beq.n	8011522 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801150a:	2101      	movs	r1, #1
 801150c:	6838      	ldr	r0, [r7, #0]
 801150e:	f000 f9e3 	bl	80118d8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011512:	4b1c      	ldr	r3, [pc, #112]	@ (8011584 <xTaskNotifyWait+0xbc>)
 8011514:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011518:	601a      	str	r2, [r3, #0]
 801151a:	f3bf 8f4f 	dsb	sy
 801151e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011522:	f000 feeb 	bl	80122fc <vPortExitCritical>

		taskENTER_CRITICAL();
 8011526:	f000 feb7 	bl	8012298 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d005      	beq.n	801153c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8011530:	4b13      	ldr	r3, [pc, #76]	@ (8011580 <xTaskNotifyWait+0xb8>)
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801153c:	4b10      	ldr	r3, [pc, #64]	@ (8011580 <xTaskNotifyWait+0xb8>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011544:	b2db      	uxtb	r3, r3
 8011546:	2b02      	cmp	r3, #2
 8011548:	d002      	beq.n	8011550 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801154a:	2300      	movs	r3, #0
 801154c:	617b      	str	r3, [r7, #20]
 801154e:	e00a      	b.n	8011566 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8011550:	4b0b      	ldr	r3, [pc, #44]	@ (8011580 <xTaskNotifyWait+0xb8>)
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	f8d3 10a8 	ldr.w	r1, [r3, #168]	@ 0xa8
 8011558:	68ba      	ldr	r2, [r7, #8]
 801155a:	43d2      	mvns	r2, r2
 801155c:	400a      	ands	r2, r1
 801155e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
				xReturn = pdTRUE;
 8011562:	2301      	movs	r3, #1
 8011564:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011566:	4b06      	ldr	r3, [pc, #24]	@ (8011580 <xTaskNotifyWait+0xb8>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2200      	movs	r2, #0
 801156c:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
		}
		taskEXIT_CRITICAL();
 8011570:	f000 fec4 	bl	80122fc <vPortExitCritical>

		return xReturn;
 8011574:	697b      	ldr	r3, [r7, #20]
	}
 8011576:	4618      	mov	r0, r3
 8011578:	3718      	adds	r7, #24
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
 801157e:	bf00      	nop
 8011580:	20006708 	.word	0x20006708
 8011584:	e000ed04 	.word	0xe000ed04

08011588 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011588:	b580      	push	{r7, lr}
 801158a:	b08a      	sub	sp, #40	@ 0x28
 801158c:	af00      	add	r7, sp, #0
 801158e:	60f8      	str	r0, [r7, #12]
 8011590:	60b9      	str	r1, [r7, #8]
 8011592:	603b      	str	r3, [r7, #0]
 8011594:	4613      	mov	r3, r2
 8011596:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011598:	2301      	movs	r3, #1
 801159a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d10b      	bne.n	80115ba <xTaskGenericNotify+0x32>
	__asm volatile
 80115a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115a6:	f383 8811 	msr	BASEPRI, r3
 80115aa:	f3bf 8f6f 	isb	sy
 80115ae:	f3bf 8f4f 	dsb	sy
 80115b2:	61bb      	str	r3, [r7, #24]
}
 80115b4:	bf00      	nop
 80115b6:	bf00      	nop
 80115b8:	e7fd      	b.n	80115b6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80115be:	f000 fe6b 	bl	8012298 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d004      	beq.n	80115d2 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80115c8:	6a3b      	ldr	r3, [r7, #32]
 80115ca:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80115d2:	6a3b      	ldr	r3, [r7, #32]
 80115d4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80115d8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80115da:	6a3b      	ldr	r3, [r7, #32]
 80115dc:	2202      	movs	r2, #2
 80115de:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

			switch( eAction )
 80115e2:	79fb      	ldrb	r3, [r7, #7]
 80115e4:	2b04      	cmp	r3, #4
 80115e6:	d82e      	bhi.n	8011646 <xTaskGenericNotify+0xbe>
 80115e8:	a201      	add	r2, pc, #4	@ (adr r2, 80115f0 <xTaskGenericNotify+0x68>)
 80115ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115ee:	bf00      	nop
 80115f0:	0801166b 	.word	0x0801166b
 80115f4:	08011605 	.word	0x08011605
 80115f8:	08011617 	.word	0x08011617
 80115fc:	08011627 	.word	0x08011627
 8011600:	08011631 	.word	0x08011631
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011604:	6a3b      	ldr	r3, [r7, #32]
 8011606:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	431a      	orrs	r2, r3
 801160e:	6a3b      	ldr	r3, [r7, #32]
 8011610:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 8011614:	e02c      	b.n	8011670 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011616:	6a3b      	ldr	r3, [r7, #32]
 8011618:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801161c:	1c5a      	adds	r2, r3, #1
 801161e:	6a3b      	ldr	r3, [r7, #32]
 8011620:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 8011624:	e024      	b.n	8011670 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011626:	6a3b      	ldr	r3, [r7, #32]
 8011628:	68ba      	ldr	r2, [r7, #8]
 801162a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 801162e:	e01f      	b.n	8011670 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011630:	7ffb      	ldrb	r3, [r7, #31]
 8011632:	2b02      	cmp	r3, #2
 8011634:	d004      	beq.n	8011640 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011636:	6a3b      	ldr	r3, [r7, #32]
 8011638:	68ba      	ldr	r2, [r7, #8]
 801163a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801163e:	e017      	b.n	8011670 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8011640:	2300      	movs	r3, #0
 8011642:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8011644:	e014      	b.n	8011670 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011646:	6a3b      	ldr	r3, [r7, #32]
 8011648:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801164c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011650:	d00d      	beq.n	801166e <xTaskGenericNotify+0xe6>
	__asm volatile
 8011652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011656:	f383 8811 	msr	BASEPRI, r3
 801165a:	f3bf 8f6f 	isb	sy
 801165e:	f3bf 8f4f 	dsb	sy
 8011662:	617b      	str	r3, [r7, #20]
}
 8011664:	bf00      	nop
 8011666:	bf00      	nop
 8011668:	e7fd      	b.n	8011666 <xTaskGenericNotify+0xde>
					break;
 801166a:	bf00      	nop
 801166c:	e000      	b.n	8011670 <xTaskGenericNotify+0xe8>

					break;
 801166e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011670:	7ffb      	ldrb	r3, [r7, #31]
 8011672:	2b01      	cmp	r3, #1
 8011674:	d13b      	bne.n	80116ee <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011676:	6a3b      	ldr	r3, [r7, #32]
 8011678:	3304      	adds	r3, #4
 801167a:	4618      	mov	r0, r3
 801167c:	f7fd feca 	bl	800f414 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8011680:	6a3b      	ldr	r3, [r7, #32]
 8011682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011684:	4b1d      	ldr	r3, [pc, #116]	@ (80116fc <xTaskGenericNotify+0x174>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	429a      	cmp	r2, r3
 801168a:	d903      	bls.n	8011694 <xTaskGenericNotify+0x10c>
 801168c:	6a3b      	ldr	r3, [r7, #32]
 801168e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011690:	4a1a      	ldr	r2, [pc, #104]	@ (80116fc <xTaskGenericNotify+0x174>)
 8011692:	6013      	str	r3, [r2, #0]
 8011694:	6a3b      	ldr	r3, [r7, #32]
 8011696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011698:	4613      	mov	r3, r2
 801169a:	009b      	lsls	r3, r3, #2
 801169c:	4413      	add	r3, r2
 801169e:	009b      	lsls	r3, r3, #2
 80116a0:	4a17      	ldr	r2, [pc, #92]	@ (8011700 <xTaskGenericNotify+0x178>)
 80116a2:	441a      	add	r2, r3
 80116a4:	6a3b      	ldr	r3, [r7, #32]
 80116a6:	3304      	adds	r3, #4
 80116a8:	4619      	mov	r1, r3
 80116aa:	4610      	mov	r0, r2
 80116ac:	f7fd fe55 	bl	800f35a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80116b0:	6a3b      	ldr	r3, [r7, #32]
 80116b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d00b      	beq.n	80116d0 <xTaskGenericNotify+0x148>
	__asm volatile
 80116b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116bc:	f383 8811 	msr	BASEPRI, r3
 80116c0:	f3bf 8f6f 	isb	sy
 80116c4:	f3bf 8f4f 	dsb	sy
 80116c8:	613b      	str	r3, [r7, #16]
}
 80116ca:	bf00      	nop
 80116cc:	bf00      	nop
 80116ce:	e7fd      	b.n	80116cc <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80116d0:	6a3b      	ldr	r3, [r7, #32]
 80116d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116d4:	4b0b      	ldr	r3, [pc, #44]	@ (8011704 <xTaskGenericNotify+0x17c>)
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116da:	429a      	cmp	r2, r3
 80116dc:	d907      	bls.n	80116ee <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80116de:	4b0a      	ldr	r3, [pc, #40]	@ (8011708 <xTaskGenericNotify+0x180>)
 80116e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80116e4:	601a      	str	r2, [r3, #0]
 80116e6:	f3bf 8f4f 	dsb	sy
 80116ea:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80116ee:	f000 fe05 	bl	80122fc <vPortExitCritical>

		return xReturn;
 80116f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80116f4:	4618      	mov	r0, r3
 80116f6:	3728      	adds	r7, #40	@ 0x28
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bd80      	pop	{r7, pc}
 80116fc:	20006be4 	.word	0x20006be4
 8011700:	2000670c 	.word	0x2000670c
 8011704:	20006708 	.word	0x20006708
 8011708:	e000ed04 	.word	0xe000ed04

0801170c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801170c:	b580      	push	{r7, lr}
 801170e:	b08e      	sub	sp, #56	@ 0x38
 8011710:	af00      	add	r7, sp, #0
 8011712:	60f8      	str	r0, [r7, #12]
 8011714:	60b9      	str	r1, [r7, #8]
 8011716:	603b      	str	r3, [r7, #0]
 8011718:	4613      	mov	r3, r2
 801171a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 801171c:	2301      	movs	r3, #1
 801171e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d10b      	bne.n	801173e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8011726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801172a:	f383 8811 	msr	BASEPRI, r3
 801172e:	f3bf 8f6f 	isb	sy
 8011732:	f3bf 8f4f 	dsb	sy
 8011736:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011738:	bf00      	nop
 801173a:	bf00      	nop
 801173c:	e7fd      	b.n	801173a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801173e:	f000 fe8b 	bl	8012458 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8011746:	f3ef 8211 	mrs	r2, BASEPRI
 801174a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801174e:	f383 8811 	msr	BASEPRI, r3
 8011752:	f3bf 8f6f 	isb	sy
 8011756:	f3bf 8f4f 	dsb	sy
 801175a:	623a      	str	r2, [r7, #32]
 801175c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801175e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011760:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8011762:	683b      	ldr	r3, [r7, #0]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d004      	beq.n	8011772 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801176a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011774:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011778:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801177c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801177e:	2202      	movs	r2, #2
 8011780:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

			switch( eAction )
 8011784:	79fb      	ldrb	r3, [r7, #7]
 8011786:	2b04      	cmp	r3, #4
 8011788:	d82e      	bhi.n	80117e8 <xTaskGenericNotifyFromISR+0xdc>
 801178a:	a201      	add	r2, pc, #4	@ (adr r2, 8011790 <xTaskGenericNotifyFromISR+0x84>)
 801178c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011790:	0801180d 	.word	0x0801180d
 8011794:	080117a5 	.word	0x080117a5
 8011798:	080117b7 	.word	0x080117b7
 801179c:	080117c7 	.word	0x080117c7
 80117a0:	080117d1 	.word	0x080117d1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80117a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117a6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	431a      	orrs	r2, r3
 80117ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117b0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 80117b4:	e02d      	b.n	8011812 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80117b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80117bc:	1c5a      	adds	r2, r3, #1
 80117be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117c0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 80117c4:	e025      	b.n	8011812 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80117c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117c8:	68ba      	ldr	r2, [r7, #8]
 80117ca:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 80117ce:	e020      	b.n	8011812 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80117d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80117d4:	2b02      	cmp	r3, #2
 80117d6:	d004      	beq.n	80117e2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80117d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117da:	68ba      	ldr	r2, [r7, #8]
 80117dc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80117e0:	e017      	b.n	8011812 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 80117e2:	2300      	movs	r3, #0
 80117e4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80117e6:	e014      	b.n	8011812 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80117e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80117ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80117f2:	d00d      	beq.n	8011810 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 80117f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117f8:	f383 8811 	msr	BASEPRI, r3
 80117fc:	f3bf 8f6f 	isb	sy
 8011800:	f3bf 8f4f 	dsb	sy
 8011804:	61bb      	str	r3, [r7, #24]
}
 8011806:	bf00      	nop
 8011808:	bf00      	nop
 801180a:	e7fd      	b.n	8011808 <xTaskGenericNotifyFromISR+0xfc>
					break;
 801180c:	bf00      	nop
 801180e:	e000      	b.n	8011812 <xTaskGenericNotifyFromISR+0x106>
					break;
 8011810:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011812:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011816:	2b01      	cmp	r3, #1
 8011818:	d147      	bne.n	80118aa <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801181a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801181c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801181e:	2b00      	cmp	r3, #0
 8011820:	d00b      	beq.n	801183a <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8011822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011826:	f383 8811 	msr	BASEPRI, r3
 801182a:	f3bf 8f6f 	isb	sy
 801182e:	f3bf 8f4f 	dsb	sy
 8011832:	617b      	str	r3, [r7, #20]
}
 8011834:	bf00      	nop
 8011836:	bf00      	nop
 8011838:	e7fd      	b.n	8011836 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801183a:	4b21      	ldr	r3, [pc, #132]	@ (80118c0 <xTaskGenericNotifyFromISR+0x1b4>)
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d11d      	bne.n	801187e <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011844:	3304      	adds	r3, #4
 8011846:	4618      	mov	r0, r3
 8011848:	f7fd fde4 	bl	800f414 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801184c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801184e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011850:	4b1c      	ldr	r3, [pc, #112]	@ (80118c4 <xTaskGenericNotifyFromISR+0x1b8>)
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	429a      	cmp	r2, r3
 8011856:	d903      	bls.n	8011860 <xTaskGenericNotifyFromISR+0x154>
 8011858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801185a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801185c:	4a19      	ldr	r2, [pc, #100]	@ (80118c4 <xTaskGenericNotifyFromISR+0x1b8>)
 801185e:	6013      	str	r3, [r2, #0]
 8011860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011864:	4613      	mov	r3, r2
 8011866:	009b      	lsls	r3, r3, #2
 8011868:	4413      	add	r3, r2
 801186a:	009b      	lsls	r3, r3, #2
 801186c:	4a16      	ldr	r2, [pc, #88]	@ (80118c8 <xTaskGenericNotifyFromISR+0x1bc>)
 801186e:	441a      	add	r2, r3
 8011870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011872:	3304      	adds	r3, #4
 8011874:	4619      	mov	r1, r3
 8011876:	4610      	mov	r0, r2
 8011878:	f7fd fd6f 	bl	800f35a <vListInsertEnd>
 801187c:	e005      	b.n	801188a <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801187e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011880:	3318      	adds	r3, #24
 8011882:	4619      	mov	r1, r3
 8011884:	4811      	ldr	r0, [pc, #68]	@ (80118cc <xTaskGenericNotifyFromISR+0x1c0>)
 8011886:	f7fd fd68 	bl	800f35a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801188a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801188c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801188e:	4b10      	ldr	r3, [pc, #64]	@ (80118d0 <xTaskGenericNotifyFromISR+0x1c4>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011894:	429a      	cmp	r2, r3
 8011896:	d908      	bls.n	80118aa <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8011898:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801189a:	2b00      	cmp	r3, #0
 801189c:	d002      	beq.n	80118a4 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801189e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80118a0:	2201      	movs	r2, #1
 80118a2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80118a4:	4b0b      	ldr	r3, [pc, #44]	@ (80118d4 <xTaskGenericNotifyFromISR+0x1c8>)
 80118a6:	2201      	movs	r2, #1
 80118a8:	601a      	str	r2, [r3, #0]
 80118aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 80118ae:	693b      	ldr	r3, [r7, #16]
 80118b0:	f383 8811 	msr	BASEPRI, r3
}
 80118b4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80118b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80118b8:	4618      	mov	r0, r3
 80118ba:	3738      	adds	r7, #56	@ 0x38
 80118bc:	46bd      	mov	sp, r7
 80118be:	bd80      	pop	{r7, pc}
 80118c0:	20006c04 	.word	0x20006c04
 80118c4:	20006be4 	.word	0x20006be4
 80118c8:	2000670c 	.word	0x2000670c
 80118cc:	20006b9c 	.word	0x20006b9c
 80118d0:	20006708 	.word	0x20006708
 80118d4:	20006bf0 	.word	0x20006bf0

080118d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b084      	sub	sp, #16
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
 80118e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80118e2:	4b21      	ldr	r3, [pc, #132]	@ (8011968 <prvAddCurrentTaskToDelayedList+0x90>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80118e8:	4b20      	ldr	r3, [pc, #128]	@ (801196c <prvAddCurrentTaskToDelayedList+0x94>)
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	3304      	adds	r3, #4
 80118ee:	4618      	mov	r0, r3
 80118f0:	f7fd fd90 	bl	800f414 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80118fa:	d10a      	bne.n	8011912 <prvAddCurrentTaskToDelayedList+0x3a>
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d007      	beq.n	8011912 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011902:	4b1a      	ldr	r3, [pc, #104]	@ (801196c <prvAddCurrentTaskToDelayedList+0x94>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	3304      	adds	r3, #4
 8011908:	4619      	mov	r1, r3
 801190a:	4819      	ldr	r0, [pc, #100]	@ (8011970 <prvAddCurrentTaskToDelayedList+0x98>)
 801190c:	f7fd fd25 	bl	800f35a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011910:	e026      	b.n	8011960 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011912:	68fa      	ldr	r2, [r7, #12]
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	4413      	add	r3, r2
 8011918:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801191a:	4b14      	ldr	r3, [pc, #80]	@ (801196c <prvAddCurrentTaskToDelayedList+0x94>)
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	68ba      	ldr	r2, [r7, #8]
 8011920:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011922:	68ba      	ldr	r2, [r7, #8]
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	429a      	cmp	r2, r3
 8011928:	d209      	bcs.n	801193e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801192a:	4b12      	ldr	r3, [pc, #72]	@ (8011974 <prvAddCurrentTaskToDelayedList+0x9c>)
 801192c:	681a      	ldr	r2, [r3, #0]
 801192e:	4b0f      	ldr	r3, [pc, #60]	@ (801196c <prvAddCurrentTaskToDelayedList+0x94>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	3304      	adds	r3, #4
 8011934:	4619      	mov	r1, r3
 8011936:	4610      	mov	r0, r2
 8011938:	f7fd fd33 	bl	800f3a2 <vListInsert>
}
 801193c:	e010      	b.n	8011960 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801193e:	4b0e      	ldr	r3, [pc, #56]	@ (8011978 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011940:	681a      	ldr	r2, [r3, #0]
 8011942:	4b0a      	ldr	r3, [pc, #40]	@ (801196c <prvAddCurrentTaskToDelayedList+0x94>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	3304      	adds	r3, #4
 8011948:	4619      	mov	r1, r3
 801194a:	4610      	mov	r0, r2
 801194c:	f7fd fd29 	bl	800f3a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011950:	4b0a      	ldr	r3, [pc, #40]	@ (801197c <prvAddCurrentTaskToDelayedList+0xa4>)
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	68ba      	ldr	r2, [r7, #8]
 8011956:	429a      	cmp	r2, r3
 8011958:	d202      	bcs.n	8011960 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801195a:	4a08      	ldr	r2, [pc, #32]	@ (801197c <prvAddCurrentTaskToDelayedList+0xa4>)
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	6013      	str	r3, [r2, #0]
}
 8011960:	bf00      	nop
 8011962:	3710      	adds	r7, #16
 8011964:	46bd      	mov	sp, r7
 8011966:	bd80      	pop	{r7, pc}
 8011968:	20006be0 	.word	0x20006be0
 801196c:	20006708 	.word	0x20006708
 8011970:	20006bc8 	.word	0x20006bc8
 8011974:	20006b98 	.word	0x20006b98
 8011978:	20006b94 	.word	0x20006b94
 801197c:	20006bfc 	.word	0x20006bfc

08011980 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b08a      	sub	sp, #40	@ 0x28
 8011984:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011986:	2300      	movs	r3, #0
 8011988:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801198a:	f000 fb13 	bl	8011fb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801198e:	4b1d      	ldr	r3, [pc, #116]	@ (8011a04 <xTimerCreateTimerTask+0x84>)
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d021      	beq.n	80119da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011996:	2300      	movs	r3, #0
 8011998:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801199a:	2300      	movs	r3, #0
 801199c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801199e:	1d3a      	adds	r2, r7, #4
 80119a0:	f107 0108 	add.w	r1, r7, #8
 80119a4:	f107 030c 	add.w	r3, r7, #12
 80119a8:	4618      	mov	r0, r3
 80119aa:	f7fd fc8f 	bl	800f2cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80119ae:	6879      	ldr	r1, [r7, #4]
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	68fa      	ldr	r2, [r7, #12]
 80119b4:	9202      	str	r2, [sp, #8]
 80119b6:	9301      	str	r3, [sp, #4]
 80119b8:	2302      	movs	r3, #2
 80119ba:	9300      	str	r3, [sp, #0]
 80119bc:	2300      	movs	r3, #0
 80119be:	460a      	mov	r2, r1
 80119c0:	4911      	ldr	r1, [pc, #68]	@ (8011a08 <xTimerCreateTimerTask+0x88>)
 80119c2:	4812      	ldr	r0, [pc, #72]	@ (8011a0c <xTimerCreateTimerTask+0x8c>)
 80119c4:	f7fe fc66 	bl	8010294 <xTaskCreateStatic>
 80119c8:	4603      	mov	r3, r0
 80119ca:	4a11      	ldr	r2, [pc, #68]	@ (8011a10 <xTimerCreateTimerTask+0x90>)
 80119cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80119ce:	4b10      	ldr	r3, [pc, #64]	@ (8011a10 <xTimerCreateTimerTask+0x90>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d001      	beq.n	80119da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80119d6:	2301      	movs	r3, #1
 80119d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d10b      	bne.n	80119f8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80119e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119e4:	f383 8811 	msr	BASEPRI, r3
 80119e8:	f3bf 8f6f 	isb	sy
 80119ec:	f3bf 8f4f 	dsb	sy
 80119f0:	613b      	str	r3, [r7, #16]
}
 80119f2:	bf00      	nop
 80119f4:	bf00      	nop
 80119f6:	e7fd      	b.n	80119f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80119f8:	697b      	ldr	r3, [r7, #20]
}
 80119fa:	4618      	mov	r0, r3
 80119fc:	3718      	adds	r7, #24
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd80      	pop	{r7, pc}
 8011a02:	bf00      	nop
 8011a04:	20006c40 	.word	0x20006c40
 8011a08:	08022594 	.word	0x08022594
 8011a0c:	08011b4d 	.word	0x08011b4d
 8011a10:	20006c44 	.word	0x20006c44

08011a14 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b08a      	sub	sp, #40	@ 0x28
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	60f8      	str	r0, [r7, #12]
 8011a1c:	60b9      	str	r1, [r7, #8]
 8011a1e:	607a      	str	r2, [r7, #4]
 8011a20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011a22:	2300      	movs	r3, #0
 8011a24:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d10b      	bne.n	8011a44 <xTimerGenericCommand+0x30>
	__asm volatile
 8011a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a30:	f383 8811 	msr	BASEPRI, r3
 8011a34:	f3bf 8f6f 	isb	sy
 8011a38:	f3bf 8f4f 	dsb	sy
 8011a3c:	623b      	str	r3, [r7, #32]
}
 8011a3e:	bf00      	nop
 8011a40:	bf00      	nop
 8011a42:	e7fd      	b.n	8011a40 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011a44:	4b19      	ldr	r3, [pc, #100]	@ (8011aac <xTimerGenericCommand+0x98>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d02a      	beq.n	8011aa2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	2b05      	cmp	r3, #5
 8011a5c:	dc18      	bgt.n	8011a90 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011a5e:	f7ff fba5 	bl	80111ac <xTaskGetSchedulerState>
 8011a62:	4603      	mov	r3, r0
 8011a64:	2b02      	cmp	r3, #2
 8011a66:	d109      	bne.n	8011a7c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011a68:	4b10      	ldr	r3, [pc, #64]	@ (8011aac <xTimerGenericCommand+0x98>)
 8011a6a:	6818      	ldr	r0, [r3, #0]
 8011a6c:	f107 0110 	add.w	r1, r7, #16
 8011a70:	2300      	movs	r3, #0
 8011a72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a74:	f7fd fef6 	bl	800f864 <xQueueGenericSend>
 8011a78:	6278      	str	r0, [r7, #36]	@ 0x24
 8011a7a:	e012      	b.n	8011aa2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8011aac <xTimerGenericCommand+0x98>)
 8011a7e:	6818      	ldr	r0, [r3, #0]
 8011a80:	f107 0110 	add.w	r1, r7, #16
 8011a84:	2300      	movs	r3, #0
 8011a86:	2200      	movs	r2, #0
 8011a88:	f7fd feec 	bl	800f864 <xQueueGenericSend>
 8011a8c:	6278      	str	r0, [r7, #36]	@ 0x24
 8011a8e:	e008      	b.n	8011aa2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011a90:	4b06      	ldr	r3, [pc, #24]	@ (8011aac <xTimerGenericCommand+0x98>)
 8011a92:	6818      	ldr	r0, [r3, #0]
 8011a94:	f107 0110 	add.w	r1, r7, #16
 8011a98:	2300      	movs	r3, #0
 8011a9a:	683a      	ldr	r2, [r7, #0]
 8011a9c:	f7fd ffe4 	bl	800fa68 <xQueueGenericSendFromISR>
 8011aa0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	3728      	adds	r7, #40	@ 0x28
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bd80      	pop	{r7, pc}
 8011aac:	20006c40 	.word	0x20006c40

08011ab0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b088      	sub	sp, #32
 8011ab4:	af02      	add	r7, sp, #8
 8011ab6:	6078      	str	r0, [r7, #4]
 8011ab8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011aba:	4b23      	ldr	r3, [pc, #140]	@ (8011b48 <prvProcessExpiredTimer+0x98>)
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	68db      	ldr	r3, [r3, #12]
 8011ac0:	68db      	ldr	r3, [r3, #12]
 8011ac2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011ac4:	697b      	ldr	r3, [r7, #20]
 8011ac6:	3304      	adds	r3, #4
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f7fd fca3 	bl	800f414 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011ace:	697b      	ldr	r3, [r7, #20]
 8011ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011ad4:	f003 0304 	and.w	r3, r3, #4
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d023      	beq.n	8011b24 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011adc:	697b      	ldr	r3, [r7, #20]
 8011ade:	699a      	ldr	r2, [r3, #24]
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	18d1      	adds	r1, r2, r3
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	683a      	ldr	r2, [r7, #0]
 8011ae8:	6978      	ldr	r0, [r7, #20]
 8011aea:	f000 f8d5 	bl	8011c98 <prvInsertTimerInActiveList>
 8011aee:	4603      	mov	r3, r0
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d020      	beq.n	8011b36 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011af4:	2300      	movs	r3, #0
 8011af6:	9300      	str	r3, [sp, #0]
 8011af8:	2300      	movs	r3, #0
 8011afa:	687a      	ldr	r2, [r7, #4]
 8011afc:	2100      	movs	r1, #0
 8011afe:	6978      	ldr	r0, [r7, #20]
 8011b00:	f7ff ff88 	bl	8011a14 <xTimerGenericCommand>
 8011b04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d114      	bne.n	8011b36 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8011b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b10:	f383 8811 	msr	BASEPRI, r3
 8011b14:	f3bf 8f6f 	isb	sy
 8011b18:	f3bf 8f4f 	dsb	sy
 8011b1c:	60fb      	str	r3, [r7, #12]
}
 8011b1e:	bf00      	nop
 8011b20:	bf00      	nop
 8011b22:	e7fd      	b.n	8011b20 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011b24:	697b      	ldr	r3, [r7, #20]
 8011b26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011b2a:	f023 0301 	bic.w	r3, r3, #1
 8011b2e:	b2da      	uxtb	r2, r3
 8011b30:	697b      	ldr	r3, [r7, #20]
 8011b32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011b36:	697b      	ldr	r3, [r7, #20]
 8011b38:	6a1b      	ldr	r3, [r3, #32]
 8011b3a:	6978      	ldr	r0, [r7, #20]
 8011b3c:	4798      	blx	r3
}
 8011b3e:	bf00      	nop
 8011b40:	3718      	adds	r7, #24
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}
 8011b46:	bf00      	nop
 8011b48:	20006c38 	.word	0x20006c38

08011b4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b084      	sub	sp, #16
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011b54:	f107 0308 	add.w	r3, r7, #8
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f000 f859 	bl	8011c10 <prvGetNextExpireTime>
 8011b5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	4619      	mov	r1, r3
 8011b64:	68f8      	ldr	r0, [r7, #12]
 8011b66:	f000 f805 	bl	8011b74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011b6a:	f000 f8d7 	bl	8011d1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011b6e:	bf00      	nop
 8011b70:	e7f0      	b.n	8011b54 <prvTimerTask+0x8>
	...

08011b74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b084      	sub	sp, #16
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
 8011b7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011b7e:	f7fe fee5 	bl	801094c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011b82:	f107 0308 	add.w	r3, r7, #8
 8011b86:	4618      	mov	r0, r3
 8011b88:	f000 f866 	bl	8011c58 <prvSampleTimeNow>
 8011b8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d130      	bne.n	8011bf6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d10a      	bne.n	8011bb0 <prvProcessTimerOrBlockTask+0x3c>
 8011b9a:	687a      	ldr	r2, [r7, #4]
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d806      	bhi.n	8011bb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011ba2:	f7fe fee1 	bl	8010968 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011ba6:	68f9      	ldr	r1, [r7, #12]
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f7ff ff81 	bl	8011ab0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011bae:	e024      	b.n	8011bfa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d008      	beq.n	8011bc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011bb6:	4b13      	ldr	r3, [pc, #76]	@ (8011c04 <prvProcessTimerOrBlockTask+0x90>)
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d101      	bne.n	8011bc4 <prvProcessTimerOrBlockTask+0x50>
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	e000      	b.n	8011bc6 <prvProcessTimerOrBlockTask+0x52>
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8011c08 <prvProcessTimerOrBlockTask+0x94>)
 8011bca:	6818      	ldr	r0, [r3, #0]
 8011bcc:	687a      	ldr	r2, [r7, #4]
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	1ad3      	subs	r3, r2, r3
 8011bd2:	683a      	ldr	r2, [r7, #0]
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	f7fe fb29 	bl	801022c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011bda:	f7fe fec5 	bl	8010968 <xTaskResumeAll>
 8011bde:	4603      	mov	r3, r0
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d10a      	bne.n	8011bfa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011be4:	4b09      	ldr	r3, [pc, #36]	@ (8011c0c <prvProcessTimerOrBlockTask+0x98>)
 8011be6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011bea:	601a      	str	r2, [r3, #0]
 8011bec:	f3bf 8f4f 	dsb	sy
 8011bf0:	f3bf 8f6f 	isb	sy
}
 8011bf4:	e001      	b.n	8011bfa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011bf6:	f7fe feb7 	bl	8010968 <xTaskResumeAll>
}
 8011bfa:	bf00      	nop
 8011bfc:	3710      	adds	r7, #16
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}
 8011c02:	bf00      	nop
 8011c04:	20006c3c 	.word	0x20006c3c
 8011c08:	20006c40 	.word	0x20006c40
 8011c0c:	e000ed04 	.word	0xe000ed04

08011c10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011c10:	b480      	push	{r7}
 8011c12:	b085      	sub	sp, #20
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011c18:	4b0e      	ldr	r3, [pc, #56]	@ (8011c54 <prvGetNextExpireTime+0x44>)
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d101      	bne.n	8011c26 <prvGetNextExpireTime+0x16>
 8011c22:	2201      	movs	r2, #1
 8011c24:	e000      	b.n	8011c28 <prvGetNextExpireTime+0x18>
 8011c26:	2200      	movs	r2, #0
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d105      	bne.n	8011c40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011c34:	4b07      	ldr	r3, [pc, #28]	@ (8011c54 <prvGetNextExpireTime+0x44>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	68db      	ldr	r3, [r3, #12]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	60fb      	str	r3, [r7, #12]
 8011c3e:	e001      	b.n	8011c44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011c40:	2300      	movs	r3, #0
 8011c42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011c44:	68fb      	ldr	r3, [r7, #12]
}
 8011c46:	4618      	mov	r0, r3
 8011c48:	3714      	adds	r7, #20
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c50:	4770      	bx	lr
 8011c52:	bf00      	nop
 8011c54:	20006c38 	.word	0x20006c38

08011c58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b084      	sub	sp, #16
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011c60:	f7fe ff20 	bl	8010aa4 <xTaskGetTickCount>
 8011c64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011c66:	4b0b      	ldr	r3, [pc, #44]	@ (8011c94 <prvSampleTimeNow+0x3c>)
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	68fa      	ldr	r2, [r7, #12]
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	d205      	bcs.n	8011c7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011c70:	f000 f93a 	bl	8011ee8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2201      	movs	r2, #1
 8011c78:	601a      	str	r2, [r3, #0]
 8011c7a:	e002      	b.n	8011c82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	2200      	movs	r2, #0
 8011c80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011c82:	4a04      	ldr	r2, [pc, #16]	@ (8011c94 <prvSampleTimeNow+0x3c>)
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011c88:	68fb      	ldr	r3, [r7, #12]
}
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	3710      	adds	r7, #16
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd80      	pop	{r7, pc}
 8011c92:	bf00      	nop
 8011c94:	20006c48 	.word	0x20006c48

08011c98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b086      	sub	sp, #24
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	60f8      	str	r0, [r7, #12]
 8011ca0:	60b9      	str	r1, [r7, #8]
 8011ca2:	607a      	str	r2, [r7, #4]
 8011ca4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	68ba      	ldr	r2, [r7, #8]
 8011cae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	68fa      	ldr	r2, [r7, #12]
 8011cb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011cb6:	68ba      	ldr	r2, [r7, #8]
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d812      	bhi.n	8011ce4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011cbe:	687a      	ldr	r2, [r7, #4]
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	1ad2      	subs	r2, r2, r3
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	699b      	ldr	r3, [r3, #24]
 8011cc8:	429a      	cmp	r2, r3
 8011cca:	d302      	bcc.n	8011cd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011ccc:	2301      	movs	r3, #1
 8011cce:	617b      	str	r3, [r7, #20]
 8011cd0:	e01b      	b.n	8011d0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011cd2:	4b10      	ldr	r3, [pc, #64]	@ (8011d14 <prvInsertTimerInActiveList+0x7c>)
 8011cd4:	681a      	ldr	r2, [r3, #0]
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	3304      	adds	r3, #4
 8011cda:	4619      	mov	r1, r3
 8011cdc:	4610      	mov	r0, r2
 8011cde:	f7fd fb60 	bl	800f3a2 <vListInsert>
 8011ce2:	e012      	b.n	8011d0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011ce4:	687a      	ldr	r2, [r7, #4]
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d206      	bcs.n	8011cfa <prvInsertTimerInActiveList+0x62>
 8011cec:	68ba      	ldr	r2, [r7, #8]
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d302      	bcc.n	8011cfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	617b      	str	r3, [r7, #20]
 8011cf8:	e007      	b.n	8011d0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011cfa:	4b07      	ldr	r3, [pc, #28]	@ (8011d18 <prvInsertTimerInActiveList+0x80>)
 8011cfc:	681a      	ldr	r2, [r3, #0]
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	3304      	adds	r3, #4
 8011d02:	4619      	mov	r1, r3
 8011d04:	4610      	mov	r0, r2
 8011d06:	f7fd fb4c 	bl	800f3a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011d0a:	697b      	ldr	r3, [r7, #20]
}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	3718      	adds	r7, #24
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bd80      	pop	{r7, pc}
 8011d14:	20006c3c 	.word	0x20006c3c
 8011d18:	20006c38 	.word	0x20006c38

08011d1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b08e      	sub	sp, #56	@ 0x38
 8011d20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011d22:	e0ce      	b.n	8011ec2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	da19      	bge.n	8011d5e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011d2a:	1d3b      	adds	r3, r7, #4
 8011d2c:	3304      	adds	r3, #4
 8011d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d10b      	bne.n	8011d4e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8011d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d3a:	f383 8811 	msr	BASEPRI, r3
 8011d3e:	f3bf 8f6f 	isb	sy
 8011d42:	f3bf 8f4f 	dsb	sy
 8011d46:	61fb      	str	r3, [r7, #28]
}
 8011d48:	bf00      	nop
 8011d4a:	bf00      	nop
 8011d4c:	e7fd      	b.n	8011d4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011d54:	6850      	ldr	r0, [r2, #4]
 8011d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011d58:	6892      	ldr	r2, [r2, #8]
 8011d5a:	4611      	mov	r1, r2
 8011d5c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	f2c0 80ae 	blt.w	8011ec2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d6c:	695b      	ldr	r3, [r3, #20]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d004      	beq.n	8011d7c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d74:	3304      	adds	r3, #4
 8011d76:	4618      	mov	r0, r3
 8011d78:	f7fd fb4c 	bl	800f414 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011d7c:	463b      	mov	r3, r7
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f7ff ff6a 	bl	8011c58 <prvSampleTimeNow>
 8011d84:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2b09      	cmp	r3, #9
 8011d8a:	f200 8097 	bhi.w	8011ebc <prvProcessReceivedCommands+0x1a0>
 8011d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8011d94 <prvProcessReceivedCommands+0x78>)
 8011d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d94:	08011dbd 	.word	0x08011dbd
 8011d98:	08011dbd 	.word	0x08011dbd
 8011d9c:	08011dbd 	.word	0x08011dbd
 8011da0:	08011e33 	.word	0x08011e33
 8011da4:	08011e47 	.word	0x08011e47
 8011da8:	08011e93 	.word	0x08011e93
 8011dac:	08011dbd 	.word	0x08011dbd
 8011db0:	08011dbd 	.word	0x08011dbd
 8011db4:	08011e33 	.word	0x08011e33
 8011db8:	08011e47 	.word	0x08011e47
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011dc2:	f043 0301 	orr.w	r3, r3, #1
 8011dc6:	b2da      	uxtb	r2, r3
 8011dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011dce:	68ba      	ldr	r2, [r7, #8]
 8011dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dd2:	699b      	ldr	r3, [r3, #24]
 8011dd4:	18d1      	adds	r1, r2, r3
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011dda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ddc:	f7ff ff5c 	bl	8011c98 <prvInsertTimerInActiveList>
 8011de0:	4603      	mov	r3, r0
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d06c      	beq.n	8011ec0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011de8:	6a1b      	ldr	r3, [r3, #32]
 8011dea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011dec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011df0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011df4:	f003 0304 	and.w	r3, r3, #4
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d061      	beq.n	8011ec0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011dfc:	68ba      	ldr	r2, [r7, #8]
 8011dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e00:	699b      	ldr	r3, [r3, #24]
 8011e02:	441a      	add	r2, r3
 8011e04:	2300      	movs	r3, #0
 8011e06:	9300      	str	r3, [sp, #0]
 8011e08:	2300      	movs	r3, #0
 8011e0a:	2100      	movs	r1, #0
 8011e0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011e0e:	f7ff fe01 	bl	8011a14 <xTimerGenericCommand>
 8011e12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011e14:	6a3b      	ldr	r3, [r7, #32]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d152      	bne.n	8011ec0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8011e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e1e:	f383 8811 	msr	BASEPRI, r3
 8011e22:	f3bf 8f6f 	isb	sy
 8011e26:	f3bf 8f4f 	dsb	sy
 8011e2a:	61bb      	str	r3, [r7, #24]
}
 8011e2c:	bf00      	nop
 8011e2e:	bf00      	nop
 8011e30:	e7fd      	b.n	8011e2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011e38:	f023 0301 	bic.w	r3, r3, #1
 8011e3c:	b2da      	uxtb	r2, r3
 8011e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011e44:	e03d      	b.n	8011ec2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011e4c:	f043 0301 	orr.w	r3, r3, #1
 8011e50:	b2da      	uxtb	r2, r3
 8011e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011e58:	68ba      	ldr	r2, [r7, #8]
 8011e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e5c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e60:	699b      	ldr	r3, [r3, #24]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d10b      	bne.n	8011e7e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8011e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e6a:	f383 8811 	msr	BASEPRI, r3
 8011e6e:	f3bf 8f6f 	isb	sy
 8011e72:	f3bf 8f4f 	dsb	sy
 8011e76:	617b      	str	r3, [r7, #20]
}
 8011e78:	bf00      	nop
 8011e7a:	bf00      	nop
 8011e7c:	e7fd      	b.n	8011e7a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e80:	699a      	ldr	r2, [r3, #24]
 8011e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e84:	18d1      	adds	r1, r2, r3
 8011e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011e8c:	f7ff ff04 	bl	8011c98 <prvInsertTimerInActiveList>
					break;
 8011e90:	e017      	b.n	8011ec2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011e98:	f003 0302 	and.w	r3, r3, #2
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d103      	bne.n	8011ea8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8011ea0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ea2:	f000 fbe9 	bl	8012678 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011ea6:	e00c      	b.n	8011ec2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011eae:	f023 0301 	bic.w	r3, r3, #1
 8011eb2:	b2da      	uxtb	r2, r3
 8011eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011eba:	e002      	b.n	8011ec2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8011ebc:	bf00      	nop
 8011ebe:	e000      	b.n	8011ec2 <prvProcessReceivedCommands+0x1a6>
					break;
 8011ec0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011ec2:	4b08      	ldr	r3, [pc, #32]	@ (8011ee4 <prvProcessReceivedCommands+0x1c8>)
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	1d39      	adds	r1, r7, #4
 8011ec8:	2200      	movs	r2, #0
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7fd fe6a 	bl	800fba4 <xQueueReceive>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	f47f af26 	bne.w	8011d24 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011ed8:	bf00      	nop
 8011eda:	bf00      	nop
 8011edc:	3730      	adds	r7, #48	@ 0x30
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bd80      	pop	{r7, pc}
 8011ee2:	bf00      	nop
 8011ee4:	20006c40 	.word	0x20006c40

08011ee8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b088      	sub	sp, #32
 8011eec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011eee:	e049      	b.n	8011f84 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8011fac <prvSwitchTimerLists+0xc4>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	68db      	ldr	r3, [r3, #12]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011efa:	4b2c      	ldr	r3, [pc, #176]	@ (8011fac <prvSwitchTimerLists+0xc4>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	68db      	ldr	r3, [r3, #12]
 8011f00:	68db      	ldr	r3, [r3, #12]
 8011f02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	3304      	adds	r3, #4
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f7fd fa83 	bl	800f414 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	6a1b      	ldr	r3, [r3, #32]
 8011f12:	68f8      	ldr	r0, [r7, #12]
 8011f14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011f1c:	f003 0304 	and.w	r3, r3, #4
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d02f      	beq.n	8011f84 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	699b      	ldr	r3, [r3, #24]
 8011f28:	693a      	ldr	r2, [r7, #16]
 8011f2a:	4413      	add	r3, r2
 8011f2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011f2e:	68ba      	ldr	r2, [r7, #8]
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	429a      	cmp	r2, r3
 8011f34:	d90e      	bls.n	8011f54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	68ba      	ldr	r2, [r7, #8]
 8011f3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	68fa      	ldr	r2, [r7, #12]
 8011f40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011f42:	4b1a      	ldr	r3, [pc, #104]	@ (8011fac <prvSwitchTimerLists+0xc4>)
 8011f44:	681a      	ldr	r2, [r3, #0]
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	3304      	adds	r3, #4
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	4610      	mov	r0, r2
 8011f4e:	f7fd fa28 	bl	800f3a2 <vListInsert>
 8011f52:	e017      	b.n	8011f84 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011f54:	2300      	movs	r3, #0
 8011f56:	9300      	str	r3, [sp, #0]
 8011f58:	2300      	movs	r3, #0
 8011f5a:	693a      	ldr	r2, [r7, #16]
 8011f5c:	2100      	movs	r1, #0
 8011f5e:	68f8      	ldr	r0, [r7, #12]
 8011f60:	f7ff fd58 	bl	8011a14 <xTimerGenericCommand>
 8011f64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d10b      	bne.n	8011f84 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8011f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f70:	f383 8811 	msr	BASEPRI, r3
 8011f74:	f3bf 8f6f 	isb	sy
 8011f78:	f3bf 8f4f 	dsb	sy
 8011f7c:	603b      	str	r3, [r7, #0]
}
 8011f7e:	bf00      	nop
 8011f80:	bf00      	nop
 8011f82:	e7fd      	b.n	8011f80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011f84:	4b09      	ldr	r3, [pc, #36]	@ (8011fac <prvSwitchTimerLists+0xc4>)
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d1b0      	bne.n	8011ef0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011f8e:	4b07      	ldr	r3, [pc, #28]	@ (8011fac <prvSwitchTimerLists+0xc4>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011f94:	4b06      	ldr	r3, [pc, #24]	@ (8011fb0 <prvSwitchTimerLists+0xc8>)
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	4a04      	ldr	r2, [pc, #16]	@ (8011fac <prvSwitchTimerLists+0xc4>)
 8011f9a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011f9c:	4a04      	ldr	r2, [pc, #16]	@ (8011fb0 <prvSwitchTimerLists+0xc8>)
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	6013      	str	r3, [r2, #0]
}
 8011fa2:	bf00      	nop
 8011fa4:	3718      	adds	r7, #24
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}
 8011faa:	bf00      	nop
 8011fac:	20006c38 	.word	0x20006c38
 8011fb0:	20006c3c 	.word	0x20006c3c

08011fb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b082      	sub	sp, #8
 8011fb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011fba:	f000 f96d 	bl	8012298 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011fbe:	4b15      	ldr	r3, [pc, #84]	@ (8012014 <prvCheckForValidListAndQueue+0x60>)
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d120      	bne.n	8012008 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011fc6:	4814      	ldr	r0, [pc, #80]	@ (8012018 <prvCheckForValidListAndQueue+0x64>)
 8011fc8:	f7fd f99a 	bl	800f300 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011fcc:	4813      	ldr	r0, [pc, #76]	@ (801201c <prvCheckForValidListAndQueue+0x68>)
 8011fce:	f7fd f997 	bl	800f300 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011fd2:	4b13      	ldr	r3, [pc, #76]	@ (8012020 <prvCheckForValidListAndQueue+0x6c>)
 8011fd4:	4a10      	ldr	r2, [pc, #64]	@ (8012018 <prvCheckForValidListAndQueue+0x64>)
 8011fd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011fd8:	4b12      	ldr	r3, [pc, #72]	@ (8012024 <prvCheckForValidListAndQueue+0x70>)
 8011fda:	4a10      	ldr	r2, [pc, #64]	@ (801201c <prvCheckForValidListAndQueue+0x68>)
 8011fdc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011fde:	2300      	movs	r3, #0
 8011fe0:	9300      	str	r3, [sp, #0]
 8011fe2:	4b11      	ldr	r3, [pc, #68]	@ (8012028 <prvCheckForValidListAndQueue+0x74>)
 8011fe4:	4a11      	ldr	r2, [pc, #68]	@ (801202c <prvCheckForValidListAndQueue+0x78>)
 8011fe6:	2110      	movs	r1, #16
 8011fe8:	200a      	movs	r0, #10
 8011fea:	f7fd faa7 	bl	800f53c <xQueueGenericCreateStatic>
 8011fee:	4603      	mov	r3, r0
 8011ff0:	4a08      	ldr	r2, [pc, #32]	@ (8012014 <prvCheckForValidListAndQueue+0x60>)
 8011ff2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011ff4:	4b07      	ldr	r3, [pc, #28]	@ (8012014 <prvCheckForValidListAndQueue+0x60>)
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d005      	beq.n	8012008 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011ffc:	4b05      	ldr	r3, [pc, #20]	@ (8012014 <prvCheckForValidListAndQueue+0x60>)
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	490b      	ldr	r1, [pc, #44]	@ (8012030 <prvCheckForValidListAndQueue+0x7c>)
 8012002:	4618      	mov	r0, r3
 8012004:	f7fe f8e8 	bl	80101d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012008:	f000 f978 	bl	80122fc <vPortExitCritical>
}
 801200c:	bf00      	nop
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}
 8012012:	bf00      	nop
 8012014:	20006c40 	.word	0x20006c40
 8012018:	20006c10 	.word	0x20006c10
 801201c:	20006c24 	.word	0x20006c24
 8012020:	20006c38 	.word	0x20006c38
 8012024:	20006c3c 	.word	0x20006c3c
 8012028:	20006cec 	.word	0x20006cec
 801202c:	20006c4c 	.word	0x20006c4c
 8012030:	0802259c 	.word	0x0802259c

08012034 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012034:	b480      	push	{r7}
 8012036:	b085      	sub	sp, #20
 8012038:	af00      	add	r7, sp, #0
 801203a:	60f8      	str	r0, [r7, #12]
 801203c:	60b9      	str	r1, [r7, #8]
 801203e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	3b04      	subs	r3, #4
 8012044:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801204c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	3b04      	subs	r3, #4
 8012052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012054:	68bb      	ldr	r3, [r7, #8]
 8012056:	f023 0201 	bic.w	r2, r3, #1
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	3b04      	subs	r3, #4
 8012062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012064:	4a0c      	ldr	r2, [pc, #48]	@ (8012098 <pxPortInitialiseStack+0x64>)
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	3b14      	subs	r3, #20
 801206e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012070:	687a      	ldr	r2, [r7, #4]
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	3b04      	subs	r3, #4
 801207a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	f06f 0202 	mvn.w	r2, #2
 8012082:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	3b20      	subs	r3, #32
 8012088:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801208a:	68fb      	ldr	r3, [r7, #12]
}
 801208c:	4618      	mov	r0, r3
 801208e:	3714      	adds	r7, #20
 8012090:	46bd      	mov	sp, r7
 8012092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012096:	4770      	bx	lr
 8012098:	0801209d 	.word	0x0801209d

0801209c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801209c:	b480      	push	{r7}
 801209e:	b085      	sub	sp, #20
 80120a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80120a2:	2300      	movs	r3, #0
 80120a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80120a6:	4b13      	ldr	r3, [pc, #76]	@ (80120f4 <prvTaskExitError+0x58>)
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80120ae:	d00b      	beq.n	80120c8 <prvTaskExitError+0x2c>
	__asm volatile
 80120b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120b4:	f383 8811 	msr	BASEPRI, r3
 80120b8:	f3bf 8f6f 	isb	sy
 80120bc:	f3bf 8f4f 	dsb	sy
 80120c0:	60fb      	str	r3, [r7, #12]
}
 80120c2:	bf00      	nop
 80120c4:	bf00      	nop
 80120c6:	e7fd      	b.n	80120c4 <prvTaskExitError+0x28>
	__asm volatile
 80120c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120cc:	f383 8811 	msr	BASEPRI, r3
 80120d0:	f3bf 8f6f 	isb	sy
 80120d4:	f3bf 8f4f 	dsb	sy
 80120d8:	60bb      	str	r3, [r7, #8]
}
 80120da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80120dc:	bf00      	nop
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d0fc      	beq.n	80120de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80120e4:	bf00      	nop
 80120e6:	bf00      	nop
 80120e8:	3714      	adds	r7, #20
 80120ea:	46bd      	mov	sp, r7
 80120ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f0:	4770      	bx	lr
 80120f2:	bf00      	nop
 80120f4:	2000012c 	.word	0x2000012c
	...

08012100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012100:	4b07      	ldr	r3, [pc, #28]	@ (8012120 <pxCurrentTCBConst2>)
 8012102:	6819      	ldr	r1, [r3, #0]
 8012104:	6808      	ldr	r0, [r1, #0]
 8012106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801210a:	f380 8809 	msr	PSP, r0
 801210e:	f3bf 8f6f 	isb	sy
 8012112:	f04f 0000 	mov.w	r0, #0
 8012116:	f380 8811 	msr	BASEPRI, r0
 801211a:	4770      	bx	lr
 801211c:	f3af 8000 	nop.w

08012120 <pxCurrentTCBConst2>:
 8012120:	20006708 	.word	0x20006708
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012124:	bf00      	nop
 8012126:	bf00      	nop

08012128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012128:	4808      	ldr	r0, [pc, #32]	@ (801214c <prvPortStartFirstTask+0x24>)
 801212a:	6800      	ldr	r0, [r0, #0]
 801212c:	6800      	ldr	r0, [r0, #0]
 801212e:	f380 8808 	msr	MSP, r0
 8012132:	f04f 0000 	mov.w	r0, #0
 8012136:	f380 8814 	msr	CONTROL, r0
 801213a:	b662      	cpsie	i
 801213c:	b661      	cpsie	f
 801213e:	f3bf 8f4f 	dsb	sy
 8012142:	f3bf 8f6f 	isb	sy
 8012146:	df00      	svc	0
 8012148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801214a:	bf00      	nop
 801214c:	e000ed08 	.word	0xe000ed08

08012150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b086      	sub	sp, #24
 8012154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012156:	4b47      	ldr	r3, [pc, #284]	@ (8012274 <xPortStartScheduler+0x124>)
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	4a47      	ldr	r2, [pc, #284]	@ (8012278 <xPortStartScheduler+0x128>)
 801215c:	4293      	cmp	r3, r2
 801215e:	d10b      	bne.n	8012178 <xPortStartScheduler+0x28>
	__asm volatile
 8012160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012164:	f383 8811 	msr	BASEPRI, r3
 8012168:	f3bf 8f6f 	isb	sy
 801216c:	f3bf 8f4f 	dsb	sy
 8012170:	613b      	str	r3, [r7, #16]
}
 8012172:	bf00      	nop
 8012174:	bf00      	nop
 8012176:	e7fd      	b.n	8012174 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012178:	4b3e      	ldr	r3, [pc, #248]	@ (8012274 <xPortStartScheduler+0x124>)
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	4a3f      	ldr	r2, [pc, #252]	@ (801227c <xPortStartScheduler+0x12c>)
 801217e:	4293      	cmp	r3, r2
 8012180:	d10b      	bne.n	801219a <xPortStartScheduler+0x4a>
	__asm volatile
 8012182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012186:	f383 8811 	msr	BASEPRI, r3
 801218a:	f3bf 8f6f 	isb	sy
 801218e:	f3bf 8f4f 	dsb	sy
 8012192:	60fb      	str	r3, [r7, #12]
}
 8012194:	bf00      	nop
 8012196:	bf00      	nop
 8012198:	e7fd      	b.n	8012196 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801219a:	4b39      	ldr	r3, [pc, #228]	@ (8012280 <xPortStartScheduler+0x130>)
 801219c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801219e:	697b      	ldr	r3, [r7, #20]
 80121a0:	781b      	ldrb	r3, [r3, #0]
 80121a2:	b2db      	uxtb	r3, r3
 80121a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	22ff      	movs	r2, #255	@ 0xff
 80121aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80121ac:	697b      	ldr	r3, [r7, #20]
 80121ae:	781b      	ldrb	r3, [r3, #0]
 80121b0:	b2db      	uxtb	r3, r3
 80121b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80121b4:	78fb      	ldrb	r3, [r7, #3]
 80121b6:	b2db      	uxtb	r3, r3
 80121b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80121bc:	b2da      	uxtb	r2, r3
 80121be:	4b31      	ldr	r3, [pc, #196]	@ (8012284 <xPortStartScheduler+0x134>)
 80121c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80121c2:	4b31      	ldr	r3, [pc, #196]	@ (8012288 <xPortStartScheduler+0x138>)
 80121c4:	2207      	movs	r2, #7
 80121c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80121c8:	e009      	b.n	80121de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80121ca:	4b2f      	ldr	r3, [pc, #188]	@ (8012288 <xPortStartScheduler+0x138>)
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	3b01      	subs	r3, #1
 80121d0:	4a2d      	ldr	r2, [pc, #180]	@ (8012288 <xPortStartScheduler+0x138>)
 80121d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80121d4:	78fb      	ldrb	r3, [r7, #3]
 80121d6:	b2db      	uxtb	r3, r3
 80121d8:	005b      	lsls	r3, r3, #1
 80121da:	b2db      	uxtb	r3, r3
 80121dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80121de:	78fb      	ldrb	r3, [r7, #3]
 80121e0:	b2db      	uxtb	r3, r3
 80121e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80121e6:	2b80      	cmp	r3, #128	@ 0x80
 80121e8:	d0ef      	beq.n	80121ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80121ea:	4b27      	ldr	r3, [pc, #156]	@ (8012288 <xPortStartScheduler+0x138>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	f1c3 0307 	rsb	r3, r3, #7
 80121f2:	2b04      	cmp	r3, #4
 80121f4:	d00b      	beq.n	801220e <xPortStartScheduler+0xbe>
	__asm volatile
 80121f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121fa:	f383 8811 	msr	BASEPRI, r3
 80121fe:	f3bf 8f6f 	isb	sy
 8012202:	f3bf 8f4f 	dsb	sy
 8012206:	60bb      	str	r3, [r7, #8]
}
 8012208:	bf00      	nop
 801220a:	bf00      	nop
 801220c:	e7fd      	b.n	801220a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801220e:	4b1e      	ldr	r3, [pc, #120]	@ (8012288 <xPortStartScheduler+0x138>)
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	021b      	lsls	r3, r3, #8
 8012214:	4a1c      	ldr	r2, [pc, #112]	@ (8012288 <xPortStartScheduler+0x138>)
 8012216:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012218:	4b1b      	ldr	r3, [pc, #108]	@ (8012288 <xPortStartScheduler+0x138>)
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012220:	4a19      	ldr	r2, [pc, #100]	@ (8012288 <xPortStartScheduler+0x138>)
 8012222:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	b2da      	uxtb	r2, r3
 8012228:	697b      	ldr	r3, [r7, #20]
 801222a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801222c:	4b17      	ldr	r3, [pc, #92]	@ (801228c <xPortStartScheduler+0x13c>)
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	4a16      	ldr	r2, [pc, #88]	@ (801228c <xPortStartScheduler+0x13c>)
 8012232:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012236:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012238:	4b14      	ldr	r3, [pc, #80]	@ (801228c <xPortStartScheduler+0x13c>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	4a13      	ldr	r2, [pc, #76]	@ (801228c <xPortStartScheduler+0x13c>)
 801223e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012242:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012244:	f000 f8da 	bl	80123fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012248:	4b11      	ldr	r3, [pc, #68]	@ (8012290 <xPortStartScheduler+0x140>)
 801224a:	2200      	movs	r2, #0
 801224c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801224e:	f000 f8f9 	bl	8012444 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012252:	4b10      	ldr	r3, [pc, #64]	@ (8012294 <xPortStartScheduler+0x144>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	4a0f      	ldr	r2, [pc, #60]	@ (8012294 <xPortStartScheduler+0x144>)
 8012258:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801225c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801225e:	f7ff ff63 	bl	8012128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012262:	f7fe fcfb 	bl	8010c5c <vTaskSwitchContext>
	prvTaskExitError();
 8012266:	f7ff ff19 	bl	801209c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801226a:	2300      	movs	r3, #0
}
 801226c:	4618      	mov	r0, r3
 801226e:	3718      	adds	r7, #24
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}
 8012274:	e000ed00 	.word	0xe000ed00
 8012278:	410fc271 	.word	0x410fc271
 801227c:	410fc270 	.word	0x410fc270
 8012280:	e000e400 	.word	0xe000e400
 8012284:	20006d3c 	.word	0x20006d3c
 8012288:	20006d40 	.word	0x20006d40
 801228c:	e000ed20 	.word	0xe000ed20
 8012290:	2000012c 	.word	0x2000012c
 8012294:	e000ef34 	.word	0xe000ef34

08012298 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012298:	b480      	push	{r7}
 801229a:	b083      	sub	sp, #12
 801229c:	af00      	add	r7, sp, #0
	__asm volatile
 801229e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122a2:	f383 8811 	msr	BASEPRI, r3
 80122a6:	f3bf 8f6f 	isb	sy
 80122aa:	f3bf 8f4f 	dsb	sy
 80122ae:	607b      	str	r3, [r7, #4]
}
 80122b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80122b2:	4b10      	ldr	r3, [pc, #64]	@ (80122f4 <vPortEnterCritical+0x5c>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	3301      	adds	r3, #1
 80122b8:	4a0e      	ldr	r2, [pc, #56]	@ (80122f4 <vPortEnterCritical+0x5c>)
 80122ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80122bc:	4b0d      	ldr	r3, [pc, #52]	@ (80122f4 <vPortEnterCritical+0x5c>)
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	2b01      	cmp	r3, #1
 80122c2:	d110      	bne.n	80122e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80122c4:	4b0c      	ldr	r3, [pc, #48]	@ (80122f8 <vPortEnterCritical+0x60>)
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	b2db      	uxtb	r3, r3
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d00b      	beq.n	80122e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80122ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122d2:	f383 8811 	msr	BASEPRI, r3
 80122d6:	f3bf 8f6f 	isb	sy
 80122da:	f3bf 8f4f 	dsb	sy
 80122de:	603b      	str	r3, [r7, #0]
}
 80122e0:	bf00      	nop
 80122e2:	bf00      	nop
 80122e4:	e7fd      	b.n	80122e2 <vPortEnterCritical+0x4a>
	}
}
 80122e6:	bf00      	nop
 80122e8:	370c      	adds	r7, #12
 80122ea:	46bd      	mov	sp, r7
 80122ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f0:	4770      	bx	lr
 80122f2:	bf00      	nop
 80122f4:	2000012c 	.word	0x2000012c
 80122f8:	e000ed04 	.word	0xe000ed04

080122fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80122fc:	b480      	push	{r7}
 80122fe:	b083      	sub	sp, #12
 8012300:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012302:	4b12      	ldr	r3, [pc, #72]	@ (801234c <vPortExitCritical+0x50>)
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d10b      	bne.n	8012322 <vPortExitCritical+0x26>
	__asm volatile
 801230a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801230e:	f383 8811 	msr	BASEPRI, r3
 8012312:	f3bf 8f6f 	isb	sy
 8012316:	f3bf 8f4f 	dsb	sy
 801231a:	607b      	str	r3, [r7, #4]
}
 801231c:	bf00      	nop
 801231e:	bf00      	nop
 8012320:	e7fd      	b.n	801231e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012322:	4b0a      	ldr	r3, [pc, #40]	@ (801234c <vPortExitCritical+0x50>)
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	3b01      	subs	r3, #1
 8012328:	4a08      	ldr	r2, [pc, #32]	@ (801234c <vPortExitCritical+0x50>)
 801232a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801232c:	4b07      	ldr	r3, [pc, #28]	@ (801234c <vPortExitCritical+0x50>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d105      	bne.n	8012340 <vPortExitCritical+0x44>
 8012334:	2300      	movs	r3, #0
 8012336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012338:	683b      	ldr	r3, [r7, #0]
 801233a:	f383 8811 	msr	BASEPRI, r3
}
 801233e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012340:	bf00      	nop
 8012342:	370c      	adds	r7, #12
 8012344:	46bd      	mov	sp, r7
 8012346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234a:	4770      	bx	lr
 801234c:	2000012c 	.word	0x2000012c

08012350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012350:	f3ef 8009 	mrs	r0, PSP
 8012354:	f3bf 8f6f 	isb	sy
 8012358:	4b15      	ldr	r3, [pc, #84]	@ (80123b0 <pxCurrentTCBConst>)
 801235a:	681a      	ldr	r2, [r3, #0]
 801235c:	f01e 0f10 	tst.w	lr, #16
 8012360:	bf08      	it	eq
 8012362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801236a:	6010      	str	r0, [r2, #0]
 801236c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012370:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012374:	f380 8811 	msr	BASEPRI, r0
 8012378:	f3bf 8f4f 	dsb	sy
 801237c:	f3bf 8f6f 	isb	sy
 8012380:	f7fe fc6c 	bl	8010c5c <vTaskSwitchContext>
 8012384:	f04f 0000 	mov.w	r0, #0
 8012388:	f380 8811 	msr	BASEPRI, r0
 801238c:	bc09      	pop	{r0, r3}
 801238e:	6819      	ldr	r1, [r3, #0]
 8012390:	6808      	ldr	r0, [r1, #0]
 8012392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012396:	f01e 0f10 	tst.w	lr, #16
 801239a:	bf08      	it	eq
 801239c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80123a0:	f380 8809 	msr	PSP, r0
 80123a4:	f3bf 8f6f 	isb	sy
 80123a8:	4770      	bx	lr
 80123aa:	bf00      	nop
 80123ac:	f3af 8000 	nop.w

080123b0 <pxCurrentTCBConst>:
 80123b0:	20006708 	.word	0x20006708
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80123b4:	bf00      	nop
 80123b6:	bf00      	nop

080123b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
	__asm volatile
 80123be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123c2:	f383 8811 	msr	BASEPRI, r3
 80123c6:	f3bf 8f6f 	isb	sy
 80123ca:	f3bf 8f4f 	dsb	sy
 80123ce:	607b      	str	r3, [r7, #4]
}
 80123d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80123d2:	f7fe fb89 	bl	8010ae8 <xTaskIncrementTick>
 80123d6:	4603      	mov	r3, r0
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d003      	beq.n	80123e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80123dc:	4b06      	ldr	r3, [pc, #24]	@ (80123f8 <xPortSysTickHandler+0x40>)
 80123de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80123e2:	601a      	str	r2, [r3, #0]
 80123e4:	2300      	movs	r3, #0
 80123e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	f383 8811 	msr	BASEPRI, r3
}
 80123ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80123f0:	bf00      	nop
 80123f2:	3708      	adds	r7, #8
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd80      	pop	{r7, pc}
 80123f8:	e000ed04 	.word	0xe000ed04

080123fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80123fc:	b480      	push	{r7}
 80123fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012400:	4b0b      	ldr	r3, [pc, #44]	@ (8012430 <vPortSetupTimerInterrupt+0x34>)
 8012402:	2200      	movs	r2, #0
 8012404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012406:	4b0b      	ldr	r3, [pc, #44]	@ (8012434 <vPortSetupTimerInterrupt+0x38>)
 8012408:	2200      	movs	r2, #0
 801240a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801240c:	4b0a      	ldr	r3, [pc, #40]	@ (8012438 <vPortSetupTimerInterrupt+0x3c>)
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	4a0a      	ldr	r2, [pc, #40]	@ (801243c <vPortSetupTimerInterrupt+0x40>)
 8012412:	fba2 2303 	umull	r2, r3, r2, r3
 8012416:	099b      	lsrs	r3, r3, #6
 8012418:	4a09      	ldr	r2, [pc, #36]	@ (8012440 <vPortSetupTimerInterrupt+0x44>)
 801241a:	3b01      	subs	r3, #1
 801241c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801241e:	4b04      	ldr	r3, [pc, #16]	@ (8012430 <vPortSetupTimerInterrupt+0x34>)
 8012420:	2207      	movs	r2, #7
 8012422:	601a      	str	r2, [r3, #0]
}
 8012424:	bf00      	nop
 8012426:	46bd      	mov	sp, r7
 8012428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242c:	4770      	bx	lr
 801242e:	bf00      	nop
 8012430:	e000e010 	.word	0xe000e010
 8012434:	e000e018 	.word	0xe000e018
 8012438:	20000010 	.word	0x20000010
 801243c:	10624dd3 	.word	0x10624dd3
 8012440:	e000e014 	.word	0xe000e014

08012444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012444:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012454 <vPortEnableVFP+0x10>
 8012448:	6801      	ldr	r1, [r0, #0]
 801244a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801244e:	6001      	str	r1, [r0, #0]
 8012450:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012452:	bf00      	nop
 8012454:	e000ed88 	.word	0xe000ed88

08012458 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012458:	b480      	push	{r7}
 801245a:	b085      	sub	sp, #20
 801245c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801245e:	f3ef 8305 	mrs	r3, IPSR
 8012462:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	2b0f      	cmp	r3, #15
 8012468:	d915      	bls.n	8012496 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801246a:	4a18      	ldr	r2, [pc, #96]	@ (80124cc <vPortValidateInterruptPriority+0x74>)
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	4413      	add	r3, r2
 8012470:	781b      	ldrb	r3, [r3, #0]
 8012472:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012474:	4b16      	ldr	r3, [pc, #88]	@ (80124d0 <vPortValidateInterruptPriority+0x78>)
 8012476:	781b      	ldrb	r3, [r3, #0]
 8012478:	7afa      	ldrb	r2, [r7, #11]
 801247a:	429a      	cmp	r2, r3
 801247c:	d20b      	bcs.n	8012496 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801247e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012482:	f383 8811 	msr	BASEPRI, r3
 8012486:	f3bf 8f6f 	isb	sy
 801248a:	f3bf 8f4f 	dsb	sy
 801248e:	607b      	str	r3, [r7, #4]
}
 8012490:	bf00      	nop
 8012492:	bf00      	nop
 8012494:	e7fd      	b.n	8012492 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012496:	4b0f      	ldr	r3, [pc, #60]	@ (80124d4 <vPortValidateInterruptPriority+0x7c>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801249e:	4b0e      	ldr	r3, [pc, #56]	@ (80124d8 <vPortValidateInterruptPriority+0x80>)
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	429a      	cmp	r2, r3
 80124a4:	d90b      	bls.n	80124be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80124a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124aa:	f383 8811 	msr	BASEPRI, r3
 80124ae:	f3bf 8f6f 	isb	sy
 80124b2:	f3bf 8f4f 	dsb	sy
 80124b6:	603b      	str	r3, [r7, #0]
}
 80124b8:	bf00      	nop
 80124ba:	bf00      	nop
 80124bc:	e7fd      	b.n	80124ba <vPortValidateInterruptPriority+0x62>
	}
 80124be:	bf00      	nop
 80124c0:	3714      	adds	r7, #20
 80124c2:	46bd      	mov	sp, r7
 80124c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c8:	4770      	bx	lr
 80124ca:	bf00      	nop
 80124cc:	e000e3f0 	.word	0xe000e3f0
 80124d0:	20006d3c 	.word	0x20006d3c
 80124d4:	e000ed0c 	.word	0xe000ed0c
 80124d8:	20006d40 	.word	0x20006d40

080124dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b08a      	sub	sp, #40	@ 0x28
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80124e4:	2300      	movs	r3, #0
 80124e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80124e8:	f7fe fa30 	bl	801094c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80124ec:	4b5c      	ldr	r3, [pc, #368]	@ (8012660 <pvPortMalloc+0x184>)
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d101      	bne.n	80124f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80124f4:	f000 f924 	bl	8012740 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80124f8:	4b5a      	ldr	r3, [pc, #360]	@ (8012664 <pvPortMalloc+0x188>)
 80124fa:	681a      	ldr	r2, [r3, #0]
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	4013      	ands	r3, r2
 8012500:	2b00      	cmp	r3, #0
 8012502:	f040 8095 	bne.w	8012630 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d01e      	beq.n	801254a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801250c:	2208      	movs	r2, #8
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	4413      	add	r3, r2
 8012512:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f003 0307 	and.w	r3, r3, #7
 801251a:	2b00      	cmp	r3, #0
 801251c:	d015      	beq.n	801254a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	f023 0307 	bic.w	r3, r3, #7
 8012524:	3308      	adds	r3, #8
 8012526:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	f003 0307 	and.w	r3, r3, #7
 801252e:	2b00      	cmp	r3, #0
 8012530:	d00b      	beq.n	801254a <pvPortMalloc+0x6e>
	__asm volatile
 8012532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012536:	f383 8811 	msr	BASEPRI, r3
 801253a:	f3bf 8f6f 	isb	sy
 801253e:	f3bf 8f4f 	dsb	sy
 8012542:	617b      	str	r3, [r7, #20]
}
 8012544:	bf00      	nop
 8012546:	bf00      	nop
 8012548:	e7fd      	b.n	8012546 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d06f      	beq.n	8012630 <pvPortMalloc+0x154>
 8012550:	4b45      	ldr	r3, [pc, #276]	@ (8012668 <pvPortMalloc+0x18c>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	687a      	ldr	r2, [r7, #4]
 8012556:	429a      	cmp	r2, r3
 8012558:	d86a      	bhi.n	8012630 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801255a:	4b44      	ldr	r3, [pc, #272]	@ (801266c <pvPortMalloc+0x190>)
 801255c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801255e:	4b43      	ldr	r3, [pc, #268]	@ (801266c <pvPortMalloc+0x190>)
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012564:	e004      	b.n	8012570 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012568:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	687a      	ldr	r2, [r7, #4]
 8012576:	429a      	cmp	r2, r3
 8012578:	d903      	bls.n	8012582 <pvPortMalloc+0xa6>
 801257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d1f1      	bne.n	8012566 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012582:	4b37      	ldr	r3, [pc, #220]	@ (8012660 <pvPortMalloc+0x184>)
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012588:	429a      	cmp	r2, r3
 801258a:	d051      	beq.n	8012630 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801258c:	6a3b      	ldr	r3, [r7, #32]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	2208      	movs	r2, #8
 8012592:	4413      	add	r3, r2
 8012594:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012598:	681a      	ldr	r2, [r3, #0]
 801259a:	6a3b      	ldr	r3, [r7, #32]
 801259c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125a0:	685a      	ldr	r2, [r3, #4]
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	1ad2      	subs	r2, r2, r3
 80125a6:	2308      	movs	r3, #8
 80125a8:	005b      	lsls	r3, r3, #1
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d920      	bls.n	80125f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80125ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	4413      	add	r3, r2
 80125b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80125b6:	69bb      	ldr	r3, [r7, #24]
 80125b8:	f003 0307 	and.w	r3, r3, #7
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d00b      	beq.n	80125d8 <pvPortMalloc+0xfc>
	__asm volatile
 80125c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125c4:	f383 8811 	msr	BASEPRI, r3
 80125c8:	f3bf 8f6f 	isb	sy
 80125cc:	f3bf 8f4f 	dsb	sy
 80125d0:	613b      	str	r3, [r7, #16]
}
 80125d2:	bf00      	nop
 80125d4:	bf00      	nop
 80125d6:	e7fd      	b.n	80125d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80125d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125da:	685a      	ldr	r2, [r3, #4]
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	1ad2      	subs	r2, r2, r3
 80125e0:	69bb      	ldr	r3, [r7, #24]
 80125e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80125e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125e6:	687a      	ldr	r2, [r7, #4]
 80125e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80125ea:	69b8      	ldr	r0, [r7, #24]
 80125ec:	f000 f90a 	bl	8012804 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80125f0:	4b1d      	ldr	r3, [pc, #116]	@ (8012668 <pvPortMalloc+0x18c>)
 80125f2:	681a      	ldr	r2, [r3, #0]
 80125f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	1ad3      	subs	r3, r2, r3
 80125fa:	4a1b      	ldr	r2, [pc, #108]	@ (8012668 <pvPortMalloc+0x18c>)
 80125fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80125fe:	4b1a      	ldr	r3, [pc, #104]	@ (8012668 <pvPortMalloc+0x18c>)
 8012600:	681a      	ldr	r2, [r3, #0]
 8012602:	4b1b      	ldr	r3, [pc, #108]	@ (8012670 <pvPortMalloc+0x194>)
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	429a      	cmp	r2, r3
 8012608:	d203      	bcs.n	8012612 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801260a:	4b17      	ldr	r3, [pc, #92]	@ (8012668 <pvPortMalloc+0x18c>)
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	4a18      	ldr	r2, [pc, #96]	@ (8012670 <pvPortMalloc+0x194>)
 8012610:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012614:	685a      	ldr	r2, [r3, #4]
 8012616:	4b13      	ldr	r3, [pc, #76]	@ (8012664 <pvPortMalloc+0x188>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	431a      	orrs	r2, r3
 801261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801261e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012622:	2200      	movs	r2, #0
 8012624:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012626:	4b13      	ldr	r3, [pc, #76]	@ (8012674 <pvPortMalloc+0x198>)
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	3301      	adds	r3, #1
 801262c:	4a11      	ldr	r2, [pc, #68]	@ (8012674 <pvPortMalloc+0x198>)
 801262e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012630:	f7fe f99a 	bl	8010968 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012634:	69fb      	ldr	r3, [r7, #28]
 8012636:	f003 0307 	and.w	r3, r3, #7
 801263a:	2b00      	cmp	r3, #0
 801263c:	d00b      	beq.n	8012656 <pvPortMalloc+0x17a>
	__asm volatile
 801263e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012642:	f383 8811 	msr	BASEPRI, r3
 8012646:	f3bf 8f6f 	isb	sy
 801264a:	f3bf 8f4f 	dsb	sy
 801264e:	60fb      	str	r3, [r7, #12]
}
 8012650:	bf00      	nop
 8012652:	bf00      	nop
 8012654:	e7fd      	b.n	8012652 <pvPortMalloc+0x176>
	return pvReturn;
 8012656:	69fb      	ldr	r3, [r7, #28]
}
 8012658:	4618      	mov	r0, r3
 801265a:	3728      	adds	r7, #40	@ 0x28
 801265c:	46bd      	mov	sp, r7
 801265e:	bd80      	pop	{r7, pc}
 8012660:	20016d4c 	.word	0x20016d4c
 8012664:	20016d60 	.word	0x20016d60
 8012668:	20016d50 	.word	0x20016d50
 801266c:	20016d44 	.word	0x20016d44
 8012670:	20016d54 	.word	0x20016d54
 8012674:	20016d58 	.word	0x20016d58

08012678 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b086      	sub	sp, #24
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d04f      	beq.n	801272a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801268a:	2308      	movs	r3, #8
 801268c:	425b      	negs	r3, r3
 801268e:	697a      	ldr	r2, [r7, #20]
 8012690:	4413      	add	r3, r2
 8012692:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012694:	697b      	ldr	r3, [r7, #20]
 8012696:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012698:	693b      	ldr	r3, [r7, #16]
 801269a:	685a      	ldr	r2, [r3, #4]
 801269c:	4b25      	ldr	r3, [pc, #148]	@ (8012734 <vPortFree+0xbc>)
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	4013      	ands	r3, r2
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d10b      	bne.n	80126be <vPortFree+0x46>
	__asm volatile
 80126a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126aa:	f383 8811 	msr	BASEPRI, r3
 80126ae:	f3bf 8f6f 	isb	sy
 80126b2:	f3bf 8f4f 	dsb	sy
 80126b6:	60fb      	str	r3, [r7, #12]
}
 80126b8:	bf00      	nop
 80126ba:	bf00      	nop
 80126bc:	e7fd      	b.n	80126ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80126be:	693b      	ldr	r3, [r7, #16]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d00b      	beq.n	80126de <vPortFree+0x66>
	__asm volatile
 80126c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126ca:	f383 8811 	msr	BASEPRI, r3
 80126ce:	f3bf 8f6f 	isb	sy
 80126d2:	f3bf 8f4f 	dsb	sy
 80126d6:	60bb      	str	r3, [r7, #8]
}
 80126d8:	bf00      	nop
 80126da:	bf00      	nop
 80126dc:	e7fd      	b.n	80126da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80126de:	693b      	ldr	r3, [r7, #16]
 80126e0:	685a      	ldr	r2, [r3, #4]
 80126e2:	4b14      	ldr	r3, [pc, #80]	@ (8012734 <vPortFree+0xbc>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	4013      	ands	r3, r2
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d01e      	beq.n	801272a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80126ec:	693b      	ldr	r3, [r7, #16]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d11a      	bne.n	801272a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80126f4:	693b      	ldr	r3, [r7, #16]
 80126f6:	685a      	ldr	r2, [r3, #4]
 80126f8:	4b0e      	ldr	r3, [pc, #56]	@ (8012734 <vPortFree+0xbc>)
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	43db      	mvns	r3, r3
 80126fe:	401a      	ands	r2, r3
 8012700:	693b      	ldr	r3, [r7, #16]
 8012702:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012704:	f7fe f922 	bl	801094c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012708:	693b      	ldr	r3, [r7, #16]
 801270a:	685a      	ldr	r2, [r3, #4]
 801270c:	4b0a      	ldr	r3, [pc, #40]	@ (8012738 <vPortFree+0xc0>)
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	4413      	add	r3, r2
 8012712:	4a09      	ldr	r2, [pc, #36]	@ (8012738 <vPortFree+0xc0>)
 8012714:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012716:	6938      	ldr	r0, [r7, #16]
 8012718:	f000 f874 	bl	8012804 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801271c:	4b07      	ldr	r3, [pc, #28]	@ (801273c <vPortFree+0xc4>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	3301      	adds	r3, #1
 8012722:	4a06      	ldr	r2, [pc, #24]	@ (801273c <vPortFree+0xc4>)
 8012724:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012726:	f7fe f91f 	bl	8010968 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801272a:	bf00      	nop
 801272c:	3718      	adds	r7, #24
 801272e:	46bd      	mov	sp, r7
 8012730:	bd80      	pop	{r7, pc}
 8012732:	bf00      	nop
 8012734:	20016d60 	.word	0x20016d60
 8012738:	20016d50 	.word	0x20016d50
 801273c:	20016d5c 	.word	0x20016d5c

08012740 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012740:	b480      	push	{r7}
 8012742:	b085      	sub	sp, #20
 8012744:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012746:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801274a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801274c:	4b27      	ldr	r3, [pc, #156]	@ (80127ec <prvHeapInit+0xac>)
 801274e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	f003 0307 	and.w	r3, r3, #7
 8012756:	2b00      	cmp	r3, #0
 8012758:	d00c      	beq.n	8012774 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	3307      	adds	r3, #7
 801275e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	f023 0307 	bic.w	r3, r3, #7
 8012766:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012768:	68ba      	ldr	r2, [r7, #8]
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	1ad3      	subs	r3, r2, r3
 801276e:	4a1f      	ldr	r2, [pc, #124]	@ (80127ec <prvHeapInit+0xac>)
 8012770:	4413      	add	r3, r2
 8012772:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012778:	4a1d      	ldr	r2, [pc, #116]	@ (80127f0 <prvHeapInit+0xb0>)
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801277e:	4b1c      	ldr	r3, [pc, #112]	@ (80127f0 <prvHeapInit+0xb0>)
 8012780:	2200      	movs	r2, #0
 8012782:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	68ba      	ldr	r2, [r7, #8]
 8012788:	4413      	add	r3, r2
 801278a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801278c:	2208      	movs	r2, #8
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	1a9b      	subs	r3, r3, r2
 8012792:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	f023 0307 	bic.w	r3, r3, #7
 801279a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	4a15      	ldr	r2, [pc, #84]	@ (80127f4 <prvHeapInit+0xb4>)
 80127a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80127a2:	4b14      	ldr	r3, [pc, #80]	@ (80127f4 <prvHeapInit+0xb4>)
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	2200      	movs	r2, #0
 80127a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80127aa:	4b12      	ldr	r3, [pc, #72]	@ (80127f4 <prvHeapInit+0xb4>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	2200      	movs	r2, #0
 80127b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	68fa      	ldr	r2, [r7, #12]
 80127ba:	1ad2      	subs	r2, r2, r3
 80127bc:	683b      	ldr	r3, [r7, #0]
 80127be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80127c0:	4b0c      	ldr	r3, [pc, #48]	@ (80127f4 <prvHeapInit+0xb4>)
 80127c2:	681a      	ldr	r2, [r3, #0]
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	685b      	ldr	r3, [r3, #4]
 80127cc:	4a0a      	ldr	r2, [pc, #40]	@ (80127f8 <prvHeapInit+0xb8>)
 80127ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	685b      	ldr	r3, [r3, #4]
 80127d4:	4a09      	ldr	r2, [pc, #36]	@ (80127fc <prvHeapInit+0xbc>)
 80127d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80127d8:	4b09      	ldr	r3, [pc, #36]	@ (8012800 <prvHeapInit+0xc0>)
 80127da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80127de:	601a      	str	r2, [r3, #0]
}
 80127e0:	bf00      	nop
 80127e2:	3714      	adds	r7, #20
 80127e4:	46bd      	mov	sp, r7
 80127e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ea:	4770      	bx	lr
 80127ec:	20006d44 	.word	0x20006d44
 80127f0:	20016d44 	.word	0x20016d44
 80127f4:	20016d4c 	.word	0x20016d4c
 80127f8:	20016d54 	.word	0x20016d54
 80127fc:	20016d50 	.word	0x20016d50
 8012800:	20016d60 	.word	0x20016d60

08012804 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012804:	b480      	push	{r7}
 8012806:	b085      	sub	sp, #20
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801280c:	4b28      	ldr	r3, [pc, #160]	@ (80128b0 <prvInsertBlockIntoFreeList+0xac>)
 801280e:	60fb      	str	r3, [r7, #12]
 8012810:	e002      	b.n	8012818 <prvInsertBlockIntoFreeList+0x14>
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	60fb      	str	r3, [r7, #12]
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	687a      	ldr	r2, [r7, #4]
 801281e:	429a      	cmp	r2, r3
 8012820:	d8f7      	bhi.n	8012812 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	685b      	ldr	r3, [r3, #4]
 801282a:	68ba      	ldr	r2, [r7, #8]
 801282c:	4413      	add	r3, r2
 801282e:	687a      	ldr	r2, [r7, #4]
 8012830:	429a      	cmp	r2, r3
 8012832:	d108      	bne.n	8012846 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	685a      	ldr	r2, [r3, #4]
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	685b      	ldr	r3, [r3, #4]
 801283c:	441a      	add	r2, r3
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	685b      	ldr	r3, [r3, #4]
 801284e:	68ba      	ldr	r2, [r7, #8]
 8012850:	441a      	add	r2, r3
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	429a      	cmp	r2, r3
 8012858:	d118      	bne.n	801288c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	681a      	ldr	r2, [r3, #0]
 801285e:	4b15      	ldr	r3, [pc, #84]	@ (80128b4 <prvInsertBlockIntoFreeList+0xb0>)
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	429a      	cmp	r2, r3
 8012864:	d00d      	beq.n	8012882 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	685a      	ldr	r2, [r3, #4]
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	685b      	ldr	r3, [r3, #4]
 8012870:	441a      	add	r2, r3
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	681a      	ldr	r2, [r3, #0]
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	601a      	str	r2, [r3, #0]
 8012880:	e008      	b.n	8012894 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012882:	4b0c      	ldr	r3, [pc, #48]	@ (80128b4 <prvInsertBlockIntoFreeList+0xb0>)
 8012884:	681a      	ldr	r2, [r3, #0]
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	601a      	str	r2, [r3, #0]
 801288a:	e003      	b.n	8012894 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	681a      	ldr	r2, [r3, #0]
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012894:	68fa      	ldr	r2, [r7, #12]
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	429a      	cmp	r2, r3
 801289a:	d002      	beq.n	80128a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	687a      	ldr	r2, [r7, #4]
 80128a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80128a2:	bf00      	nop
 80128a4:	3714      	adds	r7, #20
 80128a6:	46bd      	mov	sp, r7
 80128a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ac:	4770      	bx	lr
 80128ae:	bf00      	nop
 80128b0:	20016d44 	.word	0x20016d44
 80128b4:	20016d4c 	.word	0x20016d4c

080128b8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80128bc:	2200      	movs	r2, #0
 80128be:	4912      	ldr	r1, [pc, #72]	@ (8012908 <MX_USB_Device_Init+0x50>)
 80128c0:	4812      	ldr	r0, [pc, #72]	@ (801290c <MX_USB_Device_Init+0x54>)
 80128c2:	f7fb f863 	bl	800d98c <USBD_Init>
 80128c6:	4603      	mov	r3, r0
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d001      	beq.n	80128d0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80128cc:	f7f2 faea 	bl	8004ea4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80128d0:	490f      	ldr	r1, [pc, #60]	@ (8012910 <MX_USB_Device_Init+0x58>)
 80128d2:	480e      	ldr	r0, [pc, #56]	@ (801290c <MX_USB_Device_Init+0x54>)
 80128d4:	f7fb f88a 	bl	800d9ec <USBD_RegisterClass>
 80128d8:	4603      	mov	r3, r0
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d001      	beq.n	80128e2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80128de:	f7f2 fae1 	bl	8004ea4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80128e2:	490c      	ldr	r1, [pc, #48]	@ (8012914 <MX_USB_Device_Init+0x5c>)
 80128e4:	4809      	ldr	r0, [pc, #36]	@ (801290c <MX_USB_Device_Init+0x54>)
 80128e6:	f7fa ffab 	bl	800d840 <USBD_CDC_RegisterInterface>
 80128ea:	4603      	mov	r3, r0
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d001      	beq.n	80128f4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80128f0:	f7f2 fad8 	bl	8004ea4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80128f4:	4805      	ldr	r0, [pc, #20]	@ (801290c <MX_USB_Device_Init+0x54>)
 80128f6:	f7fb f8a0 	bl	800da3a <USBD_Start>
 80128fa:	4603      	mov	r3, r0
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d001      	beq.n	8012904 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8012900:	f7f2 fad0 	bl	8004ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8012904:	bf00      	nop
 8012906:	bd80      	pop	{r7, pc}
 8012908:	20000144 	.word	0x20000144
 801290c:	20016d64 	.word	0x20016d64
 8012910:	20000028 	.word	0x20000028
 8012914:	20000130 	.word	0x20000130

08012918 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801291c:	2200      	movs	r2, #0
 801291e:	4905      	ldr	r1, [pc, #20]	@ (8012934 <CDC_Init_FS+0x1c>)
 8012920:	4805      	ldr	r0, [pc, #20]	@ (8012938 <CDC_Init_FS+0x20>)
 8012922:	f7fa ffa2 	bl	800d86a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012926:	4905      	ldr	r1, [pc, #20]	@ (801293c <CDC_Init_FS+0x24>)
 8012928:	4803      	ldr	r0, [pc, #12]	@ (8012938 <CDC_Init_FS+0x20>)
 801292a:	f7fa ffbc 	bl	800d8a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801292e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012930:	4618      	mov	r0, r3
 8012932:	bd80      	pop	{r7, pc}
 8012934:	20017834 	.word	0x20017834
 8012938:	20016d64 	.word	0x20016d64
 801293c:	20017034 	.word	0x20017034

08012940 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012940:	b480      	push	{r7}
 8012942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012944:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012946:	4618      	mov	r0, r3
 8012948:	46bd      	mov	sp, r7
 801294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294e:	4770      	bx	lr

08012950 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012950:	b480      	push	{r7}
 8012952:	b083      	sub	sp, #12
 8012954:	af00      	add	r7, sp, #0
 8012956:	4603      	mov	r3, r0
 8012958:	6039      	str	r1, [r7, #0]
 801295a:	71fb      	strb	r3, [r7, #7]
 801295c:	4613      	mov	r3, r2
 801295e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012960:	79fb      	ldrb	r3, [r7, #7]
 8012962:	2b23      	cmp	r3, #35	@ 0x23
 8012964:	d84a      	bhi.n	80129fc <CDC_Control_FS+0xac>
 8012966:	a201      	add	r2, pc, #4	@ (adr r2, 801296c <CDC_Control_FS+0x1c>)
 8012968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801296c:	080129fd 	.word	0x080129fd
 8012970:	080129fd 	.word	0x080129fd
 8012974:	080129fd 	.word	0x080129fd
 8012978:	080129fd 	.word	0x080129fd
 801297c:	080129fd 	.word	0x080129fd
 8012980:	080129fd 	.word	0x080129fd
 8012984:	080129fd 	.word	0x080129fd
 8012988:	080129fd 	.word	0x080129fd
 801298c:	080129fd 	.word	0x080129fd
 8012990:	080129fd 	.word	0x080129fd
 8012994:	080129fd 	.word	0x080129fd
 8012998:	080129fd 	.word	0x080129fd
 801299c:	080129fd 	.word	0x080129fd
 80129a0:	080129fd 	.word	0x080129fd
 80129a4:	080129fd 	.word	0x080129fd
 80129a8:	080129fd 	.word	0x080129fd
 80129ac:	080129fd 	.word	0x080129fd
 80129b0:	080129fd 	.word	0x080129fd
 80129b4:	080129fd 	.word	0x080129fd
 80129b8:	080129fd 	.word	0x080129fd
 80129bc:	080129fd 	.word	0x080129fd
 80129c0:	080129fd 	.word	0x080129fd
 80129c4:	080129fd 	.word	0x080129fd
 80129c8:	080129fd 	.word	0x080129fd
 80129cc:	080129fd 	.word	0x080129fd
 80129d0:	080129fd 	.word	0x080129fd
 80129d4:	080129fd 	.word	0x080129fd
 80129d8:	080129fd 	.word	0x080129fd
 80129dc:	080129fd 	.word	0x080129fd
 80129e0:	080129fd 	.word	0x080129fd
 80129e4:	080129fd 	.word	0x080129fd
 80129e8:	080129fd 	.word	0x080129fd
 80129ec:	080129fd 	.word	0x080129fd
 80129f0:	080129fd 	.word	0x080129fd
 80129f4:	080129fd 	.word	0x080129fd
 80129f8:	080129fd 	.word	0x080129fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80129fc:	bf00      	nop
  }

  return (USBD_OK);
 80129fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	370c      	adds	r7, #12
 8012a04:	46bd      	mov	sp, r7
 8012a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0a:	4770      	bx	lr

08012a0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b082      	sub	sp, #8
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
 8012a14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012a16:	6879      	ldr	r1, [r7, #4]
 8012a18:	4805      	ldr	r0, [pc, #20]	@ (8012a30 <CDC_Receive_FS+0x24>)
 8012a1a:	f7fa ff44 	bl	800d8a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012a1e:	4804      	ldr	r0, [pc, #16]	@ (8012a30 <CDC_Receive_FS+0x24>)
 8012a20:	f7fa ff8a 	bl	800d938 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012a24:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012a26:	4618      	mov	r0, r3
 8012a28:	3708      	adds	r7, #8
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}
 8012a2e:	bf00      	nop
 8012a30:	20016d64 	.word	0x20016d64

08012a34 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b084      	sub	sp, #16
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
 8012a3c:	460b      	mov	r3, r1
 8012a3e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012a40:	2300      	movs	r3, #0
 8012a42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012a44:	4b0d      	ldr	r3, [pc, #52]	@ (8012a7c <CDC_Transmit_FS+0x48>)
 8012a46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012a4a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012a4c:	68bb      	ldr	r3, [r7, #8]
 8012a4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d001      	beq.n	8012a5a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012a56:	2301      	movs	r3, #1
 8012a58:	e00b      	b.n	8012a72 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012a5a:	887b      	ldrh	r3, [r7, #2]
 8012a5c:	461a      	mov	r2, r3
 8012a5e:	6879      	ldr	r1, [r7, #4]
 8012a60:	4806      	ldr	r0, [pc, #24]	@ (8012a7c <CDC_Transmit_FS+0x48>)
 8012a62:	f7fa ff02 	bl	800d86a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012a66:	4805      	ldr	r0, [pc, #20]	@ (8012a7c <CDC_Transmit_FS+0x48>)
 8012a68:	f7fa ff36 	bl	800d8d8 <USBD_CDC_TransmitPacket>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a72:	4618      	mov	r0, r3
 8012a74:	3710      	adds	r7, #16
 8012a76:	46bd      	mov	sp, r7
 8012a78:	bd80      	pop	{r7, pc}
 8012a7a:	bf00      	nop
 8012a7c:	20016d64 	.word	0x20016d64

08012a80 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012a80:	b480      	push	{r7}
 8012a82:	b087      	sub	sp, #28
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	60f8      	str	r0, [r7, #12]
 8012a88:	60b9      	str	r1, [r7, #8]
 8012a8a:	4613      	mov	r3, r2
 8012a8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012a8e:	2300      	movs	r3, #0
 8012a90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012a92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012a96:	4618      	mov	r0, r3
 8012a98:	371c      	adds	r7, #28
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa0:	4770      	bx	lr
	...

08012aa4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012aa4:	b480      	push	{r7}
 8012aa6:	b083      	sub	sp, #12
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	4603      	mov	r3, r0
 8012aac:	6039      	str	r1, [r7, #0]
 8012aae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8012ab0:	683b      	ldr	r3, [r7, #0]
 8012ab2:	2212      	movs	r2, #18
 8012ab4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8012ab6:	4b03      	ldr	r3, [pc, #12]	@ (8012ac4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8012ab8:	4618      	mov	r0, r3
 8012aba:	370c      	adds	r7, #12
 8012abc:	46bd      	mov	sp, r7
 8012abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac2:	4770      	bx	lr
 8012ac4:	20000164 	.word	0x20000164

08012ac8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ac8:	b480      	push	{r7}
 8012aca:	b083      	sub	sp, #12
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	4603      	mov	r3, r0
 8012ad0:	6039      	str	r1, [r7, #0]
 8012ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012ad4:	683b      	ldr	r3, [r7, #0]
 8012ad6:	2204      	movs	r2, #4
 8012ad8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012ada:	4b03      	ldr	r3, [pc, #12]	@ (8012ae8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8012adc:	4618      	mov	r0, r3
 8012ade:	370c      	adds	r7, #12
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae6:	4770      	bx	lr
 8012ae8:	20000178 	.word	0x20000178

08012aec <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b082      	sub	sp, #8
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	4603      	mov	r3, r0
 8012af4:	6039      	str	r1, [r7, #0]
 8012af6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012af8:	79fb      	ldrb	r3, [r7, #7]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d105      	bne.n	8012b0a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012afe:	683a      	ldr	r2, [r7, #0]
 8012b00:	4907      	ldr	r1, [pc, #28]	@ (8012b20 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012b02:	4808      	ldr	r0, [pc, #32]	@ (8012b24 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012b04:	f7fb ff81 	bl	800ea0a <USBD_GetString>
 8012b08:	e004      	b.n	8012b14 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012b0a:	683a      	ldr	r2, [r7, #0]
 8012b0c:	4904      	ldr	r1, [pc, #16]	@ (8012b20 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012b0e:	4805      	ldr	r0, [pc, #20]	@ (8012b24 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012b10:	f7fb ff7b 	bl	800ea0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8012b14:	4b02      	ldr	r3, [pc, #8]	@ (8012b20 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8012b16:	4618      	mov	r0, r3
 8012b18:	3708      	adds	r7, #8
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bd80      	pop	{r7, pc}
 8012b1e:	bf00      	nop
 8012b20:	20018034 	.word	0x20018034
 8012b24:	080225a4 	.word	0x080225a4

08012b28 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b082      	sub	sp, #8
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	4603      	mov	r3, r0
 8012b30:	6039      	str	r1, [r7, #0]
 8012b32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012b34:	683a      	ldr	r2, [r7, #0]
 8012b36:	4904      	ldr	r1, [pc, #16]	@ (8012b48 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8012b38:	4804      	ldr	r0, [pc, #16]	@ (8012b4c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8012b3a:	f7fb ff66 	bl	800ea0a <USBD_GetString>
  return USBD_StrDesc;
 8012b3e:	4b02      	ldr	r3, [pc, #8]	@ (8012b48 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8012b40:	4618      	mov	r0, r3
 8012b42:	3708      	adds	r7, #8
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}
 8012b48:	20018034 	.word	0x20018034
 8012b4c:	080225c0 	.word	0x080225c0

08012b50 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	4603      	mov	r3, r0
 8012b58:	6039      	str	r1, [r7, #0]
 8012b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	221a      	movs	r2, #26
 8012b60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012b62:	f000 f843 	bl	8012bec <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012b66:	4b02      	ldr	r3, [pc, #8]	@ (8012b70 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3708      	adds	r7, #8
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}
 8012b70:	2000017c 	.word	0x2000017c

08012b74 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b082      	sub	sp, #8
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	6039      	str	r1, [r7, #0]
 8012b7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012b80:	79fb      	ldrb	r3, [r7, #7]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d105      	bne.n	8012b92 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012b86:	683a      	ldr	r2, [r7, #0]
 8012b88:	4907      	ldr	r1, [pc, #28]	@ (8012ba8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012b8a:	4808      	ldr	r0, [pc, #32]	@ (8012bac <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012b8c:	f7fb ff3d 	bl	800ea0a <USBD_GetString>
 8012b90:	e004      	b.n	8012b9c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012b92:	683a      	ldr	r2, [r7, #0]
 8012b94:	4904      	ldr	r1, [pc, #16]	@ (8012ba8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012b96:	4805      	ldr	r0, [pc, #20]	@ (8012bac <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012b98:	f7fb ff37 	bl	800ea0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8012b9c:	4b02      	ldr	r3, [pc, #8]	@ (8012ba8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	3708      	adds	r7, #8
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}
 8012ba6:	bf00      	nop
 8012ba8:	20018034 	.word	0x20018034
 8012bac:	080225d4 	.word	0x080225d4

08012bb0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b082      	sub	sp, #8
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	6039      	str	r1, [r7, #0]
 8012bba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012bbc:	79fb      	ldrb	r3, [r7, #7]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d105      	bne.n	8012bce <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012bc2:	683a      	ldr	r2, [r7, #0]
 8012bc4:	4907      	ldr	r1, [pc, #28]	@ (8012be4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012bc6:	4808      	ldr	r0, [pc, #32]	@ (8012be8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012bc8:	f7fb ff1f 	bl	800ea0a <USBD_GetString>
 8012bcc:	e004      	b.n	8012bd8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012bce:	683a      	ldr	r2, [r7, #0]
 8012bd0:	4904      	ldr	r1, [pc, #16]	@ (8012be4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012bd2:	4805      	ldr	r0, [pc, #20]	@ (8012be8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012bd4:	f7fb ff19 	bl	800ea0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8012bd8:	4b02      	ldr	r3, [pc, #8]	@ (8012be4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8012bda:	4618      	mov	r0, r3
 8012bdc:	3708      	adds	r7, #8
 8012bde:	46bd      	mov	sp, r7
 8012be0:	bd80      	pop	{r7, pc}
 8012be2:	bf00      	nop
 8012be4:	20018034 	.word	0x20018034
 8012be8:	080225e0 	.word	0x080225e0

08012bec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b084      	sub	sp, #16
 8012bf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8012c30 <Get_SerialNum+0x44>)
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8012c34 <Get_SerialNum+0x48>)
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8012c38 <Get_SerialNum+0x4c>)
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012c04:	68fa      	ldr	r2, [r7, #12]
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	4413      	add	r3, r2
 8012c0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d009      	beq.n	8012c26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012c12:	2208      	movs	r2, #8
 8012c14:	4909      	ldr	r1, [pc, #36]	@ (8012c3c <Get_SerialNum+0x50>)
 8012c16:	68f8      	ldr	r0, [r7, #12]
 8012c18:	f000 f814 	bl	8012c44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012c1c:	2204      	movs	r2, #4
 8012c1e:	4908      	ldr	r1, [pc, #32]	@ (8012c40 <Get_SerialNum+0x54>)
 8012c20:	68b8      	ldr	r0, [r7, #8]
 8012c22:	f000 f80f 	bl	8012c44 <IntToUnicode>
  }
}
 8012c26:	bf00      	nop
 8012c28:	3710      	adds	r7, #16
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	bd80      	pop	{r7, pc}
 8012c2e:	bf00      	nop
 8012c30:	1fff7590 	.word	0x1fff7590
 8012c34:	1fff7594 	.word	0x1fff7594
 8012c38:	1fff7598 	.word	0x1fff7598
 8012c3c:	2000017e 	.word	0x2000017e
 8012c40:	2000018e 	.word	0x2000018e

08012c44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012c44:	b480      	push	{r7}
 8012c46:	b087      	sub	sp, #28
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	60f8      	str	r0, [r7, #12]
 8012c4c:	60b9      	str	r1, [r7, #8]
 8012c4e:	4613      	mov	r3, r2
 8012c50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012c52:	2300      	movs	r3, #0
 8012c54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012c56:	2300      	movs	r3, #0
 8012c58:	75fb      	strb	r3, [r7, #23]
 8012c5a:	e027      	b.n	8012cac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	0f1b      	lsrs	r3, r3, #28
 8012c60:	2b09      	cmp	r3, #9
 8012c62:	d80b      	bhi.n	8012c7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	0f1b      	lsrs	r3, r3, #28
 8012c68:	b2da      	uxtb	r2, r3
 8012c6a:	7dfb      	ldrb	r3, [r7, #23]
 8012c6c:	005b      	lsls	r3, r3, #1
 8012c6e:	4619      	mov	r1, r3
 8012c70:	68bb      	ldr	r3, [r7, #8]
 8012c72:	440b      	add	r3, r1
 8012c74:	3230      	adds	r2, #48	@ 0x30
 8012c76:	b2d2      	uxtb	r2, r2
 8012c78:	701a      	strb	r2, [r3, #0]
 8012c7a:	e00a      	b.n	8012c92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	0f1b      	lsrs	r3, r3, #28
 8012c80:	b2da      	uxtb	r2, r3
 8012c82:	7dfb      	ldrb	r3, [r7, #23]
 8012c84:	005b      	lsls	r3, r3, #1
 8012c86:	4619      	mov	r1, r3
 8012c88:	68bb      	ldr	r3, [r7, #8]
 8012c8a:	440b      	add	r3, r1
 8012c8c:	3237      	adds	r2, #55	@ 0x37
 8012c8e:	b2d2      	uxtb	r2, r2
 8012c90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	011b      	lsls	r3, r3, #4
 8012c96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012c98:	7dfb      	ldrb	r3, [r7, #23]
 8012c9a:	005b      	lsls	r3, r3, #1
 8012c9c:	3301      	adds	r3, #1
 8012c9e:	68ba      	ldr	r2, [r7, #8]
 8012ca0:	4413      	add	r3, r2
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012ca6:	7dfb      	ldrb	r3, [r7, #23]
 8012ca8:	3301      	adds	r3, #1
 8012caa:	75fb      	strb	r3, [r7, #23]
 8012cac:	7dfa      	ldrb	r2, [r7, #23]
 8012cae:	79fb      	ldrb	r3, [r7, #7]
 8012cb0:	429a      	cmp	r2, r3
 8012cb2:	d3d3      	bcc.n	8012c5c <IntToUnicode+0x18>
  }
}
 8012cb4:	bf00      	nop
 8012cb6:	bf00      	nop
 8012cb8:	371c      	adds	r7, #28
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc0:	4770      	bx	lr
	...

08012cc4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b098      	sub	sp, #96	@ 0x60
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012ccc:	f107 030c 	add.w	r3, r7, #12
 8012cd0:	2254      	movs	r2, #84	@ 0x54
 8012cd2:	2100      	movs	r1, #0
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f00d f85e 	bl	801fd96 <memset>
  if(pcdHandle->Instance==USB)
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	4a15      	ldr	r2, [pc, #84]	@ (8012d34 <HAL_PCD_MspInit+0x70>)
 8012ce0:	4293      	cmp	r3, r2
 8012ce2:	d122      	bne.n	8012d2a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012ce4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012ce8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012cea:	2300      	movs	r3, #0
 8012cec:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012cee:	f107 030c 	add.w	r3, r7, #12
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f7f6 faee 	bl	80092d4 <HAL_RCCEx_PeriphCLKConfig>
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d001      	beq.n	8012d02 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8012cfe:	f7f2 f8d1 	bl	8004ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012d02:	4b0d      	ldr	r3, [pc, #52]	@ (8012d38 <HAL_PCD_MspInit+0x74>)
 8012d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d06:	4a0c      	ldr	r2, [pc, #48]	@ (8012d38 <HAL_PCD_MspInit+0x74>)
 8012d08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8012d0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8012d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8012d38 <HAL_PCD_MspInit+0x74>)
 8012d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012d16:	60bb      	str	r3, [r7, #8]
 8012d18:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	2105      	movs	r1, #5
 8012d1e:	2014      	movs	r0, #20
 8012d20:	f7f2 fd12 	bl	8005748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8012d24:	2014      	movs	r0, #20
 8012d26:	f7f2 fd29 	bl	800577c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8012d2a:	bf00      	nop
 8012d2c:	3760      	adds	r7, #96	@ 0x60
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	bd80      	pop	{r7, pc}
 8012d32:	bf00      	nop
 8012d34:	40005c00 	.word	0x40005c00
 8012d38:	40021000 	.word	0x40021000

08012d3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b082      	sub	sp, #8
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8012d50:	4619      	mov	r1, r3
 8012d52:	4610      	mov	r0, r2
 8012d54:	f7fa febc 	bl	800dad0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8012d58:	bf00      	nop
 8012d5a:	3708      	adds	r7, #8
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}

08012d60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b082      	sub	sp, #8
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	460b      	mov	r3, r1
 8012d6a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8012d72:	78fa      	ldrb	r2, [r7, #3]
 8012d74:	6879      	ldr	r1, [r7, #4]
 8012d76:	4613      	mov	r3, r2
 8012d78:	009b      	lsls	r3, r3, #2
 8012d7a:	4413      	add	r3, r2
 8012d7c:	00db      	lsls	r3, r3, #3
 8012d7e:	440b      	add	r3, r1
 8012d80:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012d84:	681a      	ldr	r2, [r3, #0]
 8012d86:	78fb      	ldrb	r3, [r7, #3]
 8012d88:	4619      	mov	r1, r3
 8012d8a:	f7fa fef6 	bl	800db7a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8012d8e:	bf00      	nop
 8012d90:	3708      	adds	r7, #8
 8012d92:	46bd      	mov	sp, r7
 8012d94:	bd80      	pop	{r7, pc}

08012d96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d96:	b580      	push	{r7, lr}
 8012d98:	b082      	sub	sp, #8
 8012d9a:	af00      	add	r7, sp, #0
 8012d9c:	6078      	str	r0, [r7, #4]
 8012d9e:	460b      	mov	r3, r1
 8012da0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8012da8:	78fa      	ldrb	r2, [r7, #3]
 8012daa:	6879      	ldr	r1, [r7, #4]
 8012dac:	4613      	mov	r3, r2
 8012dae:	009b      	lsls	r3, r3, #2
 8012db0:	4413      	add	r3, r2
 8012db2:	00db      	lsls	r3, r3, #3
 8012db4:	440b      	add	r3, r1
 8012db6:	3324      	adds	r3, #36	@ 0x24
 8012db8:	681a      	ldr	r2, [r3, #0]
 8012dba:	78fb      	ldrb	r3, [r7, #3]
 8012dbc:	4619      	mov	r1, r3
 8012dbe:	f7fa ff3f 	bl	800dc40 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8012dc2:	bf00      	nop
 8012dc4:	3708      	adds	r7, #8
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	bd80      	pop	{r7, pc}

08012dca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012dca:	b580      	push	{r7, lr}
 8012dcc:	b082      	sub	sp, #8
 8012dce:	af00      	add	r7, sp, #0
 8012dd0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f7fb f853 	bl	800de84 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8012dde:	bf00      	nop
 8012de0:	3708      	adds	r7, #8
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bd80      	pop	{r7, pc}

08012de6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012de6:	b580      	push	{r7, lr}
 8012de8:	b084      	sub	sp, #16
 8012dea:	af00      	add	r7, sp, #0
 8012dec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012dee:	2301      	movs	r3, #1
 8012df0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	795b      	ldrb	r3, [r3, #5]
 8012df6:	2b02      	cmp	r3, #2
 8012df8:	d001      	beq.n	8012dfe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012dfa:	f7f2 f853 	bl	8004ea4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012e04:	7bfa      	ldrb	r2, [r7, #15]
 8012e06:	4611      	mov	r1, r2
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f7fa fffd 	bl	800de08 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012e14:	4618      	mov	r0, r3
 8012e16:	f7fa ffa9 	bl	800dd6c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8012e1a:	bf00      	nop
 8012e1c:	3710      	adds	r7, #16
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}
	...

08012e24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b082      	sub	sp, #8
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012e32:	4618      	mov	r0, r3
 8012e34:	f7fa fff8 	bl	800de28 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	7a5b      	ldrb	r3, [r3, #9]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d005      	beq.n	8012e4c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012e40:	4b04      	ldr	r3, [pc, #16]	@ (8012e54 <HAL_PCD_SuspendCallback+0x30>)
 8012e42:	691b      	ldr	r3, [r3, #16]
 8012e44:	4a03      	ldr	r2, [pc, #12]	@ (8012e54 <HAL_PCD_SuspendCallback+0x30>)
 8012e46:	f043 0306 	orr.w	r3, r3, #6
 8012e4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8012e4c:	bf00      	nop
 8012e4e:	3708      	adds	r7, #8
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}
 8012e54:	e000ed00 	.word	0xe000ed00

08012e58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b082      	sub	sp, #8
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	7a5b      	ldrb	r3, [r3, #9]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d007      	beq.n	8012e78 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012e68:	4b08      	ldr	r3, [pc, #32]	@ (8012e8c <HAL_PCD_ResumeCallback+0x34>)
 8012e6a:	691b      	ldr	r3, [r3, #16]
 8012e6c:	4a07      	ldr	r2, [pc, #28]	@ (8012e8c <HAL_PCD_ResumeCallback+0x34>)
 8012e6e:	f023 0306 	bic.w	r3, r3, #6
 8012e72:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8012e74:	f000 f9f8 	bl	8013268 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f7fa ffe8 	bl	800de54 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8012e84:	bf00      	nop
 8012e86:	3708      	adds	r7, #8
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd80      	pop	{r7, pc}
 8012e8c:	e000ed00 	.word	0xe000ed00

08012e90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b082      	sub	sp, #8
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8012e98:	4a2b      	ldr	r2, [pc, #172]	@ (8012f48 <USBD_LL_Init+0xb8>)
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	4a29      	ldr	r2, [pc, #164]	@ (8012f48 <USBD_LL_Init+0xb8>)
 8012ea4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8012ea8:	4b27      	ldr	r3, [pc, #156]	@ (8012f48 <USBD_LL_Init+0xb8>)
 8012eaa:	4a28      	ldr	r2, [pc, #160]	@ (8012f4c <USBD_LL_Init+0xbc>)
 8012eac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8012eae:	4b26      	ldr	r3, [pc, #152]	@ (8012f48 <USBD_LL_Init+0xb8>)
 8012eb0:	2208      	movs	r2, #8
 8012eb2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8012eb4:	4b24      	ldr	r3, [pc, #144]	@ (8012f48 <USBD_LL_Init+0xb8>)
 8012eb6:	2202      	movs	r2, #2
 8012eb8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012eba:	4b23      	ldr	r3, [pc, #140]	@ (8012f48 <USBD_LL_Init+0xb8>)
 8012ebc:	2202      	movs	r2, #2
 8012ebe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8012ec0:	4b21      	ldr	r3, [pc, #132]	@ (8012f48 <USBD_LL_Init+0xb8>)
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8012ec6:	4b20      	ldr	r3, [pc, #128]	@ (8012f48 <USBD_LL_Init+0xb8>)
 8012ec8:	2200      	movs	r2, #0
 8012eca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8012ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8012f48 <USBD_LL_Init+0xb8>)
 8012ece:	2200      	movs	r2, #0
 8012ed0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8012ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8012f48 <USBD_LL_Init+0xb8>)
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012ed8:	481b      	ldr	r0, [pc, #108]	@ (8012f48 <USBD_LL_Init+0xb8>)
 8012eda:	f7f3 feea 	bl	8006cb2 <HAL_PCD_Init>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d001      	beq.n	8012ee8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8012ee4:	f7f1 ffde 	bl	8004ea4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012eee:	2318      	movs	r3, #24
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	2100      	movs	r1, #0
 8012ef4:	f7f5 fb71 	bl	80085da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012efe:	2358      	movs	r3, #88	@ 0x58
 8012f00:	2200      	movs	r2, #0
 8012f02:	2180      	movs	r1, #128	@ 0x80
 8012f04:	f7f5 fb69 	bl	80085da <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012f0e:	23c0      	movs	r3, #192	@ 0xc0
 8012f10:	2200      	movs	r2, #0
 8012f12:	2181      	movs	r1, #129	@ 0x81
 8012f14:	f7f5 fb61 	bl	80085da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012f1e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8012f22:	2200      	movs	r2, #0
 8012f24:	2101      	movs	r1, #1
 8012f26:	f7f5 fb58 	bl	80085da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012f30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012f34:	2200      	movs	r2, #0
 8012f36:	2182      	movs	r1, #130	@ 0x82
 8012f38:	f7f5 fb4f 	bl	80085da <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8012f3c:	2300      	movs	r3, #0
}
 8012f3e:	4618      	mov	r0, r3
 8012f40:	3708      	adds	r7, #8
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	bf00      	nop
 8012f48:	20018234 	.word	0x20018234
 8012f4c:	40005c00 	.word	0x40005c00

08012f50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b084      	sub	sp, #16
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f58:	2300      	movs	r3, #0
 8012f5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012f66:	4618      	mov	r0, r3
 8012f68:	f7f3 ff71 	bl	8006e4e <HAL_PCD_Start>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012f70:	7bfb      	ldrb	r3, [r7, #15]
 8012f72:	4618      	mov	r0, r3
 8012f74:	f000 f97e 	bl	8013274 <USBD_Get_USB_Status>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012f7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	3710      	adds	r7, #16
 8012f82:	46bd      	mov	sp, r7
 8012f84:	bd80      	pop	{r7, pc}

08012f86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012f86:	b580      	push	{r7, lr}
 8012f88:	b084      	sub	sp, #16
 8012f8a:	af00      	add	r7, sp, #0
 8012f8c:	6078      	str	r0, [r7, #4]
 8012f8e:	4608      	mov	r0, r1
 8012f90:	4611      	mov	r1, r2
 8012f92:	461a      	mov	r2, r3
 8012f94:	4603      	mov	r3, r0
 8012f96:	70fb      	strb	r3, [r7, #3]
 8012f98:	460b      	mov	r3, r1
 8012f9a:	70bb      	strb	r3, [r7, #2]
 8012f9c:	4613      	mov	r3, r2
 8012f9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012fae:	78bb      	ldrb	r3, [r7, #2]
 8012fb0:	883a      	ldrh	r2, [r7, #0]
 8012fb2:	78f9      	ldrb	r1, [r7, #3]
 8012fb4:	f7f4 f8b8 	bl	8007128 <HAL_PCD_EP_Open>
 8012fb8:	4603      	mov	r3, r0
 8012fba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012fbc:	7bfb      	ldrb	r3, [r7, #15]
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	f000 f958 	bl	8013274 <USBD_Get_USB_Status>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012fc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8012fca:	4618      	mov	r0, r3
 8012fcc:	3710      	adds	r7, #16
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bd80      	pop	{r7, pc}

08012fd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012fd2:	b580      	push	{r7, lr}
 8012fd4:	b084      	sub	sp, #16
 8012fd6:	af00      	add	r7, sp, #0
 8012fd8:	6078      	str	r0, [r7, #4]
 8012fda:	460b      	mov	r3, r1
 8012fdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012fec:	78fa      	ldrb	r2, [r7, #3]
 8012fee:	4611      	mov	r1, r2
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f7f4 f8f8 	bl	80071e6 <HAL_PCD_EP_Close>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ffa:	7bfb      	ldrb	r3, [r7, #15]
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f000 f939 	bl	8013274 <USBD_Get_USB_Status>
 8013002:	4603      	mov	r3, r0
 8013004:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013006:	7bbb      	ldrb	r3, [r7, #14]
}
 8013008:	4618      	mov	r0, r3
 801300a:	3710      	adds	r7, #16
 801300c:	46bd      	mov	sp, r7
 801300e:	bd80      	pop	{r7, pc}

08013010 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b084      	sub	sp, #16
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
 8013018:	460b      	mov	r3, r1
 801301a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801301c:	2300      	movs	r3, #0
 801301e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013020:	2300      	movs	r3, #0
 8013022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801302a:	78fa      	ldrb	r2, [r7, #3]
 801302c:	4611      	mov	r1, r2
 801302e:	4618      	mov	r0, r3
 8013030:	f7f4 f9a1 	bl	8007376 <HAL_PCD_EP_SetStall>
 8013034:	4603      	mov	r3, r0
 8013036:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013038:	7bfb      	ldrb	r3, [r7, #15]
 801303a:	4618      	mov	r0, r3
 801303c:	f000 f91a 	bl	8013274 <USBD_Get_USB_Status>
 8013040:	4603      	mov	r3, r0
 8013042:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013044:	7bbb      	ldrb	r3, [r7, #14]
}
 8013046:	4618      	mov	r0, r3
 8013048:	3710      	adds	r7, #16
 801304a:	46bd      	mov	sp, r7
 801304c:	bd80      	pop	{r7, pc}

0801304e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801304e:	b580      	push	{r7, lr}
 8013050:	b084      	sub	sp, #16
 8013052:	af00      	add	r7, sp, #0
 8013054:	6078      	str	r0, [r7, #4]
 8013056:	460b      	mov	r3, r1
 8013058:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801305a:	2300      	movs	r3, #0
 801305c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801305e:	2300      	movs	r3, #0
 8013060:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8013068:	78fa      	ldrb	r2, [r7, #3]
 801306a:	4611      	mov	r1, r2
 801306c:	4618      	mov	r0, r3
 801306e:	f7f4 f9d4 	bl	800741a <HAL_PCD_EP_ClrStall>
 8013072:	4603      	mov	r3, r0
 8013074:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013076:	7bfb      	ldrb	r3, [r7, #15]
 8013078:	4618      	mov	r0, r3
 801307a:	f000 f8fb 	bl	8013274 <USBD_Get_USB_Status>
 801307e:	4603      	mov	r3, r0
 8013080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013082:	7bbb      	ldrb	r3, [r7, #14]
}
 8013084:	4618      	mov	r0, r3
 8013086:	3710      	adds	r7, #16
 8013088:	46bd      	mov	sp, r7
 801308a:	bd80      	pop	{r7, pc}

0801308c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801308c:	b480      	push	{r7}
 801308e:	b085      	sub	sp, #20
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
 8013094:	460b      	mov	r3, r1
 8013096:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801309e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80130a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	da0b      	bge.n	80130c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80130a8:	78fb      	ldrb	r3, [r7, #3]
 80130aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80130ae:	68f9      	ldr	r1, [r7, #12]
 80130b0:	4613      	mov	r3, r2
 80130b2:	009b      	lsls	r3, r3, #2
 80130b4:	4413      	add	r3, r2
 80130b6:	00db      	lsls	r3, r3, #3
 80130b8:	440b      	add	r3, r1
 80130ba:	3312      	adds	r3, #18
 80130bc:	781b      	ldrb	r3, [r3, #0]
 80130be:	e00b      	b.n	80130d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80130c0:	78fb      	ldrb	r3, [r7, #3]
 80130c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80130c6:	68f9      	ldr	r1, [r7, #12]
 80130c8:	4613      	mov	r3, r2
 80130ca:	009b      	lsls	r3, r3, #2
 80130cc:	4413      	add	r3, r2
 80130ce:	00db      	lsls	r3, r3, #3
 80130d0:	440b      	add	r3, r1
 80130d2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80130d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80130d8:	4618      	mov	r0, r3
 80130da:	3714      	adds	r7, #20
 80130dc:	46bd      	mov	sp, r7
 80130de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e2:	4770      	bx	lr

080130e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b084      	sub	sp, #16
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
 80130ec:	460b      	mov	r3, r1
 80130ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80130f0:	2300      	movs	r3, #0
 80130f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80130f4:	2300      	movs	r3, #0
 80130f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80130fe:	78fa      	ldrb	r2, [r7, #3]
 8013100:	4611      	mov	r1, r2
 8013102:	4618      	mov	r0, r3
 8013104:	f7f3 ffec 	bl	80070e0 <HAL_PCD_SetAddress>
 8013108:	4603      	mov	r3, r0
 801310a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801310c:	7bfb      	ldrb	r3, [r7, #15]
 801310e:	4618      	mov	r0, r3
 8013110:	f000 f8b0 	bl	8013274 <USBD_Get_USB_Status>
 8013114:	4603      	mov	r3, r0
 8013116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013118:	7bbb      	ldrb	r3, [r7, #14]
}
 801311a:	4618      	mov	r0, r3
 801311c:	3710      	adds	r7, #16
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}

08013122 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013122:	b580      	push	{r7, lr}
 8013124:	b086      	sub	sp, #24
 8013126:	af00      	add	r7, sp, #0
 8013128:	60f8      	str	r0, [r7, #12]
 801312a:	607a      	str	r2, [r7, #4]
 801312c:	603b      	str	r3, [r7, #0]
 801312e:	460b      	mov	r3, r1
 8013130:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013132:	2300      	movs	r3, #0
 8013134:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013136:	2300      	movs	r3, #0
 8013138:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8013140:	7af9      	ldrb	r1, [r7, #11]
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	687a      	ldr	r2, [r7, #4]
 8013146:	f7f4 f8df 	bl	8007308 <HAL_PCD_EP_Transmit>
 801314a:	4603      	mov	r3, r0
 801314c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801314e:	7dfb      	ldrb	r3, [r7, #23]
 8013150:	4618      	mov	r0, r3
 8013152:	f000 f88f 	bl	8013274 <USBD_Get_USB_Status>
 8013156:	4603      	mov	r3, r0
 8013158:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801315a:	7dbb      	ldrb	r3, [r7, #22]
}
 801315c:	4618      	mov	r0, r3
 801315e:	3718      	adds	r7, #24
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}

08013164 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b086      	sub	sp, #24
 8013168:	af00      	add	r7, sp, #0
 801316a:	60f8      	str	r0, [r7, #12]
 801316c:	607a      	str	r2, [r7, #4]
 801316e:	603b      	str	r3, [r7, #0]
 8013170:	460b      	mov	r3, r1
 8013172:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013174:	2300      	movs	r3, #0
 8013176:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013178:	2300      	movs	r3, #0
 801317a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8013182:	7af9      	ldrb	r1, [r7, #11]
 8013184:	683b      	ldr	r3, [r7, #0]
 8013186:	687a      	ldr	r2, [r7, #4]
 8013188:	f7f4 f875 	bl	8007276 <HAL_PCD_EP_Receive>
 801318c:	4603      	mov	r3, r0
 801318e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013190:	7dfb      	ldrb	r3, [r7, #23]
 8013192:	4618      	mov	r0, r3
 8013194:	f000 f86e 	bl	8013274 <USBD_Get_USB_Status>
 8013198:	4603      	mov	r3, r0
 801319a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801319c:	7dbb      	ldrb	r3, [r7, #22]
}
 801319e:	4618      	mov	r0, r3
 80131a0:	3718      	adds	r7, #24
 80131a2:	46bd      	mov	sp, r7
 80131a4:	bd80      	pop	{r7, pc}

080131a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80131a6:	b580      	push	{r7, lr}
 80131a8:	b082      	sub	sp, #8
 80131aa:	af00      	add	r7, sp, #0
 80131ac:	6078      	str	r0, [r7, #4]
 80131ae:	460b      	mov	r3, r1
 80131b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80131b8:	78fa      	ldrb	r2, [r7, #3]
 80131ba:	4611      	mov	r1, r2
 80131bc:	4618      	mov	r0, r3
 80131be:	f7f4 f88b 	bl	80072d8 <HAL_PCD_EP_GetRxCount>
 80131c2:	4603      	mov	r3, r0
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	3708      	adds	r7, #8
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}

080131cc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b082      	sub	sp, #8
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
 80131d4:	460b      	mov	r3, r1
 80131d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80131d8:	78fb      	ldrb	r3, [r7, #3]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d002      	beq.n	80131e4 <HAL_PCDEx_LPM_Callback+0x18>
 80131de:	2b01      	cmp	r3, #1
 80131e0:	d013      	beq.n	801320a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80131e2:	e023      	b.n	801322c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	7a5b      	ldrb	r3, [r3, #9]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d007      	beq.n	80131fc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80131ec:	f000 f83c 	bl	8013268 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80131f0:	4b10      	ldr	r3, [pc, #64]	@ (8013234 <HAL_PCDEx_LPM_Callback+0x68>)
 80131f2:	691b      	ldr	r3, [r3, #16]
 80131f4:	4a0f      	ldr	r2, [pc, #60]	@ (8013234 <HAL_PCDEx_LPM_Callback+0x68>)
 80131f6:	f023 0306 	bic.w	r3, r3, #6
 80131fa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013202:	4618      	mov	r0, r3
 8013204:	f7fa fe26 	bl	800de54 <USBD_LL_Resume>
    break;
 8013208:	e010      	b.n	801322c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013210:	4618      	mov	r0, r3
 8013212:	f7fa fe09 	bl	800de28 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	7a5b      	ldrb	r3, [r3, #9]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d005      	beq.n	801322a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801321e:	4b05      	ldr	r3, [pc, #20]	@ (8013234 <HAL_PCDEx_LPM_Callback+0x68>)
 8013220:	691b      	ldr	r3, [r3, #16]
 8013222:	4a04      	ldr	r2, [pc, #16]	@ (8013234 <HAL_PCDEx_LPM_Callback+0x68>)
 8013224:	f043 0306 	orr.w	r3, r3, #6
 8013228:	6113      	str	r3, [r2, #16]
    break;
 801322a:	bf00      	nop
}
 801322c:	bf00      	nop
 801322e:	3708      	adds	r7, #8
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}
 8013234:	e000ed00 	.word	0xe000ed00

08013238 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013238:	b480      	push	{r7}
 801323a:	b083      	sub	sp, #12
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013240:	4b03      	ldr	r3, [pc, #12]	@ (8013250 <USBD_static_malloc+0x18>)
}
 8013242:	4618      	mov	r0, r3
 8013244:	370c      	adds	r7, #12
 8013246:	46bd      	mov	sp, r7
 8013248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324c:	4770      	bx	lr
 801324e:	bf00      	nop
 8013250:	20018510 	.word	0x20018510

08013254 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013254:	b480      	push	{r7}
 8013256:	b083      	sub	sp, #12
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]

}
 801325c:	bf00      	nop
 801325e:	370c      	adds	r7, #12
 8013260:	46bd      	mov	sp, r7
 8013262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013266:	4770      	bx	lr

08013268 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013268:	b580      	push	{r7, lr}
 801326a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801326c:	f7f1 fda2 	bl	8004db4 <SystemClock_Config>
}
 8013270:	bf00      	nop
 8013272:	bd80      	pop	{r7, pc}

08013274 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013274:	b480      	push	{r7}
 8013276:	b085      	sub	sp, #20
 8013278:	af00      	add	r7, sp, #0
 801327a:	4603      	mov	r3, r0
 801327c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801327e:	2300      	movs	r3, #0
 8013280:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013282:	79fb      	ldrb	r3, [r7, #7]
 8013284:	2b03      	cmp	r3, #3
 8013286:	d817      	bhi.n	80132b8 <USBD_Get_USB_Status+0x44>
 8013288:	a201      	add	r2, pc, #4	@ (adr r2, 8013290 <USBD_Get_USB_Status+0x1c>)
 801328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801328e:	bf00      	nop
 8013290:	080132a1 	.word	0x080132a1
 8013294:	080132a7 	.word	0x080132a7
 8013298:	080132ad 	.word	0x080132ad
 801329c:	080132b3 	.word	0x080132b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80132a0:	2300      	movs	r3, #0
 80132a2:	73fb      	strb	r3, [r7, #15]
    break;
 80132a4:	e00b      	b.n	80132be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80132a6:	2303      	movs	r3, #3
 80132a8:	73fb      	strb	r3, [r7, #15]
    break;
 80132aa:	e008      	b.n	80132be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80132ac:	2301      	movs	r3, #1
 80132ae:	73fb      	strb	r3, [r7, #15]
    break;
 80132b0:	e005      	b.n	80132be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80132b2:	2303      	movs	r3, #3
 80132b4:	73fb      	strb	r3, [r7, #15]
    break;
 80132b6:	e002      	b.n	80132be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80132b8:	2303      	movs	r3, #3
 80132ba:	73fb      	strb	r3, [r7, #15]
    break;
 80132bc:	bf00      	nop
  }
  return usb_status;
 80132be:	7bfb      	ldrb	r3, [r7, #15]
}
 80132c0:	4618      	mov	r0, r3
 80132c2:	3714      	adds	r7, #20
 80132c4:	46bd      	mov	sp, r7
 80132c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ca:	4770      	bx	lr

080132cc <DataHist_parameters>:
 80132cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132d0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80132d2:	9f06      	ldr	r7, [sp, #24]
 80132d4:	7020      	strb	r0, [r4, #0]
 80132d6:	6808      	ldr	r0, [r1, #0]
 80132d8:	6060      	str	r0, [r4, #4]
 80132da:	6848      	ldr	r0, [r1, #4]
 80132dc:	60a0      	str	r0, [r4, #8]
 80132de:	6888      	ldr	r0, [r1, #8]
 80132e0:	60e0      	str	r0, [r4, #12]
 80132e2:	68c8      	ldr	r0, [r1, #12]
 80132e4:	6120      	str	r0, [r4, #16]
 80132e6:	6908      	ldr	r0, [r1, #16]
 80132e8:	6160      	str	r0, [r4, #20]
 80132ea:	6948      	ldr	r0, [r1, #20]
 80132ec:	61a0      	str	r0, [r4, #24]
 80132ee:	6988      	ldr	r0, [r1, #24]
 80132f0:	61e0      	str	r0, [r4, #28]
 80132f2:	69c8      	ldr	r0, [r1, #28]
 80132f4:	6220      	str	r0, [r4, #32]
 80132f6:	6a09      	ldr	r1, [r1, #32]
 80132f8:	6261      	str	r1, [r4, #36]	@ 0x24
 80132fa:	e9dd 6507 	ldrd	r6, r5, [sp, #28]
 80132fe:	8811      	ldrh	r1, [r2, #0]
 8013300:	edd2 7a01 	vldr	s15, [r2, #4]
 8013304:	8521      	strh	r1, [r4, #40]	@ 0x28
 8013306:	3280      	adds	r2, #128	@ 0x80
 8013308:	f104 0830 	add.w	r8, r4, #48	@ 0x30
 801330c:	f04f 0e00 	mov.w	lr, #0
 8013310:	f1a2 0178 	sub.w	r1, r2, #120	@ 0x78
 8013314:	4640      	mov	r0, r8
 8013316:	f851 cb04 	ldr.w	ip, [r1], #4
 801331a:	f840 cb04 	str.w	ip, [r0], #4
 801331e:	4291      	cmp	r1, r2
 8013320:	d1f9      	bne.n	8013316 <DataHist_parameters+0x4a>
 8013322:	f10e 0e1e 	add.w	lr, lr, #30
 8013326:	f1be 0f5a 	cmp.w	lr, #90	@ 0x5a
 801332a:	f108 0878 	add.w	r8, r8, #120	@ 0x78
 801332e:	f101 0278 	add.w	r2, r1, #120	@ 0x78
 8013332:	d1ed      	bne.n	8013310 <DataHist_parameters+0x44>
 8013334:	edc4 7a0b 	vstr	s15, [r4, #44]	@ 0x2c
 8013338:	881a      	ldrh	r2, [r3, #0]
 801333a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801333e:	f8a4 2198 	strh.w	r2, [r4, #408]	@ 0x198
 8013342:	3380      	adds	r3, #128	@ 0x80
 8013344:	f504 7ed0 	add.w	lr, r4, #416	@ 0x1a0
 8013348:	f04f 0c00 	mov.w	ip, #0
 801334c:	f1a3 0278 	sub.w	r2, r3, #120	@ 0x78
 8013350:	4671      	mov	r1, lr
 8013352:	f852 0b04 	ldr.w	r0, [r2], #4
 8013356:	f841 0b04 	str.w	r0, [r1], #4
 801335a:	429a      	cmp	r2, r3
 801335c:	d1f9      	bne.n	8013352 <DataHist_parameters+0x86>
 801335e:	f10c 0c1e 	add.w	ip, ip, #30
 8013362:	f1bc 0f5a 	cmp.w	ip, #90	@ 0x5a
 8013366:	f10e 0e78 	add.w	lr, lr, #120	@ 0x78
 801336a:	f102 0378 	add.w	r3, r2, #120	@ 0x78
 801336e:	d1ed      	bne.n	801334c <DataHist_parameters+0x80>
 8013370:	f8c4 819c 	str.w	r8, [r4, #412]	@ 0x19c
 8013374:	883b      	ldrh	r3, [r7, #0]
 8013376:	f8d7 e004 	ldr.w	lr, [r7, #4]
 801337a:	f8a4 3308 	strh.w	r3, [r4, #776]	@ 0x308
 801337e:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8013382:	f504 7c44 	add.w	ip, r4, #784	@ 0x310
 8013386:	2700      	movs	r7, #0
 8013388:	f1a0 0378 	sub.w	r3, r0, #120	@ 0x78
 801338c:	4662      	mov	r2, ip
 801338e:	f853 1b04 	ldr.w	r1, [r3], #4
 8013392:	f842 1b04 	str.w	r1, [r2], #4
 8013396:	4298      	cmp	r0, r3
 8013398:	d1f9      	bne.n	801338e <DataHist_parameters+0xc2>
 801339a:	371e      	adds	r7, #30
 801339c:	2f5a      	cmp	r7, #90	@ 0x5a
 801339e:	f10c 0c78 	add.w	ip, ip, #120	@ 0x78
 80133a2:	f100 0078 	add.w	r0, r0, #120	@ 0x78
 80133a6:	d1ef      	bne.n	8013388 <DataHist_parameters+0xbc>
 80133a8:	f8c4 e30c 	str.w	lr, [r4, #780]	@ 0x30c
 80133ac:	8833      	ldrh	r3, [r6, #0]
 80133ae:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80133b2:	f8a4 3478 	strh.w	r3, [r4, #1144]	@ 0x478
 80133b6:	f106 0080 	add.w	r0, r6, #128	@ 0x80
 80133ba:	f504 6790 	add.w	r7, r4, #1152	@ 0x480
 80133be:	2600      	movs	r6, #0
 80133c0:	f1a0 0378 	sub.w	r3, r0, #120	@ 0x78
 80133c4:	463a      	mov	r2, r7
 80133c6:	f853 1b04 	ldr.w	r1, [r3], #4
 80133ca:	f842 1b04 	str.w	r1, [r2], #4
 80133ce:	4298      	cmp	r0, r3
 80133d0:	d1f9      	bne.n	80133c6 <DataHist_parameters+0xfa>
 80133d2:	361e      	adds	r6, #30
 80133d4:	2e5a      	cmp	r6, #90	@ 0x5a
 80133d6:	f107 0778 	add.w	r7, r7, #120	@ 0x78
 80133da:	f100 0078 	add.w	r0, r0, #120	@ 0x78
 80133de:	d1ef      	bne.n	80133c0 <DataHist_parameters+0xf4>
 80133e0:	f504 638f 	add.w	r3, r4, #1144	@ 0x478
 80133e4:	69aa      	ldr	r2, [r5, #24]
 80133e6:	f8c3 c004 	str.w	ip, [r3, #4]
 80133ea:	f504 63bd 	add.w	r3, r4, #1512	@ 0x5e8
 80133ee:	7829      	ldrb	r1, [r5, #0]
 80133f0:	f884 15e8 	strb.w	r1, [r4, #1512]	@ 0x5e8
 80133f4:	619a      	str	r2, [r3, #24]
 80133f6:	686a      	ldr	r2, [r5, #4]
 80133f8:	605a      	str	r2, [r3, #4]
 80133fa:	68aa      	ldr	r2, [r5, #8]
 80133fc:	609a      	str	r2, [r3, #8]
 80133fe:	68ea      	ldr	r2, [r5, #12]
 8013400:	60da      	str	r2, [r3, #12]
 8013402:	692a      	ldr	r2, [r5, #16]
 8013404:	611a      	str	r2, [r3, #16]
 8013406:	696a      	ldr	r2, [r5, #20]
 8013408:	615a      	str	r2, [r3, #20]
 801340a:	69ea      	ldr	r2, [r5, #28]
 801340c:	61da      	str	r2, [r3, #28]
 801340e:	6a2a      	ldr	r2, [r5, #32]
 8013410:	621a      	str	r2, [r3, #32]
 8013412:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8013414:	625a      	str	r2, [r3, #36]	@ 0x24
 8013416:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8013418:	629a      	str	r2, [r3, #40]	@ 0x28
 801341a:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 801341c:	62da      	str	r2, [r3, #44]	@ 0x2c
 801341e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013422:	bf00      	nop

08013424 <rotVect>:
 8013424:	f991 3001 	ldrsb.w	r3, [r1, #1]
 8013428:	ed92 7a01 	vldr	s14, [r2, #4]
 801342c:	ed92 6a00 	vldr	s12, [r2]
 8013430:	ee07 3a90 	vmov	s15, r3
 8013434:	f991 3000 	ldrsb.w	r3, [r1]
 8013438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801343c:	ee06 3a90 	vmov	s13, r3
 8013440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013444:	f991 3002 	ldrsb.w	r3, [r1, #2]
 8013448:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801344c:	ee07 3a10 	vmov	s14, r3
 8013450:	eee6 7a86 	vfma.f32	s15, s13, s12
 8013454:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013458:	edd2 6a02 	vldr	s13, [r2, #8]
 801345c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8013460:	edc0 7a00 	vstr	s15, [r0]
 8013464:	f991 3004 	ldrsb.w	r3, [r1, #4]
 8013468:	ed92 7a01 	vldr	s14, [r2, #4]
 801346c:	ed92 6a00 	vldr	s12, [r2]
 8013470:	ee07 3a90 	vmov	s15, r3
 8013474:	f991 3003 	ldrsb.w	r3, [r1, #3]
 8013478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801347c:	ee06 3a90 	vmov	s13, r3
 8013480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013484:	f991 3005 	ldrsb.w	r3, [r1, #5]
 8013488:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801348c:	ee07 3a10 	vmov	s14, r3
 8013490:	eee6 7a86 	vfma.f32	s15, s13, s12
 8013494:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013498:	edd2 6a02 	vldr	s13, [r2, #8]
 801349c:	eee7 7a26 	vfma.f32	s15, s14, s13
 80134a0:	edc0 7a01 	vstr	s15, [r0, #4]
 80134a4:	f991 3007 	ldrsb.w	r3, [r1, #7]
 80134a8:	ed92 7a01 	vldr	s14, [r2, #4]
 80134ac:	ed92 6a00 	vldr	s12, [r2]
 80134b0:	ee07 3a90 	vmov	s15, r3
 80134b4:	f991 3006 	ldrsb.w	r3, [r1, #6]
 80134b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134bc:	ee06 3a90 	vmov	s13, r3
 80134c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80134c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80134c8:	f991 3008 	ldrsb.w	r3, [r1, #8]
 80134cc:	eee6 7a86 	vfma.f32	s15, s13, s12
 80134d0:	ee07 3a10 	vmov	s14, r3
 80134d4:	edd2 6a02 	vldr	s13, [r2, #8]
 80134d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80134dc:	eee7 7a26 	vfma.f32	s15, s14, s13
 80134e0:	edc0 7a02 	vstr	s15, [r0, #8]
 80134e4:	4770      	bx	lr
 80134e6:	bf00      	nop

080134e8 <findAxis>:
 80134e8:	f990 3000 	ldrsb.w	r3, [r0]
 80134ec:	2b01      	cmp	r3, #1
 80134ee:	d027      	beq.n	8013540 <findAxis+0x58>
 80134f0:	3301      	adds	r3, #1
 80134f2:	d00e      	beq.n	8013512 <findAxis+0x2a>
 80134f4:	f990 3003 	ldrsb.w	r3, [r0, #3]
 80134f8:	2b01      	cmp	r3, #1
 80134fa:	d053      	beq.n	80135a4 <findAxis+0xbc>
 80134fc:	3301      	adds	r3, #1
 80134fe:	d048      	beq.n	8013592 <findAxis+0xaa>
 8013500:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8013504:	2b01      	cmp	r3, #1
 8013506:	d053      	beq.n	80135b0 <findAxis+0xc8>
 8013508:	3301      	adds	r3, #1
 801350a:	d104      	bne.n	8013516 <findAxis+0x2e>
 801350c:	2364      	movs	r3, #100	@ 0x64
 801350e:	700b      	strb	r3, [r1, #0]
 8013510:	e001      	b.n	8013516 <findAxis+0x2e>
 8013512:	2377      	movs	r3, #119	@ 0x77
 8013514:	700b      	strb	r3, [r1, #0]
 8013516:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801351a:	2b01      	cmp	r3, #1
 801351c:	d016      	beq.n	801354c <findAxis+0x64>
 801351e:	3301      	adds	r3, #1
 8013520:	d02e      	beq.n	8013580 <findAxis+0x98>
 8013522:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8013526:	2b01      	cmp	r3, #1
 8013528:	d039      	beq.n	801359e <findAxis+0xb6>
 801352a:	3301      	adds	r3, #1
 801352c:	d034      	beq.n	8013598 <findAxis+0xb0>
 801352e:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8013532:	2b01      	cmp	r3, #1
 8013534:	d03f      	beq.n	80135b6 <findAxis+0xce>
 8013536:	3301      	adds	r3, #1
 8013538:	d10a      	bne.n	8013550 <findAxis+0x68>
 801353a:	2364      	movs	r3, #100	@ 0x64
 801353c:	704b      	strb	r3, [r1, #1]
 801353e:	e007      	b.n	8013550 <findAxis+0x68>
 8013540:	2365      	movs	r3, #101	@ 0x65
 8013542:	700b      	strb	r3, [r1, #0]
 8013544:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8013548:	2b01      	cmp	r3, #1
 801354a:	d1e8      	bne.n	801351e <findAxis+0x36>
 801354c:	2365      	movs	r3, #101	@ 0x65
 801354e:	704b      	strb	r3, [r1, #1]
 8013550:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8013554:	2b01      	cmp	r3, #1
 8013556:	d010      	beq.n	801357a <findAxis+0x92>
 8013558:	3301      	adds	r3, #1
 801355a:	d014      	beq.n	8013586 <findAxis+0x9e>
 801355c:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8013560:	2b01      	cmp	r3, #1
 8013562:	d022      	beq.n	80135aa <findAxis+0xc2>
 8013564:	3301      	adds	r3, #1
 8013566:	d011      	beq.n	801358c <findAxis+0xa4>
 8013568:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801356c:	2b01      	cmp	r3, #1
 801356e:	d025      	beq.n	80135bc <findAxis+0xd4>
 8013570:	3301      	adds	r3, #1
 8013572:	bf04      	itt	eq
 8013574:	2364      	moveq	r3, #100	@ 0x64
 8013576:	708b      	strbeq	r3, [r1, #2]
 8013578:	4770      	bx	lr
 801357a:	2365      	movs	r3, #101	@ 0x65
 801357c:	708b      	strb	r3, [r1, #2]
 801357e:	4770      	bx	lr
 8013580:	2377      	movs	r3, #119	@ 0x77
 8013582:	704b      	strb	r3, [r1, #1]
 8013584:	e7e4      	b.n	8013550 <findAxis+0x68>
 8013586:	2377      	movs	r3, #119	@ 0x77
 8013588:	708b      	strb	r3, [r1, #2]
 801358a:	4770      	bx	lr
 801358c:	2373      	movs	r3, #115	@ 0x73
 801358e:	708b      	strb	r3, [r1, #2]
 8013590:	4770      	bx	lr
 8013592:	2373      	movs	r3, #115	@ 0x73
 8013594:	700b      	strb	r3, [r1, #0]
 8013596:	e7be      	b.n	8013516 <findAxis+0x2e>
 8013598:	2373      	movs	r3, #115	@ 0x73
 801359a:	704b      	strb	r3, [r1, #1]
 801359c:	e7d8      	b.n	8013550 <findAxis+0x68>
 801359e:	236e      	movs	r3, #110	@ 0x6e
 80135a0:	704b      	strb	r3, [r1, #1]
 80135a2:	e7d5      	b.n	8013550 <findAxis+0x68>
 80135a4:	236e      	movs	r3, #110	@ 0x6e
 80135a6:	700b      	strb	r3, [r1, #0]
 80135a8:	e7b5      	b.n	8013516 <findAxis+0x2e>
 80135aa:	236e      	movs	r3, #110	@ 0x6e
 80135ac:	708b      	strb	r3, [r1, #2]
 80135ae:	4770      	bx	lr
 80135b0:	2375      	movs	r3, #117	@ 0x75
 80135b2:	700b      	strb	r3, [r1, #0]
 80135b4:	e7af      	b.n	8013516 <findAxis+0x2e>
 80135b6:	2375      	movs	r3, #117	@ 0x75
 80135b8:	704b      	strb	r3, [r1, #1]
 80135ba:	e7c9      	b.n	8013550 <findAxis+0x68>
 80135bc:	2375      	movs	r3, #117	@ 0x75
 80135be:	708b      	strb	r3, [r1, #2]
 80135c0:	4770      	bx	lr
 80135c2:	bf00      	nop
 80135c4:	0000      	movs	r0, r0
	...

080135c8 <findDirection>:
 80135c8:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 80135cc:	ed2d 8b06 	vpush	{d8-d10}
 80135d0:	eef0 9ae0 	vabs.f32	s19, s1
 80135d4:	eeb0 9a40 	vmov.f32	s18, s0
 80135d8:	4604      	mov	r4, r0
 80135da:	ee19 0a90 	vmov	r0, s19
 80135de:	eeb0 8a41 	vmov.f32	s16, s2
 80135e2:	eef0 8a60 	vmov.f32	s17, s1
 80135e6:	eeb0 aac9 	vabs.f32	s20, s18
 80135ea:	f7ec ffd5 	bl	8000598 <__aeabi_f2d>
 80135ee:	eeb4 aae9 	vcmpe.f32	s20, s19
 80135f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135f6:	4606      	mov	r6, r0
 80135f8:	460f      	mov	r7, r1
 80135fa:	eef0 aac8 	vabs.f32	s21, s16
 80135fe:	dd32      	ble.n	8013666 <findDirection+0x9e>
 8013600:	eeb4 aaea 	vcmpe.f32	s20, s21
 8013604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013608:	dd2d      	ble.n	8013666 <findDirection+0x9e>
 801360a:	a36b      	add	r3, pc, #428	@ (adr r3, 80137b8 <findDirection+0x1f0>)
 801360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013610:	f7ed f81a 	bl	8000648 <__aeabi_dmul>
 8013614:	4680      	mov	r8, r0
 8013616:	ee1a 0a10 	vmov	r0, s20
 801361a:	4689      	mov	r9, r1
 801361c:	f7ec ffbc 	bl	8000598 <__aeabi_f2d>
 8013620:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8013624:	4606      	mov	r6, r0
 8013626:	460f      	mov	r7, r1
 8013628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801362c:	4640      	mov	r0, r8
 801362e:	4649      	mov	r1, r9
 8013630:	4632      	mov	r2, r6
 8013632:	463b      	mov	r3, r7
 8013634:	dd76      	ble.n	8013724 <findDirection+0x15c>
 8013636:	f7ed fa79 	bl	8000b2c <__aeabi_dcmplt>
 801363a:	b178      	cbz	r0, 801365c <findDirection+0x94>
 801363c:	ee1a 0a90 	vmov	r0, s21
 8013640:	f7ec ffaa 	bl	8000598 <__aeabi_f2d>
 8013644:	a35c      	add	r3, pc, #368	@ (adr r3, 80137b8 <findDirection+0x1f0>)
 8013646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801364a:	f7ec fffd 	bl	8000648 <__aeabi_dmul>
 801364e:	4632      	mov	r2, r6
 8013650:	463b      	mov	r3, r7
 8013652:	f7ed fa6b 	bl	8000b2c <__aeabi_dcmplt>
 8013656:	2800      	cmp	r0, #0
 8013658:	bf18      	it	ne
 801365a:	2404      	movne	r4, #4
 801365c:	ecbd 8b06 	vpop	{d8-d10}
 8013660:	4620      	mov	r0, r4
 8013662:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8013666:	eef4 9aea 	vcmpe.f32	s19, s21
 801366a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801366e:	dd28      	ble.n	80136c2 <findDirection+0xfa>
 8013670:	ee1a 0a10 	vmov	r0, s20
 8013674:	f7ec ff90 	bl	8000598 <__aeabi_f2d>
 8013678:	a34f      	add	r3, pc, #316	@ (adr r3, 80137b8 <findDirection+0x1f0>)
 801367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801367e:	f7ec ffe3 	bl	8000648 <__aeabi_dmul>
 8013682:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8013686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801368a:	4632      	mov	r2, r6
 801368c:	463b      	mov	r3, r7
 801368e:	dd5e      	ble.n	801374e <findDirection+0x186>
 8013690:	f7ed fa4c 	bl	8000b2c <__aeabi_dcmplt>
 8013694:	2800      	cmp	r0, #0
 8013696:	d0e1      	beq.n	801365c <findDirection+0x94>
 8013698:	ee1a 0a90 	vmov	r0, s21
 801369c:	f7ec ff7c 	bl	8000598 <__aeabi_f2d>
 80136a0:	a345      	add	r3, pc, #276	@ (adr r3, 80137b8 <findDirection+0x1f0>)
 80136a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136a6:	f7ec ffcf 	bl	8000648 <__aeabi_dmul>
 80136aa:	4632      	mov	r2, r6
 80136ac:	463b      	mov	r3, r7
 80136ae:	f7ed fa3d 	bl	8000b2c <__aeabi_dcmplt>
 80136b2:	ecbd 8b06 	vpop	{d8-d10}
 80136b6:	2800      	cmp	r0, #0
 80136b8:	bf18      	it	ne
 80136ba:	2401      	movne	r4, #1
 80136bc:	4620      	mov	r0, r4
 80136be:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 80136c2:	ee1a 0a90 	vmov	r0, s21
 80136c6:	f7ec ff67 	bl	8000598 <__aeabi_f2d>
 80136ca:	4602      	mov	r2, r0
 80136cc:	460b      	mov	r3, r1
 80136ce:	4630      	mov	r0, r6
 80136d0:	4639      	mov	r1, r7
 80136d2:	4616      	mov	r6, r2
 80136d4:	461f      	mov	r7, r3
 80136d6:	a338      	add	r3, pc, #224	@ (adr r3, 80137b8 <findDirection+0x1f0>)
 80136d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136dc:	f7ec ffb4 	bl	8000648 <__aeabi_dmul>
 80136e0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80136e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136e8:	4602      	mov	r2, r0
 80136ea:	460b      	mov	r3, r1
 80136ec:	4630      	mov	r0, r6
 80136ee:	4639      	mov	r1, r7
 80136f0:	dd46      	ble.n	8013780 <findDirection+0x1b8>
 80136f2:	f7ed fa39 	bl	8000b68 <__aeabi_dcmpgt>
 80136f6:	2800      	cmp	r0, #0
 80136f8:	d0b0      	beq.n	801365c <findDirection+0x94>
 80136fa:	ee1a 0a10 	vmov	r0, s20
 80136fe:	f7ec ff4b 	bl	8000598 <__aeabi_f2d>
 8013702:	a32d      	add	r3, pc, #180	@ (adr r3, 80137b8 <findDirection+0x1f0>)
 8013704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013708:	f7ec ff9e 	bl	8000648 <__aeabi_dmul>
 801370c:	4632      	mov	r2, r6
 801370e:	463b      	mov	r3, r7
 8013710:	f7ed fa0c 	bl	8000b2c <__aeabi_dcmplt>
 8013714:	ecbd 8b06 	vpop	{d8-d10}
 8013718:	2800      	cmp	r0, #0
 801371a:	bf18      	it	ne
 801371c:	2400      	movne	r4, #0
 801371e:	4620      	mov	r0, r4
 8013720:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8013724:	f7ed fa02 	bl	8000b2c <__aeabi_dcmplt>
 8013728:	2800      	cmp	r0, #0
 801372a:	d097      	beq.n	801365c <findDirection+0x94>
 801372c:	ee1a 0a90 	vmov	r0, s21
 8013730:	f7ec ff32 	bl	8000598 <__aeabi_f2d>
 8013734:	a320      	add	r3, pc, #128	@ (adr r3, 80137b8 <findDirection+0x1f0>)
 8013736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801373a:	f7ec ff85 	bl	8000648 <__aeabi_dmul>
 801373e:	4632      	mov	r2, r6
 8013740:	463b      	mov	r3, r7
 8013742:	f7ed f9f3 	bl	8000b2c <__aeabi_dcmplt>
 8013746:	2800      	cmp	r0, #0
 8013748:	bf18      	it	ne
 801374a:	2405      	movne	r4, #5
 801374c:	e786      	b.n	801365c <findDirection+0x94>
 801374e:	f7ed f9ed 	bl	8000b2c <__aeabi_dcmplt>
 8013752:	2800      	cmp	r0, #0
 8013754:	d082      	beq.n	801365c <findDirection+0x94>
 8013756:	ee1a 0a90 	vmov	r0, s21
 801375a:	f7ec ff1d 	bl	8000598 <__aeabi_f2d>
 801375e:	a316      	add	r3, pc, #88	@ (adr r3, 80137b8 <findDirection+0x1f0>)
 8013760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013764:	f7ec ff70 	bl	8000648 <__aeabi_dmul>
 8013768:	4632      	mov	r2, r6
 801376a:	463b      	mov	r3, r7
 801376c:	f7ed f9de 	bl	8000b2c <__aeabi_dcmplt>
 8013770:	ecbd 8b06 	vpop	{d8-d10}
 8013774:	2800      	cmp	r0, #0
 8013776:	bf18      	it	ne
 8013778:	2403      	movne	r4, #3
 801377a:	4620      	mov	r0, r4
 801377c:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8013780:	f7ed f9f2 	bl	8000b68 <__aeabi_dcmpgt>
 8013784:	2800      	cmp	r0, #0
 8013786:	f43f af69 	beq.w	801365c <findDirection+0x94>
 801378a:	ee1a 0a10 	vmov	r0, s20
 801378e:	f7ec ff03 	bl	8000598 <__aeabi_f2d>
 8013792:	a309      	add	r3, pc, #36	@ (adr r3, 80137b8 <findDirection+0x1f0>)
 8013794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013798:	f7ec ff56 	bl	8000648 <__aeabi_dmul>
 801379c:	4632      	mov	r2, r6
 801379e:	463b      	mov	r3, r7
 80137a0:	f7ed f9c4 	bl	8000b2c <__aeabi_dcmplt>
 80137a4:	ecbd 8b06 	vpop	{d8-d10}
 80137a8:	2800      	cmp	r0, #0
 80137aa:	bf18      	it	ne
 80137ac:	2402      	movne	r4, #2
 80137ae:	4620      	mov	r0, r4
 80137b0:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 80137b4:	f3af 8000 	nop.w
 80137b8:	e0000000 	.word	0xe0000000
 80137bc:	3ff6b851 	.word	0x3ff6b851

080137c0 <updateOrientation>:
 80137c0:	2300      	movs	r3, #0
 80137c2:	6003      	str	r3, [r0, #0]
 80137c4:	6043      	str	r3, [r0, #4]
 80137c6:	7203      	strb	r3, [r0, #8]
 80137c8:	780b      	ldrb	r3, [r1, #0]
 80137ca:	f891 c001 	ldrb.w	ip, [r1, #1]
 80137ce:	f1a3 0242 	sub.w	r2, r3, #66	@ 0x42
 80137d2:	2a17      	cmp	r2, #23
 80137d4:	bf98      	it	ls
 80137d6:	3320      	addls	r3, #32
 80137d8:	f1ac 0242 	sub.w	r2, ip, #66	@ 0x42
 80137dc:	bf98      	it	ls
 80137de:	b2db      	uxtbls	r3, r3
 80137e0:	2a17      	cmp	r2, #23
 80137e2:	788a      	ldrb	r2, [r1, #2]
 80137e4:	bf98      	it	ls
 80137e6:	f10c 0c20 	addls.w	ip, ip, #32
 80137ea:	f1a2 0142 	sub.w	r1, r2, #66	@ 0x42
 80137ee:	bf98      	it	ls
 80137f0:	fa5f fc8c 	uxtbls.w	ip, ip
 80137f4:	2917      	cmp	r1, #23
 80137f6:	bf98      	it	ls
 80137f8:	3220      	addls	r2, #32
 80137fa:	f1a3 0364 	sub.w	r3, r3, #100	@ 0x64
 80137fe:	bf98      	it	ls
 8013800:	b2d2      	uxtbls	r2, r2
 8013802:	2b13      	cmp	r3, #19
 8013804:	d80d      	bhi.n	8013822 <updateOrientation+0x62>
 8013806:	e8df f003 	tbb	[pc, r3]
 801380a:	3734      	.short	0x3734
 801380c:	0c0c0c0c 	.word	0x0c0c0c0c
 8013810:	0c0c0c0c 	.word	0x0c0c0c0c
 8013814:	0c0c0c0a 	.word	0x0c0c0c0a
 8013818:	3d0c3a0c 	.word	0x3d0c3a0c
 801381c:	310c      	.short	0x310c
 801381e:	2301      	movs	r3, #1
 8013820:	70c3      	strb	r3, [r0, #3]
 8013822:	f1ac 0c64 	sub.w	ip, ip, #100	@ 0x64
 8013826:	f1bc 0f13 	cmp.w	ip, #19
 801382a:	d80d      	bhi.n	8013848 <updateOrientation+0x88>
 801382c:	e8df f00c 	tbb	[pc, ip]
 8013830:	0c0c392d 	.word	0x0c0c392d
 8013834:	0c0c0c0c 	.word	0x0c0c0c0c
 8013838:	0c0a0c0c 	.word	0x0c0a0c0c
 801383c:	3c0c0c0c 	.word	0x3c0c0c0c
 8013840:	420c3f0c 	.word	0x420c3f0c
 8013844:	2301      	movs	r3, #1
 8013846:	7103      	strb	r3, [r0, #4]
 8013848:	3a64      	subs	r2, #100	@ 0x64
 801384a:	2a13      	cmp	r2, #19
 801384c:	d80d      	bhi.n	801386a <updateOrientation+0xaa>
 801384e:	e8df f002 	tbb	[pc, r2]
 8013852:	340a      	.short	0x340a
 8013854:	0c0c0c0c 	.word	0x0c0c0c0c
 8013858:	0c0c0c0c 	.word	0x0c0c0c0c
 801385c:	0c0c0c37 	.word	0x0c0c0c37
 8013860:	250c220c 	.word	0x250c220c
 8013864:	1f0c      	.short	0x1f0c
 8013866:	23ff      	movs	r3, #255	@ 0xff
 8013868:	7203      	strb	r3, [r0, #8]
 801386a:	4770      	bx	lr
 801386c:	23ff      	movs	r3, #255	@ 0xff
 801386e:	7003      	strb	r3, [r0, #0]
 8013870:	e7d7      	b.n	8013822 <updateOrientation+0x62>
 8013872:	23ff      	movs	r3, #255	@ 0xff
 8013874:	7183      	strb	r3, [r0, #6]
 8013876:	e7d4      	b.n	8013822 <updateOrientation+0x62>
 8013878:	2301      	movs	r3, #1
 801387a:	7003      	strb	r3, [r0, #0]
 801387c:	e7d1      	b.n	8013822 <updateOrientation+0x62>
 801387e:	23ff      	movs	r3, #255	@ 0xff
 8013880:	70c3      	strb	r3, [r0, #3]
 8013882:	e7ce      	b.n	8013822 <updateOrientation+0x62>
 8013884:	2301      	movs	r3, #1
 8013886:	7183      	strb	r3, [r0, #6]
 8013888:	e7cb      	b.n	8013822 <updateOrientation+0x62>
 801388a:	23ff      	movs	r3, #255	@ 0xff
 801388c:	71c3      	strb	r3, [r0, #7]
 801388e:	e7db      	b.n	8013848 <updateOrientation+0x88>
 8013890:	23ff      	movs	r3, #255	@ 0xff
 8013892:	7083      	strb	r3, [r0, #2]
 8013894:	4770      	bx	lr
 8013896:	23ff      	movs	r3, #255	@ 0xff
 8013898:	7143      	strb	r3, [r0, #5]
 801389a:	4770      	bx	lr
 801389c:	2301      	movs	r3, #1
 801389e:	7203      	strb	r3, [r0, #8]
 80138a0:	4770      	bx	lr
 80138a2:	2301      	movs	r3, #1
 80138a4:	7043      	strb	r3, [r0, #1]
 80138a6:	e7cf      	b.n	8013848 <updateOrientation+0x88>
 80138a8:	23ff      	movs	r3, #255	@ 0xff
 80138aa:	7103      	strb	r3, [r0, #4]
 80138ac:	e7cc      	b.n	8013848 <updateOrientation+0x88>
 80138ae:	2301      	movs	r3, #1
 80138b0:	71c3      	strb	r3, [r0, #7]
 80138b2:	e7c9      	b.n	8013848 <updateOrientation+0x88>
 80138b4:	23ff      	movs	r3, #255	@ 0xff
 80138b6:	7043      	strb	r3, [r0, #1]
 80138b8:	e7c6      	b.n	8013848 <updateOrientation+0x88>
 80138ba:	2301      	movs	r3, #1
 80138bc:	7083      	strb	r3, [r0, #2]
 80138be:	4770      	bx	lr
 80138c0:	2301      	movs	r3, #1
 80138c2:	7143      	strb	r3, [r0, #5]
 80138c4:	4770      	bx	lr
 80138c6:	bf00      	nop

080138c8 <qmult>:
 80138c8:	ed91 2a03 	vldr	s4, [r1, #12]
 80138cc:	ed90 3a01 	vldr	s6, [r0, #4]
 80138d0:	edd0 5a02 	vldr	s11, [r0, #8]
 80138d4:	edd1 4a01 	vldr	s9, [r1, #4]
 80138d8:	ed90 4a00 	vldr	s8, [r0]
 80138dc:	ed91 5a02 	vldr	s10, [r1, #8]
 80138e0:	edd1 3a00 	vldr	s7, [r1]
 80138e4:	edd0 2a03 	vldr	s5, [r0, #12]
 80138e8:	ee25 6aa4 	vmul.f32	s12, s11, s9
 80138ec:	ee62 6a03 	vmul.f32	s13, s4, s6
 80138f0:	ee22 7a25 	vmul.f32	s14, s4, s11
 80138f4:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 80138f8:	eea4 6a02 	vfma.f32	s12, s8, s4
 80138fc:	eee4 6a05 	vfma.f32	s13, s8, s10
 8013900:	eea3 7a23 	vfma.f32	s14, s6, s7
 8013904:	eee4 7a63 	vfms.f32	s15, s8, s7
 8013908:	eea2 6aa3 	vfma.f32	s12, s5, s7
 801390c:	eee4 6aa2 	vfma.f32	s13, s9, s5
 8013910:	eea5 7a22 	vfma.f32	s14, s10, s5
 8013914:	eee2 7a22 	vfma.f32	s15, s4, s5
 8013918:	eea3 6a45 	vfms.f32	s12, s6, s10
 801391c:	eee5 6ae3 	vfms.f32	s13, s11, s7
 8013920:	eea4 7a64 	vfms.f32	s14, s8, s9
 8013924:	eee5 7a65 	vfms.f32	s15, s10, s11
 8013928:	ed82 6a00 	vstr	s12, [r2]
 801392c:	edc2 6a01 	vstr	s13, [r2, #4]
 8013930:	ed82 7a02 	vstr	s14, [r2, #8]
 8013934:	edc2 7a03 	vstr	s15, [r2, #12]
 8013938:	4770      	bx	lr
 801393a:	bf00      	nop

0801393c <dataDerivative5>:
 801393c:	ed90 7a02 	vldr	s14, [r0, #8]
 8013940:	edd0 7a05 	vldr	s15, [r0, #20]
 8013944:	ed90 5a04 	vldr	s10, [r0, #16]
 8013948:	edd0 3a00 	vldr	s7, [r0]
 801394c:	edd0 6a09 	vldr	s13, [r0, #36]	@ 0x24
 8013950:	ed90 6a0b 	vldr	s12, [r0, #44]	@ 0x2c
 8013954:	ed90 4a0e 	vldr	s8, [r0, #56]	@ 0x38
 8013958:	eef8 4a00 	vmov.f32	s9, #128	@ 0xc0000000 -2.0
 801395c:	eed7 7a24 	vfnms.f32	s15, s14, s9
 8013960:	ed90 7a01 	vldr	s14, [r0, #4]
 8013964:	eee3 6aa4 	vfma.f32	s13, s7, s9
 8013968:	ee97 5a24 	vfnms.f32	s10, s14, s9
 801396c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013970:	ed90 7a0a 	vldr	s14, [r0, #40]	@ 0x28
 8013974:	eddf 4a13 	vldr	s9, [pc, #76]	@ 80139c4 <dataDerivative5+0x88>
 8013978:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 801397c:	eee4 7a25 	vfma.f32	s15, s8, s11
 8013980:	eeb0 6a66 	vmov.f32	s12, s13
 8013984:	ee77 6a05 	vadd.f32	s13, s14, s10
 8013988:	ed90 5a0d 	vldr	s10, [r0, #52]	@ 0x34
 801398c:	ee20 7a24 	vmul.f32	s14, s0, s9
 8013990:	eee5 6a25 	vfma.f32	s13, s10, s11
 8013994:	edd0 4a03 	vldr	s9, [r0, #12]
 8013998:	ed90 5a0c 	vldr	s10, [r0, #48]	@ 0x30
 801399c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80139a0:	ee36 6a64 	vsub.f32	s12, s12, s9
 80139a4:	ee66 6a87 	vmul.f32	s13, s13, s14
 80139a8:	eea5 6a25 	vfma.f32	s12, s10, s11
 80139ac:	ee27 0aa7 	vmul.f32	s0, s15, s15
 80139b0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80139b4:	eea6 0aa6 	vfma.f32	s0, s13, s13
 80139b8:	eea7 0a07 	vfma.f32	s0, s14, s14
 80139bc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80139c0:	4770      	bx	lr
 80139c2:	bf00      	nop
 80139c4:	3dcccccd 	.word	0x3dcccccd

080139c8 <b_dcm2q>:
 80139c8:	ed90 5a08 	vldr	s10, [r0, #32]
 80139cc:	edd0 7a00 	vldr	s15, [r0]
 80139d0:	edd0 6a04 	vldr	s13, [r0, #16]
 80139d4:	ee37 7a85 	vadd.f32	s14, s15, s10
 80139d8:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 80139dc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80139e0:	eeff 4a00 	vmov.f32	s9, #240	@ 0xbf800000 -1.0
 80139e4:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80139e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ec:	bfc5      	ittet	gt
 80139ee:	eeb7 6a00 	vmovgt.f32	s12, #112	@ 0x3f800000  1.0
 80139f2:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 80139f6:	eddf 5a43 	vldrle	s11, [pc, #268]	@ 8013b04 <b_dcm2q+0x13c>
 80139fa:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 80139fe:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8013a02:	ee35 6a47 	vsub.f32	s12, s10, s14
 8013a06:	ee35 7a07 	vadd.f32	s14, s10, s14
 8013a0a:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8013a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a12:	bfc5      	ittet	gt
 8013a14:	eef7 4a00 	vmovgt.f32	s9, #112	@ 0x3f800000  1.0
 8013a18:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 8013a1c:	ed9f 6a39 	vldrle	s12, [pc, #228]	@ 8013b04 <b_dcm2q+0x13c>
 8013a20:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 8013a24:	eeff 4a00 	vmov.f32	s9, #240	@ 0xbf800000 -1.0
 8013a28:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8013a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a30:	dd5b      	ble.n	8013aea <b_dcm2q+0x122>
 8013a32:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8013a36:	ee37 7a24 	vadd.f32	s14, s14, s9
 8013a3a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8013a3e:	eef1 4ac7 	vsqrt.f32	s9, s14
 8013a42:	ee64 4a84 	vmul.f32	s9, s9, s8
 8013a46:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013a4a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8013a4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013a52:	edd0 6a07 	vldr	s13, [r0, #28]
 8013a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a5e:	bf85      	ittet	hi
 8013a60:	eeb7 7a00 	vmovhi.f32	s14, #112	@ 0x3f800000  1.0
 8013a64:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 8013a68:	ed9f 7a26 	vldrls	s14, [pc, #152]	@ 8013b04 <b_dcm2q+0x13c>
 8013a6c:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 8013a70:	edd0 7a05 	vldr	s15, [r0, #20]
 8013a74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013a78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a80:	d43c      	bmi.n	8013afc <b_dcm2q+0x134>
 8013a82:	bfd8      	it	le
 8013a84:	ee27 7a27 	vmulle.f32	s14, s14, s15
 8013a88:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013a8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013a90:	ed81 7a00 	vstr	s14, [r1]
 8013a94:	edd0 7a06 	vldr	s15, [r0, #24]
 8013a98:	ed90 7a02 	vldr	s14, [r0, #8]
 8013a9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013aa0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aa8:	d425      	bmi.n	8013af6 <b_dcm2q+0x12e>
 8013aaa:	bfd8      	it	le
 8013aac:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 8013ab0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013ab4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8013ab8:	edc1 5a01 	vstr	s11, [r1, #4]
 8013abc:	edd0 7a01 	vldr	s15, [r0, #4]
 8013ac0:	ed90 7a03 	vldr	s14, [r0, #12]
 8013ac4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ac8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ad0:	d40e      	bmi.n	8013af0 <b_dcm2q+0x128>
 8013ad2:	bfd8      	it	le
 8013ad4:	ee26 6a27 	vmulle.f32	s12, s12, s15
 8013ad8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013adc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013ae0:	edc1 4a03 	vstr	s9, [r1, #12]
 8013ae4:	ed81 6a02 	vstr	s12, [r1, #8]
 8013ae8:	4770      	bx	lr
 8013aea:	eddf 4a06 	vldr	s9, [pc, #24]	@ 8013b04 <b_dcm2q+0x13c>
 8013aee:	e7aa      	b.n	8013a46 <b_dcm2q+0x7e>
 8013af0:	eeb1 6a46 	vneg.f32	s12, s12
 8013af4:	e7f0      	b.n	8013ad8 <b_dcm2q+0x110>
 8013af6:	eef1 5a65 	vneg.f32	s11, s11
 8013afa:	e7d9      	b.n	8013ab0 <b_dcm2q+0xe8>
 8013afc:	eeb1 7a47 	vneg.f32	s14, s14
 8013b00:	e7c2      	b.n	8013a88 <b_dcm2q+0xc0>
 8013b02:	bf00      	nop
 8013b04:	00000000 	.word	0x00000000

08013b08 <getRotationMatrix>:
 8013b08:	b538      	push	{r3, r4, r5, lr}
 8013b0a:	4613      	mov	r3, r2
 8013b0c:	4605      	mov	r5, r0
 8013b0e:	460c      	mov	r4, r1
 8013b10:	4618      	mov	r0, r3
 8013b12:	2224      	movs	r2, #36	@ 0x24
 8013b14:	2100      	movs	r1, #0
 8013b16:	f00c f93e 	bl	801fd96 <memset>
 8013b1a:	edd5 5a00 	vldr	s11, [r5]
 8013b1e:	ed9f 3a49 	vldr	s6, [pc, #292]	@ 8013c44 <getRotationMatrix+0x13c>
 8013b22:	edc0 5a02 	vstr	s11, [r0, #8]
 8013b26:	edd5 4a01 	vldr	s9, [r5, #4]
 8013b2a:	edc0 4a05 	vstr	s9, [r0, #20]
 8013b2e:	ed95 5a02 	vldr	s10, [r5, #8]
 8013b32:	ed80 5a08 	vstr	s10, [r0, #32]
 8013b36:	ed94 4a02 	vldr	s8, [r4, #8]
 8013b3a:	edd4 3a01 	vldr	s7, [r4, #4]
 8013b3e:	ed94 6a00 	vldr	s12, [r4]
 8013b42:	ee64 6ac4 	vnmul.f32	s13, s9, s8
 8013b46:	ee65 7ae3 	vnmul.f32	s15, s11, s7
 8013b4a:	eee3 6a85 	vfma.f32	s13, s7, s10
 8013b4e:	4603      	mov	r3, r0
 8013b50:	eee6 7a24 	vfma.f32	s15, s12, s9
 8013b54:	ee25 7a46 	vnmul.f32	s14, s10, s12
 8013b58:	eeb0 6ae6 	vabs.f32	s12, s13
 8013b5c:	eeb4 6ac3 	vcmpe.f32	s12, s6
 8013b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b64:	eea4 7a25 	vfma.f32	s14, s8, s11
 8013b68:	bfdc      	itt	le
 8013b6a:	ee86 4a83 	vdivle.f32	s8, s13, s6
 8013b6e:	eeb0 6a43 	vmovle.f32	s12, s6
 8013b72:	eef0 3ac7 	vabs.f32	s7, s14
 8013b76:	eef4 3ac6 	vcmpe.f32	s7, s12
 8013b7a:	bfd4      	ite	le
 8013b7c:	ee24 4a04 	vmulle.f32	s8, s8, s8
 8013b80:	eeb7 4a00 	vmovgt.f32	s8, #112	@ 0x3f800000  1.0
 8013b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b88:	ed80 7a03 	vstr	s14, [r0, #12]
 8013b8c:	edc0 7a06 	vstr	s15, [r0, #24]
 8013b90:	dc3f      	bgt.n	8013c12 <getRotationMatrix+0x10a>
 8013b92:	eec7 3a06 	vdiv.f32	s7, s14, s12
 8013b96:	eea3 4aa3 	vfma.f32	s8, s7, s7
 8013b9a:	eeb0 3a44 	vmov.f32	s6, s8
 8013b9e:	eeb0 4ae7 	vabs.f32	s8, s15
 8013ba2:	eeb4 6ac4 	vcmpe.f32	s12, s8
 8013ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013baa:	d543      	bpl.n	8013c34 <getRotationMatrix+0x12c>
 8013bac:	eec6 2a04 	vdiv.f32	s5, s12, s8
 8013bb0:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8013bb4:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8013bb8:	eeb0 6a44 	vmov.f32	s12, s8
 8013bbc:	eee3 3a22 	vfma.f32	s7, s6, s5
 8013bc0:	eeb1 4ae3 	vsqrt.f32	s8, s7
 8013bc4:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8013bc8:	ee24 4a06 	vmul.f32	s8, s8, s12
 8013bcc:	ee83 6a84 	vdiv.f32	s12, s7, s8
 8013bd0:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013bd4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013bd8:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013bdc:	ee65 3a47 	vnmul.f32	s7, s10, s14
 8013be0:	ee25 4ae7 	vnmul.f32	s8, s11, s15
 8013be4:	ee24 6ae6 	vnmul.f32	s12, s9, s13
 8013be8:	eee7 3aa4 	vfma.f32	s7, s15, s9
 8013bec:	eef0 4a44 	vmov.f32	s9, s8
 8013bf0:	eee6 4a85 	vfma.f32	s9, s13, s10
 8013bf4:	eea7 6a25 	vfma.f32	s12, s14, s11
 8013bf8:	edc3 6a00 	vstr	s13, [r3]
 8013bfc:	ed83 7a03 	vstr	s14, [r3, #12]
 8013c00:	edc3 7a06 	vstr	s15, [r3, #24]
 8013c04:	edc3 3a01 	vstr	s7, [r3, #4]
 8013c08:	edc3 4a04 	vstr	s9, [r3, #16]
 8013c0c:	ed83 6a07 	vstr	s12, [r3, #28]
 8013c10:	bd38      	pop	{r3, r4, r5, pc}
 8013c12:	eec6 2a23 	vdiv.f32	s5, s12, s7
 8013c16:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 8013c1a:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8013c1e:	eeb0 6a63 	vmov.f32	s12, s7
 8013c22:	eea2 3a84 	vfma.f32	s6, s5, s8
 8013c26:	eeb0 4ae7 	vabs.f32	s8, s15
 8013c2a:	eeb4 6ac4 	vcmpe.f32	s12, s8
 8013c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c32:	d4bb      	bmi.n	8013bac <getRotationMatrix+0xa4>
 8013c34:	ee87 4a86 	vdiv.f32	s8, s15, s12
 8013c38:	eef0 3a43 	vmov.f32	s7, s6
 8013c3c:	eee4 3a04 	vfma.f32	s7, s8, s8
 8013c40:	e7be      	b.n	8013bc0 <getRotationMatrix+0xb8>
 8013c42:	bf00      	nop
 8013c44:	00000000 	.word	0x00000000

08013c48 <kf_update>:
 8013c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c4c:	ed2d 8b10 	vpush	{d8-d15}
 8013c50:	f2ad 4d2c 	subw	sp, sp, #1068	@ 0x42c
 8013c54:	461e      	mov	r6, r3
 8013c56:	f8dd 4490 	ldr.w	r4, [sp, #1168]	@ 0x490
 8013c5a:	ed9f 8a2a 	vldr	s16, [pc, #168]	@ 8013d04 <kf_update+0xbc>
 8013c5e:	ed94 2a00 	vldr	s4, [r4]
 8013c62:	edd4 2a01 	vldr	s5, [r4, #4]
 8013c66:	ed94 3a02 	vldr	s6, [r4, #8]
 8013c6a:	edd4 3a03 	vldr	s7, [r4, #12]
 8013c6e:	ed94 4a04 	vldr	s8, [r4, #16]
 8013c72:	edd4 4a05 	vldr	s9, [r4, #20]
 8013c76:	ed94 5a06 	vldr	s10, [r4, #24]
 8013c7a:	edd4 5a07 	vldr	s11, [r4, #28]
 8013c7e:	ed94 6a08 	vldr	s12, [r4, #32]
 8013c82:	edd4 6a09 	vldr	s13, [r4, #36]	@ 0x24
 8013c86:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8013c8a:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8013c8e:	9201      	str	r2, [sp, #4]
 8013c90:	ab0b      	add	r3, sp, #44	@ 0x2c
 8013c92:	ee22 2a02 	vmul.f32	s4, s4, s4
 8013c96:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8013c9a:	ee23 3a03 	vmul.f32	s6, s6, s6
 8013c9e:	ee63 3aa3 	vmul.f32	s7, s7, s7
 8013ca2:	ee24 4a04 	vmul.f32	s8, s8, s8
 8013ca6:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8013caa:	ee25 5a05 	vmul.f32	s10, s10, s10
 8013cae:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8013cb2:	ee26 6a06 	vmul.f32	s12, s12, s12
 8013cb6:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8013cba:	ee27 7a07 	vmul.f32	s14, s14, s14
 8013cbe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013cc2:	3901      	subs	r1, #1
 8013cc4:	9303      	str	r3, [sp, #12]
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	4604      	mov	r4, r0
 8013cca:	9104      	str	r1, [sp, #16]
 8013ccc:	ed8d 2a0b 	vstr	s4, [sp, #44]	@ 0x2c
 8013cd0:	edcd 2a0c 	vstr	s5, [sp, #48]	@ 0x30
 8013cd4:	ed8d 3a0d 	vstr	s6, [sp, #52]	@ 0x34
 8013cd8:	edcd 3a0e 	vstr	s7, [sp, #56]	@ 0x38
 8013cdc:	ed8d 4a0f 	vstr	s8, [sp, #60]	@ 0x3c
 8013ce0:	edcd 4a10 	vstr	s9, [sp, #64]	@ 0x40
 8013ce4:	ed8d 5a11 	vstr	s10, [sp, #68]	@ 0x44
 8013ce8:	edcd 5a12 	vstr	s11, [sp, #72]	@ 0x48
 8013cec:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 8013cf0:	edcd 6a14 	vstr	s13, [sp, #80]	@ 0x50
 8013cf4:	ed8d 7a15 	vstr	s14, [sp, #84]	@ 0x54
 8013cf8:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
 8013cfc:	9302      	str	r3, [sp, #8]
 8013cfe:	4637      	mov	r7, r6
 8013d00:	e010      	b.n	8013d24 <kf_update+0xdc>
 8013d02:	bf00      	nop
 8013d04:	00000000 	.word	0x00000000
 8013d08:	9a01      	ldr	r2, [sp, #4]
 8013d0a:	9b02      	ldr	r3, [sp, #8]
 8013d0c:	3204      	adds	r2, #4
 8013d0e:	9201      	str	r2, [sp, #4]
 8013d10:	9a03      	ldr	r2, [sp, #12]
 8013d12:	3301      	adds	r3, #1
 8013d14:	3204      	adds	r2, #4
 8013d16:	2b0c      	cmp	r3, #12
 8013d18:	9302      	str	r3, [sp, #8]
 8013d1a:	9203      	str	r2, [sp, #12]
 8013d1c:	f107 0704 	add.w	r7, r7, #4
 8013d20:	f000 85de 	beq.w	80148e0 <kf_update+0xc98>
 8013d24:	9a04      	ldr	r2, [sp, #16]
 8013d26:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8013d2a:	9204      	str	r2, [sp, #16]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d0eb      	beq.n	8013d08 <kf_update+0xc0>
 8013d30:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8013d34:	ad17      	add	r5, sp, #92	@ 0x5c
 8013d36:	edd7 da00 	vldr	s27, [r7]
 8013d3a:	ed97 ea0c 	vldr	s28, [r7, #48]	@ 0x30
 8013d3e:	edd7 ea18 	vldr	s29, [r7, #96]	@ 0x60
 8013d42:	ed97 fa24 	vldr	s30, [r7, #144]	@ 0x90
 8013d46:	edd7 fa30 	vldr	s31, [r7, #192]	@ 0xc0
 8013d4a:	edd7 6a3c 	vldr	s13, [r7, #240]	@ 0xf0
 8013d4e:	ed97 6a48 	vldr	s12, [r7, #288]	@ 0x120
 8013d52:	edd7 5a54 	vldr	s11, [r7, #336]	@ 0x150
 8013d56:	ed97 5a60 	vldr	s10, [r7, #384]	@ 0x180
 8013d5a:	9307      	str	r3, [sp, #28]
 8013d5c:	ed8d 8a17 	vstr	s16, [sp, #92]	@ 0x5c
 8013d60:	ed8d 8a18 	vstr	s16, [sp, #96]	@ 0x60
 8013d64:	ed8d 8a19 	vstr	s16, [sp, #100]	@ 0x64
 8013d68:	ed8d 8a1a 	vstr	s16, [sp, #104]	@ 0x68
 8013d6c:	ed8d 8a1b 	vstr	s16, [sp, #108]	@ 0x6c
 8013d70:	ed8d 8a1c 	vstr	s16, [sp, #112]	@ 0x70
 8013d74:	ed8d 8a1d 	vstr	s16, [sp, #116]	@ 0x74
 8013d78:	ed8d 8a1e 	vstr	s16, [sp, #120]	@ 0x78
 8013d7c:	ed8d 8a1f 	vstr	s16, [sp, #124]	@ 0x7c
 8013d80:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 8013d84:	462a      	mov	r2, r5
 8013d86:	ecb3 7a01 	vldmia	r3!, {s14}
 8013d8a:	ecf2 7a01 	vldmia	r2!, {s15}
 8013d8e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d96:	d006      	beq.n	8013da6 <kf_update+0x15e>
 8013d98:	eef5 da40 	vcmp.f32	s27, #0.0
 8013d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013da0:	bf18      	it	ne
 8013da2:	eee7 7a2d 	vfmane.f32	s15, s14, s27
 8013da6:	ed93 7a08 	vldr	s14, [r3, #32]
 8013daa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013db2:	d006      	beq.n	8013dc2 <kf_update+0x17a>
 8013db4:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8013db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dbc:	bf18      	it	ne
 8013dbe:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 8013dc2:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8013dc6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dce:	d006      	beq.n	8013dde <kf_update+0x196>
 8013dd0:	eef5 ea40 	vcmp.f32	s29, #0.0
 8013dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dd8:	bf18      	it	ne
 8013dda:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 8013dde:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8013de2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dea:	d006      	beq.n	8013dfa <kf_update+0x1b2>
 8013dec:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8013df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013df4:	bf18      	it	ne
 8013df6:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 8013dfa:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8013dfe:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e06:	d006      	beq.n	8013e16 <kf_update+0x1ce>
 8013e08:	eef5 fa40 	vcmp.f32	s31, #0.0
 8013e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e10:	bf18      	it	ne
 8013e12:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 8013e16:	ed93 7a2c 	vldr	s14, [r3, #176]	@ 0xb0
 8013e1a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e22:	d006      	beq.n	8013e32 <kf_update+0x1ea>
 8013e24:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e2c:	bf18      	it	ne
 8013e2e:	eee7 7a26 	vfmane.f32	s15, s14, s13
 8013e32:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 8013e36:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e3e:	d006      	beq.n	8013e4e <kf_update+0x206>
 8013e40:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8013e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e48:	bf18      	it	ne
 8013e4a:	eee7 7a06 	vfmane.f32	s15, s14, s12
 8013e4e:	ed93 7a3e 	vldr	s14, [r3, #248]	@ 0xf8
 8013e52:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e5a:	d006      	beq.n	8013e6a <kf_update+0x222>
 8013e5c:	eef5 5a40 	vcmp.f32	s11, #0.0
 8013e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e64:	bf18      	it	ne
 8013e66:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8013e6a:	ed93 7a47 	vldr	s14, [r3, #284]	@ 0x11c
 8013e6e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e76:	d006      	beq.n	8013e86 <kf_update+0x23e>
 8013e78:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8013e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e80:	bf18      	it	ne
 8013e82:	eee7 7a05 	vfmane.f32	s15, s14, s10
 8013e86:	4299      	cmp	r1, r3
 8013e88:	ed42 7a01 	vstr	s15, [r2, #-4]
 8013e8c:	f47f af7b 	bne.w	8013d86 <kf_update+0x13e>
 8013e90:	eef5 da40 	vcmp.f32	s27, #0.0
 8013e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e98:	eddd ba17 	vldr	s23, [sp, #92]	@ 0x5c
 8013e9c:	f000 84f8 	beq.w	8014890 <kf_update+0xc48>
 8013ea0:	eef5 ba40 	vcmp.f32	s23, #0.0
 8013ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ea8:	f000 8520 	beq.w	80148ec <kf_update+0xca4>
 8013eac:	ee6b 7aad 	vmul.f32	s15, s23, s27
 8013eb0:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8013eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eb8:	ed9d ca18 	vldr	s24, [sp, #96]	@ 0x60
 8013ebc:	d006      	beq.n	8013ecc <kf_update+0x284>
 8013ebe:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8013ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ec6:	bf18      	it	ne
 8013ec8:	eeec 7a0e 	vfmane.f32	s15, s24, s28
 8013ecc:	eef5 ea40 	vcmp.f32	s29, #0.0
 8013ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ed4:	ed9d aa19 	vldr	s20, [sp, #100]	@ 0x64
 8013ed8:	d006      	beq.n	8013ee8 <kf_update+0x2a0>
 8013eda:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8013ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ee2:	bf18      	it	ne
 8013ee4:	eeea 7a2e 	vfmane.f32	s15, s20, s29
 8013ee8:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8013eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ef0:	ed9d da1a 	vldr	s26, [sp, #104]	@ 0x68
 8013ef4:	d006      	beq.n	8013f04 <kf_update+0x2bc>
 8013ef6:	eeb5 da40 	vcmp.f32	s26, #0.0
 8013efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013efe:	bf18      	it	ne
 8013f00:	eeed 7a0f 	vfmane.f32	s15, s26, s30
 8013f04:	eef5 fa40 	vcmp.f32	s31, #0.0
 8013f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f0c:	eddd ca1b 	vldr	s25, [sp, #108]	@ 0x6c
 8013f10:	d006      	beq.n	8013f20 <kf_update+0x2d8>
 8013f12:	eef5 ca40 	vcmp.f32	s25, #0.0
 8013f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f1a:	bf18      	it	ne
 8013f1c:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 8013f20:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f28:	eddd aa1c 	vldr	s21, [sp, #112]	@ 0x70
 8013f2c:	d006      	beq.n	8013f3c <kf_update+0x2f4>
 8013f2e:	eef5 aa40 	vcmp.f32	s21, #0.0
 8013f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f36:	bf18      	it	ne
 8013f38:	eeea 7aa6 	vfmane.f32	s15, s21, s13
 8013f3c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8013f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f44:	ed9d ba1d 	vldr	s22, [sp, #116]	@ 0x74
 8013f48:	d006      	beq.n	8013f58 <kf_update+0x310>
 8013f4a:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8013f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f52:	bf18      	it	ne
 8013f54:	eeeb 7a06 	vfmane.f32	s15, s22, s12
 8013f58:	eef5 5a40 	vcmp.f32	s11, #0.0
 8013f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f60:	eddd 9a1e 	vldr	s19, [sp, #120]	@ 0x78
 8013f64:	d006      	beq.n	8013f74 <kf_update+0x32c>
 8013f66:	eef5 9a40 	vcmp.f32	s19, #0.0
 8013f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f6e:	bf18      	it	ne
 8013f70:	eee9 7aa5 	vfmane.f32	s15, s19, s11
 8013f74:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8013f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f7c:	ed9d 7a1f 	vldr	s14, [sp, #124]	@ 0x7c
 8013f80:	d006      	beq.n	8013f90 <kf_update+0x348>
 8013f82:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f8a:	bf18      	it	ne
 8013f8c:	eee7 7a05 	vfmane.f32	s15, s14, s10
 8013f90:	9b03      	ldr	r3, [sp, #12]
 8013f92:	ed93 4a00 	vldr	s8, [r3]
 8013f96:	9b02      	ldr	r3, [sp, #8]
 8013f98:	ee77 7a84 	vadd.f32	s15, s15, s8
 8013f9c:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8013fa0:	ee84 9aa7 	vdiv.f32	s18, s9, s15
 8013fa4:	2b05      	cmp	r3, #5
 8013fa6:	ee69 ba2b 	vmul.f32	s23, s18, s23
 8013faa:	ee29 ca0c 	vmul.f32	s24, s18, s24
 8013fae:	ee29 aa0a 	vmul.f32	s20, s18, s20
 8013fb2:	ee29 da0d 	vmul.f32	s26, s18, s26
 8013fb6:	ee69 ca2c 	vmul.f32	s25, s18, s25
 8013fba:	ee69 aa2a 	vmul.f32	s21, s18, s21
 8013fbe:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8013fc2:	ee69 9a29 	vmul.f32	s19, s18, s19
 8013fc6:	ee29 9a07 	vmul.f32	s18, s18, s14
 8013fca:	edcd ba17 	vstr	s23, [sp, #92]	@ 0x5c
 8013fce:	ed8d ca18 	vstr	s24, [sp, #96]	@ 0x60
 8013fd2:	ed8d aa19 	vstr	s20, [sp, #100]	@ 0x64
 8013fd6:	ed8d da1a 	vstr	s26, [sp, #104]	@ 0x68
 8013fda:	edcd ca1b 	vstr	s25, [sp, #108]	@ 0x6c
 8013fde:	edcd aa1c 	vstr	s21, [sp, #112]	@ 0x70
 8013fe2:	ed8d ba1d 	vstr	s22, [sp, #116]	@ 0x74
 8013fe6:	edcd 9a1e 	vstr	s19, [sp, #120]	@ 0x78
 8013fea:	ed8d 9a1f 	vstr	s18, [sp, #124]	@ 0x7c
 8013fee:	f340 844b 	ble.w	8014888 <kf_update+0xc40>
 8013ff2:	eef5 da40 	vcmp.f32	s27, #0.0
 8013ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ffa:	f000 847b 	beq.w	80148f4 <kf_update+0xcac>
 8013ffe:	edd4 7a01 	vldr	s15, [r4, #4]
 8014002:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801400a:	f040 84d6 	bne.w	80149ba <kf_update+0xd72>
 801400e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8014012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014016:	d008      	beq.n	801402a <kf_update+0x3e2>
 8014018:	ed94 7a02 	vldr	s14, [r4, #8]
 801401c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014024:	bf18      	it	ne
 8014026:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 801402a:	eef5 ea40 	vcmp.f32	s29, #0.0
 801402e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014032:	d008      	beq.n	8014046 <kf_update+0x3fe>
 8014034:	ed94 7a03 	vldr	s14, [r4, #12]
 8014038:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801403c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014040:	bf18      	it	ne
 8014042:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 8014046:	eeb5 fa40 	vcmp.f32	s30, #0.0
 801404a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801404e:	d008      	beq.n	8014062 <kf_update+0x41a>
 8014050:	ed94 7a04 	vldr	s14, [r4, #16]
 8014054:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801405c:	bf18      	it	ne
 801405e:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 8014062:	eef5 fa40 	vcmp.f32	s31, #0.0
 8014066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801406a:	d008      	beq.n	801407e <kf_update+0x436>
 801406c:	ed94 7a05 	vldr	s14, [r4, #20]
 8014070:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014078:	bf18      	it	ne
 801407a:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 801407e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8014082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014086:	d008      	beq.n	801409a <kf_update+0x452>
 8014088:	ed94 7a06 	vldr	s14, [r4, #24]
 801408c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014094:	bf18      	it	ne
 8014096:	eee7 7a26 	vfmane.f32	s15, s14, s13
 801409a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801409e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140a2:	d008      	beq.n	80140b6 <kf_update+0x46e>
 80140a4:	ed94 7a07 	vldr	s14, [r4, #28]
 80140a8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80140ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140b0:	bf18      	it	ne
 80140b2:	eee7 7a06 	vfmane.f32	s15, s14, s12
 80140b6:	eef5 5a40 	vcmp.f32	s11, #0.0
 80140ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140be:	d008      	beq.n	80140d2 <kf_update+0x48a>
 80140c0:	ed94 7a08 	vldr	s14, [r4, #32]
 80140c4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80140c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140cc:	bf18      	it	ne
 80140ce:	eee7 7a25 	vfmane.f32	s15, s14, s11
 80140d2:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80140d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140da:	d008      	beq.n	80140ee <kf_update+0x4a6>
 80140dc:	ed94 7a09 	vldr	s14, [r4, #36]	@ 0x24
 80140e0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80140e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140e8:	bf18      	it	ne
 80140ea:	eee7 7a05 	vfmane.f32	s15, s14, s10
 80140ee:	9b01      	ldr	r3, [sp, #4]
 80140f0:	edd3 8a00 	vldr	s17, [r3]
 80140f4:	ee78 8ae7 	vsub.f32	s17, s17, s15
 80140f8:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 80140fc:	2100      	movs	r1, #0
 80140fe:	a868      	add	r0, sp, #416	@ 0x1a0
 8014100:	ed8d 5a09 	vstr	s10, [sp, #36]	@ 0x24
 8014104:	edcd 5a08 	vstr	s11, [sp, #32]
 8014108:	ed8d 6a06 	vstr	s12, [sp, #24]
 801410c:	edcd 6a05 	vstr	s13, [sp, #20]
 8014110:	f00b fe41 	bl	801fd96 <memset>
 8014114:	ab68      	add	r3, sp, #416	@ 0x1a0
 8014116:	ed9d 5a09 	vldr	s10, [sp, #36]	@ 0x24
 801411a:	eddd 5a08 	vldr	s11, [sp, #32]
 801411e:	ed9d 6a06 	vldr	s12, [sp, #24]
 8014122:	eddd 6a05 	vldr	s13, [sp, #20]
 8014126:	a971      	add	r1, sp, #452	@ 0x1c4
 8014128:	461a      	mov	r2, r3
 801412a:	ecf5 7a01 	vldmia	r5!, {s15}
 801412e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014136:	d062      	beq.n	80141fe <kf_update+0x5b6>
 8014138:	eef5 da40 	vcmp.f32	s27, #0.0
 801413c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014140:	d005      	beq.n	801414e <kf_update+0x506>
 8014142:	ed92 7a00 	vldr	s14, [r2]
 8014146:	eea7 7aad 	vfma.f32	s14, s15, s27
 801414a:	ed82 7a00 	vstr	s14, [r2]
 801414e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8014152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014156:	d005      	beq.n	8014164 <kf_update+0x51c>
 8014158:	ed92 7a09 	vldr	s14, [r2, #36]	@ 0x24
 801415c:	eea7 7a8e 	vfma.f32	s14, s15, s28
 8014160:	ed82 7a09 	vstr	s14, [r2, #36]	@ 0x24
 8014164:	eef5 ea40 	vcmp.f32	s29, #0.0
 8014168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801416c:	d005      	beq.n	801417a <kf_update+0x532>
 801416e:	ed92 7a12 	vldr	s14, [r2, #72]	@ 0x48
 8014172:	eea7 7aae 	vfma.f32	s14, s15, s29
 8014176:	ed82 7a12 	vstr	s14, [r2, #72]	@ 0x48
 801417a:	eeb5 fa40 	vcmp.f32	s30, #0.0
 801417e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014182:	d005      	beq.n	8014190 <kf_update+0x548>
 8014184:	ed92 7a1b 	vldr	s14, [r2, #108]	@ 0x6c
 8014188:	eea7 7a8f 	vfma.f32	s14, s15, s30
 801418c:	ed82 7a1b 	vstr	s14, [r2, #108]	@ 0x6c
 8014190:	eef5 fa40 	vcmp.f32	s31, #0.0
 8014194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014198:	d005      	beq.n	80141a6 <kf_update+0x55e>
 801419a:	ed92 7a24 	vldr	s14, [r2, #144]	@ 0x90
 801419e:	eea7 7aaf 	vfma.f32	s14, s15, s31
 80141a2:	ed82 7a24 	vstr	s14, [r2, #144]	@ 0x90
 80141a6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80141aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141ae:	d005      	beq.n	80141bc <kf_update+0x574>
 80141b0:	ed92 7a2d 	vldr	s14, [r2, #180]	@ 0xb4
 80141b4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80141b8:	ed82 7a2d 	vstr	s14, [r2, #180]	@ 0xb4
 80141bc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80141c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141c4:	d005      	beq.n	80141d2 <kf_update+0x58a>
 80141c6:	ed92 7a36 	vldr	s14, [r2, #216]	@ 0xd8
 80141ca:	eea7 7a86 	vfma.f32	s14, s15, s12
 80141ce:	ed82 7a36 	vstr	s14, [r2, #216]	@ 0xd8
 80141d2:	eef5 5a40 	vcmp.f32	s11, #0.0
 80141d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141da:	d005      	beq.n	80141e8 <kf_update+0x5a0>
 80141dc:	ed92 7a3f 	vldr	s14, [r2, #252]	@ 0xfc
 80141e0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80141e4:	ed82 7a3f 	vstr	s14, [r2, #252]	@ 0xfc
 80141e8:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80141ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141f0:	d005      	beq.n	80141fe <kf_update+0x5b6>
 80141f2:	ed92 7a48 	vldr	s14, [r2, #288]	@ 0x120
 80141f6:	eea7 7a85 	vfma.f32	s14, s15, s10
 80141fa:	ed82 7a48 	vstr	s14, [r2, #288]	@ 0x120
 80141fe:	3204      	adds	r2, #4
 8014200:	428a      	cmp	r2, r1
 8014202:	d192      	bne.n	801412a <kf_update+0x4e2>
 8014204:	adb9      	add	r5, sp, #740	@ 0x2e4
 8014206:	e9cd 5305 	strd	r5, r3, [sp, #20]
 801420a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801420e:	a968      	add	r1, sp, #416	@ 0x1a0
 8014210:	462a      	mov	r2, r5
 8014212:	f04f 0b06 	mov.w	fp, #6
 8014216:	f04f 0a03 	mov.w	sl, #3
 801421a:	f04f 0902 	mov.w	r9, #2
 801421e:	f04f 0804 	mov.w	r8, #4
 8014222:	f04f 0e05 	mov.w	lr, #5
 8014226:	f04f 0c07 	mov.w	ip, #7
 801422a:	2608      	movs	r6, #8
 801422c:	2000      	movs	r0, #0
 801422e:	ed82 8a00 	vstr	s16, [r2]
 8014232:	2800      	cmp	r0, #0
 8014234:	f000 8198 	beq.w	8014568 <kf_update+0x920>
 8014238:	edd1 7a00 	vldr	s15, [r1]
 801423c:	ed82 8a01 	vstr	s16, [r2, #4]
 8014240:	eef1 7a67 	vneg.f32	s15, s15
 8014244:	2801      	cmp	r0, #1
 8014246:	edc1 7a00 	vstr	s15, [r1]
 801424a:	f000 8255 	beq.w	80146f8 <kf_update+0xab0>
 801424e:	edd1 7a01 	vldr	s15, [r1, #4]
 8014252:	ed82 8a02 	vstr	s16, [r2, #8]
 8014256:	eef1 7a67 	vneg.f32	s15, s15
 801425a:	2802      	cmp	r0, #2
 801425c:	edc1 7a01 	vstr	s15, [r1, #4]
 8014260:	f000 81f2 	beq.w	8014648 <kf_update+0xa00>
 8014264:	ab68      	add	r3, sp, #416	@ 0x1a0
 8014266:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 801426a:	edd5 7a00 	vldr	s15, [r5]
 801426e:	ed82 8a03 	vstr	s16, [r2, #12]
 8014272:	eef1 7a67 	vneg.f32	s15, s15
 8014276:	2803      	cmp	r0, #3
 8014278:	edc5 7a00 	vstr	s15, [r5]
 801427c:	f040 8280 	bne.w	8014780 <kf_update+0xb38>
 8014280:	edd1 7a03 	vldr	s15, [r1, #12]
 8014284:	ed8d 8ad8 	vstr	s16, [sp, #864]	@ 0x360
 8014288:	ee77 7a67 	vsub.f32	s15, s14, s15
 801428c:	ab68      	add	r3, sp, #416	@ 0x1a0
 801428e:	edc1 7a03 	vstr	s15, [r1, #12]
 8014292:	eddd 7a87 	vldr	s15, [sp, #540]	@ 0x21c
 8014296:	ed82 8a05 	vstr	s16, [r2, #20]
 801429a:	eef1 7a67 	vneg.f32	s15, s15
 801429e:	edcd 7a87 	vstr	s15, [sp, #540]	@ 0x21c
 80142a2:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 80142a6:	edd5 7a00 	vldr	s15, [r5]
 80142aa:	ed82 8a06 	vstr	s16, [r2, #24]
 80142ae:	eef1 7a67 	vneg.f32	s15, s15
 80142b2:	edc5 7a00 	vstr	s15, [r5]
 80142b6:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 80142ba:	edd5 7a00 	vldr	s15, [r5]
 80142be:	ed82 8a07 	vstr	s16, [r2, #28]
 80142c2:	eef1 7a67 	vneg.f32	s15, s15
 80142c6:	edc5 7a00 	vstr	s15, [r5]
 80142ca:	ab68      	add	r3, sp, #416	@ 0x1a0
 80142cc:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 80142d0:	edd5 7a00 	vldr	s15, [r5]
 80142d4:	ed82 8a08 	vstr	s16, [r2, #32]
 80142d8:	eef1 7a67 	vneg.f32	s15, s15
 80142dc:	2808      	cmp	r0, #8
 80142de:	edc5 7a00 	vstr	s15, [r5]
 80142e2:	f040 818f 	bne.w	8014604 <kf_update+0x9bc>
 80142e6:	aa68      	add	r2, sp, #416	@ 0x1a0
 80142e8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80142ec:	ed92 7a00 	vldr	s14, [r2]
 80142f0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80142f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80142f8:	e9dd 5305 	ldrd	r5, r3, [sp, #20]
 80142fc:	edc2 7a00 	vstr	s15, [r2]
 8014300:	2600      	movs	r6, #0
 8014302:	f504 70a2 	add.w	r0, r4, #324	@ 0x144
 8014306:	ecf3 3a01 	vldmia	r3!, {s7}
 801430a:	ed93 4a08 	vldr	s8, [r3, #32]
 801430e:	edd3 4a11 	vldr	s9, [r3, #68]	@ 0x44
 8014312:	ed93 5a1a 	vldr	s10, [r3, #104]	@ 0x68
 8014316:	edd3 5a23 	vldr	s11, [r3, #140]	@ 0x8c
 801431a:	ed93 6a2c 	vldr	s12, [r3, #176]	@ 0xb0
 801431e:	edd3 6a35 	vldr	s13, [r3, #212]	@ 0xd4
 8014322:	ed93 7a3e 	vldr	s14, [r3, #248]	@ 0xf8
 8014326:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 801432a:	4629      	mov	r1, r5
 801432c:	4622      	mov	r2, r4
 801432e:	eef5 3a40 	vcmp.f32	s7, #0.0
 8014332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014336:	d00c      	beq.n	8014352 <kf_update+0x70a>
 8014338:	ed92 3a0a 	vldr	s6, [r2, #40]	@ 0x28
 801433c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8014340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014344:	d005      	beq.n	8014352 <kf_update+0x70a>
 8014346:	edd1 2a00 	vldr	s5, [r1]
 801434a:	eee3 2a83 	vfma.f32	s5, s7, s6
 801434e:	edc1 2a00 	vstr	s5, [r1]
 8014352:	eeb5 4a40 	vcmp.f32	s8, #0.0
 8014356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801435a:	d00c      	beq.n	8014376 <kf_update+0x72e>
 801435c:	ed92 3a0b 	vldr	s6, [r2, #44]	@ 0x2c
 8014360:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8014364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014368:	d005      	beq.n	8014376 <kf_update+0x72e>
 801436a:	edd1 2a00 	vldr	s5, [r1]
 801436e:	eee4 2a03 	vfma.f32	s5, s8, s6
 8014372:	edc1 2a00 	vstr	s5, [r1]
 8014376:	eef5 4a40 	vcmp.f32	s9, #0.0
 801437a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801437e:	d00c      	beq.n	801439a <kf_update+0x752>
 8014380:	ed92 3a0c 	vldr	s6, [r2, #48]	@ 0x30
 8014384:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8014388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801438c:	d005      	beq.n	801439a <kf_update+0x752>
 801438e:	edd1 2a00 	vldr	s5, [r1]
 8014392:	eee4 2a83 	vfma.f32	s5, s9, s6
 8014396:	edc1 2a00 	vstr	s5, [r1]
 801439a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143a2:	d00c      	beq.n	80143be <kf_update+0x776>
 80143a4:	ed92 3a0d 	vldr	s6, [r2, #52]	@ 0x34
 80143a8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80143ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143b0:	d005      	beq.n	80143be <kf_update+0x776>
 80143b2:	edd1 2a00 	vldr	s5, [r1]
 80143b6:	eee5 2a03 	vfma.f32	s5, s10, s6
 80143ba:	edc1 2a00 	vstr	s5, [r1]
 80143be:	eef5 5a40 	vcmp.f32	s11, #0.0
 80143c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143c6:	d00c      	beq.n	80143e2 <kf_update+0x79a>
 80143c8:	ed92 3a0e 	vldr	s6, [r2, #56]	@ 0x38
 80143cc:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80143d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143d4:	d005      	beq.n	80143e2 <kf_update+0x79a>
 80143d6:	edd1 2a00 	vldr	s5, [r1]
 80143da:	eee5 2a83 	vfma.f32	s5, s11, s6
 80143de:	edc1 2a00 	vstr	s5, [r1]
 80143e2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80143e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ea:	d00c      	beq.n	8014406 <kf_update+0x7be>
 80143ec:	ed92 3a0f 	vldr	s6, [r2, #60]	@ 0x3c
 80143f0:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80143f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143f8:	d005      	beq.n	8014406 <kf_update+0x7be>
 80143fa:	edd1 2a00 	vldr	s5, [r1]
 80143fe:	eee6 2a03 	vfma.f32	s5, s12, s6
 8014402:	edc1 2a00 	vstr	s5, [r1]
 8014406:	eef5 6a40 	vcmp.f32	s13, #0.0
 801440a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801440e:	d00c      	beq.n	801442a <kf_update+0x7e2>
 8014410:	ed92 3a10 	vldr	s6, [r2, #64]	@ 0x40
 8014414:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8014418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801441c:	d005      	beq.n	801442a <kf_update+0x7e2>
 801441e:	edd1 2a00 	vldr	s5, [r1]
 8014422:	eee6 2a83 	vfma.f32	s5, s13, s6
 8014426:	edc1 2a00 	vstr	s5, [r1]
 801442a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801442e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014432:	d00c      	beq.n	801444e <kf_update+0x806>
 8014434:	ed92 3a11 	vldr	s6, [r2, #68]	@ 0x44
 8014438:	eeb5 3a40 	vcmp.f32	s6, #0.0
 801443c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014440:	d005      	beq.n	801444e <kf_update+0x806>
 8014442:	edd1 2a00 	vldr	s5, [r1]
 8014446:	eee7 2a03 	vfma.f32	s5, s14, s6
 801444a:	edc1 2a00 	vstr	s5, [r1]
 801444e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014456:	d00c      	beq.n	8014472 <kf_update+0x82a>
 8014458:	ed92 3a12 	vldr	s6, [r2, #72]	@ 0x48
 801445c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8014460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014464:	d005      	beq.n	8014472 <kf_update+0x82a>
 8014466:	edd1 2a00 	vldr	s5, [r1]
 801446a:	eee7 2a83 	vfma.f32	s5, s15, s6
 801446e:	edc1 2a00 	vstr	s5, [r1]
 8014472:	3224      	adds	r2, #36	@ 0x24
 8014474:	4282      	cmp	r2, r0
 8014476:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 801447a:	f47f af58 	bne.w	801432e <kf_update+0x6e6>
 801447e:	3601      	adds	r6, #1
 8014480:	2e09      	cmp	r6, #9
 8014482:	f105 0504 	add.w	r5, r5, #4
 8014486:	f47f af3e 	bne.w	8014306 <kf_update+0x6be>
 801448a:	9807      	ldr	r0, [sp, #28]
 801448c:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8014490:	a9b9      	add	r1, sp, #740	@ 0x2e4
 8014492:	f00b fdaa 	bl	801ffea <memcpy>
 8014496:	eef5 ba40 	vcmp.f32	s23, #0.0
 801449a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801449e:	f000 81a3 	beq.w	80147e8 <kf_update+0xba0>
 80144a2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80144a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144aa:	f000 819d 	beq.w	80147e8 <kf_update+0xba0>
 80144ae:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80144b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144b6:	ee68 baab 	vmul.f32	s23, s17, s23
 80144ba:	f000 826f 	beq.w	801499c <kf_update+0xd54>
 80144be:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80144c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144c6:	ee2c ca28 	vmul.f32	s24, s24, s17
 80144ca:	f000 8264 	beq.w	8014996 <kf_update+0xd4e>
 80144ce:	eeb5 da40 	vcmp.f32	s26, #0.0
 80144d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144d6:	ee68 7a8a 	vmul.f32	s15, s17, s20
 80144da:	f000 8257 	beq.w	801498c <kf_update+0xd44>
 80144de:	eef5 ca40 	vcmp.f32	s25, #0.0
 80144e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144e6:	ee28 7a8d 	vmul.f32	s14, s17, s26
 80144ea:	eeb0 aa4c 	vmov.f32	s20, s24
 80144ee:	f040 8272 	bne.w	80149d6 <kf_update+0xd8e>
 80144f2:	eef0 ca47 	vmov.f32	s25, s14
 80144f6:	eeb0 da67 	vmov.f32	s26, s15
 80144fa:	eef5 aa40 	vcmp.f32	s21, #0.0
 80144fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014502:	f000 81a8 	beq.w	8014856 <kf_update+0xc0e>
 8014506:	eef5 8a40 	vcmp.f32	s17, #0.0
 801450a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801450e:	f000 8232 	beq.w	8014976 <kf_update+0xd2e>
 8014512:	eddf 7ae1 	vldr	s15, [pc, #900]	@ 8014898 <kf_update+0xc50>
 8014516:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801451a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801451e:	ee28 7aaa 	vmul.f32	s14, s17, s21
 8014522:	f040 81bb 	bne.w	801489c <kf_update+0xc54>
 8014526:	eeb0 ba47 	vmov.f32	s22, s14
 801452a:	eef0 aa67 	vmov.f32	s21, s15
 801452e:	eef5 9a40 	vcmp.f32	s19, #0.0
 8014532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014536:	f000 81bf 	beq.w	80148b8 <kf_update+0xc70>
 801453a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801453e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014542:	f000 821b 	beq.w	801497c <kf_update+0xd34>
 8014546:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801454a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801454e:	eddf 7ad2 	vldr	s15, [pc, #840]	@ 8014898 <kf_update+0xc50>
 8014552:	ee28 7aa9 	vmul.f32	s14, s17, s19
 8014556:	f040 826b 	bne.w	8014a30 <kf_update+0xde8>
 801455a:	eef0 8a49 	vmov.f32	s17, s18
 801455e:	eef0 9a67 	vmov.f32	s19, s15
 8014562:	eeb0 9a47 	vmov.f32	s18, s14
 8014566:	e1cb      	b.n	8014900 <kf_update+0xcb8>
 8014568:	eddd 7a69 	vldr	s15, [sp, #420]	@ 0x1a4
 801456c:	eddd 6a68 	vldr	s13, [sp, #416]	@ 0x1a0
 8014570:	ed8d 8aba 	vstr	s16, [sp, #744]	@ 0x2e8
 8014574:	ab68      	add	r3, sp, #416	@ 0x1a0
 8014576:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 801457a:	eef1 7a67 	vneg.f32	s15, s15
 801457e:	edcd 7a69 	vstr	s15, [sp, #420]	@ 0x1a4
 8014582:	edd5 7a00 	vldr	s15, [r5]
 8014586:	ed82 8a02 	vstr	s16, [r2, #8]
 801458a:	eef1 7a67 	vneg.f32	s15, s15
 801458e:	edc5 7a00 	vstr	s15, [r5]
 8014592:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8014596:	edd5 7a00 	vldr	s15, [r5]
 801459a:	ed82 8a03 	vstr	s16, [r2, #12]
 801459e:	ee77 6a66 	vsub.f32	s13, s14, s13
 80145a2:	eef1 7a67 	vneg.f32	s15, s15
 80145a6:	edcd 6a68 	vstr	s13, [sp, #416]	@ 0x1a0
 80145aa:	ed82 8a04 	vstr	s16, [r2, #16]
 80145ae:	edc5 7a00 	vstr	s15, [r5]
 80145b2:	ab68      	add	r3, sp, #416	@ 0x1a0
 80145b4:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 80145b8:	edd5 7a00 	vldr	s15, [r5]
 80145bc:	ed82 8a05 	vstr	s16, [r2, #20]
 80145c0:	eef1 7a67 	vneg.f32	s15, s15
 80145c4:	2805      	cmp	r0, #5
 80145c6:	edc5 7a00 	vstr	s15, [r5]
 80145ca:	f040 80ba 	bne.w	8014742 <kf_update+0xafa>
 80145ce:	edd1 7a05 	vldr	s15, [r1, #20]
 80145d2:	ed8d 8aec 	vstr	s16, [sp, #944]	@ 0x3b0
 80145d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80145da:	ab68      	add	r3, sp, #416	@ 0x1a0
 80145dc:	edc1 7a05 	vstr	s15, [r1, #20]
 80145e0:	eddd 7a9b 	vldr	s15, [sp, #620]	@ 0x26c
 80145e4:	ed82 8a07 	vstr	s16, [r2, #28]
 80145e8:	eef1 7a67 	vneg.f32	s15, s15
 80145ec:	ed82 8a08 	vstr	s16, [r2, #32]
 80145f0:	edcd 7a9b 	vstr	s15, [sp, #620]	@ 0x26c
 80145f4:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 80145f8:	edd5 7a00 	vldr	s15, [r5]
 80145fc:	eef1 7a67 	vneg.f32	s15, s15
 8014600:	edc5 7a00 	vstr	s15, [r5]
 8014604:	ab68      	add	r3, sp, #416	@ 0x1a0
 8014606:	eb03 0586 	add.w	r5, r3, r6, lsl #2
 801460a:	edd5 7a00 	vldr	s15, [r5]
 801460e:	3001      	adds	r0, #1
 8014610:	eef1 7a67 	vneg.f32	s15, s15
 8014614:	2809      	cmp	r0, #9
 8014616:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 801461a:	f10c 0c09 	add.w	ip, ip, #9
 801461e:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 8014622:	f10e 0e09 	add.w	lr, lr, #9
 8014626:	f108 0809 	add.w	r8, r8, #9
 801462a:	f109 0909 	add.w	r9, r9, #9
 801462e:	f10a 0a09 	add.w	sl, sl, #9
 8014632:	f10b 0b09 	add.w	fp, fp, #9
 8014636:	f106 0609 	add.w	r6, r6, #9
 801463a:	edc5 7a00 	vstr	s15, [r5]
 801463e:	f47f adf6 	bne.w	801422e <kf_update+0x5e6>
 8014642:	e9dd 5305 	ldrd	r5, r3, [sp, #20]
 8014646:	e65b      	b.n	8014300 <kf_update+0x6b8>
 8014648:	edd1 7a02 	vldr	s15, [r1, #8]
 801464c:	ed8d 8ace 	vstr	s16, [sp, #824]	@ 0x338
 8014650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014654:	ab68      	add	r3, sp, #416	@ 0x1a0
 8014656:	edc1 7a02 	vstr	s15, [r1, #8]
 801465a:	eddd 7a7d 	vldr	s15, [sp, #500]	@ 0x1f4
 801465e:	ed82 8a04 	vstr	s16, [r2, #16]
 8014662:	eef1 7a67 	vneg.f32	s15, s15
 8014666:	edcd 7a7d 	vstr	s15, [sp, #500]	@ 0x1f4
 801466a:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 801466e:	edd5 7a00 	vldr	s15, [r5]
 8014672:	ed82 8a05 	vstr	s16, [r2, #20]
 8014676:	eef1 7a67 	vneg.f32	s15, s15
 801467a:	edc5 7a00 	vstr	s15, [r5]
 801467e:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 8014682:	edd5 7a00 	vldr	s15, [r5]
 8014686:	ed82 8a06 	vstr	s16, [r2, #24]
 801468a:	eef1 7a67 	vneg.f32	s15, s15
 801468e:	edc5 7a00 	vstr	s15, [r5]
 8014692:	ab68      	add	r3, sp, #416	@ 0x1a0
 8014694:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 8014698:	edd5 7a00 	vldr	s15, [r5]
 801469c:	ed82 8a07 	vstr	s16, [r2, #28]
 80146a0:	eef1 7a67 	vneg.f32	s15, s15
 80146a4:	2807      	cmp	r0, #7
 80146a6:	edc5 7a00 	vstr	s15, [r5]
 80146aa:	f47f ae0e 	bne.w	80142ca <kf_update+0x682>
 80146ae:	edd1 7a07 	vldr	s15, [r1, #28]
 80146b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146b6:	f50d 6380 	add.w	r3, sp, #1024	@ 0x400
 80146ba:	ed83 8a00 	vstr	s16, [r3]
 80146be:	edc1 7a07 	vstr	s15, [r1, #28]
 80146c2:	2547      	movs	r5, #71	@ 0x47
 80146c4:	ab68      	add	r3, sp, #416	@ 0x1a0
 80146c6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80146ca:	edd5 7a00 	vldr	s15, [r5]
 80146ce:	eef1 7a67 	vneg.f32	s15, s15
 80146d2:	3001      	adds	r0, #1
 80146d4:	edc5 7a00 	vstr	s15, [r5]
 80146d8:	3224      	adds	r2, #36	@ 0x24
 80146da:	3609      	adds	r6, #9
 80146dc:	f10c 0c09 	add.w	ip, ip, #9
 80146e0:	3124      	adds	r1, #36	@ 0x24
 80146e2:	f10e 0e09 	add.w	lr, lr, #9
 80146e6:	f108 0809 	add.w	r8, r8, #9
 80146ea:	f109 0909 	add.w	r9, r9, #9
 80146ee:	f10a 0a09 	add.w	sl, sl, #9
 80146f2:	f10b 0b09 	add.w	fp, fp, #9
 80146f6:	e59a      	b.n	801422e <kf_update+0x5e6>
 80146f8:	edd1 7a01 	vldr	s15, [r1, #4]
 80146fc:	ed8d 8ac4 	vstr	s16, [sp, #784]	@ 0x310
 8014700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014704:	ab68      	add	r3, sp, #416	@ 0x1a0
 8014706:	edc1 7a01 	vstr	s15, [r1, #4]
 801470a:	eddd 7a73 	vldr	s15, [sp, #460]	@ 0x1cc
 801470e:	ed82 8a03 	vstr	s16, [r2, #12]
 8014712:	eef1 7a67 	vneg.f32	s15, s15
 8014716:	edcd 7a73 	vstr	s15, [sp, #460]	@ 0x1cc
 801471a:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 801471e:	edd5 7a00 	vldr	s15, [r5]
 8014722:	ed82 8a04 	vstr	s16, [r2, #16]
 8014726:	eef1 7a67 	vneg.f32	s15, s15
 801472a:	edc5 7a00 	vstr	s15, [r5]
 801472e:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 8014732:	edd5 7a00 	vldr	s15, [r5]
 8014736:	ed82 8a05 	vstr	s16, [r2, #20]
 801473a:	eef1 7a67 	vneg.f32	s15, s15
 801473e:	edc5 7a00 	vstr	s15, [r5]
 8014742:	ab68      	add	r3, sp, #416	@ 0x1a0
 8014744:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 8014748:	edd5 7a00 	vldr	s15, [r5]
 801474c:	ed82 8a06 	vstr	s16, [r2, #24]
 8014750:	eef1 7a67 	vneg.f32	s15, s15
 8014754:	2806      	cmp	r0, #6
 8014756:	edc5 7a00 	vstr	s15, [r5]
 801475a:	d19a      	bne.n	8014692 <kf_update+0xa4a>
 801475c:	edd1 7a06 	vldr	s15, [r1, #24]
 8014760:	ed8d 8af6 	vstr	s16, [sp, #984]	@ 0x3d8
 8014764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014768:	ed82 8a08 	vstr	s16, [r2, #32]
 801476c:	edc1 7a06 	vstr	s15, [r1, #24]
 8014770:	eddd 7aa5 	vldr	s15, [sp, #660]	@ 0x294
 8014774:	eef1 7a67 	vneg.f32	s15, s15
 8014778:	edcd 7aa5 	vstr	s15, [sp, #660]	@ 0x294
 801477c:	4635      	mov	r5, r6
 801477e:	e7a1      	b.n	80146c4 <kf_update+0xa7c>
 8014780:	ab68      	add	r3, sp, #416	@ 0x1a0
 8014782:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8014786:	edd5 7a00 	vldr	s15, [r5]
 801478a:	ed82 8a04 	vstr	s16, [r2, #16]
 801478e:	eef1 7a67 	vneg.f32	s15, s15
 8014792:	2804      	cmp	r0, #4
 8014794:	edc5 7a00 	vstr	s15, [r5]
 8014798:	f47f af0b 	bne.w	80145b2 <kf_update+0x96a>
 801479c:	edd1 7a04 	vldr	s15, [r1, #16]
 80147a0:	ed8d 8ae2 	vstr	s16, [sp, #904]	@ 0x388
 80147a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80147a8:	ab68      	add	r3, sp, #416	@ 0x1a0
 80147aa:	edc1 7a04 	vstr	s15, [r1, #16]
 80147ae:	eddd 7a91 	vldr	s15, [sp, #580]	@ 0x244
 80147b2:	ed82 8a06 	vstr	s16, [r2, #24]
 80147b6:	eef1 7a67 	vneg.f32	s15, s15
 80147ba:	edcd 7a91 	vstr	s15, [sp, #580]	@ 0x244
 80147be:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 80147c2:	edd5 7a00 	vldr	s15, [r5]
 80147c6:	ed82 8a07 	vstr	s16, [r2, #28]
 80147ca:	eef1 7a67 	vneg.f32	s15, s15
 80147ce:	edc5 7a00 	vstr	s15, [r5]
 80147d2:	ed82 8a08 	vstr	s16, [r2, #32]
 80147d6:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 80147da:	edd5 7a00 	vldr	s15, [r5]
 80147de:	eef1 7a67 	vneg.f32	s15, s15
 80147e2:	edc5 7a00 	vstr	s15, [r5]
 80147e6:	e70d      	b.n	8014604 <kf_update+0x9bc>
 80147e8:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80147ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147f0:	d005      	beq.n	80147fe <kf_update+0xbb6>
 80147f2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80147f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147fa:	f040 80fa 	bne.w	80149f2 <kf_update+0xdaa>
 80147fe:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8014802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014806:	d068      	beq.n	80148da <kf_update+0xc92>
 8014808:	eef5 8a40 	vcmp.f32	s17, #0.0
 801480c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014810:	f040 8117 	bne.w	8014a42 <kf_update+0xdfa>
 8014814:	eeb0 aa68 	vmov.f32	s20, s17
 8014818:	eef0 ba68 	vmov.f32	s23, s17
 801481c:	eeb5 da40 	vcmp.f32	s26, #0.0
 8014820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014824:	d007      	beq.n	8014836 <kf_update+0xbee>
 8014826:	eef5 8a40 	vcmp.f32	s17, #0.0
 801482a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801482e:	f040 80c8 	bne.w	80149c2 <kf_update+0xd7a>
 8014832:	eeb0 da68 	vmov.f32	s26, s17
 8014836:	eef5 ca40 	vcmp.f32	s25, #0.0
 801483a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801483e:	f43f ae5c 	beq.w	80144fa <kf_update+0x8b2>
 8014842:	eef5 8a40 	vcmp.f32	s17, #0.0
 8014846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801484a:	f040 80f7 	bne.w	8014a3c <kf_update+0xdf4>
 801484e:	eef0 aa68 	vmov.f32	s21, s17
 8014852:	eef0 ca68 	vmov.f32	s25, s17
 8014856:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801485a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801485e:	f43f ae66 	beq.w	801452e <kf_update+0x8e6>
 8014862:	eef5 8a40 	vcmp.f32	s17, #0.0
 8014866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801486a:	f040 80cd 	bne.w	8014a08 <kf_update+0xdc0>
 801486e:	eef5 9a40 	vcmp.f32	s19, #0.0
 8014872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014876:	f000 8086 	beq.w	8014986 <kf_update+0xd3e>
 801487a:	eeb0 9a68 	vmov.f32	s18, s17
 801487e:	eef0 9a68 	vmov.f32	s19, s17
 8014882:	eeb0 ba68 	vmov.f32	s22, s17
 8014886:	e03b      	b.n	8014900 <kf_update+0xcb8>
 8014888:	9b01      	ldr	r3, [sp, #4]
 801488a:	edd3 8a00 	vldr	s17, [r3]
 801488e:	e433      	b.n	80140f8 <kf_update+0x4b0>
 8014890:	eef0 7a6d 	vmov.f32	s15, s27
 8014894:	f7ff bb0c 	b.w	8013eb0 <kf_update+0x268>
 8014898:	00000000 	.word	0x00000000
 801489c:	eef5 9a40 	vcmp.f32	s19, #0.0
 80148a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148a4:	eef0 aa67 	vmov.f32	s21, s15
 80148a8:	ee68 7a8b 	vmul.f32	s15, s17, s22
 80148ac:	f040 80b6 	bne.w	8014a1c <kf_update+0xdd4>
 80148b0:	eef0 9a67 	vmov.f32	s19, s15
 80148b4:	eeb0 ba47 	vmov.f32	s22, s14
 80148b8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80148bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148c0:	d01c      	beq.n	80148fc <kf_update+0xcb4>
 80148c2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80148c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148ca:	d051      	beq.n	8014970 <kf_update+0xd28>
 80148cc:	ed1f 7a0e 	vldr	s14, [pc, #-56]	@ 8014898 <kf_update+0xc50>
 80148d0:	ee68 8a89 	vmul.f32	s17, s17, s18
 80148d4:	eeb0 9a47 	vmov.f32	s18, s14
 80148d8:	e012      	b.n	8014900 <kf_update+0xcb8>
 80148da:	eef0 ba4a 	vmov.f32	s23, s20
 80148de:	e79d      	b.n	801481c <kf_update+0xbd4>
 80148e0:	f20d 4d2c 	addw	sp, sp, #1068	@ 0x42c
 80148e4:	ecbd 8b10 	vpop	{d8-d15}
 80148e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ec:	eef0 7a6b 	vmov.f32	s15, s23
 80148f0:	f7ff bade 	b.w	8013eb0 <kf_update+0x268>
 80148f4:	eef0 7a6d 	vmov.f32	s15, s27
 80148f8:	f7ff bb89 	b.w	801400e <kf_update+0x3c6>
 80148fc:	eef0 8a49 	vmov.f32	s17, s18
 8014900:	edd4 3a01 	vldr	s7, [r4, #4]
 8014904:	ed94 4a02 	vldr	s8, [r4, #8]
 8014908:	edd4 4a03 	vldr	s9, [r4, #12]
 801490c:	ed94 5a04 	vldr	s10, [r4, #16]
 8014910:	edd4 5a05 	vldr	s11, [r4, #20]
 8014914:	ed94 6a06 	vldr	s12, [r4, #24]
 8014918:	edd4 6a07 	vldr	s13, [r4, #28]
 801491c:	ed94 7a08 	vldr	s14, [r4, #32]
 8014920:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 8014924:	ee73 3aab 	vadd.f32	s7, s7, s23
 8014928:	ee34 4a0a 	vadd.f32	s8, s8, s20
 801492c:	ee74 4a8d 	vadd.f32	s9, s9, s26
 8014930:	ee35 5a2c 	vadd.f32	s10, s10, s25
 8014934:	ee75 5aaa 	vadd.f32	s11, s11, s21
 8014938:	ee36 6a0b 	vadd.f32	s12, s12, s22
 801493c:	ee76 6aa9 	vadd.f32	s13, s13, s19
 8014940:	ee37 7a09 	vadd.f32	s14, s14, s18
 8014944:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8014948:	edc4 3a01 	vstr	s7, [r4, #4]
 801494c:	ed84 4a02 	vstr	s8, [r4, #8]
 8014950:	edc4 4a03 	vstr	s9, [r4, #12]
 8014954:	ed84 5a04 	vstr	s10, [r4, #16]
 8014958:	edc4 5a05 	vstr	s11, [r4, #20]
 801495c:	ed84 6a06 	vstr	s12, [r4, #24]
 8014960:	edc4 6a07 	vstr	s13, [r4, #28]
 8014964:	ed84 7a08 	vstr	s14, [r4, #32]
 8014968:	edc4 7a09 	vstr	s15, [r4, #36]	@ 0x24
 801496c:	f7ff b9cc 	b.w	8013d08 <kf_update+0xc0>
 8014970:	eeb0 9a68 	vmov.f32	s18, s17
 8014974:	e7c4      	b.n	8014900 <kf_update+0xcb8>
 8014976:	eef0 aa68 	vmov.f32	s21, s17
 801497a:	e76c      	b.n	8014856 <kf_update+0xc0e>
 801497c:	eeb0 9a68 	vmov.f32	s18, s17
 8014980:	eef0 9a68 	vmov.f32	s19, s17
 8014984:	e7bc      	b.n	8014900 <kf_update+0xcb8>
 8014986:	eeb0 ba69 	vmov.f32	s22, s19
 801498a:	e795      	b.n	80148b8 <kf_update+0xc70>
 801498c:	eeb0 da67 	vmov.f32	s26, s15
 8014990:	eeb0 aa4c 	vmov.f32	s20, s24
 8014994:	e74f      	b.n	8014836 <kf_update+0xbee>
 8014996:	eeb0 aa4c 	vmov.f32	s20, s24
 801499a:	e73f      	b.n	801481c <kf_update+0xbd4>
 801499c:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80149a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149a4:	f43f af3a 	beq.w	801481c <kf_update+0xbd4>
 80149a8:	eeb5 da40 	vcmp.f32	s26, #0.0
 80149ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149b0:	ee68 7a8a 	vmul.f32	s15, s17, s20
 80149b4:	f47f ad93 	bne.w	80144de <kf_update+0x896>
 80149b8:	e7e8      	b.n	801498c <kf_update+0xd44>
 80149ba:	ee67 7aad 	vmul.f32	s15, s15, s27
 80149be:	f7ff bb26 	b.w	801400e <kf_update+0x3c6>
 80149c2:	eef5 ca40 	vcmp.f32	s25, #0.0
 80149c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149ca:	ed5f 7a4d 	vldr	s15, [pc, #-308]	@ 8014898 <kf_update+0xc50>
 80149ce:	ee28 7a8d 	vmul.f32	s14, s17, s26
 80149d2:	f43f ad8e 	beq.w	80144f2 <kf_update+0x8aa>
 80149d6:	eeb0 da67 	vmov.f32	s26, s15
 80149da:	eef5 aa40 	vcmp.f32	s21, #0.0
 80149de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149e2:	ee68 7aac 	vmul.f32	s15, s17, s25
 80149e6:	d126      	bne.n	8014a36 <kf_update+0xdee>
 80149e8:	eef0 aa67 	vmov.f32	s21, s15
 80149ec:	eef0 ca47 	vmov.f32	s25, s14
 80149f0:	e731      	b.n	8014856 <kf_update+0xc0e>
 80149f2:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80149f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149fa:	ed5f ba59 	vldr	s23, [pc, #-356]	@ 8014898 <kf_update+0xc50>
 80149fe:	ee2c ca28 	vmul.f32	s24, s24, s17
 8014a02:	f47f ad64 	bne.w	80144ce <kf_update+0x886>
 8014a06:	e7c6      	b.n	8014996 <kf_update+0xd4e>
 8014a08:	eef5 9a40 	vcmp.f32	s19, #0.0
 8014a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a10:	ed1f 7a5f 	vldr	s14, [pc, #-380]	@ 8014898 <kf_update+0xc50>
 8014a14:	ee68 7a8b 	vmul.f32	s15, s17, s22
 8014a18:	f43f af4a 	beq.w	80148b0 <kf_update+0xc68>
 8014a1c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8014a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a24:	eeb0 ba47 	vmov.f32	s22, s14
 8014a28:	ee28 7aa9 	vmul.f32	s14, s17, s19
 8014a2c:	f43f ad95 	beq.w	801455a <kf_update+0x912>
 8014a30:	eef0 9a67 	vmov.f32	s19, s15
 8014a34:	e74c      	b.n	80148d0 <kf_update+0xc88>
 8014a36:	eef0 ca47 	vmov.f32	s25, s14
 8014a3a:	e56c      	b.n	8014516 <kf_update+0x8ce>
 8014a3c:	ed1f 7a6a 	vldr	s14, [pc, #-424]	@ 8014898 <kf_update+0xc50>
 8014a40:	e7cb      	b.n	80149da <kf_update+0xd92>
 8014a42:	ed1f ca6b 	vldr	s24, [pc, #-428]	@ 8014898 <kf_update+0xc50>
 8014a46:	eeb5 da40 	vcmp.f32	s26, #0.0
 8014a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a4e:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8014a52:	eef0 ba4c 	vmov.f32	s23, s24
 8014a56:	f47f ad42 	bne.w	80144de <kf_update+0x896>
 8014a5a:	e797      	b.n	801498c <kf_update+0xd44>

08014a5c <q2hpr>:
 8014a5c:	b510      	push	{r4, lr}
 8014a5e:	edd0 7a00 	vldr	s15, [r0]
 8014a62:	edd0 5a01 	vldr	s11, [r0, #4]
 8014a66:	ed90 7a02 	vldr	s14, [r0, #8]
 8014a6a:	ed90 5a03 	vldr	s10, [r0, #12]
 8014a6e:	ee67 0aa7 	vmul.f32	s1, s15, s15
 8014a72:	ee25 6aa5 	vmul.f32	s12, s11, s11
 8014a76:	ee65 6a87 	vmul.f32	s13, s11, s14
 8014a7a:	ee25 0a65 	vnmul.f32	s0, s10, s11
 8014a7e:	ed2d 8b08 	vpush	{d8-d11}
 8014a82:	eea7 0a87 	vfma.f32	s0, s15, s14
 8014a86:	460c      	mov	r4, r1
 8014a88:	eee7 6a85 	vfma.f32	s13, s15, s10
 8014a8c:	ee36 aa06 	vadd.f32	s20, s12, s12
 8014a90:	ee70 0aa0 	vadd.f32	s1, s1, s1
 8014a94:	ee27 6a07 	vmul.f32	s12, s14, s14
 8014a98:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014a9c:	ee27 7a05 	vmul.f32	s14, s14, s10
 8014aa0:	ee30 ba8a 	vadd.f32	s22, s1, s20
 8014aa4:	eef7 ba00 	vmov.f32	s23, #112	@ 0x3f800000  1.0
 8014aa8:	ee76 aa06 	vadd.f32	s21, s12, s12
 8014aac:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8014ab0:	ee77 8a07 	vadd.f32	s17, s14, s14
 8014ab4:	ee70 9a00 	vadd.f32	s19, s0, s0
 8014ab8:	ee36 9aa6 	vadd.f32	s18, s13, s13
 8014abc:	ee3b bacb 	vsub.f32	s22, s23, s22
 8014ac0:	bb6a      	cbnz	r2, 8014b1e <q2hpr+0xc2>
 8014ac2:	ee70 0aaa 	vadd.f32	s1, s1, s21
 8014ac6:	ee38 0a68 	vsub.f32	s0, s16, s17
 8014aca:	ee7b 0ae0 	vsub.f32	s1, s23, s1
 8014ace:	f008 f96b 	bl	801cda8 <atan2f>
 8014ad2:	eeb0 8a40 	vmov.f32	s16, s0
 8014ad6:	eeb0 0a49 	vmov.f32	s0, s18
 8014ada:	f008 f939 	bl	801cd50 <asinf>
 8014ade:	eef0 0a4b 	vmov.f32	s1, s22
 8014ae2:	eef0 8a40 	vmov.f32	s17, s0
 8014ae6:	eeb0 0a69 	vmov.f32	s0, s19
 8014aea:	f008 f95d 	bl	801cda8 <atan2f>
 8014aee:	eef1 8a68 	vneg.f32	s17, s17
 8014af2:	eeb0 9a40 	vmov.f32	s18, s0
 8014af6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014afe:	ed84 8a00 	vstr	s16, [r4]
 8014b02:	ed84 9a02 	vstr	s18, [r4, #8]
 8014b06:	edc4 8a01 	vstr	s17, [r4, #4]
 8014b0a:	d505      	bpl.n	8014b18 <q2hpr+0xbc>
 8014b0c:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8014b5c <q2hpr+0x100>
 8014b10:	ee38 8a27 	vadd.f32	s16, s16, s15
 8014b14:	ed84 8a00 	vstr	s16, [r4]
 8014b18:	ecbd 8b08 	vpop	{d8-d11}
 8014b1c:	bd10      	pop	{r4, pc}
 8014b1e:	eeb0 0a69 	vmov.f32	s0, s19
 8014b22:	f008 f915 	bl	801cd50 <asinf>
 8014b26:	eef0 0a4b 	vmov.f32	s1, s22
 8014b2a:	eef0 7a40 	vmov.f32	s15, s0
 8014b2e:	eeb0 0a49 	vmov.f32	s0, s18
 8014b32:	eeb0 9a67 	vmov.f32	s18, s15
 8014b36:	f008 f937 	bl	801cda8 <atan2f>
 8014b3a:	ee7a 0a2a 	vadd.f32	s1, s20, s21
 8014b3e:	eeb0 7a40 	vmov.f32	s14, s0
 8014b42:	ee38 0a28 	vadd.f32	s0, s16, s17
 8014b46:	ee7b 0ae0 	vsub.f32	s1, s23, s1
 8014b4a:	eeb1 0a40 	vneg.f32	s0, s0
 8014b4e:	eef1 8a47 	vneg.f32	s17, s14
 8014b52:	f008 f929 	bl	801cda8 <atan2f>
 8014b56:	eeb0 8a40 	vmov.f32	s16, s0
 8014b5a:	e7cc      	b.n	8014af6 <q2hpr+0x9a>
 8014b5c:	40c90fdb 	.word	0x40c90fdb

08014b60 <llEvaluate.constprop.0>:
 8014b60:	ed92 7a00 	vldr	s14, [r2]
 8014b64:	edd0 7a00 	vldr	s15, [r0]
 8014b68:	edd0 1a04 	vldr	s3, [r0, #16]
 8014b6c:	ed92 6a01 	vldr	s12, [r2, #4]
 8014b70:	ed90 3a05 	vldr	s6, [r0, #20]
 8014b74:	ed90 2a08 	vldr	s4, [r0, #32]
 8014b78:	edd0 2a0c 	vldr	s5, [r0, #48]	@ 0x30
 8014b7c:	edd0 3a09 	vldr	s7, [r0, #36]	@ 0x24
 8014b80:	edd0 4a0a 	vldr	s9, [r0, #40]	@ 0x28
 8014b84:	ed90 4a0d 	vldr	s8, [r0, #52]	@ 0x34
 8014b88:	ed90 5a0e 	vldr	s10, [r0, #56]	@ 0x38
 8014b8c:	edd0 5a0f 	vldr	s11, [r0, #60]	@ 0x3c
 8014b90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b98:	b084      	sub	sp, #16
 8014b9a:	f10d 0810 	add.w	r8, sp, #16
 8014b9e:	f101 0e10 	add.w	lr, r1, #16
 8014ba2:	4606      	mov	r6, r0
 8014ba4:	2703      	movs	r7, #3
 8014ba6:	2504      	movs	r5, #4
 8014ba8:	ed92 7a02 	vldr	s14, [r2, #8]
 8014bac:	edd2 7a03 	vldr	s15, [r2, #12]
 8014bb0:	edcd 6a00 	vstr	s13, [sp]
 8014bb4:	eea6 6ae1 	vfms.f32	s12, s13, s3
 8014bb8:	eea6 7ac2 	vfms.f32	s14, s13, s4
 8014bbc:	eee6 7ae2 	vfms.f32	s15, s13, s5
 8014bc0:	eec6 6a03 	vdiv.f32	s13, s12, s6
 8014bc4:	eea6 7ae3 	vfms.f32	s14, s13, s7
 8014bc8:	eee4 7a66 	vfms.f32	s15, s8, s13
 8014bcc:	edcd 6a01 	vstr	s13, [sp, #4]
 8014bd0:	eec7 6a24 	vdiv.f32	s13, s14, s9
 8014bd4:	eee5 7a66 	vfms.f32	s15, s10, s13
 8014bd8:	edcd 6a02 	vstr	s13, [sp, #8]
 8014bdc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8014be0:	ed8d 7a03 	vstr	s14, [sp, #12]
 8014be4:	ed78 7a01 	vldmdb	r8!, {s15}
 8014be8:	2d04      	cmp	r5, #4
 8014bea:	b26b      	sxtb	r3, r5
 8014bec:	ed6e 7a01 	vstmdb	lr!, {s15}
 8014bf0:	d023      	beq.n	8014c3a <llEvaluate.constprop.0+0xda>
 8014bf2:	00bc      	lsls	r4, r7, #2
 8014bf4:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 8014bf8:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8014bfc:	4422      	add	r2, r4
 8014bfe:	edd2 6a00 	vldr	s13, [r2]
 8014c02:	ed9c 7a00 	vldr	s14, [ip]
 8014c06:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8014c0a:	3301      	adds	r3, #1
 8014c0c:	b2da      	uxtb	r2, r3
 8014c0e:	2a04      	cmp	r2, #4
 8014c10:	b25b      	sxtb	r3, r3
 8014c12:	edce 7a00 	vstr	s15, [lr]
 8014c16:	d1ed      	bne.n	8014bf4 <llEvaluate.constprop.0+0x94>
 8014c18:	edd6 6a0f 	vldr	s13, [r6, #60]	@ 0x3c
 8014c1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014c20:	3d01      	subs	r5, #1
 8014c22:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 8014c26:	f107 37ff 	add.w	r7, r7, #4294967295	@ 0xffffffff
 8014c2a:	f1a6 0614 	sub.w	r6, r6, #20
 8014c2e:	ed8e 7a00 	vstr	s14, [lr]
 8014c32:	d1d7      	bne.n	8014be4 <llEvaluate.constprop.0+0x84>
 8014c34:	b004      	add	sp, #16
 8014c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c3a:	edd6 6a0f 	vldr	s13, [r6, #60]	@ 0x3c
 8014c3e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014c42:	3f01      	subs	r7, #1
 8014c44:	3e14      	subs	r6, #20
 8014c46:	2503      	movs	r5, #3
 8014c48:	ed8e 7a00 	vstr	s14, [lr]
 8014c4c:	e7ca      	b.n	8014be4 <llEvaluate.constprop.0+0x84>
 8014c4e:	bf00      	nop

08014c50 <getMagStats.constprop.0>:
 8014c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c54:	4d72      	ldr	r5, [pc, #456]	@ (8014e20 <getMagStats.constprop.0+0x1d0>)
 8014c56:	2400      	movs	r4, #0
 8014c58:	601c      	str	r4, [r3, #0]
 8014c5a:	6014      	str	r4, [r2, #0]
 8014c5c:	f895 40a1 	ldrb.w	r4, [r5, #161]	@ 0xa1
 8014c60:	f995 60a2 	ldrsb.w	r6, [r5, #162]	@ 0xa2
 8014c64:	4684      	mov	ip, r0
 8014c66:	f895 00a0 	ldrb.w	r0, [r5, #160]	@ 0xa0
 8014c6a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014c6e:	42a0      	cmp	r0, r4
 8014c70:	eec7 5a80 	vdiv.f32	s11, s15, s0
 8014c74:	f106 0601 	add.w	r6, r6, #1
 8014c78:	ee04 0a90 	vmov	s9, r0
 8014c7c:	f000 80c6 	beq.w	8014e0c <getMagStats.constprop.0+0x1bc>
 8014c80:	1a36      	subs	r6, r6, r0
 8014c82:	fb96 f7f4 	sdiv	r7, r6, r4
 8014c86:	fb04 6617 	mls	r6, r4, r7, r6
 8014c8a:	2e00      	cmp	r6, #0
 8014c8c:	bfb8      	it	lt
 8014c8e:	1936      	addlt	r6, r6, r4
 8014c90:	fa0f fe86 	sxth.w	lr, r6
 8014c94:	ed9f 5a63 	vldr	s10, [pc, #396]	@ 8014e24 <getMagStats.constprop.0+0x1d4>
 8014c98:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8014c9c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8014ca0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8014ca4:	2800      	cmp	r0, #0
 8014ca6:	f000 80b8 	beq.w	8014e1a <getMagStats.constprop.0+0x1ca>
 8014caa:	eb00 090e 	add.w	r9, r0, lr
 8014cae:	ed9f 3a5e 	vldr	s6, [pc, #376]	@ 8014e28 <getMagStats.constprop.0+0x1d8>
 8014cb2:	f8bc 8000 	ldrh.w	r8, [ip]
 8014cb6:	f8bc 7002 	ldrh.w	r7, [ip, #2]
 8014cba:	f8bc 6004 	ldrh.w	r6, [ip, #4]
 8014cbe:	2000      	movs	r0, #0
 8014cc0:	e001      	b.n	8014cc6 <getMagStats.constprop.0+0x76>
 8014cc2:	ed92 3a00 	vldr	s6, [r2]
 8014cc6:	fb9e fcf4 	sdiv	ip, lr, r4
 8014cca:	fb04 ec1c 	mls	ip, r4, ip, lr
 8014cce:	fa5f fc8c 	uxtb.w	ip, ip
 8014cd2:	f10c 0c04 	add.w	ip, ip, #4
 8014cd6:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8014cda:	edd1 3a00 	vldr	s7, [r1]
 8014cde:	f8bc a0a2 	ldrh.w	sl, [ip, #162]	@ 0xa2
 8014ce2:	f8bc b0a4 	ldrh.w	fp, [ip, #164]	@ 0xa4
 8014ce6:	f8bc c0a6 	ldrh.w	ip, [ip, #166]	@ 0xa6
 8014cea:	ed91 4a04 	vldr	s8, [r1, #16]
 8014cee:	ed91 6a08 	vldr	s12, [r1, #32]
 8014cf2:	ebaa 0a08 	sub.w	sl, sl, r8
 8014cf6:	ebab 0b07 	sub.w	fp, fp, r7
 8014cfa:	fa0f fa8a 	sxth.w	sl, sl
 8014cfe:	ee07 aa10 	vmov	s14, sl
 8014d02:	fa0f fa8b 	sxth.w	sl, fp
 8014d06:	ee06 aa90 	vmov	s13, sl
 8014d0a:	ebac 0c06 	sub.w	ip, ip, r6
 8014d0e:	fa0f fc8c 	sxth.w	ip, ip
 8014d12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014d16:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014d1a:	ee07 ca90 	vmov	s15, ip
 8014d1e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8014d22:	ee66 6a84 	vmul.f32	s13, s13, s8
 8014d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d2a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014d2e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8014d32:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014d36:	ee17 ca10 	vmov	ip, s14
 8014d3a:	ee16 ba90 	vmov	fp, s13
 8014d3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014d42:	fa0f fc8c 	sxth.w	ip, ip
 8014d46:	fb1b fb0b 	smulbb	fp, fp, fp
 8014d4a:	fb0c bb0c 	mla	fp, ip, ip, fp
 8014d4e:	ee17 ca90 	vmov	ip, s15
 8014d52:	fa0f fc8c 	sxth.w	ip, ip
 8014d56:	fb0c bc0c 	mla	ip, ip, ip, fp
 8014d5a:	ee07 ca90 	vmov	s15, ip
 8014d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d62:	f10e 0e01 	add.w	lr, lr, #1
 8014d66:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8014d6a:	f100 0a01 	add.w	sl, r0, #1
 8014d6e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014d72:	ee17 ca10 	vmov	ip, s14
 8014d76:	fa0f fc8c 	sxth.w	ip, ip
 8014d7a:	ee07 ca10 	vmov	s14, ip
 8014d7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014d82:	ee77 7a45 	vsub.f32	s15, s14, s10
 8014d86:	ee37 7a03 	vadd.f32	s14, s14, s6
 8014d8a:	eef0 7ae7 	vabs.f32	s15, s15
 8014d8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014d92:	ed82 7a00 	vstr	s14, [r2]
 8014d96:	ee17 ca90 	vmov	ip, s15
 8014d9a:	fa0f fc8c 	sxth.w	ip, ip
 8014d9e:	fb0c fb0c 	mul.w	fp, ip, ip
 8014da2:	ee07 ba90 	vmov	s15, fp
 8014da6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014daa:	ee07 ca90 	vmov	s15, ip
 8014dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014db2:	eef4 5ae7 	vcmpe.f32	s11, s15
 8014db6:	edd3 7a00 	vldr	s15, [r3]
 8014dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014dc2:	bf48      	it	mi
 8014dc4:	fa5f f08a 	uxtbmi.w	r0, sl
 8014dc8:	45ce      	cmp	lr, r9
 8014dca:	edc3 7a00 	vstr	s15, [r3]
 8014dce:	f47f af78 	bne.w	8014cc2 <getMagStats.constprop.0+0x72>
 8014dd2:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8014dd6:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8014e2c <getMagStats.constprop.0+0x1dc>
 8014dda:	eec7 6aa4 	vdiv.f32	s13, s15, s9
 8014dde:	eef1 7ae6 	vsqrt.f32	s15, s13
 8014de2:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dee:	bfb8      	it	lt
 8014df0:	eef0 7a47 	vmovlt.f32	s15, s14
 8014df4:	edc3 7a00 	vstr	s15, [r3]
 8014df8:	edd2 7a00 	vldr	s15, [r2]
 8014dfc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014e00:	eec0 7a24 	vdiv.f32	s15, s0, s9
 8014e04:	edc2 7a00 	vstr	s15, [r2]
 8014e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e0c:	fb96 f7f0 	sdiv	r7, r6, r0
 8014e10:	fb00 6617 	mls	r6, r0, r7, r6
 8014e14:	fa0f fe86 	sxth.w	lr, r6
 8014e18:	e73c      	b.n	8014c94 <getMagStats.constprop.0+0x44>
 8014e1a:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8014e28 <getMagStats.constprop.0+0x1d8>
 8014e1e:	e7d8      	b.n	8014dd2 <getMagStats.constprop.0+0x182>
 8014e20:	2000038c 	.word	0x2000038c
 8014e24:	423c0000 	.word	0x423c0000
 8014e28:	00000000 	.word	0x00000000
 8014e2c:	3f59999a 	.word	0x3f59999a

08014e30 <MEMS_updateMagBufferIndex.constprop.0>:
 8014e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e34:	ed2d 8b02 	vpush	{d8}
 8014e38:	f8df 81b0 	ldr.w	r8, [pc, #432]	@ 8014fec <MEMS_updateMagBufferIndex.constprop.0+0x1bc>
 8014e3c:	f898 10a0 	ldrb.w	r1, [r8, #160]	@ 0xa0
 8014e40:	f898 a0a1 	ldrb.w	sl, [r8, #161]	@ 0xa1
 8014e44:	f998 30a2 	ldrsb.w	r3, [r8, #162]	@ 0xa2
 8014e48:	2200      	movs	r2, #0
 8014e4a:	4551      	cmp	r1, sl
 8014e4c:	e9c8 222a 	strd	r2, r2, [r8, #168]	@ 0xa8
 8014e50:	e9c8 222c 	strd	r2, r2, [r8, #176]	@ 0xb0
 8014e54:	e9c8 222e 	strd	r2, r2, [r8, #184]	@ 0xb8
 8014e58:	b089      	sub	sp, #36	@ 0x24
 8014e5a:	4606      	mov	r6, r0
 8014e5c:	f103 0301 	add.w	r3, r3, #1
 8014e60:	f000 80be 	beq.w	8014fe0 <MEMS_updateMagBufferIndex.constprop.0+0x1b0>
 8014e64:	1a5b      	subs	r3, r3, r1
 8014e66:	fb93 f2fa 	sdiv	r2, r3, sl
 8014e6a:	fb0a 3312 	mls	r3, sl, r2, r3
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	bfb8      	it	lt
 8014e72:	4453      	addlt	r3, sl
 8014e74:	b21f      	sxth	r7, r3
 8014e76:	2900      	cmp	r1, #0
 8014e78:	f000 80aa 	beq.w	8014fd0 <MEMS_updateMagBufferIndex.constprop.0+0x1a0>
 8014e7c:	2000      	movs	r0, #0
 8014e7e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014e82:	19cb      	adds	r3, r1, r7
 8014e84:	ee87 8a80 	vdiv.f32	s16, s15, s0
 8014e88:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8014e8c:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8014e90:	9307      	str	r3, [sp, #28]
 8014e92:	4683      	mov	fp, r0
 8014e94:	9002      	str	r0, [sp, #8]
 8014e96:	f04f 0901 	mov.w	r9, #1
 8014e9a:	4635      	mov	r5, r6
 8014e9c:	e01a      	b.n	8014ed4 <MEMS_updateMagBufferIndex.constprop.0+0xa4>
 8014e9e:	9a02      	ldr	r2, [sp, #8]
 8014ea0:	3c20      	subs	r4, #32
 8014ea2:	fa09 f404 	lsl.w	r4, r9, r4
 8014ea6:	4322      	orrs	r2, r4
 8014ea8:	2e1f      	cmp	r6, #31
 8014eaa:	9202      	str	r2, [sp, #8]
 8014eac:	d96e      	bls.n	8014f8c <MEMS_updateMagBufferIndex.constprop.0+0x15c>
 8014eae:	9906      	ldr	r1, [sp, #24]
 8014eb0:	f1a6 0220 	sub.w	r2, r6, #32
 8014eb4:	fa09 f202 	lsl.w	r2, r9, r2
 8014eb8:	4311      	orrs	r1, r2
 8014eba:	2b1f      	cmp	r3, #31
 8014ebc:	9106      	str	r1, [sp, #24]
 8014ebe:	d96c      	bls.n	8014f9a <MEMS_updateMagBufferIndex.constprop.0+0x16a>
 8014ec0:	9a04      	ldr	r2, [sp, #16]
 8014ec2:	3b20      	subs	r3, #32
 8014ec4:	fa09 f303 	lsl.w	r3, r9, r3
 8014ec8:	431a      	orrs	r2, r3
 8014eca:	9b07      	ldr	r3, [sp, #28]
 8014ecc:	9204      	str	r2, [sp, #16]
 8014ece:	3701      	adds	r7, #1
 8014ed0:	429f      	cmp	r7, r3
 8014ed2:	d06b      	beq.n	8014fac <MEMS_updateMagBufferIndex.constprop.0+0x17c>
 8014ed4:	fb97 f3fa 	sdiv	r3, r7, sl
 8014ed8:	fb0a 7313 	mls	r3, sl, r3, r7
 8014edc:	b2db      	uxtb	r3, r3
 8014ede:	1d1e      	adds	r6, r3, #4
 8014ee0:	eb08 02c6 	add.w	r2, r8, r6, lsl #3
 8014ee4:	f9b2 20a2 	ldrsh.w	r2, [r2, #162]	@ 0xa2
 8014ee8:	fb92 f0f5 	sdiv	r0, r2, r5
 8014eec:	fb05 2210 	mls	r2, r5, r0, r2
 8014ef0:	2a00      	cmp	r2, #0
 8014ef2:	bfb8      	it	lt
 8014ef4:	1952      	addlt	r2, r2, r5
 8014ef6:	b213      	sxth	r3, r2
 8014ef8:	ee00 3a10 	vmov	s0, r3
 8014efc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8014f00:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014f04:	f008 fa4c 	bl	801d3a0 <roundf>
 8014f08:	eb08 02c6 	add.w	r2, r8, r6, lsl #3
 8014f0c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8014f10:	f9b2 20a4 	ldrsh.w	r2, [r2, #164]	@ 0xa4
 8014f14:	fb92 f0f5 	sdiv	r0, r2, r5
 8014f18:	fb05 2210 	mls	r2, r5, r0, r2
 8014f1c:	2a00      	cmp	r2, #0
 8014f1e:	bfb8      	it	lt
 8014f20:	1952      	addlt	r2, r2, r5
 8014f22:	b213      	sxth	r3, r2
 8014f24:	ee00 3a10 	vmov	s0, r3
 8014f28:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8014f2c:	edcd 7a01 	vstr	s15, [sp, #4]
 8014f30:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014f34:	f008 fa34 	bl	801d3a0 <roundf>
 8014f38:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
 8014f3c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8014f40:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 8014f44:	fb93 f2f5 	sdiv	r2, r3, r5
 8014f48:	fb05 3312 	mls	r3, r5, r2, r3
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	bfb8      	it	lt
 8014f50:	195b      	addlt	r3, r3, r5
 8014f52:	b21b      	sxth	r3, r3
 8014f54:	ee00 3a10 	vmov	s0, r3
 8014f58:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8014f5c:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8014f60:	edcd 7a01 	vstr	s15, [sp, #4]
 8014f64:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014f68:	f008 fa1a 	bl	801d3a0 <roundf>
 8014f6c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8014f70:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8014f74:	edcd 7a01 	vstr	s15, [sp, #4]
 8014f78:	2c1f      	cmp	r4, #31
 8014f7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014f7e:	d88e      	bhi.n	8014e9e <MEMS_updateMagBufferIndex.constprop.0+0x6e>
 8014f80:	fa09 f404 	lsl.w	r4, r9, r4
 8014f84:	2e1f      	cmp	r6, #31
 8014f86:	ea4b 0b04 	orr.w	fp, fp, r4
 8014f8a:	d890      	bhi.n	8014eae <MEMS_updateMagBufferIndex.constprop.0+0x7e>
 8014f8c:	9905      	ldr	r1, [sp, #20]
 8014f8e:	fa09 f206 	lsl.w	r2, r9, r6
 8014f92:	4311      	orrs	r1, r2
 8014f94:	2b1f      	cmp	r3, #31
 8014f96:	9105      	str	r1, [sp, #20]
 8014f98:	d892      	bhi.n	8014ec0 <MEMS_updateMagBufferIndex.constprop.0+0x90>
 8014f9a:	9a03      	ldr	r2, [sp, #12]
 8014f9c:	fa09 f303 	lsl.w	r3, r9, r3
 8014fa0:	431a      	orrs	r2, r3
 8014fa2:	9b07      	ldr	r3, [sp, #28]
 8014fa4:	9203      	str	r2, [sp, #12]
 8014fa6:	3701      	adds	r7, #1
 8014fa8:	429f      	cmp	r7, r3
 8014faa:	d193      	bne.n	8014ed4 <MEMS_updateMagBufferIndex.constprop.0+0xa4>
 8014fac:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8014fb0:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 8014fb4:	e9c8 322c 	strd	r3, r2, [r8, #176]	@ 0xb0
 8014fb8:	9b02      	ldr	r3, [sp, #8]
 8014fba:	f8c8 b0ac 	str.w	fp, [r8, #172]	@ 0xac
 8014fbe:	e9c8 012e 	strd	r0, r1, [r8, #184]	@ 0xb8
 8014fc2:	f8c8 30a8 	str.w	r3, [r8, #168]	@ 0xa8
 8014fc6:	b009      	add	sp, #36	@ 0x24
 8014fc8:	ecbd 8b02 	vpop	{d8}
 8014fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fd0:	23ff      	movs	r3, #255	@ 0xff
 8014fd2:	f888 30a2 	strb.w	r3, [r8, #162]	@ 0xa2
 8014fd6:	b009      	add	sp, #36	@ 0x24
 8014fd8:	ecbd 8b02 	vpop	{d8}
 8014fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fe0:	fb93 f2f1 	sdiv	r2, r3, r1
 8014fe4:	fb01 3312 	mls	r3, r1, r2, r3
 8014fe8:	b21f      	sxth	r7, r3
 8014fea:	e744      	b.n	8014e76 <MEMS_updateMagBufferIndex.constprop.0+0x46>
 8014fec:	2000038c 	.word	0x2000038c

08014ff0 <output_update>:
 8014ff0:	edd0 7a01 	vldr	s15, [r0, #4]
 8014ff4:	ed90 5a02 	vldr	s10, [r0, #8]
 8014ff8:	ed90 7a00 	vldr	s14, [r0]
 8014ffc:	edd0 5a03 	vldr	s11, [r0, #12]
 8015000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015004:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8015008:	ee67 6a85 	vmul.f32	s13, s15, s10
 801500c:	eea7 6a07 	vfma.f32	s12, s14, s14
 8015010:	4615      	mov	r5, r2
 8015012:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8015016:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801501a:	eee7 6a25 	vfma.f32	s13, s14, s11
 801501e:	460f      	mov	r7, r1
 8015020:	461e      	mov	r6, r3
 8015022:	ee27 7a05 	vmul.f32	s14, s14, s10
 8015026:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801502a:	ee37 7a07 	vadd.f32	s14, s14, s14
 801502e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015032:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8015036:	ee36 6a06 	vadd.f32	s12, s12, s12
 801503a:	2a00      	cmp	r2, #0
 801503c:	d14b      	bne.n	80150d6 <output_update+0xe6>
 801503e:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8015042:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015046:	ee35 7ac6 	vsub.f32	s14, s11, s12
 801504a:	eef1 6a66 	vneg.f32	s13, s13
 801504e:	edc3 6a00 	vstr	s13, [r3]
 8015052:	edc3 7a01 	vstr	s15, [r3, #4]
 8015056:	ed83 7a02 	vstr	s14, [r3, #8]
 801505a:	4629      	mov	r1, r5
 801505c:	4604      	mov	r4, r0
 801505e:	f7ff fcfd 	bl	8014a5c <q2hpr>
 8015062:	ed95 7a01 	vldr	s14, [r5, #4]
 8015066:	edd5 7a02 	vldr	s15, [r5, #8]
 801506a:	edd5 6a00 	vldr	s13, [r5]
 801506e:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8015184 <output_update+0x194>
 8015072:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8015188 <output_update+0x198>
 8015076:	ee27 7a06 	vmul.f32	s14, s14, s12
 801507a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801507e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8015082:	ed85 7a01 	vstr	s14, [r5, #4]
 8015086:	edc5 6a00 	vstr	s13, [r5]
 801508a:	edc5 7a02 	vstr	s15, [r5, #8]
 801508e:	ed97 7a01 	vldr	s14, [r7, #4]
 8015092:	edd6 7a00 	vldr	s15, [r6]
 8015096:	6823      	ldr	r3, [r4, #0]
 8015098:	ee77 7a87 	vadd.f32	s15, s15, s14
 801509c:	edc8 7a00 	vstr	s15, [r8]
 80150a0:	ed97 7a00 	vldr	s14, [r7]
 80150a4:	edd6 7a01 	vldr	s15, [r6, #4]
 80150a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80150ac:	edc8 7a01 	vstr	s15, [r8, #4]
 80150b0:	edd6 7a02 	vldr	s15, [r6, #8]
 80150b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80150b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80150bc:	edc8 7a02 	vstr	s15, [r8, #8]
 80150c0:	edd4 7a02 	vldr	s15, [r4, #8]
 80150c4:	6862      	ldr	r2, [r4, #4]
 80150c6:	6022      	str	r2, [r4, #0]
 80150c8:	eef1 7a67 	vneg.f32	s15, s15
 80150cc:	6063      	str	r3, [r4, #4]
 80150ce:	edc4 7a02 	vstr	s15, [r4, #8]
 80150d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150d6:	2a01      	cmp	r2, #1
 80150d8:	d015      	beq.n	8015106 <output_update+0x116>
 80150da:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8015188 <output_update+0x198>
 80150de:	edd5 6a00 	vldr	s13, [r5]
 80150e2:	ed95 7a01 	vldr	s14, [r5, #4]
 80150e6:	edd5 7a02 	vldr	s15, [r5, #8]
 80150ea:	ee66 6a86 	vmul.f32	s13, s13, s12
 80150ee:	ee27 7a06 	vmul.f32	s14, s14, s12
 80150f2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80150f6:	edc5 6a00 	vstr	s13, [r5]
 80150fa:	ed85 7a01 	vstr	s14, [r5, #4]
 80150fe:	edc5 7a02 	vstr	s15, [r5, #8]
 8015102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015106:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801510a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801510e:	ee36 6a65 	vsub.f32	s12, s12, s11
 8015112:	eef1 6a66 	vneg.f32	s13, s13
 8015116:	edc3 7a00 	vstr	s15, [r3]
 801511a:	edc3 6a01 	vstr	s13, [r3, #4]
 801511e:	ed83 6a02 	vstr	s12, [r3, #8]
 8015122:	4629      	mov	r1, r5
 8015124:	f7ff fc9a 	bl	8014a5c <q2hpr>
 8015128:	edd5 6a00 	vldr	s13, [r5]
 801512c:	ed95 7a01 	vldr	s14, [r5, #4]
 8015130:	edd5 7a02 	vldr	s15, [r5, #8]
 8015134:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8015188 <output_update+0x198>
 8015138:	ee27 7a06 	vmul.f32	s14, s14, s12
 801513c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015140:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015144:	ed85 7a01 	vstr	s14, [r5, #4]
 8015148:	edc5 6a00 	vstr	s13, [r5]
 801514c:	edc5 7a02 	vstr	s15, [r5, #8]
 8015150:	ed97 7a00 	vldr	s14, [r7]
 8015154:	edd6 7a00 	vldr	s15, [r6]
 8015158:	ee77 7a87 	vadd.f32	s15, s15, s14
 801515c:	edc8 7a00 	vstr	s15, [r8]
 8015160:	ed97 7a01 	vldr	s14, [r7, #4]
 8015164:	edd6 7a01 	vldr	s15, [r6, #4]
 8015168:	ee77 7a87 	vadd.f32	s15, s15, s14
 801516c:	edc8 7a01 	vstr	s15, [r8, #4]
 8015170:	edd6 7a02 	vldr	s15, [r6, #8]
 8015174:	ed97 7a02 	vldr	s14, [r7, #8]
 8015178:	ee77 7a87 	vadd.f32	s15, s15, s14
 801517c:	edc8 7a02 	vstr	s15, [r8, #8]
 8015180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015184:	c2652ee1 	.word	0xc2652ee1
 8015188:	42652ee1 	.word	0x42652ee1

0801518c <MFX_emptyAttitude>:
 801518c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015190:	ed2d 8b02 	vpush	{d8}
 8015194:	4fe9      	ldr	r7, [pc, #932]	@ (801553c <MFX_emptyAttitude+0x3b0>)
 8015196:	eddf 8aea 	vldr	s17, [pc, #936]	@ 8015540 <MFX_emptyAttitude+0x3b4>
 801519a:	f6ad 4dd4 	subw	sp, sp, #3284	@ 0xcd4
 801519e:	f04f 0800 	mov.w	r8, #0
 80151a2:	f50d 64d7 	add.w	r4, sp, #1720	@ 0x6b8
 80151a6:	46bc      	mov	ip, r7
 80151a8:	e9c4 8800 	strd	r8, r8, [r4]
 80151ac:	f83c 3b04 	ldrh.w	r3, [ip], #4
 80151b0:	f8c4 8008 	str.w	r8, [r4, #8]
 80151b4:	f88d 854a 	strb.w	r8, [sp, #1354]	@ 0x54a
 80151b8:	f8ad 3548 	strh.w	r3, [sp, #1352]	@ 0x548
 80151bc:	4681      	mov	r9, r0
 80151be:	f8dd 3548 	ldr.w	r3, [sp, #1352]	@ 0x548
 80151c2:	f8ad 30a8 	strh.w	r3, [sp, #168]	@ 0xa8
 80151c6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80151ca:	0c1b      	lsrs	r3, r3, #16
 80151cc:	f88d 30aa 	strb.w	r3, [sp, #170]	@ 0xaa
 80151d0:	ab2b      	add	r3, sp, #172	@ 0xac
 80151d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80151d6:	ab2e      	add	r3, sp, #184	@ 0xb8
 80151d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80151dc:	ab31      	add	r3, sp, #196	@ 0xc4
 80151de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80151e2:	ab34      	add	r3, sp, #208	@ 0xd0
 80151e4:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 80151e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80151ec:	ab37      	add	r3, sp, #220	@ 0xdc
 80151ee:	edcd 8a08 	vstr	s17, [sp, #32]
 80151f2:	edcd 8a09 	vstr	s17, [sp, #36]	@ 0x24
 80151f6:	edcd 8a0a 	vstr	s17, [sp, #40]	@ 0x28
 80151fa:	ed8d 8a0b 	vstr	s16, [sp, #44]	@ 0x2c
 80151fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015202:	ab3a      	add	r3, sp, #232	@ 0xe8
 8015204:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015208:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801520c:	f10d 0e44 	add.w	lr, sp, #68	@ 0x44
 8015210:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015214:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015218:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801521c:	f44f 75b4 	mov.w	r5, #360	@ 0x168
 8015220:	f8dc 3000 	ldr.w	r3, [ip]
 8015224:	f8ce 3000 	str.w	r3, [lr]
 8015228:	462a      	mov	r2, r5
 801522a:	4641      	mov	r1, r8
 801522c:	4620      	mov	r0, r4
 801522e:	f00a fdb2 	bl	801fd96 <memset>
 8015232:	f44f 56f0 	mov.w	r6, #7680	@ 0x1e00
 8015236:	462a      	mov	r2, r5
 8015238:	4621      	mov	r1, r4
 801523a:	a840      	add	r0, sp, #256	@ 0x100
 801523c:	f8ad 60f8 	strh.w	r6, [sp, #248]	@ 0xf8
 8015240:	f00a fed3 	bl	801ffea <memcpy>
 8015244:	462a      	mov	r2, r5
 8015246:	4641      	mov	r1, r8
 8015248:	4620      	mov	r0, r4
 801524a:	ed8d 8a3f 	vstr	s16, [sp, #252]	@ 0xfc
 801524e:	f00a fda2 	bl	801fd96 <memset>
 8015252:	462a      	mov	r2, r5
 8015254:	4621      	mov	r1, r4
 8015256:	a89c      	add	r0, sp, #624	@ 0x270
 8015258:	f8ad 6268 	strh.w	r6, [sp, #616]	@ 0x268
 801525c:	f00a fec5 	bl	801ffea <memcpy>
 8015260:	462a      	mov	r2, r5
 8015262:	4641      	mov	r1, r8
 8015264:	4620      	mov	r0, r4
 8015266:	ed8d 8a9b 	vstr	s16, [sp, #620]	@ 0x26c
 801526a:	f00a fd94 	bl	801fd96 <memset>
 801526e:	462a      	mov	r2, r5
 8015270:	4621      	mov	r1, r4
 8015272:	a8f8      	add	r0, sp, #992	@ 0x3e0
 8015274:	f8ad 63d8 	strh.w	r6, [sp, #984]	@ 0x3d8
 8015278:	f00a feb7 	bl	801ffea <memcpy>
 801527c:	462a      	mov	r2, r5
 801527e:	4641      	mov	r1, r8
 8015280:	4620      	mov	r0, r4
 8015282:	ed8d 8af7 	vstr	s16, [sp, #988]	@ 0x3dc
 8015286:	f00a fd86 	bl	801fd96 <memset>
 801528a:	462a      	mov	r2, r5
 801528c:	4621      	mov	r1, r4
 801528e:	f50d 60aa 	add.w	r0, sp, #1360	@ 0x550
 8015292:	f8ad 6548 	strh.w	r6, [sp, #1352]	@ 0x548
 8015296:	f00a fea8 	bl	801ffea <memcpy>
 801529a:	f04f 0301 	mov.w	r3, #1
 801529e:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 80152a2:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 80152a6:	4ba7      	ldr	r3, [pc, #668]	@ (8015544 <MFX_emptyAttitude+0x3b8>)
 80152a8:	9320      	str	r3, [sp, #128]	@ 0x80
 80152aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80152ac:	ae0c      	add	r6, sp, #48	@ 0x30
 80152ae:	46b3      	mov	fp, r6
 80152b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80152b2:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80152b6:	e9c4 8800 	strd	r8, r8, [r4]
 80152ba:	e9c4 8802 	strd	r8, r8, [r4, #8]
 80152be:	f8c4 8010 	str.w	r8, [r4, #16]
 80152c2:	f10d 0c6c 	add.w	ip, sp, #108	@ 0x6c
 80152c6:	46a6      	mov	lr, r4
 80152c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80152d0:	f50d 6aa9 	add.w	sl, sp, #1352	@ 0x548
 80152d4:	682d      	ldr	r5, [r5, #0]
 80152d6:	f8cc 5000 	str.w	r5, [ip]
 80152da:	af21      	add	r7, sp, #132	@ 0x84
 80152dc:	ed8a 8a01 	vstr	s16, [sl, #4]
 80152e0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80152e2:	ab1a      	add	r3, sp, #104	@ 0x68
 80152e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80152e8:	abf6      	add	r3, sp, #984	@ 0x3d8
 80152ea:	9300      	str	r3, [sp, #0]
 80152ec:	aa3e      	add	r2, sp, #248	@ 0xf8
 80152ee:	f8c7 8000 	str.w	r8, [r7]
 80152f2:	ab9a      	add	r3, sp, #616	@ 0x268
 80152f4:	a911      	add	r1, sp, #68	@ 0x44
 80152f6:	9403      	str	r4, [sp, #12]
 80152f8:	2001      	movs	r0, #1
 80152fa:	f7fd ffe7 	bl	80132cc <DataHist_parameters>
 80152fe:	4b92      	ldr	r3, [pc, #584]	@ (8015548 <MFX_emptyAttitude+0x3bc>)
 8015300:	f8c9 3018 	str.w	r3, [r9, #24]
 8015304:	4b91      	ldr	r3, [pc, #580]	@ (801554c <MFX_emptyAttitude+0x3c0>)
 8015306:	f8c9 301c 	str.w	r3, [r9, #28]
 801530a:	4b91      	ldr	r3, [pc, #580]	@ (8015550 <MFX_emptyAttitude+0x3c4>)
 801530c:	f8c9 3020 	str.w	r3, [r9, #32]
 8015310:	4b90      	ldr	r3, [pc, #576]	@ (8015554 <MFX_emptyAttitude+0x3c8>)
 8015312:	f8c9 3024 	str.w	r3, [r9, #36]	@ 0x24
 8015316:	4b90      	ldr	r3, [pc, #576]	@ (8015558 <MFX_emptyAttitude+0x3cc>)
 8015318:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
 801531c:	4b8f      	ldr	r3, [pc, #572]	@ (801555c <MFX_emptyAttitude+0x3d0>)
 801531e:	f8c9 302c 	str.w	r3, [r9, #44]	@ 0x2c
 8015322:	4b8f      	ldr	r3, [pc, #572]	@ (8015560 <MFX_emptyAttitude+0x3d4>)
 8015324:	f8c9 3030 	str.w	r3, [r9, #48]	@ 0x30
 8015328:	f10d 0cac 	add.w	ip, sp, #172	@ 0xac
 801532c:	4b8d      	ldr	r3, [pc, #564]	@ (8015564 <MFX_emptyAttitude+0x3d8>)
 801532e:	f8c9 3034 	str.w	r3, [r9, #52]	@ 0x34
 8015332:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 8015336:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	@ 0xa8
 801533a:	f8a9 3070 	strh.w	r3, [r9, #112]	@ 0x70
 801533e:	f89d 30aa 	ldrb.w	r3, [sp, #170]	@ 0xaa
 8015342:	f889 3072 	strb.w	r3, [r9, #114]	@ 0x72
 8015346:	f240 1301 	movw	r3, #257	@ 0x101
 801534a:	f8a9 3000 	strh.w	r3, [r9]
 801534e:	f8a9 3004 	strh.w	r3, [r9, #4]
 8015352:	4b85      	ldr	r3, [pc, #532]	@ (8015568 <MFX_emptyAttitude+0x3dc>)
 8015354:	f8c9 300c 	str.w	r3, [r9, #12]
 8015358:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 801535c:	f8c9 1078 	str.w	r1, [r9, #120]	@ 0x78
 8015360:	4b82      	ldr	r3, [pc, #520]	@ (801556c <MFX_emptyAttitude+0x3e0>)
 8015362:	f8c9 207c 	str.w	r2, [r9, #124]	@ 0x7c
 8015366:	af2e      	add	r7, sp, #184	@ 0xb8
 8015368:	2000      	movs	r0, #0
 801536a:	2100      	movs	r1, #0
 801536c:	f8c9 3014 	str.w	r3, [r9, #20]
 8015370:	e9c9 8816 	strd	r8, r8, [r9, #88]	@ 0x58
 8015374:	e9c9 881a 	strd	r8, r8, [r9, #104]	@ 0x68
 8015378:	e9c9 0118 	strd	r0, r1, [r9, #96]	@ 0x60
 801537c:	f8a9 8002 	strh.w	r8, [r9, #2]
 8015380:	ed89 8a02 	vstr	s16, [r9, #8]
 8015384:	ed89 8a04 	vstr	s16, [r9, #16]
 8015388:	cf07      	ldmia	r7!, {r0, r1, r2}
 801538a:	ae31      	add	r6, sp, #196	@ 0xc4
 801538c:	f8c9 0080 	str.w	r0, [r9, #128]	@ 0x80
 8015390:	f8c9 1084 	str.w	r1, [r9, #132]	@ 0x84
 8015394:	f8c9 2088 	str.w	r2, [r9, #136]	@ 0x88
 8015398:	ce07      	ldmia	r6!, {r0, r1, r2}
 801539a:	ad34      	add	r5, sp, #208	@ 0xd0
 801539c:	f8c9 008c 	str.w	r0, [r9, #140]	@ 0x8c
 80153a0:	f8c9 1090 	str.w	r1, [r9, #144]	@ 0x90
 80153a4:	f8c9 2094 	str.w	r2, [r9, #148]	@ 0x94
 80153a8:	cd07      	ldmia	r5!, {r0, r1, r2}
 80153aa:	f10d 0bdc 	add.w	fp, sp, #220	@ 0xdc
 80153ae:	f8c9 0098 	str.w	r0, [r9, #152]	@ 0x98
 80153b2:	f8c9 109c 	str.w	r1, [r9, #156]	@ 0x9c
 80153b6:	f8c9 20a0 	str.w	r2, [r9, #160]	@ 0xa0
 80153ba:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 80153be:	f10d 0ee8 	add.w	lr, sp, #232	@ 0xe8
 80153c2:	f8c9 00a4 	str.w	r0, [r9, #164]	@ 0xa4
 80153c6:	f8c9 10a8 	str.w	r1, [r9, #168]	@ 0xa8
 80153ca:	f8c9 20ac 	str.w	r2, [r9, #172]	@ 0xac
 80153ce:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 80153d2:	ed9f 6a67 	vldr	s12, [pc, #412]	@ 8015570 <MFX_emptyAttitude+0x3e4>
 80153d6:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8015574 <MFX_emptyAttitude+0x3e8>
 80153da:	eddf 7a67 	vldr	s15, [pc, #412]	@ 8015578 <MFX_emptyAttitude+0x3ec>
 80153de:	f8c9 20b8 	str.w	r2, [r9, #184]	@ 0xb8
 80153e2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80153e6:	f44f 1248 	mov.w	r2, #3276800	@ 0x320000
 80153ea:	f8c9 00b0 	str.w	r0, [r9, #176]	@ 0xb0
 80153ee:	f8c9 10b4 	str.w	r1, [r9, #180]	@ 0xb4
 80153f2:	ed89 6a65 	vstr	s12, [r9, #404]	@ 0x194
 80153f6:	edc9 6a66 	vstr	s13, [r9, #408]	@ 0x198
 80153fa:	ed89 7a67 	vstr	s14, [r9, #412]	@ 0x19c
 80153fe:	edc9 8a64 	vstr	s17, [r9, #400]	@ 0x190
 8015402:	edc9 8a30 	vstr	s17, [r9, #192]	@ 0xc0
 8015406:	edc9 8a4a 	vstr	s17, [r9, #296]	@ 0x128
 801540a:	edc9 8a31 	vstr	s17, [r9, #196]	@ 0xc4
 801540e:	edc9 8a4b 	vstr	s17, [r9, #300]	@ 0x12c
 8015412:	edc9 8a32 	vstr	s17, [r9, #200]	@ 0xc8
 8015416:	edc9 8a4c 	vstr	s17, [r9, #304]	@ 0x130
 801541a:	edc9 8a33 	vstr	s17, [r9, #204]	@ 0xcc
 801541e:	edc9 8a4d 	vstr	s17, [r9, #308]	@ 0x134
 8015422:	edc9 8a34 	vstr	s17, [r9, #208]	@ 0xd0
 8015426:	edc9 8a4e 	vstr	s17, [r9, #312]	@ 0x138
 801542a:	edc9 8a35 	vstr	s17, [r9, #212]	@ 0xd4
 801542e:	edc9 8a4f 	vstr	s17, [r9, #316]	@ 0x13c
 8015432:	edc9 8a36 	vstr	s17, [r9, #216]	@ 0xd8
 8015436:	edc9 8a50 	vstr	s17, [r9, #320]	@ 0x140
 801543a:	edc9 8a37 	vstr	s17, [r9, #220]	@ 0xdc
 801543e:	edc9 8a51 	vstr	s17, [r9, #324]	@ 0x144
 8015442:	edc9 8a38 	vstr	s17, [r9, #224]	@ 0xe0
 8015446:	edc9 8a52 	vstr	s17, [r9, #328]	@ 0x148
 801544a:	edc9 8a39 	vstr	s17, [r9, #228]	@ 0xe4
 801544e:	edc9 8a53 	vstr	s17, [r9, #332]	@ 0x14c
 8015452:	edc9 8a3a 	vstr	s17, [r9, #232]	@ 0xe8
 8015456:	edc9 8a54 	vstr	s17, [r9, #336]	@ 0x150
 801545a:	edc9 8a3b 	vstr	s17, [r9, #236]	@ 0xec
 801545e:	edc9 8a55 	vstr	s17, [r9, #340]	@ 0x154
 8015462:	edc9 8a3c 	vstr	s17, [r9, #240]	@ 0xf0
 8015466:	edc9 8a56 	vstr	s17, [r9, #344]	@ 0x158
 801546a:	edc9 8a3d 	vstr	s17, [r9, #244]	@ 0xf4
 801546e:	edc9 8a57 	vstr	s17, [r9, #348]	@ 0x15c
 8015472:	edc9 8a3e 	vstr	s17, [r9, #248]	@ 0xf8
 8015476:	edc9 8a58 	vstr	s17, [r9, #352]	@ 0x160
 801547a:	edc9 8a3f 	vstr	s17, [r9, #252]	@ 0xfc
 801547e:	edc9 8a59 	vstr	s17, [r9, #356]	@ 0x164
 8015482:	edc9 8a40 	vstr	s17, [r9, #256]	@ 0x100
 8015486:	edc9 8a5a 	vstr	s17, [r9, #360]	@ 0x168
 801548a:	f8c9 21a0 	str.w	r2, [r9, #416]	@ 0x1a0
 801548e:	f04f 0201 	mov.w	r2, #1
 8015492:	edc9 7a75 	vstr	s15, [r9, #468]	@ 0x1d4
 8015496:	edc9 8a41 	vstr	s17, [r9, #260]	@ 0x104
 801549a:	edc9 8a5b 	vstr	s17, [r9, #364]	@ 0x16c
 801549e:	edc9 8a42 	vstr	s17, [r9, #264]	@ 0x108
 80154a2:	edc9 8a5c 	vstr	s17, [r9, #368]	@ 0x170
 80154a6:	edc9 8a43 	vstr	s17, [r9, #268]	@ 0x10c
 80154aa:	edc9 8a5d 	vstr	s17, [r9, #372]	@ 0x174
 80154ae:	edc9 8a44 	vstr	s17, [r9, #272]	@ 0x110
 80154b2:	edc9 8a5e 	vstr	s17, [r9, #376]	@ 0x178
 80154b6:	edc9 8a45 	vstr	s17, [r9, #276]	@ 0x114
 80154ba:	edc9 8a5f 	vstr	s17, [r9, #380]	@ 0x17c
 80154be:	edc9 8a46 	vstr	s17, [r9, #280]	@ 0x118
 80154c2:	edc9 8a60 	vstr	s17, [r9, #384]	@ 0x180
 80154c6:	edc9 8a47 	vstr	s17, [r9, #284]	@ 0x11c
 80154ca:	edc9 8a61 	vstr	s17, [r9, #388]	@ 0x184
 80154ce:	edc9 8a48 	vstr	s17, [r9, #288]	@ 0x120
 80154d2:	edc9 8a62 	vstr	s17, [r9, #392]	@ 0x188
 80154d6:	edc9 8a49 	vstr	s17, [r9, #292]	@ 0x124
 80154da:	edc9 8a63 	vstr	s17, [r9, #396]	@ 0x18c
 80154de:	f889 81a4 	strb.w	r8, [r9, #420]	@ 0x1a4
 80154e2:	f8c9 81a6 	str.w	r8, [r9, #422]	@ 0x1a6
 80154e6:	edc9 8a6c 	vstr	s17, [r9, #432]	@ 0x1b0
 80154ea:	edc9 8a76 	vstr	s17, [r9, #472]	@ 0x1d8
 80154ee:	edc9 8a77 	vstr	s17, [r9, #476]	@ 0x1dc
 80154f2:	edc9 8a78 	vstr	s17, [r9, #480]	@ 0x1e0
 80154f6:	edc9 8a79 	vstr	s17, [r9, #484]	@ 0x1e4
 80154fa:	edc9 8a7a 	vstr	s17, [r9, #488]	@ 0x1e8
 80154fe:	edc9 8a7b 	vstr	s17, [r9, #492]	@ 0x1ec
 8015502:	edc9 8a7c 	vstr	s17, [r9, #496]	@ 0x1f0
 8015506:	edc9 8a7d 	vstr	s17, [r9, #500]	@ 0x1f4
 801550a:	edc9 8a6d 	vstr	s17, [r9, #436]	@ 0x1b4
 801550e:	edc9 8a7e 	vstr	s17, [r9, #504]	@ 0x1f8
 8015512:	edc9 7a7f 	vstr	s15, [r9, #508]	@ 0x1fc
 8015516:	edc9 7a89 	vstr	s15, [r9, #548]	@ 0x224
 801551a:	edc9 7a93 	vstr	s15, [r9, #588]	@ 0x24c
 801551e:	edc9 8a80 	vstr	s17, [r9, #512]	@ 0x200
 8015522:	edc9 8a81 	vstr	s17, [r9, #516]	@ 0x204
 8015526:	edc9 8a82 	vstr	s17, [r9, #520]	@ 0x208
 801552a:	edc9 8a83 	vstr	s17, [r9, #524]	@ 0x20c
 801552e:	edc9 8a84 	vstr	s17, [r9, #528]	@ 0x210
 8015532:	edc9 8a85 	vstr	s17, [r9, #532]	@ 0x214
 8015536:	edc9 8a86 	vstr	s17, [r9, #536]	@ 0x218
 801553a:	e01f      	b.n	801557c <MFX_emptyAttitude+0x3f0>
 801553c:	080225f0 	.word	0x080225f0
 8015540:	00000000 	.word	0x00000000
 8015544:	40a00000 	.word	0x40a00000
 8015548:	3a9d4952 	.word	0x3a9d4952
 801554c:	3ac49ba6 	.word	0x3ac49ba6
 8015550:	3b03126f 	.word	0x3b03126f
 8015554:	3a83126f 	.word	0x3a83126f
 8015558:	3f639581 	.word	0x3f639581
 801555c:	402ab021 	.word	0x402ab021
 8015560:	3f13f7cf 	.word	0x3f13f7cf
 8015564:	3f2ac083 	.word	0x3f2ac083
 8015568:	01010100 	.word	0x01010100
 801556c:	41200000 	.word	0x41200000
 8015570:	3f4ccccd 	.word	0x3f4ccccd
 8015574:	3f333333 	.word	0x3f333333
 8015578:	447a0000 	.word	0x447a0000
 801557c:	edc9 8a6e 	vstr	s17, [r9, #440]	@ 0x1b8
 8015580:	edc9 8a87 	vstr	s17, [r9, #540]	@ 0x21c
 8015584:	edc9 8a88 	vstr	s17, [r9, #544]	@ 0x220
 8015588:	edc9 8a8a 	vstr	s17, [r9, #552]	@ 0x228
 801558c:	edc9 8a8b 	vstr	s17, [r9, #556]	@ 0x22c
 8015590:	edc9 8a8c 	vstr	s17, [r9, #560]	@ 0x230
 8015594:	edc9 8a8d 	vstr	s17, [r9, #564]	@ 0x234
 8015598:	edc9 8a8e 	vstr	s17, [r9, #568]	@ 0x238
 801559c:	edc9 8a8f 	vstr	s17, [r9, #572]	@ 0x23c
 80155a0:	edc9 8a6f 	vstr	s17, [r9, #444]	@ 0x1bc
 80155a4:	edc9 8a90 	vstr	s17, [r9, #576]	@ 0x240
 80155a8:	edc9 8a91 	vstr	s17, [r9, #580]	@ 0x244
 80155ac:	edc9 8a92 	vstr	s17, [r9, #584]	@ 0x248
 80155b0:	edc9 8a94 	vstr	s17, [r9, #592]	@ 0x250
 80155b4:	edc9 8a95 	vstr	s17, [r9, #596]	@ 0x254
 80155b8:	edc9 8a96 	vstr	s17, [r9, #600]	@ 0x258
 80155bc:	edc9 8a97 	vstr	s17, [r9, #604]	@ 0x25c
 80155c0:	edc9 8a98 	vstr	s17, [r9, #608]	@ 0x260
 80155c4:	edc9 8a70 	vstr	s17, [r9, #448]	@ 0x1c0
 80155c8:	edc9 8a99 	vstr	s17, [r9, #612]	@ 0x264
 80155cc:	edc9 8a9a 	vstr	s17, [r9, #616]	@ 0x268
 80155d0:	edc9 8a9b 	vstr	s17, [r9, #620]	@ 0x26c
 80155d4:	edc9 8a9c 	vstr	s17, [r9, #624]	@ 0x270
 80155d8:	edc9 7a9d 	vstr	s15, [r9, #628]	@ 0x274
 80155dc:	edc9 7aa7 	vstr	s15, [r9, #668]	@ 0x29c
 80155e0:	edc9 7ab1 	vstr	s15, [r9, #708]	@ 0x2c4
 80155e4:	edc9 8a9e 	vstr	s17, [r9, #632]	@ 0x278
 80155e8:	edc9 8a9f 	vstr	s17, [r9, #636]	@ 0x27c
 80155ec:	edc9 8aa0 	vstr	s17, [r9, #640]	@ 0x280
 80155f0:	edc9 8aa1 	vstr	s17, [r9, #644]	@ 0x284
 80155f4:	edc9 8a71 	vstr	s17, [r9, #452]	@ 0x1c4
 80155f8:	edc9 8aa2 	vstr	s17, [r9, #648]	@ 0x288
 80155fc:	edc9 8aa3 	vstr	s17, [r9, #652]	@ 0x28c
 8015600:	edc9 8aa4 	vstr	s17, [r9, #656]	@ 0x290
 8015604:	edc9 8aa5 	vstr	s17, [r9, #660]	@ 0x294
 8015608:	edc9 8aa6 	vstr	s17, [r9, #664]	@ 0x298
 801560c:	edc9 8aa8 	vstr	s17, [r9, #672]	@ 0x2a0
 8015610:	edc9 8aa9 	vstr	s17, [r9, #676]	@ 0x2a4
 8015614:	edc9 8aaa 	vstr	s17, [r9, #680]	@ 0x2a8
 8015618:	edc9 8a72 	vstr	s17, [r9, #456]	@ 0x1c8
 801561c:	edc9 8aab 	vstr	s17, [r9, #684]	@ 0x2ac
 8015620:	edc9 8aac 	vstr	s17, [r9, #688]	@ 0x2b0
 8015624:	edc9 8aad 	vstr	s17, [r9, #692]	@ 0x2b4
 8015628:	edc9 8aae 	vstr	s17, [r9, #696]	@ 0x2b8
 801562c:	edc9 8aaf 	vstr	s17, [r9, #700]	@ 0x2bc
 8015630:	edc9 8ab0 	vstr	s17, [r9, #704]	@ 0x2c0
 8015634:	edc9 8ab2 	vstr	s17, [r9, #712]	@ 0x2c8
 8015638:	edc9 8ab3 	vstr	s17, [r9, #716]	@ 0x2cc
 801563c:	edc9 8a73 	vstr	s17, [r9, #460]	@ 0x1cc
 8015640:	edc9 8ab4 	vstr	s17, [r9, #720]	@ 0x2d0
 8015644:	edc9 8ab5 	vstr	s17, [r9, #724]	@ 0x2d4
 8015648:	edc9 8ab6 	vstr	s17, [r9, #728]	@ 0x2d8
 801564c:	edc9 8ab7 	vstr	s17, [r9, #732]	@ 0x2dc
 8015650:	edc9 8ab8 	vstr	s17, [r9, #736]	@ 0x2e0
 8015654:	edc9 8ab9 	vstr	s17, [r9, #740]	@ 0x2e4
 8015658:	edc9 8aba 	vstr	s17, [r9, #744]	@ 0x2e8
 801565c:	f889 21ac 	strb.w	r2, [r9, #428]	@ 0x1ac
 8015660:	f50d 624a 	add.w	r2, sp, #3232	@ 0xca0
 8015664:	9202      	str	r2, [sp, #8]
 8015666:	f50d 6233 	add.w	r2, sp, #2864	@ 0xb30
 801566a:	9201      	str	r2, [sp, #4]
 801566c:	f509 7a46 	add.w	sl, r9, #792	@ 0x318
 8015670:	f50d 621c 	add.w	r2, sp, #2496	@ 0x9c0
 8015674:	f8cd a00c 	str.w	sl, [sp, #12]
 8015678:	9200      	str	r2, [sp, #0]
 801567a:	7820      	ldrb	r0, [r4, #0]
 801567c:	edc9 7abb 	vstr	s15, [r9, #748]	@ 0x2ec
 8015680:	f50d 6305 	add.w	r3, sp, #2128	@ 0x850
 8015684:	f50d 62dc 	add.w	r2, sp, #1760	@ 0x6e0
 8015688:	f20d 61bc 	addw	r1, sp, #1724	@ 0x6bc
 801568c:	edc9 7ac5 	vstr	s15, [r9, #788]	@ 0x314
 8015690:	edc9 8abc 	vstr	s17, [r9, #752]	@ 0x2f0
 8015694:	edc9 8a74 	vstr	s17, [r9, #464]	@ 0x1d0
 8015698:	edc9 8abd 	vstr	s17, [r9, #756]	@ 0x2f4
 801569c:	edc9 8abe 	vstr	s17, [r9, #760]	@ 0x2f8
 80156a0:	edc9 8abf 	vstr	s17, [r9, #764]	@ 0x2fc
 80156a4:	edc9 8ac0 	vstr	s17, [r9, #768]	@ 0x300
 80156a8:	edc9 8ac1 	vstr	s17, [r9, #772]	@ 0x304
 80156ac:	edc9 8ac2 	vstr	s17, [r9, #776]	@ 0x308
 80156b0:	edc9 8ac3 	vstr	s17, [r9, #780]	@ 0x30c
 80156b4:	edc9 8ac4 	vstr	s17, [r9, #784]	@ 0x310
 80156b8:	f7fd fe08 	bl	80132cc <DataHist_parameters>
 80156bc:	f609 1344 	addw	r3, r9, #2372	@ 0x944
 80156c0:	f509 6216 	add.w	r2, r9, #2400	@ 0x960
 80156c4:	f609 1168 	addw	r1, r9, #2408	@ 0x968
 80156c8:	f509 6017 	add.w	r0, r9, #2416	@ 0x970
 80156cc:	f10d 0c20 	add.w	ip, sp, #32
 80156d0:	9304      	str	r3, [sp, #16]
 80156d2:	9205      	str	r2, [sp, #20]
 80156d4:	9106      	str	r1, [sp, #24]
 80156d6:	9007      	str	r0, [sp, #28]
 80156d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80156dc:	f8c9 393c 	str.w	r3, [r9, #2364]	@ 0x93c
 80156e0:	9b04      	ldr	r3, [sp, #16]
 80156e2:	f8c9 0930 	str.w	r0, [r9, #2352]	@ 0x930
 80156e6:	f8c9 1934 	str.w	r1, [r9, #2356]	@ 0x934
 80156ea:	f8c9 2938 	str.w	r2, [r9, #2360]	@ 0x938
 80156ee:	9906      	ldr	r1, [sp, #24]
 80156f0:	9a05      	ldr	r2, [sp, #20]
 80156f2:	9807      	ldr	r0, [sp, #28]
 80156f4:	f509 6b14 	add.w	fp, r9, #2368	@ 0x940
 80156f8:	f609 1a5c 	addw	sl, r9, #2396	@ 0x95c
 80156fc:	edcb 8a00 	vstr	s17, [fp]
 8015700:	f609 1748 	addw	r7, r9, #2376	@ 0x948
 8015704:	edca 8a00 	vstr	s17, [sl]
 8015708:	f609 1664 	addw	r6, r9, #2404	@ 0x964
 801570c:	edc3 8a00 	vstr	s17, [r3]
 8015710:	f609 1554 	addw	r5, r9, #2388	@ 0x954
 8015714:	f609 1458 	addw	r4, r9, #2392	@ 0x958
 8015718:	f609 1e6c 	addw	lr, r9, #2412	@ 0x96c
 801571c:	230a      	movs	r3, #10
 801571e:	edc2 8a00 	vstr	s17, [r2]
 8015722:	edc7 8a00 	vstr	s17, [r7]
 8015726:	edc6 8a00 	vstr	s17, [r6]
 801572a:	f8c9 894c 	str.w	r8, [r9, #2380]	@ 0x94c
 801572e:	f8a9 8950 	strh.w	r8, [r9, #2384]	@ 0x950
 8015732:	edc5 8a00 	vstr	s17, [r5]
 8015736:	ed84 8a00 	vstr	s16, [r4]
 801573a:	edc1 8a00 	vstr	s17, [r1]
 801573e:	edc0 8a00 	vstr	s17, [r0]
 8015742:	edce 8a00 	vstr	s17, [lr]
 8015746:	f8c9 3974 	str.w	r3, [r9, #2420]	@ 0x974
 801574a:	f889 8978 	strb.w	r8, [r9, #2424]	@ 0x978
 801574e:	f60d 4dd4 	addw	sp, sp, #3284	@ 0xcd4
 8015752:	ecbd 8b02 	vpop	{d8}
 8015756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801575a:	bf00      	nop
 801575c:	0000      	movs	r0, r0
	...

08015760 <iNemoEngine_API_Update>:
 8015760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015764:	ed2d 8b10 	vpush	{d8-d15}
 8015768:	f2ad 5d0c 	subw	sp, sp, #1292	@ 0x50c
 801576c:	eeb0 8a40 	vmov.f32	s16, s0
 8015770:	4607      	mov	r7, r0
 8015772:	4688      	mov	r8, r1
 8015774:	4614      	mov	r4, r2
 8015776:	932a      	str	r3, [sp, #168]	@ 0xa8
 8015778:	2b00      	cmp	r3, #0
 801577a:	f000 820b 	beq.w	8015b94 <iNemoEngine_API_Update+0x434>
 801577e:	68e0      	ldr	r0, [r4, #12]
 8015780:	6921      	ldr	r1, [r4, #16]
 8015782:	6962      	ldr	r2, [r4, #20]
 8015784:	abab      	add	r3, sp, #684	@ 0x2ac
 8015786:	c307      	stmia	r3!, {r0, r1, r2}
 8015788:	6820      	ldr	r0, [r4, #0]
 801578a:	6861      	ldr	r1, [r4, #4]
 801578c:	68a2      	ldr	r2, [r4, #8]
 801578e:	aba8      	add	r3, sp, #672	@ 0x2a0
 8015790:	c307      	stmia	r3!, {r0, r1, r2}
 8015792:	69a0      	ldr	r0, [r4, #24]
 8015794:	69e1      	ldr	r1, [r4, #28]
 8015796:	6a22      	ldr	r2, [r4, #32]
 8015798:	f897 4978 	ldrb.w	r4, [r7, #2424]	@ 0x978
 801579c:	abae      	add	r3, sp, #696	@ 0x2b8
 801579e:	c307      	stmia	r3!, {r0, r1, r2}
 80157a0:	b12c      	cbz	r4, 80157ae <iNemoEngine_API_Update+0x4e>
 80157a2:	f8b7 2950 	ldrh.w	r2, [r7, #2384]	@ 0x950
 80157a6:	793b      	ldrb	r3, [r7, #4]
 80157a8:	429a      	cmp	r2, r3
 80157aa:	f082 834a 	bcs.w	8017e42 <iNemoEngine_API_Update+0x26e2>
 80157ae:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 80157b2:	ae3b      	add	r6, sp, #236	@ 0xec
 80157b4:	4619      	mov	r1, r3
 80157b6:	4630      	mov	r0, r6
 80157b8:	aaab      	add	r2, sp, #684	@ 0x2ac
 80157ba:	9327      	str	r3, [sp, #156]	@ 0x9c
 80157bc:	ad41      	add	r5, sp, #260	@ 0x104
 80157be:	f7fd fe31 	bl	8013424 <rotVect>
 80157c2:	aaae      	add	r2, sp, #696	@ 0x2b8
 80157c4:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80157c8:	a83e      	add	r0, sp, #248	@ 0xf8
 80157ca:	f7fd fe2b 	bl	8013424 <rotVect>
 80157ce:	aaa8      	add	r2, sp, #672	@ 0x2a0
 80157d0:	f107 0143 	add.w	r1, r7, #67	@ 0x43
 80157d4:	4628      	mov	r0, r5
 80157d6:	f7fd fe25 	bl	8013424 <rotVect>
 80157da:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80157de:	b923      	cbnz	r3, 80157ea <iNemoEngine_API_Update+0x8a>
 80157e0:	4b9d      	ldr	r3, [pc, #628]	@ (8015a58 <iNemoEngine_API_Update+0x2f8>)
 80157e2:	606b      	str	r3, [r5, #4]
 80157e4:	60ab      	str	r3, [r5, #8]
 80157e6:	2300      	movs	r3, #0
 80157e8:	602b      	str	r3, [r5, #0]
 80157ea:	f8d7 394c 	ldr.w	r3, [r7, #2380]	@ 0x94c
 80157ee:	9328      	str	r3, [sp, #160]	@ 0xa0
 80157f0:	2b09      	cmp	r3, #9
 80157f2:	d851      	bhi.n	8015898 <iNemoEngine_API_Update+0x138>
 80157f4:	edd6 aa01 	vldr	s21, [r6, #4]
 80157f8:	ed96 ba00 	vldr	s22, [r6]
 80157fc:	ed96 aa02 	vldr	s20, [r6, #8]
 8015800:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 8015804:	eef7 ba00 	vmov.f32	s23, #112	@ 0x3f800000  1.0
 8015808:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 801580c:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8015810:	ee17 0a90 	vmov	r0, s15
 8015814:	f7ea fec0 	bl	8000598 <__aeabi_f2d>
 8015818:	ec41 0b10 	vmov	d0, r0, r1
 801581c:	f007 fa40 	bl	801cca0 <sqrt>
 8015820:	ec51 0b10 	vmov	r0, r1, d0
 8015824:	f7eb f9e8 	bl	8000bf8 <__aeabi_d2f>
 8015828:	ee07 0a90 	vmov	s15, r0
 801582c:	ee8b 7aa7 	vdiv.f32	s14, s23, s15
 8015830:	ed95 9a01 	vldr	s18, [r5, #4]
 8015834:	edd5 9a00 	vldr	s19, [r5]
 8015838:	edd5 8a02 	vldr	s17, [r5, #8]
 801583c:	ee69 7a09 	vmul.f32	s15, s18, s18
 8015840:	ee2b ba07 	vmul.f32	s22, s22, s14
 8015844:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8015848:	ee6a aa87 	vmul.f32	s21, s21, s14
 801584c:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8015850:	ee2a aa07 	vmul.f32	s20, s20, s14
 8015854:	ee17 0a90 	vmov	r0, s15
 8015858:	ed86 ba00 	vstr	s22, [r6]
 801585c:	edc6 aa01 	vstr	s21, [r6, #4]
 8015860:	ed86 aa02 	vstr	s20, [r6, #8]
 8015864:	f7ea fe98 	bl	8000598 <__aeabi_f2d>
 8015868:	ec41 0b10 	vmov	d0, r0, r1
 801586c:	f007 fa18 	bl	801cca0 <sqrt>
 8015870:	ec51 0b10 	vmov	r0, r1, d0
 8015874:	f7eb f9c0 	bl	8000bf8 <__aeabi_d2f>
 8015878:	ee07 0a10 	vmov	s14, r0
 801587c:	eecb 7a87 	vdiv.f32	s15, s23, s14
 8015880:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8015884:	ee29 9a27 	vmul.f32	s18, s18, s15
 8015888:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801588c:	edc5 9a00 	vstr	s19, [r5]
 8015890:	ed85 9a01 	vstr	s18, [r5, #4]
 8015894:	edc5 8a02 	vstr	s17, [r5, #8]
 8015898:	793b      	ldrb	r3, [r7, #4]
 801589a:	f8b7 2950 	ldrh.w	r2, [r7, #2384]	@ 0x950
 801589e:	429a      	cmp	r2, r3
 80158a0:	f080 80f2 	bcs.w	8015a88 <iNemoEngine_API_Update+0x328>
 80158a4:	abd6      	add	r3, sp, #856	@ 0x358
 80158a6:	931c      	str	r3, [sp, #112]	@ 0x70
 80158a8:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 80158ac:	9323      	str	r3, [sp, #140]	@ 0x8c
 80158ae:	f607 1334 	addw	r3, r7, #2356	@ 0x934
 80158b2:	9324      	str	r3, [sp, #144]	@ 0x90
 80158b4:	f607 1338 	addw	r3, r7, #2360	@ 0x938
 80158b8:	9325      	str	r3, [sp, #148]	@ 0x94
 80158ba:	eddd 8aff 	vldr	s17, [sp, #1020]	@ 0x3fc
 80158be:	f607 133c 	addw	r3, r7, #2364	@ 0x93c
 80158c2:	9326      	str	r3, [sp, #152]	@ 0x98
 80158c4:	f50d 7a38 	add.w	sl, sp, #736	@ 0x2e0
 80158c8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80158ca:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 80158cc:	3301      	adds	r3, #1
 80158ce:	f8c7 394c 	str.w	r3, [r7, #2380]	@ 0x94c
 80158d2:	aaab      	add	r2, sp, #684	@ 0x2ac
 80158d4:	4650      	mov	r0, sl
 80158d6:	f7fd fda5 	bl	8013424 <rotVect>
 80158da:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80158dc:	ed93 aa00 	vldr	s20, [r3]
 80158e0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	f8c8 300c 	str.w	r3, [r8, #12]
 80158e8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	f8c8 3010 	str.w	r3, [r8, #16]
 80158f0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	f8c8 3014 	str.w	r3, [r8, #20]
 80158f8:	ed88 aa06 	vstr	s20, [r8, #24]
 80158fc:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8015900:	9301      	str	r3, [sp, #4]
 8015902:	f108 0328 	add.w	r3, r8, #40	@ 0x28
 8015906:	4651      	mov	r1, sl
 8015908:	4642      	mov	r2, r8
 801590a:	f108 000c 	add.w	r0, r8, #12
 801590e:	9300      	str	r3, [sp, #0]
 8015910:	f108 031c 	add.w	r3, r8, #28
 8015914:	f7ff fb6c 	bl	8014ff0 <output_update>
 8015918:	edd8 9a00 	vldr	s19, [r8]
 801591c:	ed98 9a01 	vldr	s18, [r8, #4]
 8015920:	eeb0 0a69 	vmov.f32	s0, s19
 8015924:	f007 fae6 	bl	801cef4 <sinf>
 8015928:	eeb0 8a40 	vmov.f32	s16, s0
 801592c:	eeb0 0a69 	vmov.f32	s0, s19
 8015930:	f007 fa94 	bl	801ce5c <cosf>
 8015934:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8015936:	ee20 0a00 	vmul.f32	s0, s0, s0
 801593a:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 801593e:	ed93 6a3d 	vldr	s12, [r3, #244]	@ 0xf4
 8015942:	ee68 7a08 	vmul.f32	s15, s16, s16
 8015946:	ee20 8a07 	vmul.f32	s16, s0, s14
 801594a:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8015a5c <iNemoEngine_API_Update+0x2fc>
 801594e:	eef0 6ac9 	vabs.f32	s13, s18
 8015952:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801595a:	eea7 8a86 	vfma.f32	s16, s15, s12
 801595e:	d573      	bpl.n	8015a48 <iNemoEngine_API_Update+0x2e8>
 8015960:	eeb0 0a49 	vmov.f32	s0, s18
 8015964:	f007 fb0c 	bl	801cf80 <tanf>
 8015968:	ee20 0a00 	vmul.f32	s0, s0, s0
 801596c:	eeb0 7a68 	vmov.f32	s14, s17
 8015970:	eea0 7a08 	vfma.f32	s14, s0, s16
 8015974:	4c3a      	ldr	r4, [pc, #232]	@ (8015a60 <iNemoEngine_API_Update+0x300>)
 8015976:	eef1 7ac7 	vsqrt.f32	s15, s14
 801597a:	f8d4 03c0 	ldr.w	r0, [r4, #960]	@ 0x3c0
 801597e:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8015a64 <iNemoEngine_API_Update+0x304>
 8015982:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8015a78 <iNemoEngine_API_Update+0x318>
 8015986:	ed98 8a04 	vldr	s16, [r8, #16]
 801598a:	edd8 8a03 	vldr	s17, [r8, #12]
 801598e:	ed98 9a05 	vldr	s18, [r8, #20]
 8015992:	ed98 6a08 	vldr	s12, [r8, #32]
 8015996:	ed98 0a07 	vldr	s0, [r8, #28]
 801599a:	ed98 1a09 	vldr	s2, [r8, #36]	@ 0x24
 801599e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80159a2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80159a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159aa:	bf88      	it	hi
 80159ac:	eef0 7a66 	vmovhi.f32	s15, s13
 80159b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80159b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159b8:	bfb8      	it	lt
 80159ba:	eef0 7a47 	vmovlt.f32	s15, s14
 80159be:	edc8 7a0e 	vstr	s15, [r8, #56]	@ 0x38
 80159c2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80159c6:	bb73      	cbnz	r3, 8015a26 <iNemoEngine_API_Update+0x2c6>
 80159c8:	eef0 0a46 	vmov.f32	s1, s12
 80159cc:	f7fd fdfc 	bl	80135c8 <findDirection>
 80159d0:	f8c4 03c0 	str.w	r0, [r4, #960]	@ 0x3c0
 80159d4:	2805      	cmp	r0, #5
 80159d6:	f204 8186 	bhi.w	8019ce6 <iNemoEngine_API_Update+0x4586>
 80159da:	e8df f010 	tbh	[pc, r0, lsl #1]
 80159de:	000a      	.short	0x000a
 80159e0:	0006123c 	.word	0x0006123c
 80159e4:	0006126f 	.word	0x0006126f
 80159e8:	000a      	.short	0x000a
 80159ea:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8015a68 <iNemoEngine_API_Update+0x308>
 80159ee:	ee79 9aa7 	vadd.f32	s19, s19, s15
 80159f2:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8015a6c <iNemoEngine_API_Update+0x30c>
 80159f6:	eef4 9ae7 	vcmpe.f32	s19, s15
 80159fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159fe:	bfa8      	it	ge
 8015a00:	ee79 9ae7 	vsubge.f32	s19, s19, s15
 8015a04:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 8015a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a0c:	d503      	bpl.n	8015a16 <iNemoEngine_API_Update+0x2b6>
 8015a0e:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8015a6c <iNemoEngine_API_Update+0x30c>
 8015a12:	ee79 9aa7 	vadd.f32	s19, s19, s15
 8015a16:	edc8 9a0d 	vstr	s19, [r8, #52]	@ 0x34
 8015a1a:	f20d 5d0c 	addw	sp, sp, #1292	@ 0x50c
 8015a1e:	ecbd 8b10 	vpop	{d8-d15}
 8015a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a26:	eef0 0a40 	vmov.f32	s1, s0
 8015a2a:	eeb1 1a41 	vneg.f32	s2, s2
 8015a2e:	eeb0 0a46 	vmov.f32	s0, s12
 8015a32:	f7fd fdc9 	bl	80135c8 <findDirection>
 8015a36:	eef0 7a68 	vmov.f32	s15, s17
 8015a3a:	eeb1 9a49 	vneg.f32	s18, s18
 8015a3e:	eef0 8a48 	vmov.f32	s17, s16
 8015a42:	eeb0 8a67 	vmov.f32	s16, s15
 8015a46:	e7c3      	b.n	80159d0 <iNemoEngine_API_Update+0x270>
 8015a48:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8015a70 <iNemoEngine_API_Update+0x310>
 8015a4c:	eeb0 7a68 	vmov.f32	s14, s17
 8015a50:	eea8 7a27 	vfma.f32	s14, s16, s15
 8015a54:	e78e      	b.n	8015974 <iNemoEngine_API_Update+0x214>
 8015a56:	bf00      	nop
 8015a58:	3f333333 	.word	0x3f333333
 8015a5c:	3fbc430e 	.word	0x3fbc430e
 8015a60:	2000038c 	.word	0x2000038c
 8015a64:	40490fdb 	.word	0x40490fdb
 8015a68:	43340000 	.word	0x43340000
 8015a6c:	43b40000 	.word	0x43b40000
 8015a70:	42c6ab07 	.word	0x42c6ab07
 8015a74:	3c03126f 	.word	0x3c03126f
 8015a78:	3c8efa35 	.word	0x3c8efa35
 8015a7c:	3ed93dd9 	.word	0x3ed93dd9
 8015a80:	3b656042 	.word	0x3b656042
 8015a84:	42c80000 	.word	0x42c80000
 8015a88:	ee07 3a90 	vmov	s15, r3
 8015a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015a90:	ed5f 6a08 	vldr	s13, [pc, #-32]	@ 8015a74 <iNemoEngine_API_Update+0x314>
 8015a94:	ed1f 7a08 	vldr	s14, [pc, #-32]	@ 8015a78 <iNemoEngine_API_Update+0x318>
 8015a98:	ed1f aa08 	vldr	s20, [pc, #-32]	@ 8015a7c <iNemoEngine_API_Update+0x31c>
 8015a9c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8015aa0:	f607 145c 	addw	r4, r7, #2396	@ 0x95c
 8015aa4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8015aa8:	f507 6016 	add.w	r0, r7, #2400	@ 0x960
 8015aac:	f607 1164 	addw	r1, r7, #2404	@ 0x964
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	f04f 0c00 	mov.w	ip, #0
 8015ab6:	ab63      	add	r3, sp, #396	@ 0x18c
 8015ab8:	edcd 7a07 	vstr	s15, [sp, #28]
 8015abc:	eef1 7ac6 	vsqrt.f32	s15, s12
 8015ac0:	ed5f 6a11 	vldr	s13, [pc, #-68]	@ 8015a80 <iNemoEngine_API_Update+0x320>
 8015ac4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8015ac8:	edd4 6a00 	vldr	s13, [r4]
 8015acc:	ee66 fa87 	vmul.f32	s31, s13, s14
 8015ad0:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8015ad4:	edd0 6a00 	vldr	s13, [r0]
 8015ad8:	ee26 fa87 	vmul.f32	s30, s13, s14
 8015adc:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 8015ae0:	edd1 6a00 	vldr	s13, [r1]
 8015ae4:	f8a7 c950 	strh.w	ip, [r7, #2384]	@ 0x950
 8015ae8:	6022      	str	r2, [r4, #0]
 8015aea:	6002      	str	r2, [r0, #0]
 8015aec:	600a      	str	r2, [r1, #0]
 8015aee:	797a      	ldrb	r2, [r7, #5]
 8015af0:	9209      	str	r2, [sp, #36]	@ 0x24
 8015af2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8015af6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015afa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b00:	edcd 6a08 	vstr	s13, [sp, #32]
 8015b04:	ee26 7a87 	vmul.f32	s14, s13, s14
 8015b08:	ac60      	add	r4, sp, #384	@ 0x180
 8015b0a:	2b01      	cmp	r3, #1
 8015b0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015b10:	ee27 aa8a 	vmul.f32	s20, s15, s20
 8015b14:	ed8d 7a10 	vstr	s14, [sp, #64]	@ 0x40
 8015b18:	f002 83ff 	beq.w	801831a <iNemoEngine_API_Update+0x2bba>
 8015b1c:	2b02      	cmp	r3, #2
 8015b1e:	f002 83f3 	beq.w	8018308 <iNemoEngine_API_Update+0x2ba8>
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	f002 8261 	beq.w	8017fea <iNemoEngine_API_Update+0x288a>
 8015b28:	edd7 9a05 	vldr	s19, [r7, #20]
 8015b2c:	ed1f 7a2b 	vldr	s14, [pc, #-172]	@ 8015a84 <iNemoEngine_API_Update+0x324>
 8015b30:	4a1a      	ldr	r2, [pc, #104]	@ (8015b9c <iNemoEngine_API_Update+0x43c>)
 8015b32:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 8015b36:	ee69 9a87 	vmul.f32	s19, s19, s14
 8015b3a:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8015b3e:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8015b42:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8015ba0 <iNemoEngine_API_Update+0x440>
 8015b46:	eddf 5a17 	vldr	s11, [pc, #92]	@ 8015ba4 <iNemoEngine_API_Update+0x444>
 8015b4a:	887b      	ldrh	r3, [r7, #2]
 8015b4c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8015b50:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8015b54:	1e59      	subs	r1, r3, #1
 8015b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b5a:	2912      	cmp	r1, #18
 8015b5c:	edcd 5a2f 	vstr	s11, [sp, #188]	@ 0xbc
 8015b60:	edcd 7a21 	vstr	s15, [sp, #132]	@ 0x84
 8015b64:	d824      	bhi.n	8015bb0 <iNemoEngine_API_Update+0x450>
 8015b66:	3301      	adds	r3, #1
 8015b68:	b299      	uxth	r1, r3
 8015b6a:	2903      	cmp	r1, #3
 8015b6c:	b21b      	sxth	r3, r3
 8015b6e:	f202 8232 	bhi.w	8017fd6 <iNemoEngine_API_Update+0x2876>
 8015b72:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8015ba8 <iNemoEngine_API_Update+0x448>
 8015b76:	ee86 6a07 	vdiv.f32	s12, s12, s14
 8015b7a:	ee6a 7a07 	vmul.f32	s15, s20, s14
 8015b7e:	ed8d 6a29 	vstr	s12, [sp, #164]	@ 0xa4
 8015b82:	ed9d 6a21 	vldr	s12, [sp, #132]	@ 0x84
 8015b86:	ee26 7a07 	vmul.f32	s14, s12, s14
 8015b8a:	eeb0 aa67 	vmov.f32	s20, s15
 8015b8e:	ed8d 7a21 	vstr	s14, [sp, #132]	@ 0x84
 8015b92:	e020      	b.n	8015bd6 <iNemoEngine_API_Update+0x476>
 8015b94:	ab50      	add	r3, sp, #320	@ 0x140
 8015b96:	932a      	str	r3, [sp, #168]	@ 0xa8
 8015b98:	e5f1      	b.n	801577e <iNemoEngine_API_Update+0x1e>
 8015b9a:	bf00      	nop
 8015b9c:	3a83126f 	.word	0x3a83126f
 8015ba0:	3fb50481 	.word	0x3fb50481
 8015ba4:	3e0f5c29 	.word	0x3e0f5c29
 8015ba8:	3e4ccccd 	.word	0x3e4ccccd
 8015bac:	358637bd 	.word	0x358637bd
 8015bb0:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8015bac <iNemoEngine_API_Update+0x44c>
 8015bb4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8015bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015bbc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8015bc0:	ee86 7a07 	vdiv.f32	s14, s12, s14
 8015bc4:	2300      	movs	r3, #0
 8015bc6:	ee6a 7a27 	vmul.f32	s15, s20, s15
 8015bca:	ed8d 7a29 	vstr	s14, [sp, #164]	@ 0xa4
 8015bce:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8015bd2:	ee2a aa07 	vmul.f32	s20, s20, s14
 8015bd6:	edcd 7a8d 	vstr	s15, [sp, #564]	@ 0x234
 8015bda:	edcd 7a8e 	vstr	s15, [sp, #568]	@ 0x238
 8015bde:	edcd 7a8f 	vstr	s15, [sp, #572]	@ 0x23c
 8015be2:	eddd 7a21 	vldr	s15, [sp, #132]	@ 0x84
 8015be6:	807b      	strh	r3, [r7, #2]
 8015be8:	edcd 7a96 	vstr	s15, [sp, #600]	@ 0x258
 8015bec:	eddd 7a2f 	vldr	s15, [sp, #188]	@ 0xbc
 8015bf0:	4be5      	ldr	r3, [pc, #916]	@ (8015f88 <iNemoEngine_API_Update+0x828>)
 8015bf2:	edcd 7a97 	vstr	s15, [sp, #604]	@ 0x25c
 8015bf6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8015bfa:	eddd 7a29 	vldr	s15, [sp, #164]	@ 0xa4
 8015bfe:	926c      	str	r2, [sp, #432]	@ 0x1b0
 8015c00:	ee26 7a87 	vmul.f32	s14, s13, s14
 8015c04:	a8d6      	add	r0, sp, #856	@ 0x358
 8015c06:	926d      	str	r2, [sp, #436]	@ 0x1b4
 8015c08:	926e      	str	r2, [sp, #440]	@ 0x1b8
 8015c0a:	2100      	movs	r1, #0
 8015c0c:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8015c10:	4605      	mov	r5, r0
 8015c12:	9371      	str	r3, [sp, #452]	@ 0x1c4
 8015c14:	ed8d 7a1f 	vstr	s14, [sp, #124]	@ 0x7c
 8015c18:	901c      	str	r0, [sp, #112]	@ 0x70
 8015c1a:	ed8d aa90 	vstr	s20, [sp, #576]	@ 0x240
 8015c1e:	ed8d aa91 	vstr	s20, [sp, #580]	@ 0x244
 8015c22:	ed8d aa92 	vstr	s20, [sp, #584]	@ 0x248
 8015c26:	edcd 8a93 	vstr	s17, [sp, #588]	@ 0x24c
 8015c2a:	edcd 8a94 	vstr	s17, [sp, #592]	@ 0x250
 8015c2e:	edcd 8a95 	vstr	s17, [sp, #596]	@ 0x254
 8015c32:	ed8d 7a98 	vstr	s14, [sp, #608]	@ 0x260
 8015c36:	edcd 7a69 	vstr	s15, [sp, #420]	@ 0x1a4
 8015c3a:	edcd 7a6a 	vstr	s15, [sp, #424]	@ 0x1a8
 8015c3e:	edcd 7a6b 	vstr	s15, [sp, #428]	@ 0x1ac
 8015c42:	f00a f8a8 	bl	801fd96 <memset>
 8015c46:	7b79      	ldrb	r1, [r7, #13]
 8015c48:	9120      	str	r1, [sp, #128]	@ 0x80
 8015c4a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8015c4e:	f8c5 30a8 	str.w	r3, [r5, #168]	@ 0xa8
 8015c52:	f8c5 30dc 	str.w	r3, [r5, #220]	@ 0xdc
 8015c56:	f8c5 3110 	str.w	r3, [r5, #272]	@ 0x110
 8015c5a:	f8c5 3144 	str.w	r3, [r5, #324]	@ 0x144
 8015c5e:	f8c5 3178 	str.w	r3, [r5, #376]	@ 0x178
 8015c62:	f8c5 31ac 	str.w	r3, [r5, #428]	@ 0x1ac
 8015c66:	2900      	cmp	r1, #0
 8015c68:	f001 8103 	beq.w	8016e72 <iNemoEngine_API_Update+0x1712>
 8015c6c:	ed94 8a01 	vldr	s16, [r4, #4]
 8015c70:	ed94 9a00 	vldr	s18, [r4]
 8015c74:	edd4 ea02 	vldr	s29, [r4, #8]
 8015c78:	ee68 7a08 	vmul.f32	s15, s16, s16
 8015c7c:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8015c80:	eee9 7a09 	vfma.f32	s15, s18, s18
 8015c84:	ee28 7a07 	vmul.f32	s14, s16, s14
 8015c88:	eeee 7aae 	vfma.f32	s15, s29, s29
 8015c8c:	ee39 6a09 	vadd.f32	s12, s18, s18
 8015c90:	ee7e 5aae 	vadd.f32	s11, s29, s29
 8015c94:	edcd 7a04 	vstr	s15, [sp, #16]
 8015c98:	eeb1 5a65 	vneg.f32	s10, s11
 8015c9c:	eef1 7a46 	vneg.f32	s15, s12
 8015ca0:	eef1 6a47 	vneg.f32	s13, s14
 8015ca4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8015ca6:	ed94 da04 	vldr	s26, [r4, #16]
 8015caa:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
 8015cae:	eef1 7a4d 	vneg.f32	s15, s26
 8015cb2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015cb6:	edd4 ba05 	vldr	s23, [r4, #20]
 8015cba:	edc3 7a05 	vstr	s15, [r3, #20]
 8015cbe:	eef1 7a67 	vneg.f32	s15, s15
 8015cc2:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
 8015cc6:	ee7b 7aab 	vadd.f32	s15, s23, s23
 8015cca:	ed94 ca03 	vldr	s24, [r4, #12]
 8015cce:	edc3 7a04 	vstr	s15, [r3, #16]
 8015cd2:	eef1 7a67 	vneg.f32	s15, s15
 8015cd6:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
 8015cda:	ee7c 7a0c 	vadd.f32	s15, s24, s24
 8015cde:	edc3 5a01 	vstr	s11, [r3, #4]
 8015ce2:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
 8015ce6:	eef1 7a67 	vneg.f32	s15, s15
 8015cea:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
 8015cee:	ed83 7a02 	vstr	s14, [r3, #8]
 8015cf2:	ed83 5a0c 	vstr	s10, [r3, #48]	@ 0x30
 8015cf6:	ed83 6a0e 	vstr	s12, [r3, #56]	@ 0x38
 8015cfa:	edc3 6a18 	vstr	s13, [r3, #96]	@ 0x60
 8015cfe:	2230      	movs	r2, #48	@ 0x30
 8015d00:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8015d04:	2100      	movs	r1, #0
 8015d06:	a899      	add	r0, sp, #612	@ 0x264
 8015d08:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8015d0c:	9346      	str	r3, [sp, #280]	@ 0x118
 8015d0e:	f00a f842 	bl	801fd96 <memset>
 8015d12:	edd7 7a06 	vldr	s15, [r7, #24]
 8015d16:	f897 31ac 	ldrb.w	r3, [r7, #428]	@ 0x1ac
 8015d1a:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8015d1e:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
 8015d22:	edd7 7a07 	vldr	s15, [r7, #28]
 8015d26:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8015d2a:	edcd 7a12 	vstr	s15, [sp, #72]	@ 0x48
 8015d2e:	edd7 7a08 	vldr	s15, [r7, #32]
 8015d32:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8015d36:	edcd 7a13 	vstr	s15, [sp, #76]	@ 0x4c
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	f042 8660 	bne.w	8018a00 <iNemoEngine_API_Update+0x32a0>
 8015d40:	f507 6314 	add.w	r3, r7, #2368	@ 0x940
 8015d44:	932b      	str	r3, [sp, #172]	@ 0xac
 8015d46:	f607 1344 	addw	r3, r7, #2372	@ 0x944
 8015d4a:	932c      	str	r3, [sp, #176]	@ 0xb0
 8015d4c:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8015d50:	932d      	str	r3, [sp, #180]	@ 0xb4
 8015d52:	f897 3318 	ldrb.w	r3, [r7, #792]	@ 0x318
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	f042 8470 	bne.w	801863c <iNemoEngine_API_Update+0x2edc>
 8015d5c:	f207 43b4 	addw	r3, r7, #1204	@ 0x4b4
 8015d60:	9305      	str	r3, [sp, #20]
 8015d62:	f207 6324 	addw	r3, r7, #1572	@ 0x624
 8015d66:	9306      	str	r3, [sp, #24]
 8015d68:	f507 63f3 	add.w	r3, r7, #1944	@ 0x798
 8015d6c:	f507 6597 	add.w	r5, r7, #1208	@ 0x4b8
 8015d70:	f507 66c5 	add.w	r6, r7, #1576	@ 0x628
 8015d74:	930e      	str	r3, [sp, #56]	@ 0x38
 8015d76:	f207 7b94 	addw	fp, r7, #1940	@ 0x794
 8015d7a:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 8015d7e:	ed93 ba00 	vldr	s22, [r3]
 8015d82:	9323      	str	r3, [sp, #140]	@ 0x8c
 8015d84:	f607 1234 	addw	r2, r7, #2356	@ 0x934
 8015d88:	f607 1138 	addw	r1, r7, #2360	@ 0x938
 8015d8c:	f607 103c 	addw	r0, r7, #2364	@ 0x93c
 8015d90:	edd2 aa00 	vldr	s21, [r2]
 8015d94:	edd1 9a00 	vldr	s19, [r1]
 8015d98:	edd0 ca00 	vldr	s25, [r0]
 8015d9c:	9224      	str	r2, [sp, #144]	@ 0x90
 8015d9e:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8015da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015da6:	9125      	str	r1, [sp, #148]	@ 0x94
 8015da8:	9026      	str	r0, [sp, #152]	@ 0x98
 8015daa:	ed8d ba58 	vstr	s22, [sp, #352]	@ 0x160
 8015dae:	edcd aa59 	vstr	s21, [sp, #356]	@ 0x164
 8015db2:	edcd 9a5a 	vstr	s19, [sp, #360]	@ 0x168
 8015db6:	edcd ca5b 	vstr	s25, [sp, #364]	@ 0x16c
 8015dba:	f04f 0300 	mov.w	r3, #0
 8015dbe:	d142      	bne.n	8015e46 <iNemoEngine_API_Update+0x6e6>
 8015dc0:	eef5 aa40 	vcmp.f32	s21, #0.0
 8015dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dc8:	d13d      	bne.n	8015e46 <iNemoEngine_API_Update+0x6e6>
 8015dca:	eef5 9a40 	vcmp.f32	s19, #0.0
 8015dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dd2:	f043 856d 	bne.w	80198b0 <iNemoEngine_API_Update+0x4150>
 8015dd6:	eef5 ca40 	vcmp.f32	s25, #0.0
 8015dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dde:	f043 867f 	bne.w	8019ae0 <iNemoEngine_API_Update+0x4380>
 8015de2:	eef7 da00 	vmov.f32	s27, #112	@ 0x3f800000  1.0
 8015de6:	9358      	str	r3, [sp, #352]	@ 0x160
 8015de8:	9359      	str	r3, [sp, #356]	@ 0x164
 8015dea:	935a      	str	r3, [sp, #360]	@ 0x168
 8015dec:	2100      	movs	r1, #0
 8015dee:	4b67      	ldr	r3, [pc, #412]	@ (8015f8c <iNemoEngine_API_Update+0x82c>)
 8015df0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8015df4:	edc7 da73 	vstr	s27, [r7, #460]	@ 0x1cc
 8015df8:	edc7 da74 	vstr	s27, [r7, #464]	@ 0x1d0
 8015dfc:	f887 11ac 	strb.w	r1, [r7, #428]	@ 0x1ac
 8015e00:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8015e04:	f507 70ea 	add.w	r0, r7, #468	@ 0x1d4
 8015e08:	edcd da5b 	vstr	s27, [sp, #364]	@ 0x16c
 8015e0c:	f009 ffc3 	bl	801fd96 <memset>
 8015e10:	4b5f      	ldr	r3, [pc, #380]	@ (8015f90 <iNemoEngine_API_Update+0x830>)
 8015e12:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8015e16:	eef0 9a6c 	vmov.f32	s19, s25
 8015e1a:	eef0 aa6c 	vmov.f32	s21, s25
 8015e1e:	eeb0 ba6c 	vmov.f32	s22, s25
 8015e22:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 8015e26:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8015e2a:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8015e2e:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 8015e32:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8015e36:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 8015e3a:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8015e3e:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 8015e42:	eef0 ca6d 	vmov.f32	s25, s27
 8015e46:	eddf 7a53 	vldr	s15, [pc, #332]	@ 8015f94 <iNemoEngine_API_Update+0x834>
 8015e4a:	ed9d 7a04 	vldr	s14, [sp, #16]
 8015e4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e56:	f100 87fe 	bmi.w	8016e56 <iNemoEngine_API_Update+0x16f6>
 8015e5a:	eeb1 eac7 	vsqrt.f32	s28, s14
 8015e5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015e62:	ee3e 6a47 	vsub.f32	s12, s28, s14
 8015e66:	eec7 7a0e 	vdiv.f32	s15, s14, s28
 8015e6a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8015e6e:	eeb0 7ac6 	vabs.f32	s14, s12
 8015e72:	ed8d 7a2e 	vstr	s14, [sp, #184]	@ 0xb8
 8015e76:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015e7a:	ed8d 7a30 	vstr	s14, [sp, #192]	@ 0xc0
 8015e7e:	ee2d 7a0d 	vmul.f32	s14, s26, s26
 8015e82:	edd4 6a00 	vldr	s13, [r4]
 8015e86:	ed94 6a01 	vldr	s12, [r4, #4]
 8015e8a:	edcd 6a34 	vstr	s13, [sp, #208]	@ 0xd0
 8015e8e:	eeac 7a0c 	vfma.f32	s14, s24, s24
 8015e92:	9b05      	ldr	r3, [sp, #20]
 8015e94:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8015e98:	eeab 7aab 	vfma.f32	s14, s23, s23
 8015e9c:	4628      	mov	r0, r5
 8015e9e:	ee67 6a86 	vmul.f32	s13, s15, s12
 8015ea2:	ed8d 6a35 	vstr	s12, [sp, #212]	@ 0xd4
 8015ea6:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8015f94 <iNemoEngine_API_Update+0x834>
 8015eaa:	edcd 6a48 	vstr	s13, [sp, #288]	@ 0x120
 8015eae:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8015eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eb6:	bf54      	ite	pl
 8015eb8:	eeb1 7ac7 	vsqrtpl.f32	s14, s14
 8015ebc:	ed9f 7a36 	vldrmi	s14, [pc, #216]	@ 8015f98 <iNemoEngine_API_Update+0x838>
 8015ec0:	ed94 5a02 	vldr	s10, [r4, #8]
 8015ec4:	ed8d 7a0a 	vstr	s14, [sp, #40]	@ 0x28
 8015ec8:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 8015ecc:	ee82 7a87 	vdiv.f32	s14, s5, s14
 8015ed0:	ee65 7a27 	vmul.f32	s15, s10, s15
 8015ed4:	ee2d 6a07 	vmul.f32	s12, s26, s14
 8015ed8:	ed93 3a00 	vldr	s6, [r3]
 8015edc:	ed8d 6a4b 	vstr	s12, [sp, #300]	@ 0x12c
 8015ee0:	ee66 6a26 	vmul.f32	s13, s12, s13
 8015ee4:	ee2c 6a07 	vmul.f32	s12, s24, s14
 8015ee8:	ee2b 7a87 	vmul.f32	s14, s23, s14
 8015eec:	eee6 6a25 	vfma.f32	s13, s12, s11
 8015ef0:	eeb0 0a43 	vmov.f32	s0, s6
 8015ef4:	eee7 6a87 	vfma.f32	s13, s15, s14
 8015ef8:	ed8d 7a4c 	vstr	s14, [sp, #304]	@ 0x130
 8015efc:	ed8d 5a32 	vstr	s10, [sp, #200]	@ 0xc8
 8015f00:	edcd 5a47 	vstr	s11, [sp, #284]	@ 0x11c
 8015f04:	ed8d 6a4a 	vstr	s12, [sp, #296]	@ 0x128
 8015f08:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 8015f0c:	edcd 7a49 	vstr	s15, [sp, #292]	@ 0x124
 8015f10:	f7fd fd14 	bl	801393c <dataDerivative5>
 8015f14:	9b06      	ldr	r3, [sp, #24]
 8015f16:	ed8d 0a14 	vstr	s0, [sp, #80]	@ 0x50
 8015f1a:	edd3 7a00 	vldr	s15, [r3]
 8015f1e:	4630      	mov	r0, r6
 8015f20:	eeb0 0a67 	vmov.f32	s0, s15
 8015f24:	edcd 7a03 	vstr	s15, [sp, #12]
 8015f28:	f7fd fd08 	bl	801393c <dataDerivative5>
 8015f2c:	eddb da00 	vldr	s27, [fp]
 8015f30:	ed8d 0a0c 	vstr	s0, [sp, #48]	@ 0x30
 8015f34:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8015f36:	eeb0 0a6d 	vmov.f32	s0, s27
 8015f3a:	f7fd fcff 	bl	801393c <dataDerivative5>
 8015f3e:	eec2 7a83 	vdiv.f32	s15, s5, s6
 8015f42:	ed8d 0a16 	vstr	s0, [sp, #88]	@ 0x58
 8015f46:	ee29 9a27 	vmul.f32	s18, s18, s15
 8015f4a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015f4e:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8015f52:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8015f9c <iNemoEngine_API_Update+0x83c>
 8015f56:	eeb0 7ac9 	vabs.f32	s14, s18
 8015f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f62:	d52d      	bpl.n	8015fc0 <iNemoEngine_API_Update+0x860>
 8015f64:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015f68:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8015f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f70:	f282 8092 	bge.w	8018098 <iNemoEngine_API_Update+0x2938>
 8015f74:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8015f78:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8015f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f80:	f303 8088 	bgt.w	8019094 <iNemoEngine_API_Update+0x3934>
 8015f84:	e00c      	b.n	8015fa0 <iNemoEngine_API_Update+0x840>
 8015f86:	bf00      	nop
 8015f88:	3a9d4952 	.word	0x3a9d4952
 8015f8c:	bf666666 	.word	0xbf666666
 8015f90:	40a00000 	.word	0x40a00000
 8015f94:	3c23d70a 	.word	0x3c23d70a
 8015f98:	3dcccccd 	.word	0x3dcccccd
 8015f9c:	4b000000 	.word	0x4b000000
 8015fa0:	ee79 7a67 	vsub.f32	s15, s18, s15
 8015fa4:	ee17 0a90 	vmov	r0, s15
 8015fa8:	f7ea faf6 	bl	8000598 <__aeabi_f2d>
 8015fac:	ec41 0b10 	vmov	d0, r0, r1
 8015fb0:	f007 f8fe 	bl	801d1b0 <ceil>
 8015fb4:	ec51 0b10 	vmov	r0, r1, d0
 8015fb8:	f7ea fe1e 	bl	8000bf8 <__aeabi_d2f>
 8015fbc:	ee09 0a10 	vmov	s18, r0
 8015fc0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8015f9c <iNemoEngine_API_Update+0x83c>
 8015fc4:	ed8d 9a4d 	vstr	s18, [sp, #308]	@ 0x134
 8015fc8:	eeb0 7ac8 	vabs.f32	s14, s16
 8015fcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fd4:	d51f      	bpl.n	8016016 <iNemoEngine_API_Update+0x8b6>
 8015fd6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015fda:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fe2:	f282 802d 	bge.w	8018040 <iNemoEngine_API_Update+0x28e0>
 8015fe6:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8015fea:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8015fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ff2:	f303 804b 	bgt.w	801908c <iNemoEngine_API_Update+0x392c>
 8015ff6:	ee78 7a67 	vsub.f32	s15, s16, s15
 8015ffa:	ee17 0a90 	vmov	r0, s15
 8015ffe:	f7ea facb 	bl	8000598 <__aeabi_f2d>
 8016002:	ec41 0b10 	vmov	d0, r0, r1
 8016006:	f007 f8d3 	bl	801d1b0 <ceil>
 801600a:	ec51 0b10 	vmov	r0, r1, d0
 801600e:	f7ea fdf3 	bl	8000bf8 <__aeabi_d2f>
 8016012:	ee08 0a10 	vmov	s16, r0
 8016016:	ed5f 7a1f 	vldr	s15, [pc, #-124]	@ 8015f9c <iNemoEngine_API_Update+0x83c>
 801601a:	ed8d 8a4e 	vstr	s16, [sp, #312]	@ 0x138
 801601e:	eeb0 7aee 	vabs.f32	s14, s29
 8016022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801602a:	d51f      	bpl.n	801606c <iNemoEngine_API_Update+0x90c>
 801602c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016030:	eef4 eae7 	vcmpe.f32	s29, s15
 8016034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016038:	f281 87f0 	bge.w	801801c <iNemoEngine_API_Update+0x28bc>
 801603c:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8016040:	eef4 eac7 	vcmpe.f32	s29, s14
 8016044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016048:	f303 801c 	bgt.w	8019084 <iNemoEngine_API_Update+0x3924>
 801604c:	ee7e 7ae7 	vsub.f32	s15, s29, s15
 8016050:	ee17 0a90 	vmov	r0, s15
 8016054:	f7ea faa0 	bl	8000598 <__aeabi_f2d>
 8016058:	ec41 0b10 	vmov	d0, r0, r1
 801605c:	f007 f8a8 	bl	801d1b0 <ceil>
 8016060:	ec51 0b10 	vmov	r0, r1, d0
 8016064:	f7ea fdc8 	bl	8000bf8 <__aeabi_d2f>
 8016068:	ee0e 0a90 	vmov	s29, r0
 801606c:	f897 04b1 	ldrb.w	r0, [r7, #1201]	@ 0x4b1
 8016070:	edcd ea4f 	vstr	s29, [sp, #316]	@ 0x13c
 8016074:	1e43      	subs	r3, r0, #1
 8016076:	b25a      	sxtb	r2, r3
 8016078:	2a00      	cmp	r2, #0
 801607a:	b2db      	uxtb	r3, r3
 801607c:	dd17      	ble.n	80160ae <iNemoEngine_API_Update+0x94e>
 801607e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016082:	1e82      	subs	r2, r0, #2
 8016084:	009b      	lsls	r3, r3, #2
 8016086:	b2d2      	uxtb	r2, r2
 8016088:	f507 6194 	add.w	r1, r7, #1184	@ 0x4a0
 801608c:	4419      	add	r1, r3
 801608e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016092:	f203 43ac 	addw	r3, r3, #1196	@ 0x4ac
 8016096:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 801609a:	443b      	add	r3, r7
 801609c:	681a      	ldr	r2, [r3, #0]
 801609e:	60da      	str	r2, [r3, #12]
 80160a0:	685a      	ldr	r2, [r3, #4]
 80160a2:	611a      	str	r2, [r3, #16]
 80160a4:	689a      	ldr	r2, [r3, #8]
 80160a6:	615a      	str	r2, [r3, #20]
 80160a8:	3b0c      	subs	r3, #12
 80160aa:	428b      	cmp	r3, r1
 80160ac:	d1f6      	bne.n	801609c <iNemoEngine_API_Update+0x93c>
 80160ae:	ed9d 7a03 	vldr	s14, [sp, #12]
 80160b2:	ed85 9a00 	vstr	s18, [r5]
 80160b6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80160ba:	ee87 9a87 	vdiv.f32	s18, s15, s14
 80160be:	f207 43bc 	addw	r3, r7, #1212	@ 0x4bc
 80160c2:	ed83 8a00 	vstr	s16, [r3]
 80160c6:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 80160ca:	edc3 ea00 	vstr	s29, [r3]
 80160ce:	f897 34b0 	ldrb.w	r3, [r7, #1200]	@ 0x4b0
 80160d2:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8015f9c <iNemoEngine_API_Update+0x83c>
 80160d6:	ee2c 8a09 	vmul.f32	s16, s24, s18
 80160da:	3301      	adds	r3, #1
 80160dc:	b2db      	uxtb	r3, r3
 80160de:	eeb0 7ac8 	vabs.f32	s14, s16
 80160e2:	4283      	cmp	r3, r0
 80160e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80160e8:	bf28      	it	cs
 80160ea:	4603      	movcs	r3, r0
 80160ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160f0:	ee6d ea09 	vmul.f32	s29, s26, s18
 80160f4:	f887 34b0 	strb.w	r3, [r7, #1200]	@ 0x4b0
 80160f8:	ee2b 9a89 	vmul.f32	s18, s23, s18
 80160fc:	d51f      	bpl.n	801613e <iNemoEngine_API_Update+0x9de>
 80160fe:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016102:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801610a:	f281 8775 	bge.w	8017ff8 <iNemoEngine_API_Update+0x2898>
 801610e:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8016112:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8016116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801611a:	f302 87af 	bgt.w	801907c <iNemoEngine_API_Update+0x391c>
 801611e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8016122:	ee17 0a90 	vmov	r0, s15
 8016126:	f7ea fa37 	bl	8000598 <__aeabi_f2d>
 801612a:	ec41 0b10 	vmov	d0, r0, r1
 801612e:	f007 f83f 	bl	801d1b0 <ceil>
 8016132:	ec51 0b10 	vmov	r0, r1, d0
 8016136:	f7ea fd5f 	bl	8000bf8 <__aeabi_d2f>
 801613a:	ee08 0a10 	vmov	s16, r0
 801613e:	ed5f 7a69 	vldr	s15, [pc, #-420]	@ 8015f9c <iNemoEngine_API_Update+0x83c>
 8016142:	ed8d 8a4d 	vstr	s16, [sp, #308]	@ 0x134
 8016146:	eeb0 7aee 	vabs.f32	s14, s29
 801614a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801614e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016152:	d51f      	bpl.n	8016194 <iNemoEngine_API_Update+0xa34>
 8016154:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016158:	eef4 eae7 	vcmpe.f32	s29, s15
 801615c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016160:	f282 80ae 	bge.w	80182c0 <iNemoEngine_API_Update+0x2b60>
 8016164:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8016168:	eef4 eac7 	vcmpe.f32	s29, s14
 801616c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016170:	f302 8780 	bgt.w	8019074 <iNemoEngine_API_Update+0x3914>
 8016174:	ee7e 7ae7 	vsub.f32	s15, s29, s15
 8016178:	ee17 0a90 	vmov	r0, s15
 801617c:	f7ea fa0c 	bl	8000598 <__aeabi_f2d>
 8016180:	ec41 0b10 	vmov	d0, r0, r1
 8016184:	f007 f814 	bl	801d1b0 <ceil>
 8016188:	ec51 0b10 	vmov	r0, r1, d0
 801618c:	f7ea fd34 	bl	8000bf8 <__aeabi_d2f>
 8016190:	ee0e 0a90 	vmov	s29, r0
 8016194:	ed5f 7a7f 	vldr	s15, [pc, #-508]	@ 8015f9c <iNemoEngine_API_Update+0x83c>
 8016198:	edcd ea4e 	vstr	s29, [sp, #312]	@ 0x138
 801619c:	eeb0 7ac9 	vabs.f32	s14, s18
 80161a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80161a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161a8:	d51f      	bpl.n	80161ea <iNemoEngine_API_Update+0xa8a>
 80161aa:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80161ae:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80161b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161b6:	f282 8071 	bge.w	801829c <iNemoEngine_API_Update+0x2b3c>
 80161ba:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80161be:	eeb4 9ac7 	vcmpe.f32	s18, s14
 80161c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161c6:	f302 8751 	bgt.w	801906c <iNemoEngine_API_Update+0x390c>
 80161ca:	ee79 7a67 	vsub.f32	s15, s18, s15
 80161ce:	ee17 0a90 	vmov	r0, s15
 80161d2:	f7ea f9e1 	bl	8000598 <__aeabi_f2d>
 80161d6:	ec41 0b10 	vmov	d0, r0, r1
 80161da:	f006 ffe9 	bl	801d1b0 <ceil>
 80161de:	ec51 0b10 	vmov	r0, r1, d0
 80161e2:	f7ea fd09 	bl	8000bf8 <__aeabi_d2f>
 80161e6:	ee09 0a10 	vmov	s18, r0
 80161ea:	f897 0621 	ldrb.w	r0, [r7, #1569]	@ 0x621
 80161ee:	ed8d 9a4f 	vstr	s18, [sp, #316]	@ 0x13c
 80161f2:	1e43      	subs	r3, r0, #1
 80161f4:	b25a      	sxtb	r2, r3
 80161f6:	2a00      	cmp	r2, #0
 80161f8:	b2db      	uxtb	r3, r3
 80161fa:	dd17      	ble.n	801622c <iNemoEngine_API_Update+0xacc>
 80161fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016200:	1e82      	subs	r2, r0, #2
 8016202:	009b      	lsls	r3, r3, #2
 8016204:	b2d2      	uxtb	r2, r2
 8016206:	f507 61c2 	add.w	r1, r7, #1552	@ 0x610
 801620a:	4419      	add	r1, r3
 801620c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016210:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 8016214:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 8016218:	443b      	add	r3, r7
 801621a:	681a      	ldr	r2, [r3, #0]
 801621c:	60da      	str	r2, [r3, #12]
 801621e:	685a      	ldr	r2, [r3, #4]
 8016220:	611a      	str	r2, [r3, #16]
 8016222:	689a      	ldr	r2, [r3, #8]
 8016224:	615a      	str	r2, [r3, #20]
 8016226:	3b0c      	subs	r3, #12
 8016228:	428b      	cmp	r3, r1
 801622a:	d1f6      	bne.n	801621a <iNemoEngine_API_Update+0xaba>
 801622c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8016230:	ed86 8a00 	vstr	s16, [r6]
 8016234:	ee87 8aad 	vdiv.f32	s16, s15, s27
 8016238:	f207 632c 	addw	r3, r7, #1580	@ 0x62c
 801623c:	edc3 ea00 	vstr	s29, [r3]
 8016240:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8016244:	ed83 9a00 	vstr	s18, [r3]
 8016248:	f897 3620 	ldrb.w	r3, [r7, #1568]	@ 0x620
 801624c:	ed9d 7a10 	vldr	s14, [sp, #64]	@ 0x40
 8016250:	ed5f 7aae 	vldr	s15, [pc, #-696]	@ 8015f9c <iNemoEngine_API_Update+0x83c>
 8016254:	ee28 9a2f 	vmul.f32	s18, s16, s31
 8016258:	3301      	adds	r3, #1
 801625a:	b2db      	uxtb	r3, r3
 801625c:	ee68 ea0f 	vmul.f32	s29, s16, s30
 8016260:	ee27 8a08 	vmul.f32	s16, s14, s16
 8016264:	eeb0 7ac9 	vabs.f32	s14, s18
 8016268:	4283      	cmp	r3, r0
 801626a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801626e:	bf28      	it	cs
 8016270:	4603      	movcs	r3, r0
 8016272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016276:	f887 3620 	strb.w	r3, [r7, #1568]	@ 0x620
 801627a:	d51f      	bpl.n	80162bc <iNemoEngine_API_Update+0xb5c>
 801627c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016280:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8016284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016288:	f282 802c 	bge.w	80182e4 <iNemoEngine_API_Update+0x2b84>
 801628c:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8016290:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8016294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016298:	f302 86ca 	bgt.w	8019030 <iNemoEngine_API_Update+0x38d0>
 801629c:	ee79 7a67 	vsub.f32	s15, s18, s15
 80162a0:	ee17 0a90 	vmov	r0, s15
 80162a4:	f7ea f978 	bl	8000598 <__aeabi_f2d>
 80162a8:	ec41 0b10 	vmov	d0, r0, r1
 80162ac:	f006 ff80 	bl	801d1b0 <ceil>
 80162b0:	ec51 0b10 	vmov	r0, r1, d0
 80162b4:	f7ea fca0 	bl	8000bf8 <__aeabi_d2f>
 80162b8:	ee09 0a10 	vmov	s18, r0
 80162bc:	ed5f 7ac9 	vldr	s15, [pc, #-804]	@ 8015f9c <iNemoEngine_API_Update+0x83c>
 80162c0:	ed8d 9a4d 	vstr	s18, [sp, #308]	@ 0x134
 80162c4:	eeb0 7aee 	vabs.f32	s14, s29
 80162c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80162cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162d0:	d51f      	bpl.n	8016312 <iNemoEngine_API_Update+0xbb2>
 80162d2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80162d6:	eef4 eae7 	vcmpe.f32	s29, s15
 80162da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162de:	f281 87cb 	bge.w	8018278 <iNemoEngine_API_Update+0x2b18>
 80162e2:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80162e6:	eef4 eac7 	vcmpe.f32	s29, s14
 80162ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162ee:	f302 86b9 	bgt.w	8019064 <iNemoEngine_API_Update+0x3904>
 80162f2:	ee7e 7ae7 	vsub.f32	s15, s29, s15
 80162f6:	ee17 0a90 	vmov	r0, s15
 80162fa:	f7ea f94d 	bl	8000598 <__aeabi_f2d>
 80162fe:	ec41 0b10 	vmov	d0, r0, r1
 8016302:	f006 ff55 	bl	801d1b0 <ceil>
 8016306:	ec51 0b10 	vmov	r0, r1, d0
 801630a:	f7ea fc75 	bl	8000bf8 <__aeabi_d2f>
 801630e:	ee0e 0a90 	vmov	s29, r0
 8016312:	ed5f 7ade 	vldr	s15, [pc, #-888]	@ 8015f9c <iNemoEngine_API_Update+0x83c>
 8016316:	edcd ea4e 	vstr	s29, [sp, #312]	@ 0x138
 801631a:	eeb0 7ac8 	vabs.f32	s14, s16
 801631e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016326:	d51f      	bpl.n	8016368 <iNemoEngine_API_Update+0xc08>
 8016328:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801632c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016334:	f281 878e 	bge.w	8018254 <iNemoEngine_API_Update+0x2af4>
 8016338:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801633c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8016340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016344:	f302 8678 	bgt.w	8019038 <iNemoEngine_API_Update+0x38d8>
 8016348:	ee78 7a67 	vsub.f32	s15, s16, s15
 801634c:	ee17 0a90 	vmov	r0, s15
 8016350:	f7ea f922 	bl	8000598 <__aeabi_f2d>
 8016354:	ec41 0b10 	vmov	d0, r0, r1
 8016358:	f006 ff2a 	bl	801d1b0 <ceil>
 801635c:	ec51 0b10 	vmov	r0, r1, d0
 8016360:	f7ea fc4a 	bl	8000bf8 <__aeabi_d2f>
 8016364:	ee08 0a10 	vmov	s16, r0
 8016368:	f897 0791 	ldrb.w	r0, [r7, #1937]	@ 0x791
 801636c:	ed8d 8a4f 	vstr	s16, [sp, #316]	@ 0x13c
 8016370:	1e43      	subs	r3, r0, #1
 8016372:	b25a      	sxtb	r2, r3
 8016374:	2a00      	cmp	r2, #0
 8016376:	b2db      	uxtb	r3, r3
 8016378:	dd17      	ble.n	80163aa <iNemoEngine_API_Update+0xc4a>
 801637a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801637e:	1e82      	subs	r2, r0, #2
 8016380:	009b      	lsls	r3, r3, #2
 8016382:	b2d2      	uxtb	r2, r2
 8016384:	f507 61f0 	add.w	r1, r7, #1920	@ 0x780
 8016388:	4419      	add	r1, r3
 801638a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801638e:	f203 738c 	addw	r3, r3, #1932	@ 0x78c
 8016392:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 8016396:	443b      	add	r3, r7
 8016398:	681a      	ldr	r2, [r3, #0]
 801639a:	60da      	str	r2, [r3, #12]
 801639c:	685a      	ldr	r2, [r3, #4]
 801639e:	611a      	str	r2, [r3, #16]
 80163a0:	689a      	ldr	r2, [r3, #8]
 80163a2:	615a      	str	r2, [r3, #20]
 80163a4:	3b0c      	subs	r3, #12
 80163a6:	428b      	cmp	r3, r1
 80163a8:	d1f6      	bne.n	8016398 <iNemoEngine_API_Update+0xc38>
 80163aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80163ac:	ed83 9a00 	vstr	s18, [r3]
 80163b0:	f207 739c 	addw	r3, r7, #1948	@ 0x79c
 80163b4:	edc3 ea00 	vstr	s29, [r3]
 80163b8:	9336      	str	r3, [sp, #216]	@ 0xd8
 80163ba:	f507 63f4 	add.w	r3, r7, #1952	@ 0x7a0
 80163be:	ed83 8a00 	vstr	s16, [r3]
 80163c2:	9337      	str	r3, [sp, #220]	@ 0xdc
 80163c4:	f897 3790 	ldrb.w	r3, [r7, #1936]	@ 0x790
 80163c8:	3301      	adds	r3, #1
 80163ca:	b2db      	uxtb	r3, r3
 80163cc:	4283      	cmp	r3, r0
 80163ce:	bf28      	it	cs
 80163d0:	4603      	movcs	r3, r0
 80163d2:	f887 3790 	strb.w	r3, [r7, #1936]	@ 0x790
 80163d6:	aa72      	add	r2, sp, #456	@ 0x1c8
 80163d8:	a947      	add	r1, sp, #284	@ 0x11c
 80163da:	a84a      	add	r0, sp, #296	@ 0x128
 80163dc:	f7fd fb94 	bl	8013b08 <getRotationMatrix>
 80163e0:	f50d 7a38 	add.w	sl, sp, #736	@ 0x2e0
 80163e4:	f507 7347 	add.w	r3, r7, #796	@ 0x31c
 80163e8:	9331      	str	r3, [sp, #196]	@ 0xc4
 80163ea:	461e      	mov	r6, r3
 80163ec:	46d4      	mov	ip, sl
 80163ee:	f507 754f 	add.w	r5, r7, #828	@ 0x33c
 80163f2:	6830      	ldr	r0, [r6, #0]
 80163f4:	6871      	ldr	r1, [r6, #4]
 80163f6:	68b2      	ldr	r2, [r6, #8]
 80163f8:	68f3      	ldr	r3, [r6, #12]
 80163fa:	4664      	mov	r4, ip
 80163fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80163fe:	3610      	adds	r6, #16
 8016400:	42ae      	cmp	r6, r5
 8016402:	46a4      	mov	ip, r4
 8016404:	d1f5      	bne.n	80163f2 <iNemoEngine_API_Update+0xc92>
 8016406:	6830      	ldr	r0, [r6, #0]
 8016408:	6020      	str	r0, [r4, #0]
 801640a:	ed97 7ac7 	vldr	s14, [r7, #796]	@ 0x31c
 801640e:	edd7 7ac8 	vldr	s15, [r7, #800]	@ 0x320
 8016412:	eeb0 7ac7 	vabs.f32	s14, s14
 8016416:	eef0 7ae7 	vabs.f32	s15, s15
 801641a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801641e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016422:	f140 850a 	bpl.w	8016e3a <iNemoEngine_API_Update+0x16da>
 8016426:	2004      	movs	r0, #4
 8016428:	2400      	movs	r4, #0
 801642a:	2107      	movs	r1, #7
 801642c:	f04f 0c06 	mov.w	ip, #6
 8016430:	2203      	movs	r2, #3
 8016432:	4603      	mov	r3, r0
 8016434:	9403      	str	r4, [sp, #12]
 8016436:	f04f 0e01 	mov.w	lr, #1
 801643a:	ed97 7ac9 	vldr	s14, [r7, #804]	@ 0x324
 801643e:	eeb0 7ac7 	vabs.f32	s14, s14
 8016442:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801644a:	f300 84e4 	bgt.w	8016e16 <iNemoEngine_API_Update+0x16b6>
 801644e:	2505      	movs	r5, #5
 8016450:	9504      	str	r5, [sp, #16]
 8016452:	f04f 0b08 	mov.w	fp, #8
 8016456:	2502      	movs	r5, #2
 8016458:	9e31      	ldr	r6, [sp, #196]	@ 0xc4
 801645a:	4434      	add	r4, r6
 801645c:	4433      	add	r3, r6
 801645e:	edd4 6a00 	vldr	s13, [r4]
 8016462:	ed93 7a00 	vldr	s14, [r3]
 8016466:	9b03      	ldr	r3, [sp, #12]
 8016468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801646c:	eb0a 0683 	add.w	r6, sl, r3, lsl #2
 8016470:	eb0a 0485 	add.w	r4, sl, r5, lsl #2
 8016474:	00ab      	lsls	r3, r5, #2
 8016476:	eb0a 058e 	add.w	r5, sl, lr, lsl #2
 801647a:	ea4f 0980 	mov.w	r9, r0, lsl #2
 801647e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8016482:	edc6 7a00 	vstr	s15, [r6]
 8016486:	ed95 7a00 	vldr	s14, [r5]
 801648a:	edd4 6a00 	vldr	s13, [r4]
 801648e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016492:	eb0a 0582 	add.w	r5, sl, r2, lsl #2
 8016496:	edc4 7a00 	vstr	s15, [r4]
 801649a:	eb0a 0480 	add.w	r4, sl, r0, lsl #2
 801649e:	edd6 6a00 	vldr	s13, [r6]
 80164a2:	ed94 6a00 	vldr	s12, [r4]
 80164a6:	ed95 7a00 	vldr	s14, [r5]
 80164aa:	eea6 7ac6 	vfms.f32	s14, s13, s12
 80164ae:	ea4f 068c 	mov.w	r6, ip, lsl #2
 80164b2:	ed85 7a00 	vstr	s14, [r5]
 80164b6:	ed94 7a00 	vldr	s14, [r4]
 80164ba:	9c04      	ldr	r4, [sp, #16]
 80164bc:	eb0a 0084 	add.w	r0, sl, r4, lsl #2
 80164c0:	ed90 6a00 	vldr	s12, [r0]
 80164c4:	eea7 6ac7 	vfms.f32	s12, s15, s14
 80164c8:	00a4      	lsls	r4, r4, #2
 80164ca:	ed80 6a00 	vstr	s12, [r0]
 80164ce:	eb0a 0081 	add.w	r0, sl, r1, lsl #2
 80164d2:	0089      	lsls	r1, r1, #2
 80164d4:	9104      	str	r1, [sp, #16]
 80164d6:	eb0a 018c 	add.w	r1, sl, ip, lsl #2
 80164da:	edd0 5a00 	vldr	s11, [r0]
 80164de:	ed91 7a00 	vldr	s14, [r1]
 80164e2:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80164e6:	eef0 5ac6 	vabs.f32	s11, s12
 80164ea:	ed81 7a00 	vstr	s14, [r1]
 80164ee:	edd0 6a00 	vldr	s13, [r0]
 80164f2:	eb0a 008b 	add.w	r0, sl, fp, lsl #2
 80164f6:	ed90 7a00 	vldr	s14, [r0]
 80164fa:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80164fe:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8016502:	ed80 7a00 	vstr	s14, [r0]
 8016506:	edd5 6a00 	vldr	s13, [r5]
 801650a:	9803      	ldr	r0, [sp, #12]
 801650c:	eef0 7ae6 	vabs.f32	s15, s13
 8016510:	eef4 5ae7 	vcmpe.f32	s11, s15
 8016514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016518:	ea4f 0080 	mov.w	r0, r0, lsl #2
 801651c:	ea4f 0582 	mov.w	r5, r2, lsl #2
 8016520:	f300 8465 	bgt.w	8016dee <iNemoEngine_API_Update+0x168e>
 8016524:	edd1 5a00 	vldr	s11, [r1]
 8016528:	eef0 7a47 	vmov.f32	s15, s14
 801652c:	ee86 4a26 	vdiv.f32	s8, s12, s13
 8016530:	eb0a 020b 	add.w	r2, sl, fp
 8016534:	4454      	add	r4, sl
 8016536:	4455      	add	r5, sl
 8016538:	a978      	add	r1, sp, #480	@ 0x1e0
 801653a:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 801653e:	eee4 7a65 	vfms.f32	s15, s8, s11
 8016542:	ed84 4a00 	vstr	s8, [r4]
 8016546:	edc2 7a00 	vstr	s15, [r2]
 801654a:	4632      	mov	r2, r6
 801654c:	4452      	add	r2, sl
 801654e:	edd2 1a00 	vldr	s3, [r2]
 8016552:	9a04      	ldr	r2, [sp, #16]
 8016554:	ed95 7a00 	vldr	s14, [r5]
 8016558:	4452      	add	r2, sl
 801655a:	ed92 2a00 	vldr	s4, [r2]
 801655e:	eb0a 0209 	add.w	r2, sl, r9
 8016562:	ed92 3a00 	vldr	s6, [r2]
 8016566:	eb0a 0200 	add.w	r2, sl, r0
 801656a:	ed92 0a00 	vldr	s0, [r2]
 801656e:	eb0a 0203 	add.w	r2, sl, r3
 8016572:	edd2 0a00 	vldr	s1, [r2]
 8016576:	aa72      	add	r2, sp, #456	@ 0x1c8
 8016578:	ee83 1aa7 	vdiv.f32	s2, s7, s15
 801657c:	4472      	add	r2, lr
 801657e:	eec3 2a87 	vdiv.f32	s5, s7, s14
 8016582:	ed92 7a00 	vldr	s14, [r2]
 8016586:	aa72      	add	r2, sp, #456	@ 0x1c8
 8016588:	4402      	add	r2, r0
 801658a:	edd2 7a00 	vldr	s15, [r2]
 801658e:	aa72      	add	r2, sp, #456	@ 0x1c8
 8016590:	441a      	add	r2, r3
 8016592:	edd2 5a00 	vldr	s11, [r2]
 8016596:	eee0 7a47 	vfms.f32	s15, s0, s14
 801659a:	aa75      	add	r2, sp, #468	@ 0x1d4
 801659c:	4472      	add	r2, lr
 801659e:	eee0 5ac7 	vfms.f32	s11, s1, s14
 80165a2:	edd2 4a00 	vldr	s9, [r2]
 80165a6:	eee4 5a67 	vfms.f32	s11, s8, s15
 80165aa:	aa75      	add	r2, sp, #468	@ 0x1d4
 80165ac:	4402      	add	r2, r0
 80165ae:	ed92 6a00 	vldr	s12, [r2]
 80165b2:	ee61 5a25 	vmul.f32	s11, s2, s11
 80165b6:	aa75      	add	r2, sp, #468	@ 0x1d4
 80165b8:	eea2 7a65 	vfms.f32	s14, s4, s11
 80165bc:	441a      	add	r2, r3
 80165be:	440b      	add	r3, r1
 80165c0:	eee1 7ae5 	vfms.f32	s15, s3, s11
 80165c4:	4408      	add	r0, r1
 80165c6:	eef0 6a47 	vmov.f32	s13, s14
 80165ca:	ee22 7aa7 	vmul.f32	s14, s5, s15
 80165ce:	eea0 6a64 	vfms.f32	s12, s0, s9
 80165d2:	eee3 6a47 	vfms.f32	s13, s6, s14
 80165d6:	edd3 7a00 	vldr	s15, [r3]
 80165da:	ed90 5a00 	vldr	s10, [r0]
 80165de:	eeb0 8a66 	vmov.f32	s16, s13
 80165e2:	edd2 6a00 	vldr	s13, [r2]
 80165e6:	eee0 6ae4 	vfms.f32	s13, s1, s9
 80165ea:	460b      	mov	r3, r1
 80165ec:	4473      	add	r3, lr
 80165ee:	44d6      	add	lr, sl
 80165f0:	eee4 6a46 	vfms.f32	s13, s8, s12
 80165f4:	ee61 6a26 	vmul.f32	s13, s2, s13
 80165f8:	eea1 6ae6 	vfms.f32	s12, s3, s13
 80165fc:	eee2 4a66 	vfms.f32	s9, s4, s13
 8016600:	ee22 6a86 	vmul.f32	s12, s5, s12
 8016604:	eee3 4a46 	vfms.f32	s9, s6, s12
 8016608:	eeb0 9a64 	vmov.f32	s18, s9
 801660c:	edd3 4a00 	vldr	s9, [r3]
 8016610:	eea4 5ac0 	vfms.f32	s10, s9, s0
 8016614:	eee4 7ae0 	vfms.f32	s15, s9, s1
 8016618:	eee4 7a45 	vfms.f32	s15, s8, s10
 801661c:	ee67 7a81 	vmul.f32	s15, s15, s2
 8016620:	eea7 5ae1 	vfms.f32	s10, s15, s3
 8016624:	eee7 4ac2 	vfms.f32	s9, s15, s4
 8016628:	ee22 4a85 	vmul.f32	s8, s5, s10
 801662c:	eeb0 5a64 	vmov.f32	s10, s9
 8016630:	eea4 5a43 	vfms.f32	s10, s8, s6
 8016634:	ed9e 3a00 	vldr	s6, [lr]
 8016638:	eec3 4a83 	vdiv.f32	s9, s7, s6
 801663c:	eebf 2a00 	vmov.f32	s4, #240	@ 0xbf800000 -1.0
 8016640:	ee64 2a88 	vmul.f32	s5, s9, s16
 8016644:	ee24 3a89 	vmul.f32	s6, s9, s18
 8016648:	ee64 4a85 	vmul.f32	s9, s9, s10
 801664c:	ee37 5a86 	vadd.f32	s10, s15, s12
 8016650:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8016654:	ee32 5ac5 	vsub.f32	s10, s5, s10
 8016658:	eeb4 5ac2 	vcmpe.f32	s10, s4
 801665c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016660:	bfc8      	it	gt
 8016662:	ee75 3a23 	vaddgt.f32	s7, s10, s7
 8016666:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801666a:	bfcc      	ite	gt
 801666c:	eeb1 5ae3 	vsqrtgt.f32	s10, s7
 8016670:	ed9f 5ada 	vldrle	s10, [pc, #872]	@ 80169dc <iNemoEngine_API_Update+0x127c>
 8016674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016678:	f101 83df 	bmi.w	8017e3a <iNemoEngine_API_Update+0x26da>
 801667c:	bfd8      	it	le
 801667e:	ee25 5a26 	vmulle.f32	s10, s10, s13
 8016682:	ee76 6a67 	vsub.f32	s13, s12, s15
 8016686:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 801668a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 801668e:	ee25 5a04 	vmul.f32	s10, s10, s8
 8016692:	eebf 4a00 	vmov.f32	s8, #240	@ 0xbf800000 -1.0
 8016696:	eef4 6ac4 	vcmpe.f32	s13, s8
 801669a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801669e:	bf88      	it	hi
 80166a0:	eeb7 4a00 	vmovhi.f32	s8, #112	@ 0x3f800000  1.0
 80166a4:	ee74 4ae5 	vsub.f32	s9, s9, s11
 80166a8:	bf88      	it	hi
 80166aa:	ee36 4a84 	vaddhi.f32	s8, s13, s8
 80166ae:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80166b2:	bf8c      	ite	hi
 80166b4:	eef1 6ac4 	vsqrthi.f32	s13, s8
 80166b8:	eddf 6ac8 	vldrls	s13, [pc, #800]	@ 80169dc <iNemoEngine_API_Update+0x127c>
 80166bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166c0:	f101 83b7 	bmi.w	8017e32 <iNemoEngine_API_Update+0x26d2>
 80166c4:	bfd8      	it	le
 80166c6:	ee66 6aa4 	vmulle.f32	s13, s13, s9
 80166ca:	ee72 2a86 	vadd.f32	s5, s5, s12
 80166ce:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80166d2:	ee77 7ae2 	vsub.f32	s15, s15, s5
 80166d6:	ee26 6a86 	vmul.f32	s12, s13, s12
 80166da:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 80166de:	eef4 7ae6 	vcmpe.f32	s15, s13
 80166e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166e6:	bf88      	it	hi
 80166e8:	eef7 6a00 	vmovhi.f32	s13, #112	@ 0x3f800000  1.0
 80166ec:	ee37 7a43 	vsub.f32	s14, s14, s6
 80166f0:	bf88      	it	hi
 80166f2:	ee77 6aa6 	vaddhi.f32	s13, s15, s13
 80166f6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80166fa:	bf8c      	ite	hi
 80166fc:	eef1 7ae6 	vsqrthi.f32	s15, s13
 8016700:	eddf 7ab6 	vldrls	s15, [pc, #728]	@ 80169dc <iNemoEngine_API_Update+0x127c>
 8016704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016708:	f100 83d1 	bmi.w	8016eae <iNemoEngine_API_Update+0x174e>
 801670c:	bfd8      	it	le
 801670e:	ee67 7a87 	vmulle.f32	s15, s15, s14
 8016712:	f897 2341 	ldrb.w	r2, [r7, #833]	@ 0x341
 8016716:	1e53      	subs	r3, r2, #1
 8016718:	b259      	sxtb	r1, r3
 801671a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801671e:	2900      	cmp	r1, #0
 8016720:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016724:	b2db      	uxtb	r3, r3
 8016726:	dd1c      	ble.n	8016762 <iNemoEngine_API_Update+0x1002>
 8016728:	3a02      	subs	r2, #2
 801672a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801672e:	b2d2      	uxtb	r2, r2
 8016730:	f1a7 010c 	sub.w	r1, r7, #12
 8016734:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8016738:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801673c:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 8016740:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016744:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 8016748:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
 801674c:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 8016750:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
 8016754:	f8d3 2344 	ldr.w	r2, [r3, #836]	@ 0x344
 8016758:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
 801675c:	3b0c      	subs	r3, #12
 801675e:	428b      	cmp	r3, r1
 8016760:	d1f0      	bne.n	8016744 <iNemoEngine_API_Update+0xfe4>
 8016762:	ed9d 7a07 	vldr	s14, [sp, #28]
 8016766:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801676a:	ee86 7a87 	vdiv.f32	s14, s13, s14
 801676e:	ab47      	add	r3, sp, #284	@ 0x11c
 8016770:	f20d 12eb 	addw	r2, sp, #491	@ 0x1eb
 8016774:	4699      	mov	r9, r3
 8016776:	f1c2 0601 	rsb	r6, r2, #1
 801677a:	9333      	str	r3, [sp, #204]	@ 0xcc
 801677c:	2300      	movs	r3, #0
 801677e:	e9cd 7838 	strd	r7, r8, [sp, #224]	@ 0xe0
 8016782:	ad7b      	add	r5, sp, #492	@ 0x1ec
 8016784:	46c8      	mov	r8, r9
 8016786:	f50d 7b04 	add.w	fp, sp, #528	@ 0x210
 801678a:	46b9      	mov	r9, r7
 801678c:	ee25 5a07 	vmul.f32	s10, s10, s14
 8016790:	ee66 6a07 	vmul.f32	s13, s12, s14
 8016794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016798:	ed87 5ad2 	vstr	s10, [r7, #840]	@ 0x348
 801679c:	edc7 6ad3 	vstr	s13, [r7, #844]	@ 0x34c
 80167a0:	edc7 7ad4 	vstr	s15, [r7, #848]	@ 0x350
 80167a4:	4637      	mov	r7, r6
 80167a6:	461e      	mov	r6, r3
 80167a8:	3601      	adds	r6, #1
 80167aa:	4651      	mov	r1, sl
 80167ac:	f20d 13eb 	addw	r3, sp, #491	@ 0x1eb
 80167b0:	464a      	mov	r2, r9
 80167b2:	18f8      	adds	r0, r7, r3
 80167b4:	f803 0f01 	strb.w	r0, [r3, #1]!
 80167b8:	f8d2 0348 	ldr.w	r0, [r2, #840]	@ 0x348
 80167bc:	f841 0b04 	str.w	r0, [r1], #4
 80167c0:	f20d 2009 	addw	r0, sp, #521	@ 0x209
 80167c4:	4298      	cmp	r0, r3
 80167c6:	f102 020c 	add.w	r2, r2, #12
 80167ca:	d1f2      	bne.n	80167b2 <iNemoEngine_API_Update+0x1052>
 80167cc:	ed9a 7a00 	vldr	s14, [sl]
 80167d0:	edda 7a01 	vldr	s15, [sl, #4]
 80167d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80167d8:	ed9a 7a02 	vldr	s14, [sl, #8]
 80167dc:	edda 7a03 	vldr	s15, [sl, #12]
 80167e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167e4:	bf88      	it	hi
 80167e6:	f44f 7381 	movhi.w	r3, #258	@ 0x102
 80167ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80167ee:	ed9a 7a04 	vldr	s14, [sl, #16]
 80167f2:	edda 7a05 	vldr	s15, [sl, #20]
 80167f6:	bf88      	it	hi
 80167f8:	802b      	strhhi	r3, [r5, #0]
 80167fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167fe:	bf88      	it	hi
 8016800:	f44f 7341 	movhi.w	r3, #772	@ 0x304
 8016804:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016808:	ed9a 7a06 	vldr	s14, [sl, #24]
 801680c:	edda 7a07 	vldr	s15, [sl, #28]
 8016810:	bf88      	it	hi
 8016812:	806b      	strhhi	r3, [r5, #2]
 8016814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016818:	bf88      	it	hi
 801681a:	f240 5306 	movwhi	r3, #1286	@ 0x506
 801681e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016822:	ed9a 7a08 	vldr	s14, [sl, #32]
 8016826:	edda 7a09 	vldr	s15, [sl, #36]	@ 0x24
 801682a:	bf88      	it	hi
 801682c:	80ab      	strhhi	r3, [r5, #4]
 801682e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016832:	bf88      	it	hi
 8016834:	f44f 63e1 	movhi.w	r3, #1800	@ 0x708
 8016838:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801683c:	ed9a 7a0a 	vldr	s14, [sl, #40]	@ 0x28
 8016840:	edda 7a0b 	vldr	s15, [sl, #44]	@ 0x2c
 8016844:	bf88      	it	hi
 8016846:	80eb      	strhhi	r3, [r5, #6]
 8016848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801684c:	bf88      	it	hi
 801684e:	f640 130a 	movwhi	r3, #2314	@ 0x90a
 8016852:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016856:	ed9a 7a0c 	vldr	s14, [sl, #48]	@ 0x30
 801685a:	edda 7a0d 	vldr	s15, [sl, #52]	@ 0x34
 801685e:	bf88      	it	hi
 8016860:	812b      	strhhi	r3, [r5, #8]
 8016862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016866:	bf88      	it	hi
 8016868:	f640 330c 	movwhi	r3, #2828	@ 0xb0c
 801686c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016870:	ed9a 7a0e 	vldr	s14, [sl, #56]	@ 0x38
 8016874:	edda 7a0f 	vldr	s15, [sl, #60]	@ 0x3c
 8016878:	bf88      	it	hi
 801687a:	816b      	strhhi	r3, [r5, #10]
 801687c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016880:	bf88      	it	hi
 8016882:	f640 530e 	movwhi	r3, #3342	@ 0xd0e
 8016886:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801688a:	ed9a 7a10 	vldr	s14, [sl, #64]	@ 0x40
 801688e:	edda 7a11 	vldr	s15, [sl, #68]	@ 0x44
 8016892:	bf88      	it	hi
 8016894:	81ab      	strhhi	r3, [r5, #12]
 8016896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801689a:	bf88      	it	hi
 801689c:	f44f 6371 	movhi.w	r3, #3856	@ 0xf10
 80168a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80168a4:	ed9a 7a12 	vldr	s14, [sl, #72]	@ 0x48
 80168a8:	edda 7a13 	vldr	s15, [sl, #76]	@ 0x4c
 80168ac:	bf88      	it	hi
 80168ae:	81eb      	strhhi	r3, [r5, #14]
 80168b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168b4:	bf88      	it	hi
 80168b6:	f241 1312 	movwhi	r3, #4370	@ 0x1112
 80168ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80168be:	ed9a 7a14 	vldr	s14, [sl, #80]	@ 0x50
 80168c2:	edda 7a15 	vldr	s15, [sl, #84]	@ 0x54
 80168c6:	bf88      	it	hi
 80168c8:	822b      	strhhi	r3, [r5, #16]
 80168ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ce:	bf88      	it	hi
 80168d0:	f241 3314 	movwhi	r3, #4884	@ 0x1314
 80168d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80168d8:	bf88      	it	hi
 80168da:	826b      	strhhi	r3, [r5, #18]
 80168dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168e0:	bf84      	itt	hi
 80168e2:	f241 5316 	movwhi	r3, #5398	@ 0x1516
 80168e6:	82ab      	strhhi	r3, [r5, #20]
 80168e8:	ed9a 7a16 	vldr	s14, [sl, #88]	@ 0x58
 80168ec:	edda 7a17 	vldr	s15, [sl, #92]	@ 0x5c
 80168f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80168f4:	ed9a 7a18 	vldr	s14, [sl, #96]	@ 0x60
 80168f8:	edda 7a19 	vldr	s15, [sl, #100]	@ 0x64
 80168fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016900:	bf88      	it	hi
 8016902:	f241 7318 	movwhi	r3, #5912	@ 0x1718
 8016906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801690a:	ed9a 7a1a 	vldr	s14, [sl, #104]	@ 0x68
 801690e:	edda 7a1b 	vldr	s15, [sl, #108]	@ 0x6c
 8016912:	bf88      	it	hi
 8016914:	82eb      	strhhi	r3, [r5, #22]
 8016916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801691a:	bf88      	it	hi
 801691c:	f641 131a 	movwhi	r3, #6426	@ 0x191a
 8016920:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016924:	ed9a 7a1c 	vldr	s14, [sl, #112]	@ 0x70
 8016928:	edda 7a1d 	vldr	s15, [sl, #116]	@ 0x74
 801692c:	bf88      	it	hi
 801692e:	832b      	strhhi	r3, [r5, #24]
 8016930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016934:	bf88      	it	hi
 8016936:	f641 331c 	movwhi	r3, #6940	@ 0x1b1c
 801693a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801693e:	bf88      	it	hi
 8016940:	836b      	strhhi	r3, [r5, #26]
 8016942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016946:	bf88      	it	hi
 8016948:	f641 531e 	movwhi	r3, #7454	@ 0x1d1e
 801694c:	f04f 0101 	mov.w	r1, #1
 8016950:	bf88      	it	hi
 8016952:	83ab      	strhhi	r3, [r5, #28]
 8016954:	221e      	movs	r2, #30
 8016956:	4658      	mov	r0, fp
 8016958:	f009 fa1d 	bl	801fd96 <memset>
 801695c:	e9cd 971d 	strd	r9, r7, [sp, #116]	@ 0x74
 8016960:	2404      	movs	r4, #4
 8016962:	2102      	movs	r1, #2
 8016964:	9618      	str	r6, [sp, #96]	@ 0x60
 8016966:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
 801696a:	460a      	mov	r2, r1
 801696c:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8016970:	0049      	lsls	r1, r1, #1
 8016972:	1c53      	adds	r3, r2, #1
 8016974:	9303      	str	r3, [sp, #12]
 8016976:	f04f 0801 	mov.w	r8, #1
 801697a:	9105      	str	r1, [sp, #20]
 801697c:	9b05      	ldr	r3, [sp, #20]
 801697e:	9a03      	ldr	r2, [sp, #12]
 8016980:	46c1      	mov	r9, r8
 8016982:	4498      	add	r8, r3
 8016984:	f1b8 0f1f 	cmp.w	r8, #31
 8016988:	bfa8      	it	ge
 801698a:	f04f 081f 	movge.w	r8, #31
 801698e:	eba8 0309 	sub.w	r3, r8, r9
 8016992:	2b00      	cmp	r3, #0
 8016994:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 8016998:	dd34      	ble.n	8016a04 <iNemoEngine_API_Update+0x12a4>
 801699a:	464f      	mov	r7, r9
 801699c:	f8cd 9010 	str.w	r9, [sp, #16]
 80169a0:	2400      	movs	r4, #0
 80169a2:	4699      	mov	r9, r3
 80169a4:	1e79      	subs	r1, r7, #1
 80169a6:	f915 200c 	ldrsb.w	r2, [r5, ip]
 80169aa:	566b      	ldrsb	r3, [r5, r1]
 80169ac:	eb0a 0082 	add.w	r0, sl, r2, lsl #2
 80169b0:	eb0a 0683 	add.w	r6, sl, r3, lsl #2
 80169b4:	ed16 7a01 	vldr	s14, [r6, #-4]
 80169b8:	ed50 7a01 	vldr	s15, [r0, #-4]
 80169bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80169c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169c4:	f10c 0002 	add.w	r0, ip, #2
 80169c8:	f10c 0601 	add.w	r6, ip, #1
 80169cc:	f240 81d0 	bls.w	8016d70 <iNemoEngine_API_Update+0x1610>
 80169d0:	4580      	cmp	r8, r0
 80169d2:	f80b 2004 	strb.w	r2, [fp, r4]
 80169d6:	f000 81ba 	beq.w	8016d4e <iNemoEngine_API_Update+0x15ee>
 80169da:	e005      	b.n	80169e8 <iNemoEngine_API_Update+0x1288>
 80169dc:	00000000 	.word	0x00000000
 80169e0:	3f333333 	.word	0x3f333333
 80169e4:	3f4ccccd 	.word	0x3f4ccccd
 80169e8:	46b4      	mov	ip, r6
 80169ea:	3401      	adds	r4, #1
 80169ec:	45a1      	cmp	r9, r4
 80169ee:	dcd9      	bgt.n	80169a4 <iNemoEngine_API_Update+0x1244>
 80169f0:	464b      	mov	r3, r9
 80169f2:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80169f6:	f109 30ff 	add.w	r0, r9, #4294967295	@ 0xffffffff
 80169fa:	461a      	mov	r2, r3
 80169fc:	4428      	add	r0, r5
 80169fe:	4659      	mov	r1, fp
 8016a00:	f009 faf3 	bl	801ffea <memcpy>
 8016a04:	9b07      	ldr	r3, [sp, #28]
 8016a06:	4443      	add	r3, r8
 8016a08:	2b1e      	cmp	r3, #30
 8016a0a:	9303      	str	r3, [sp, #12]
 8016a0c:	ddb6      	ble.n	801697c <iNemoEngine_API_Update+0x121c>
 8016a0e:	9c08      	ldr	r4, [sp, #32]
 8016a10:	9905      	ldr	r1, [sp, #20]
 8016a12:	3c01      	subs	r4, #1
 8016a14:	d1a9      	bne.n	801696a <iNemoEngine_API_Update+0x120a>
 8016a16:	f995 300e 	ldrsb.w	r3, [r5, #14]
 8016a1a:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8016a1c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8016a20:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8016a24:	ed53 7a01 	vldr	s15, [r3, #-4]
 8016a28:	f995 300f 	ldrsb.w	r3, [r5, #15]
 8016a2c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8016a30:	ed13 7a01 	vldr	s14, [r3, #-4]
 8016a34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a3c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8016a40:	bf4c      	ite	mi
 8016a42:	2201      	movmi	r2, #1
 8016a44:	2200      	movpl	r2, #0
 8016a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a4a:	bf4c      	ite	mi
 8016a4c:	2301      	movmi	r3, #1
 8016a4e:	2300      	movpl	r3, #0
 8016a50:	429a      	cmp	r2, r3
 8016a52:	e9dd 971d 	ldrd	r9, r7, [sp, #116]	@ 0x74
 8016a56:	f000 81a9 	beq.w	8016dac <iNemoEngine_API_Update+0x164c>
 8016a5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016a5e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8016a62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016a66:	2e03      	cmp	r6, #3
 8016a68:	ece8 7a01 	vstmia	r8!, {s15}
 8016a6c:	f109 0904 	add.w	r9, r9, #4
 8016a70:	f47f ae9a 	bne.w	80167a8 <iNemoEngine_API_Update+0x1048>
 8016a74:	eddd 7a48 	vldr	s15, [sp, #288]	@ 0x120
 8016a78:	eddd 6a47 	vldr	s13, [sp, #284]	@ 0x11c
 8016a7c:	ed9d 5a0c 	vldr	s10, [sp, #48]	@ 0x30
 8016a80:	ed9d 6a11 	vldr	s12, [sp, #68]	@ 0x44
 8016a84:	eddd 3a16 	vldr	s7, [sp, #88]	@ 0x58
 8016a88:	9605      	str	r6, [sp, #20]
 8016a8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016a8e:	e9dd 7838 	ldrd	r7, r8, [sp, #224]	@ 0xe0
 8016a92:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8016a96:	f897 3900 	ldrb.w	r3, [r7, #2304]	@ 0x900
 8016a9a:	eddd 6a14 	vldr	s13, [sp, #80]	@ 0x50
 8016a9e:	eeb0 7a67 	vmov.f32	s14, s15
 8016aa2:	eddd 7a49 	vldr	s15, [sp, #292]	@ 0x124
 8016aa6:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8016aaa:	46a1      	mov	r9, r4
 8016aac:	f507 6410 	add.w	r4, r7, #2304	@ 0x900
 8016ab0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8016ab4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8016ab8:	ee65 5a27 	vmul.f32	s11, s10, s15
 8016abc:	eec6 4a86 	vdiv.f32	s9, s13, s12
 8016ac0:	ed9d 6a12 	vldr	s12, [sp, #72]	@ 0x48
 8016ac4:	edcd 4a5c 	vstr	s9, [sp, #368]	@ 0x170
 8016ac8:	ee85 6a86 	vdiv.f32	s12, s11, s12
 8016acc:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8016ad0:	eddd 5a13 	vldr	s11, [sp, #76]	@ 0x4c
 8016ad4:	ed8d 6a5d 	vstr	s12, [sp, #372]	@ 0x174
 8016ad8:	eef1 6ac7 	vsqrt.f32	s13, s14
 8016adc:	ee87 4aa5 	vdiv.f32	s8, s15, s11
 8016ae0:	ed5f 7a41 	vldr	s15, [pc, #-260]	@ 80169e0 <iNemoEngine_API_Update+0x1280>
 8016ae4:	ed8d 4a5e 	vstr	s8, [sp, #376]	@ 0x178
 8016ae8:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8016aec:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8016af0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8016af4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8016af8:	eeb0 5a67 	vmov.f32	s10, s15
 8016afc:	edcd 7a03 	vstr	s15, [sp, #12]
 8016b00:	ed5f 7a48 	vldr	s15, [pc, #-288]	@ 80169e4 <iNemoEngine_API_Update+0x1284>
 8016b04:	edcd 6a5f 	vstr	s13, [sp, #380]	@ 0x17c
 8016b08:	ee65 7a27 	vmul.f32	s15, s10, s15
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	f040 8160 	bne.w	8016dd2 <iNemoEngine_API_Update+0x1672>
 8016b12:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8016b14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016b16:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8016b18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016b1a:	6a23      	ldr	r3, [r4, #32]
 8016b1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8016b1e:	69e3      	ldr	r3, [r4, #28]
 8016b20:	6223      	str	r3, [r4, #32]
 8016b22:	edc4 7a07 	vstr	s15, [r4, #28]
 8016b26:	f607 130c 	addw	r3, r7, #2316	@ 0x90c
 8016b2a:	ed93 8a00 	vldr	s16, [r3]
 8016b2e:	ed97 0a02 	vldr	s0, [r7, #8]
 8016b32:	f607 1324 	addw	r3, r7, #2340	@ 0x924
 8016b36:	edd3 7a00 	vldr	s15, [r3]
 8016b3a:	f607 1308 	addw	r3, r7, #2312	@ 0x908
 8016b3e:	edd3 5a00 	vldr	s11, [r3]
 8016b42:	f507 6312 	add.w	r3, r7, #2336	@ 0x920
 8016b46:	ee28 8a27 	vmul.f32	s16, s16, s15
 8016b4a:	edd3 7a00 	vldr	s15, [r3]
 8016b4e:	f607 1304 	addw	r3, r7, #2308	@ 0x904
 8016b52:	eea5 8aa7 	vfma.f32	s16, s11, s15
 8016b56:	edd3 5a00 	vldr	s11, [r3]
 8016b5a:	f607 131c 	addw	r3, r7, #2332	@ 0x91c
 8016b5e:	edd3 7a00 	vldr	s15, [r3]
 8016b62:	f507 6311 	add.w	r3, r7, #2320	@ 0x910
 8016b66:	eea5 8aa7 	vfma.f32	s16, s11, s15
 8016b6a:	edd3 5a00 	vldr	s11, [r3]
 8016b6e:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 8016b72:	edd3 7a00 	vldr	s15, [r3]
 8016b76:	f607 1314 	addw	r3, r7, #2324	@ 0x914
 8016b7a:	eea5 8aa7 	vfma.f32	s16, s11, s15
 8016b7e:	edd3 5a00 	vldr	s11, [r3]
 8016b82:	f607 132c 	addw	r3, r7, #2348	@ 0x92c
 8016b86:	edd3 7a00 	vldr	s15, [r3]
 8016b8a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b92:	eea5 8aa7 	vfma.f32	s16, s11, s15
 8016b96:	f340 818d 	ble.w	8016eb4 <iNemoEngine_API_Update+0x1754>
 8016b9a:	edd7 3a30 	vldr	s7, [r7, #192]	@ 0xc0
 8016b9e:	eef4 3ac8 	vcmpe.f32	s7, s16
 8016ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ba6:	f101 8293 	bmi.w	80180d0 <iNemoEngine_API_Update+0x2970>
 8016baa:	ed97 9a31 	vldr	s18, [r7, #196]	@ 0xc4
 8016bae:	eddd 7a1f 	vldr	s15, [sp, #124]	@ 0x7c
 8016bb2:	edd7 3a4a 	vldr	s7, [r7, #296]	@ 0x128
 8016bb6:	ee67 7a89 	vmul.f32	s15, s15, s18
 8016bba:	eef4 3ac8 	vcmpe.f32	s7, s16
 8016bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bc2:	edcd 7a1f 	vstr	s15, [sp, #124]	@ 0x7c
 8016bc6:	f142 81a1 	bpl.w	8018f0c <iNemoEngine_API_Update+0x37ac>
 8016bca:	ed97 5a62 	vldr	s10, [r7, #392]	@ 0x188
 8016bce:	eeb4 5ac8 	vcmpe.f32	s10, s16
 8016bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bd6:	f342 819f 	ble.w	8018f18 <iNemoEngine_API_Update+0x37b8>
 8016bda:	edd7 5a4c 	vldr	s11, [r7, #304]	@ 0x130
 8016bde:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 8016be2:	eef4 5ac8 	vcmpe.f32	s11, s16
 8016be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bea:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016bee:	f342 8497 	ble.w	8019520 <iNemoEngine_API_Update+0x3dc0>
 8016bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bf6:	f282 84a8 	bge.w	801954a <iNemoEngine_API_Update+0x3dea>
 8016bfa:	ed97 3a4b 	vldr	s6, [r7, #300]	@ 0x12c
 8016bfe:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 8016c02:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8016c06:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8016c0a:	ee78 3a63 	vsub.f32	s7, s16, s7
 8016c0e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8016c12:	eec7 eaa5 	vdiv.f32	s29, s15, s11
 8016c16:	ee7e ea83 	vadd.f32	s29, s29, s6
 8016c1a:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8016c1e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8016c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c26:	f202 84a8 	bhi.w	801957a <iNemoEngine_API_Update+0x3e1a>
 8016c2a:	edd7 5a52 	vldr	s11, [r7, #328]	@ 0x148
 8016c2e:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8016c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c36:	f142 87d7 	bpl.w	8019be8 <iNemoEngine_API_Update+0x4488>
 8016c3a:	ed97 3a51 	vldr	s6, [r7, #324]	@ 0x144
 8016c3e:	edd7 3a53 	vldr	s7, [r7, #332]	@ 0x14c
 8016c42:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8016c46:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8016c4a:	ee78 7a67 	vsub.f32	s15, s16, s15
 8016c4e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8016c52:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 8016c56:	ee7e ea83 	vadd.f32	s29, s29, s6
 8016c5a:	edd7 7a54 	vldr	s15, [r7, #336]	@ 0x150
 8016c5e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c66:	f2c2 84a8 	blt.w	80195ba <iNemoEngine_API_Update+0x3e5a>
 8016c6a:	edd7 5a56 	vldr	s11, [r7, #344]	@ 0x158
 8016c6e:	eef4 5ac8 	vcmpe.f32	s11, s16
 8016c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c76:	f342 87be 	ble.w	8019bf6 <iNemoEngine_API_Update+0x4496>
 8016c7a:	ed97 3a55 	vldr	s6, [r7, #340]	@ 0x154
 8016c7e:	edd7 3a57 	vldr	s7, [r7, #348]	@ 0x15c
 8016c82:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8016c86:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8016c8a:	ee78 7a67 	vsub.f32	s15, s16, s15
 8016c8e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8016c92:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 8016c96:	ee7e ea83 	vadd.f32	s29, s29, s6
 8016c9a:	edd7 7a58 	vldr	s15, [r7, #352]	@ 0x160
 8016c9e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ca6:	f2c2 84a8 	blt.w	80195fa <iNemoEngine_API_Update+0x3e9a>
 8016caa:	edd7 5a5a 	vldr	s11, [r7, #360]	@ 0x168
 8016cae:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8016cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cb6:	f142 8709 	bpl.w	8019acc <iNemoEngine_API_Update+0x436c>
 8016cba:	ed97 3a59 	vldr	s6, [r7, #356]	@ 0x164
 8016cbe:	edd7 3a5b 	vldr	s7, [r7, #364]	@ 0x16c
 8016cc2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8016cc6:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8016cca:	ee78 7a67 	vsub.f32	s15, s16, s15
 8016cce:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8016cd2:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 8016cd6:	ee7e ea83 	vadd.f32	s29, s29, s6
 8016cda:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8016cde:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ce6:	f2c2 84a8 	blt.w	801963a <iNemoEngine_API_Update+0x3eda>
 8016cea:	edd7 5a5e 	vldr	s11, [r7, #376]	@ 0x178
 8016cee:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8016cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cf6:	f142 86ec 	bpl.w	8019ad2 <iNemoEngine_API_Update+0x4372>
 8016cfa:	ed97 3a5d 	vldr	s6, [r7, #372]	@ 0x174
 8016cfe:	edd7 3a5f 	vldr	s7, [r7, #380]	@ 0x17c
 8016d02:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8016d06:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8016d0a:	ee78 7a67 	vsub.f32	s15, s16, s15
 8016d0e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8016d12:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 8016d16:	ee7e ea83 	vadd.f32	s29, s29, s6
 8016d1a:	edd7 7a60 	vldr	s15, [r7, #384]	@ 0x180
 8016d1e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d26:	db0f      	blt.n	8016d48 <iNemoEngine_API_Update+0x15e8>
 8016d28:	edd7 3a61 	vldr	s7, [r7, #388]	@ 0x184
 8016d2c:	edd7 5a63 	vldr	s11, [r7, #396]	@ 0x18c
 8016d30:	ee35 5a67 	vsub.f32	s10, s10, s15
 8016d34:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8016d38:	ee78 7a67 	vsub.f32	s15, s16, s15
 8016d3c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016d40:	eec7 ea85 	vdiv.f32	s29, s15, s10
 8016d44:	ee7e eaa3 	vadd.f32	s29, s29, s7
 8016d48:	ee2a aa2e 	vmul.f32	s20, s20, s29
 8016d4c:	e0b6      	b.n	8016ebc <iNemoEngine_API_Update+0x175c>
 8016d4e:	9a03      	ldr	r2, [sp, #12]
 8016d50:	1c60      	adds	r0, r4, #1
 8016d52:	1bd3      	subs	r3, r2, r7
 8016d54:	4297      	cmp	r7, r2
 8016d56:	4429      	add	r1, r5
 8016d58:	461a      	mov	r2, r3
 8016d5a:	4458      	add	r0, fp
 8016d5c:	f6bf ae44 	bge.w	80169e8 <iNemoEngine_API_Update+0x1288>
 8016d60:	9306      	str	r3, [sp, #24]
 8016d62:	f009 f942 	bl	801ffea <memcpy>
 8016d66:	9b06      	ldr	r3, [sp, #24]
 8016d68:	9f03      	ldr	r7, [sp, #12]
 8016d6a:	441c      	add	r4, r3
 8016d6c:	46b4      	mov	ip, r6
 8016d6e:	e63c      	b.n	80169ea <iNemoEngine_API_Update+0x128a>
 8016d70:	f80b 3004 	strb.w	r3, [fp, r4]
 8016d74:	9b03      	ldr	r3, [sp, #12]
 8016d76:	3701      	adds	r7, #1
 8016d78:	429f      	cmp	r7, r3
 8016d7a:	f47f ae36 	bne.w	80169ea <iNemoEngine_API_Update+0x128a>
 8016d7e:	f10c 0601 	add.w	r6, ip, #1
 8016d82:	eba8 030c 	sub.w	r3, r8, ip
 8016d86:	1c60      	adds	r0, r4, #1
 8016d88:	4546      	cmp	r6, r8
 8016d8a:	eb05 010c 	add.w	r1, r5, ip
 8016d8e:	f103 32ff 	add.w	r2, r3, #4294967295	@ 0xffffffff
 8016d92:	9306      	str	r3, [sp, #24]
 8016d94:	4458      	add	r0, fp
 8016d96:	f6bf ae28 	bge.w	80169ea <iNemoEngine_API_Update+0x128a>
 8016d9a:	f009 f926 	bl	801ffea <memcpy>
 8016d9e:	9b06      	ldr	r3, [sp, #24]
 8016da0:	3c01      	subs	r4, #1
 8016da2:	441e      	add	r6, r3
 8016da4:	441c      	add	r4, r3
 8016da6:	f1a6 0c02 	sub.w	ip, r6, #2
 8016daa:	e61e      	b.n	80169ea <iNemoEngine_API_Update+0x128a>
 8016dac:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016db4:	f43f ae51 	beq.w	8016a5a <iNemoEngine_API_Update+0x12fa>
 8016db8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dc0:	f43f ae4b 	beq.w	8016a5a <iNemoEngine_API_Update+0x12fa>
 8016dc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016dc8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8016dcc:	eee7 7a26 	vfma.f32	s15, s14, s13
 8016dd0:	e649      	b.n	8016a66 <iNemoEngine_API_Update+0x1306>
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	f887 3900 	strb.w	r3, [r7, #2304]	@ 0x900
 8016dd8:	edc4 7a07 	vstr	s15, [r4, #28]
 8016ddc:	edc4 7a08 	vstr	s15, [r4, #32]
 8016de0:	edc4 7a09 	vstr	s15, [r4, #36]	@ 0x24
 8016de4:	edc4 7a0a 	vstr	s15, [r4, #40]	@ 0x28
 8016de8:	edc4 7a0b 	vstr	s15, [r4, #44]	@ 0x2c
 8016dec:	e69b      	b.n	8016b26 <iNemoEngine_API_Update+0x13c6>
 8016dee:	4618      	mov	r0, r3
 8016df0:	9b03      	ldr	r3, [sp, #12]
 8016df2:	edd1 7a00 	vldr	s15, [r1]
 8016df6:	eeb0 5a46 	vmov.f32	s10, s12
 8016dfa:	4625      	mov	r5, r4
 8016dfc:	eeb0 6a66 	vmov.f32	s12, s13
 8016e00:	465e      	mov	r6, fp
 8016e02:	eef0 5a47 	vmov.f32	s11, s14
 8016e06:	eef0 6a45 	vmov.f32	s13, s10
 8016e0a:	009b      	lsls	r3, r3, #2
 8016e0c:	0094      	lsls	r4, r2, #2
 8016e0e:	ea4f 0b8c 	mov.w	fp, ip, lsl #2
 8016e12:	f7ff bb8b 	b.w	801652c <iNemoEngine_API_Update+0xdcc>
 8016e16:	2303      	movs	r3, #3
 8016e18:	2108      	movs	r1, #8
 8016e1a:	2204      	movs	r2, #4
 8016e1c:	2601      	movs	r6, #1
 8016e1e:	9304      	str	r3, [sp, #16]
 8016e20:	f04f 0b06 	mov.w	fp, #6
 8016e24:	f04f 0c07 	mov.w	ip, #7
 8016e28:	2005      	movs	r0, #5
 8016e2a:	460b      	mov	r3, r1
 8016e2c:	4614      	mov	r4, r2
 8016e2e:	2500      	movs	r5, #0
 8016e30:	9603      	str	r6, [sp, #12]
 8016e32:	f04f 0e02 	mov.w	lr, #2
 8016e36:	f7ff bb0f 	b.w	8016458 <iNemoEngine_API_Update+0xcf8>
 8016e3a:	2204      	movs	r2, #4
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	2501      	movs	r5, #1
 8016e40:	eef0 7a47 	vmov.f32	s15, s14
 8016e44:	2106      	movs	r1, #6
 8016e46:	f04f 0c07 	mov.w	ip, #7
 8016e4a:	2003      	movs	r0, #3
 8016e4c:	4614      	mov	r4, r2
 8016e4e:	9503      	str	r5, [sp, #12]
 8016e50:	469e      	mov	lr, r3
 8016e52:	f7ff baf2 	b.w	801643a <iNemoEngine_API_Update+0xcda>
 8016e56:	eddf 7aa7 	vldr	s15, [pc, #668]	@ 80170f4 <iNemoEngine_API_Update+0x1994>
 8016e5a:	ed9f eaa7 	vldr	s28, [pc, #668]	@ 80170f8 <iNemoEngine_API_Update+0x1998>
 8016e5e:	edcd 7a30 	vstr	s15, [sp, #192]	@ 0xc0
 8016e62:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80170fc <iNemoEngine_API_Update+0x199c>
 8016e66:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 8016e6a:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8016e6e:	f7ff b806 	b.w	8015e7e <iNemoEngine_API_Update+0x71e>
 8016e72:	ed9f 8aa3 	vldr	s16, [pc, #652]	@ 8017100 <iNemoEngine_API_Update+0x19a0>
 8016e76:	eddf 7aa3 	vldr	s15, [pc, #652]	@ 8017104 <iNemoEngine_API_Update+0x19a4>
 8016e7a:	eddf 6aac 	vldr	s13, [pc, #688]	@ 801712c <iNemoEngine_API_Update+0x19cc>
 8016e7e:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8017108 <iNemoEngine_API_Update+0x19a8>
 8016e82:	eddf 4aa2 	vldr	s9, [pc, #648]	@ 801710c <iNemoEngine_API_Update+0x19ac>
 8016e86:	ed84 8a01 	vstr	s16, [r4, #4]
 8016e8a:	edc4 7a00 	vstr	s15, [r4]
 8016e8e:	ed84 8a02 	vstr	s16, [r4, #8]
 8016e92:	eef0 5a66 	vmov.f32	s11, s13
 8016e96:	eeb0 5a47 	vmov.f32	s10, s14
 8016e9a:	eeb0 6a67 	vmov.f32	s12, s15
 8016e9e:	edcd 4a04 	vstr	s9, [sp, #16]
 8016ea2:	eeb0 9a67 	vmov.f32	s18, s15
 8016ea6:	eef0 ea48 	vmov.f32	s29, s16
 8016eaa:	f7fe befb 	b.w	8015ca4 <iNemoEngine_API_Update+0x544>
 8016eae:	eef1 7a67 	vneg.f32	s15, s15
 8016eb2:	e42e      	b.n	8016712 <iNemoEngine_API_Update+0xfb2>
 8016eb4:	eef7 ea00 	vmov.f32	s29, #112	@ 0x3f800000  1.0
 8016eb8:	eeb0 9a6e 	vmov.f32	s18, s29
 8016ebc:	edd7 5a74 	vldr	s11, [r7, #464]	@ 0x1d0
 8016ec0:	ed97 5a72 	vldr	s10, [r7, #456]	@ 0x1c8
 8016ec4:	eddd 7a22 	vldr	s15, [sp, #136]	@ 0x88
 8016ec8:	eddf 3a8b 	vldr	s7, [pc, #556]	@ 80170f8 <iNemoEngine_API_Update+0x1998>
 8016ecc:	ee7e 5a65 	vsub.f32	s11, s28, s11
 8016ed0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8016ed4:	eef0 5ae5 	vabs.f32	s11, s11
 8016ed8:	eef0 7ae7 	vabs.f32	s15, s15
 8016edc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8016ee0:	eef4 7ae3 	vcmpe.f32	s15, s7
 8016ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ee8:	dd0a      	ble.n	8016f00 <iNemoEngine_API_Update+0x17a0>
 8016eea:	ed9f 3a89 	vldr	s6, [pc, #548]	@ 8017110 <iNemoEngine_API_Update+0x19b0>
 8016eee:	eef4 7ac3 	vcmpe.f32	s15, s6
 8016ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ef6:	f341 80e1 	ble.w	80180bc <iNemoEngine_API_Update+0x295c>
 8016efa:	eef1 3a04 	vmov.f32	s7, #20	@ 0x40a00000  5.0
 8016efe:	e001      	b.n	8016f04 <iNemoEngine_API_Update+0x17a4>
 8016f00:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8016f04:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8016f08:	783e      	ldrb	r6, [r7, #0]
 8016f0a:	eef4 3ae7 	vcmpe.f32	s7, s15
 8016f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f12:	bfa8      	it	ge
 8016f14:	eef0 7a63 	vmovge.f32	s15, s7
 8016f18:	edcd 7a04 	vstr	s15, [sp, #16]
 8016f1c:	b1ce      	cbz	r6, 8016f52 <iNemoEngine_API_Update+0x17f2>
 8016f1e:	787e      	ldrb	r6, [r7, #1]
 8016f20:	2e00      	cmp	r6, #0
 8016f22:	f041 8053 	bne.w	8017fcc <iNemoEngine_API_Update+0x286c>
 8016f26:	ee74 7a86 	vadd.f32	s15, s9, s12
 8016f2a:	eef5 4a00 	vmov.f32	s9, #80	@ 0x3e800000  0.250
 8016f2e:	ee74 7a27 	vadd.f32	s15, s8, s15
 8016f32:	ed97 6a05 	vldr	s12, [r7, #20]
 8016f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016f3a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8016f3e:	eef6 4a00 	vmov.f32	s9, #96	@ 0x3f000000  0.5
 8016f42:	ee26 6a24 	vmul.f32	s12, s12, s9
 8016f46:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f4e:	f102 8293 	bmi.w	8019478 <iNemoEngine_API_Update+0x3d18>
 8016f52:	edd7 7a73 	vldr	s15, [r7, #460]	@ 0x1cc
 8016f56:	ed9d 6a22 	vldr	s12, [sp, #136]	@ 0x88
 8016f5a:	ed8d 5a4f 	vstr	s10, [sp, #316]	@ 0x13c
 8016f5e:	ed8d 6aa2 	vstr	s12, [sp, #648]	@ 0x288
 8016f62:	ed9d 6a0a 	vldr	s12, [sp, #40]	@ 0x28
 8016f66:	ed8d eaa4 	vstr	s28, [sp, #656]	@ 0x290
 8016f6a:	ed8d 6aa3 	vstr	s12, [sp, #652]	@ 0x28c
 8016f6e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8016f72:	eef0 4a46 	vmov.f32	s9, s12
 8016f76:	eee5 4a45 	vfms.f32	s9, s10, s10
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8016f80:	ee2c 4aaa 	vmul.f32	s8, s25, s21
 8016f84:	eef1 3ae4 	vsqrt.f32	s7, s9
 8016f88:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8016f8c:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8016f90:	934d      	str	r3, [sp, #308]	@ 0x134
 8016f92:	ee74 2a04 	vadd.f32	s5, s8, s8
 8016f96:	ee29 4aac 	vmul.f32	s8, s19, s25
 8016f9a:	ee69 4aaa 	vmul.f32	s9, s19, s21
 8016f9e:	eeab 4a2a 	vfma.f32	s8, s22, s21
 8016fa2:	ee2c 3a8b 	vmul.f32	s6, s25, s22
 8016fa6:	ee29 1a8b 	vmul.f32	s2, s19, s22
 8016faa:	ee74 4aa4 	vadd.f32	s9, s9, s9
 8016fae:	ee69 9aa9 	vmul.f32	s19, s19, s19
 8016fb2:	ee74 ca04 	vadd.f32	s25, s8, s8
 8016fb6:	eeb0 4a00 	vmov.f32	s8, #0	@ 0x40000000  2.0
 8016fba:	ee79 9aa9 	vadd.f32	s19, s19, s19
 8016fbe:	eeb0 2a64 	vmov.f32	s4, s9
 8016fc2:	eee3 4a44 	vfms.f32	s9, s6, s8
 8016fc6:	eea3 2a04 	vfma.f32	s4, s6, s8
 8016fca:	ee2b ba0b 	vmul.f32	s22, s22, s22
 8016fce:	eef0 1a69 	vmov.f32	s3, s19
 8016fd2:	eddd 9a32 	vldr	s19, [sp, #200]	@ 0xc8
 8016fd6:	edcd 3a4e 	vstr	s7, [sp, #312]	@ 0x138
 8016fda:	eee3 9ae4 	vfms.f32	s19, s7, s9
 8016fde:	eeeb 1a04 	vfma.f32	s3, s22, s8
 8016fe2:	eddd 4a35 	vldr	s9, [sp, #212]	@ 0xd4
 8016fe6:	eee5 4a42 	vfms.f32	s9, s10, s4
 8016fea:	ee76 1a61 	vsub.f32	s3, s12, s3
 8016fee:	ee6a aaaa 	vmul.f32	s21, s21, s21
 8016ff2:	eee3 4ae1 	vfms.f32	s9, s7, s3
 8016ff6:	ee7a aaaa 	vadd.f32	s21, s21, s21
 8016ffa:	edcd 4a9a 	vstr	s9, [sp, #616]	@ 0x268
 8016ffe:	ee7c 4a22 	vadd.f32	s9, s24, s5
 8017002:	eef0 0a6a 	vmov.f32	s1, s21
 8017006:	eeb0 3a62 	vmov.f32	s6, s5
 801700a:	eee1 4a44 	vfms.f32	s9, s2, s8
 801700e:	eeeb 0a04 	vfma.f32	s1, s22, s8
 8017012:	ee91 3a04 	vfnms.f32	s6, s2, s8
 8017016:	edcd 4a47 	vstr	s9, [sp, #284]	@ 0x11c
 801701a:	ee25 4a03 	vmul.f32	s8, s10, s6
 801701e:	edcd 4a9c 	vstr	s9, [sp, #624]	@ 0x270
 8017022:	ee76 4a60 	vsub.f32	s9, s12, s1
 8017026:	ee3b 6ac6 	vsub.f32	s12, s23, s12
 801702a:	eea3 4aac 	vfma.f32	s8, s7, s25
 801702e:	ee36 6a20 	vadd.f32	s12, s12, s1
 8017032:	eee5 9a64 	vfms.f32	s19, s10, s9
 8017036:	eddd 3a34 	vldr	s7, [sp, #208]	@ 0xd0
 801703a:	ed8d 6a49 	vstr	s12, [sp, #292]	@ 0x124
 801703e:	ed8d 6a9e 	vstr	s12, [sp, #632]	@ 0x278
 8017042:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 801713c <iNemoEngine_API_Update+0x19dc>
 8017046:	edcd 9a9b 	vstr	s19, [sp, #620]	@ 0x26c
 801704a:	ee3d 2a42 	vsub.f32	s4, s26, s4
 801704e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8017052:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801705a:	ed8d 2a48 	vstr	s4, [sp, #288]	@ 0x120
 801705e:	ed8d 2a9d 	vstr	s4, [sp, #628]	@ 0x274
 8017062:	ed8d 4a99 	vstr	s8, [sp, #612]	@ 0x264
 8017066:	d541      	bpl.n	80170ec <iNemoEngine_API_Update+0x198c>
 8017068:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 8017114 <iNemoEngine_API_Update+0x19b4>
 801706c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017074:	dd3a      	ble.n	80170ec <iNemoEngine_API_Update+0x198c>
 8017076:	ed9d 6a0a 	vldr	s12, [sp, #40]	@ 0x28
 801707a:	ee76 7a67 	vsub.f32	s15, s12, s15
 801707e:	ed9d 6a0c 	vldr	s12, [sp, #48]	@ 0x30
 8017082:	eef0 7ae7 	vabs.f32	s15, s15
 8017086:	ee77 7a86 	vadd.f32	s15, s15, s12
 801708a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801708e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017092:	dd55      	ble.n	8017140 <iNemoEngine_API_Update+0x19e0>
 8017094:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8017098:	eef4 7ac6 	vcmpe.f32	s15, s12
 801709c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170a0:	f140 8786 	bpl.w	8017fb0 <iNemoEngine_API_Update+0x2850>
 80170a4:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 8017118 <iNemoEngine_API_Update+0x19b8>
 80170a8:	eef4 7ac6 	vcmpe.f32	s15, s12
 80170ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170b0:	f141 8172 	bpl.w	8018398 <iNemoEngine_API_Update+0x2c38>
 80170b4:	ed9f 6a1b 	vldr	s12, [pc, #108]	@ 8017124 <iNemoEngine_API_Update+0x19c4>
 80170b8:	eef4 7ac6 	vcmpe.f32	s15, s12
 80170bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170c0:	f2c1 8172 	blt.w	80183a8 <iNemoEngine_API_Update+0x2c48>
 80170c4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801711c <iNemoEngine_API_Update+0x19bc>
 80170c8:	eef4 7ac6 	vcmpe.f32	s15, s12
 80170cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170d0:	f141 8227 	bpl.w	8018522 <iNemoEngine_API_Update+0x2dc2>
 80170d4:	ed9f 5a13 	vldr	s10, [pc, #76]	@ 8017124 <iNemoEngine_API_Update+0x19c4>
 80170d8:	eddf 4a11 	vldr	s9, [pc, #68]	@ 8017120 <iNemoEngine_API_Update+0x19c0>
 80170dc:	ee37 5ac5 	vsub.f32	s10, s15, s10
 80170e0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80170e4:	eea5 6a24 	vfma.f32	s12, s10, s9
 80170e8:	f001 b968 	b.w	80183bc <iNemoEngine_API_Update+0x2c5c>
 80170ec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80170f0:	e7c1      	b.n	8017076 <iNemoEngine_API_Update+0x1916>
 80170f2:	bf00      	nop
 80170f4:	3ecccccc 	.word	0x3ecccccc
 80170f8:	3dcccccd 	.word	0x3dcccccd
 80170fc:	3f666666 	.word	0x3f666666
 8017100:	3f333333 	.word	0x3f333333
 8017104:	00000000 	.word	0x00000000
 8017108:	bfb33333 	.word	0xbfb33333
 801710c:	3f7ae147 	.word	0x3f7ae147
 8017110:	3fb77778 	.word	0x3fb77778
 8017114:	3f4ccccd 	.word	0x3f4ccccd
 8017118:	3ba3d70a 	.word	0x3ba3d70a
 801711c:	3c75c28f 	.word	0x3c75c28f
 8017120:	42f00001 	.word	0x42f00001
 8017124:	3c23d70a 	.word	0x3c23d70a
 8017128:	3b449ba6 	.word	0x3b449ba6
 801712c:	3fb33333 	.word	0x3fb33333
 8017130:	3f8f5c29 	.word	0x3f8f5c29
 8017134:	3f59999a 	.word	0x3f59999a
 8017138:	3e4ccccd 	.word	0x3e4ccccd
 801713c:	3f99999a 	.word	0x3f99999a
 8017140:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 8017144:	ed5f 3a09 	vldr	s7, [pc, #-36]	@ 8017124 <iNemoEngine_API_Update+0x19c4>
 8017148:	ed5f 4a09 	vldr	s9, [pc, #-36]	@ 8017128 <iNemoEngine_API_Update+0x19c8>
 801714c:	eeb0 6a45 	vmov.f32	s12, s10
 8017150:	eef0 9a45 	vmov.f32	s19, s10
 8017154:	ed9d 4a04 	vldr	s8, [sp, #16]
 8017158:	edcd 4a6f 	vstr	s9, [sp, #444]	@ 0x1bc
 801715c:	eddd 4a21 	vldr	s9, [sp, #132]	@ 0x84
 8017160:	eddd 2a8e 	vldr	s5, [sp, #568]	@ 0x238
 8017164:	ed9d 2a90 	vldr	s4, [sp, #576]	@ 0x240
 8017168:	7b3b      	ldrb	r3, [r7, #12]
 801716a:	ed8d aa91 	vstr	s20, [sp, #580]	@ 0x244
 801716e:	ee24 9a09 	vmul.f32	s18, s8, s18
 8017172:	ee34 3aa4 	vadd.f32	s6, s9, s9
 8017176:	eddd 4a2f 	vldr	s9, [sp, #188]	@ 0xbc
 801717a:	ed8d aa92 	vstr	s20, [sp, #584]	@ 0x248
 801717e:	ee34 4aa4 	vadd.f32	s8, s9, s9
 8017182:	ee62 2a89 	vmul.f32	s5, s5, s18
 8017186:	eddd 4a1f 	vldr	s9, [sp, #124]	@ 0x7c
 801718a:	edcd 2a8e 	vstr	s5, [sp, #568]	@ 0x238
 801718e:	edcd 4a98 	vstr	s9, [sp, #608]	@ 0x260
 8017192:	eddd 2a8f 	vldr	s5, [sp, #572]	@ 0x23c
 8017196:	eddd 4a8d 	vldr	s9, [sp, #564]	@ 0x234
 801719a:	edcd 3a70 	vstr	s7, [sp, #448]	@ 0x1c0
 801719e:	ee23 3a06 	vmul.f32	s6, s6, s12
 80171a2:	ee24 4a06 	vmul.f32	s8, s8, s12
 80171a6:	ee69 4a24 	vmul.f32	s9, s18, s9
 80171aa:	ee62 2a89 	vmul.f32	s5, s5, s18
 80171ae:	ee2e 2a82 	vmul.f32	s4, s29, s4
 80171b2:	ed8d 3a96 	vstr	s6, [sp, #600]	@ 0x258
 80171b6:	ed8d 4a97 	vstr	s8, [sp, #604]	@ 0x25c
 80171ba:	edcd 4a8d 	vstr	s9, [sp, #564]	@ 0x234
 80171be:	edcd 2a8f 	vstr	s5, [sp, #572]	@ 0x23c
 80171c2:	ed8d 2a90 	vstr	s4, [sp, #576]	@ 0x240
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	f000 85eb 	beq.w	8017da2 <iNemoEngine_API_Update+0x2642>
 80171cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80171ce:	eddd 2a29 	vldr	s5, [sp, #164]	@ 0xa4
 80171d2:	2300      	movs	r3, #0
 80171d4:	f362 0307 	bfi	r3, r2, #0, #8
 80171d8:	f362 230f 	bfi	r3, r2, #8, #8
 80171dc:	f362 4317 	bfi	r3, r2, #16, #8
 80171e0:	7bba      	ldrb	r2, [r7, #14]
 80171e2:	f362 631f 	bfi	r3, r2, #24, #8
 80171e6:	ee65 2a22 	vmul.f32	s5, s10, s5
 80171ea:	ee26 aa0a 	vmul.f32	s20, s12, s20
 80171ee:	ee63 3a85 	vmul.f32	s7, s7, s10
 80171f2:	9344      	str	r3, [sp, #272]	@ 0x110
 80171f4:	ee26 5a02 	vmul.f32	s10, s12, s4
 80171f8:	2300      	movs	r3, #0
 80171fa:	ee36 6a06 	vadd.f32	s12, s12, s12
 80171fe:	4619      	mov	r1, r3
 8017200:	ee24 4a06 	vmul.f32	s8, s8, s12
 8017204:	f362 0107 	bfi	r1, r2, #0, #8
 8017208:	f362 210f 	bfi	r1, r2, #8, #8
 801720c:	edcd 3a70 	vstr	s7, [sp, #448]	@ 0x1c0
 8017210:	ed8d 5a90 	vstr	s10, [sp, #576]	@ 0x240
 8017214:	edcd 2a69 	vstr	s5, [sp, #420]	@ 0x1a4
 8017218:	ed8d aa91 	vstr	s20, [sp, #580]	@ 0x244
 801721c:	ed8d aa92 	vstr	s20, [sp, #584]	@ 0x248
 8017220:	edcd 2a6a 	vstr	s5, [sp, #424]	@ 0x1a8
 8017224:	edcd 2a6b 	vstr	s5, [sp, #428]	@ 0x1ac
 8017228:	ed8d 4a97 	vstr	s8, [sp, #604]	@ 0x25c
 801722c:	f8ad 1114 	strh.w	r1, [sp, #276]	@ 0x114
 8017230:	2a00      	cmp	r2, #0
 8017232:	f040 86b0 	bne.w	8017f96 <iNemoEngine_API_Update+0x2836>
 8017236:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801723a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801723e:	f340 8482 	ble.w	8017b46 <iNemoEngine_API_Update+0x23e6>
 8017242:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8017246:	eef4 7ac8 	vcmpe.f32	s15, s16
 801724a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801724e:	f2c0 847a 	blt.w	8017b46 <iNemoEngine_API_Update+0x23e6>
 8017252:	2e00      	cmp	r6, #0
 8017254:	f040 8477 	bne.w	8017b46 <iNemoEngine_API_Update+0x23e6>
 8017258:	ed5f 7a4c 	vldr	s15, [pc, #-304]	@ 801712c <iNemoEngine_API_Update+0x19cc>
 801725c:	f8ad 6110 	strh.w	r6, [sp, #272]	@ 0x110
 8017260:	eeb4 eae7 	vcmpe.f32	s28, s15
 8017264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017268:	f88d 6112 	strb.w	r6, [sp, #274]	@ 0x112
 801726c:	f88d 6119 	strb.w	r6, [sp, #281]	@ 0x119
 8017270:	f88d 611b 	strb.w	r6, [sp, #283]	@ 0x11b
 8017274:	f342 8146 	ble.w	8019504 <iNemoEngine_API_Update+0x3da4>
 8017278:	2300      	movs	r3, #0
 801727a:	f8ad 3110 	strh.w	r3, [sp, #272]	@ 0x110
 801727e:	f88d 3112 	strb.w	r3, [sp, #274]	@ 0x112
 8017282:	f88d 3119 	strb.w	r3, [sp, #281]	@ 0x119
 8017286:	f88d 311b 	strb.w	r3, [sp, #283]	@ 0x11b
 801728a:	ed5f 7a57 	vldr	s15, [pc, #-348]	@ 8017130 <iNemoEngine_API_Update+0x19d0>
 801728e:	ed9d 6a0a 	vldr	s12, [sp, #40]	@ 0x28
 8017292:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8017296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801729a:	dc07      	bgt.n	80172ac <iNemoEngine_API_Update+0x1b4c>
 801729c:	ed5f 7a5b 	vldr	s15, [pc, #-364]	@ 8017134 <iNemoEngine_API_Update+0x19d4>
 80172a0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80172a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172a8:	f140 863f 	bpl.w	8017f2a <iNemoEngine_API_Update+0x27ca>
 80172ac:	2300      	movs	r3, #0
 80172ae:	f8ad 3113 	strh.w	r3, [sp, #275]	@ 0x113
 80172b2:	f88d 3115 	strb.w	r3, [sp, #277]	@ 0x115
 80172b6:	f8ad 3119 	strh.w	r3, [sp, #281]	@ 0x119
 80172ba:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80172be:	eef4 5ae7 	vcmpe.f32	s11, s15
 80172c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80172c8:	f340 855b 	ble.w	8017d82 <iNemoEngine_API_Update+0x2622>
 80172cc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80172d0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80172d4:	ed9d 6a1f 	vldr	s12, [sp, #124]	@ 0x7c
 80172d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80172dc:	2200      	movs	r2, #0
 80172de:	ee23 3a27 	vmul.f32	s6, s6, s15
 80172e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80172e6:	ed8d 3a96 	vstr	s6, [sp, #600]	@ 0x258
 80172ea:	edcd 7a98 	vstr	s15, [sp, #608]	@ 0x260
 80172ee:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80172f2:	eef4 5ae7 	vcmpe.f32	s11, s15
 80172f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172fa:	bfc4      	itt	gt
 80172fc:	f88d 2119 	strbgt.w	r2, [sp, #281]	@ 0x119
 8017300:	f88d 211b 	strbgt.w	r2, [sp, #283]	@ 0x11b
 8017304:	2b0e      	cmp	r3, #14
 8017306:	f8ad 2110 	strh.w	r2, [sp, #272]	@ 0x110
 801730a:	f88d 2112 	strb.w	r2, [sp, #274]	@ 0x112
 801730e:	f340 8608 	ble.w	8017f22 <iNemoEngine_API_Update+0x27c2>
 8017312:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
 8017316:	ed9d 6a14 	vldr	s12, [sp, #80]	@ 0x50
 801731a:	eef4 7ac6 	vcmpe.f32	s15, s12
 801731e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017322:	f340 8440 	ble.w	8017ba6 <iNemoEngine_API_Update+0x2446>
 8017326:	eddd 7a12 	vldr	s15, [sp, #72]	@ 0x48
 801732a:	ed9d 6a0c 	vldr	s12, [sp, #48]	@ 0x30
 801732e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017336:	f340 8436 	ble.w	8017ba6 <iNemoEngine_API_Update+0x2446>
 801733a:	eddd 7a13 	vldr	s15, [sp, #76]	@ 0x4c
 801733e:	ed9d 6a16 	vldr	s12, [sp, #88]	@ 0x58
 8017342:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801734a:	f340 842c 	ble.w	8017ba6 <iNemoEngine_API_Update+0x2446>
 801734e:	ed5f 7a86 	vldr	s15, [pc, #-536]	@ 8017138 <iNemoEngine_API_Update+0x19d8>
 8017352:	eeb0 6aef 	vabs.f32	s12, s31
 8017356:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801735a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801735e:	f140 8422 	bpl.w	8017ba6 <iNemoEngine_API_Update+0x2446>
 8017362:	eeb0 6acf 	vabs.f32	s12, s30
 8017366:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801736a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801736e:	f140 841a 	bpl.w	8017ba6 <iNemoEngine_API_Update+0x2446>
 8017372:	ed9d 6a10 	vldr	s12, [sp, #64]	@ 0x40
 8017376:	eeb0 6ac6 	vabs.f32	s12, s12
 801737a:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801737e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017382:	f140 8410 	bpl.w	8017ba6 <iNemoEngine_API_Update+0x2446>
 8017386:	ed5f 7a93 	vldr	s15, [pc, #-588]	@ 801713c <iNemoEngine_API_Update+0x19dc>
 801738a:	eeb0 cacc 	vabs.f32	s24, s24
 801738e:	eeb4 cae7 	vcmpe.f32	s24, s15
 8017392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017396:	f140 8406 	bpl.w	8017ba6 <iNemoEngine_API_Update+0x2446>
 801739a:	eeb0 dacd 	vabs.f32	s26, s26
 801739e:	eeb4 dae7 	vcmpe.f32	s26, s15
 80173a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173a6:	f140 83fe 	bpl.w	8017ba6 <iNemoEngine_API_Update+0x2446>
 80173aa:	eef0 baeb 	vabs.f32	s23, s23
 80173ae:	eef4 bae7 	vcmpe.f32	s23, s15
 80173b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173b6:	f140 83f6 	bpl.w	8017ba6 <iNemoEngine_API_Update+0x2446>
 80173ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80173bc:	edd3 7a00 	vldr	s15, [r3]
 80173c0:	f207 73a4 	addw	r3, r7, #1956	@ 0x7a4
 80173c4:	edd3 3a00 	vldr	s7, [r3]
 80173c8:	f897 31a0 	ldrb.w	r3, [r7, #416]	@ 0x1a0
 80173cc:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80173d0:	eef4 7ae3 	vcmpe.f32	s15, s7
 80173d4:	2b09      	cmp	r3, #9
 80173d6:	ed92 4a00 	vldr	s8, [r2]
 80173da:	bf8c      	ite	hi
 80173dc:	220a      	movhi	r2, #10
 80173de:	2205      	movls	r2, #5
 80173e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173e4:	bfb4      	ite	lt
 80173e6:	eeb0 6a63 	vmovlt.f32	s12, s7
 80173ea:	eeb0 6a67 	vmovge.f32	s12, s15
 80173ee:	eeb4 6ac4 	vcmpe.f32	s12, s8
 80173f2:	f207 71bc 	addw	r1, r7, #1980	@ 0x7bc
 80173f6:	edd1 4a00 	vldr	s9, [r1]
 80173fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173fe:	bfb8      	it	lt
 8017400:	eeb0 6a44 	vmovlt.f32	s12, s8
 8017404:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8017408:	f507 61f9 	add.w	r1, r7, #1992	@ 0x7c8
 801740c:	ed91 5a00 	vldr	s10, [r1]
 8017410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017414:	bfb8      	it	lt
 8017416:	eeb0 6a64 	vmovlt.f32	s12, s9
 801741a:	eeb4 6ac5 	vcmpe.f32	s12, s10
 801741e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017422:	eef4 7ae3 	vcmpe.f32	s15, s7
 8017426:	bfb4      	ite	lt
 8017428:	eef0 5a45 	vmovlt.f32	s11, s10
 801742c:	eef0 5a46 	vmovge.f32	s11, s12
 8017430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017434:	bf8c      	ite	hi
 8017436:	eeb0 6a63 	vmovhi.f32	s12, s7
 801743a:	eeb0 6a67 	vmovls.f32	s12, s15
 801743e:	eeb4 6ac4 	vcmpe.f32	s12, s8
 8017442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017446:	bf88      	it	hi
 8017448:	eeb0 6a44 	vmovhi.f32	s12, s8
 801744c:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8017450:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017458:	bf88      	it	hi
 801745a:	eeb0 6a64 	vmovhi.f32	s12, s9
 801745e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017462:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8017466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801746a:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801746e:	bf88      	it	hi
 8017470:	eeb0 6a45 	vmovhi.f32	s12, s10
 8017474:	2a05      	cmp	r2, #5
 8017476:	ee77 7a85 	vadd.f32	s15, s15, s10
 801747a:	d063      	beq.n	8017544 <iNemoEngine_API_Update+0x1de4>
 801747c:	f207 71d4 	addw	r1, r7, #2004	@ 0x7d4
 8017480:	ed91 3a00 	vldr	s6, [r1]
 8017484:	f507 61fc 	add.w	r1, r7, #2016	@ 0x7e0
 8017488:	eef4 5ac3 	vcmpe.f32	s11, s6
 801748c:	edd1 3a00 	vldr	s7, [r1]
 8017490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017494:	bfb8      	it	lt
 8017496:	eef0 5a43 	vmovlt.f32	s11, s6
 801749a:	eef4 5ae3 	vcmpe.f32	s11, s7
 801749e:	f207 71ec 	addw	r1, r7, #2028	@ 0x7ec
 80174a2:	ed91 4a00 	vldr	s8, [r1]
 80174a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174aa:	bfb8      	it	lt
 80174ac:	eef0 5a63 	vmovlt.f32	s11, s7
 80174b0:	eef4 5ac4 	vcmpe.f32	s11, s8
 80174b4:	f507 61ff 	add.w	r1, r7, #2040	@ 0x7f8
 80174b8:	edd1 4a00 	vldr	s9, [r1]
 80174bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174c0:	bfb8      	it	lt
 80174c2:	eef0 5a44 	vmovlt.f32	s11, s8
 80174c6:	eef4 5ae4 	vcmpe.f32	s11, s9
 80174ca:	f607 0104 	addw	r1, r7, #2052	@ 0x804
 80174ce:	ed91 5a00 	vldr	s10, [r1]
 80174d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174d6:	bfb8      	it	lt
 80174d8:	eef0 5a64 	vmovlt.f32	s11, s9
 80174dc:	eef4 5ac5 	vcmpe.f32	s11, s10
 80174e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174e4:	eeb4 6ac3 	vcmpe.f32	s12, s6
 80174e8:	bfb8      	it	lt
 80174ea:	eef0 5a45 	vmovlt.f32	s11, s10
 80174ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174f2:	bf88      	it	hi
 80174f4:	eeb0 6a43 	vmovhi.f32	s12, s6
 80174f8:	eeb4 6ae3 	vcmpe.f32	s12, s7
 80174fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017500:	bf88      	it	hi
 8017502:	eeb0 6a63 	vmovhi.f32	s12, s7
 8017506:	ee77 7a83 	vadd.f32	s15, s15, s6
 801750a:	eeb4 6ac4 	vcmpe.f32	s12, s8
 801750e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017512:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017516:	bf88      	it	hi
 8017518:	eeb0 6a44 	vmovhi.f32	s12, s8
 801751c:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8017520:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017528:	bf88      	it	hi
 801752a:	eeb0 6a64 	vmovhi.f32	s12, s9
 801752e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8017532:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8017536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801753a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801753e:	bf88      	it	hi
 8017540:	eeb0 6a45 	vmovhi.f32	s12, s10
 8017544:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8017548:	eddf 5af3 	vldr	s11, [pc, #972]	@ 8017918 <iNemoEngine_API_Update+0x21b8>
 801754c:	ee26 6a2d 	vmul.f32	s12, s12, s27
 8017550:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8017554:	eddf 5af1 	vldr	s11, [pc, #964]	@ 801791c <iNemoEngine_API_Update+0x21bc>
 8017558:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801755c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017560:	f300 8321 	bgt.w	8017ba6 <iNemoEngine_API_Update+0x2446>
 8017564:	eef0 7ae7 	vabs.f32	s15, s15
 8017568:	ee67 7aad 	vmul.f32	s15, s15, s27
 801756c:	ed9f 6aec 	vldr	s12, [pc, #944]	@ 8017920 <iNemoEngine_API_Update+0x21c0>
 8017570:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017578:	f300 8315 	bgt.w	8017ba6 <iNemoEngine_API_Update+0x2446>
 801757c:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 801757e:	edd1 7a00 	vldr	s15, [r1]
 8017582:	f507 61f5 	add.w	r1, r7, #1960	@ 0x7a8
 8017586:	edd1 3a00 	vldr	s7, [r1]
 801758a:	f207 71b4 	addw	r1, r7, #1972	@ 0x7b4
 801758e:	eef4 7ae3 	vcmpe.f32	s15, s7
 8017592:	ed91 4a00 	vldr	s8, [r1]
 8017596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801759a:	bfb4      	ite	lt
 801759c:	eeb0 6a63 	vmovlt.f32	s12, s7
 80175a0:	eeb0 6a67 	vmovge.f32	s12, s15
 80175a4:	eeb4 6ac4 	vcmpe.f32	s12, s8
 80175a8:	f507 61f8 	add.w	r1, r7, #1984	@ 0x7c0
 80175ac:	edd1 4a00 	vldr	s9, [r1]
 80175b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175b4:	bfb8      	it	lt
 80175b6:	eeb0 6a44 	vmovlt.f32	s12, s8
 80175ba:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80175be:	f207 71cc 	addw	r1, r7, #1996	@ 0x7cc
 80175c2:	ed91 5a00 	vldr	s10, [r1]
 80175c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175ca:	bfb8      	it	lt
 80175cc:	eeb0 6a64 	vmovlt.f32	s12, s9
 80175d0:	eeb4 6ac5 	vcmpe.f32	s12, s10
 80175d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175d8:	eef4 7ae3 	vcmpe.f32	s15, s7
 80175dc:	bfb4      	ite	lt
 80175de:	eef0 5a45 	vmovlt.f32	s11, s10
 80175e2:	eef0 5a46 	vmovge.f32	s11, s12
 80175e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175ea:	bf8c      	ite	hi
 80175ec:	eeb0 6a63 	vmovhi.f32	s12, s7
 80175f0:	eeb0 6a67 	vmovls.f32	s12, s15
 80175f4:	eeb4 6ac4 	vcmpe.f32	s12, s8
 80175f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175fc:	bf88      	it	hi
 80175fe:	eeb0 6a44 	vmovhi.f32	s12, s8
 8017602:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8017606:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801760a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801760e:	bf88      	it	hi
 8017610:	eeb0 6a64 	vmovhi.f32	s12, s9
 8017614:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017618:	eeb4 6ac5 	vcmpe.f32	s12, s10
 801761c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017620:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8017624:	bf88      	it	hi
 8017626:	eeb0 6a45 	vmovhi.f32	s12, s10
 801762a:	2a05      	cmp	r2, #5
 801762c:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017630:	d063      	beq.n	80176fa <iNemoEngine_API_Update+0x1f9a>
 8017632:	f507 61fb 	add.w	r1, r7, #2008	@ 0x7d8
 8017636:	ed91 3a00 	vldr	s6, [r1]
 801763a:	f207 71e4 	addw	r1, r7, #2020	@ 0x7e4
 801763e:	eef4 5ac3 	vcmpe.f32	s11, s6
 8017642:	edd1 3a00 	vldr	s7, [r1]
 8017646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801764a:	bfb8      	it	lt
 801764c:	eef0 5a43 	vmovlt.f32	s11, s6
 8017650:	eef4 5ae3 	vcmpe.f32	s11, s7
 8017654:	f507 61fe 	add.w	r1, r7, #2032	@ 0x7f0
 8017658:	ed91 4a00 	vldr	s8, [r1]
 801765c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017660:	bfb8      	it	lt
 8017662:	eef0 5a63 	vmovlt.f32	s11, s7
 8017666:	eef4 5ac4 	vcmpe.f32	s11, s8
 801766a:	f207 71fc 	addw	r1, r7, #2044	@ 0x7fc
 801766e:	edd1 4a00 	vldr	s9, [r1]
 8017672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017676:	bfb8      	it	lt
 8017678:	eef0 5a44 	vmovlt.f32	s11, s8
 801767c:	eef4 5ae4 	vcmpe.f32	s11, s9
 8017680:	f607 0108 	addw	r1, r7, #2056	@ 0x808
 8017684:	ed91 5a00 	vldr	s10, [r1]
 8017688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801768c:	bfb8      	it	lt
 801768e:	eef0 5a64 	vmovlt.f32	s11, s9
 8017692:	eef4 5ac5 	vcmpe.f32	s11, s10
 8017696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801769a:	eeb4 6ac3 	vcmpe.f32	s12, s6
 801769e:	bfb8      	it	lt
 80176a0:	eef0 5a45 	vmovlt.f32	s11, s10
 80176a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176a8:	bf88      	it	hi
 80176aa:	eeb0 6a43 	vmovhi.f32	s12, s6
 80176ae:	eeb4 6ae3 	vcmpe.f32	s12, s7
 80176b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176b6:	bf88      	it	hi
 80176b8:	eeb0 6a63 	vmovhi.f32	s12, s7
 80176bc:	ee77 7a83 	vadd.f32	s15, s15, s6
 80176c0:	eeb4 6ac4 	vcmpe.f32	s12, s8
 80176c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176c8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80176cc:	bf88      	it	hi
 80176ce:	eeb0 6a44 	vmovhi.f32	s12, s8
 80176d2:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80176d6:	ee77 7a84 	vadd.f32	s15, s15, s8
 80176da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176de:	bf88      	it	hi
 80176e0:	eeb0 6a64 	vmovhi.f32	s12, s9
 80176e4:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80176e8:	eeb4 6ac5 	vcmpe.f32	s12, s10
 80176ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176f0:	ee77 7a85 	vadd.f32	s15, s15, s10
 80176f4:	bf88      	it	hi
 80176f6:	eeb0 6a45 	vmovhi.f32	s12, s10
 80176fa:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80176fe:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8017918 <iNemoEngine_API_Update+0x21b8>
 8017702:	ee26 6a2d 	vmul.f32	s12, s12, s27
 8017706:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801770a:	eddf 5a84 	vldr	s11, [pc, #528]	@ 801791c <iNemoEngine_API_Update+0x21bc>
 801770e:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8017712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017716:	f300 8246 	bgt.w	8017ba6 <iNemoEngine_API_Update+0x2446>
 801771a:	eef0 7ae7 	vabs.f32	s15, s15
 801771e:	ee67 7aad 	vmul.f32	s15, s15, s27
 8017722:	ed9f 6a7f 	vldr	s12, [pc, #508]	@ 8017920 <iNemoEngine_API_Update+0x21c0>
 8017726:	eef4 7ac6 	vcmpe.f32	s15, s12
 801772a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801772e:	f300 823a 	bgt.w	8017ba6 <iNemoEngine_API_Update+0x2446>
 8017732:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8017734:	edd1 3a00 	vldr	s7, [r1]
 8017738:	f207 71ac 	addw	r1, r7, #1964	@ 0x7ac
 801773c:	edd1 4a00 	vldr	s9, [r1]
 8017740:	f507 61f7 	add.w	r1, r7, #1976	@ 0x7b8
 8017744:	eef4 4ae3 	vcmpe.f32	s9, s7
 8017748:	edd1 5a00 	vldr	s11, [r1]
 801774c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017750:	bfb4      	ite	lt
 8017752:	eef0 7a63 	vmovlt.f32	s15, s7
 8017756:	eef0 7a64 	vmovge.f32	s15, s9
 801775a:	eef4 7ae5 	vcmpe.f32	s15, s11
 801775e:	f207 71c4 	addw	r1, r7, #1988	@ 0x7c4
 8017762:	ed91 6a00 	vldr	s12, [r1]
 8017766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801776a:	bfb8      	it	lt
 801776c:	eef0 7a65 	vmovlt.f32	s15, s11
 8017770:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017774:	f507 61fa 	add.w	r1, r7, #2000	@ 0x7d0
 8017778:	ed91 4a00 	vldr	s8, [r1]
 801777c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017780:	bfb8      	it	lt
 8017782:	eef0 7a46 	vmovlt.f32	s15, s12
 8017786:	eef4 7ac4 	vcmpe.f32	s15, s8
 801778a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801778e:	eef4 4ae3 	vcmpe.f32	s9, s7
 8017792:	bfb8      	it	lt
 8017794:	eef0 7a44 	vmovlt.f32	s15, s8
 8017798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801779c:	bf8c      	ite	hi
 801779e:	eeb0 5a63 	vmovhi.f32	s10, s7
 80177a2:	eeb0 5a64 	vmovls.f32	s10, s9
 80177a6:	eeb4 5ae5 	vcmpe.f32	s10, s11
 80177aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177ae:	bf88      	it	hi
 80177b0:	eeb0 5a65 	vmovhi.f32	s10, s11
 80177b4:	eeb4 5ac6 	vcmpe.f32	s10, s12
 80177b8:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80177bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177c0:	bf88      	it	hi
 80177c2:	eeb0 5a46 	vmovhi.f32	s10, s12
 80177c6:	ee75 5aa4 	vadd.f32	s11, s11, s9
 80177ca:	eeb4 5ac4 	vcmpe.f32	s10, s8
 80177ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177d2:	ee36 6a25 	vadd.f32	s12, s12, s11
 80177d6:	bf88      	it	hi
 80177d8:	eeb0 5a44 	vmovhi.f32	s10, s8
 80177dc:	2a05      	cmp	r2, #5
 80177de:	ee34 6a06 	vadd.f32	s12, s8, s12
 80177e2:	d065      	beq.n	80178b0 <iNemoEngine_API_Update+0x2150>
 80177e4:	f207 72dc 	addw	r2, r7, #2012	@ 0x7dc
 80177e8:	edd2 5a00 	vldr	s11, [r2]
 80177ec:	f507 62fd 	add.w	r2, r7, #2024	@ 0x7e8
 80177f0:	eef4 5ae7 	vcmpe.f32	s11, s15
 80177f4:	ed92 3a00 	vldr	s6, [r2]
 80177f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177fc:	bfa8      	it	ge
 80177fe:	eef0 7a65 	vmovge.f32	s15, s11
 8017802:	eef4 7ac3 	vcmpe.f32	s15, s6
 8017806:	f207 72f4 	addw	r2, r7, #2036	@ 0x7f4
 801780a:	edd2 3a00 	vldr	s7, [r2]
 801780e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017812:	bfb8      	it	lt
 8017814:	eef0 7a43 	vmovlt.f32	s15, s6
 8017818:	eef4 7ae3 	vcmpe.f32	s15, s7
 801781c:	f507 6200 	add.w	r2, r7, #2048	@ 0x800
 8017820:	ed92 4a00 	vldr	s8, [r2]
 8017824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017828:	bfb8      	it	lt
 801782a:	eef0 7a63 	vmovlt.f32	s15, s7
 801782e:	eef4 7ac4 	vcmpe.f32	s15, s8
 8017832:	f607 020c 	addw	r2, r7, #2060	@ 0x80c
 8017836:	edd2 4a00 	vldr	s9, [r2]
 801783a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801783e:	bfb8      	it	lt
 8017840:	eef0 7a44 	vmovlt.f32	s15, s8
 8017844:	eef4 7ae4 	vcmpe.f32	s15, s9
 8017848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801784c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8017850:	bfb8      	it	lt
 8017852:	eef0 7a64 	vmovlt.f32	s15, s9
 8017856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801785a:	ee35 6a86 	vadd.f32	s12, s11, s12
 801785e:	bf88      	it	hi
 8017860:	eef0 5a45 	vmovhi.f32	s11, s10
 8017864:	eef4 5ac3 	vcmpe.f32	s11, s6
 8017868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801786c:	bf88      	it	hi
 801786e:	eef0 5a43 	vmovhi.f32	s11, s6
 8017872:	eef4 5ae3 	vcmpe.f32	s11, s7
 8017876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801787a:	ee33 6a06 	vadd.f32	s12, s6, s12
 801787e:	bf88      	it	hi
 8017880:	eef0 5a63 	vmovhi.f32	s11, s7
 8017884:	eef4 5ac4 	vcmpe.f32	s11, s8
 8017888:	ee33 6a86 	vadd.f32	s12, s7, s12
 801788c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017890:	bf88      	it	hi
 8017892:	eef0 5a44 	vmovhi.f32	s11, s8
 8017896:	ee34 6a06 	vadd.f32	s12, s8, s12
 801789a:	eef4 5ae4 	vcmpe.f32	s11, s9
 801789e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178a2:	ee34 6a86 	vadd.f32	s12, s9, s12
 80178a6:	bf8c      	ite	hi
 80178a8:	eeb0 5a64 	vmovhi.f32	s10, s9
 80178ac:	eeb0 5a65 	vmovls.f32	s10, s11
 80178b0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80178b4:	ee67 5aad 	vmul.f32	s11, s15, s27
 80178b8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8017918 <iNemoEngine_API_Update+0x21b8>
 80178bc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80178c0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801791c <iNemoEngine_API_Update+0x21bc>
 80178c4:	eef4 5ac6 	vcmpe.f32	s11, s12
 80178c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178cc:	f300 816b 	bgt.w	8017ba6 <iNemoEngine_API_Update+0x2446>
 80178d0:	eef0 7ae7 	vabs.f32	s15, s15
 80178d4:	ee67 7aad 	vmul.f32	s15, s15, s27
 80178d8:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8017920 <iNemoEngine_API_Update+0x21c0>
 80178dc:	eef4 7ac6 	vcmpe.f32	s15, s12
 80178e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178e4:	f300 815f 	bgt.w	8017ba6 <iNemoEngine_API_Update+0x2446>
 80178e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80178ea:	2a00      	cmp	r2, #0
 80178ec:	f042 8117 	bne.w	8019b1e <iNemoEngine_API_Update+0x43be>
 80178f0:	2301      	movs	r3, #1
 80178f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80178f4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80178f8:	939f      	str	r3, [sp, #636]	@ 0x27c
 80178fa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80178fe:	93a0      	str	r3, [sp, #640]	@ 0x280
 8017900:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8017904:	93a1      	str	r3, [sp, #644]	@ 0x284
 8017906:	2300      	movs	r3, #0
 8017908:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 801790c:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 8017910:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 8017914:	707b      	strb	r3, [r7, #1]
 8017916:	e00d      	b.n	8017934 <iNemoEngine_API_Update+0x21d4>
 8017918:	3dcccccd 	.word	0x3dcccccd
 801791c:	3be56041 	.word	0x3be56041
 8017920:	3e333333 	.word	0x3e333333
 8017924:	42480000 	.word	0x42480000
 8017928:	00000000 	.word	0x00000000
 801792c:	3fb33333 	.word	0x3fb33333
 8017930:	3ecccccd 	.word	0x3ecccccd
 8017934:	ed5f 7a05 	vldr	s15, [pc, #-20]	@ 8017924 <iNemoEngine_API_Update+0x21c4>
 8017938:	eef4 9ae7 	vcmpe.f32	s19, s15
 801793c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017940:	f2c0 823f 	blt.w	8017dc2 <iNemoEngine_API_Update+0x2662>
 8017944:	2300      	movs	r3, #0
 8017946:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 801794a:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 801794e:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 8017952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017954:	2b01      	cmp	r3, #1
 8017956:	f000 8245 	beq.w	8017de4 <iNemoEngine_API_Update+0x2684>
 801795a:	edd7 3a75 	vldr	s7, [r7, #468]	@ 0x1d4
 801795e:	ed97 4a7f 	vldr	s8, [r7, #508]	@ 0x1fc
 8017962:	eddd 2a69 	vldr	s5, [sp, #420]	@ 0x1a4
 8017966:	ed9d 3a6a 	vldr	s6, [sp, #424]	@ 0x1a8
 801796a:	edd7 4a89 	vldr	s9, [r7, #548]	@ 0x224
 801796e:	ed97 5a93 	vldr	s10, [r7, #588]	@ 0x24c
 8017972:	edd7 5a9d 	vldr	s11, [r7, #628]	@ 0x274
 8017976:	ed97 6aa7 	vldr	s12, [r7, #668]	@ 0x29c
 801797a:	edd7 6ab1 	vldr	s13, [r7, #708]	@ 0x2c4
 801797e:	ed97 7abb 	vldr	s14, [r7, #748]	@ 0x2ec
 8017982:	edd7 7ac5 	vldr	s15, [r7, #788]	@ 0x314
 8017986:	ed9d 2a6e 	vldr	s4, [sp, #440]	@ 0x1b8
 801798a:	eddd 0a6b 	vldr	s1, [sp, #428]	@ 0x1ac
 801798e:	ed9d 1a6c 	vldr	s2, [sp, #432]	@ 0x1b0
 8017992:	eddd 1a6d 	vldr	s3, [sp, #436]	@ 0x1b4
 8017996:	ed9d 0a71 	vldr	s0, [sp, #452]	@ 0x1c4
 801799a:	edcd 8a93 	vstr	s17, [sp, #588]	@ 0x24c
 801799e:	eee2 3aa2 	vfma.f32	s7, s5, s5
 80179a2:	ab8d      	add	r3, sp, #564	@ 0x234
 80179a4:	aa99      	add	r2, sp, #612	@ 0x264
 80179a6:	eea3 4a03 	vfma.f32	s8, s6, s6
 80179aa:	a944      	add	r1, sp, #272	@ 0x110
 80179ac:	f507 70d6 	add.w	r0, r7, #428	@ 0x1ac
 80179b0:	eddd 2a6f 	vldr	s5, [sp, #444]	@ 0x1bc
 80179b4:	ed9d 3a70 	vldr	s6, [sp, #448]	@ 0x1c0
 80179b8:	edc7 3a75 	vstr	s7, [r7, #468]	@ 0x1d4
 80179bc:	eea1 5a01 	vfma.f32	s10, s2, s2
 80179c0:	ad7a      	add	r5, sp, #488	@ 0x1e8
 80179c2:	eea2 6a02 	vfma.f32	s12, s4, s4
 80179c6:	eee2 6aa2 	vfma.f32	s13, s5, s5
 80179ca:	eea3 7a03 	vfma.f32	s14, s6, s6
 80179ce:	eee0 7a00 	vfma.f32	s15, s0, s0
 80179d2:	eee0 4aa0 	vfma.f32	s9, s1, s1
 80179d6:	eee1 5aa1 	vfma.f32	s11, s3, s3
 80179da:	ed87 5a93 	vstr	s10, [r7, #588]	@ 0x24c
 80179de:	ed87 4a7f 	vstr	s8, [r7, #508]	@ 0x1fc
 80179e2:	edc7 4a89 	vstr	s9, [r7, #548]	@ 0x224
 80179e6:	edc7 5a9d 	vstr	s11, [r7, #628]	@ 0x274
 80179ea:	ed87 6aa7 	vstr	s12, [r7, #668]	@ 0x29c
 80179ee:	edc7 6ab1 	vstr	s13, [r7, #708]	@ 0x2c4
 80179f2:	ed87 7abb 	vstr	s14, [r7, #748]	@ 0x2ec
 80179f6:	edc7 7ac5 	vstr	s15, [r7, #788]	@ 0x314
 80179fa:	9300      	str	r3, [sp, #0]
 80179fc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80179fe:	edcd 8a94 	vstr	s17, [sp, #592]	@ 0x250
 8017a02:	edcd 8a95 	vstr	s17, [sp, #596]	@ 0x254
 8017a06:	f7fc f91f 	bl	8013c48 <kf_update>
 8017a0a:	ed97 6a6d 	vldr	s12, [r7, #436]	@ 0x1b4
 8017a0e:	edd7 5a6c 	vldr	s11, [r7, #432]	@ 0x1b0
 8017a12:	edd7 6a6e 	vldr	s13, [r7, #440]	@ 0x1b8
 8017a16:	edcd 5a5c 	vstr	s11, [sp, #368]	@ 0x170
 8017a1a:	ee26 7a06 	vmul.f32	s14, s12, s12
 8017a1e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017a22:	eea5 7aa5 	vfma.f32	s14, s11, s11
 8017a26:	aa58      	add	r2, sp, #352	@ 0x160
 8017a28:	4611      	mov	r1, r2
 8017a2a:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8017a2e:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8017a32:	4650      	mov	r0, sl
 8017a34:	ed8d 6a5d 	vstr	s12, [sp, #372]	@ 0x174
 8017a38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a40:	bf4c      	ite	mi
 8017a42:	ee37 5ac7 	vsubmi.f32	s10, s15, s14
 8017a46:	ed5f 7a48 	vldrpl	s15, [pc, #-288]	@ 8017928 <iNemoEngine_API_Update+0x21c8>
 8017a4a:	edcd 6a5e 	vstr	s13, [sp, #376]	@ 0x178
 8017a4e:	bf48      	it	mi
 8017a50:	eef1 7ac5 	vsqrtmi.f32	s15, s10
 8017a54:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8017a58:	edcd 7a5f 	vstr	s15, [sp, #380]	@ 0x17c
 8017a5c:	eeb1 5ac7 	vsqrt.f32	s10, s14
 8017a60:	ee84 7a85 	vdiv.f32	s14, s9, s10
 8017a64:	ee67 5a25 	vmul.f32	s11, s14, s11
 8017a68:	ee27 6a06 	vmul.f32	s12, s14, s12
 8017a6c:	ee67 6a26 	vmul.f32	s13, s14, s13
 8017a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017a74:	edca 5a00 	vstr	s11, [sl]
 8017a78:	ed8a 6a01 	vstr	s12, [sl, #4]
 8017a7c:	edca 6a02 	vstr	s13, [sl, #8]
 8017a80:	edca 7a03 	vstr	s15, [sl, #12]
 8017a84:	f7fb ff20 	bl	80138c8 <qmult>
 8017a88:	edd2 6a01 	vldr	s13, [r2, #4]
 8017a8c:	ed92 6a00 	vldr	s12, [r2]
 8017a90:	ed92 7a02 	vldr	s14, [r2, #8]
 8017a94:	edd2 5a03 	vldr	s11, [r2, #12]
 8017a98:	9e31      	ldr	r6, [sp, #196]	@ 0xc4
 8017a9a:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8017a9e:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8017aa2:	eee6 7a06 	vfma.f32	s15, s12, s12
 8017aa6:	f50d 7ce4 	add.w	ip, sp, #456	@ 0x1c8
 8017aaa:	eee7 7a07 	vfma.f32	s15, s14, s14
 8017aae:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8017ab2:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8017ab6:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8017aba:	ee27 6a86 	vmul.f32	s12, s15, s12
 8017abe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017ac2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8017ac6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8017aca:	ed8d 6a54 	vstr	s12, [sp, #336]	@ 0x150
 8017ace:	edcd 6a55 	vstr	s13, [sp, #340]	@ 0x154
 8017ad2:	ed8d 7a56 	vstr	s14, [sp, #344]	@ 0x158
 8017ad6:	edcd 7a57 	vstr	s15, [sp, #348]	@ 0x15c
 8017ada:	4664      	mov	r4, ip
 8017adc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017ade:	42ac      	cmp	r4, r5
 8017ae0:	f106 0610 	add.w	r6, r6, #16
 8017ae4:	f10c 0c10 	add.w	ip, ip, #16
 8017ae8:	f846 0c10 	str.w	r0, [r6, #-16]
 8017aec:	f846 1c0c 	str.w	r1, [r6, #-12]
 8017af0:	f846 2c08 	str.w	r2, [r6, #-8]
 8017af4:	f846 3c04 	str.w	r3, [r6, #-4]
 8017af8:	d1ef      	bne.n	8017ada <iNemoEngine_API_Update+0x237a>
 8017afa:	f8dc 0000 	ldr.w	r0, [ip]
 8017afe:	6030      	str	r0, [r6, #0]
 8017b00:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8017b02:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8017b06:	6013      	str	r3, [r2, #0]
 8017b08:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8017b0a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8017b0e:	6013      	str	r3, [r2, #0]
 8017b10:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8017b12:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8017b16:	6013      	str	r3, [r2, #0]
 8017b18:	ac54      	add	r4, sp, #336	@ 0x150
 8017b1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017b1c:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 8017b1e:	60e3      	str	r3, [r4, #12]
 8017b20:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017b22:	6020      	str	r0, [r4, #0]
 8017b24:	6061      	str	r1, [r4, #4]
 8017b26:	60a2      	str	r2, [r4, #8]
 8017b28:	edd7 8a75 	vldr	s17, [r7, #468]	@ 0x1d4
 8017b2c:	ed83 6a00 	vstr	s12, [r3]
 8017b30:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8017b32:	edc3 6a00 	vstr	s13, [r3]
 8017b36:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8017b38:	ed83 7a00 	vstr	s14, [r3]
 8017b3c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8017b3e:	edc3 7a00 	vstr	s15, [r3]
 8017b42:	f7fd bec1 	b.w	80158c8 <iNemoEngine_API_Update+0x168>
 8017b46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	f43f ab95 	beq.w	8017278 <iNemoEngine_API_Update+0x1b18>
 8017b4e:	ed5f 7a89 	vldr	s15, [pc, #-548]	@ 801792c <iNemoEngine_API_Update+0x21cc>
 8017b52:	2301      	movs	r3, #1
 8017b54:	eeb4 eae7 	vcmpe.f32	s28, s15
 8017b58:	f88d 3112 	strb.w	r3, [sp, #274]	@ 0x112
 8017b5c:	f88d 3119 	strb.w	r3, [sp, #281]	@ 0x119
 8017b60:	f88d 311b 	strb.w	r3, [sp, #283]	@ 0x11b
 8017b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b68:	f240 1301 	movw	r3, #257	@ 0x101
 8017b6c:	f8ad 3110 	strh.w	r3, [sp, #272]	@ 0x110
 8017b70:	f73f ab82 	bgt.w	8017278 <iNemoEngine_API_Update+0x1b18>
 8017b74:	ed5f 7a92 	vldr	s15, [pc, #-584]	@ 8017930 <iNemoEngine_API_Update+0x21d0>
 8017b78:	eeb4 eae7 	vcmpe.f32	s28, s15
 8017b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b80:	f53f ab7a 	bmi.w	8017278 <iNemoEngine_API_Update+0x1b18>
 8017b84:	eddd 7a2e 	vldr	s15, [sp, #184]	@ 0xb8
 8017b88:	eef4 4ae7 	vcmpe.f32	s9, s15
 8017b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b90:	bfb8      	it	lt
 8017b92:	eef0 4a67 	vmovlt.f32	s9, s15
 8017b96:	edcd 4a8d 	vstr	s9, [sp, #564]	@ 0x234
 8017b9a:	edcd 4a8e 	vstr	s9, [sp, #568]	@ 0x238
 8017b9e:	edcd 4a8f 	vstr	s9, [sp, #572]	@ 0x23c
 8017ba2:	f7ff bb72 	b.w	801728a <iNemoEngine_API_Update+0x1b2a>
 8017ba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017ba8:	2300      	movs	r3, #0
 8017baa:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 8017bae:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 8017bb2:	2a00      	cmp	r2, #0
 8017bb4:	f43f ae9e 	beq.w	80178f4 <iNemoEngine_API_Update+0x2194>
 8017bb8:	f002 02fd 	and.w	r2, r2, #253	@ 0xfd
 8017bbc:	2a01      	cmp	r2, #1
 8017bbe:	f001 8240 	beq.w	8019042 <iNemoEngine_API_Update+0x38e2>
 8017bc2:	9303      	str	r3, [sp, #12]
 8017bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017bc6:	2b02      	cmp	r3, #2
 8017bc8:	f041 823a 	bne.w	8019040 <iNemoEngine_API_Update+0x38e0>
 8017bcc:	eddd 7a14 	vldr	s15, [sp, #80]	@ 0x50
 8017bd0:	ed9d 6a11 	vldr	s12, [sp, #68]	@ 0x44
 8017bd4:	eddd 5a12 	vldr	s11, [sp, #72]	@ 0x48
 8017bd8:	f897 21a4 	ldrb.w	r2, [r7, #420]	@ 0x1a4
 8017bdc:	ee87 6a86 	vdiv.f32	s12, s15, s12
 8017be0:	f240 1301 	movw	r3, #257	@ 0x101
 8017be4:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 8017be8:	2301      	movs	r3, #1
 8017bea:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 8017bee:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 8017bf2:	ed8d 6a47 	vstr	s12, [sp, #284]	@ 0x11c
 8017bf6:	ee87 5aa5 	vdiv.f32	s10, s15, s11
 8017bfa:	eddd 5a13 	vldr	s11, [sp, #76]	@ 0x4c
 8017bfe:	eddd 7a16 	vldr	s15, [sp, #88]	@ 0x58
 8017c02:	ed8d 5a48 	vstr	s10, [sp, #288]	@ 0x120
 8017c06:	eec7 7aa5 	vdiv.f32	s15, s15, s11
 8017c0a:	edd7 5a64 	vldr	s11, [r7, #400]	@ 0x190
 8017c0e:	edcd 7a49 	vstr	s15, [sp, #292]	@ 0x124
 8017c12:	eef4 4a00 	vmov.f32	s9, #64	@ 0x3e000000  0.125
 8017c16:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8017c1a:	eef4 5ac8 	vcmpe.f32	s11, s16
 8017c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c22:	f281 8251 	bge.w	80190c8 <iNemoEngine_API_Update+0x3968>
 8017c26:	eddd 5a11 	vldr	s11, [sp, #68]	@ 0x44
 8017c2a:	eddd 4a14 	vldr	s9, [sp, #80]	@ 0x50
 8017c2e:	eef4 5ae4 	vcmpe.f32	s11, s9
 8017c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c36:	f341 863f 	ble.w	80198b8 <iNemoEngine_API_Update+0x4158>
 8017c3a:	eddd 5a12 	vldr	s11, [sp, #72]	@ 0x48
 8017c3e:	eddd 4a0c 	vldr	s9, [sp, #48]	@ 0x30
 8017c42:	eef4 5ae4 	vcmpe.f32	s11, s9
 8017c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c4a:	f341 8635 	ble.w	80198b8 <iNemoEngine_API_Update+0x4158>
 8017c4e:	eddd 5a13 	vldr	s11, [sp, #76]	@ 0x4c
 8017c52:	eddd 4a16 	vldr	s9, [sp, #88]	@ 0x58
 8017c56:	eef4 5ae4 	vcmpe.f32	s11, s9
 8017c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c5e:	f341 862b 	ble.w	80198b8 <iNemoEngine_API_Update+0x4158>
 8017c62:	eef5 5a00 	vmov.f32	s11, #80	@ 0x3e800000  0.250
 8017c66:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8017c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c6e:	f141 8623 	bpl.w	80198b8 <iNemoEngine_API_Update+0x4158>
 8017c72:	ee36 6a05 	vadd.f32	s12, s12, s10
 8017c76:	eef7 5a08 	vmov.f32	s11, #120	@ 0x3fc00000  1.5
 8017c7a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017c7e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8017c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c86:	f141 8617 	bpl.w	80198b8 <iNemoEngine_API_Update+0x4158>
 8017c8a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017c8e:	2300      	movs	r3, #0
 8017c90:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8017c94:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6
 8017c98:	2a00      	cmp	r2, #0
 8017c9a:	f041 8237 	bne.w	801910c <iNemoEngine_API_Update+0x39ac>
 8017c9e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017ca0:	a84a      	add	r0, sp, #296	@ 0x128
 8017ca2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017ca6:	460b      	mov	r3, r1
 8017ca8:	edd1 7a00 	vldr	s15, [r1]
 8017cac:	3201      	adds	r2, #1
 8017cae:	330c      	adds	r3, #12
 8017cb0:	3104      	adds	r1, #4
 8017cb2:	461d      	mov	r5, r3
 8017cb4:	edd5 6a00 	vldr	s13, [r5]
 8017cb8:	330c      	adds	r3, #12
 8017cba:	429c      	cmp	r4, r3
 8017cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017cc0:	d1f7      	bne.n	8017cb2 <iNemoEngine_API_Update+0x2552>
 8017cc2:	2a02      	cmp	r2, #2
 8017cc4:	ece0 7a01 	vstmia	r0!, {s15}
 8017cc8:	f104 0404 	add.w	r4, r4, #4
 8017ccc:	d1eb      	bne.n	8017ca6 <iNemoEngine_API_Update+0x2546>
 8017cce:	eddf 7ae8 	vldr	s15, [pc, #928]	@ 8018070 <iNemoEngine_API_Update+0x2910>
 8017cd2:	ed9d 5a4a 	vldr	s10, [sp, #296]	@ 0x128
 8017cd6:	eddd 5a4b 	vldr	s11, [sp, #300]	@ 0x12c
 8017cda:	ed9d 6a4c 	vldr	s12, [sp, #304]	@ 0x130
 8017cde:	9c33      	ldr	r4, [sp, #204]	@ 0xcc
 8017ce0:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8017ce4:	ee25 5a27 	vmul.f32	s10, s10, s15
 8017ce8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8017cec:	ee26 6a27 	vmul.f32	s12, s12, s15
 8017cf0:	f507 71b2 	add.w	r1, r7, #356	@ 0x164
 8017cf4:	4602      	mov	r2, r0
 8017cf6:	edd2 7a7c 	vldr	s15, [r2, #496]	@ 0x1f0
 8017cfa:	f5a2 73ae 	sub.w	r3, r2, #348	@ 0x15c
 8017cfe:	edd3 6ad6 	vldr	s13, [r3, #856]	@ 0x358
 8017d02:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d0a:	f103 030c 	add.w	r3, r3, #12
 8017d0e:	bf88      	it	hi
 8017d10:	eef0 7a66 	vmovhi.f32	s15, s13
 8017d14:	4293      	cmp	r3, r2
 8017d16:	d1f2      	bne.n	8017cfe <iNemoEngine_API_Update+0x259e>
 8017d18:	1d1a      	adds	r2, r3, #4
 8017d1a:	4291      	cmp	r1, r2
 8017d1c:	ece4 7a01 	vstmia	r4!, {s15}
 8017d20:	d1e9      	bne.n	8017cf6 <iNemoEngine_API_Update+0x2596>
 8017d22:	eddd 4a47 	vldr	s9, [sp, #284]	@ 0x11c
 8017d26:	eddd 7a48 	vldr	s15, [sp, #288]	@ 0x120
 8017d2a:	eddd 6a49 	vldr	s13, [sp, #292]	@ 0x124
 8017d2e:	787b      	ldrb	r3, [r7, #1]
 8017d30:	eedd 4a85 	vfnms.f32	s9, s27, s10
 8017d34:	eedd 7aa5 	vfnms.f32	s15, s27, s11
 8017d38:	eedd 6a86 	vfnms.f32	s13, s27, s12
 8017d3c:	eeb0 5a67 	vmov.f32	s10, s15
 8017d40:	edcd 4a4a 	vstr	s9, [sp, #296]	@ 0x128
 8017d44:	edcd 7a4b 	vstr	s15, [sp, #300]	@ 0x12c
 8017d48:	edcd 6a4c 	vstr	s13, [sp, #304]	@ 0x130
 8017d4c:	b13b      	cbz	r3, 8017d5e <iNemoEngine_API_Update+0x25fe>
 8017d4e:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8017d52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d5a:	f101 8627 	bmi.w	80199ac <iNemoEngine_API_Update+0x424c>
 8017d5e:	f897 21a1 	ldrb.w	r2, [r7, #417]	@ 0x1a1
 8017d62:	2a1e      	cmp	r2, #30
 8017d64:	f001 8753 	beq.w	8019c0e <iNemoEngine_API_Update+0x44ae>
 8017d68:	1c53      	adds	r3, r2, #1
 8017d6a:	2aff      	cmp	r2, #255	@ 0xff
 8017d6c:	bf14      	ite	ne
 8017d6e:	b2db      	uxtbne	r3, r3
 8017d70:	23ff      	moveq	r3, #255	@ 0xff
 8017d72:	f887 31a1 	strb.w	r3, [r7, #417]	@ 0x1a1
 8017d76:	9b03      	ldr	r3, [sp, #12]
 8017d78:	9309      	str	r3, [sp, #36]	@ 0x24
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 8017d80:	e5d8      	b.n	8017934 <iNemoEngine_API_Update+0x21d4>
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	f340 82d0 	ble.w	8018328 <iNemoEngine_API_Update+0x2bc8>
 8017d88:	3b01      	subs	r3, #1
 8017d8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8017d8c:	2300      	movs	r3, #0
 8017d8e:	f8ad 3110 	strh.w	r3, [sp, #272]	@ 0x110
 8017d92:	f88d 3112 	strb.w	r3, [sp, #274]	@ 0x112
 8017d96:	f88d 3119 	strb.w	r3, [sp, #281]	@ 0x119
 8017d9a:	f88d 311b 	strb.w	r3, [sp, #283]	@ 0x11b
 8017d9e:	f7ff bab8 	b.w	8017312 <iNemoEngine_API_Update+0x1bb2>
 8017da2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017da4:	f362 0307 	bfi	r3, r2, #0, #8
 8017da8:	f362 230f 	bfi	r3, r2, #8, #8
 8017dac:	7bba      	ldrb	r2, [r7, #14]
 8017dae:	f88d 2115 	strb.w	r2, [sp, #277]	@ 0x115
 8017db2:	f362 4317 	bfi	r3, r2, #16, #8
 8017db6:	f362 631f 	bfi	r3, r2, #24, #8
 8017dba:	f8cd 3111 	str.w	r3, [sp, #273]	@ 0x111
 8017dbe:	f7ff ba3a 	b.w	8017236 <iNemoEngine_API_Update+0x1ad6>
 8017dc2:	f897 31a2 	ldrb.w	r3, [r7, #418]	@ 0x1a2
 8017dc6:	2b31      	cmp	r3, #49	@ 0x31
 8017dc8:	f63f adc3 	bhi.w	8017952 <iNemoEngine_API_Update+0x21f2>
 8017dcc:	3301      	adds	r3, #1
 8017dce:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 8017dd8:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 8017ddc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017dde:	2b01      	cmp	r3, #1
 8017de0:	f47f adbb 	bne.w	801795a <iNemoEngine_API_Update+0x21fa>
 8017de4:	ed9d 5a90 	vldr	s10, [sp, #576]	@ 0x240
 8017de8:	eddd 6a69 	vldr	s13, [sp, #420]	@ 0x1a4
 8017dec:	eddd 5a91 	vldr	s11, [sp, #580]	@ 0x244
 8017df0:	ed9d 7a6a 	vldr	s14, [sp, #424]	@ 0x1a8
 8017df4:	ed9d 6a92 	vldr	s12, [sp, #584]	@ 0x248
 8017df8:	eddd 7a6b 	vldr	s15, [sp, #428]	@ 0x1ac
 8017dfc:	eef6 4a08 	vmov.f32	s9, #104	@ 0x3f400000  0.750
 8017e00:	ee25 5a24 	vmul.f32	s10, s10, s9
 8017e04:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8017e08:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8017e0c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8017e10:	ee26 6a24 	vmul.f32	s12, s12, s9
 8017e14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017e18:	ed8d 5a90 	vstr	s10, [sp, #576]	@ 0x240
 8017e1c:	edcd 6a69 	vstr	s13, [sp, #420]	@ 0x1a4
 8017e20:	edcd 5a91 	vstr	s11, [sp, #580]	@ 0x244
 8017e24:	ed8d 7a6a 	vstr	s14, [sp, #424]	@ 0x1a8
 8017e28:	ed8d 6a92 	vstr	s12, [sp, #584]	@ 0x248
 8017e2c:	edcd 7a6b 	vstr	s15, [sp, #428]	@ 0x1ac
 8017e30:	e593      	b.n	801795a <iNemoEngine_API_Update+0x21fa>
 8017e32:	eef1 6a66 	vneg.f32	s13, s13
 8017e36:	f7fe bc48 	b.w	80166ca <iNemoEngine_API_Update+0xf6a>
 8017e3a:	eeb1 5a45 	vneg.f32	s10, s10
 8017e3e:	f7fe bc20 	b.w	8016682 <iNemoEngine_API_Update+0xf22>
 8017e42:	f9b7 3974 	ldrsh.w	r3, [r7, #2420]	@ 0x974
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	f341 8083 	ble.w	8018f52 <iNemoEngine_API_Update+0x37f2>
 8017e4c:	3b01      	subs	r3, #1
 8017e4e:	f8a7 3974 	strh.w	r3, [r7, #2420]	@ 0x974
 8017e52:	f7fd bcac 	b.w	80157ae <iNemoEngine_API_Update+0x4e>
 8017e56:	ee6a 7a0a 	vmul.f32	s15, s20, s20
 8017e5a:	ee6a 9a09 	vmul.f32	s19, s20, s18
 8017e5e:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8017e62:	eee8 9a28 	vfma.f32	s19, s16, s17
 8017e66:	eee8 7a48 	vfms.f32	s15, s16, s16
 8017e6a:	eee9 7a49 	vfms.f32	s15, s18, s18
 8017e6e:	ee17 0a90 	vmov	r0, s15
 8017e72:	f7e8 fb91 	bl	8000598 <__aeabi_f2d>
 8017e76:	ee79 7aa9 	vadd.f32	s15, s19, s19
 8017e7a:	4602      	mov	r2, r0
 8017e7c:	460b      	mov	r3, r1
 8017e7e:	ee17 0a90 	vmov	r0, s15
 8017e82:	ec43 2b18 	vmov	d8, r2, r3
 8017e86:	f7e8 fb87 	bl	8000598 <__aeabi_f2d>
 8017e8a:	eeb0 1a48 	vmov.f32	s2, s16
 8017e8e:	eef0 1a68 	vmov.f32	s3, s17
 8017e92:	ec41 0b10 	vmov	d0, r0, r1
 8017e96:	f004 ff01 	bl	801cc9c <atan2>
 8017e9a:	a373      	add	r3, pc, #460	@ (adr r3, 8018068 <iNemoEngine_API_Update+0x2908>)
 8017e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ea0:	ec51 0b10 	vmov	r0, r1, d0
 8017ea4:	f7e8 fbd0 	bl	8000648 <__aeabi_dmul>
 8017ea8:	4b72      	ldr	r3, [pc, #456]	@ (8018074 <iNemoEngine_API_Update+0x2914>)
 8017eaa:	2200      	movs	r2, #0
 8017eac:	f7e8 fa14 	bl	80002d8 <__aeabi_dsub>
 8017eb0:	f7e8 fea2 	bl	8000bf8 <__aeabi_d2f>
 8017eb4:	ee09 0a90 	vmov	s19, r0
 8017eb8:	f7fd bd9b 	b.w	80159f2 <iNemoEngine_API_Update+0x292>
 8017ebc:	ee6a 7a0a 	vmul.f32	s15, s20, s20
 8017ec0:	ee6a 9a09 	vmul.f32	s19, s20, s18
 8017ec4:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8017ec8:	eee8 9a28 	vfma.f32	s19, s16, s17
 8017ecc:	eee8 7a48 	vfms.f32	s15, s16, s16
 8017ed0:	eee9 7a49 	vfms.f32	s15, s18, s18
 8017ed4:	ee17 0a90 	vmov	r0, s15
 8017ed8:	f7e8 fb5e 	bl	8000598 <__aeabi_f2d>
 8017edc:	ee79 7aa9 	vadd.f32	s15, s19, s19
 8017ee0:	4602      	mov	r2, r0
 8017ee2:	460b      	mov	r3, r1
 8017ee4:	ee17 0a90 	vmov	r0, s15
 8017ee8:	ec43 2b18 	vmov	d8, r2, r3
 8017eec:	f7e8 fb54 	bl	8000598 <__aeabi_f2d>
 8017ef0:	eeb0 1a48 	vmov.f32	s2, s16
 8017ef4:	eef0 1a68 	vmov.f32	s3, s17
 8017ef8:	ec41 0b10 	vmov	d0, r0, r1
 8017efc:	f004 fece 	bl	801cc9c <atan2>
 8017f00:	a359      	add	r3, pc, #356	@ (adr r3, 8018068 <iNemoEngine_API_Update+0x2908>)
 8017f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f06:	ec51 0b10 	vmov	r0, r1, d0
 8017f0a:	f7e8 fb9d 	bl	8000648 <__aeabi_dmul>
 8017f0e:	4b59      	ldr	r3, [pc, #356]	@ (8018074 <iNemoEngine_API_Update+0x2914>)
 8017f10:	2200      	movs	r2, #0
 8017f12:	f7e8 f9e3 	bl	80002dc <__adddf3>
 8017f16:	f7e8 fe6f 	bl	8000bf8 <__aeabi_d2f>
 8017f1a:	ee09 0a90 	vmov	s19, r0
 8017f1e:	f7fd bd68 	b.w	80159f2 <iNemoEngine_API_Update+0x292>
 8017f22:	3305      	adds	r3, #5
 8017f24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8017f26:	f7ff b9f4 	b.w	8017312 <iNemoEngine_API_Update+0x1bb2>
 8017f2a:	2a00      	cmp	r2, #0
 8017f2c:	f43f a9be 	beq.w	80172ac <iNemoEngine_API_Update+0x1b4c>
 8017f30:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 8017f34:	ee76 7a45 	vsub.f32	s15, s12, s10
 8017f38:	eeb0 6ae7 	vabs.f32	s12, s15
 8017f3c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017f40:	eeb4 6ac4 	vcmpe.f32	s12, s8
 8017f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f48:	eef4 7ac5 	vcmpe.f32	s15, s10
 8017f4c:	bfb8      	it	lt
 8017f4e:	eeb0 6a44 	vmovlt.f32	s12, s8
 8017f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f56:	ed8d 6a97 	vstr	s12, [sp, #604]	@ 0x25c
 8017f5a:	f77f a9ae 	ble.w	80172ba <iNemoEngine_API_Update+0x1b5a>
 8017f5e:	ed9d 6a90 	vldr	s12, [sp, #576]	@ 0x240
 8017f62:	ee26 5a06 	vmul.f32	s10, s12, s12
 8017f66:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8017f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f6e:	f57f a9a4 	bpl.w	80172ba <iNemoEngine_API_Update+0x1b5a>
 8017f72:	ee26 6a27 	vmul.f32	s12, s12, s15
 8017f76:	ed8d 6a90 	vstr	s12, [sp, #576]	@ 0x240
 8017f7a:	ed9d 6a91 	vldr	s12, [sp, #580]	@ 0x244
 8017f7e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8017f82:	ed8d 6a91 	vstr	s12, [sp, #580]	@ 0x244
 8017f86:	ed9d 6a92 	vldr	s12, [sp, #584]	@ 0x248
 8017f8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8017f8e:	edcd 7a92 	vstr	s15, [sp, #584]	@ 0x248
 8017f92:	f7ff b992 	b.w	80172ba <iNemoEngine_API_Update+0x1b5a>
 8017f96:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8017f9a:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fa2:	bfc4      	itt	gt
 8017fa4:	f8ad 3113 	strhgt.w	r3, [sp, #275]	@ 0x113
 8017fa8:	f88d 3115 	strbgt.w	r3, [sp, #277]	@ 0x115
 8017fac:	f7ff b943 	b.w	8017236 <iNemoEngine_API_Update+0x1ad6>
 8017fb0:	eddf 9a31 	vldr	s19, [pc, #196]	@ 8018078 <iNemoEngine_API_Update+0x2918>
 8017fb4:	eddf 3a31 	vldr	s7, [pc, #196]	@ 801807c <iNemoEngine_API_Update+0x291c>
 8017fb8:	eddf 4a31 	vldr	s9, [pc, #196]	@ 8018080 <iNemoEngine_API_Update+0x2920>
 8017fbc:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8018084 <iNemoEngine_API_Update+0x2924>
 8017fc0:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 8018088 <iNemoEngine_API_Update+0x2928>
 8017fc4:	ee68 8aa9 	vmul.f32	s17, s17, s19
 8017fc8:	f7ff b8c4 	b.w	8017154 <iNemoEngine_API_Update+0x19f4>
 8017fcc:	edd7 7a73 	vldr	s15, [r7, #460]	@ 0x1cc
 8017fd0:	2600      	movs	r6, #0
 8017fd2:	f7fe bfc0 	b.w	8016f56 <iNemoEngine_API_Update+0x17f6>
 8017fd6:	ee07 3a90 	vmov	s15, r3
 8017fda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017fde:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 801808c <iNemoEngine_API_Update+0x292c>
 8017fe2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017fe6:	f7fd bdc6 	b.w	8015b76 <iNemoEngine_API_Update+0x416>
 8017fea:	eddf 9a29 	vldr	s19, [pc, #164]	@ 8018090 <iNemoEngine_API_Update+0x2930>
 8017fee:	4a29      	ldr	r2, [pc, #164]	@ (8018094 <iNemoEngine_API_Update+0x2934>)
 8017ff0:	eef0 8a67 	vmov.f32	s17, s15
 8017ff4:	f7fd bda3 	b.w	8015b3e <iNemoEngine_API_Update+0x3de>
 8017ff8:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017ffc:	ee17 0a90 	vmov	r0, s15
 8018000:	f7e8 faca 	bl	8000598 <__aeabi_f2d>
 8018004:	ec41 0b10 	vmov	d0, r0, r1
 8018008:	f005 f94e 	bl	801d2a8 <floor>
 801800c:	ec51 0b10 	vmov	r0, r1, d0
 8018010:	f7e8 fdf2 	bl	8000bf8 <__aeabi_d2f>
 8018014:	ee08 0a10 	vmov	s16, r0
 8018018:	f7fe b891 	b.w	801613e <iNemoEngine_API_Update+0x9de>
 801801c:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 8018020:	ee17 0a90 	vmov	r0, s15
 8018024:	f7e8 fab8 	bl	8000598 <__aeabi_f2d>
 8018028:	ec41 0b10 	vmov	d0, r0, r1
 801802c:	f005 f93c 	bl	801d2a8 <floor>
 8018030:	ec51 0b10 	vmov	r0, r1, d0
 8018034:	f7e8 fde0 	bl	8000bf8 <__aeabi_d2f>
 8018038:	ee0e 0a90 	vmov	s29, r0
 801803c:	f7fe b816 	b.w	801606c <iNemoEngine_API_Update+0x90c>
 8018040:	ee78 7a27 	vadd.f32	s15, s16, s15
 8018044:	ee17 0a90 	vmov	r0, s15
 8018048:	f7e8 faa6 	bl	8000598 <__aeabi_f2d>
 801804c:	ec41 0b10 	vmov	d0, r0, r1
 8018050:	f005 f92a 	bl	801d2a8 <floor>
 8018054:	ec51 0b10 	vmov	r0, r1, d0
 8018058:	f7e8 fdce 	bl	8000bf8 <__aeabi_d2f>
 801805c:	ee08 0a10 	vmov	s16, r0
 8018060:	f7fd bfd9 	b.w	8016016 <iNemoEngine_API_Update+0x8b6>
 8018064:	f3af 8000 	nop.w
 8018068:	20000000 	.word	0x20000000
 801806c:	404ca5dc 	.word	0x404ca5dc
 8018070:	3d088889 	.word	0x3d088889
 8018074:	40568000 	.word	0x40568000
 8018078:	43168000 	.word	0x43168000
 801807c:	391d4951 	.word	0x391d4951
 8018080:	383cbe62 	.word	0x383cbe62
 8018084:	3c75c28f 	.word	0x3c75c28f
 8018088:	469c3e00 	.word	0x469c3e00
 801808c:	3d4ccccd 	.word	0x3d4ccccd
 8018090:	3dcccccd 	.word	0x3dcccccd
 8018094:	3a83126f 	.word	0x3a83126f
 8018098:	ee79 7a27 	vadd.f32	s15, s18, s15
 801809c:	ee17 0a90 	vmov	r0, s15
 80180a0:	f7e8 fa7a 	bl	8000598 <__aeabi_f2d>
 80180a4:	ec41 0b10 	vmov	d0, r0, r1
 80180a8:	f005 f8fe 	bl	801d2a8 <floor>
 80180ac:	ec51 0b10 	vmov	r0, r1, d0
 80180b0:	f7e8 fda2 	bl	8000bf8 <__aeabi_d2f>
 80180b4:	ee09 0a10 	vmov	s18, r0
 80180b8:	f7fd bf82 	b.w	8015fc0 <iNemoEngine_API_Update+0x860>
 80180bc:	ee77 7ae3 	vsub.f32	s15, s15, s7
 80180c0:	eeb0 3a08 	vmov.f32	s6, #8	@ 0x40400000  3.0
 80180c4:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 80180c8:	eee7 3a83 	vfma.f32	s7, s15, s6
 80180cc:	f7fe bf1a 	b.w	8016f04 <iNemoEngine_API_Update+0x17a4>
 80180d0:	ed97 5a48 	vldr	s10, [r7, #288]	@ 0x120
 80180d4:	eeb4 5ac8 	vcmpe.f32	s10, s16
 80180d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180dc:	f340 8722 	ble.w	8018f24 <iNemoEngine_API_Update+0x37c4>
 80180e0:	edd7 5a32 	vldr	s11, [r7, #200]	@ 0xc8
 80180e4:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 80180e8:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80180ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180f0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80180f4:	f100 87d2 	bmi.w	801909c <iNemoEngine_API_Update+0x393c>
 80180f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180fc:	f141 833e 	bpl.w	801977c <iNemoEngine_API_Update+0x401c>
 8018100:	ed97 3a33 	vldr	s6, [r7, #204]	@ 0xcc
 8018104:	edd7 3a35 	vldr	s7, [r7, #212]	@ 0xd4
 8018108:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801810c:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8018110:	ee78 5a65 	vsub.f32	s11, s16, s11
 8018114:	ee63 5aa5 	vmul.f32	s11, s7, s11
 8018118:	ee85 9aa7 	vdiv.f32	s18, s11, s15
 801811c:	ee39 9a03 	vadd.f32	s18, s18, s6
 8018120:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 8018124:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801812c:	f2c1 833e 	blt.w	80197ac <iNemoEngine_API_Update+0x404c>
 8018130:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8018134:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8018138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801813c:	f141 84b3 	bpl.w	8019aa6 <iNemoEngine_API_Update+0x4346>
 8018140:	ed97 3a37 	vldr	s6, [r7, #220]	@ 0xdc
 8018144:	edd7 3a39 	vldr	s7, [r7, #228]	@ 0xe4
 8018148:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801814c:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8018150:	ee78 7a67 	vsub.f32	s15, s16, s15
 8018154:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8018158:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 801815c:	ee39 9a03 	vadd.f32	s18, s18, s6
 8018160:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 8018164:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801816c:	f2c1 833e 	blt.w	80197ec <iNemoEngine_API_Update+0x408c>
 8018170:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 8018174:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8018178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801817c:	f141 848c 	bpl.w	8019a98 <iNemoEngine_API_Update+0x4338>
 8018180:	ed97 3a3b 	vldr	s6, [r7, #236]	@ 0xec
 8018184:	edd7 3a3d 	vldr	s7, [r7, #244]	@ 0xf4
 8018188:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801818c:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8018190:	ee78 7a67 	vsub.f32	s15, s16, s15
 8018194:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8018198:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 801819c:	ee39 9a03 	vadd.f32	s18, s18, s6
 80181a0:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 80181a4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80181a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181ac:	f2c1 833e 	blt.w	801982c <iNemoEngine_API_Update+0x40cc>
 80181b0:	edd7 5a40 	vldr	s11, [r7, #256]	@ 0x100
 80181b4:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80181b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181bc:	f141 8469 	bpl.w	8019a92 <iNemoEngine_API_Update+0x4332>
 80181c0:	ed97 3a3f 	vldr	s6, [r7, #252]	@ 0xfc
 80181c4:	edd7 3a41 	vldr	s7, [r7, #260]	@ 0x104
 80181c8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80181cc:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80181d0:	ee78 7a67 	vsub.f32	s15, s16, s15
 80181d4:	ee63 3aa7 	vmul.f32	s7, s7, s15
 80181d8:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 80181dc:	ee39 9a03 	vadd.f32	s18, s18, s6
 80181e0:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 80181e4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80181e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181ec:	f2c1 833e 	blt.w	801986c <iNemoEngine_API_Update+0x410c>
 80181f0:	edd7 5a44 	vldr	s11, [r7, #272]	@ 0x110
 80181f4:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80181f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181fc:	f141 84f1 	bpl.w	8019be2 <iNemoEngine_API_Update+0x4482>
 8018200:	ed97 3a43 	vldr	s6, [r7, #268]	@ 0x10c
 8018204:	edd7 3a45 	vldr	s7, [r7, #276]	@ 0x114
 8018208:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801820c:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8018210:	ee78 7a67 	vsub.f32	s15, s16, s15
 8018214:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8018218:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 801821c:	ee39 9a03 	vadd.f32	s18, s18, s6
 8018220:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8018224:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801822c:	f6fe acbf 	blt.w	8016bae <iNemoEngine_API_Update+0x144e>
 8018230:	edd7 3a47 	vldr	s7, [r7, #284]	@ 0x11c
 8018234:	edd7 5a49 	vldr	s11, [r7, #292]	@ 0x124
 8018238:	ee35 5a67 	vsub.f32	s10, s10, s15
 801823c:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8018240:	ee78 7a67 	vsub.f32	s15, s16, s15
 8018244:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8018248:	ee87 9a85 	vdiv.f32	s18, s15, s10
 801824c:	ee39 9a23 	vadd.f32	s18, s18, s7
 8018250:	f7fe bcad 	b.w	8016bae <iNemoEngine_API_Update+0x144e>
 8018254:	ee78 7a27 	vadd.f32	s15, s16, s15
 8018258:	ee17 0a90 	vmov	r0, s15
 801825c:	f7e8 f99c 	bl	8000598 <__aeabi_f2d>
 8018260:	ec41 0b10 	vmov	d0, r0, r1
 8018264:	f005 f820 	bl	801d2a8 <floor>
 8018268:	ec51 0b10 	vmov	r0, r1, d0
 801826c:	f7e8 fcc4 	bl	8000bf8 <__aeabi_d2f>
 8018270:	ee08 0a10 	vmov	s16, r0
 8018274:	f7fe b878 	b.w	8016368 <iNemoEngine_API_Update+0xc08>
 8018278:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 801827c:	ee17 0a90 	vmov	r0, s15
 8018280:	f7e8 f98a 	bl	8000598 <__aeabi_f2d>
 8018284:	ec41 0b10 	vmov	d0, r0, r1
 8018288:	f005 f80e 	bl	801d2a8 <floor>
 801828c:	ec51 0b10 	vmov	r0, r1, d0
 8018290:	f7e8 fcb2 	bl	8000bf8 <__aeabi_d2f>
 8018294:	ee0e 0a90 	vmov	s29, r0
 8018298:	f7fe b83b 	b.w	8016312 <iNemoEngine_API_Update+0xbb2>
 801829c:	ee79 7a27 	vadd.f32	s15, s18, s15
 80182a0:	ee17 0a90 	vmov	r0, s15
 80182a4:	f7e8 f978 	bl	8000598 <__aeabi_f2d>
 80182a8:	ec41 0b10 	vmov	d0, r0, r1
 80182ac:	f004 fffc 	bl	801d2a8 <floor>
 80182b0:	ec51 0b10 	vmov	r0, r1, d0
 80182b4:	f7e8 fca0 	bl	8000bf8 <__aeabi_d2f>
 80182b8:	ee09 0a10 	vmov	s18, r0
 80182bc:	f7fd bf95 	b.w	80161ea <iNemoEngine_API_Update+0xa8a>
 80182c0:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 80182c4:	ee17 0a90 	vmov	r0, s15
 80182c8:	f7e8 f966 	bl	8000598 <__aeabi_f2d>
 80182cc:	ec41 0b10 	vmov	d0, r0, r1
 80182d0:	f004 ffea 	bl	801d2a8 <floor>
 80182d4:	ec51 0b10 	vmov	r0, r1, d0
 80182d8:	f7e8 fc8e 	bl	8000bf8 <__aeabi_d2f>
 80182dc:	ee0e 0a90 	vmov	s29, r0
 80182e0:	f7fd bf58 	b.w	8016194 <iNemoEngine_API_Update+0xa34>
 80182e4:	ee79 7a27 	vadd.f32	s15, s18, s15
 80182e8:	ee17 0a90 	vmov	r0, s15
 80182ec:	f7e8 f954 	bl	8000598 <__aeabi_f2d>
 80182f0:	ec41 0b10 	vmov	d0, r0, r1
 80182f4:	f004 ffd8 	bl	801d2a8 <floor>
 80182f8:	ec51 0b10 	vmov	r0, r1, d0
 80182fc:	f7e8 fc7c 	bl	8000bf8 <__aeabi_d2f>
 8018300:	ee09 0a10 	vmov	s18, r0
 8018304:	f7fd bfda 	b.w	80162bc <iNemoEngine_API_Update+0xb5c>
 8018308:	eef1 8a04 	vmov.f32	s17, #20	@ 0x40a00000  5.0
 801830c:	edd7 9a05 	vldr	s19, [r7, #20]
 8018310:	4ab1      	ldr	r2, [pc, #708]	@ (80185d8 <iNemoEngine_API_Update+0x2e78>)
 8018312:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8018316:	f7fd bc12 	b.w	8015b3e <iNemoEngine_API_Update+0x3de>
 801831a:	edd7 9a05 	vldr	s19, [r7, #20]
 801831e:	4aaf      	ldr	r2, [pc, #700]	@ (80185dc <iNemoEngine_API_Update+0x2e7c>)
 8018320:	eef0 8a67 	vmov.f32	s17, s15
 8018324:	f7fd bc0b 	b.w	8015b3e <iNemoEngine_API_Update+0x3de>
 8018328:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801832a:	2a00      	cmp	r2, #0
 801832c:	dd0c      	ble.n	8018348 <iNemoEngine_API_Update+0x2be8>
 801832e:	ed9d 6a03 	vldr	s12, [sp, #12]
 8018332:	eef5 7a08 	vmov.f32	s15, #88	@ 0x3ec00000  0.375
 8018336:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801833a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801833e:	dd03      	ble.n	8018348 <iNemoEngine_API_Update+0x2be8>
 8018340:	3a01      	subs	r2, #1
 8018342:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8018344:	f7fe bfe5 	b.w	8017312 <iNemoEngine_API_Update+0x1bb2>
 8018348:	ed9d 6a12 	vldr	s12, [sp, #72]	@ 0x48
 801834c:	eddd 5a0c 	vldr	s11, [sp, #48]	@ 0x30
 8018350:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8018354:	ee26 6a27 	vmul.f32	s12, s12, s15
 8018358:	eef4 5ac6 	vcmpe.f32	s11, s12
 801835c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018360:	f57e afd7 	bpl.w	8017312 <iNemoEngine_API_Update+0x1bb2>
 8018364:	ed9d 6a13 	vldr	s12, [sp, #76]	@ 0x4c
 8018368:	ee66 7a27 	vmul.f32	s15, s12, s15
 801836c:	ed9d 6a16 	vldr	s12, [sp, #88]	@ 0x58
 8018370:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8018374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018378:	f57e afcb 	bpl.w	8017312 <iNemoEngine_API_Update+0x1bb2>
 801837c:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
 8018380:	ed9d 6a14 	vldr	s12, [sp, #80]	@ 0x50
 8018384:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8018388:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801838c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018390:	f341 83ac 	ble.w	8019aec <iNemoEngine_API_Update+0x438c>
 8018394:	3303      	adds	r3, #3
 8018396:	e4f8      	b.n	8017d8a <iNemoEngine_API_Update+0x262a>
 8018398:	ed9f 6a91 	vldr	s12, [pc, #580]	@ 80185e0 <iNemoEngine_API_Update+0x2e80>
 801839c:	eef4 7ac6 	vcmpe.f32	s15, s12
 80183a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183a4:	f57e ae8e 	bpl.w	80170c4 <iNemoEngine_API_Update+0x1964>
 80183a8:	ed9f 6a8e 	vldr	s12, [pc, #568]	@ 80185e4 <iNemoEngine_API_Update+0x2e84>
 80183ac:	eef4 7ac6 	vcmpe.f32	s15, s12
 80183b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183b4:	f280 80b5 	bge.w	8018522 <iNemoEngine_API_Update+0x2dc2>
 80183b8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80183bc:	ed9f 5a8a 	vldr	s10, [pc, #552]	@ 80185e8 <iNemoEngine_API_Update+0x2e88>
 80183c0:	eef4 7ac5 	vcmpe.f32	s15, s10
 80183c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183c8:	f280 80bd 	bge.w	8018546 <iNemoEngine_API_Update+0x2de6>
 80183cc:	ed9f 5a87 	vldr	s10, [pc, #540]	@ 80185ec <iNemoEngine_API_Update+0x2e8c>
 80183d0:	eef4 7ac5 	vcmpe.f32	s15, s10
 80183d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183d8:	f280 80c7 	bge.w	801856a <iNemoEngine_API_Update+0x2e0a>
 80183dc:	ed9f 5a84 	vldr	s10, [pc, #528]	@ 80185f0 <iNemoEngine_API_Update+0x2e90>
 80183e0:	eef4 7ac5 	vcmpe.f32	s15, s10
 80183e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183e8:	f280 80d1 	bge.w	801858e <iNemoEngine_API_Update+0x2e2e>
 80183ec:	ed9f 5a81 	vldr	s10, [pc, #516]	@ 80185f4 <iNemoEngine_API_Update+0x2e94>
 80183f0:	eef4 7ac5 	vcmpe.f32	s15, s10
 80183f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183f8:	f280 80db 	bge.w	80185b2 <iNemoEngine_API_Update+0x2e52>
 80183fc:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8018400:	eef4 7ac5 	vcmpe.f32	s15, s10
 8018404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018408:	db09      	blt.n	801841e <iNemoEngine_API_Update+0x2cbe>
 801840a:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 801840e:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8018412:	eddf 4a79 	vldr	s9, [pc, #484]	@ 80185f8 <iNemoEngine_API_Update+0x2e98>
 8018416:	ed9f 6a79 	vldr	s12, [pc, #484]	@ 80185fc <iNemoEngine_API_Update+0x2e9c>
 801841a:	eea5 6a24 	vfma.f32	s12, s10, s9
 801841e:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8018422:	ee76 4a24 	vadd.f32	s9, s12, s9
 8018426:	eeb0 4a00 	vmov.f32	s8, #0	@ 0x40000000  2.0
 801842a:	ee84 5a24 	vdiv.f32	s10, s8, s9
 801842e:	eddf 4a6d 	vldr	s9, [pc, #436]	@ 80185e4 <iNemoEngine_API_Update+0x2e84>
 8018432:	ed9f 3a73 	vldr	s6, [pc, #460]	@ 8018600 <iNemoEngine_API_Update+0x2ea0>
 8018436:	ed9f 4a6a 	vldr	s8, [pc, #424]	@ 80185e0 <iNemoEngine_API_Update+0x2e80>
 801843a:	eeb4 5ae4 	vcmpe.f32	s10, s9
 801843e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018442:	bfb8      	it	lt
 8018444:	eeb0 5a64 	vmovlt.f32	s10, s9
 8018448:	eef4 7ac3 	vcmpe.f32	s15, s6
 801844c:	eddf 4a6d 	vldr	s9, [pc, #436]	@ 8018604 <iNemoEngine_API_Update+0x2ea4>
 8018450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018454:	ee65 4a24 	vmul.f32	s9, s10, s9
 8018458:	ee65 3a04 	vmul.f32	s7, s10, s8
 801845c:	f141 810f 	bpl.w	801967e <iNemoEngine_API_Update+0x3f1e>
 8018460:	eef4 7ac4 	vcmpe.f32	s15, s8
 8018464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018468:	f2c1 810f 	blt.w	801968a <iNemoEngine_API_Update+0x3f2a>
 801846c:	ed9f 4a5d 	vldr	s8, [pc, #372]	@ 80185e4 <iNemoEngine_API_Update+0x2e84>
 8018470:	eef4 7ac4 	vcmpe.f32	s15, s8
 8018474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018478:	f141 8112 	bpl.w	80196a0 <iNemoEngine_API_Update+0x3f40>
 801847c:	ed9f 4a58 	vldr	s8, [pc, #352]	@ 80185e0 <iNemoEngine_API_Update+0x2e80>
 8018480:	ed9f 3a61 	vldr	s6, [pc, #388]	@ 8018608 <iNemoEngine_API_Update+0x2ea8>
 8018484:	ee37 4ac4 	vsub.f32	s8, s15, s8
 8018488:	eef7 9a00 	vmov.f32	s19, #112	@ 0x3f800000  1.0
 801848c:	eee4 9a03 	vfma.f32	s19, s8, s6
 8018490:	ed9f 4a55 	vldr	s8, [pc, #340]	@ 80185e8 <iNemoEngine_API_Update+0x2e88>
 8018494:	eef4 7ac4 	vcmpe.f32	s15, s8
 8018498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801849c:	f2c1 8112 	blt.w	80196c4 <iNemoEngine_API_Update+0x3f64>
 80184a0:	ed9f 4a52 	vldr	s8, [pc, #328]	@ 80185ec <iNemoEngine_API_Update+0x2e8c>
 80184a4:	eef4 7ac4 	vcmpe.f32	s15, s8
 80184a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184ac:	f141 8112 	bpl.w	80196d4 <iNemoEngine_API_Update+0x3f74>
 80184b0:	ed9f 4a4d 	vldr	s8, [pc, #308]	@ 80185e8 <iNemoEngine_API_Update+0x2e88>
 80184b4:	ed9f 3a55 	vldr	s6, [pc, #340]	@ 801860c <iNemoEngine_API_Update+0x2eac>
 80184b8:	eddf 9a55 	vldr	s19, [pc, #340]	@ 8018610 <iNemoEngine_API_Update+0x2eb0>
 80184bc:	ee37 4ac4 	vsub.f32	s8, s15, s8
 80184c0:	eee4 9a03 	vfma.f32	s19, s8, s6
 80184c4:	ed9f 4a4a 	vldr	s8, [pc, #296]	@ 80185f0 <iNemoEngine_API_Update+0x2e90>
 80184c8:	eef4 7ac4 	vcmpe.f32	s15, s8
 80184cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184d0:	f2c1 8112 	blt.w	80196f8 <iNemoEngine_API_Update+0x3f98>
 80184d4:	ed9f 4a47 	vldr	s8, [pc, #284]	@ 80185f4 <iNemoEngine_API_Update+0x2e94>
 80184d8:	eef4 7ac4 	vcmpe.f32	s15, s8
 80184dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184e0:	f141 8112 	bpl.w	8019708 <iNemoEngine_API_Update+0x3fa8>
 80184e4:	ed9f 4a42 	vldr	s8, [pc, #264]	@ 80185f0 <iNemoEngine_API_Update+0x2e90>
 80184e8:	ed9f 3a4a 	vldr	s6, [pc, #296]	@ 8018614 <iNemoEngine_API_Update+0x2eb4>
 80184ec:	ee37 4ac4 	vsub.f32	s8, s15, s8
 80184f0:	eef7 9a0c 	vmov.f32	s19, #124	@ 0x3fe00000  1.750
 80184f4:	eee4 9a03 	vfma.f32	s19, s8, s6
 80184f8:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 80184fc:	eef4 7ac4 	vcmpe.f32	s15, s8
 8018500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018504:	db09      	blt.n	801851a <iNemoEngine_API_Update+0x2dba>
 8018506:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 801850a:	ee37 4ac4 	vsub.f32	s8, s15, s8
 801850e:	ed9f 3a42 	vldr	s6, [pc, #264]	@ 8018618 <iNemoEngine_API_Update+0x2eb8>
 8018512:	eddf 9a42 	vldr	s19, [pc, #264]	@ 801861c <iNemoEngine_API_Update+0x2ebc>
 8018516:	eee4 9a03 	vfma.f32	s19, s8, s6
 801851a:	ee68 8aa9 	vmul.f32	s17, s17, s19
 801851e:	f7fe be19 	b.w	8017154 <iNemoEngine_API_Update+0x19f4>
 8018522:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 80185e8 <iNemoEngine_API_Update+0x2e88>
 8018526:	eef4 7ac6 	vcmpe.f32	s15, s12
 801852a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801852e:	d50a      	bpl.n	8018546 <iNemoEngine_API_Update+0x2de6>
 8018530:	ed9f 5a2c 	vldr	s10, [pc, #176]	@ 80185e4 <iNemoEngine_API_Update+0x2e84>
 8018534:	eddf 4a3a 	vldr	s9, [pc, #232]	@ 8018620 <iNemoEngine_API_Update+0x2ec0>
 8018538:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8018624 <iNemoEngine_API_Update+0x2ec4>
 801853c:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8018540:	eea5 6a24 	vfma.f32	s12, s10, s9
 8018544:	e742      	b.n	80183cc <iNemoEngine_API_Update+0x2c6c>
 8018546:	ed9f 6a29 	vldr	s12, [pc, #164]	@ 80185ec <iNemoEngine_API_Update+0x2e8c>
 801854a:	eef4 7ac6 	vcmpe.f32	s15, s12
 801854e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018552:	d50a      	bpl.n	801856a <iNemoEngine_API_Update+0x2e0a>
 8018554:	ed9f 5a24 	vldr	s10, [pc, #144]	@ 80185e8 <iNemoEngine_API_Update+0x2e88>
 8018558:	eddf 4a33 	vldr	s9, [pc, #204]	@ 8018628 <iNemoEngine_API_Update+0x2ec8>
 801855c:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8018560:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8018564:	eea5 6a24 	vfma.f32	s12, s10, s9
 8018568:	e738      	b.n	80183dc <iNemoEngine_API_Update+0x2c7c>
 801856a:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 80185f0 <iNemoEngine_API_Update+0x2e90>
 801856e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8018572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018576:	d50a      	bpl.n	801858e <iNemoEngine_API_Update+0x2e2e>
 8018578:	ed9f 5a1c 	vldr	s10, [pc, #112]	@ 80185ec <iNemoEngine_API_Update+0x2e8c>
 801857c:	eddf 4a2b 	vldr	s9, [pc, #172]	@ 801862c <iNemoEngine_API_Update+0x2ecc>
 8018580:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8018584:	eeb1 6a04 	vmov.f32	s12, #20	@ 0x40a00000  5.0
 8018588:	eea5 6a24 	vfma.f32	s12, s10, s9
 801858c:	e72e      	b.n	80183ec <iNemoEngine_API_Update+0x2c8c>
 801858e:	ed9f 6a19 	vldr	s12, [pc, #100]	@ 80185f4 <iNemoEngine_API_Update+0x2e94>
 8018592:	eef4 7ac6 	vcmpe.f32	s15, s12
 8018596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801859a:	d50a      	bpl.n	80185b2 <iNemoEngine_API_Update+0x2e52>
 801859c:	ed9f 5a14 	vldr	s10, [pc, #80]	@ 80185f0 <iNemoEngine_API_Update+0x2e90>
 80185a0:	eddf 4a23 	vldr	s9, [pc, #140]	@ 8018630 <iNemoEngine_API_Update+0x2ed0>
 80185a4:	ee37 5ac5 	vsub.f32	s10, s15, s10
 80185a8:	eeb2 6a0a 	vmov.f32	s12, #42	@ 0x41500000  13.0
 80185ac:	eea5 6a24 	vfma.f32	s12, s10, s9
 80185b0:	e724      	b.n	80183fc <iNemoEngine_API_Update+0x2c9c>
 80185b2:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80185b6:	eef4 7ac6 	vcmpe.f32	s15, s12
 80185ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185be:	f57f af24 	bpl.w	801840a <iNemoEngine_API_Update+0x2caa>
 80185c2:	ed9f 5a0c 	vldr	s10, [pc, #48]	@ 80185f4 <iNemoEngine_API_Update+0x2e94>
 80185c6:	eddf 4a1b 	vldr	s9, [pc, #108]	@ 8018634 <iNemoEngine_API_Update+0x2ed4>
 80185ca:	ed9f 6a1b 	vldr	s12, [pc, #108]	@ 8018638 <iNemoEngine_API_Update+0x2ed8>
 80185ce:	ee37 5ac5 	vsub.f32	s10, s15, s10
 80185d2:	eea5 6a24 	vfma.f32	s12, s10, s9
 80185d6:	e722      	b.n	801841e <iNemoEngine_API_Update+0x2cbe>
 80185d8:	3727c5ac 	.word	0x3727c5ac
 80185dc:	3ac49ba6 	.word	0x3ac49ba6
 80185e0:	3c23d70a 	.word	0x3c23d70a
 80185e4:	3c75c28f 	.word	0x3c75c28f
 80185e8:	3cf5c28f 	.word	0x3cf5c28f
 80185ec:	3d4ccccd 	.word	0x3d4ccccd
 80185f0:	3dcccccd 	.word	0x3dcccccd
 80185f4:	3e4ccccd 	.word	0x3e4ccccd
 80185f8:	47179000 	.word	0x47179000
 80185fc:	4415c000 	.word	0x4415c000
 8018600:	3ba3d70a 	.word	0x3ba3d70a
 8018604:	3b449ba6 	.word	0x3b449ba6
 8018608:	411ffff6 	.word	0x411ffff6
 801860c:	418c0000 	.word	0x418c0000
 8018610:	3f933333 	.word	0x3f933333
 8018614:	42af0000 	.word	0x42af0000
 8018618:	43480000 	.word	0x43480000
 801861c:	424a0000 	.word	0x424a0000
 8018620:	41d55556 	.word	0x41d55556
 8018624:	3fcccccd 	.word	0x3fcccccd
 8018628:	4315ffff 	.word	0x4315ffff
 801862c:	43200000 	.word	0x43200000
 8018630:	44848000 	.word	0x44848000
 8018634:	44c80000 	.word	0x44c80000
 8018638:	42ee0000 	.word	0x42ee0000
 801863c:	2000      	movs	r0, #0
 801863e:	f887 0318 	strb.w	r0, [r7, #792]	@ 0x318
 8018642:	f207 40b4 	addw	r0, r7, #1204	@ 0x4b4
 8018646:	49d7      	ldr	r1, [pc, #860]	@ (80189a4 <iNemoEngine_API_Update+0x3244>)
 8018648:	6001      	str	r1, [r0, #0]
 801864a:	f207 7b94 	addw	fp, r7, #1940	@ 0x794
 801864e:	f207 6124 	addw	r1, r7, #1572	@ 0x624
 8018652:	4ad5      	ldr	r2, [pc, #852]	@ (80189a8 <iNemoEngine_API_Update+0x3248>)
 8018654:	4bd5      	ldr	r3, [pc, #852]	@ (80189ac <iNemoEngine_API_Update+0x324c>)
 8018656:	600a      	str	r2, [r1, #0]
 8018658:	f8cb 3000 	str.w	r3, [fp]
 801865c:	f897 64b1 	ldrb.w	r6, [r7, #1201]	@ 0x4b1
 8018660:	9005      	str	r0, [sp, #20]
 8018662:	9106      	str	r1, [sp, #24]
 8018664:	2e00      	cmp	r6, #0
 8018666:	f001 82f7 	beq.w	8019c58 <iNemoEngine_API_Update+0x44f8>
 801866a:	eddf 7ad1 	vldr	s15, [pc, #836]	@ 80189b0 <iNemoEngine_API_Update+0x3250>
 801866e:	ee69 da27 	vmul.f32	s27, s18, s15
 8018672:	eef6 9a00 	vmov.f32	s19, #96	@ 0x3f000000  0.5
 8018676:	ee28 ea27 	vmul.f32	s28, s16, s15
 801867a:	ee6e aaa7 	vmul.f32	s21, s29, s15
 801867e:	ee7d 7ae9 	vsub.f32	s15, s27, s19
 8018682:	f507 6597 	add.w	r5, r7, #1208	@ 0x4b8
 8018686:	ee17 0a90 	vmov	r0, s15
 801868a:	f7e7 ff85 	bl	8000598 <__aeabi_f2d>
 801868e:	ee7d 7aa9 	vadd.f32	s15, s27, s19
 8018692:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8018696:	ee17 0a90 	vmov	r0, s15
 801869a:	f7e7 ff7d 	bl	8000598 <__aeabi_f2d>
 801869e:	ee7e 7a69 	vsub.f32	s15, s28, s19
 80186a2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80186a6:	ee17 0a90 	vmov	r0, s15
 80186aa:	f7e7 ff75 	bl	8000598 <__aeabi_f2d>
 80186ae:	ee7e 7a29 	vadd.f32	s15, s28, s19
 80186b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80186b6:	ee17 0a90 	vmov	r0, s15
 80186ba:	f7e7 ff6d 	bl	8000598 <__aeabi_f2d>
 80186be:	ee7a 7ae9 	vsub.f32	s15, s21, s19
 80186c2:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80186c6:	ee17 0a90 	vmov	r0, s15
 80186ca:	f7e7 ff65 	bl	8000598 <__aeabi_f2d>
 80186ce:	ee7a 7aa9 	vadd.f32	s15, s21, s19
 80186d2:	4602      	mov	r2, r0
 80186d4:	460b      	mov	r3, r1
 80186d6:	ee17 0a90 	vmov	r0, s15
 80186da:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 80186de:	f7e7 ff5b 	bl	8000598 <__aeabi_f2d>
 80186e2:	230c      	movs	r3, #12
 80186e4:	eef0 7aea 	vabs.f32	s15, s21
 80186e8:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 80186ec:	eddf 9ab1 	vldr	s19, [pc, #708]	@ 80189b4 <iNemoEngine_API_Update+0x3254>
 80186f0:	edcd 7a03 	vstr	s15, [sp, #12]
 80186f4:	fb13 5606 	smlabb	r6, r3, r6, r5
 80186f8:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 80186fc:	eef0 caed 	vabs.f32	s25, s27
 8018700:	eeb0 bace 	vabs.f32	s22, s28
 8018704:	46aa      	mov	sl, r5
 8018706:	e060      	b.n	80187ca <iNemoEngine_API_Update+0x306a>
 8018708:	eddf 7aab 	vldr	s15, [pc, #684]	@ 80189b8 <iNemoEngine_API_Update+0x3258>
 801870c:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8018710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018714:	f280 815a 	bge.w	80189cc <iNemoEngine_API_Update+0x326c>
 8018718:	eddf 7aa8 	vldr	s15, [pc, #672]	@ 80189bc <iNemoEngine_API_Update+0x325c>
 801871c:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8018720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018724:	f300 816a 	bgt.w	80189fc <iNemoEngine_API_Update+0x329c>
 8018728:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801872c:	f004 fd40 	bl	801d1b0 <ceil>
 8018730:	ec51 0b10 	vmov	r0, r1, d0
 8018734:	f7e8 fa60 	bl	8000bf8 <__aeabi_d2f>
 8018738:	4603      	mov	r3, r0
 801873a:	eeb4 bae9 	vcmpe.f32	s22, s19
 801873e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018742:	f8ca 3000 	str.w	r3, [sl]
 8018746:	d54e      	bpl.n	80187e6 <iNemoEngine_API_Update+0x3086>
 8018748:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 80189b8 <iNemoEngine_API_Update+0x3258>
 801874c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018754:	f280 811b 	bge.w	801898e <iNemoEngine_API_Update+0x322e>
 8018758:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80189bc <iNemoEngine_API_Update+0x325c>
 801875c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018764:	f300 8148 	bgt.w	80189f8 <iNemoEngine_API_Update+0x3298>
 8018768:	ed9d 0b0e 	vldr	d0, [sp, #56]	@ 0x38
 801876c:	f004 fd20 	bl	801d1b0 <ceil>
 8018770:	ec51 0b10 	vmov	r0, r1, d0
 8018774:	f7e8 fa40 	bl	8000bf8 <__aeabi_d2f>
 8018778:	4603      	mov	r3, r0
 801877a:	eddd 7a03 	vldr	s15, [sp, #12]
 801877e:	f8ca 3004 	str.w	r3, [sl, #4]
 8018782:	eef4 7ae9 	vcmpe.f32	s15, s19
 8018786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801878a:	d52f      	bpl.n	80187ec <iNemoEngine_API_Update+0x308c>
 801878c:	eddf 7a8a 	vldr	s15, [pc, #552]	@ 80189b8 <iNemoEngine_API_Update+0x3258>
 8018790:	eef4 eae7 	vcmpe.f32	s29, s15
 8018794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018798:	f280 8122 	bge.w	80189e0 <iNemoEngine_API_Update+0x3280>
 801879c:	eddf 7a87 	vldr	s15, [pc, #540]	@ 80189bc <iNemoEngine_API_Update+0x325c>
 80187a0:	eef4 eae7 	vcmpe.f32	s29, s15
 80187a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187a8:	f300 8124 	bgt.w	80189f4 <iNemoEngine_API_Update+0x3294>
 80187ac:	ed9d 0b16 	vldr	d0, [sp, #88]	@ 0x58
 80187b0:	f004 fcfe 	bl	801d1b0 <ceil>
 80187b4:	ec51 0b10 	vmov	r0, r1, d0
 80187b8:	f7e8 fa1e 	bl	8000bf8 <__aeabi_d2f>
 80187bc:	4603      	mov	r3, r0
 80187be:	f8ca 3008 	str.w	r3, [sl, #8]
 80187c2:	f10a 0a0c 	add.w	sl, sl, #12
 80187c6:	45b2      	cmp	sl, r6
 80187c8:	d018      	beq.n	80187fc <iNemoEngine_API_Update+0x309c>
 80187ca:	eef4 cae9 	vcmpe.f32	s25, s19
 80187ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187d2:	d499      	bmi.n	8018708 <iNemoEngine_API_Update+0x2fa8>
 80187d4:	ee1d 3a90 	vmov	r3, s27
 80187d8:	eeb4 bae9 	vcmpe.f32	s22, s19
 80187dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187e0:	f8ca 3000 	str.w	r3, [sl]
 80187e4:	d4b0      	bmi.n	8018748 <iNemoEngine_API_Update+0x2fe8>
 80187e6:	ee1e 3a10 	vmov	r3, s28
 80187ea:	e7c6      	b.n	801877a <iNemoEngine_API_Update+0x301a>
 80187ec:	ee1a 3a90 	vmov	r3, s21
 80187f0:	f10a 0a0c 	add.w	sl, sl, #12
 80187f4:	f84a 3c04 	str.w	r3, [sl, #-4]
 80187f8:	45b2      	cmp	sl, r6
 80187fa:	d1e6      	bne.n	80187ca <iNemoEngine_API_Update+0x306a>
 80187fc:	f897 a621 	ldrb.w	sl, [r7, #1569]	@ 0x621
 8018800:	f507 66c5 	add.w	r6, r7, #1576	@ 0x628
 8018804:	f1ba 0f00 	cmp.w	sl, #0
 8018808:	f000 81ff 	beq.w	8018c0a <iNemoEngine_API_Update+0x34aa>
 801880c:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 80189c0 <iNemoEngine_API_Update+0x3260>
 8018810:	ee6c da27 	vmul.f32	s27, s24, s15
 8018814:	eef6 9a00 	vmov.f32	s19, #96	@ 0x3f000000  0.5
 8018818:	ee2d ea27 	vmul.f32	s28, s26, s15
 801881c:	ee6b aaa7 	vmul.f32	s21, s23, s15
 8018820:	ee7d 7ae9 	vsub.f32	s15, s27, s19
 8018824:	f507 66c5 	add.w	r6, r7, #1576	@ 0x628
 8018828:	ee17 0a90 	vmov	r0, s15
 801882c:	f7e7 feb4 	bl	8000598 <__aeabi_f2d>
 8018830:	ee7d 7aa9 	vadd.f32	s15, s27, s19
 8018834:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8018838:	ee17 0a90 	vmov	r0, s15
 801883c:	f7e7 feac 	bl	8000598 <__aeabi_f2d>
 8018840:	ee7e 7a69 	vsub.f32	s15, s28, s19
 8018844:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8018848:	ee17 0a90 	vmov	r0, s15
 801884c:	f7e7 fea4 	bl	8000598 <__aeabi_f2d>
 8018850:	ee7e 7a29 	vadd.f32	s15, s28, s19
 8018854:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8018858:	ee17 0a90 	vmov	r0, s15
 801885c:	f7e7 fe9c 	bl	8000598 <__aeabi_f2d>
 8018860:	ee7a 7ae9 	vsub.f32	s15, s21, s19
 8018864:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8018868:	ee17 0a90 	vmov	r0, s15
 801886c:	f7e7 fe94 	bl	8000598 <__aeabi_f2d>
 8018870:	ee7a 7aa9 	vadd.f32	s15, s21, s19
 8018874:	4602      	mov	r2, r0
 8018876:	460b      	mov	r3, r1
 8018878:	ee17 0a90 	vmov	r0, s15
 801887c:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8018880:	f7e7 fe8a 	bl	8000598 <__aeabi_f2d>
 8018884:	230c      	movs	r3, #12
 8018886:	eef0 7aea 	vabs.f32	s15, s21
 801888a:	fb13 690a 	smlabb	r9, r3, sl, r6
 801888e:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 8018892:	eddf 9a48 	vldr	s19, [pc, #288]	@ 80189b4 <iNemoEngine_API_Update+0x3254>
 8018896:	edcd 7a03 	vstr	s15, [sp, #12]
 801889a:	eef0 caed 	vabs.f32	s25, s27
 801889e:	eeb0 bace 	vabs.f32	s22, s28
 80188a2:	46b2      	mov	sl, r6
 80188a4:	e062      	b.n	801896c <iNemoEngine_API_Update+0x320c>
 80188a6:	eddf 7a47 	vldr	s15, [pc, #284]	@ 80189c4 <iNemoEngine_API_Update+0x3264>
 80188aa:	eeb4 cae7 	vcmpe.f32	s24, s15
 80188ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188b2:	f280 82d3 	bge.w	8018e5c <iNemoEngine_API_Update+0x36fc>
 80188b6:	eddf 7a44 	vldr	s15, [pc, #272]	@ 80189c8 <iNemoEngine_API_Update+0x3268>
 80188ba:	eeb4 cae7 	vcmpe.f32	s24, s15
 80188be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188c2:	f300 82e5 	bgt.w	8018e90 <iNemoEngine_API_Update+0x3730>
 80188c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80188ca:	f004 fc71 	bl	801d1b0 <ceil>
 80188ce:	ec51 0b10 	vmov	r0, r1, d0
 80188d2:	f7e8 f991 	bl	8000bf8 <__aeabi_d2f>
 80188d6:	4603      	mov	r3, r0
 80188d8:	eeb4 bae9 	vcmpe.f32	s22, s19
 80188dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188e0:	f8ca 3000 	str.w	r3, [sl]
 80188e4:	d550      	bpl.n	8018988 <iNemoEngine_API_Update+0x3228>
 80188e6:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80189c4 <iNemoEngine_API_Update+0x3264>
 80188ea:	eeb4 dae7 	vcmpe.f32	s26, s15
 80188ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188f2:	f280 82a9 	bge.w	8018e48 <iNemoEngine_API_Update+0x36e8>
 80188f6:	eddf 7a34 	vldr	s15, [pc, #208]	@ 80189c8 <iNemoEngine_API_Update+0x3268>
 80188fa:	eeb4 dae7 	vcmpe.f32	s26, s15
 80188fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018902:	f300 82c2 	bgt.w	8018e8a <iNemoEngine_API_Update+0x372a>
 8018906:	ed9d 0b0e 	vldr	d0, [sp, #56]	@ 0x38
 801890a:	f004 fc51 	bl	801d1b0 <ceil>
 801890e:	ec51 0b10 	vmov	r0, r1, d0
 8018912:	f7e8 f971 	bl	8000bf8 <__aeabi_d2f>
 8018916:	4603      	mov	r3, r0
 8018918:	eddd 7a03 	vldr	s15, [sp, #12]
 801891c:	f8ca 3004 	str.w	r3, [sl, #4]
 8018920:	eef4 7ae9 	vcmpe.f32	s15, s19
 8018924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018928:	f140 8166 	bpl.w	8018bf8 <iNemoEngine_API_Update+0x3498>
 801892c:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80189c4 <iNemoEngine_API_Update+0x3264>
 8018930:	eef4 bae7 	vcmpe.f32	s23, s15
 8018934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018938:	f280 829a 	bge.w	8018e70 <iNemoEngine_API_Update+0x3710>
 801893c:	eddf 7a22 	vldr	s15, [pc, #136]	@ 80189c8 <iNemoEngine_API_Update+0x3268>
 8018940:	eef4 bae7 	vcmpe.f32	s23, s15
 8018944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018948:	f300 829c 	bgt.w	8018e84 <iNemoEngine_API_Update+0x3724>
 801894c:	ed9d 0b16 	vldr	d0, [sp, #88]	@ 0x58
 8018950:	f004 fc2e 	bl	801d1b0 <ceil>
 8018954:	ec51 0b10 	vmov	r0, r1, d0
 8018958:	f7e8 f94e 	bl	8000bf8 <__aeabi_d2f>
 801895c:	4603      	mov	r3, r0
 801895e:	f8ca 3008 	str.w	r3, [sl, #8]
 8018962:	f10a 0a0c 	add.w	sl, sl, #12
 8018966:	45ca      	cmp	sl, r9
 8018968:	f000 814f 	beq.w	8018c0a <iNemoEngine_API_Update+0x34aa>
 801896c:	eef4 cae9 	vcmpe.f32	s25, s19
 8018970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018974:	d497      	bmi.n	80188a6 <iNemoEngine_API_Update+0x3146>
 8018976:	ee1d 3a90 	vmov	r3, s27
 801897a:	eeb4 bae9 	vcmpe.f32	s22, s19
 801897e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018982:	f8ca 3000 	str.w	r3, [sl]
 8018986:	d4ae      	bmi.n	80188e6 <iNemoEngine_API_Update+0x3186>
 8018988:	ee1e 3a10 	vmov	r3, s28
 801898c:	e7c4      	b.n	8018918 <iNemoEngine_API_Update+0x31b8>
 801898e:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8018992:	f004 fc89 	bl	801d2a8 <floor>
 8018996:	ec51 0b10 	vmov	r0, r1, d0
 801899a:	f7e8 f92d 	bl	8000bf8 <__aeabi_d2f>
 801899e:	4603      	mov	r3, r0
 80189a0:	e6eb      	b.n	801877a <iNemoEngine_API_Update+0x301a>
 80189a2:	bf00      	nop
 80189a4:	3a7001e0 	.word	0x3a7001e0
 80189a8:	3a000100 	.word	0x3a000100
 80189ac:	3a8c0118 	.word	0x3a8c0118
 80189b0:	44888777 	.word	0x44888777
 80189b4:	4b000000 	.word	0x4b000000
 80189b8:	39f001e1 	.word	0x39f001e1
 80189bc:	b9f001e1 	.word	0xb9f001e1
 80189c0:	44fffe00 	.word	0x44fffe00
 80189c4:	39800100 	.word	0x39800100
 80189c8:	b9800100 	.word	0xb9800100
 80189cc:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80189d0:	f004 fc6a 	bl	801d2a8 <floor>
 80189d4:	ec51 0b10 	vmov	r0, r1, d0
 80189d8:	f7e8 f90e 	bl	8000bf8 <__aeabi_d2f>
 80189dc:	4603      	mov	r3, r0
 80189de:	e6ac      	b.n	801873a <iNemoEngine_API_Update+0x2fda>
 80189e0:	ed9d 0b18 	vldr	d0, [sp, #96]	@ 0x60
 80189e4:	f004 fc60 	bl	801d2a8 <floor>
 80189e8:	ec51 0b10 	vmov	r0, r1, d0
 80189ec:	f7e8 f904 	bl	8000bf8 <__aeabi_d2f>
 80189f0:	4603      	mov	r3, r0
 80189f2:	e6e4      	b.n	80187be <iNemoEngine_API_Update+0x305e>
 80189f4:	464b      	mov	r3, r9
 80189f6:	e6e2      	b.n	80187be <iNemoEngine_API_Update+0x305e>
 80189f8:	464b      	mov	r3, r9
 80189fa:	e6be      	b.n	801877a <iNemoEngine_API_Update+0x301a>
 80189fc:	464b      	mov	r3, r9
 80189fe:	e69c      	b.n	801873a <iNemoEngine_API_Update+0x2fda>
 8018a00:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8018a04:	4bb1      	ldr	r3, [pc, #708]	@ (8018ccc <iNemoEngine_API_Update+0x356c>)
 8018a06:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8018a0a:	2100      	movs	r1, #0
 8018a0c:	f8c7 51cc 	str.w	r5, [r7, #460]	@ 0x1cc
 8018a10:	f8c7 51d0 	str.w	r5, [r7, #464]	@ 0x1d0
 8018a14:	f887 11ac 	strb.w	r1, [r7, #428]	@ 0x1ac
 8018a18:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8018a1c:	f507 70ea 	add.w	r0, r7, #468	@ 0x1d4
 8018a20:	f007 f9b9 	bl	801fd96 <memset>
 8018a24:	ed97 6a02 	vldr	s12, [r7, #8]
 8018a28:	eddf 7aa9 	vldr	s15, [pc, #676]	@ 8018cd0 <iNemoEngine_API_Update+0x3570>
 8018a2c:	eddf 5aa9 	vldr	s11, [pc, #676]	@ 8018cd4 <iNemoEngine_API_Update+0x3574>
 8018a30:	ed9f 5aa9 	vldr	s10, [pc, #676]	@ 8018cd8 <iNemoEngine_API_Update+0x3578>
 8018a34:	eddf 3aa9 	vldr	s7, [pc, #676]	@ 8018cdc <iNemoEngine_API_Update+0x357c>
 8018a38:	ed9f 4aa9 	vldr	s8, [pc, #676]	@ 8018ce0 <iNemoEngine_API_Update+0x3580>
 8018a3c:	f8c7 50c4 	str.w	r5, [r7, #196]	@ 0xc4
 8018a40:	ee66 7a27 	vmul.f32	s15, s12, s15
 8018a44:	2300      	movs	r3, #0
 8018a46:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
 8018a4a:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8018ce4 <iNemoEngine_API_Update+0x3584>
 8018a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8018a52:	ee66 7a27 	vmul.f32	s15, s12, s15
 8018a56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8018a5a:	edc7 7a4e 	vstr	s15, [r7, #312]	@ 0x138
 8018a5e:	eddf 7aa2 	vldr	s15, [pc, #648]	@ 8018ce8 <iNemoEngine_API_Update+0x3588>
 8018a62:	4ba2      	ldr	r3, [pc, #648]	@ (8018cec <iNemoEngine_API_Update+0x358c>)
 8018a64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8018a68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8018a6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8018a70:	edc7 7a50 	vstr	s15, [r7, #320]	@ 0x140
 8018a74:	eddf 7a9e 	vldr	s15, [pc, #632]	@ 8018cf0 <iNemoEngine_API_Update+0x3590>
 8018a78:	4b9e      	ldr	r3, [pc, #632]	@ (8018cf4 <iNemoEngine_API_Update+0x3594>)
 8018a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8018a7e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8018a82:	4b9d      	ldr	r3, [pc, #628]	@ (8018cf8 <iNemoEngine_API_Update+0x3598>)
 8018a84:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0
 8018a88:	eddf 7a9c 	vldr	s15, [pc, #624]	@ 8018cfc <iNemoEngine_API_Update+0x359c>
 8018a8c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8018a90:	ee66 7a27 	vmul.f32	s15, s12, s15
 8018a94:	4b9a      	ldr	r3, [pc, #616]	@ (8018d00 <iNemoEngine_API_Update+0x35a0>)
 8018a96:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148
 8018a9a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8018a9e:	eddf 7a99 	vldr	s15, [pc, #612]	@ 8018d04 <iNemoEngine_API_Update+0x35a4>
 8018aa2:	4b99      	ldr	r3, [pc, #612]	@ (8018d08 <iNemoEngine_API_Update+0x35a8>)
 8018aa4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8018aa8:	4b98      	ldr	r3, [pc, #608]	@ (8018d0c <iNemoEngine_API_Update+0x35ac>)
 8018aaa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8018aae:	ee66 5a25 	vmul.f32	s11, s12, s11
 8018ab2:	4b97      	ldr	r3, [pc, #604]	@ (8018d10 <iNemoEngine_API_Update+0x35b0>)
 8018ab4:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8018ab8:	ee26 5a05 	vmul.f32	s10, s12, s10
 8018abc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8018ac0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 8018ac4:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8018ac8:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8018acc:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 8018ad0:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8018ad4:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 8018ad8:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8018adc:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 8018ae0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8018ae4:	f8c7 512c 	str.w	r5, [r7, #300]	@ 0x12c
 8018ae8:	f8c7 50cc 	str.w	r5, [r7, #204]	@ 0xcc
 8018aec:	f8c7 5134 	str.w	r5, [r7, #308]	@ 0x134
 8018af0:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8
 8018af4:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8018d14 <iNemoEngine_API_Update+0x35b4>
 8018af8:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8018d18 <iNemoEngine_API_Update+0x35b8>
 8018afc:	eddf 7a87 	vldr	s15, [pc, #540]	@ 8018d1c <iNemoEngine_API_Update+0x35bc>
 8018b00:	eddf 4a87 	vldr	s9, [pc, #540]	@ 8018d20 <iNemoEngine_API_Update+0x35c0>
 8018b04:	edc7 5a32 	vstr	s11, [r7, #200]	@ 0xc8
 8018b08:	edc7 5a4c 	vstr	s11, [r7, #304]	@ 0x130
 8018b0c:	ed87 5a36 	vstr	s10, [r7, #216]	@ 0xd8
 8018b10:	ed87 5a54 	vstr	s10, [r7, #336]	@ 0x150
 8018b14:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8018b18:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8018b1c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8018b20:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 8018b24:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 8018b28:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8018b2c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8018b30:	ee66 6a26 	vmul.f32	s13, s12, s13
 8018b34:	ee26 7a07 	vmul.f32	s14, s12, s14
 8018b38:	ee66 7a27 	vmul.f32	s15, s12, s15
 8018b3c:	ee66 2a23 	vmul.f32	s5, s12, s7
 8018b40:	ee26 3a02 	vmul.f32	s6, s12, s4
 8018b44:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8018b48:	ee66 4a24 	vmul.f32	s9, s12, s9
 8018b4c:	4b75      	ldr	r3, [pc, #468]	@ (8018d24 <iNemoEngine_API_Update+0x35c4>)
 8018b4e:	4a76      	ldr	r2, [pc, #472]	@ (8018d28 <iNemoEngine_API_Update+0x35c8>)
 8018b50:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8018b54:	ee66 1a04 	vmul.f32	s3, s12, s8
 8018b58:	4b74      	ldr	r3, [pc, #464]	@ (8018d2c <iNemoEngine_API_Update+0x35cc>)
 8018b5a:	f8df e1ec 	ldr.w	lr, [pc, #492]	@ 8018d48 <iNemoEngine_API_Update+0x35e8>
 8018b5e:	f8df c1ec 	ldr.w	ip, [pc, #492]	@ 8018d4c <iNemoEngine_API_Update+0x35ec>
 8018b62:	4e73      	ldr	r6, [pc, #460]	@ (8018d30 <iNemoEngine_API_Update+0x35d0>)
 8018b64:	4d73      	ldr	r5, [pc, #460]	@ (8018d34 <iNemoEngine_API_Update+0x35d4>)
 8018b66:	4874      	ldr	r0, [pc, #464]	@ (8018d38 <iNemoEngine_API_Update+0x35d8>)
 8018b68:	4974      	ldr	r1, [pc, #464]	@ (8018d3c <iNemoEngine_API_Update+0x35dc>)
 8018b6a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8018b6e:	edc7 3a3d 	vstr	s7, [r7, #244]	@ 0xf4
 8018b72:	f8c7 e15c 	str.w	lr, [r7, #348]	@ 0x15c
 8018b76:	f8c7 c0fc 	str.w	ip, [r7, #252]	@ 0xfc
 8018b7a:	f8c7 6164 	str.w	r6, [r7, #356]	@ 0x164
 8018b7e:	f8c7 516c 	str.w	r5, [r7, #364]	@ 0x16c
 8018b82:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
 8018b86:	edc7 1a46 	vstr	s3, [r7, #280]	@ 0x118
 8018b8a:	edc7 4a60 	vstr	s9, [r7, #384]	@ 0x180
 8018b8e:	f8c7 119c 	str.w	r1, [r7, #412]	@ 0x19c
 8018b92:	ed87 2a66 	vstr	s4, [r7, #408]	@ 0x198
 8018b96:	ed87 4a65 	vstr	s8, [r7, #404]	@ 0x194
 8018b9a:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8018b9e:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8018ba2:	edc7 6a3c 	vstr	s13, [r7, #240]	@ 0xf0
 8018ba6:	edc7 6a56 	vstr	s13, [r7, #344]	@ 0x158
 8018baa:	ed87 7a3e 	vstr	s14, [r7, #248]	@ 0xf8
 8018bae:	ed87 7a58 	vstr	s14, [r7, #352]	@ 0x160
 8018bb2:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
 8018bb6:	edc7 7a5a 	vstr	s15, [r7, #360]	@ 0x168
 8018bba:	edc7 2a42 	vstr	s5, [r7, #264]	@ 0x108
 8018bbe:	edc7 2a5c 	vstr	s5, [r7, #368]	@ 0x170
 8018bc2:	ed87 3a44 	vstr	s6, [r7, #272]	@ 0x110
 8018bc6:	ed87 3a5e 	vstr	s6, [r7, #376]	@ 0x178
 8018bca:	ed87 6a48 	vstr	s12, [r7, #288]	@ 0x120
 8018bce:	ed87 6a62 	vstr	s12, [r7, #392]	@ 0x188
 8018bd2:	edc7 5a64 	vstr	s11, [r7, #400]	@ 0x190
 8018bd6:	787b      	ldrb	r3, [r7, #1]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	f000 81a7 	beq.w	8018f2c <iNemoEngine_API_Update+0x37cc>
 8018bde:	f507 6314 	add.w	r3, r7, #2368	@ 0x940
 8018be2:	932b      	str	r3, [sp, #172]	@ 0xac
 8018be4:	f607 1344 	addw	r3, r7, #2372	@ 0x944
 8018be8:	932c      	str	r3, [sp, #176]	@ 0xb0
 8018bea:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8018bee:	932d      	str	r3, [sp, #180]	@ 0xb4
 8018bf0:	2300      	movs	r3, #0
 8018bf2:	707b      	strb	r3, [r7, #1]
 8018bf4:	f7fd b8ad 	b.w	8015d52 <iNemoEngine_API_Update+0x5f2>
 8018bf8:	ee1a 3a90 	vmov	r3, s21
 8018bfc:	f10a 0a0c 	add.w	sl, sl, #12
 8018c00:	f84a 3c04 	str.w	r3, [sl, #-4]
 8018c04:	45ca      	cmp	sl, r9
 8018c06:	f47f aeb1 	bne.w	801896c <iNemoEngine_API_Update+0x320c>
 8018c0a:	f897 a791 	ldrb.w	sl, [r7, #1937]	@ 0x791
 8018c0e:	f1ba 0f00 	cmp.w	sl, #0
 8018c12:	f000 87f3 	beq.w	8019bfc <iNemoEngine_API_Update+0x449c>
 8018c16:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8018d40 <iNemoEngine_API_Update+0x35e0>
 8018c1a:	ed9d 7a10 	vldr	s14, [sp, #64]	@ 0x40
 8018c1e:	ee6f daa7 	vmul.f32	s27, s31, s15
 8018c22:	eef6 9a00 	vmov.f32	s19, #96	@ 0x3f000000  0.5
 8018c26:	ee67 aa27 	vmul.f32	s21, s14, s15
 8018c2a:	ee2f ea27 	vmul.f32	s28, s30, s15
 8018c2e:	ee7d 7ae9 	vsub.f32	s15, s27, s19
 8018c32:	eef0 caed 	vabs.f32	s25, s27
 8018c36:	ee17 0a90 	vmov	r0, s15
 8018c3a:	f7e7 fcad 	bl	8000598 <__aeabi_f2d>
 8018c3e:	ee7d 7aa9 	vadd.f32	s15, s27, s19
 8018c42:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8018c46:	ee17 0a90 	vmov	r0, s15
 8018c4a:	f7e7 fca5 	bl	8000598 <__aeabi_f2d>
 8018c4e:	ee7e 7a69 	vsub.f32	s15, s28, s19
 8018c52:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8018c56:	ee17 0a90 	vmov	r0, s15
 8018c5a:	f7e7 fc9d 	bl	8000598 <__aeabi_f2d>
 8018c5e:	ee7e 7a29 	vadd.f32	s15, s28, s19
 8018c62:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8018c66:	ee17 0a90 	vmov	r0, s15
 8018c6a:	f7e7 fc95 	bl	8000598 <__aeabi_f2d>
 8018c6e:	ee7a 7ae9 	vsub.f32	s15, s21, s19
 8018c72:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 8018c76:	ee17 0a90 	vmov	r0, s15
 8018c7a:	f7e7 fc8d 	bl	8000598 <__aeabi_f2d>
 8018c7e:	ee7a 7aa9 	vadd.f32	s15, s21, s19
 8018c82:	4602      	mov	r2, r0
 8018c84:	460b      	mov	r3, r1
 8018c86:	ee17 0a90 	vmov	r0, s15
 8018c8a:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
 8018c8e:	f7e7 fc83 	bl	8000598 <__aeabi_f2d>
 8018c92:	f507 63f3 	add.w	r3, r7, #1944	@ 0x798
 8018c96:	eef0 7aea 	vabs.f32	s15, s21
 8018c9a:	220c      	movs	r2, #12
 8018c9c:	fb12 320a 	smlabb	r2, r2, sl, r3
 8018ca0:	edcd 7a03 	vstr	s15, [sp, #12]
 8018ca4:	eef0 7a4d 	vmov.f32	s15, s26
 8018ca8:	e9cd 011a 	strd	r0, r1, [sp, #104]	@ 0x68
 8018cac:	eeb0 da6e 	vmov.f32	s26, s29
 8018cb0:	eddf 9a24 	vldr	s19, [pc, #144]	@ 8018d44 <iNemoEngine_API_Update+0x35e4>
 8018cb4:	930e      	str	r3, [sp, #56]	@ 0x38
 8018cb6:	eef0 ea6b 	vmov.f32	s29, s23
 8018cba:	eeb0 bace 	vabs.f32	s22, s28
 8018cbe:	eef0 ba49 	vmov.f32	s23, s18
 8018cc2:	469a      	mov	sl, r3
 8018cc4:	4691      	mov	r9, r2
 8018cc6:	eeb0 9a67 	vmov.f32	s18, s15
 8018cca:	e0ac      	b.n	8018e26 <iNemoEngine_API_Update+0x36c6>
 8018ccc:	bf666666 	.word	0xbf666666
 8018cd0:	3d072b02 	.word	0x3d072b02
 8018cd4:	3ca3d70a 	.word	0x3ca3d70a
 8018cd8:	3d4ccccd 	.word	0x3d4ccccd
 8018cdc:	3ecccccd 	.word	0x3ecccccd
 8018ce0:	3f4ccccd 	.word	0x3f4ccccd
 8018ce4:	3cb43958 	.word	0x3cb43958
 8018ce8:	3cf5c28f 	.word	0x3cf5c28f
 8018cec:	3eb33333 	.word	0x3eb33333
 8018cf0:	3d75c28f 	.word	0x3d75c28f
 8018cf4:	3ee66666 	.word	0x3ee66666
 8018cf8:	3f866666 	.word	0x3f866666
 8018cfc:	3d23d70a 	.word	0x3d23d70a
 8018d00:	3f8ccccd 	.word	0x3f8ccccd
 8018d04:	3d8f5c29 	.word	0x3d8f5c29
 8018d08:	3f933333 	.word	0x3f933333
 8018d0c:	3ebd70a4 	.word	0x3ebd70a4
 8018d10:	40a00000 	.word	0x40a00000
 8018d14:	3dcccccd 	.word	0x3dcccccd
 8018d18:	3e4ccccd 	.word	0x3e4ccccd
 8018d1c:	3e99999a 	.word	0x3e99999a
 8018d20:	3f666666 	.word	0x3f666666
 8018d24:	40200000 	.word	0x40200000
 8018d28:	3f99999a 	.word	0x3f99999a
 8018d2c:	40400000 	.word	0x40400000
 8018d30:	3fb9999a 	.word	0x3fb9999a
 8018d34:	3fcccccd 	.word	0x3fcccccd
 8018d38:	3fe66666 	.word	0x3fe66666
 8018d3c:	3f333333 	.word	0x3f333333
 8018d40:	446a0ccd 	.word	0x446a0ccd
 8018d44:	4b000000 	.word	0x4b000000
 8018d48:	3fa66666 	.word	0x3fa66666
 8018d4c:	3f19999a 	.word	0x3f19999a
 8018d50:	3cfaad3b 	.word	0x3cfaad3b
 8018d54:	bcfaad3b 	.word	0xbcfaad3b
 8018d58:	80000000 	.word	0x80000000
 8018d5c:	eddd 7a1d 	vldr	s15, [sp, #116]	@ 0x74
 8018d60:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8018d50 <iNemoEngine_API_Update+0x35f0>
 8018d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d6c:	f280 80b1 	bge.w	8018ed2 <iNemoEngine_API_Update+0x3772>
 8018d70:	ed1f 7a08 	vldr	s14, [pc, #-32]	@ 8018d54 <iNemoEngine_API_Update+0x35f4>
 8018d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d7c:	f300 80c3 	bgt.w	8018f06 <iNemoEngine_API_Update+0x37a6>
 8018d80:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8018d84:	f004 fa14 	bl	801d1b0 <ceil>
 8018d88:	ec51 0b10 	vmov	r0, r1, d0
 8018d8c:	f7e7 ff34 	bl	8000bf8 <__aeabi_d2f>
 8018d90:	4603      	mov	r3, r0
 8018d92:	eeb4 bae9 	vcmpe.f32	s22, s19
 8018d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d9a:	f8ca 3000 	str.w	r3, [sl]
 8018d9e:	d550      	bpl.n	8018e42 <iNemoEngine_API_Update+0x36e2>
 8018da0:	eddd 7a1e 	vldr	s15, [sp, #120]	@ 0x78
 8018da4:	ed1f 7a16 	vldr	s14, [pc, #-88]	@ 8018d50 <iNemoEngine_API_Update+0x35f0>
 8018da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018db0:	f280 8085 	bge.w	8018ebe <iNemoEngine_API_Update+0x375e>
 8018db4:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 8018d54 <iNemoEngine_API_Update+0x35f4>
 8018db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dc0:	f300 809e 	bgt.w	8018f00 <iNemoEngine_API_Update+0x37a0>
 8018dc4:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8018dc8:	f004 f9f2 	bl	801d1b0 <ceil>
 8018dcc:	ec51 0b10 	vmov	r0, r1, d0
 8018dd0:	f7e7 ff12 	bl	8000bf8 <__aeabi_d2f>
 8018dd4:	4603      	mov	r3, r0
 8018dd6:	eddd 7a03 	vldr	s15, [sp, #12]
 8018dda:	f8ca 3004 	str.w	r3, [sl, #4]
 8018dde:	eef4 7ae9 	vcmpe.f32	s15, s19
 8018de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018de6:	d556      	bpl.n	8018e96 <iNemoEngine_API_Update+0x3736>
 8018de8:	eddd 7a08 	vldr	s15, [sp, #32]
 8018dec:	ed1f 7a28 	vldr	s14, [pc, #-160]	@ 8018d50 <iNemoEngine_API_Update+0x35f0>
 8018df0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018df8:	da75      	bge.n	8018ee6 <iNemoEngine_API_Update+0x3786>
 8018dfa:	ed1f 7a2a 	vldr	s14, [pc, #-168]	@ 8018d54 <iNemoEngine_API_Update+0x35f4>
 8018dfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e06:	dc78      	bgt.n	8018efa <iNemoEngine_API_Update+0x379a>
 8018e08:	ed9d 0b18 	vldr	d0, [sp, #96]	@ 0x60
 8018e0c:	f004 f9d0 	bl	801d1b0 <ceil>
 8018e10:	ec51 0b10 	vmov	r0, r1, d0
 8018e14:	f7e7 fef0 	bl	8000bf8 <__aeabi_d2f>
 8018e18:	4603      	mov	r3, r0
 8018e1a:	f8ca 3008 	str.w	r3, [sl, #8]
 8018e1e:	f10a 0a0c 	add.w	sl, sl, #12
 8018e22:	45ca      	cmp	sl, r9
 8018e24:	d03f      	beq.n	8018ea6 <iNemoEngine_API_Update+0x3746>
 8018e26:	eef4 cae9 	vcmpe.f32	s25, s19
 8018e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e2e:	d495      	bmi.n	8018d5c <iNemoEngine_API_Update+0x35fc>
 8018e30:	ee1d 3a90 	vmov	r3, s27
 8018e34:	eeb4 bae9 	vcmpe.f32	s22, s19
 8018e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e3c:	f8ca 3000 	str.w	r3, [sl]
 8018e40:	d4ae      	bmi.n	8018da0 <iNemoEngine_API_Update+0x3640>
 8018e42:	ee1e 3a10 	vmov	r3, s28
 8018e46:	e7c6      	b.n	8018dd6 <iNemoEngine_API_Update+0x3676>
 8018e48:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8018e4c:	f004 fa2c 	bl	801d2a8 <floor>
 8018e50:	ec51 0b10 	vmov	r0, r1, d0
 8018e54:	f7e7 fed0 	bl	8000bf8 <__aeabi_d2f>
 8018e58:	4603      	mov	r3, r0
 8018e5a:	e55d      	b.n	8018918 <iNemoEngine_API_Update+0x31b8>
 8018e5c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8018e60:	f004 fa22 	bl	801d2a8 <floor>
 8018e64:	ec51 0b10 	vmov	r0, r1, d0
 8018e68:	f7e7 fec6 	bl	8000bf8 <__aeabi_d2f>
 8018e6c:	4603      	mov	r3, r0
 8018e6e:	e533      	b.n	80188d8 <iNemoEngine_API_Update+0x3178>
 8018e70:	ed9d 0b18 	vldr	d0, [sp, #96]	@ 0x60
 8018e74:	f004 fa18 	bl	801d2a8 <floor>
 8018e78:	ec51 0b10 	vmov	r0, r1, d0
 8018e7c:	f7e7 febc 	bl	8000bf8 <__aeabi_d2f>
 8018e80:	4603      	mov	r3, r0
 8018e82:	e56c      	b.n	801895e <iNemoEngine_API_Update+0x31fe>
 8018e84:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8018e88:	e569      	b.n	801895e <iNemoEngine_API_Update+0x31fe>
 8018e8a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8018e8e:	e543      	b.n	8018918 <iNemoEngine_API_Update+0x31b8>
 8018e90:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8018e94:	e520      	b.n	80188d8 <iNemoEngine_API_Update+0x3178>
 8018e96:	ee1a 3a90 	vmov	r3, s21
 8018e9a:	f10a 0a0c 	add.w	sl, sl, #12
 8018e9e:	f84a 3c04 	str.w	r3, [sl, #-4]
 8018ea2:	45ca      	cmp	sl, r9
 8018ea4:	d1bf      	bne.n	8018e26 <iNemoEngine_API_Update+0x36c6>
 8018ea6:	eef0 7a49 	vmov.f32	s15, s18
 8018eaa:	eeb0 9a6b 	vmov.f32	s18, s23
 8018eae:	eef0 ba6e 	vmov.f32	s23, s29
 8018eb2:	eef0 ea4d 	vmov.f32	s29, s26
 8018eb6:	eeb0 da67 	vmov.f32	s26, s15
 8018eba:	f7fc bf5e 	b.w	8015d7a <iNemoEngine_API_Update+0x61a>
 8018ebe:	ed9d 0b16 	vldr	d0, [sp, #88]	@ 0x58
 8018ec2:	f004 f9f1 	bl	801d2a8 <floor>
 8018ec6:	ec51 0b10 	vmov	r0, r1, d0
 8018eca:	f7e7 fe95 	bl	8000bf8 <__aeabi_d2f>
 8018ece:	4603      	mov	r3, r0
 8018ed0:	e781      	b.n	8018dd6 <iNemoEngine_API_Update+0x3676>
 8018ed2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8018ed6:	f004 f9e7 	bl	801d2a8 <floor>
 8018eda:	ec51 0b10 	vmov	r0, r1, d0
 8018ede:	f7e7 fe8b 	bl	8000bf8 <__aeabi_d2f>
 8018ee2:	4603      	mov	r3, r0
 8018ee4:	e755      	b.n	8018d92 <iNemoEngine_API_Update+0x3632>
 8018ee6:	ed9d 0b1a 	vldr	d0, [sp, #104]	@ 0x68
 8018eea:	f004 f9dd 	bl	801d2a8 <floor>
 8018eee:	ec51 0b10 	vmov	r0, r1, d0
 8018ef2:	f7e7 fe81 	bl	8000bf8 <__aeabi_d2f>
 8018ef6:	4603      	mov	r3, r0
 8018ef8:	e78f      	b.n	8018e1a <iNemoEngine_API_Update+0x36ba>
 8018efa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8018efe:	e78c      	b.n	8018e1a <iNemoEngine_API_Update+0x36ba>
 8018f00:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8018f04:	e767      	b.n	8018dd6 <iNemoEngine_API_Update+0x3676>
 8018f06:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8018f0a:	e742      	b.n	8018d92 <iNemoEngine_API_Update+0x3632>
 8018f0c:	edd7 ea4b 	vldr	s29, [r7, #300]	@ 0x12c
 8018f10:	ee2a aa2e 	vmul.f32	s20, s20, s29
 8018f14:	f7fd bfd2 	b.w	8016ebc <iNemoEngine_API_Update+0x175c>
 8018f18:	edd7 ea63 	vldr	s29, [r7, #396]	@ 0x18c
 8018f1c:	ee2a aa2e 	vmul.f32	s20, s20, s29
 8018f20:	f7fd bfcc 	b.w	8016ebc <iNemoEngine_API_Update+0x175c>
 8018f24:	ed97 9a49 	vldr	s18, [r7, #292]	@ 0x124
 8018f28:	f7fd be41 	b.w	8016bae <iNemoEngine_API_Update+0x144e>
 8018f2c:	f507 6314 	add.w	r3, r7, #2368	@ 0x940
 8018f30:	f607 1244 	addw	r2, r7, #2372	@ 0x944
 8018f34:	f607 1148 	addw	r1, r7, #2376	@ 0x948
 8018f38:	932b      	str	r3, [sp, #172]	@ 0xac
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8018f40:	6813      	ldr	r3, [r2, #0]
 8018f42:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8018f46:	680b      	ldr	r3, [r1, #0]
 8018f48:	922c      	str	r2, [sp, #176]	@ 0xb0
 8018f4a:	912d      	str	r1, [sp, #180]	@ 0xb4
 8018f4c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8018f50:	e64e      	b.n	8018bf0 <iNemoEngine_API_Update+0x3490>
 8018f52:	f207 43b4 	addw	r3, r7, #1204	@ 0x4b4
 8018f56:	ed93 0a00 	vldr	s0, [r3]
 8018f5a:	f507 6097 	add.w	r0, r7, #1208	@ 0x4b8
 8018f5e:	f7fa fced 	bl	801393c <dataDerivative5>
 8018f62:	f207 6324 	addw	r3, r7, #1572	@ 0x624
 8018f66:	eeb0 3a40 	vmov.f32	s6, s0
 8018f6a:	f507 60c5 	add.w	r0, r7, #1576	@ 0x628
 8018f6e:	ed93 0a00 	vldr	s0, [r3]
 8018f72:	f7fa fce3 	bl	801393c <dataDerivative5>
 8018f76:	f207 7b94 	addw	fp, r7, #1940	@ 0x794
 8018f7a:	eef0 2a40 	vmov.f32	s5, s0
 8018f7e:	f507 60f3 	add.w	r0, r7, #1944	@ 0x798
 8018f82:	ed9b 0a00 	vldr	s0, [fp]
 8018f86:	f7fa fcd9 	bl	801393c <dataDerivative5>
 8018f8a:	f9b7 3976 	ldrsh.w	r3, [r7, #2422]	@ 0x976
 8018f8e:	ee07 3a90 	vmov	s15, r3
 8018f92:	3301      	adds	r3, #1
 8018f94:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8018f98:	ee07 3a90 	vmov	s15, r3
 8018f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018fa0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018fa4:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8018fa8:	f607 106c 	addw	r0, r7, #2412	@ 0x96c
 8018fac:	f607 1168 	addw	r1, r7, #2408	@ 0x968
 8018fb0:	f507 6217 	add.w	r2, r7, #2416	@ 0x970
 8018fb4:	b21b      	sxth	r3, r3
 8018fb6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8018fba:	ed90 7a00 	vldr	s14, [r0]
 8018fbe:	ed91 5a00 	vldr	s10, [r1]
 8018fc2:	eef0 7a43 	vmov.f32	s15, s6
 8018fc6:	eee7 7a25 	vfma.f32	s15, s14, s11
 8018fca:	eeb0 7a62 	vmov.f32	s14, s5
 8018fce:	eea5 7a85 	vfma.f32	s14, s11, s10
 8018fd2:	ed92 5a00 	vldr	s10, [r2]
 8018fd6:	eef0 6a40 	vmov.f32	s13, s0
 8018fda:	eee5 6a85 	vfma.f32	s13, s11, s10
 8018fde:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018fe2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018fe6:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018fea:	edc0 7a00 	vstr	s15, [r0]
 8018fee:	ed81 7a00 	vstr	s14, [r1]
 8018ff2:	edc2 6a00 	vstr	s13, [r2]
 8018ff6:	f8a7 3976 	strh.w	r3, [r7, #2422]	@ 0x976
 8018ffa:	f47c abd8 	bne.w	80157ae <iNemoEngine_API_Update+0x4e>
 8018ffe:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8019002:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019006:	ee66 6a86 	vmul.f32	s13, s13, s12
 801900a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801900e:	2300      	movs	r3, #0
 8019010:	ed87 7a07 	vstr	s14, [r7, #28]
 8019014:	edc7 6a08 	vstr	s13, [r7, #32]
 8019018:	edc7 7a06 	vstr	s15, [r7, #24]
 801901c:	6003      	str	r3, [r0, #0]
 801901e:	600b      	str	r3, [r1, #0]
 8019020:	6013      	str	r3, [r2, #0]
 8019022:	2300      	movs	r3, #0
 8019024:	f8a7 3976 	strh.w	r3, [r7, #2422]	@ 0x976
 8019028:	f887 3978 	strb.w	r3, [r7, #2424]	@ 0x978
 801902c:	f7fc bbbf 	b.w	80157ae <iNemoEngine_API_Update+0x4e>
 8019030:	ed1f 9ab7 	vldr	s18, [pc, #-732]	@ 8018d58 <iNemoEngine_API_Update+0x35f8>
 8019034:	f7fd b942 	b.w	80162bc <iNemoEngine_API_Update+0xb5c>
 8019038:	ed1f 8ab9 	vldr	s16, [pc, #-740]	@ 8018d58 <iNemoEngine_API_Update+0x35f8>
 801903c:	f7fd b994 	b.w	8016368 <iNemoEngine_API_Update+0xc08>
 8019040:	9b03      	ldr	r3, [sp, #12]
 8019042:	9309      	str	r3, [sp, #36]	@ 0x24
 8019044:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8019048:	939f      	str	r3, [sp, #636]	@ 0x27c
 801904a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801904e:	93a0      	str	r3, [sp, #640]	@ 0x280
 8019050:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8019054:	93a1      	str	r3, [sp, #644]	@ 0x284
 8019056:	2300      	movs	r3, #0
 8019058:	f887 31a0 	strb.w	r3, [r7, #416]	@ 0x1a0
 801905c:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 8019060:	f7fe bc68 	b.w	8017934 <iNemoEngine_API_Update+0x21d4>
 8019064:	ed5f eac4 	vldr	s29, [pc, #-784]	@ 8018d58 <iNemoEngine_API_Update+0x35f8>
 8019068:	f7fd b953 	b.w	8016312 <iNemoEngine_API_Update+0xbb2>
 801906c:	ed1f 9ac6 	vldr	s18, [pc, #-792]	@ 8018d58 <iNemoEngine_API_Update+0x35f8>
 8019070:	f7fd b8bb 	b.w	80161ea <iNemoEngine_API_Update+0xa8a>
 8019074:	ed5f eac8 	vldr	s29, [pc, #-800]	@ 8018d58 <iNemoEngine_API_Update+0x35f8>
 8019078:	f7fd b88c 	b.w	8016194 <iNemoEngine_API_Update+0xa34>
 801907c:	ed1f 8aca 	vldr	s16, [pc, #-808]	@ 8018d58 <iNemoEngine_API_Update+0x35f8>
 8019080:	f7fd b85d 	b.w	801613e <iNemoEngine_API_Update+0x9de>
 8019084:	ed5f eacc 	vldr	s29, [pc, #-816]	@ 8018d58 <iNemoEngine_API_Update+0x35f8>
 8019088:	f7fc bff0 	b.w	801606c <iNemoEngine_API_Update+0x90c>
 801908c:	ed1f 8ace 	vldr	s16, [pc, #-824]	@ 8018d58 <iNemoEngine_API_Update+0x35f8>
 8019090:	f7fc bfc1 	b.w	8016016 <iNemoEngine_API_Update+0x8b6>
 8019094:	ed1f 9ad0 	vldr	s18, [pc, #-832]	@ 8018d58 <iNemoEngine_API_Update+0x35f8>
 8019098:	f7fc bf92 	b.w	8015fc0 <iNemoEngine_API_Update+0x860>
 801909c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190a0:	f280 836c 	bge.w	801977c <iNemoEngine_API_Update+0x401c>
 80190a4:	ed97 3a31 	vldr	s6, [r7, #196]	@ 0xc4
 80190a8:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 80190ac:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80190b0:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80190b4:	ee78 3a63 	vsub.f32	s7, s16, s7
 80190b8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80190bc:	ee87 9aa5 	vdiv.f32	s18, s15, s11
 80190c0:	ee39 9a03 	vadd.f32	s18, s18, s6
 80190c4:	f7ff b82c 	b.w	8018120 <iNemoEngine_API_Update+0x29c0>
 80190c8:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	@ 0x1a6
 80190cc:	3301      	adds	r3, #1
 80190ce:	b29b      	uxth	r3, r3
 80190d0:	2a00      	cmp	r2, #0
 80190d2:	f040 85cf 	bne.w	8019c74 <iNemoEngine_API_Update+0x4514>
 80190d6:	eddf 7ae6 	vldr	s15, [pc, #920]	@ 8019470 <iNemoEngine_API_Update+0x3d10>
 80190da:	eddf 6ae6 	vldr	s13, [pc, #920]	@ 8019474 <iNemoEngine_API_Update+0x3d14>
 80190de:	2b31      	cmp	r3, #49	@ 0x31
 80190e0:	bf98      	it	ls
 80190e2:	eef0 7a66 	vmovls.f32	s15, s13
 80190e6:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6
 80190ea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80190ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80190f2:	f5b3 0f8c 	cmp.w	r3, #4587520	@ 0x460000
 80190f6:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80190fa:	f000 85b1 	beq.w	8019c60 <iNemoEngine_API_Update+0x4500>
 80190fe:	f5b3 0fc8 	cmp.w	r3, #6553600	@ 0x640000
 8019102:	f47e adc9 	bne.w	8017c98 <iNemoEngine_API_Update+0x2538>
 8019106:	2301      	movs	r3, #1
 8019108:	f887 31a4 	strb.w	r3, [r7, #420]	@ 0x1a4
 801910c:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 8019110:	edd3 5a00 	vldr	s11, [r3]
 8019114:	f507 63f1 	add.w	r3, r7, #1928	@ 0x788
 8019118:	ed93 7a00 	vldr	s14, [r3]
 801911c:	f207 6314 	addw	r3, r7, #1556	@ 0x614
 8019120:	ed93 5a00 	vldr	s10, [r3]
 8019124:	ee65 4aa5 	vmul.f32	s9, s11, s11
 8019128:	f207 7384 	addw	r3, r7, #1924	@ 0x784
 801912c:	eee5 4a05 	vfma.f32	s9, s10, s10
 8019130:	a84d      	add	r0, sp, #308	@ 0x134
 8019132:	462a      	mov	r2, r5
 8019134:	edd3 6a00 	vldr	s13, [r3]
 8019138:	f207 631c 	addw	r3, r7, #1564	@ 0x61c
 801913c:	edd3 7a00 	vldr	s15, [r3]
 8019140:	eee7 4aa7 	vfma.f32	s9, s15, s15
 8019144:	f207 738c 	addw	r3, r7, #1932	@ 0x78c
 8019148:	a947      	add	r1, sp, #284	@ 0x11c
 801914a:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 801914e:	eef1 3ae4 	vsqrt.f32	s7, s9
 8019152:	462e      	mov	r6, r5
 8019154:	4654      	mov	r4, sl
 8019156:	ee27 6a07 	vmul.f32	s12, s14, s14
 801915a:	eec4 4a23 	vdiv.f32	s9, s8, s7
 801915e:	eea6 6aa6 	vfma.f32	s12, s13, s13
 8019162:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8019166:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801916a:	edcd 7a49 	vstr	s15, [sp, #292]	@ 0x124
 801916e:	edd3 7a00 	vldr	s15, [r3]
 8019172:	edcd 5a48 	vstr	s11, [sp, #288]	@ 0x120
 8019176:	eea7 6aa7 	vfma.f32	s12, s15, s15
 801917a:	ee25 5a24 	vmul.f32	s10, s10, s9
 801917e:	eef1 5ac6 	vsqrt.f32	s11, s12
 8019182:	ed8d 5a47 	vstr	s10, [sp, #284]	@ 0x11c
 8019186:	ee84 6a25 	vdiv.f32	s12, s8, s11
 801918a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801918e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019192:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019196:	ed8d 7a4e 	vstr	s14, [sp, #312]	@ 0x138
 801919a:	edcd 7a4f 	vstr	s15, [sp, #316]	@ 0x13c
 801919e:	edcd 6a4d 	vstr	s13, [sp, #308]	@ 0x134
 80191a2:	f7fa fcb1 	bl	8013b08 <getRotationMatrix>
 80191a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80191a8:	46de      	mov	lr, fp
 80191aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80191ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80191b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80191b4:	6836      	ldr	r6, [r6, #0]
 80191b6:	f8ce 6000 	str.w	r6, [lr]
 80191ba:	46dc      	mov	ip, fp
 80191bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80191c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80191c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80191c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80191c8:	ed9b 7a00 	vldr	s14, [fp]
 80191cc:	eddb 7a01 	vldr	s15, [fp, #4]
 80191d0:	6026      	str	r6, [r4, #0]
 80191d2:	eeb0 7ac7 	vabs.f32	s14, s14
 80191d6:	eef0 7ae7 	vabs.f32	s15, s15
 80191da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80191de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191e2:	f100 8574 	bmi.w	8019cce <iNemoEngine_API_Update+0x456e>
 80191e6:	2304      	movs	r3, #4
 80191e8:	2000      	movs	r0, #0
 80191ea:	eef0 7a47 	vmov.f32	s15, s14
 80191ee:	4699      	mov	r9, r3
 80191f0:	2103      	movs	r1, #3
 80191f2:	2606      	movs	r6, #6
 80191f4:	f04f 0e07 	mov.w	lr, #7
 80191f8:	461a      	mov	r2, r3
 80191fa:	f04f 0c01 	mov.w	ip, #1
 80191fe:	9004      	str	r0, [sp, #16]
 8019200:	ed9b 7a02 	vldr	s14, [fp, #8]
 8019204:	eeb0 7ac7 	vabs.f32	s14, s14
 8019208:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801920c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019210:	f300 854d 	bgt.w	8019cae <iNemoEngine_API_Update+0x454e>
 8019214:	2305      	movs	r3, #5
 8019216:	2408      	movs	r4, #8
 8019218:	e9cd 3405 	strd	r3, r4, [sp, #20]
 801921c:	2302      	movs	r3, #2
 801921e:	464c      	mov	r4, r9
 8019220:	445c      	add	r4, fp
 8019222:	4458      	add	r0, fp
 8019224:	edd4 6a00 	vldr	s13, [r4]
 8019228:	ed90 7a00 	vldr	s14, [r0]
 801922c:	9804      	ldr	r0, [sp, #16]
 801922e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019232:	eb0a 0b8c 	add.w	fp, sl, ip, lsl #2
 8019236:	eb0a 0483 	add.w	r4, sl, r3, lsl #2
 801923a:	eb0a 0980 	add.w	r9, sl, r0, lsl #2
 801923e:	0080      	lsls	r0, r0, #2
 8019240:	9004      	str	r0, [sp, #16]
 8019242:	eb0a 0081 	add.w	r0, sl, r1, lsl #2
 8019246:	0089      	lsls	r1, r1, #2
 8019248:	9107      	str	r1, [sp, #28]
 801924a:	009b      	lsls	r3, r3, #2
 801924c:	edcb 7a00 	vstr	s15, [fp]
 8019250:	ed94 7a00 	vldr	s14, [r4]
 8019254:	edd9 7a00 	vldr	s15, [r9]
 8019258:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801925c:	ea4f 098e 	mov.w	r9, lr, lsl #2
 8019260:	edc4 6a00 	vstr	s13, [r4]
 8019264:	eb0a 0482 	add.w	r4, sl, r2, lsl #2
 8019268:	ed9b 6a00 	vldr	s12, [fp]
 801926c:	ed90 7a00 	vldr	s14, [r0]
 8019270:	edd4 7a00 	vldr	s15, [r4]
 8019274:	eee6 7a47 	vfms.f32	s15, s12, s14
 8019278:	edc4 7a00 	vstr	s15, [r4]
 801927c:	edd0 7a00 	vldr	s15, [r0]
 8019280:	9805      	ldr	r0, [sp, #20]
 8019282:	eb0a 0180 	add.w	r1, sl, r0, lsl #2
 8019286:	ed91 7a00 	vldr	s14, [r1]
 801928a:	eea6 7ae7 	vfms.f32	s14, s13, s15
 801928e:	ea4f 0b80 	mov.w	fp, r0, lsl #2
 8019292:	00b0      	lsls	r0, r6, #2
 8019294:	9005      	str	r0, [sp, #20]
 8019296:	ed81 7a00 	vstr	s14, [r1]
 801929a:	eb0a 008e 	add.w	r0, sl, lr, lsl #2
 801929e:	eb0a 0186 	add.w	r1, sl, r6, lsl #2
 80192a2:	ed91 5a00 	vldr	s10, [r1]
 80192a6:	edd0 7a00 	vldr	s15, [r0]
 80192aa:	9e06      	ldr	r6, [sp, #24]
 80192ac:	eee6 7a45 	vfms.f32	s15, s12, s10
 80192b0:	eef0 5ac7 	vabs.f32	s11, s14
 80192b4:	edc0 7a00 	vstr	s15, [r0]
 80192b8:	ed91 6a00 	vldr	s12, [r1]
 80192bc:	eb0a 0186 	add.w	r1, sl, r6, lsl #2
 80192c0:	edd1 7a00 	vldr	s15, [r1]
 80192c4:	eee6 7ac6 	vfms.f32	s15, s13, s12
 80192c8:	00b6      	lsls	r6, r6, #2
 80192ca:	edc1 7a00 	vstr	s15, [r1]
 80192ce:	edd4 6a00 	vldr	s13, [r4]
 80192d2:	eeb0 6ae6 	vabs.f32	s12, s13
 80192d6:	eef4 5ac6 	vcmpe.f32	s11, s12
 80192da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192de:	ea4f 018c 	mov.w	r1, ip, lsl #2
 80192e2:	ea4f 0482 	mov.w	r4, r2, lsl #2
 80192e6:	f300 84cd 	bgt.w	8019c84 <iNemoEngine_API_Update+0x4524>
 80192ea:	ed90 6a00 	vldr	s12, [r0]
 80192ee:	9804      	ldr	r0, [sp, #16]
 80192f0:	eec7 1a26 	vdiv.f32	s3, s14, s13
 80192f4:	eb0a 020b 	add.w	r2, sl, fp
 80192f8:	4456      	add	r6, sl
 80192fa:	4454      	add	r4, sl
 80192fc:	eb0a 0b09 	add.w	fp, sl, r9
 8019300:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8019304:	eee1 7ac6 	vfms.f32	s15, s3, s12
 8019308:	edc2 1a00 	vstr	s3, [r2]
 801930c:	9a05      	ldr	r2, [sp, #20]
 801930e:	edc6 7a00 	vstr	s15, [r6]
 8019312:	4452      	add	r2, sl
 8019314:	ed92 3a00 	vldr	s6, [r2]
 8019318:	9a07      	ldr	r2, [sp, #28]
 801931a:	ed9b 2a00 	vldr	s4, [fp]
 801931e:	4452      	add	r2, sl
 8019320:	edd2 4a00 	vldr	s9, [r2]
 8019324:	9a03      	ldr	r2, [sp, #12]
 8019326:	9209      	str	r2, [sp, #36]	@ 0x24
 8019328:	eb0a 0201 	add.w	r2, sl, r1
 801932c:	ed92 0a00 	vldr	s0, [r2]
 8019330:	eb0a 0203 	add.w	r2, sl, r3
 8019334:	edd2 2a00 	vldr	s5, [r2]
 8019338:	aa72      	add	r2, sp, #456	@ 0x1c8
 801933a:	ee80 1aa7 	vdiv.f32	s2, s1, s15
 801933e:	4402      	add	r2, r0
 8019340:	edd2 6a00 	vldr	s13, [r2]
 8019344:	edd4 7a00 	vldr	s15, [r4]
 8019348:	aa72      	add	r2, sp, #456	@ 0x1c8
 801934a:	440a      	add	r2, r1
 801934c:	eec0 3aa7 	vdiv.f32	s7, s1, s15
 8019350:	edd2 7a00 	vldr	s15, [r2]
 8019354:	aa72      	add	r2, sp, #456	@ 0x1c8
 8019356:	441a      	add	r2, r3
 8019358:	ed92 7a00 	vldr	s14, [r2]
 801935c:	eee0 7a66 	vfms.f32	s15, s0, s13
 8019360:	aa75      	add	r2, sp, #468	@ 0x1d4
 8019362:	4402      	add	r2, r0
 8019364:	eea2 7ae6 	vfms.f32	s14, s5, s13
 8019368:	eea1 7ae7 	vfms.f32	s14, s3, s15
 801936c:	ee21 7a07 	vmul.f32	s14, s2, s14
 8019370:	eee2 7a47 	vfms.f32	s15, s4, s14
 8019374:	eee3 6a47 	vfms.f32	s13, s6, s14
 8019378:	ee63 7aa7 	vmul.f32	s15, s7, s15
 801937c:	ed85 7a02 	vstr	s14, [r5, #8]
 8019380:	eee4 6ae7 	vfms.f32	s13, s9, s15
 8019384:	edc5 7a01 	vstr	s15, [r5, #4]
 8019388:	eeb0 4a66 	vmov.f32	s8, s13
 801938c:	edd2 6a00 	vldr	s13, [r2]
 8019390:	aa75      	add	r2, sp, #468	@ 0x1d4
 8019392:	440a      	add	r2, r1
 8019394:	ed92 6a00 	vldr	s12, [r2]
 8019398:	aa75      	add	r2, sp, #468	@ 0x1d4
 801939a:	441a      	add	r2, r3
 801939c:	edd2 5a00 	vldr	s11, [r2]
 80193a0:	aa78      	add	r2, sp, #480	@ 0x1e0
 80193a2:	4411      	add	r1, r2
 80193a4:	4413      	add	r3, r2
 80193a6:	4402      	add	r2, r0
 80193a8:	ed92 5a00 	vldr	s10, [r2]
 80193ac:	edd1 7a00 	vldr	s15, [r1]
 80193b0:	ed93 7a00 	vldr	s14, [r3]
 80193b4:	eea0 6a66 	vfms.f32	s12, s0, s13
 80193b8:	eb0a 0300 	add.w	r3, sl, r0
 80193bc:	a95c      	add	r1, sp, #368	@ 0x170
 80193be:	eee5 7a40 	vfms.f32	s15, s10, s0
 80193c2:	4628      	mov	r0, r5
 80193c4:	eee2 5ae6 	vfms.f32	s11, s5, s13
 80193c8:	eea5 7a62 	vfms.f32	s14, s10, s5
 80193cc:	ed93 0a00 	vldr	s0, [r3]
 80193d0:	eee1 5ac6 	vfms.f32	s11, s3, s12
 80193d4:	2300      	movs	r3, #0
 80193d6:	eea1 7ae7 	vfms.f32	s14, s3, s15
 80193da:	eec0 2a80 	vdiv.f32	s5, s1, s0
 80193de:	ee27 7a01 	vmul.f32	s14, s14, s2
 80193e2:	ee61 5a25 	vmul.f32	s11, s2, s11
 80193e6:	eee7 7a42 	vfms.f32	s15, s14, s4
 80193ea:	eea2 6a65 	vfms.f32	s12, s4, s11
 80193ee:	eee3 6a65 	vfms.f32	s13, s6, s11
 80193f2:	edc5 5a05 	vstr	s11, [r5, #20]
 80193f6:	eef0 5a45 	vmov.f32	s11, s10
 80193fa:	eee7 5a43 	vfms.f32	s11, s14, s6
 80193fe:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8019402:	ee23 6a86 	vmul.f32	s12, s7, s12
 8019406:	eee7 5ae4 	vfms.f32	s11, s15, s9
 801940a:	eee4 6ac6 	vfms.f32	s13, s9, s12
 801940e:	ee22 4a84 	vmul.f32	s8, s5, s8
 8019412:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8019416:	ee62 2aa5 	vmul.f32	s5, s5, s11
 801941a:	edc5 6a03 	vstr	s13, [r5, #12]
 801941e:	ed85 7a08 	vstr	s14, [r5, #32]
 8019422:	edc5 7a07 	vstr	s15, [r5, #28]
 8019426:	ed85 4a00 	vstr	s8, [r5]
 801942a:	ed85 6a04 	vstr	s12, [r5, #16]
 801942e:	edc5 2a06 	vstr	s5, [r5, #24]
 8019432:	f7fa fac9 	bl	80139c8 <b_dcm2q>
 8019436:	ed9d 7a5d 	vldr	s14, [sp, #372]	@ 0x174
 801943a:	eddd 7a5e 	vldr	s15, [sp, #376]	@ 0x178
 801943e:	eddd 6a5c 	vldr	s13, [sp, #368]	@ 0x170
 8019442:	f887 31a0 	strb.w	r3, [r7, #416]	@ 0x1a0
 8019446:	ee37 7a07 	vadd.f32	s14, s14, s14
 801944a:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801944e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8019452:	edcd 6a47 	vstr	s13, [sp, #284]	@ 0x11c
 8019456:	ed8d 7a48 	vstr	s14, [sp, #288]	@ 0x120
 801945a:	edcd 7a49 	vstr	s15, [sp, #292]	@ 0x124
 801945e:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 8019462:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 8019466:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 801946a:	f7fe ba63 	b.w	8017934 <iNemoEngine_API_Update+0x21d4>
 801946e:	bf00      	nop
 8019470:	3e4cccce 	.word	0x3e4cccce
 8019474:	3eaaaaab 	.word	0x3eaaaaab
 8019478:	a958      	add	r1, sp, #352	@ 0x160
 801947a:	a872      	add	r0, sp, #456	@ 0x1c8
 801947c:	edcd 5a18 	vstr	s11, [sp, #96]	@ 0x60
 8019480:	ed8d 0a08 	vstr	s0, [sp, #32]
 8019484:	edcd 6a07 	vstr	s13, [sp, #28]
 8019488:	ed8d 7a06 	vstr	s14, [sp, #24]
 801948c:	f7fa fa9c 	bl	80139c8 <b_dcm2q>
 8019490:	eddd 7a22 	vldr	s15, [sp, #136]	@ 0x88
 8019494:	eef7 9a00 	vmov.f32	s19, #112	@ 0x3f800000  1.0
 8019498:	edc7 7a72 	vstr	s15, [r7, #456]	@ 0x1c8
 801949c:	edc7 9a73 	vstr	s19, [r7, #460]	@ 0x1cc
 80194a0:	4631      	mov	r1, r6
 80194a2:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 80194a6:	f507 70ea 	add.w	r0, r7, #468	@ 0x1d4
 80194aa:	f006 fc74 	bl	801fd96 <memset>
 80194ae:	4ba0      	ldr	r3, [pc, #640]	@ (8019730 <iNemoEngine_API_Update+0x3fd0>)
 80194b0:	703e      	strb	r6, [r7, #0]
 80194b2:	eef0 7a69 	vmov.f32	s15, s19
 80194b6:	ed9d ba58 	vldr	s22, [sp, #352]	@ 0x160
 80194ba:	eddd aa59 	vldr	s21, [sp, #356]	@ 0x164
 80194be:	eddd 9a5a 	vldr	s19, [sp, #360]	@ 0x168
 80194c2:	eddd ca5b 	vldr	s25, [sp, #364]	@ 0x16c
 80194c6:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 80194ca:	eddd 5a18 	vldr	s11, [sp, #96]	@ 0x60
 80194ce:	ed9d 0a08 	vldr	s0, [sp, #32]
 80194d2:	eddd 6a07 	vldr	s13, [sp, #28]
 80194d6:	ed9d 7a06 	vldr	s14, [sp, #24]
 80194da:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80194de:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 80194e2:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 80194e6:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 80194ea:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 80194ee:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 80194f2:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 80194f6:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 80194fa:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 80194fe:	2601      	movs	r6, #1
 8019500:	f7fd bd29 	b.w	8016f56 <iNemoEngine_API_Update+0x17f6>
 8019504:	eddf 7a94 	vldr	s15, [pc, #592]	@ 8019758 <iNemoEngine_API_Update+0x3ff8>
 8019508:	eeb4 eae7 	vcmpe.f32	s28, s15
 801950c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019510:	f53d aeb2 	bmi.w	8017278 <iNemoEngine_API_Update+0x1b18>
 8019514:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8019516:	2b00      	cmp	r3, #0
 8019518:	f47d aeb7 	bne.w	801728a <iNemoEngine_API_Update+0x1b2a>
 801951c:	f7fd beac 	b.w	8017278 <iNemoEngine_API_Update+0x1b18>
 8019520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019524:	d511      	bpl.n	801954a <iNemoEngine_API_Update+0x3dea>
 8019526:	ed97 3a4d 	vldr	s6, [r7, #308]	@ 0x134
 801952a:	edd7 3a4f 	vldr	s7, [r7, #316]	@ 0x13c
 801952e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8019532:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8019536:	ee78 5a65 	vsub.f32	s11, s16, s11
 801953a:	ee63 5aa5 	vmul.f32	s11, s7, s11
 801953e:	eec5 eaa7 	vdiv.f32	s29, s11, s15
 8019542:	ee7e ea83 	vadd.f32	s29, s29, s6
 8019546:	f7fd bb68 	b.w	8016c1a <iNemoEngine_API_Update+0x14ba>
 801954a:	edd7 5a50 	vldr	s11, [r7, #320]	@ 0x140
 801954e:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8019552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019556:	f140 834a 	bpl.w	8019bee <iNemoEngine_API_Update+0x448e>
 801955a:	ed97 3a4f 	vldr	s6, [r7, #316]	@ 0x13c
 801955e:	edd7 3a51 	vldr	s7, [r7, #324]	@ 0x144
 8019562:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8019566:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801956a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801956e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8019572:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 8019576:	ee7e ea83 	vadd.f32	s29, s29, s6
 801957a:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 801957e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019586:	f6fd ab68 	blt.w	8016c5a <iNemoEngine_API_Update+0x14fa>
 801958a:	edd7 5a54 	vldr	s11, [r7, #336]	@ 0x150
 801958e:	eef4 5ac8 	vcmpe.f32	s11, s16
 8019592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019596:	f340 8295 	ble.w	8019ac4 <iNemoEngine_API_Update+0x4364>
 801959a:	ed97 3a53 	vldr	s6, [r7, #332]	@ 0x14c
 801959e:	edd7 3a55 	vldr	s7, [r7, #340]	@ 0x154
 80195a2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80195a6:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80195aa:	ee78 7a67 	vsub.f32	s15, s16, s15
 80195ae:	ee63 3aa7 	vmul.f32	s7, s7, s15
 80195b2:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 80195b6:	ee7e ea83 	vadd.f32	s29, s29, s6
 80195ba:	edd7 7a56 	vldr	s15, [r7, #344]	@ 0x158
 80195be:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80195c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195c6:	f6fd ab68 	blt.w	8016c9a <iNemoEngine_API_Update+0x153a>
 80195ca:	edd7 5a58 	vldr	s11, [r7, #352]	@ 0x160
 80195ce:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80195d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195d6:	f140 8258 	bpl.w	8019a8a <iNemoEngine_API_Update+0x432a>
 80195da:	ed97 3a57 	vldr	s6, [r7, #348]	@ 0x15c
 80195de:	edd7 3a59 	vldr	s7, [r7, #356]	@ 0x164
 80195e2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80195e6:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80195ea:	ee78 7a67 	vsub.f32	s15, s16, s15
 80195ee:	ee63 3aa7 	vmul.f32	s7, s7, s15
 80195f2:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 80195f6:	ee7e ea83 	vadd.f32	s29, s29, s6
 80195fa:	edd7 7a5a 	vldr	s15, [r7, #360]	@ 0x168
 80195fe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019606:	f6fd ab68 	blt.w	8016cda <iNemoEngine_API_Update+0x157a>
 801960a:	edd7 5a5c 	vldr	s11, [r7, #368]	@ 0x170
 801960e:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8019612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019616:	f140 825f 	bpl.w	8019ad8 <iNemoEngine_API_Update+0x4378>
 801961a:	ed97 3a5b 	vldr	s6, [r7, #364]	@ 0x16c
 801961e:	edd7 3a5d 	vldr	s7, [r7, #372]	@ 0x174
 8019622:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8019626:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801962a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801962e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8019632:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 8019636:	ee7e ea83 	vadd.f32	s29, s29, s6
 801963a:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 801963e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019646:	f6fd ab68 	blt.w	8016d1a <iNemoEngine_API_Update+0x15ba>
 801964a:	edd7 5a60 	vldr	s11, [r7, #384]	@ 0x180
 801964e:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8019652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019656:	f140 82d6 	bpl.w	8019c06 <iNemoEngine_API_Update+0x44a6>
 801965a:	edd7 3a5f 	vldr	s7, [r7, #380]	@ 0x17c
 801965e:	ed97 5a61 	vldr	s10, [r7, #388]	@ 0x184
 8019662:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8019666:	ee35 5a63 	vsub.f32	s10, s10, s7
 801966a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801966e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8019672:	eec5 ea25 	vdiv.f32	s29, s10, s11
 8019676:	ee7e eaa3 	vadd.f32	s29, s29, s7
 801967a:	f7fd bb65 	b.w	8016d48 <iNemoEngine_API_Update+0x15e8>
 801967e:	eef4 7ac4 	vcmpe.f32	s15, s8
 8019682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019686:	f57e aef1 	bpl.w	801846c <iNemoEngine_API_Update+0x2d0c>
 801968a:	ed9f 4a2a 	vldr	s8, [pc, #168]	@ 8019734 <iNemoEngine_API_Update+0x3fd4>
 801968e:	eef4 7ac4 	vcmpe.f32	s15, s8
 8019692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019696:	da03      	bge.n	80196a0 <iNemoEngine_API_Update+0x3f40>
 8019698:	eef7 9a00 	vmov.f32	s19, #112	@ 0x3f800000  1.0
 801969c:	f7fe bef8 	b.w	8018490 <iNemoEngine_API_Update+0x2d30>
 80196a0:	ed9f 4a25 	vldr	s8, [pc, #148]	@ 8019738 <iNemoEngine_API_Update+0x3fd8>
 80196a4:	eef4 7ac4 	vcmpe.f32	s15, s8
 80196a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196ac:	f57e aef8 	bpl.w	80184a0 <iNemoEngine_API_Update+0x2d40>
 80196b0:	ed9f 4a20 	vldr	s8, [pc, #128]	@ 8019734 <iNemoEngine_API_Update+0x3fd4>
 80196b4:	ed9f 3a21 	vldr	s6, [pc, #132]	@ 801973c <iNemoEngine_API_Update+0x3fdc>
 80196b8:	eddf 9a21 	vldr	s19, [pc, #132]	@ 8019740 <iNemoEngine_API_Update+0x3fe0>
 80196bc:	ee37 4ac4 	vsub.f32	s8, s15, s8
 80196c0:	eee4 9a03 	vfma.f32	s19, s8, s6
 80196c4:	ed9f 4a1f 	vldr	s8, [pc, #124]	@ 8019744 <iNemoEngine_API_Update+0x3fe4>
 80196c8:	eef4 7ac4 	vcmpe.f32	s15, s8
 80196cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196d0:	f6fe aef8 	blt.w	80184c4 <iNemoEngine_API_Update+0x2d64>
 80196d4:	ed9f 4a1c 	vldr	s8, [pc, #112]	@ 8019748 <iNemoEngine_API_Update+0x3fe8>
 80196d8:	eef4 7ac4 	vcmpe.f32	s15, s8
 80196dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196e0:	f57e aef8 	bpl.w	80184d4 <iNemoEngine_API_Update+0x2d74>
 80196e4:	ed9f 4a17 	vldr	s8, [pc, #92]	@ 8019744 <iNemoEngine_API_Update+0x3fe4>
 80196e8:	ee37 4ac4 	vsub.f32	s8, s15, s8
 80196ec:	eeb1 3a04 	vmov.f32	s6, #20	@ 0x40a00000  5.0
 80196f0:	eef7 9a08 	vmov.f32	s19, #120	@ 0x3fc00000  1.5
 80196f4:	eee4 9a03 	vfma.f32	s19, s8, s6
 80196f8:	ed9f 4a14 	vldr	s8, [pc, #80]	@ 801974c <iNemoEngine_API_Update+0x3fec>
 80196fc:	eef4 7ac4 	vcmpe.f32	s15, s8
 8019700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019704:	f6fe aef8 	blt.w	80184f8 <iNemoEngine_API_Update+0x2d98>
 8019708:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 801970c:	eef4 7ac4 	vcmpe.f32	s15, s8
 8019710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019714:	f57e aef7 	bpl.w	8018506 <iNemoEngine_API_Update+0x2da6>
 8019718:	ed9f 4a0c 	vldr	s8, [pc, #48]	@ 801974c <iNemoEngine_API_Update+0x3fec>
 801971c:	ed9f 3a0c 	vldr	s6, [pc, #48]	@ 8019750 <iNemoEngine_API_Update+0x3ff0>
 8019720:	ee37 4ac4 	vsub.f32	s8, s15, s8
 8019724:	eef2 9a05 	vmov.f32	s19, #37	@ 0x41280000  10.5
 8019728:	eee4 9a03 	vfma.f32	s19, s8, s6
 801972c:	f7fe bef5 	b.w	801851a <iNemoEngine_API_Update+0x2dba>
 8019730:	40a00000 	.word	0x40a00000
 8019734:	3c75c28f 	.word	0x3c75c28f
 8019738:	3cf5c28f 	.word	0x3cf5c28f
 801973c:	40d5555a 	.word	0x40d5555a
 8019740:	3f866666 	.word	0x3f866666
 8019744:	3d4ccccd 	.word	0x3d4ccccd
 8019748:	3dcccccd 	.word	0x3dcccccd
 801974c:	3e4ccccd 	.word	0x3e4ccccd
 8019750:	43055555 	.word	0x43055555
 8019754:	43c7ffff 	.word	0x43c7ffff
 8019758:	3ecccccd 	.word	0x3ecccccd
 801975c:	3e999998 	.word	0x3e999998
 8019760:	3f99999a 	.word	0x3f99999a
 8019764:	42100000 	.word	0x42100000
 8019768:	42c7ffff 	.word	0x42c7ffff
 801976c:	3d088889 	.word	0x3d088889
 8019770:	3d0d3dcb 	.word	0x3d0d3dcb
 8019774:	3e4cccd0 	.word	0x3e4cccd0
 8019778:	3f8ccccd 	.word	0x3f8ccccd
 801977c:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8019780:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8019784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019788:	f140 8278 	bpl.w	8019c7c <iNemoEngine_API_Update+0x451c>
 801978c:	ed97 3a35 	vldr	s6, [r7, #212]	@ 0xd4
 8019790:	edd7 3a37 	vldr	s7, [r7, #220]	@ 0xdc
 8019794:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8019798:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801979c:	ee78 7a67 	vsub.f32	s15, s16, s15
 80197a0:	ee63 3aa7 	vmul.f32	s7, s7, s15
 80197a4:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 80197a8:	ee39 9a03 	vadd.f32	s18, s18, s6
 80197ac:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80197b0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80197b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197b8:	f6fe acd2 	blt.w	8018160 <iNemoEngine_API_Update+0x2a00>
 80197bc:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 80197c0:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80197c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197c8:	f140 8178 	bpl.w	8019abc <iNemoEngine_API_Update+0x435c>
 80197cc:	ed97 3a39 	vldr	s6, [r7, #228]	@ 0xe4
 80197d0:	edd7 3a3b 	vldr	s7, [r7, #236]	@ 0xec
 80197d4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80197d8:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80197dc:	ee78 7a67 	vsub.f32	s15, s16, s15
 80197e0:	ee63 3aa7 	vmul.f32	s7, s7, s15
 80197e4:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 80197e8:	ee39 9a03 	vadd.f32	s18, s18, s6
 80197ec:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 80197f0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80197f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197f8:	f6fe acd2 	blt.w	80181a0 <iNemoEngine_API_Update+0x2a40>
 80197fc:	edd7 5a3e 	vldr	s11, [r7, #248]	@ 0xf8
 8019800:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8019804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019808:	f140 8154 	bpl.w	8019ab4 <iNemoEngine_API_Update+0x4354>
 801980c:	ed97 3a3d 	vldr	s6, [r7, #244]	@ 0xf4
 8019810:	edd7 3a3f 	vldr	s7, [r7, #252]	@ 0xfc
 8019814:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8019818:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801981c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8019820:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8019824:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 8019828:	ee39 9a03 	vadd.f32	s18, s18, s6
 801982c:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8019830:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019838:	f6fe acd2 	blt.w	80181e0 <iNemoEngine_API_Update+0x2a80>
 801983c:	edd7 5a42 	vldr	s11, [r7, #264]	@ 0x108
 8019840:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8019844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019848:	f140 8130 	bpl.w	8019aac <iNemoEngine_API_Update+0x434c>
 801984c:	ed97 3a41 	vldr	s6, [r7, #260]	@ 0x104
 8019850:	edd7 3a43 	vldr	s7, [r7, #268]	@ 0x10c
 8019854:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8019858:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801985c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8019860:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8019864:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 8019868:	ee39 9a03 	vadd.f32	s18, s18, s6
 801986c:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 8019870:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019878:	f6fe acd2 	blt.w	8018220 <iNemoEngine_API_Update+0x2ac0>
 801987c:	edd7 5a46 	vldr	s11, [r7, #280]	@ 0x118
 8019880:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8019884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019888:	f140 8109 	bpl.w	8019a9e <iNemoEngine_API_Update+0x433e>
 801988c:	edd7 3a45 	vldr	s7, [r7, #276]	@ 0x114
 8019890:	ed97 5a47 	vldr	s10, [r7, #284]	@ 0x11c
 8019894:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8019898:	ee35 5a63 	vsub.f32	s10, s10, s7
 801989c:	ee78 7a67 	vsub.f32	s15, s16, s15
 80198a0:	ee65 7a27 	vmul.f32	s15, s10, s15
 80198a4:	ee87 9aa5 	vdiv.f32	s18, s15, s11
 80198a8:	ee39 9a23 	vadd.f32	s18, s18, s7
 80198ac:	f7fd b97f 	b.w	8016bae <iNemoEngine_API_Update+0x144e>
 80198b0:	eeb0 ba6a 	vmov.f32	s22, s21
 80198b4:	f7fc bac7 	b.w	8015e46 <iNemoEngine_API_Update+0x6e6>
 80198b8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80198bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198c0:	dd45      	ble.n	801994e <iNemoEngine_API_Update+0x41ee>
 80198c2:	ed5f 7a5c 	vldr	s15, [pc, #-368]	@ 8019754 <iNemoEngine_API_Update+0x3ff4>
 80198c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80198ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198ce:	f140 80d7 	bpl.w	8019a80 <iNemoEngine_API_Update+0x4320>
 80198d2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80198d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80198da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198de:	f140 80bc 	bpl.w	8019a5a <iNemoEngine_API_Update+0x42fa>
 80198e2:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 80198e6:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80198ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198ee:	da33      	bge.n	8019958 <iNemoEngine_API_Update+0x41f8>
 80198f0:	ed1f 6a60 	vldr	s12, [pc, #-384]	@ 8019774 <iNemoEngine_API_Update+0x4014>
 80198f4:	eee6 7a86 	vfma.f32	s15, s13, s12
 80198f8:	eeb3 6a00 	vmov.f32	s12, #48	@ 0x41800000  16.0
 80198fc:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8019900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019904:	db39      	blt.n	801997a <iNemoEngine_API_Update+0x421a>
 8019906:	ed5f 7a69 	vldr	s15, [pc, #-420]	@ 8019764 <iNemoEngine_API_Update+0x4004>
 801990a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801990e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019912:	d539      	bpl.n	8019988 <iNemoEngine_API_Update+0x4228>
 8019914:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8019918:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801991c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8019920:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8019924:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019928:	ed1f 6a71 	vldr	s12, [pc, #-452]	@ 8019768 <iNemoEngine_API_Update+0x4008>
 801992c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8019930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019934:	db09      	blt.n	801994a <iNemoEngine_API_Update+0x41ea>
 8019936:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 801993a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801993e:	ed1f 6a7a 	vldr	s12, [pc, #-488]	@ 8019758 <iNemoEngine_API_Update+0x3ff8>
 8019942:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8019946:	eee6 7a86 	vfma.f32	s15, s13, s12
 801994a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801994e:	2300      	movs	r3, #0
 8019950:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6
 8019954:	f7fe b9a0 	b.w	8017c98 <iNemoEngine_API_Update+0x2538>
 8019958:	eef3 7a00 	vmov.f32	s15, #48	@ 0x41800000  16.0
 801995c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019964:	d5cf      	bpl.n	8019906 <iNemoEngine_API_Update+0x41a6>
 8019966:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801996a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801996e:	ed5f 5a85 	vldr	s11, [pc, #-532]	@ 801975c <iNemoEngine_API_Update+0x3ffc>
 8019972:	ed5f 7a85 	vldr	s15, [pc, #-532]	@ 8019760 <iNemoEngine_API_Update+0x4000>
 8019976:	eee6 7a25 	vfma.f32	s15, s12, s11
 801997a:	ed1f 6a86 	vldr	s12, [pc, #-536]	@ 8019764 <iNemoEngine_API_Update+0x4004>
 801997e:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8019982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019986:	dbcf      	blt.n	8019928 <iNemoEngine_API_Update+0x41c8>
 8019988:	ed5f 7a89 	vldr	s15, [pc, #-548]	@ 8019768 <iNemoEngine_API_Update+0x4008>
 801998c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019994:	d5cf      	bpl.n	8019936 <iNemoEngine_API_Update+0x41d6>
 8019996:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801999a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801999e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80199a2:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80199a6:	eee6 7a86 	vfma.f32	s15, s13, s12
 80199aa:	e7ce      	b.n	801994a <iNemoEngine_API_Update+0x41ea>
 80199ac:	ed1f 4a91 	vldr	s8, [pc, #-580]	@ 801976c <iNemoEngine_API_Update+0x400c>
 80199b0:	ed5f 5a91 	vldr	s11, [pc, #-580]	@ 8019770 <iNemoEngine_API_Update+0x4010>
 80199b4:	ac4d      	add	r4, sp, #308	@ 0x134
 80199b6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80199ba:	edd0 7a7c 	vldr	s15, [r0, #496]	@ 0x1f0
 80199be:	f5a0 73ae 	sub.w	r3, r0, #348	@ 0x15c
 80199c2:	3101      	adds	r1, #1
 80199c4:	eeb0 7a67 	vmov.f32	s14, s15
 80199c8:	461a      	mov	r2, r3
 80199ca:	ed92 6ad6 	vldr	s12, [r2, #856]	@ 0x358
 80199ce:	320c      	adds	r2, #12
 80199d0:	4290      	cmp	r0, r2
 80199d2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80199d6:	d1f8      	bne.n	80199ca <iNemoEngine_API_Update+0x426a>
 80199d8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80199dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80199e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80199e4:	ed93 6ad6 	vldr	s12, [r3, #856]	@ 0x358
 80199e8:	330c      	adds	r3, #12
 80199ea:	ee36 6a47 	vsub.f32	s12, s12, s14
 80199ee:	4298      	cmp	r0, r3
 80199f0:	eee6 7a06 	vfma.f32	s15, s12, s12
 80199f4:	d1f6      	bne.n	80199e4 <iNemoEngine_API_Update+0x4284>
 80199f6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80199fa:	2902      	cmp	r1, #2
 80199fc:	f100 0004 	add.w	r0, r0, #4
 8019a00:	ece4 7a01 	vstmia	r4!, {s15}
 8019a04:	d1d9      	bne.n	80199ba <iNemoEngine_API_Update+0x425a>
 8019a06:	ed9d 6a4d 	vldr	s12, [sp, #308]	@ 0x134
 8019a0a:	eddd 7a4e 	vldr	s15, [sp, #312]	@ 0x138
 8019a0e:	ed9d 7a4f 	vldr	s14, [sp, #316]	@ 0x13c
 8019a12:	eef1 3ac6 	vsqrt.f32	s7, s12
 8019a16:	eeb1 4ae7 	vsqrt.f32	s8, s15
 8019a1a:	eef1 5ac7 	vsqrt.f32	s11, s14
 8019a1e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019a22:	eeb3 6a00 	vmov.f32	s12, #48	@ 0x41800000  16.0
 8019a26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019a2a:	edcd 3a4d 	vstr	s7, [sp, #308]	@ 0x134
 8019a2e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8019a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a36:	ed8d 4a4e 	vstr	s8, [sp, #312]	@ 0x138
 8019a3a:	edcd 5a4f 	vstr	s11, [sp, #316]	@ 0x13c
 8019a3e:	f57e a98e 	bpl.w	8017d5e <iNemoEngine_API_Update+0x25fe>
 8019a42:	2300      	movs	r3, #0
 8019a44:	edcd 4a9f 	vstr	s9, [sp, #636]	@ 0x27c
 8019a48:	ed8d 5aa0 	vstr	s10, [sp, #640]	@ 0x280
 8019a4c:	edcd 6aa1 	vstr	s13, [sp, #644]	@ 0x284
 8019a50:	707b      	strb	r3, [r7, #1]
 8019a52:	9b03      	ldr	r3, [sp, #12]
 8019a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8019a56:	f7fd bf6d 	b.w	8017934 <iNemoEngine_API_Update+0x21d4>
 8019a5a:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8019a5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a66:	f57f af77 	bpl.w	8019958 <iNemoEngine_API_Update+0x41f8>
 8019a6a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8019a6e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8019a72:	ed5f 5ac0 	vldr	s11, [pc, #-768]	@ 8019774 <iNemoEngine_API_Update+0x4014>
 8019a76:	ed5f 7ac0 	vldr	s15, [pc, #-768]	@ 8019778 <iNemoEngine_API_Update+0x4018>
 8019a7a:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019a7e:	e73b      	b.n	80198f8 <iNemoEngine_API_Update+0x4198>
 8019a80:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 8019a84:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8019a88:	e761      	b.n	801994e <iNemoEngine_API_Update+0x41ee>
 8019a8a:	eef0 7a65 	vmov.f32	s15, s11
 8019a8e:	f7fd b90c 	b.w	8016caa <iNemoEngine_API_Update+0x154a>
 8019a92:	eef0 7a65 	vmov.f32	s15, s11
 8019a96:	e6d1      	b.n	801983c <iNemoEngine_API_Update+0x40dc>
 8019a98:	eef0 7a65 	vmov.f32	s15, s11
 8019a9c:	e6ae      	b.n	80197fc <iNemoEngine_API_Update+0x409c>
 8019a9e:	eef0 7a65 	vmov.f32	s15, s11
 8019aa2:	f7fe bbc5 	b.w	8018230 <iNemoEngine_API_Update+0x2ad0>
 8019aa6:	eef0 7a65 	vmov.f32	s15, s11
 8019aaa:	e687      	b.n	80197bc <iNemoEngine_API_Update+0x405c>
 8019aac:	eef0 7a65 	vmov.f32	s15, s11
 8019ab0:	f7fe bb9e 	b.w	80181f0 <iNemoEngine_API_Update+0x2a90>
 8019ab4:	eef0 7a65 	vmov.f32	s15, s11
 8019ab8:	f7fe bb7a 	b.w	80181b0 <iNemoEngine_API_Update+0x2a50>
 8019abc:	eef0 7a65 	vmov.f32	s15, s11
 8019ac0:	f7fe bb56 	b.w	8018170 <iNemoEngine_API_Update+0x2a10>
 8019ac4:	eef0 7a65 	vmov.f32	s15, s11
 8019ac8:	f7fd b8cf 	b.w	8016c6a <iNemoEngine_API_Update+0x150a>
 8019acc:	eef0 7a65 	vmov.f32	s15, s11
 8019ad0:	e59b      	b.n	801960a <iNemoEngine_API_Update+0x3eaa>
 8019ad2:	eef0 7a65 	vmov.f32	s15, s11
 8019ad6:	e5b8      	b.n	801964a <iNemoEngine_API_Update+0x3eea>
 8019ad8:	eef0 7a65 	vmov.f32	s15, s11
 8019adc:	f7fd b905 	b.w	8016cea <iNemoEngine_API_Update+0x158a>
 8019ae0:	eef0 aa69 	vmov.f32	s21, s19
 8019ae4:	eeb0 ba69 	vmov.f32	s22, s19
 8019ae8:	f7fc b9ad 	b.w	8015e46 <iNemoEngine_API_Update+0x6e6>
 8019aec:	2a00      	cmp	r2, #0
 8019aee:	f73e a94d 	bgt.w	8017d8c <iNemoEngine_API_Update+0x262c>
 8019af2:	ed9d 5a8d 	vldr	s10, [sp, #564]	@ 0x234
 8019af6:	ed9d 6a8e 	vldr	s12, [sp, #568]	@ 0x238
 8019afa:	eddd 7a8f 	vldr	s15, [sp, #572]	@ 0x23c
 8019afe:	eef1 5a00 	vmov.f32	s11, #16	@ 0x40800000  4.0
 8019b02:	ee25 5a25 	vmul.f32	s10, s10, s11
 8019b06:	ee26 6a25 	vmul.f32	s12, s12, s11
 8019b0a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019b0e:	ed8d 5a8d 	vstr	s10, [sp, #564]	@ 0x234
 8019b12:	ed8d 6a8e 	vstr	s12, [sp, #568]	@ 0x238
 8019b16:	edcd 7a8f 	vstr	s15, [sp, #572]	@ 0x23c
 8019b1a:	f7fd bbfa 	b.w	8017312 <iNemoEngine_API_Update+0x1bb2>
 8019b1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019b20:	f002 02fd 	and.w	r2, r2, #253	@ 0xfd
 8019b24:	2a01      	cmp	r2, #1
 8019b26:	d002      	beq.n	8019b2e <iNemoEngine_API_Update+0x43ce>
 8019b28:	2301      	movs	r3, #1
 8019b2a:	f7fe b84a 	b.w	8017bc2 <iNemoEngine_API_Update+0x2462>
 8019b2e:	2b0a      	cmp	r3, #10
 8019b30:	d01b      	beq.n	8019b6a <iNemoEngine_API_Update+0x440a>
 8019b32:	eddf 7a6f 	vldr	s15, [pc, #444]	@ 8019cf0 <iNemoEngine_API_Update+0x4590>
 8019b36:	3301      	adds	r3, #1
 8019b38:	eef4 9ae7 	vcmpe.f32	s19, s15
 8019b3c:	f887 31a0 	strb.w	r3, [r7, #416]	@ 0x1a0
 8019b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b44:	f04f 0300 	mov.w	r3, #0
 8019b48:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 8019b4c:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 8019b50:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 8019b54:	da32      	bge.n	8019bbc <iNemoEngine_API_Update+0x445c>
 8019b56:	f897 31a2 	ldrb.w	r3, [r7, #418]	@ 0x1a2
 8019b5a:	2b31      	cmp	r3, #49	@ 0x31
 8019b5c:	f63e a942 	bhi.w	8017de4 <iNemoEngine_API_Update+0x2684>
 8019b60:	3301      	adds	r3, #1
 8019b62:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 8019b66:	f7fe b93d 	b.w	8017de4 <iNemoEngine_API_Update+0x2684>
 8019b6a:	f897 31a3 	ldrb.w	r3, [r7, #419]	@ 0x1a3
 8019b6e:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 8019b72:	f88d 2118 	strb.w	r2, [sp, #280]	@ 0x118
 8019b76:	3301      	adds	r3, #1
 8019b78:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 8019b7c:	787b      	ldrb	r3, [r7, #1]
 8019b7e:	edcd fa9f 	vstr	s31, [sp, #636]	@ 0x27c
 8019b82:	f240 1201 	movw	r2, #257	@ 0x101
 8019b86:	ed8d faa0 	vstr	s30, [sp, #640]	@ 0x280
 8019b8a:	edcd 7aa1 	vstr	s15, [sp, #644]	@ 0x284
 8019b8e:	f8ad 2116 	strh.w	r2, [sp, #278]	@ 0x116
 8019b92:	b13b      	cbz	r3, 8019ba4 <iNemoEngine_API_Update+0x4444>
 8019b94:	2300      	movs	r3, #0
 8019b96:	edc7 fa6f 	vstr	s31, [r7, #444]	@ 0x1bc
 8019b9a:	ed87 fa70 	vstr	s30, [r7, #448]	@ 0x1c0
 8019b9e:	edc7 7a71 	vstr	s15, [r7, #452]	@ 0x1c4
 8019ba2:	707b      	strb	r3, [r7, #1]
 8019ba4:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8019cf0 <iNemoEngine_API_Update+0x4590>
 8019ba8:	eef4 9ae7 	vcmpe.f32	s19, s15
 8019bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bb0:	db08      	blt.n	8019bc4 <iNemoEngine_API_Update+0x4464>
 8019bb2:	2300      	movs	r3, #0
 8019bb4:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 8019bb8:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 8019bbc:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 8019bc0:	f7fe b910 	b.w	8017de4 <iNemoEngine_API_Update+0x2684>
 8019bc4:	f897 31a2 	ldrb.w	r3, [r7, #418]	@ 0x1a2
 8019bc8:	2b31      	cmp	r3, #49	@ 0x31
 8019bca:	f63e a90b 	bhi.w	8017de4 <iNemoEngine_API_Update+0x2684>
 8019bce:	3301      	adds	r3, #1
 8019bd0:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 8019bd4:	2300      	movs	r3, #0
 8019bd6:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 8019bda:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 8019bde:	f7fe b901 	b.w	8017de4 <iNemoEngine_API_Update+0x2684>
 8019be2:	eef0 7a65 	vmov.f32	s15, s11
 8019be6:	e649      	b.n	801987c <iNemoEngine_API_Update+0x411c>
 8019be8:	eef0 7a65 	vmov.f32	s15, s11
 8019bec:	e4cd      	b.n	801958a <iNemoEngine_API_Update+0x3e2a>
 8019bee:	eef0 7a65 	vmov.f32	s15, s11
 8019bf2:	f7fd b81a 	b.w	8016c2a <iNemoEngine_API_Update+0x14ca>
 8019bf6:	eef0 7a65 	vmov.f32	s15, s11
 8019bfa:	e4e6      	b.n	80195ca <iNemoEngine_API_Update+0x3e6a>
 8019bfc:	f507 63f3 	add.w	r3, r7, #1944	@ 0x798
 8019c00:	930e      	str	r3, [sp, #56]	@ 0x38
 8019c02:	f7fc b8ba 	b.w	8015d7a <iNemoEngine_API_Update+0x61a>
 8019c06:	eef0 7a65 	vmov.f32	s15, s11
 8019c0a:	f7fd b88d 	b.w	8016d28 <iNemoEngine_API_Update+0x15c8>
 8019c0e:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	@ 0x1a6
 8019c12:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 8019c16:	2b27      	cmp	r3, #39	@ 0x27
 8019c18:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	@ 0x1a8
 8019c1c:	f103 0301 	add.w	r3, r3, #1
 8019c20:	bf98      	it	ls
 8019c22:	eef0 fa64 	vmovls.f32	s31, s9
 8019c26:	bf98      	it	ls
 8019c28:	eeb0 fa45 	vmovls.f32	s30, s10
 8019c2c:	bf98      	it	ls
 8019c2e:	eef0 7a66 	vmovls.f32	s15, s13
 8019c32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019c36:	f04f 0201 	mov.w	r2, #1
 8019c3a:	bf14      	ite	ne
 8019c3c:	b29b      	uxthne	r3, r3
 8019c3e:	f64f 73ff 	movweq	r3, #65535	@ 0xffff
 8019c42:	edcd fa9f 	vstr	s31, [sp, #636]	@ 0x27c
 8019c46:	ed8d faa0 	vstr	s30, [sp, #640]	@ 0x280
 8019c4a:	edcd 7aa1 	vstr	s15, [sp, #644]	@ 0x284
 8019c4e:	f887 21a3 	strb.w	r2, [r7, #419]	@ 0x1a3
 8019c52:	f8a7 31a8 	strh.w	r3, [r7, #424]	@ 0x1a8
 8019c56:	e6fc      	b.n	8019a52 <iNemoEngine_API_Update+0x42f2>
 8019c58:	f507 6597 	add.w	r5, r7, #1208	@ 0x4b8
 8019c5c:	f7fe bdce 	b.w	80187fc <iNemoEngine_API_Update+0x309c>
 8019c60:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8019c64:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8019c68:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 8019c6c:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8019c70:	f7fe b812 	b.w	8017c98 <iNemoEngine_API_Update+0x2538>
 8019c74:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019c78:	f7ff ba35 	b.w	80190e6 <iNemoEngine_API_Update+0x3986>
 8019c7c:	eef0 7a65 	vmov.f32	s15, s11
 8019c80:	f7fe ba56 	b.w	8018130 <iNemoEngine_API_Update+0x29d0>
 8019c84:	eef0 5a47 	vmov.f32	s11, s14
 8019c88:	eeb0 6a67 	vmov.f32	s12, s15
 8019c8c:	eeb0 7a66 	vmov.f32	s14, s13
 8019c90:	4619      	mov	r1, r3
 8019c92:	465c      	mov	r4, fp
 8019c94:	46b1      	mov	r9, r6
 8019c96:	edd0 7a00 	vldr	s15, [r0]
 8019c9a:	eef0 6a65 	vmov.f32	s13, s11
 8019c9e:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8019ca2:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8019ca6:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8019caa:	f7ff bb20 	b.w	80192ee <iNemoEngine_API_Update+0x3b8e>
 8019cae:	2306      	movs	r3, #6
 8019cb0:	2608      	movs	r6, #8
 8019cb2:	2204      	movs	r2, #4
 8019cb4:	2402      	movs	r4, #2
 8019cb6:	9306      	str	r3, [sp, #24]
 8019cb8:	f04f 0e07 	mov.w	lr, #7
 8019cbc:	2105      	movs	r1, #5
 8019cbe:	4630      	mov	r0, r6
 8019cc0:	4691      	mov	r9, r2
 8019cc2:	2300      	movs	r3, #0
 8019cc4:	f04f 0c01 	mov.w	ip, #1
 8019cc8:	9404      	str	r4, [sp, #16]
 8019cca:	f7ff baa8 	b.w	801921e <iNemoEngine_API_Update+0x3abe>
 8019cce:	2104      	movs	r1, #4
 8019cd0:	2301      	movs	r3, #1
 8019cd2:	2203      	movs	r2, #3
 8019cd4:	2607      	movs	r6, #7
 8019cd6:	f04f 0e06 	mov.w	lr, #6
 8019cda:	4608      	mov	r0, r1
 8019cdc:	f04f 0c00 	mov.w	ip, #0
 8019ce0:	9304      	str	r3, [sp, #16]
 8019ce2:	f7ff ba8d 	b.w	8019200 <iNemoEngine_API_Update+0x3aa0>
 8019ce6:	eddf 9a03 	vldr	s19, [pc, #12]	@ 8019cf4 <iNemoEngine_API_Update+0x4594>
 8019cea:	f7fb be94 	b.w	8015a16 <iNemoEngine_API_Update+0x2b6>
 8019cee:	bf00      	nop
 8019cf0:	42480000 	.word	0x42480000
 8019cf4:	00000000 	.word	0x00000000

08019cf8 <MEMS_runMagCal.constprop.0>:
 8019cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cfc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019dc0 <MEMS_runMagCal.constprop.0+0xc8>
 8019d00:	ed2d 8b0e 	vpush	{d8-d14}
 8019d04:	f8ba 2008 	ldrh.w	r2, [sl, #8]
 8019d08:	f2ad 5d64 	subw	sp, sp, #1380	@ 0x564
 8019d0c:	2a82      	cmp	r2, #130	@ 0x82
 8019d0e:	9201      	str	r2, [sp, #4]
 8019d10:	f102 35ff 	add.w	r5, r2, #4294967295	@ 0xffffffff
 8019d14:	d946      	bls.n	8019da4 <MEMS_runMagCal.constprop.0+0xac>
 8019d16:	f9ba 1002 	ldrsh.w	r1, [sl, #2]
 8019d1a:	f8da 300c 	ldr.w	r3, [sl, #12]
 8019d1e:	9108      	str	r1, [sp, #32]
 8019d20:	fb05 3311 	mls	r3, r5, r1, r3
 8019d24:	f102 007e 	add.w	r0, r2, #126	@ 0x7e
 8019d28:	9303      	str	r3, [sp, #12]
 8019d2a:	2581      	movs	r5, #129	@ 0x81
 8019d2c:	2382      	movs	r3, #130	@ 0x82
 8019d2e:	b2c0      	uxtb	r0, r0
 8019d30:	fb01 f505 	mul.w	r5, r1, r5
 8019d34:	9301      	str	r3, [sp, #4]
 8019d36:	461c      	mov	r4, r3
 8019d38:	f8da 6010 	ldr.w	r6, [sl, #16]
 8019d3c:	2300      	movs	r3, #0
 8019d3e:	f50d 79a8 	add.w	r9, sp, #336	@ 0x150
 8019d42:	f816 c033 	ldrb.w	ip, [r6, r3, lsl #3]
 8019d46:	f809 c033 	strb.w	ip, [r9, r3, lsl #3]
 8019d4a:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
 8019d4e:	eb09 01c3 	add.w	r1, r9, r3, lsl #3
 8019d52:	3301      	adds	r3, #1
 8019d54:	b2db      	uxtb	r3, r3
 8019d56:	f8d7 c002 	ldr.w	ip, [r7, #2]
 8019d5a:	88ff      	ldrh	r7, [r7, #6]
 8019d5c:	f8c1 c002 	str.w	ip, [r1, #2]
 8019d60:	42a3      	cmp	r3, r4
 8019d62:	80cf      	strh	r7, [r1, #6]
 8019d64:	d3ed      	bcc.n	8019d42 <MEMS_runMagCal.constprop.0+0x4a>
 8019d66:	2a82      	cmp	r2, #130	@ 0x82
 8019d68:	bf38      	it	cc
 8019d6a:	2282      	movcc	r2, #130	@ 0x82
 8019d6c:	3a82      	subs	r2, #130	@ 0x82
 8019d6e:	f8aa 2008 	strh.w	r2, [sl, #8]
 8019d72:	b1a0      	cbz	r0, 8019d9e <MEMS_runMagCal.constprop.0+0xa6>
 8019d74:	f8da 3010 	ldr.w	r3, [sl, #16]
 8019d78:	3302      	adds	r3, #2
 8019d7a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8019d7e:	2700      	movs	r7, #0
 8019d80:	f893 640e 	ldrb.w	r6, [r3, #1038]	@ 0x40e
 8019d84:	f8d3 1410 	ldr.w	r1, [r3, #1040]	@ 0x410
 8019d88:	f8b3 2414 	ldrh.w	r2, [r3, #1044]	@ 0x414
 8019d8c:	f803 6c02 	strb.w	r6, [r3, #-2]
 8019d90:	6019      	str	r1, [r3, #0]
 8019d92:	809a      	strh	r2, [r3, #4]
 8019d94:	f883 740e 	strb.w	r7, [r3, #1038]	@ 0x40e
 8019d98:	3308      	adds	r3, #8
 8019d9a:	4298      	cmp	r0, r3
 8019d9c:	d1f0      	bne.n	8019d80 <MEMS_runMagCal.constprop.0+0x88>
 8019d9e:	9b03      	ldr	r3, [sp, #12]
 8019da0:	4622      	mov	r2, r4
 8019da2:	e01b      	b.n	8019ddc <MEMS_runMagCal.constprop.0+0xe4>
 8019da4:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 8019da8:	9308      	str	r3, [sp, #32]
 8019daa:	fb03 f505 	mul.w	r5, r3, r5
 8019dae:	f8da 300c 	ldr.w	r3, [sl, #12]
 8019db2:	1b5b      	subs	r3, r3, r5
 8019db4:	9303      	str	r3, [sp, #12]
 8019db6:	b17a      	cbz	r2, 8019dd8 <MEMS_runMagCal.constprop.0+0xe0>
 8019db8:	4614      	mov	r4, r2
 8019dba:	2000      	movs	r0, #0
 8019dbc:	e7bc      	b.n	8019d38 <MEMS_runMagCal.constprop.0+0x40>
 8019dbe:	bf00      	nop
 8019dc0:	2000038c 	.word	0x2000038c
 8019dc4:	00000000 	.word	0x00000000
 8019dc8:	43020000 	.word	0x43020000
 8019dcc:	447a0000 	.word	0x447a0000
 8019dd0:	4423d666 	.word	0x4423d666
 8019dd4:	42c80000 	.word	0x42c80000
 8019dd8:	f8aa 2008 	strh.w	r2, [sl, #8]
 8019ddc:	18eb      	adds	r3, r5, r3
 8019dde:	9302      	str	r3, [sp, #8]
 8019de0:	f8ca 304c 	str.w	r3, [sl, #76]	@ 0x4c
 8019de4:	2a00      	cmp	r2, #0
 8019de6:	f000 8391 	beq.w	801a50c <MEMS_runMagCal.constprop.0+0x814>
 8019dea:	4619      	mov	r1, r3
 8019dec:	f8da 301c 	ldr.w	r3, [sl, #28]
 8019df0:	f501 30c3 	add.w	r0, r1, #99840	@ 0x18600
 8019df4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8019df8:	30a0      	adds	r0, #160	@ 0xa0
 8019dfa:	fb03 f101 	mul.w	r1, r3, r1
 8019dfe:	4288      	cmp	r0, r1
 8019e00:	f0c0 838f 	bcc.w	801a522 <MEMS_runMagCal.constprop.0+0x82a>
 8019e04:	f8da 10a4 	ldr.w	r1, [sl, #164]	@ 0xa4
 8019e08:	4288      	cmp	r0, r1
 8019e0a:	f0c0 838a 	bcc.w	801a522 <MEMS_runMagCal.constprop.0+0x82a>
 8019e0e:	f89a 30a0 	ldrb.w	r3, [sl, #160]	@ 0xa0
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	f000 838f 	beq.w	801a536 <MEMS_runMagCal.constprop.0+0x83e>
 8019e18:	f04f 2380 	mov.w	r3, #2147516416	@ 0x80008000
 8019e1c:	1e54      	subs	r4, r2, #1
 8019e1e:	9334      	str	r3, [sp, #208]	@ 0xd0
 8019e20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019e24:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 8019dc4 <MEMS_runMagCal.constprop.0+0xcc>
 8019e28:	edda 8a01 	vldr	s17, [sl, #4]
 8019e2c:	f8ad 30d4 	strh.w	r3, [sp, #212]	@ 0xd4
 8019e30:	b2a4      	uxth	r4, r4
 8019e32:	f06f 2380 	mvn.w	r3, #2147516416	@ 0x80008000
 8019e36:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019e3a:	2c03      	cmp	r4, #3
 8019e3c:	9344      	str	r3, [sp, #272]	@ 0x110
 8019e3e:	f50d 79a8 	add.w	r9, sp, #336	@ 0x150
 8019e42:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8019e46:	f04f 0100 	mov.w	r1, #0
 8019e4a:	ed9a 6a1f 	vldr	s12, [sl, #124]	@ 0x7c
 8019e4e:	edda 5a1c 	vldr	s11, [sl, #112]	@ 0x70
 8019e52:	ed9a 5a23 	vldr	s10, [sl, #140]	@ 0x8c
 8019e56:	edda 4a1d 	vldr	s9, [sl, #116]	@ 0x74
 8019e5a:	ed9a 4a27 	vldr	s8, [sl, #156]	@ 0x9c
 8019e5e:	edda 3a1e 	vldr	s7, [sl, #120]	@ 0x78
 8019e62:	f8ad 3114 	strh.w	r3, [sp, #276]	@ 0x114
 8019e66:	ee87 8aa8 	vdiv.f32	s16, s15, s17
 8019e6a:	bf28      	it	cs
 8019e6c:	2403      	movcs	r4, #3
 8019e6e:	4648      	mov	r0, r9
 8019e70:	460b      	mov	r3, r1
 8019e72:	eef0 7a47 	vmov.f32	s15, s14
 8019e76:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
 8019e7a:	7805      	ldrb	r5, [r0, #0]
 8019e7c:	3301      	adds	r3, #1
 8019e7e:	b29b      	uxth	r3, r3
 8019e80:	2d00      	cmp	r5, #0
 8019e82:	d052      	beq.n	8019f2a <MEMS_runMagCal.constprop.0+0x232>
 8019e84:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8019e88:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8019e8c:	f9bd 50d0 	ldrsh.w	r5, [sp, #208]	@ 0xd0
 8019e90:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
 8019e94:	ee07 ca10 	vmov	s14, ip
 8019e98:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8019e9c:	ee07 7a10 	vmov	s14, r7
 8019ea0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019ea4:	4565      	cmp	r5, ip
 8019ea6:	bfb8      	it	lt
 8019ea8:	4665      	movlt	r5, ip
 8019eaa:	ee37 7a64 	vsub.f32	s14, s14, s9
 8019eae:	f8ad 50d0 	strh.w	r5, [sp, #208]	@ 0xd0
 8019eb2:	f9bd 5110 	ldrsh.w	r5, [sp, #272]	@ 0x110
 8019eb6:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8019eba:	ee27 7a05 	vmul.f32	s14, s14, s10
 8019ebe:	4565      	cmp	r5, ip
 8019ec0:	bfa8      	it	ge
 8019ec2:	4665      	movge	r5, ip
 8019ec4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019ec8:	ee27 7a07 	vmul.f32	s14, s14, s14
 8019ecc:	f8ad 5110 	strh.w	r5, [sp, #272]	@ 0x110
 8019ed0:	f9bd 50d2 	ldrsh.w	r5, [sp, #210]	@ 0xd2
 8019ed4:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8019ed8:	42bd      	cmp	r5, r7
 8019eda:	bfb8      	it	lt
 8019edc:	463d      	movlt	r5, r7
 8019ede:	f8ad 50d2 	strh.w	r5, [sp, #210]	@ 0xd2
 8019ee2:	f9bd 5112 	ldrsh.w	r5, [sp, #274]	@ 0x112
 8019ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019eea:	ee07 6a10 	vmov	s14, r6
 8019eee:	42bd      	cmp	r5, r7
 8019ef0:	bfa8      	it	ge
 8019ef2:	463d      	movge	r5, r7
 8019ef4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019ef8:	f8ad 5112 	strh.w	r5, [sp, #274]	@ 0x112
 8019efc:	f9bd 50d4 	ldrsh.w	r5, [sp, #212]	@ 0xd4
 8019f00:	ee37 7a63 	vsub.f32	s14, s14, s7
 8019f04:	42b5      	cmp	r5, r6
 8019f06:	bfb8      	it	lt
 8019f08:	4635      	movlt	r5, r6
 8019f0a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019f0e:	f8ad 50d4 	strh.w	r5, [sp, #212]	@ 0xd4
 8019f12:	f9bd 5114 	ldrsh.w	r5, [sp, #276]	@ 0x114
 8019f16:	eee7 7a07 	vfma.f32	s15, s14, s14
 8019f1a:	42b5      	cmp	r5, r6
 8019f1c:	f101 0101 	add.w	r1, r1, #1
 8019f20:	bfa8      	it	ge
 8019f22:	4635      	movge	r5, r6
 8019f24:	b249      	sxtb	r1, r1
 8019f26:	f8ad 5114 	strh.w	r5, [sp, #276]	@ 0x114
 8019f2a:	42a3      	cmp	r3, r4
 8019f2c:	f100 0008 	add.w	r0, r0, #8
 8019f30:	d9a3      	bls.n	8019e7a <MEMS_runMagCal.constprop.0+0x182>
 8019f32:	4293      	cmp	r3, r2
 8019f34:	f081 8117 	bcs.w	801b166 <MEMS_runMagCal.constprop.0+0x146e>
 8019f38:	1ad2      	subs	r2, r2, r3
 8019f3a:	3a01      	subs	r2, #1
 8019f3c:	fa13 f282 	uxtah	r2, r3, r2
 8019f40:	f109 0708 	add.w	r7, r9, #8
 8019f44:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 8019f48:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
 8019f4c:	f04f 0c00 	mov.w	ip, #0
 8019f50:	781a      	ldrb	r2, [r3, #0]
 8019f52:	1c4e      	adds	r6, r1, #1
 8019f54:	2a00      	cmp	r2, #0
 8019f56:	f000 8095 	beq.w	801a084 <MEMS_runMagCal.constprop.0+0x38c>
 8019f5a:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 8019f5e:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 8019f62:	f9bd 10d0 	ldrsh.w	r1, [sp, #208]	@ 0xd0
 8019f66:	f933 2c06 	ldrsh.w	r2, [r3, #-6]
 8019f6a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8019f6e:	ee07 5a10 	vmov	s14, r5
 8019f72:	eeb8 3ac7 	vcvt.f32.s32	s6, s14
 8019f76:	ee07 4a10 	vmov	s14, r4
 8019f7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019f7e:	42a9      	cmp	r1, r5
 8019f80:	ee37 7a64 	vsub.f32	s14, s14, s9
 8019f84:	ee33 3a65 	vsub.f32	s6, s6, s11
 8019f88:	ee27 7a05 	vmul.f32	s14, s14, s10
 8019f8c:	bfb8      	it	lt
 8019f8e:	4629      	movlt	r1, r5
 8019f90:	ee23 3a06 	vmul.f32	s6, s6, s12
 8019f94:	ee27 7a07 	vmul.f32	s14, s14, s14
 8019f98:	f8ad 10d0 	strh.w	r1, [sp, #208]	@ 0xd0
 8019f9c:	b271      	sxtb	r1, r6
 8019f9e:	f933 6c16 	ldrsh.w	r6, [r3, #-22]
 8019fa2:	eea3 7a03 	vfma.f32	s14, s6, s6
 8019fa6:	1b92      	subs	r2, r2, r6
 8019fa8:	f933 6c1e 	ldrsh.w	r6, [r3, #-30]
 8019fac:	ee06 0a90 	vmov	s13, r0
 8019fb0:	1bae      	subs	r6, r5, r6
 8019fb2:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 8019fb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019fba:	f933 6c14 	ldrsh.w	r6, [r3, #-20]
 8019fbe:	ee07 2a10 	vmov	s14, r2
 8019fc2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019fc6:	f933 2c04 	ldrsh.w	r2, [r3, #-4]
 8019fca:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8019fce:	1b92      	subs	r2, r2, r6
 8019fd0:	f933 6c1c 	ldrsh.w	r6, [r3, #-28]
 8019fd4:	ee66 6a84 	vmul.f32	s13, s13, s8
 8019fd8:	1ba6      	subs	r6, r4, r6
 8019fda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019fde:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 8019fe2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8019fe6:	f933 6c12 	ldrsh.w	r6, [r3, #-18]
 8019fea:	ee06 2a90 	vmov	s13, r2
 8019fee:	eeb0 7ac7 	vabs.f32	s14, s14
 8019ff2:	f933 2c02 	ldrsh.w	r2, [r3, #-2]
 8019ff6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8019ffa:	1b92      	subs	r2, r2, r6
 8019ffc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a000:	f933 6c1a 	ldrsh.w	r6, [r3, #-26]
 801a004:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801a008:	eef0 6ae6 	vabs.f32	s13, s13
 801a00c:	1b86      	subs	r6, r0, r6
 801a00e:	ee37 7a26 	vadd.f32	s14, s14, s13
 801a012:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 801a016:	ee06 2a90 	vmov	s13, r2
 801a01a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801a01e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a022:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801a026:	eef0 6ae6 	vabs.f32	s13, s13
 801a02a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a02e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801a032:	ee17 2a10 	vmov	r2, s14
 801a036:	4594      	cmp	ip, r2
 801a038:	bf38      	it	cc
 801a03a:	4694      	movcc	ip, r2
 801a03c:	f9bd 2110 	ldrsh.w	r2, [sp, #272]	@ 0x110
 801a040:	4295      	cmp	r5, r2
 801a042:	bfa8      	it	ge
 801a044:	4615      	movge	r5, r2
 801a046:	f9bd 20d2 	ldrsh.w	r2, [sp, #210]	@ 0xd2
 801a04a:	f8ad 5110 	strh.w	r5, [sp, #272]	@ 0x110
 801a04e:	42a2      	cmp	r2, r4
 801a050:	bfb8      	it	lt
 801a052:	4622      	movlt	r2, r4
 801a054:	f9bd 5112 	ldrsh.w	r5, [sp, #274]	@ 0x112
 801a058:	f8ad 20d2 	strh.w	r2, [sp, #210]	@ 0xd2
 801a05c:	f9bd 20d4 	ldrsh.w	r2, [sp, #212]	@ 0xd4
 801a060:	42a5      	cmp	r5, r4
 801a062:	bfa8      	it	ge
 801a064:	4625      	movge	r5, r4
 801a066:	4282      	cmp	r2, r0
 801a068:	bfb8      	it	lt
 801a06a:	4602      	movlt	r2, r0
 801a06c:	4614      	mov	r4, r2
 801a06e:	f9bd 2114 	ldrsh.w	r2, [sp, #276]	@ 0x114
 801a072:	f8ad 5112 	strh.w	r5, [sp, #274]	@ 0x112
 801a076:	4282      	cmp	r2, r0
 801a078:	bfa8      	it	ge
 801a07a:	4602      	movge	r2, r0
 801a07c:	f8ad 40d4 	strh.w	r4, [sp, #212]	@ 0xd4
 801a080:	f8ad 2114 	strh.w	r2, [sp, #276]	@ 0x114
 801a084:	3308      	adds	r3, #8
 801a086:	429f      	cmp	r7, r3
 801a088:	f47f af62 	bne.w	8019f50 <MEMS_runMagCal.constprop.0+0x258>
 801a08c:	2900      	cmp	r1, #0
 801a08e:	f000 8244 	beq.w	801a51a <MEMS_runMagCal.constprop.0+0x822>
 801a092:	f9bd 20d0 	ldrsh.w	r2, [sp, #208]	@ 0xd0
 801a096:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 801a09a:	f280 823d 	bge.w	801a518 <MEMS_runMagCal.constprop.0+0x820>
 801a09e:	f9bd 4110 	ldrsh.w	r4, [sp, #272]	@ 0x110
 801a0a2:	f514 4f80 	cmn.w	r4, #16384	@ 0x4000
 801a0a6:	f2c0 8237 	blt.w	801a518 <MEMS_runMagCal.constprop.0+0x820>
 801a0aa:	f9bd 30d2 	ldrsh.w	r3, [sp, #210]	@ 0xd2
 801a0ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801a0b2:	f280 8231 	bge.w	801a518 <MEMS_runMagCal.constprop.0+0x820>
 801a0b6:	f9bd 7112 	ldrsh.w	r7, [sp, #274]	@ 0x112
 801a0ba:	f517 4f80 	cmn.w	r7, #16384	@ 0x4000
 801a0be:	f2c0 822b 	blt.w	801a518 <MEMS_runMagCal.constprop.0+0x820>
 801a0c2:	f9bd 00d4 	ldrsh.w	r0, [sp, #212]	@ 0xd4
 801a0c6:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 801a0ca:	f280 8225 	bge.w	801a518 <MEMS_runMagCal.constprop.0+0x820>
 801a0ce:	f9bd 6114 	ldrsh.w	r6, [sp, #276]	@ 0x114
 801a0d2:	f516 4f80 	cmn.w	r6, #16384	@ 0x4000
 801a0d6:	f2c0 821f 	blt.w	801a518 <MEMS_runMagCal.constprop.0+0x820>
 801a0da:	ee07 1a10 	vmov	s14, r1
 801a0de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a0e2:	1bd9      	subs	r1, r3, r7
 801a0e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801a0e8:	1b12      	subs	r2, r2, r4
 801a0ea:	428a      	cmp	r2, r1
 801a0ec:	4613      	mov	r3, r2
 801a0ee:	eba0 0006 	sub.w	r0, r0, r6
 801a0f2:	bfb8      	it	lt
 801a0f4:	460b      	movlt	r3, r1
 801a0f6:	4283      	cmp	r3, r0
 801a0f8:	bfb8      	it	lt
 801a0fa:	4603      	movlt	r3, r0
 801a0fc:	ed1f 7ace 	vldr	s14, [pc, #-824]	@ 8019dc8 <MEMS_runMagCal.constprop.0+0xd0>
 801a100:	eef1 7ae6 	vsqrt.f32	s15, s13
 801a104:	ee06 3a90 	vmov	s13, r3
 801a108:	ee28 7a07 	vmul.f32	s14, s16, s14
 801a10c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a110:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801a114:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801a118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a11c:	f100 81fc 	bmi.w	801a518 <MEMS_runMagCal.constprop.0+0x820>
 801a120:	ee07 ca10 	vmov	s14, ip
 801a124:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801a128:	ed1f 6ad8 	vldr	s12, [pc, #-864]	@ 8019dcc <MEMS_runMagCal.constprop.0+0xd4>
 801a12c:	ee27 7a28 	vmul.f32	s14, s14, s17
 801a130:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801a134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a138:	f300 81ee 	bgt.w	801a518 <MEMS_runMagCal.constprop.0+0x820>
 801a13c:	eeb1 6a04 	vmov.f32	s12, #20	@ 0x40a00000  5.0
 801a140:	ee28 6a06 	vmul.f32	s12, s16, s12
 801a144:	eeb4 6ae6 	vcmpe.f32	s12, s13
 801a148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a14c:	f301 805a 	bgt.w	801b204 <MEMS_runMagCal.constprop.0+0x150c>
 801a150:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801a154:	ee26 7a07 	vmul.f32	s14, s12, s14
 801a158:	eef4 6ac7 	vcmpe.f32	s13, s14
 801a15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a160:	f301 8078 	bgt.w	801b254 <MEMS_runMagCal.constprop.0+0x155c>
 801a164:	2300      	movs	r3, #0
 801a166:	930d      	str	r3, [sp, #52]	@ 0x34
 801a168:	9304      	str	r3, [sp, #16]
 801a16a:	2100      	movs	r1, #0
 801a16c:	ed1f 7ae8 	vldr	s14, [pc, #-928]	@ 8019dd0 <MEMS_runMagCal.constprop.0+0xd8>
 801a170:	f89a 406c 	ldrb.w	r4, [sl, #108]	@ 0x6c
 801a174:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a17c:	f140 81e6 	bpl.w	801a54c <MEMS_runMagCal.constprop.0+0x854>
 801a180:	ed1f 7aec 	vldr	s14, [pc, #-944]	@ 8019dd4 <MEMS_runMagCal.constprop.0+0xdc>
 801a184:	ee27 0a87 	vmul.f32	s0, s15, s14
 801a188:	2c01      	cmp	r4, #1
 801a18a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a18e:	ed8d 0a13 	vstr	s0, [sp, #76]	@ 0x4c
 801a192:	ee17 3a90 	vmov	r3, s15
 801a196:	b29b      	uxth	r3, r3
 801a198:	d90c      	bls.n	801a1b4 <MEMS_runMagCal.constprop.0+0x4bc>
 801a19a:	2bc7      	cmp	r3, #199	@ 0xc7
 801a19c:	f200 8791 	bhi.w	801b0c2 <MEMS_runMagCal.constprop.0+0x13ca>
 801a1a0:	2400      	movs	r4, #0
 801a1a2:	23ff      	movs	r3, #255	@ 0xff
 801a1a4:	f88a 406c 	strb.w	r4, [sl, #108]	@ 0x6c
 801a1a8:	f88a 40a0 	strb.w	r4, [sl, #160]	@ 0xa0
 801a1ac:	f88a 4054 	strb.w	r4, [sl, #84]	@ 0x54
 801a1b0:	f88a 30a2 	strb.w	r3, [sl, #162]	@ 0xa2
 801a1b4:	2900      	cmp	r1, #0
 801a1b6:	f040 81a0 	bne.w	801a4fa <MEMS_runMagCal.constprop.0+0x802>
 801a1ba:	f99a 3026 	ldrsb.w	r3, [sl, #38]	@ 0x26
 801a1be:	f89a 8025 	ldrb.w	r8, [sl, #37]	@ 0x25
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	f2c0 874c 	blt.w	801b060 <MEMS_runMagCal.constprop.0+0x1368>
 801a1c8:	3301      	adds	r3, #1
 801a1ca:	fbb3 f2f8 	udiv	r2, r3, r8
 801a1ce:	fb08 3312 	mls	r3, r8, r2, r3
 801a1d2:	b25b      	sxtb	r3, r3
 801a1d4:	461f      	mov	r7, r3
 801a1d6:	f89a 6024 	ldrb.w	r6, [sl, #36]	@ 0x24
 801a1da:	f88a 3026 	strb.w	r3, [sl, #38]	@ 0x26
 801a1de:	3601      	adds	r6, #1
 801a1e0:	4546      	cmp	r6, r8
 801a1e2:	bfa8      	it	ge
 801a1e4:	4646      	movge	r6, r8
 801a1e6:	b2f5      	uxtb	r5, r6
 801a1e8:	f88a 5024 	strb.w	r5, [sl, #36]	@ 0x24
 801a1ec:	f003 f8d8 	bl	801d3a0 <roundf>
 801a1f0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801a1f4:	eb0a 0347 	add.w	r3, sl, r7, lsl #1
 801a1f8:	ee10 2a10 	vmov	r2, s0
 801a1fc:	f8da 1020 	ldr.w	r1, [sl, #32]
 801a200:	851a      	strh	r2, [r3, #40]	@ 0x28
 801a202:	b129      	cbz	r1, 801a210 <MEMS_runMagCal.constprop.0+0x518>
 801a204:	9a02      	ldr	r2, [sp, #8]
 801a206:	f501 6396 	add.w	r3, r1, #1200	@ 0x4b0
 801a20a:	429a      	cmp	r2, r3
 801a20c:	f0c0 817e 	bcc.w	801a50c <MEMS_runMagCal.constprop.0+0x814>
 801a210:	9b04      	ldr	r3, [sp, #16]
 801a212:	2b01      	cmp	r3, #1
 801a214:	f000 817a 	beq.w	801a50c <MEMS_runMagCal.constprop.0+0x814>
 801a218:	1ea3      	subs	r3, r4, #2
 801a21a:	2b01      	cmp	r3, #1
 801a21c:	f240 8761 	bls.w	801b0e2 <MEMS_runMagCal.constprop.0+0x13ea>
 801a220:	f8da 501c 	ldr.w	r5, [sl, #28]
 801a224:	f89a 3054 	ldrb.w	r3, [sl, #84]	@ 0x54
 801a228:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a22a:	eeb0 ba08 	vmov.f32	s22, #8	@ 0x40400000  3.0
 801a22e:	ee28 ba0b 	vmul.f32	s22, s16, s22
 801a232:	eddf 7acb 	vldr	s15, [pc, #812]	@ 801a560 <MEMS_runMagCal.constprop.0+0x868>
 801a236:	f8da 30a4 	ldr.w	r3, [sl, #164]	@ 0xa4
 801a23a:	ed9f 7aca 	vldr	s14, [pc, #808]	@ 801a564 <MEMS_runMagCal.constprop.0+0x86c>
 801a23e:	f89a 40a0 	ldrb.w	r4, [sl, #160]	@ 0xa0
 801a242:	ee6b 7a27 	vmul.f32	s15, s22, s15
 801a246:	f503 521c 	add.w	r2, r3, #9984	@ 0x2700
 801a24a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801a24e:	ee6b aa0b 	vmul.f32	s21, s22, s22
 801a252:	ee17 1a90 	vmov	r1, s15
 801a256:	b28f      	uxth	r7, r1
 801a258:	9902      	ldr	r1, [sp, #8]
 801a25a:	3210      	adds	r2, #16
 801a25c:	eef7 9a08 	vmov.f32	s19, #120	@ 0x3fc00000  1.5
 801a260:	4291      	cmp	r1, r2
 801a262:	ee6a aa87 	vmul.f32	s21, s21, s14
 801a266:	ee6b 9a29 	vmul.f32	s19, s22, s19
 801a26a:	d951      	bls.n	801a310 <MEMS_runMagCal.constprop.0+0x618>
 801a26c:	f242 3228 	movw	r2, #9000	@ 0x2328
 801a270:	4291      	cmp	r1, r2
 801a272:	f89a 00a1 	ldrb.w	r0, [sl, #161]	@ 0xa1
 801a276:	bf18      	it	ne
 801a278:	f5a1 560c 	subne.w	r6, r1, #8960	@ 0x2300
 801a27c:	f99a 10a2 	ldrsb.w	r1, [sl, #162]	@ 0xa2
 801a280:	bf14      	ite	ne
 801a282:	3e28      	subne	r6, #40	@ 0x28
 801a284:	2600      	moveq	r6, #0
 801a286:	42a0      	cmp	r0, r4
 801a288:	f101 0101 	add.w	r1, r1, #1
 801a28c:	f001 8034 	beq.w	801b2f8 <MEMS_runMagCal.constprop.0+0x1600>
 801a290:	1b0a      	subs	r2, r1, r4
 801a292:	fb92 f1f0 	sdiv	r1, r2, r0
 801a296:	fb00 2111 	mls	r1, r0, r1, r2
 801a29a:	2900      	cmp	r1, #0
 801a29c:	bfb8      	it	lt
 801a29e:	1809      	addlt	r1, r1, r0
 801a2a0:	b209      	sxth	r1, r1
 801a2a2:	2c00      	cmp	r4, #0
 801a2a4:	f001 80c6 	beq.w	801b434 <MEMS_runMagCal.constprop.0+0x173c>
 801a2a8:	1b9b      	subs	r3, r3, r6
 801a2aa:	f8dd e010 	ldr.w	lr, [sp, #16]
 801a2ae:	fa1f f883 	uxth.w	r8, r3
 801a2b2:	eb04 0c01 	add.w	ip, r4, r1
 801a2b6:	e006      	b.n	801a2c6 <MEMS_runMagCal.constprop.0+0x5ce>
 801a2b8:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801a2bc:	3101      	adds	r1, #1
 801a2be:	4561      	cmp	r1, ip
 801a2c0:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 801a2c4:	d01b      	beq.n	801a2fe <MEMS_runMagCal.constprop.0+0x606>
 801a2c6:	fb91 f3f0 	sdiv	r3, r1, r0
 801a2ca:	fb00 1313 	mls	r3, r0, r3, r1
 801a2ce:	b2db      	uxtb	r3, r3
 801a2d0:	3304      	adds	r3, #4
 801a2d2:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
 801a2d6:	f8b2 20a0 	ldrh.w	r2, [r2, #160]	@ 0xa0
 801a2da:	4442      	add	r2, r8
 801a2dc:	b212      	sxth	r2, r2
 801a2de:	2a00      	cmp	r2, #0
 801a2e0:	daea      	bge.n	801a2b8 <MEMS_runMagCal.constprop.0+0x5c0>
 801a2e2:	2c00      	cmp	r4, #0
 801a2e4:	f000 86b8 	beq.w	801b058 <MEMS_runMagCal.constprop.0+0x1360>
 801a2e8:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801a2ec:	3101      	adds	r1, #1
 801a2ee:	3c01      	subs	r4, #1
 801a2f0:	4561      	cmp	r1, ip
 801a2f2:	b2e4      	uxtb	r4, r4
 801a2f4:	f04f 0e01 	mov.w	lr, #1
 801a2f8:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 801a2fc:	d1e3      	bne.n	801a2c6 <MEMS_runMagCal.constprop.0+0x5ce>
 801a2fe:	f1be 0f01 	cmp.w	lr, #1
 801a302:	f88a 40a0 	strb.w	r4, [sl, #160]	@ 0xa0
 801a306:	f001 8069 	beq.w	801b3dc <MEMS_runMagCal.constprop.0+0x16e4>
 801a30a:	f8ca 60a4 	str.w	r6, [sl, #164]	@ 0xa4
 801a30e:	4633      	mov	r3, r6
 801a310:	2c00      	cmp	r4, #0
 801a312:	f000 86ce 	beq.w	801b0b2 <MEMS_runMagCal.constprop.0+0x13ba>
 801a316:	f99a 20a2 	ldrsb.w	r2, [sl, #162]	@ 0xa2
 801a31a:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 801a31e:	f9b2 20c0 	ldrsh.w	r2, [r2, #192]	@ 0xc0
 801a322:	f502 529c 	add.w	r2, r2, #4992	@ 0x1380
 801a326:	3208      	adds	r2, #8
 801a328:	441a      	add	r2, r3
 801a32a:	9b03      	ldr	r3, [sp, #12]
 801a32c:	429a      	cmp	r2, r3
 801a32e:	f0c0 86b4 	bcc.w	801b09a <MEMS_runMagCal.constprop.0+0x13a2>
 801a332:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a334:	b913      	cbnz	r3, 801a33c <MEMS_runMagCal.constprop.0+0x644>
 801a336:	2c0a      	cmp	r4, #10
 801a338:	f240 86bf 	bls.w	801b0ba <MEMS_runMagCal.constprop.0+0x13c2>
 801a33c:	ed9f 9a8a 	vldr	s18, [pc, #552]	@ 801a568 <MEMS_runMagCal.constprop.0+0x870>
 801a340:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a344:	9306      	str	r3, [sp, #24]
 801a346:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 801a34a:	9b04      	ldr	r3, [sp, #16]
 801a34c:	930e      	str	r3, [sp, #56]	@ 0x38
 801a34e:	f04f 0b00 	mov.w	fp, #0
 801a352:	ee28 aa0a 	vmul.f32	s20, s16, s20
 801a356:	ee28 9a89 	vmul.f32	s18, s17, s18
 801a35a:	465b      	mov	r3, fp
 801a35c:	46d8      	mov	r8, fp
 801a35e:	9510      	str	r5, [sp, #64]	@ 0x40
 801a360:	f8cd 901c 	str.w	r9, [sp, #28]
 801a364:	9a07      	ldr	r2, [sp, #28]
 801a366:	f812 1038 	ldrb.w	r1, [r2, r8, lsl #3]
 801a36a:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 801a36e:	2900      	cmp	r1, #0
 801a370:	f000 8150 	beq.w	801a614 <MEMS_runMagCal.constprop.0+0x91c>
 801a374:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
 801a378:	f8d2 4002 	ldr.w	r4, [r2, #2]
 801a37c:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801a380:	6852      	ldr	r2, [r2, #4]
 801a382:	920c      	str	r2, [sp, #48]	@ 0x30
 801a384:	ee07 5a90 	vmov	s15, r5
 801a388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a38c:	f344 420f 	sbfx	r2, r4, #16, #16
 801a390:	eef0 7ae7 	vabs.f32	s15, s15
 801a394:	eef4 7aca 	vcmpe.f32	s15, s20
 801a398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a39c:	ea4f 4924 	mov.w	r9, r4, asr #16
 801a3a0:	d516      	bpl.n	801a3d0 <MEMS_runMagCal.constprop.0+0x6d8>
 801a3a2:	ee07 9a90 	vmov	s15, r9
 801a3a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a3aa:	eef0 7ae7 	vabs.f32	s15, s15
 801a3ae:	eeb4 aae7 	vcmpe.f32	s20, s15
 801a3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3b6:	dd0b      	ble.n	801a3d0 <MEMS_runMagCal.constprop.0+0x6d8>
 801a3b8:	ee07 6a90 	vmov	s15, r6
 801a3bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a3c0:	eef0 7ae7 	vabs.f32	s15, s15
 801a3c4:	eeb4 aae7 	vcmpe.f32	s20, s15
 801a3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3cc:	f300 8122 	bgt.w	801a614 <MEMS_runMagCal.constprop.0+0x91c>
 801a3d0:	f89a 10a0 	ldrb.w	r1, [sl, #160]	@ 0xa0
 801a3d4:	9105      	str	r1, [sp, #20]
 801a3d6:	2900      	cmp	r1, #0
 801a3d8:	f000 85ad 	beq.w	801af36 <MEMS_runMagCal.constprop.0+0x123e>
 801a3dc:	f9ba 33ba 	ldrsh.w	r3, [sl, #954]	@ 0x3ba
 801a3e0:	f9ba 23b8 	ldrsh.w	r2, [sl, #952]	@ 0x3b8
 801a3e4:	eba3 0309 	sub.w	r3, r3, r9
 801a3e8:	fb03 f303 	mul.w	r3, r3, r3
 801a3ec:	1b52      	subs	r2, r2, r5
 801a3ee:	fb02 3202 	mla	r2, r2, r2, r3
 801a3f2:	f9ba 33bc 	ldrsh.w	r3, [sl, #956]	@ 0x3bc
 801a3f6:	1b9b      	subs	r3, r3, r6
 801a3f8:	fb03 2303 	mla	r3, r3, r3, r2
 801a3fc:	ee07 3a90 	vmov	s15, r3
 801a400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a404:	eef4 aae7 	vcmpe.f32	s21, s15
 801a408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a40c:	f300 8102 	bgt.w	801a614 <MEMS_runMagCal.constprop.0+0x91c>
 801a410:	fb95 f3f7 	sdiv	r3, r5, r7
 801a414:	fb07 5313 	mls	r3, r7, r3, r5
 801a418:	2b00      	cmp	r3, #0
 801a41a:	bfb8      	it	lt
 801a41c:	19db      	addlt	r3, r3, r7
 801a41e:	b21b      	sxth	r3, r3
 801a420:	ee07 3a90 	vmov	s15, r3
 801a424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a428:	ee27 0a89 	vmul.f32	s0, s15, s18
 801a42c:	f002 ffb8 	bl	801d3a0 <roundf>
 801a430:	fb99 f3f7 	sdiv	r3, r9, r7
 801a434:	fb07 9313 	mls	r3, r7, r3, r9
 801a438:	2b00      	cmp	r3, #0
 801a43a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a43e:	bfb8      	it	lt
 801a440:	19db      	addlt	r3, r3, r7
 801a442:	b21b      	sxth	r3, r3
 801a444:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
 801a448:	ee07 3a90 	vmov	s15, r3
 801a44c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a450:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 801a454:	9209      	str	r2, [sp, #36]	@ 0x24
 801a456:	ee27 0a89 	vmul.f32	s0, s15, s18
 801a45a:	f002 ffa1 	bl	801d3a0 <roundf>
 801a45e:	fb96 f3f7 	sdiv	r3, r6, r7
 801a462:	fb07 6313 	mls	r3, r7, r3, r6
 801a466:	2b00      	cmp	r3, #0
 801a468:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a46c:	bfb8      	it	lt
 801a46e:	19db      	addlt	r3, r3, r7
 801a470:	b21b      	sxth	r3, r3
 801a472:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
 801a476:	ee07 3a90 	vmov	s15, r3
 801a47a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a47e:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 801a482:	920a      	str	r2, [sp, #40]	@ 0x28
 801a484:	ee27 0a89 	vmul.f32	s0, s15, s18
 801a488:	f002 ff8a 	bl	801d3a0 <roundf>
 801a48c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a490:	e9da 312a 	ldrd	r3, r1, [sl, #168]	@ 0xa8
 801a494:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
 801a498:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 801a49c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a49e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a4a0:	2a1f      	cmp	r2, #31
 801a4a2:	f240 85d3 	bls.w	801b04c <MEMS_runMagCal.constprop.0+0x1354>
 801a4a6:	3a20      	subs	r2, #32
 801a4a8:	2101      	movs	r1, #1
 801a4aa:	fa01 f202 	lsl.w	r2, r1, r2
 801a4ae:	401a      	ands	r2, r3
 801a4b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a4b2:	291f      	cmp	r1, #31
 801a4b4:	e9da 302c 	ldrd	r3, r0, [sl, #176]	@ 0xb0
 801a4b8:	f240 85c1 	bls.w	801b03e <MEMS_runMagCal.constprop.0+0x1346>
 801a4bc:	3920      	subs	r1, #32
 801a4be:	2001      	movs	r0, #1
 801a4c0:	fa00 f101 	lsl.w	r1, r0, r1
 801a4c4:	ea01 0c03 	and.w	ip, r1, r3
 801a4c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a4ca:	291f      	cmp	r1, #31
 801a4cc:	e9da 032e 	ldrd	r0, r3, [sl, #184]	@ 0xb8
 801a4d0:	f240 85ae 	bls.w	801b030 <MEMS_runMagCal.constprop.0+0x1338>
 801a4d4:	f1a1 0020 	sub.w	r0, r1, #32
 801a4d8:	2101      	movs	r1, #1
 801a4da:	fa01 f000 	lsl.w	r0, r1, r0
 801a4de:	4003      	ands	r3, r0
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d149      	bne.n	801a578 <MEMS_runMagCal.constprop.0+0x880>
 801a4e4:	ea5c 0102 	orrs.w	r1, ip, r2
 801a4e8:	d14a      	bne.n	801a580 <MEMS_runMagCal.constprop.0+0x888>
 801a4ea:	f99a 30a2 	ldrsb.w	r3, [sl, #162]	@ 0xa2
 801a4ee:	f89a 00a1 	ldrb.w	r0, [sl, #161]	@ 0xa1
 801a4f2:	f103 0e01 	add.w	lr, r3, #1
 801a4f6:	f000 be3b 	b.w	801b170 <MEMS_runMagCal.constprop.0+0x1478>
 801a4fa:	9902      	ldr	r1, [sp, #8]
 801a4fc:	f8ca 1020 	str.w	r1, [sl, #32]
 801a500:	2200      	movs	r2, #0
 801a502:	23ff      	movs	r3, #255	@ 0xff
 801a504:	f88a 20a0 	strb.w	r2, [sl, #160]	@ 0xa0
 801a508:	f88a 30a2 	strb.w	r3, [sl, #162]	@ 0xa2
 801a50c:	f20d 5d64 	addw	sp, sp, #1380	@ 0x564
 801a510:	ecbd 8b0e 	vpop	{d8-d14}
 801a514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a518:	2102      	movs	r1, #2
 801a51a:	2300      	movs	r3, #0
 801a51c:	930d      	str	r3, [sp, #52]	@ 0x34
 801a51e:	9304      	str	r3, [sp, #16]
 801a520:	e624      	b.n	801a16c <MEMS_runMagCal.constprop.0+0x474>
 801a522:	3b00      	subs	r3, #0
 801a524:	bf18      	it	ne
 801a526:	2301      	movne	r3, #1
 801a528:	e9ca 3306 	strd	r3, r3, [sl, #24]
 801a52c:	2300      	movs	r3, #0
 801a52e:	f88a 30a0 	strb.w	r3, [sl, #160]	@ 0xa0
 801a532:	f8ca 3020 	str.w	r3, [sl, #32]
 801a536:	2300      	movs	r3, #0
 801a538:	e9ca 332a 	strd	r3, r3, [sl, #168]	@ 0xa8
 801a53c:	e9ca 332c 	strd	r3, r3, [sl, #176]	@ 0xb0
 801a540:	e9ca 332e 	strd	r3, r3, [sl, #184]	@ 0xb8
 801a544:	23ff      	movs	r3, #255	@ 0xff
 801a546:	f88a 30a2 	strb.w	r3, [sl, #162]	@ 0xa2
 801a54a:	e465      	b.n	8019e18 <MEMS_runMagCal.constprop.0+0x120>
 801a54c:	eddf 7a07 	vldr	s15, [pc, #28]	@ 801a56c <MEMS_runMagCal.constprop.0+0x874>
 801a550:	2c01      	cmp	r4, #1
 801a552:	edcd 7a13 	vstr	s15, [sp, #76]	@ 0x4c
 801a556:	eeb0 0a67 	vmov.f32	s0, s15
 801a55a:	f67f ae2b 	bls.w	801a1b4 <MEMS_runMagCal.constprop.0+0x4bc>
 801a55e:	e61f      	b.n	801a1a0 <MEMS_runMagCal.constprop.0+0x4a8>
 801a560:	427c0000 	.word	0x427c0000
 801a564:	3f666666 	.word	0x3f666666
 801a568:	3eaaaaab 	.word	0x3eaaaaab
 801a56c:	477fff00 	.word	0x477fff00
 801a570:	42340000 	.word	0x42340000
 801a574:	3faccccd 	.word	0x3faccccd
 801a578:	b112      	cbz	r2, 801a580 <MEMS_runMagCal.constprop.0+0x888>
 801a57a:	f1bc 0f00 	cmp.w	ip, #0
 801a57e:	d149      	bne.n	801a614 <MEMS_runMagCal.constprop.0+0x91c>
 801a580:	f99a 30a2 	ldrsb.w	r3, [sl, #162]	@ 0xa2
 801a584:	f89a 00a1 	ldrb.w	r0, [sl, #161]	@ 0xa1
 801a588:	f103 0e01 	add.w	lr, r3, #1
 801a58c:	9b05      	ldr	r3, [sp, #20]
 801a58e:	4283      	cmp	r3, r0
 801a590:	f000 863e 	beq.w	801b210 <MEMS_runMagCal.constprop.0+0x1518>
 801a594:	ebae 0303 	sub.w	r3, lr, r3
 801a598:	fb93 f2f0 	sdiv	r2, r3, r0
 801a59c:	fb00 3212 	mls	r2, r0, r2, r3
 801a5a0:	2a00      	cmp	r2, #0
 801a5a2:	bfb8      	it	lt
 801a5a4:	1812      	addlt	r2, r2, r0
 801a5a6:	b212      	sxth	r2, r2
 801a5a8:	9b05      	ldr	r3, [sp, #20]
 801a5aa:	9411      	str	r4, [sp, #68]	@ 0x44
 801a5ac:	eb03 0c02 	add.w	ip, r3, r2
 801a5b0:	e002      	b.n	801a5b8 <MEMS_runMagCal.constprop.0+0x8c0>
 801a5b2:	4562      	cmp	r2, ip
 801a5b4:	f000 85db 	beq.w	801b16e <MEMS_runMagCal.constprop.0+0x1476>
 801a5b8:	fb92 f3f0 	sdiv	r3, r2, r0
 801a5bc:	fb00 2313 	mls	r3, r0, r3, r2
 801a5c0:	b2db      	uxtb	r3, r3
 801a5c2:	3304      	adds	r3, #4
 801a5c4:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801a5c8:	3201      	adds	r2, #1
 801a5ca:	f9b3 40a2 	ldrsh.w	r4, [r3, #162]	@ 0xa2
 801a5ce:	f9b3 10a4 	ldrsh.w	r1, [r3, #164]	@ 0xa4
 801a5d2:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 801a5d6:	1b2c      	subs	r4, r5, r4
 801a5d8:	eba9 0101 	sub.w	r1, r9, r1
 801a5dc:	ee07 4a90 	vmov	s15, r4
 801a5e0:	ee06 1a90 	vmov	s13, r1
 801a5e4:	1af3      	subs	r3, r6, r3
 801a5e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a5ea:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a5ee:	ee07 3a10 	vmov	s14, r3
 801a5f2:	eef0 7ae7 	vabs.f32	s15, s15
 801a5f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a5fa:	eef0 6ae6 	vabs.f32	s13, s13
 801a5fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a602:	eeb0 7ac7 	vabs.f32	s14, s14
 801a606:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a60a:	eef4 9ae7 	vcmpe.f32	s19, s15
 801a60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a612:	ddce      	ble.n	801a5b2 <MEMS_runMagCal.constprop.0+0x8ba>
 801a614:	9b06      	ldr	r3, [sp, #24]
 801a616:	9a01      	ldr	r2, [sp, #4]
 801a618:	f108 0801 	add.w	r8, r8, #1
 801a61c:	fa0f f888 	sxth.w	r8, r8
 801a620:	445b      	add	r3, fp
 801a622:	4590      	cmp	r8, r2
 801a624:	fa1f fb83 	uxth.w	fp, r3
 801a628:	4643      	mov	r3, r8
 801a62a:	f6ff ae9b 	blt.w	801a364 <MEMS_runMagCal.constprop.0+0x66c>
 801a62e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801a630:	f89a 3014 	ldrb.w	r3, [sl, #20]
 801a634:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a636:	431a      	orrs	r2, r3
 801a638:	b2d3      	uxtb	r3, r2
 801a63a:	f88a 3014 	strb.w	r3, [sl, #20]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	f43f af64 	beq.w	801a50c <MEMS_runMagCal.constprop.0+0x814>
 801a644:	f89a 30a0 	ldrb.w	r3, [sl, #160]	@ 0xa0
 801a648:	9301      	str	r3, [sp, #4]
 801a64a:	2b19      	cmp	r3, #25
 801a64c:	f67f af5e 	bls.w	801a50c <MEMS_runMagCal.constprop.0+0x814>
 801a650:	b125      	cbz	r5, 801a65c <MEMS_runMagCal.constprop.0+0x964>
 801a652:	f8da 3018 	ldr.w	r3, [sl, #24]
 801a656:	2b00      	cmp	r3, #0
 801a658:	f040 8622 	bne.w	801b2a0 <MEMS_runMagCal.constprop.0+0x15a8>
 801a65c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a65e:	2b00      	cmp	r3, #0
 801a660:	f040 8651 	bne.w	801b306 <MEMS_runMagCal.constprop.0+0x160e>
 801a664:	2300      	movs	r3, #0
 801a666:	9804      	ldr	r0, [sp, #16]
 801a668:	f8da c0b0 	ldr.w	ip, [sl, #176]	@ 0xb0
 801a66c:	f8da 70bc 	ldr.w	r7, [sl, #188]	@ 0xbc
 801a670:	932b      	str	r3, [sp, #172]	@ 0xac
 801a672:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 801a676:	e9cd 3329 	strd	r3, r3, [sp, #164]	@ 0xa4
 801a67a:	e9da 592a 	ldrd	r5, r9, [sl, #168]	@ 0xa8
 801a67e:	e9da 8e2d 	ldrd	r8, lr, [sl, #180]	@ 0xb4
 801a682:	4602      	mov	r2, r0
 801a684:	4604      	mov	r4, r0
 801a686:	2601      	movs	r6, #1
 801a688:	2b1f      	cmp	r3, #31
 801a68a:	f240 843e 	bls.w	801af0a <MEMS_runMagCal.constprop.0+0x1212>
 801a68e:	f1a3 0120 	sub.w	r1, r3, #32
 801a692:	fa06 f101 	lsl.w	r1, r6, r1
 801a696:	420d      	tst	r5, r1
 801a698:	bf1c      	itt	ne
 801a69a:	3001      	addne	r0, #1
 801a69c:	b2c0      	uxtbne	r0, r0
 801a69e:	ea1c 0f01 	tst.w	ip, r1
 801a6a2:	bf18      	it	ne
 801a6a4:	3401      	addne	r4, #1
 801a6a6:	ea01 0107 	and.w	r1, r1, r7
 801a6aa:	f103 0301 	add.w	r3, r3, #1
 801a6ae:	bf18      	it	ne
 801a6b0:	b2e4      	uxtbne	r4, r4
 801a6b2:	2900      	cmp	r1, #0
 801a6b4:	bf18      	it	ne
 801a6b6:	3201      	addne	r2, #1
 801a6b8:	2b40      	cmp	r3, #64	@ 0x40
 801a6ba:	b2d2      	uxtb	r2, r2
 801a6bc:	d1e4      	bne.n	801a688 <MEMS_runMagCal.constprop.0+0x990>
 801a6be:	2805      	cmp	r0, #5
 801a6c0:	f240 841e 	bls.w	801af00 <MEMS_runMagCal.constprop.0+0x1208>
 801a6c4:	2c05      	cmp	r4, #5
 801a6c6:	f240 841b 	bls.w	801af00 <MEMS_runMagCal.constprop.0+0x1208>
 801a6ca:	2a05      	cmp	r2, #5
 801a6cc:	f240 8418 	bls.w	801af00 <MEMS_runMagCal.constprop.0+0x1208>
 801a6d0:	f89a 40a1 	ldrb.w	r4, [sl, #161]	@ 0xa1
 801a6d4:	9b01      	ldr	r3, [sp, #4]
 801a6d6:	f99a 50a2 	ldrsb.w	r5, [sl, #162]	@ 0xa2
 801a6da:	42a3      	cmp	r3, r4
 801a6dc:	f105 0701 	add.w	r7, r5, #1
 801a6e0:	f000 86ab 	beq.w	801b43a <MEMS_runMagCal.constprop.0+0x1742>
 801a6e4:	1afa      	subs	r2, r7, r3
 801a6e6:	fb92 f3f4 	sdiv	r3, r2, r4
 801a6ea:	fb04 2213 	mls	r2, r4, r3, r2
 801a6ee:	2a00      	cmp	r2, #0
 801a6f0:	bfb8      	it	lt
 801a6f2:	1912      	addlt	r2, r2, r4
 801a6f4:	b212      	sxth	r2, r2
 801a6f6:	f102 0315 	add.w	r3, r2, #21
 801a6fa:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801a6fe:	f9b3 601a 	ldrsh.w	r6, [r3, #26]
 801a702:	f9b3 001c 	ldrsh.w	r0, [r3, #28]
 801a706:	f9b3 101e 	ldrsh.w	r1, [r3, #30]
 801a70a:	9b01      	ldr	r3, [sp, #4]
 801a70c:	468c      	mov	ip, r1
 801a70e:	eb03 0902 	add.w	r9, r3, r2
 801a712:	4686      	mov	lr, r0
 801a714:	46b0      	mov	r8, r6
 801a716:	fb92 f3f4 	sdiv	r3, r2, r4
 801a71a:	fb04 2313 	mls	r3, r4, r3, r2
 801a71e:	b2db      	uxtb	r3, r3
 801a720:	3315      	adds	r3, #21
 801a722:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801a726:	3201      	adds	r2, #1
 801a728:	f9b3 b01a 	ldrsh.w	fp, [r3, #26]
 801a72c:	455e      	cmp	r6, fp
 801a72e:	bfb8      	it	lt
 801a730:	465e      	movlt	r6, fp
 801a732:	45d8      	cmp	r8, fp
 801a734:	bfa8      	it	ge
 801a736:	46d8      	movge	r8, fp
 801a738:	f9b3 b01c 	ldrsh.w	fp, [r3, #28]
 801a73c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801a740:	4558      	cmp	r0, fp
 801a742:	bfb8      	it	lt
 801a744:	4658      	movlt	r0, fp
 801a746:	45de      	cmp	lr, fp
 801a748:	bfa8      	it	ge
 801a74a:	46de      	movge	lr, fp
 801a74c:	4299      	cmp	r1, r3
 801a74e:	bfb8      	it	lt
 801a750:	4619      	movlt	r1, r3
 801a752:	459c      	cmp	ip, r3
 801a754:	bfa8      	it	ge
 801a756:	469c      	movge	ip, r3
 801a758:	454a      	cmp	r2, r9
 801a75a:	d1dc      	bne.n	801a716 <MEMS_runMagCal.constprop.0+0xa1e>
 801a75c:	eba6 0308 	sub.w	r3, r6, r8
 801a760:	ed5f 7a7d 	vldr	s15, [pc, #-500]	@ 801a570 <MEMS_runMagCal.constprop.0+0x878>
 801a764:	f89a b054 	ldrb.w	fp, [sl, #84]	@ 0x54
 801a768:	f89a 606c 	ldrb.w	r6, [sl, #108]	@ 0x6c
 801a76c:	b21b      	sxth	r3, r3
 801a76e:	ee68 7a27 	vmul.f32	s15, s16, s15
 801a772:	ee06 3a90 	vmov	s13, r3
 801a776:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 801a77a:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 801a77e:	ee27 7a87 	vmul.f32	s14, s15, s14
 801a782:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801a786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a78a:	f300 8636 	bgt.w	801b3fa <MEMS_runMagCal.constprop.0+0x1702>
 801a78e:	eba0 020e 	sub.w	r2, r0, lr
 801a792:	b212      	sxth	r2, r2
 801a794:	ee06 2a90 	vmov	s13, r2
 801a798:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a79c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801a7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7a4:	f100 8629 	bmi.w	801b3fa <MEMS_runMagCal.constprop.0+0x1702>
 801a7a8:	eba1 010c 	sub.w	r1, r1, ip
 801a7ac:	b209      	sxth	r1, r1
 801a7ae:	ee05 1a90 	vmov	s11, r1
 801a7b2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801a7b6:	eeb4 7ae5 	vcmpe.f32	s14, s11
 801a7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7be:	f100 861c 	bmi.w	801b3fa <MEMS_runMagCal.constprop.0+0x1702>
 801a7c2:	429a      	cmp	r2, r3
 801a7c4:	4610      	mov	r0, r2
 801a7c6:	bfb8      	it	lt
 801a7c8:	4618      	movlt	r0, r3
 801a7ca:	4288      	cmp	r0, r1
 801a7cc:	bfb8      	it	lt
 801a7ce:	4608      	movlt	r0, r1
 801a7d0:	ee09 0a10 	vmov	s18, r0
 801a7d4:	429a      	cmp	r2, r3
 801a7d6:	4610      	mov	r0, r2
 801a7d8:	ee19 5a10 	vmov	r5, s18
 801a7dc:	bfa8      	it	ge
 801a7de:	4618      	movge	r0, r3
 801a7e0:	4288      	cmp	r0, r1
 801a7e2:	bfa8      	it	ge
 801a7e4:	4608      	movge	r0, r1
 801a7e6:	429d      	cmp	r5, r3
 801a7e8:	f8ad 005e 	strh.w	r0, [sp, #94]	@ 0x5e
 801a7ec:	dd03      	ble.n	801a7f6 <MEMS_runMagCal.constprop.0+0xafe>
 801a7ee:	4298      	cmp	r0, r3
 801a7f0:	bfb8      	it	lt
 801a7f2:	f8ad 305e 	strhlt.w	r3, [sp, #94]	@ 0x5e
 801a7f6:	ee19 3a10 	vmov	r3, s18
 801a7fa:	4293      	cmp	r3, r2
 801a7fc:	dd03      	ble.n	801a806 <MEMS_runMagCal.constprop.0+0xb0e>
 801a7fe:	4290      	cmp	r0, r2
 801a800:	bfb8      	it	lt
 801a802:	f8ad 205e 	strhlt.w	r2, [sp, #94]	@ 0x5e
 801a806:	ee19 3a10 	vmov	r3, s18
 801a80a:	4299      	cmp	r1, r3
 801a80c:	da03      	bge.n	801a816 <MEMS_runMagCal.constprop.0+0xb1e>
 801a80e:	4281      	cmp	r1, r0
 801a810:	bfc8      	it	gt
 801a812:	f8ad 105e 	strhgt.w	r1, [sp, #94]	@ 0x5e
 801a816:	ea5b 0306 	orrs.w	r3, fp, r6
 801a81a:	f040 8627 	bne.w	801b46c <MEMS_runMagCal.constprop.0+0x1774>
 801a81e:	eef4 7ac6 	vcmpe.f32	s15, s12
 801a822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a826:	f300 866a 	bgt.w	801b4fe <MEMS_runMagCal.constprop.0+0x1806>
 801a82a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801a82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a832:	f300 8664 	bgt.w	801b4fe <MEMS_runMagCal.constprop.0+0x1806>
 801a836:	eef4 7ae5 	vcmpe.f32	s15, s11
 801a83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a83e:	bfcc      	ite	gt
 801a840:	f04f 0901 	movgt.w	r9, #1
 801a844:	f04f 0900 	movle.w	r9, #0
 801a848:	ed1f 7ab6 	vldr	s14, [pc, #-728]	@ 801a574 <MEMS_runMagCal.constprop.0+0x87c>
 801a84c:	eeb8 5ac9 	vcvt.f32.s32	s10, s18
 801a850:	ee27 7a87 	vmul.f32	s14, s15, s14
 801a854:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801a858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a85c:	f2c0 8338 	blt.w	801aed0 <MEMS_runMagCal.constprop.0+0x11d8>
 801a860:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 801a864:	ee05 3a10 	vmov	s10, r3
 801a868:	eeb7 7a02 	vmov.f32	s14, #114	@ 0x3f900000  1.125
 801a86c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801a870:	ee27 7a87 	vmul.f32	s14, s15, s14
 801a874:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801a878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a87c:	f2c0 8328 	blt.w	801aed0 <MEMS_runMagCal.constprop.0+0x11d8>
 801a880:	ee19 3a10 	vmov	r3, s18
 801a884:	ebb3 0f40 	cmp.w	r3, r0, lsl #1
 801a888:	f280 8322 	bge.w	801aed0 <MEMS_runMagCal.constprop.0+0x11d8>
 801a88c:	ee07 0a10 	vmov	s14, r0
 801a890:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a894:	eeb7 5a04 	vmov.f32	s10, #116	@ 0x3fa00000  1.250
 801a898:	ee27 7a05 	vmul.f32	s14, s14, s10
 801a89c:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8a4:	f140 8314 	bpl.w	801aed0 <MEMS_runMagCal.constprop.0+0x11d8>
 801a8a8:	9b01      	ldr	r3, [sp, #4]
 801a8aa:	42a3      	cmp	r3, r4
 801a8ac:	f001 842a 	beq.w	801c104 <MEMS_runMagCal.constprop.0+0x240c>
 801a8b0:	1afb      	subs	r3, r7, r3
 801a8b2:	fb93 f2f4 	sdiv	r2, r3, r4
 801a8b6:	fb04 3312 	mls	r3, r4, r2, r3
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	bfb8      	it	lt
 801a8be:	191b      	addlt	r3, r3, r4
 801a8c0:	b21b      	sxth	r3, r3
 801a8c2:	fa4f f883 	sxtb.w	r8, r3
 801a8c6:	9b04      	ldr	r3, [sp, #16]
 801a8c8:	9303      	str	r3, [sp, #12]
 801a8ca:	469e      	mov	lr, r3
 801a8cc:	f1c8 0301 	rsb	r3, r8, #1
 801a8d0:	e9cd 3605 	strd	r3, r6, [sp, #20]
 801a8d4:	9707      	str	r7, [sp, #28]
 801a8d6:	4641      	mov	r1, r8
 801a8d8:	f108 0801 	add.w	r8, r8, #1
 801a8dc:	fb91 f3f4 	sdiv	r3, r1, r4
 801a8e0:	fb04 1113 	mls	r1, r4, r3, r1
 801a8e4:	b24a      	sxtb	r2, r1
 801a8e6:	fb98 f3f4 	sdiv	r3, r8, r4
 801a8ea:	fb04 8313 	mls	r3, r4, r3, r8
 801a8ee:	2a00      	cmp	r2, #0
 801a8f0:	b25b      	sxtb	r3, r3
 801a8f2:	f103 0304 	add.w	r3, r3, #4
 801a8f6:	bfbc      	itt	lt
 801a8f8:	1909      	addlt	r1, r1, r4
 801a8fa:	b24a      	sxtblt	r2, r1
 801a8fc:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
 801a900:	3204      	adds	r2, #4
 801a902:	f9b1 c0a2 	ldrsh.w	ip, [r1, #162]	@ 0xa2
 801a906:	eb0a 01c2 	add.w	r1, sl, r2, lsl #3
 801a90a:	f9b1 50a2 	ldrsh.w	r5, [r1, #162]	@ 0xa2
 801a90e:	fa1f f18c 	uxth.w	r1, ip
 801a912:	45ac      	cmp	ip, r5
 801a914:	b2a8      	uxth	r0, r5
 801a916:	bfaa      	itet	ge
 801a918:	1a09      	subge	r1, r1, r0
 801a91a:	1a40      	sublt	r0, r0, r1
 801a91c:	b20e      	sxthge	r6, r1
 801a91e:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
 801a922:	bfb8      	it	lt
 801a924:	b206      	sxthlt	r6, r0
 801a926:	f9b1 c0a4 	ldrsh.w	ip, [r1, #164]	@ 0xa4
 801a92a:	eb0a 01c2 	add.w	r1, sl, r2, lsl #3
 801a92e:	f9b1 50a4 	ldrsh.w	r5, [r1, #164]	@ 0xa4
 801a932:	fa1f f18c 	uxth.w	r1, ip
 801a936:	45ac      	cmp	ip, r5
 801a938:	b2a8      	uxth	r0, r5
 801a93a:	bfaa      	itet	ge
 801a93c:	1a09      	subge	r1, r1, r0
 801a93e:	1a40      	sublt	r0, r0, r1
 801a940:	b20f      	sxthge	r7, r1
 801a942:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
 801a946:	bfb8      	it	lt
 801a948:	b207      	sxthlt	r7, r0
 801a94a:	f9b1 c0a6 	ldrsh.w	ip, [r1, #166]	@ 0xa6
 801a94e:	eb0a 01c2 	add.w	r1, sl, r2, lsl #3
 801a952:	fa1f f08c 	uxth.w	r0, ip
 801a956:	f9b1 50a6 	ldrsh.w	r5, [r1, #166]	@ 0xa6
 801a95a:	b2a9      	uxth	r1, r5
 801a95c:	45ac      	cmp	ip, r5
 801a95e:	bfb4      	ite	lt
 801a960:	1a09      	sublt	r1, r1, r0
 801a962:	1a41      	subge	r1, r0, r1
 801a964:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801a968:	eb0a 00c2 	add.w	r0, sl, r2, lsl #3
 801a96c:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 801a970:	f8b0 30a0 	ldrh.w	r3, [r0, #160]	@ 0xa0
 801a974:	1ad2      	subs	r2, r2, r3
 801a976:	b212      	sxth	r2, r2
 801a978:	2a00      	cmp	r2, #0
 801a97a:	b209      	sxth	r1, r1
 801a97c:	dd20      	ble.n	801a9c0 <MEMS_runMagCal.constprop.0+0xcc8>
 801a97e:	19bb      	adds	r3, r7, r6
 801a980:	ee07 2a90 	vmov	s15, r2
 801a984:	440b      	add	r3, r1
 801a986:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a98a:	fb02 f303 	mul.w	r3, r2, r3
 801a98e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a992:	ee07 3a90 	vmov	s15, r3
 801a996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a99a:	f10e 0e01 	add.w	lr, lr, #1
 801a99e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801a9a2:	fa5f fe8e 	uxtb.w	lr, lr
 801a9a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801a9aa:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801a9ae:	ee17 3a90 	vmov	r3, s15
 801a9b2:	b21b      	sxth	r3, r3
 801a9b4:	2b96      	cmp	r3, #150	@ 0x96
 801a9b6:	dd03      	ble.n	801a9c0 <MEMS_runMagCal.constprop.0+0xcc8>
 801a9b8:	9b03      	ldr	r3, [sp, #12]
 801a9ba:	3301      	adds	r3, #1
 801a9bc:	b2db      	uxtb	r3, r3
 801a9be:	9303      	str	r3, [sp, #12]
 801a9c0:	9b05      	ldr	r3, [sp, #20]
 801a9c2:	9a01      	ldr	r2, [sp, #4]
 801a9c4:	4443      	add	r3, r8
 801a9c6:	b2db      	uxtb	r3, r3
 801a9c8:	429a      	cmp	r2, r3
 801a9ca:	d884      	bhi.n	801a8d6 <MEMS_runMagCal.constprop.0+0xbde>
 801a9cc:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a9d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a9d4:	4573      	cmp	r3, lr
 801a9d6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 801a9da:	f340 8291 	ble.w	801af00 <MEMS_runMagCal.constprop.0+0x1208>
 801a9de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a9e0:	b91b      	cbnz	r3, 801a9ea <MEMS_runMagCal.constprop.0+0xcf2>
 801a9e2:	3e02      	subs	r6, #2
 801a9e4:	2e01      	cmp	r6, #1
 801a9e6:	f241 831b 	bls.w	801c020 <MEMS_runMagCal.constprop.0+0x2328>
 801a9ea:	9b01      	ldr	r3, [sp, #4]
 801a9ec:	42a3      	cmp	r3, r4
 801a9ee:	f000 8590 	beq.w	801b512 <MEMS_runMagCal.constprop.0+0x181a>
 801a9f2:	1afb      	subs	r3, r7, r3
 801a9f4:	fb93 f2f4 	sdiv	r2, r3, r4
 801a9f8:	fb04 3312 	mls	r3, r4, r2, r3
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	bfb8      	it	lt
 801aa00:	191b      	addlt	r3, r3, r4
 801aa02:	b21b      	sxth	r3, r3
 801aa04:	eddf 9aea 	vldr	s19, [pc, #936]	@ 801adb0 <MEMS_runMagCal.constprop.0+0x10b8>
 801aa08:	4619      	mov	r1, r3
 801aa0a:	eeb0 aa69 	vmov.f32	s20, s19
 801aa0e:	eef0 aa69 	vmov.f32	s21, s19
 801aa12:	2000      	movs	r0, #0
 801aa14:	fb91 f2f4 	sdiv	r2, r1, r4
 801aa18:	fb04 1212 	mls	r2, r4, r2, r1
 801aa1c:	b2d2      	uxtb	r2, r2
 801aa1e:	3204      	adds	r2, #4
 801aa20:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 801aa24:	3001      	adds	r0, #1
 801aa26:	f9b2 50a2 	ldrsh.w	r5, [r2, #162]	@ 0xa2
 801aa2a:	ee07 5a90 	vmov	s15, r5
 801aa2e:	f9b2 50a4 	ldrsh.w	r5, [r2, #164]	@ 0xa4
 801aa32:	f9b2 20a6 	ldrsh.w	r2, [r2, #166]	@ 0xa6
 801aa36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa3a:	ee07 5a10 	vmov	s14, r5
 801aa3e:	ee7a aaa7 	vadd.f32	s21, s21, s15
 801aa42:	ee07 2a90 	vmov	s15, r2
 801aa46:	9d01      	ldr	r5, [sp, #4]
 801aa48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801aa4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa50:	b2c2      	uxtb	r2, r0
 801aa52:	4295      	cmp	r5, r2
 801aa54:	ee3a aa07 	vadd.f32	s20, s20, s14
 801aa58:	ee79 9aa7 	vadd.f32	s19, s19, s15
 801aa5c:	f101 0101 	add.w	r1, r1, #1
 801aa60:	d8d8      	bhi.n	801aa14 <MEMS_runMagCal.constprop.0+0xd1c>
 801aa62:	ee07 5a90 	vmov	s15, r5
 801aa66:	eeb8 bae7 	vcvt.f32.s32	s22, s15
 801aa6a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801aa6e:	eec7 4a8b 	vdiv.f32	s9, s15, s22
 801aa72:	2100      	movs	r1, #0
 801aa74:	eddf 6ace 	vldr	s13, [pc, #824]	@ 801adb0 <MEMS_runMagCal.constprop.0+0x10b8>
 801aa78:	ee6a aaa4 	vmul.f32	s21, s21, s9
 801aa7c:	ee2a aa24 	vmul.f32	s20, s20, s9
 801aa80:	ee69 9aa4 	vmul.f32	s19, s19, s9
 801aa84:	eeb0 6a66 	vmov.f32	s12, s13
 801aa88:	eef0 5a66 	vmov.f32	s11, s13
 801aa8c:	eeb0 5a66 	vmov.f32	s10, s13
 801aa90:	eef0 ca66 	vmov.f32	s25, s13
 801aa94:	eef0 7a66 	vmov.f32	s15, s13
 801aa98:	fb93 f2f4 	sdiv	r2, r3, r4
 801aa9c:	fb04 3212 	mls	r2, r4, r2, r3
 801aaa0:	b2d2      	uxtb	r2, r2
 801aaa2:	3204      	adds	r2, #4
 801aaa4:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 801aaa8:	3101      	adds	r1, #1
 801aaaa:	f9b2 00a2 	ldrsh.w	r0, [r2, #162]	@ 0xa2
 801aaae:	ee03 0a90 	vmov	s7, r0
 801aab2:	f9b2 00a4 	ldrsh.w	r0, [r2, #164]	@ 0xa4
 801aab6:	f9b2 20a6 	ldrsh.w	r2, [r2, #166]	@ 0xa6
 801aaba:	ee04 0a10 	vmov	s8, r0
 801aabe:	ee04 2a90 	vmov	s9, r2
 801aac2:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801aac6:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801aaca:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801aace:	9801      	ldr	r0, [sp, #4]
 801aad0:	ee73 3aea 	vsub.f32	s7, s7, s21
 801aad4:	ee34 4a4a 	vsub.f32	s8, s8, s20
 801aad8:	ee74 4ae9 	vsub.f32	s9, s9, s19
 801aadc:	b2ca      	uxtb	r2, r1
 801aade:	4290      	cmp	r0, r2
 801aae0:	eee3 caa3 	vfma.f32	s25, s7, s7
 801aae4:	f103 0301 	add.w	r3, r3, #1
 801aae8:	eea3 5a84 	vfma.f32	s10, s7, s8
 801aaec:	eee3 5aa4 	vfma.f32	s11, s7, s9
 801aaf0:	eee4 7a04 	vfma.f32	s15, s8, s8
 801aaf4:	eea4 6a24 	vfma.f32	s12, s8, s9
 801aaf8:	eee4 6aa4 	vfma.f32	s13, s9, s9
 801aafc:	d8cc      	bhi.n	801aa98 <MEMS_runMagCal.constprop.0+0xda0>
 801aafe:	ee25 4aa5 	vmul.f32	s8, s11, s11
 801ab02:	eddf 4aac 	vldr	s9, [pc, #688]	@ 801adb4 <MEMS_runMagCal.constprop.0+0x10bc>
 801ab06:	eea5 4a05 	vfma.f32	s8, s10, s10
 801ab0a:	eea6 4a06 	vfma.f32	s8, s12, s12
 801ab0e:	eeb4 4ae4 	vcmpe.f32	s8, s9
 801ab12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab16:	d471      	bmi.n	801abfc <MEMS_runMagCal.constprop.0+0xf04>
 801ab18:	ee7c baa7 	vadd.f32	s23, s25, s15
 801ab1c:	ed9f caa6 	vldr	s24, [pc, #664]	@ 801adb8 <MEMS_runMagCal.constprop.0+0x10c0>
 801ab20:	ee7b baa6 	vadd.f32	s23, s23, s13
 801ab24:	eef0 3a00 	vmov.f32	s7, #0	@ 0x40000000  2.0
 801ab28:	ee6b ba8c 	vmul.f32	s23, s23, s24
 801ab2c:	ee77 7aeb 	vsub.f32	s15, s15, s23
 801ab30:	ee3c 7aeb 	vsub.f32	s14, s25, s23
 801ab34:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801ab38:	ee76 6aeb 	vsub.f32	s13, s13, s23
 801ab3c:	eee7 4a07 	vfma.f32	s9, s14, s14
 801ab40:	eee4 4a23 	vfma.f32	s9, s8, s7
 801ab44:	ed9f 4a9d 	vldr	s8, [pc, #628]	@ 801adbc <MEMS_runMagCal.constprop.0+0x10c4>
 801ab48:	eee6 4aa6 	vfma.f32	s9, s13, s13
 801ab4c:	ee64 4a84 	vmul.f32	s9, s9, s8
 801ab50:	eeb1 dae4 	vsqrt.f32	s26, s9
 801ab54:	eec6 4a8d 	vdiv.f32	s9, s13, s26
 801ab58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ab5c:	ee87 4a0d 	vdiv.f32	s8, s14, s26
 801ab60:	ee86 7a8d 	vdiv.f32	s14, s13, s26
 801ab64:	ee25 5a07 	vmul.f32	s10, s10, s14
 801ab68:	ee65 5a87 	vmul.f32	s11, s11, s14
 801ab6c:	ee66 6a07 	vmul.f32	s13, s12, s14
 801ab70:	ee27 7a87 	vmul.f32	s14, s15, s14
 801ab74:	ee65 7a64 	vnmul.f32	s15, s10, s9
 801ab78:	ee26 6ae6 	vnmul.f32	s12, s13, s13
 801ab7c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 801ab80:	eea4 6a87 	vfma.f32	s12, s9, s14
 801ab84:	ee67 7a85 	vmul.f32	s15, s15, s10
 801ab88:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801ab8c:	eee6 7a04 	vfma.f32	s15, s12, s8
 801ab90:	eea6 7a85 	vfma.f32	s14, s13, s10
 801ab94:	eeb8 6a00 	vmov.f32	s12, #128	@ 0xc0000000 -2.0
 801ab98:	eee7 7a25 	vfma.f32	s15, s14, s11
 801ab9c:	eef4 7ac6 	vcmpe.f32	s15, s12
 801aba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aba4:	f241 8299 	bls.w	801c0da <MEMS_runMagCal.constprop.0+0x23e2>
 801aba8:	eef4 7ae3 	vcmpe.f32	s15, s7
 801abac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abb0:	f281 828f 	bge.w	801c0d2 <MEMS_runMagCal.constprop.0+0x23da>
 801abb4:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 801abb8:	ee27 0a80 	vmul.f32	s0, s15, s0
 801abbc:	f002 f89c 	bl	801ccf8 <acosf>
 801abc0:	ee20 ca0c 	vmul.f32	s24, s0, s24
 801abc4:	eeb0 0a4c 	vmov.f32	s0, s24
 801abc8:	f002 f948 	bl	801ce5c <cosf>
 801abcc:	eef0 7a40 	vmov.f32	s15, s0
 801abd0:	ed9f 0a7b 	vldr	s0, [pc, #492]	@ 801adc0 <MEMS_runMagCal.constprop.0+0x10c8>
 801abd4:	ee3d da0d 	vadd.f32	s26, s26, s26
 801abd8:	ee3c 0a00 	vadd.f32	s0, s24, s0
 801abdc:	eef0 ca6b 	vmov.f32	s25, s23
 801abe0:	eeed ca27 	vfma.f32	s25, s26, s15
 801abe4:	f002 f93a 	bl	801ce5c <cosf>
 801abe8:	eef0 6a6b 	vmov.f32	s13, s23
 801abec:	eeed 6a00 	vfma.f32	s13, s26, s0
 801abf0:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
 801abf4:	ee7c 7aa6 	vadd.f32	s15, s25, s13
 801abf8:	eedb 7a86 	vfnms.f32	s15, s23, s12
 801abfc:	eef0 4aec 	vabs.f32	s9, s25
 801ac00:	eef0 5ae7 	vabs.f32	s11, s15
 801ac04:	eef4 5ae4 	vcmpe.f32	s11, s9
 801ac08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac0c:	bf8c      	ite	hi
 801ac0e:	eeb0 5a64 	vmovhi.f32	s10, s9
 801ac12:	eeb0 5a65 	vmovls.f32	s10, s11
 801ac16:	eeb0 6ae6 	vabs.f32	s12, s13
 801ac1a:	eeb4 5ac6 	vcmpe.f32	s10, s12
 801ac1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac22:	eef4 5ae4 	vcmpe.f32	s11, s9
 801ac26:	bf88      	it	hi
 801ac28:	eeb0 5a46 	vmovhi.f32	s10, s12
 801ac2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac30:	bfb8      	it	lt
 801ac32:	eef0 5a64 	vmovlt.f32	s11, s9
 801ac36:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801ac3a:	eef3 4a09 	vmov.f32	s9, #57	@ 0x41c80000  25.0
 801ac3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac42:	ee65 4a24 	vmul.f32	s9, s10, s9
 801ac46:	bfb8      	it	lt
 801ac48:	eeb0 6a65 	vmovlt.f32	s12, s11
 801ac4c:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801ac50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac54:	f301 81cd 	bgt.w	801bff2 <MEMS_runMagCal.constprop.0+0x22fa>
 801ac58:	eef3 5a04 	vmov.f32	s11, #52	@ 0x41a00000  20.0
 801ac5c:	ee25 5a25 	vmul.f32	s10, s10, s11
 801ac60:	eeb4 6ac5 	vcmpe.f32	s12, s10
 801ac64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac68:	dd03      	ble.n	801ac72 <MEMS_runMagCal.constprop.0+0xf7a>
 801ac6a:	9b01      	ldr	r3, [sp, #4]
 801ac6c:	2b22      	cmp	r3, #34	@ 0x22
 801ac6e:	f241 81c0 	bls.w	801bff2 <MEMS_runMagCal.constprop.0+0x22fa>
 801ac72:	ee3c 7aa6 	vadd.f32	s14, s25, s13
 801ac76:	eddf 6a53 	vldr	s13, [pc, #332]	@ 801adc4 <MEMS_runMagCal.constprop.0+0x10cc>
 801ac7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ac7e:	ee87 7a8b 	vdiv.f32	s14, s15, s22
 801ac82:	eef1 7ac7 	vsqrt.f32	s15, s14
 801ac86:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801ac8a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801ac8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac92:	f301 81ae 	bgt.w	801bff2 <MEMS_runMagCal.constprop.0+0x22fa>
 801ac96:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 801ac9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ac9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aca2:	f101 81a6 	bmi.w	801bff2 <MEMS_runMagCal.constprop.0+0x22fa>
 801aca6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801adc8 <MEMS_runMagCal.constprop.0+0x10d0>
 801acaa:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 801acae:	2300      	movs	r3, #0
 801acb0:	e9cd 3330 	strd	r3, r3, [sp, #192]	@ 0xc0
 801acb4:	9333      	str	r3, [sp, #204]	@ 0xcc
 801acb6:	eef8 7ac9 	vcvt.f32.s32	s15, s18
 801acba:	eef4 7ac7 	vcmpe.f32	s15, s14
 801acbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acc2:	d408      	bmi.n	801acd6 <MEMS_runMagCal.constprop.0+0xfde>
 801acc4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801acc8:	ee17 3a10 	vmov	r3, s14
 801accc:	b21b      	sxth	r3, r3
 801acce:	ee09 3a10 	vmov	s18, r3
 801acd2:	eef8 7ac9 	vcvt.f32.s32	s15, s18
 801acd6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801adcc <MEMS_runMagCal.constprop.0+0x10d4>
 801acda:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 801acde:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ace2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ace6:	dc08      	bgt.n	801acfa <MEMS_runMagCal.constprop.0+0x1002>
 801ace8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801acec:	ee17 3a10 	vmov	r3, s14
 801acf0:	b21b      	sxth	r3, r3
 801acf2:	ee09 3a10 	vmov	s18, r3
 801acf6:	eef8 7ac9 	vcvt.f32.s32	s15, s18
 801acfa:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801acfe:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801add0 <MEMS_runMagCal.constprop.0+0x10d8>
 801ad02:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ad06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad0a:	f341 8185 	ble.w	801c018 <MEMS_runMagCal.constprop.0+0x2320>
 801ad0e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801add4 <MEMS_runMagCal.constprop.0+0x10dc>
 801ad12:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ad16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad1a:	f141 817d 	bpl.w	801c018 <MEMS_runMagCal.constprop.0+0x2320>
 801ad1e:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 801add8 <MEMS_runMagCal.constprop.0+0x10e0>
 801ad22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ad26:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801ad2a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801ad2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ad32:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 801adcc <MEMS_runMagCal.constprop.0+0x10d4>
 801ad36:	f8cd 9014 	str.w	r9, [sp, #20]
 801ad3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ad3e:	ee68 aaaa 	vmul.f32	s21, s17, s21
 801ad42:	ee28 aa8a 	vmul.f32	s20, s17, s20
 801ad46:	ee68 9aa9 	vmul.f32	s19, s17, s19
 801ad4a:	ed9f 9a1a 	vldr	s18, [pc, #104]	@ 801adb4 <MEMS_runMagCal.constprop.0+0x10bc>
 801ad4e:	9e04      	ldr	r6, [sp, #16]
 801ad50:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801ad54:	edcd aa2c 	vstr	s21, [sp, #176]	@ 0xb0
 801ad58:	ed8d aa2d 	vstr	s20, [sp, #180]	@ 0xb4
 801ad5c:	edcd 9a2e 	vstr	s19, [sp, #184]	@ 0xb8
 801ad60:	edcd 7a2f 	vstr	s15, [sp, #188]	@ 0xbc
 801ad64:	edcd 7a32 	vstr	s15, [sp, #200]	@ 0xc8
 801ad68:	f8cd b00c 	str.w	fp, [sp, #12]
 801ad6c:	46b8      	mov	r8, r7
 801ad6e:	2500      	movs	r5, #0
 801ad70:	2240      	movs	r2, #64	@ 0x40
 801ad72:	4629      	mov	r1, r5
 801ad74:	a834      	add	r0, sp, #208	@ 0xd0
 801ad76:	e9cd 551f 	strd	r5, r5, [sp, #124]	@ 0x7c
 801ad7a:	e9cd 5521 	strd	r5, r5, [sp, #132]	@ 0x84
 801ad7e:	e9cd 551b 	strd	r5, r5, [sp, #108]	@ 0x6c
 801ad82:	e9cd 551d 	strd	r5, r5, [sp, #116]	@ 0x74
 801ad86:	f005 f806 	bl	801fd96 <memset>
 801ad8a:	4629      	mov	r1, r5
 801ad8c:	2240      	movs	r2, #64	@ 0x40
 801ad8e:	a844      	add	r0, sp, #272	@ 0x110
 801ad90:	f005 f801 	bl	801fd96 <memset>
 801ad94:	ed9d ba2f 	vldr	s22, [sp, #188]	@ 0xbc
 801ad98:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801addc <MEMS_runMagCal.constprop.0+0x10e4>
 801ad9c:	eeb4 bae7 	vcmpe.f32	s22, s15
 801ada0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ada4:	f100 857b 	bmi.w	801b89e <MEMS_runMagCal.constprop.0+0x1ba6>
 801ada8:	45a1      	cmp	r9, r4
 801adaa:	f000 853d 	beq.w	801b828 <MEMS_runMagCal.constprop.0+0x1b30>
 801adae:	e01d      	b.n	801adec <MEMS_runMagCal.constprop.0+0x10f4>
 801adb0:	00000000 	.word	0x00000000
 801adb4:	358637bd 	.word	0x358637bd
 801adb8:	3eaaaaab 	.word	0x3eaaaaab
 801adbc:	3e2aaaab 	.word	0x3e2aaaab
 801adc0:	40060a92 	.word	0x40060a92
 801adc4:	42960000 	.word	0x42960000
 801adc8:	430d0000 	.word	0x430d0000
 801adcc:	423c0000 	.word	0x423c0000
 801add0:	41966667 	.word	0x41966667
 801add4:	433c0000 	.word	0x433c0000
 801add8:	3c2e4c41 	.word	0x3c2e4c41
 801addc:	3dcccccd 	.word	0x3dcccccd
 801ade0:	00000000 	.word	0x00000000
 801ade4:	2b8cbccb 	.word	0x2b8cbccb
 801ade8:	3a83126f 	.word	0x3a83126f
 801adec:	eba8 0309 	sub.w	r3, r8, r9
 801adf0:	fb93 f2f4 	sdiv	r2, r3, r4
 801adf4:	fb04 3312 	mls	r3, r4, r2, r3
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	bfb8      	it	lt
 801adfc:	191b      	addlt	r3, r3, r4
 801adfe:	b21b      	sxth	r3, r3
 801ae00:	ed5f 7a09 	vldr	s15, [pc, #-36]	@ 801ade0 <MEMS_runMagCal.constprop.0+0x10e8>
 801ae04:	ed9d aa2c 	vldr	s20, [sp, #176]	@ 0xb0
 801ae08:	eddd 9a2d 	vldr	s19, [sp, #180]	@ 0xb4
 801ae0c:	eddd aa2e 	vldr	s21, [sp, #184]	@ 0xb8
 801ae10:	ed5f ca0c 	vldr	s25, [pc, #-48]	@ 801ade4 <MEMS_runMagCal.constprop.0+0x10ec>
 801ae14:	eef0 ba67 	vmov.f32	s23, s15
 801ae18:	eef0 5a67 	vmov.f32	s11, s15
 801ae1c:	eeb0 0a67 	vmov.f32	s0, s15
 801ae20:	eef0 0a67 	vmov.f32	s1, s15
 801ae24:	eeb0 5a67 	vmov.f32	s10, s15
 801ae28:	eef0 4a67 	vmov.f32	s9, s15
 801ae2c:	eeb0 1a67 	vmov.f32	s2, s15
 801ae30:	eef0 1a67 	vmov.f32	s3, s15
 801ae34:	eeb0 4a67 	vmov.f32	s8, s15
 801ae38:	eef0 3a67 	vmov.f32	s7, s15
 801ae3c:	eeb0 3a67 	vmov.f32	s6, s15
 801ae40:	eeb0 2a67 	vmov.f32	s4, s15
 801ae44:	eef0 2a67 	vmov.f32	s5, s15
 801ae48:	2100      	movs	r1, #0
 801ae4a:	eeb7 ca00 	vmov.f32	s24, #112	@ 0x3f800000  1.0
 801ae4e:	fb93 f2f4 	sdiv	r2, r3, r4
 801ae52:	fb04 3212 	mls	r2, r4, r2, r3
 801ae56:	b2d2      	uxtb	r2, r2
 801ae58:	3204      	adds	r2, #4
 801ae5a:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 801ae5e:	ee3b dacb 	vsub.f32	s26, s23, s22
 801ae62:	f9b2 00a4 	ldrsh.w	r0, [r2, #164]	@ 0xa4
 801ae66:	ee06 0a10 	vmov	s12, r0
 801ae6a:	f9b2 00a2 	ldrsh.w	r0, [r2, #162]	@ 0xa2
 801ae6e:	f9b2 20a6 	ldrsh.w	r2, [r2, #166]	@ 0xa6
 801ae72:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801ae76:	ee0d 0a90 	vmov	s27, r0
 801ae7a:	ee26 6a28 	vmul.f32	s12, s12, s17
 801ae7e:	eef8 daed 	vcvt.f32.s32	s27, s27
 801ae82:	ee36 7a69 	vsub.f32	s14, s12, s19
 801ae86:	ee6d daa8 	vmul.f32	s27, s27, s17
 801ae8a:	ee06 2a90 	vmov	s13, r2
 801ae8e:	ee3d eaca 	vsub.f32	s28, s27, s20
 801ae92:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ae96:	ee27 7a07 	vmul.f32	s14, s14, s14
 801ae9a:	ee66 6aa8 	vmul.f32	s13, s13, s17
 801ae9e:	eeae 7a0e 	vfma.f32	s14, s28, s28
 801aea2:	ee3a ea6d 	vsub.f32	s28, s20, s27
 801aea6:	ee76 daea 	vsub.f32	s27, s13, s21
 801aeaa:	ee39 6ac6 	vsub.f32	s12, s19, s12
 801aeae:	eead 7aad 	vfma.f32	s14, s27, s27
 801aeb2:	ee7a 6ae6 	vsub.f32	s13, s21, s13
 801aeb6:	eeb4 7aec 	vcmpe.f32	s14, s25
 801aeba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aebe:	f140 834b 	bpl.w	801b558 <MEMS_runMagCal.constprop.0+0x1860>
 801aec2:	3101      	adds	r1, #1
 801aec4:	b2ca      	uxtb	r2, r1
 801aec6:	4591      	cmp	r9, r2
 801aec8:	f103 0301 	add.w	r3, r3, #1
 801aecc:	d8bf      	bhi.n	801ae4e <MEMS_runMagCal.constprop.0+0x1156>
 801aece:	e372      	b.n	801b5b6 <MEMS_runMagCal.constprop.0+0x18be>
 801aed0:	eeb7 7a02 	vmov.f32	s14, #114	@ 0x3f900000  1.125
 801aed4:	ee26 6a07 	vmul.f32	s12, s12, s14
 801aed8:	eef4 7ac6 	vcmpe.f32	s15, s12
 801aedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aee0:	dc0e      	bgt.n	801af00 <MEMS_runMagCal.constprop.0+0x1208>
 801aee2:	ee66 6a87 	vmul.f32	s13, s13, s14
 801aee6:	eef4 7ae6 	vcmpe.f32	s15, s13
 801aeea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aeee:	dc07      	bgt.n	801af00 <MEMS_runMagCal.constprop.0+0x1208>
 801aef0:	ee25 7a87 	vmul.f32	s14, s11, s14
 801aef4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801aef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aefc:	f77f acd4 	ble.w	801a8a8 <MEMS_runMagCal.constprop.0+0xbb0>
 801af00:	2300      	movs	r3, #0
 801af02:	f88a 3014 	strb.w	r3, [sl, #20]
 801af06:	f7ff bb01 	b.w	801a50c <MEMS_runMagCal.constprop.0+0x814>
 801af0a:	fa06 f103 	lsl.w	r1, r6, r3
 801af0e:	ea19 0f01 	tst.w	r9, r1
 801af12:	bf1c      	itt	ne
 801af14:	3001      	addne	r0, #1
 801af16:	b2c0      	uxtbne	r0, r0
 801af18:	ea18 0f01 	tst.w	r8, r1
 801af1c:	bf18      	it	ne
 801af1e:	3401      	addne	r4, #1
 801af20:	ea0e 0101 	and.w	r1, lr, r1
 801af24:	bf18      	it	ne
 801af26:	b2e4      	uxtbne	r4, r4
 801af28:	2900      	cmp	r1, #0
 801af2a:	bf18      	it	ne
 801af2c:	3201      	addne	r2, #1
 801af2e:	b2d2      	uxtb	r2, r2
 801af30:	3301      	adds	r3, #1
 801af32:	f7ff bba9 	b.w	801a688 <MEMS_runMagCal.constprop.0+0x990>
 801af36:	9908      	ldr	r1, [sp, #32]
 801af38:	f8aa 20c4 	strh.w	r2, [sl, #196]	@ 0xc4
 801af3c:	9a03      	ldr	r2, [sp, #12]
 801af3e:	f8ca 43b8 	str.w	r4, [sl, #952]	@ 0x3b8
 801af42:	fb01 2303 	mla	r3, r1, r3, r2
 801af46:	f8ca 30a4 	str.w	r3, [sl, #164]	@ 0xa4
 801af4a:	f04f 0301 	mov.w	r3, #1
 801af4e:	f88a 30a0 	strb.w	r3, [sl, #160]	@ 0xa0
 801af52:	9b05      	ldr	r3, [sp, #20]
 801af54:	f88a 30a2 	strb.w	r3, [sl, #162]	@ 0xa2
 801af58:	f8aa 30c0 	strh.w	r3, [sl, #192]	@ 0xc0
 801af5c:	fb95 f3f7 	sdiv	r3, r5, r7
 801af60:	fb07 5313 	mls	r3, r7, r3, r5
 801af64:	2b00      	cmp	r3, #0
 801af66:	bfb8      	it	lt
 801af68:	19db      	addlt	r3, r3, r7
 801af6a:	b21b      	sxth	r3, r3
 801af6c:	ee07 3a90 	vmov	s15, r3
 801af70:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801af74:	f8aa 50c2 	strh.w	r5, [sl, #194]	@ 0xc2
 801af78:	ee20 0a09 	vmul.f32	s0, s0, s18
 801af7c:	f8aa 60c6 	strh.w	r6, [sl, #198]	@ 0xc6
 801af80:	f8aa 63bc 	strh.w	r6, [sl, #956]	@ 0x3bc
 801af84:	f002 fa0c 	bl	801d3a0 <roundf>
 801af88:	fb99 f3f7 	sdiv	r3, r9, r7
 801af8c:	fb07 9313 	mls	r3, r7, r3, r9
 801af90:	2b00      	cmp	r3, #0
 801af92:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801af96:	bfb8      	it	lt
 801af98:	19db      	addlt	r3, r3, r7
 801af9a:	b21b      	sxth	r3, r3
 801af9c:	edcd 7a05 	vstr	s15, [sp, #20]
 801afa0:	ee07 3a90 	vmov	s15, r3
 801afa4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801afa8:	f89d 4014 	ldrb.w	r4, [sp, #20]
 801afac:	ee20 0a09 	vmul.f32	s0, s0, s18
 801afb0:	f002 f9f6 	bl	801d3a0 <roundf>
 801afb4:	fb96 f3f7 	sdiv	r3, r6, r7
 801afb8:	fb07 6313 	mls	r3, r7, r3, r6
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801afc2:	bfb8      	it	lt
 801afc4:	19db      	addlt	r3, r3, r7
 801afc6:	b21b      	sxth	r3, r3
 801afc8:	edcd 7a05 	vstr	s15, [sp, #20]
 801afcc:	ee07 3a90 	vmov	s15, r3
 801afd0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801afd4:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801afd8:	ee20 0a09 	vmul.f32	s0, s0, s18
 801afdc:	f002 f9e0 	bl	801d3a0 <roundf>
 801afe0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801afe4:	2c1f      	cmp	r4, #31
 801afe6:	edcd 7a05 	vstr	s15, [sp, #20]
 801afea:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801afee:	d94c      	bls.n	801b08a <MEMS_runMagCal.constprop.0+0x1392>
 801aff0:	f8da 30a8 	ldr.w	r3, [sl, #168]	@ 0xa8
 801aff4:	3c20      	subs	r4, #32
 801aff6:	2101      	movs	r1, #1
 801aff8:	40a1      	lsls	r1, r4
 801affa:	430b      	orrs	r3, r1
 801affc:	f8ca 30a8 	str.w	r3, [sl, #168]	@ 0xa8
 801b000:	2d1f      	cmp	r5, #31
 801b002:	d93a      	bls.n	801b07a <MEMS_runMagCal.constprop.0+0x1382>
 801b004:	f8da 10b0 	ldr.w	r1, [sl, #176]	@ 0xb0
 801b008:	3d20      	subs	r5, #32
 801b00a:	2301      	movs	r3, #1
 801b00c:	40ab      	lsls	r3, r5
 801b00e:	430b      	orrs	r3, r1
 801b010:	f8ca 30b0 	str.w	r3, [sl, #176]	@ 0xb0
 801b014:	2a1f      	cmp	r2, #31
 801b016:	d927      	bls.n	801b068 <MEMS_runMagCal.constprop.0+0x1370>
 801b018:	f8da 10bc 	ldr.w	r1, [sl, #188]	@ 0xbc
 801b01c:	3a20      	subs	r2, #32
 801b01e:	2301      	movs	r3, #1
 801b020:	4093      	lsls	r3, r2
 801b022:	430b      	orrs	r3, r1
 801b024:	f8ca 30bc 	str.w	r3, [sl, #188]	@ 0xbc
 801b028:	2301      	movs	r3, #1
 801b02a:	930e      	str	r3, [sp, #56]	@ 0x38
 801b02c:	f7ff baf2 	b.w	801a614 <MEMS_runMagCal.constprop.0+0x91c>
 801b030:	460b      	mov	r3, r1
 801b032:	2101      	movs	r1, #1
 801b034:	fa01 f303 	lsl.w	r3, r1, r3
 801b038:	4003      	ands	r3, r0
 801b03a:	f7ff ba51 	b.w	801a4e0 <MEMS_runMagCal.constprop.0+0x7e8>
 801b03e:	460b      	mov	r3, r1
 801b040:	2101      	movs	r1, #1
 801b042:	4099      	lsls	r1, r3
 801b044:	ea01 0c00 	and.w	ip, r1, r0
 801b048:	f7ff ba3e 	b.w	801a4c8 <MEMS_runMagCal.constprop.0+0x7d0>
 801b04c:	4613      	mov	r3, r2
 801b04e:	2201      	movs	r2, #1
 801b050:	409a      	lsls	r2, r3
 801b052:	400a      	ands	r2, r1
 801b054:	f7ff ba2c 	b.w	801a4b0 <MEMS_runMagCal.constprop.0+0x7b8>
 801b058:	f04f 0e01 	mov.w	lr, #1
 801b05c:	f7ff b92c 	b.w	801a2b8 <MEMS_runMagCal.constprop.0+0x5c0>
 801b060:	2700      	movs	r7, #0
 801b062:	463b      	mov	r3, r7
 801b064:	f7ff b8b7 	b.w	801a1d6 <MEMS_runMagCal.constprop.0+0x4de>
 801b068:	f8da 30b8 	ldr.w	r3, [sl, #184]	@ 0xb8
 801b06c:	2101      	movs	r1, #1
 801b06e:	fa01 f202 	lsl.w	r2, r1, r2
 801b072:	4313      	orrs	r3, r2
 801b074:	f8ca 30b8 	str.w	r3, [sl, #184]	@ 0xb8
 801b078:	e7d6      	b.n	801b028 <MEMS_runMagCal.constprop.0+0x1330>
 801b07a:	f8da 30b4 	ldr.w	r3, [sl, #180]	@ 0xb4
 801b07e:	2101      	movs	r1, #1
 801b080:	40a9      	lsls	r1, r5
 801b082:	430b      	orrs	r3, r1
 801b084:	f8ca 30b4 	str.w	r3, [sl, #180]	@ 0xb4
 801b088:	e7c4      	b.n	801b014 <MEMS_runMagCal.constprop.0+0x131c>
 801b08a:	f8da 30ac 	ldr.w	r3, [sl, #172]	@ 0xac
 801b08e:	2101      	movs	r1, #1
 801b090:	40a1      	lsls	r1, r4
 801b092:	430b      	orrs	r3, r1
 801b094:	f8ca 30ac 	str.w	r3, [sl, #172]	@ 0xac
 801b098:	e7b2      	b.n	801b000 <MEMS_runMagCal.constprop.0+0x1308>
 801b09a:	2300      	movs	r3, #0
 801b09c:	e9ca 332a 	strd	r3, r3, [sl, #168]	@ 0xa8
 801b0a0:	e9ca 332c 	strd	r3, r3, [sl, #176]	@ 0xb0
 801b0a4:	e9ca 332e 	strd	r3, r3, [sl, #184]	@ 0xb8
 801b0a8:	f88a 30a0 	strb.w	r3, [sl, #160]	@ 0xa0
 801b0ac:	23ff      	movs	r3, #255	@ 0xff
 801b0ae:	f88a 30a2 	strb.w	r3, [sl, #162]	@ 0xa2
 801b0b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b0b4:	2b00      	cmp	r3, #0
 801b0b6:	f47f a941 	bne.w	801a33c <MEMS_runMagCal.constprop.0+0x644>
 801b0ba:	9b04      	ldr	r3, [sp, #16]
 801b0bc:	930e      	str	r3, [sp, #56]	@ 0x38
 801b0be:	f7ff bab7 	b.w	801a630 <MEMS_runMagCal.constprop.0+0x938>
 801b0c2:	f241 225b 	movw	r2, #4699	@ 0x125b
 801b0c6:	4293      	cmp	r3, r2
 801b0c8:	f67f a874 	bls.w	801a1b4 <MEMS_runMagCal.constprop.0+0x4bc>
 801b0cc:	f5a3 5392 	sub.w	r3, r3, #4672	@ 0x1240
 801b0d0:	3b1c      	subs	r3, #28
 801b0d2:	b29b      	uxth	r3, r3
 801b0d4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 801b0d8:	4293      	cmp	r3, r2
 801b0da:	f67f a86b 	bls.w	801a1b4 <MEMS_runMagCal.constprop.0+0x4bc>
 801b0de:	f7ff b85f 	b.w	801a1a0 <MEMS_runMagCal.constprop.0+0x4a8>
 801b0e2:	4545      	cmp	r5, r8
 801b0e4:	f000 8118 	beq.w	801b318 <MEMS_runMagCal.constprop.0+0x1620>
 801b0e8:	2c03      	cmp	r4, #3
 801b0ea:	f47f a899 	bne.w	801a220 <MEMS_runMagCal.constprop.0+0x528>
 801b0ee:	ee07 1a90 	vmov	s15, r1
 801b0f2:	ed5f 6ac3 	vldr	s13, [pc, #-780]	@ 801ade8 <MEMS_runMagCal.constprop.0+0x10f0>
 801b0f6:	ed9a 7a06 	vldr	s14, [sl, #24]
 801b0fa:	f89a 3054 	ldrb.w	r3, [sl, #84]	@ 0x54
 801b0fe:	f8da 501c 	ldr.w	r5, [sl, #28]
 801b102:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b108:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801b10c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b110:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b118:	f77f a882 	ble.w	801a220 <MEMS_runMagCal.constprop.0+0x528>
 801b11c:	2d00      	cmp	r5, #0
 801b11e:	f43f a881 	beq.w	801a224 <MEMS_runMagCal.constprop.0+0x52c>
 801b122:	eddd 7a02 	vldr	s15, [sp, #8]
 801b126:	f105 030a 	add.w	r3, r5, #10
 801b12a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801b12e:	ee07 3a90 	vmov	s15, r3
 801b132:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b13a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b142:	f77f a86f 	ble.w	801a224 <MEMS_runMagCal.constprop.0+0x52c>
 801b146:	f89a 3015 	ldrb.w	r3, [sl, #21]
 801b14a:	2b00      	cmp	r3, #0
 801b14c:	f47f a86a 	bne.w	801a224 <MEMS_runMagCal.constprop.0+0x52c>
 801b150:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b152:	2b00      	cmp	r3, #0
 801b154:	f43f a9da 	beq.w	801a50c <MEMS_runMagCal.constprop.0+0x814>
 801b158:	f89a 305c 	ldrb.w	r3, [sl, #92]	@ 0x5c
 801b15c:	2bff      	cmp	r3, #255	@ 0xff
 801b15e:	f47f a9d5 	bne.w	801a50c <MEMS_runMagCal.constprop.0+0x814>
 801b162:	f7ff b862 	b.w	801a22a <MEMS_runMagCal.constprop.0+0x532>
 801b166:	f04f 0c00 	mov.w	ip, #0
 801b16a:	f7fe bf8f 	b.w	801a08c <MEMS_runMagCal.constprop.0+0x394>
 801b16e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b170:	fb9e f2f0 	sdiv	r2, lr, r0
 801b174:	fb00 e212 	mls	r2, r0, r2, lr
 801b178:	b252      	sxtb	r2, r2
 801b17a:	f88a 20a2 	strb.w	r2, [sl, #162]	@ 0xa2
 801b17e:	3204      	adds	r2, #4
 801b180:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 801b184:	9b05      	ldr	r3, [sp, #20]
 801b186:	f8a2 50a2 	strh.w	r5, [r2, #162]	@ 0xa2
 801b18a:	3301      	adds	r3, #1
 801b18c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801b18e:	f8da 10a4 	ldr.w	r1, [sl, #164]	@ 0xa4
 801b192:	f8c2 50a4 	str.w	r5, [r2, #164]	@ 0xa4
 801b196:	4283      	cmp	r3, r0
 801b198:	f8ca 43b8 	str.w	r4, [sl, #952]	@ 0x3b8
 801b19c:	9c03      	ldr	r4, [sp, #12]
 801b19e:	f8aa 63bc 	strh.w	r6, [sl, #956]	@ 0x3bc
 801b1a2:	bfa8      	it	ge
 801b1a4:	4603      	movge	r3, r0
 801b1a6:	b2db      	uxtb	r3, r3
 801b1a8:	1a61      	subs	r1, r4, r1
 801b1aa:	4459      	add	r1, fp
 801b1ac:	4283      	cmp	r3, r0
 801b1ae:	f88a 30a0 	strb.w	r3, [sl, #160]	@ 0xa0
 801b1b2:	f8a2 10a0 	strh.w	r1, [r2, #160]	@ 0xa0
 801b1b6:	f000 811a 	beq.w	801b3ee <MEMS_runMagCal.constprop.0+0x16f6>
 801b1ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b1bc:	2b1f      	cmp	r3, #31
 801b1be:	d940      	bls.n	801b242 <MEMS_runMagCal.constprop.0+0x154a>
 801b1c0:	f1a3 0120 	sub.w	r1, r3, #32
 801b1c4:	2201      	movs	r2, #1
 801b1c6:	f8da 30a8 	ldr.w	r3, [sl, #168]	@ 0xa8
 801b1ca:	408a      	lsls	r2, r1
 801b1cc:	4313      	orrs	r3, r2
 801b1ce:	f8ca 30a8 	str.w	r3, [sl, #168]	@ 0xa8
 801b1d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b1d4:	2b1f      	cmp	r3, #31
 801b1d6:	d92b      	bls.n	801b230 <MEMS_runMagCal.constprop.0+0x1538>
 801b1d8:	f8da 20b0 	ldr.w	r2, [sl, #176]	@ 0xb0
 801b1dc:	f1a3 0120 	sub.w	r1, r3, #32
 801b1e0:	2301      	movs	r3, #1
 801b1e2:	408b      	lsls	r3, r1
 801b1e4:	4313      	orrs	r3, r2
 801b1e6:	f8ca 30b0 	str.w	r3, [sl, #176]	@ 0xb0
 801b1ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b1ec:	2b1f      	cmp	r3, #31
 801b1ee:	d916      	bls.n	801b21e <MEMS_runMagCal.constprop.0+0x1526>
 801b1f0:	f8da 20bc 	ldr.w	r2, [sl, #188]	@ 0xbc
 801b1f4:	f1a3 0120 	sub.w	r1, r3, #32
 801b1f8:	2301      	movs	r3, #1
 801b1fa:	408b      	lsls	r3, r1
 801b1fc:	4313      	orrs	r3, r2
 801b1fe:	f8ca 30bc 	str.w	r3, [sl, #188]	@ 0xbc
 801b202:	e711      	b.n	801b028 <MEMS_runMagCal.constprop.0+0x1330>
 801b204:	2300      	movs	r3, #0
 801b206:	930d      	str	r3, [sp, #52]	@ 0x34
 801b208:	2301      	movs	r3, #1
 801b20a:	9304      	str	r3, [sp, #16]
 801b20c:	f7fe bfad 	b.w	801a16a <MEMS_runMagCal.constprop.0+0x472>
 801b210:	fb9e f2f3 	sdiv	r2, lr, r3
 801b214:	fb03 e212 	mls	r2, r3, r2, lr
 801b218:	b212      	sxth	r2, r2
 801b21a:	f7ff b9c5 	b.w	801a5a8 <MEMS_runMagCal.constprop.0+0x8b0>
 801b21e:	4619      	mov	r1, r3
 801b220:	2201      	movs	r2, #1
 801b222:	f8da 30b8 	ldr.w	r3, [sl, #184]	@ 0xb8
 801b226:	408a      	lsls	r2, r1
 801b228:	4313      	orrs	r3, r2
 801b22a:	f8ca 30b8 	str.w	r3, [sl, #184]	@ 0xb8
 801b22e:	e6fb      	b.n	801b028 <MEMS_runMagCal.constprop.0+0x1330>
 801b230:	4619      	mov	r1, r3
 801b232:	2201      	movs	r2, #1
 801b234:	f8da 30b4 	ldr.w	r3, [sl, #180]	@ 0xb4
 801b238:	408a      	lsls	r2, r1
 801b23a:	4313      	orrs	r3, r2
 801b23c:	f8ca 30b4 	str.w	r3, [sl, #180]	@ 0xb4
 801b240:	e7d3      	b.n	801b1ea <MEMS_runMagCal.constprop.0+0x14f2>
 801b242:	4619      	mov	r1, r3
 801b244:	2201      	movs	r2, #1
 801b246:	f8da 30ac 	ldr.w	r3, [sl, #172]	@ 0xac
 801b24a:	408a      	lsls	r2, r1
 801b24c:	4313      	orrs	r3, r2
 801b24e:	f8ca 30ac 	str.w	r3, [sl, #172]	@ 0xac
 801b252:	e7be      	b.n	801b1d2 <MEMS_runMagCal.constprop.0+0x14da>
 801b254:	ee07 2a10 	vmov	s14, r2
 801b258:	ee36 6a06 	vadd.f32	s12, s12, s12
 801b25c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b260:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801b264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b268:	f77e af7c 	ble.w	801a164 <MEMS_runMagCal.constprop.0+0x46c>
 801b26c:	ee07 1a10 	vmov	s14, r1
 801b270:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b274:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801b278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b27c:	f57e af72 	bpl.w	801a164 <MEMS_runMagCal.constprop.0+0x46c>
 801b280:	ee07 0a10 	vmov	s14, r0
 801b284:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b288:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801b28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b290:	bf4c      	ite	mi
 801b292:	2301      	movmi	r3, #1
 801b294:	2300      	movpl	r3, #0
 801b296:	930d      	str	r3, [sp, #52]	@ 0x34
 801b298:	2300      	movs	r3, #0
 801b29a:	9304      	str	r3, [sp, #16]
 801b29c:	f7fe bf65 	b.w	801a16a <MEMS_runMagCal.constprop.0+0x472>
 801b2a0:	ee07 3a90 	vmov	s15, r3
 801b2a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801b2a8:	eddd 7a02 	vldr	s15, [sp, #8]
 801b2ac:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 801b524 <MEMS_runMagCal.constprop.0+0x182c>
 801b2b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b2b4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 801b2b8:	ee67 7a86 	vmul.f32	s15, s15, s12
 801b2bc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801b2c0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801b2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2c8:	f63f a9c8 	bhi.w	801a65c <MEMS_runMagCal.constprop.0+0x964>
 801b2cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	f43f a91c 	beq.w	801a50c <MEMS_runMagCal.constprop.0+0x814>
 801b2d4:	ee07 5a10 	vmov	s14, r5
 801b2d8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 801b2dc:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 801b2e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b2e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2ec:	bf4c      	ite	mi
 801b2ee:	2301      	movmi	r3, #1
 801b2f0:	2300      	movpl	r3, #0
 801b2f2:	930d      	str	r3, [sp, #52]	@ 0x34
 801b2f4:	f7ff b9b6 	b.w	801a664 <MEMS_runMagCal.constprop.0+0x96c>
 801b2f8:	fb91 f2f4 	sdiv	r2, r1, r4
 801b2fc:	fb04 1112 	mls	r1, r4, r2, r1
 801b300:	b209      	sxth	r1, r1
 801b302:	f7fe bfce 	b.w	801a2a2 <MEMS_runMagCal.constprop.0+0x5aa>
 801b306:	eddd 7a02 	vldr	s15, [sp, #8]
 801b30a:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 801b524 <MEMS_runMagCal.constprop.0+0x182c>
 801b30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b312:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b316:	e7dd      	b.n	801b2d4 <MEMS_runMagCal.constprop.0+0x15dc>
 801b318:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 801b544 <MEMS_runMagCal.constprop.0+0x184c>
 801b31c:	1c7b      	adds	r3, r7, #1
 801b31e:	edcd 6a13 	vstr	s13, [sp, #76]	@ 0x4c
 801b322:	af14      	add	r7, sp, #80	@ 0x50
 801b324:	fb93 f2f8 	sdiv	r2, r3, r8
 801b328:	edc7 6a00 	vstr	s13, [r7]
 801b32c:	fb08 3312 	mls	r3, r8, r2, r3
 801b330:	f1b8 0f00 	cmp.w	r8, #0
 801b334:	f000 80e7 	beq.w	801b506 <MEMS_runMagCal.constprop.0+0x180e>
 801b338:	b29b      	uxth	r3, r3
 801b33a:	eeb0 6a66 	vmov.f32	s12, s13
 801b33e:	eb08 0e03 	add.w	lr, r8, r3
 801b342:	f241 2c5c 	movw	ip, #4700	@ 0x125c
 801b346:	fbb3 f2f8 	udiv	r2, r3, r8
 801b34a:	fb08 3212 	mls	r2, r8, r2, r3
 801b34e:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 801b352:	3301      	adds	r3, #1
 801b354:	8d10      	ldrh	r0, [r2, #40]	@ 0x28
 801b356:	4560      	cmp	r0, ip
 801b358:	f5a0 5292 	sub.w	r2, r0, #4672	@ 0x1240
 801b35c:	f1a2 021c 	sub.w	r2, r2, #28
 801b360:	bf98      	it	ls
 801b362:	ebac 0200 	subls.w	r2, ip, r0
 801b366:	ee07 0a90 	vmov	s15, r0
 801b36a:	b292      	uxth	r2, r2
 801b36c:	fb02 f202 	mul.w	r2, r2, r2
 801b370:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b374:	ee07 2a90 	vmov	s15, r2
 801b378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b37c:	4573      	cmp	r3, lr
 801b37e:	ee36 6a07 	vadd.f32	s12, s12, s14
 801b382:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801b386:	d1de      	bne.n	801b346 <MEMS_runMagCal.constprop.0+0x164e>
 801b388:	ee07 6a90 	vmov	s15, r6
 801b38c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b390:	eddf 5a65 	vldr	s11, [pc, #404]	@ 801b528 <MEMS_runMagCal.constprop.0+0x1830>
 801b394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b398:	eec6 6a27 	vdiv.f32	s13, s12, s15
 801b39c:	eef1 7ac7 	vsqrt.f32	s15, s14
 801b3a0:	ed9f 6a62 	vldr	s12, [pc, #392]	@ 801b52c <MEMS_runMagCal.constprop.0+0x1834>
 801b3a4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801b3a8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801b3ac:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801b3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3b4:	edcd 6a13 	vstr	s13, [sp, #76]	@ 0x4c
 801b3b8:	edc7 7a00 	vstr	s15, [r7]
 801b3bc:	dd44      	ble.n	801b448 <MEMS_runMagCal.constprop.0+0x1750>
 801b3be:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801b530 <MEMS_runMagCal.constprop.0+0x1838>
 801b3c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b3c6:	2302      	movs	r3, #2
 801b3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3cc:	f88a 306c 	strb.w	r3, [sl, #108]	@ 0x6c
 801b3d0:	bfc4      	itt	gt
 801b3d2:	2301      	movgt	r3, #1
 801b3d4:	f88a 3015 	strbgt.w	r3, [sl, #21]
 801b3d8:	f7fe bf22 	b.w	801a220 <MEMS_runMagCal.constprop.0+0x528>
 801b3dc:	eeb0 0a4b 	vmov.f32	s0, s22
 801b3e0:	4638      	mov	r0, r7
 801b3e2:	f7f9 fd25 	bl	8014e30 <MEMS_updateMagBufferIndex.constprop.0>
 801b3e6:	f89a 40a0 	ldrb.w	r4, [sl, #160]	@ 0xa0
 801b3ea:	f7fe bf8e 	b.w	801a30a <MEMS_runMagCal.constprop.0+0x612>
 801b3ee:	eeb0 0a4b 	vmov.f32	s0, s22
 801b3f2:	4638      	mov	r0, r7
 801b3f4:	f7f9 fd1c 	bl	8014e30 <MEMS_updateMagBufferIndex.constprop.0>
 801b3f8:	e6df      	b.n	801b1ba <MEMS_runMagCal.constprop.0+0x14c2>
 801b3fa:	eb0a 03c5 	add.w	r3, sl, r5, lsl #3
 801b3fe:	f8da 20a4 	ldr.w	r2, [sl, #164]	@ 0xa4
 801b402:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 801b406:	f8da 1020 	ldr.w	r1, [sl, #32]
 801b40a:	4413      	add	r3, r2
 801b40c:	4299      	cmp	r1, r3
 801b40e:	f4bf ad77 	bcs.w	801af00 <MEMS_runMagCal.constprop.0+0x1208>
 801b412:	f8da 301c 	ldr.w	r3, [sl, #28]
 801b416:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801b41a:	fb01 f303 	mul.w	r3, r1, r3
 801b41e:	3364      	adds	r3, #100	@ 0x64
 801b420:	4293      	cmp	r3, r2
 801b422:	bf38      	it	cc
 801b424:	4613      	movcc	r3, r2
 801b426:	2200      	movs	r2, #0
 801b428:	f8ca 3020 	str.w	r3, [sl, #32]
 801b42c:	f88a 2014 	strb.w	r2, [sl, #20]
 801b430:	f7ff b86c 	b.w	801a50c <MEMS_runMagCal.constprop.0+0x814>
 801b434:	f8ca 60a4 	str.w	r6, [sl, #164]	@ 0xa4
 801b438:	e63b      	b.n	801b0b2 <MEMS_runMagCal.constprop.0+0x13ba>
 801b43a:	fb97 f2f3 	sdiv	r2, r7, r3
 801b43e:	fb03 7212 	mls	r2, r3, r2, r7
 801b442:	b212      	sxth	r2, r2
 801b444:	f7ff b957 	b.w	801a6f6 <MEMS_runMagCal.constprop.0+0x9fe>
 801b448:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 801b534 <MEMS_runMagCal.constprop.0+0x183c>
 801b44c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b454:	eddf 7a36 	vldr	s15, [pc, #216]	@ 801b530 <MEMS_runMagCal.constprop.0+0x1838>
 801b458:	d444      	bmi.n	801b4e4 <MEMS_runMagCal.constprop.0+0x17ec>
 801b45a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b462:	bfc4      	itt	gt
 801b464:	2301      	movgt	r3, #1
 801b466:	f88a 3015 	strbgt.w	r3, [sl, #21]
 801b46a:	e63d      	b.n	801b0e8 <MEMS_runMagCal.constprop.0+0x13f0>
 801b46c:	ed9a 5a23 	vldr	s10, [sl, #140]	@ 0x8c
 801b470:	ed9a 7a1f 	vldr	s14, [sl, #124]	@ 0x7c
 801b474:	edda 4a27 	vldr	s9, [sl, #156]	@ 0x9c
 801b478:	ee37 7a05 	vadd.f32	s14, s14, s10
 801b47c:	ed9f 5a2e 	vldr	s10, [pc, #184]	@ 801b538 <MEMS_runMagCal.constprop.0+0x1840>
 801b480:	ee37 7a24 	vadd.f32	s14, s14, s9
 801b484:	eef7 4a02 	vmov.f32	s9, #114	@ 0x3f900000  1.125
 801b488:	ee27 7a05 	vmul.f32	s14, s14, s10
 801b48c:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 801b490:	eeb4 7ae4 	vcmpe.f32	s14, s9
 801b494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b498:	bf88      	it	hi
 801b49a:	eeb0 7a64 	vmovhi.f32	s14, s9
 801b49e:	eeb4 7ac5 	vcmpe.f32	s14, s10
 801b4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4a6:	bfb8      	it	lt
 801b4a8:	eeb0 7a45 	vmovlt.f32	s14, s10
 801b4ac:	ee26 6a07 	vmul.f32	s12, s12, s14
 801b4b0:	eef4 7ac6 	vcmpe.f32	s15, s12
 801b4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4b8:	f73f ad22 	bgt.w	801af00 <MEMS_runMagCal.constprop.0+0x1208>
 801b4bc:	ee66 6a87 	vmul.f32	s13, s13, s14
 801b4c0:	eef4 7ae6 	vcmpe.f32	s15, s13
 801b4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4c8:	f73f ad1a 	bgt.w	801af00 <MEMS_runMagCal.constprop.0+0x1208>
 801b4cc:	ee65 5a87 	vmul.f32	s11, s11, s14
 801b4d0:	eef4 7ae5 	vcmpe.f32	s15, s11
 801b4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4d8:	f73f ad12 	bgt.w	801af00 <MEMS_runMagCal.constprop.0+0x1208>
 801b4dc:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801b4e0:	f7ff b9e2 	b.w	801a8a8 <MEMS_runMagCal.constprop.0+0xbb0>
 801b4e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b4e8:	2303      	movs	r3, #3
 801b4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4ee:	f88a 306c 	strb.w	r3, [sl, #108]	@ 0x6c
 801b4f2:	bfd4      	ite	le
 801b4f4:	2300      	movle	r3, #0
 801b4f6:	2301      	movgt	r3, #1
 801b4f8:	f88a 3015 	strb.w	r3, [sl, #21]
 801b4fc:	e5f7      	b.n	801b0ee <MEMS_runMagCal.constprop.0+0x13f6>
 801b4fe:	f04f 0901 	mov.w	r9, #1
 801b502:	f7ff b9a1 	b.w	801a848 <MEMS_runMagCal.constprop.0+0xb50>
 801b506:	2303      	movs	r3, #3
 801b508:	f88a 5015 	strb.w	r5, [sl, #21]
 801b50c:	f88a 306c 	strb.w	r3, [sl, #108]	@ 0x6c
 801b510:	e5ed      	b.n	801b0ee <MEMS_runMagCal.constprop.0+0x13f6>
 801b512:	461a      	mov	r2, r3
 801b514:	fb97 f3f3 	sdiv	r3, r7, r3
 801b518:	fb02 7313 	mls	r3, r2, r3, r7
 801b51c:	b21b      	sxth	r3, r3
 801b51e:	f7ff ba71 	b.w	801aa04 <MEMS_runMagCal.constprop.0+0xd0c>
 801b522:	bf00      	nop
 801b524:	3a83126f 	.word	0x3a83126f
 801b528:	3c23d70a 	.word	0x3c23d70a
 801b52c:	4b095440 	.word	0x4b095440
 801b530:	481c4000 	.word	0x481c4000
 801b534:	471c4000 	.word	0x471c4000
 801b538:	3eaaaaab 	.word	0x3eaaaaab
 801b53c:	3e99999a 	.word	0x3e99999a
 801b540:	3f666666 	.word	0x3f666666
 801b544:	00000000 	.word	0x00000000
 801b548:	41f00001 	.word	0x41f00001
 801b54c:	423c0000 	.word	0x423c0000
 801b550:	400ccccd 	.word	0x400ccccd
 801b554:	3dcccccd 	.word	0x3dcccccd
 801b558:	eef1 dac7 	vsqrt.f32	s27, s14
 801b55c:	3101      	adds	r1, #1
 801b55e:	b2ca      	uxtb	r2, r1
 801b560:	4591      	cmp	r9, r2
 801b562:	f103 0301 	add.w	r3, r3, #1
 801b566:	ee77 7a8c 	vadd.f32	s15, s15, s24
 801b56a:	ee8c 7a2d 	vdiv.f32	s14, s24, s27
 801b56e:	ee7d ba2d 	vadd.f32	s23, s26, s27
 801b572:	ee26 6a07 	vmul.f32	s12, s12, s14
 801b576:	ee2e da07 	vmul.f32	s26, s28, s14
 801b57a:	ee7b da6d 	vsub.f32	s27, s22, s27
 801b57e:	ee26 7a87 	vmul.f32	s14, s13, s14
 801b582:	eeed 2a8d 	vfma.f32	s5, s27, s26
 801b586:	eead 2a0d 	vfma.f32	s4, s26, s26
 801b58a:	eead 3a06 	vfma.f32	s6, s26, s12
 801b58e:	eeed 3a07 	vfma.f32	s7, s26, s14
 801b592:	eeed 1a86 	vfma.f32	s3, s27, s12
 801b596:	eeed 0a87 	vfma.f32	s1, s27, s14
 801b59a:	eea6 1a06 	vfma.f32	s2, s12, s12
 801b59e:	eee6 4a07 	vfma.f32	s9, s12, s14
 801b5a2:	eea7 0a07 	vfma.f32	s0, s14, s14
 801b5a6:	ee34 4a4d 	vsub.f32	s8, s8, s26
 801b5aa:	ee35 5a46 	vsub.f32	s10, s10, s12
 801b5ae:	ee75 5ac7 	vsub.f32	s11, s11, s14
 801b5b2:	f63f ac4c 	bhi.w	801ae4e <MEMS_runMagCal.constprop.0+0x1156>
 801b5b6:	2240      	movs	r2, #64	@ 0x40
 801b5b8:	2100      	movs	r1, #0
 801b5ba:	a844      	add	r0, sp, #272	@ 0x110
 801b5bc:	edcd 7a43 	vstr	s15, [sp, #268]	@ 0x10c
 801b5c0:	edcd ba22 	vstr	s23, [sp, #136]	@ 0x88
 801b5c4:	ed8d 0a3e 	vstr	s0, [sp, #248]	@ 0xf8
 801b5c8:	edcd 0a21 	vstr	s1, [sp, #132]	@ 0x84
 801b5cc:	ed8d 1a39 	vstr	s2, [sp, #228]	@ 0xe4
 801b5d0:	edcd 5a3f 	vstr	s11, [sp, #252]	@ 0xfc
 801b5d4:	ed8d 5a3b 	vstr	s10, [sp, #236]	@ 0xec
 801b5d8:	edcd 4a3a 	vstr	s9, [sp, #232]	@ 0xe8
 801b5dc:	edcd 1a20 	vstr	s3, [sp, #128]	@ 0x80
 801b5e0:	ed8d 4a37 	vstr	s8, [sp, #220]	@ 0xdc
 801b5e4:	edcd 3a36 	vstr	s7, [sp, #216]	@ 0xd8
 801b5e8:	ed8d 3a35 	vstr	s6, [sp, #212]	@ 0xd4
 801b5ec:	ed8d 2a34 	vstr	s4, [sp, #208]	@ 0xd0
 801b5f0:	edcd 2a1f 	vstr	s5, [sp, #124]	@ 0x7c
 801b5f4:	ed8d 3a38 	vstr	s6, [sp, #224]	@ 0xe0
 801b5f8:	edcd 3a3c 	vstr	s7, [sp, #240]	@ 0xf0
 801b5fc:	ed8d 4a40 	vstr	s8, [sp, #256]	@ 0x100
 801b600:	edcd 4a3d 	vstr	s9, [sp, #244]	@ 0xf4
 801b604:	ed8d 5a41 	vstr	s10, [sp, #260]	@ 0x104
 801b608:	edcd 5a42 	vstr	s11, [sp, #264]	@ 0x108
 801b60c:	f004 fbc3 	bl	801fd96 <memset>
 801b610:	a834      	add	r0, sp, #208	@ 0xd0
 801b612:	ab44      	add	r3, sp, #272	@ 0x110
 801b614:	4601      	mov	r1, r0
 801b616:	2200      	movs	r2, #0
 801b618:	2a00      	cmp	r2, #0
 801b61a:	f000 810c 	beq.w	801b836 <MEMS_runMagCal.constprop.0+0x1b3e>
 801b61e:	eddd 7a44 	vldr	s15, [sp, #272]	@ 0x110
 801b622:	eeb0 7ae7 	vabs.f32	s14, s15
 801b626:	eeb4 7ac9 	vcmpe.f32	s14, s18
 801b62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b62e:	f100 8136 	bmi.w	801b89e <MEMS_runMagCal.constprop.0+0x1ba6>
 801b632:	ed90 7a00 	vldr	s14, [r0]
 801b636:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b63a:	b255      	sxtb	r5, r2
 801b63c:	edc3 6a00 	vstr	s13, [r3]
 801b640:	2d00      	cmp	r5, #0
 801b642:	d056      	beq.n	801b6f2 <MEMS_runMagCal.constprop.0+0x19fa>
 801b644:	eddd 7a48 	vldr	s15, [sp, #288]	@ 0x120
 801b648:	2a01      	cmp	r2, #1
 801b64a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b64e:	f000 810c 	beq.w	801b86a <MEMS_runMagCal.constprop.0+0x1b72>
 801b652:	ed9d 6a49 	vldr	s12, [sp, #292]	@ 0x124
 801b656:	eeb0 7ac6 	vabs.f32	s14, s12
 801b65a:	eeb4 7ac9 	vcmpe.f32	s14, s18
 801b65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b662:	f100 811c 	bmi.w	801b89e <MEMS_runMagCal.constprop.0+0x1ba6>
 801b666:	ed90 7a01 	vldr	s14, [r0, #4]
 801b66a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b66e:	2a02      	cmp	r2, #2
 801b670:	eec7 7a06 	vdiv.f32	s15, s14, s12
 801b674:	edc3 7a01 	vstr	s15, [r3, #4]
 801b678:	ed9d 7a4d 	vldr	s14, [sp, #308]	@ 0x134
 801b67c:	ed9d 6a4c 	vldr	s12, [sp, #304]	@ 0x130
 801b680:	ee27 7a87 	vmul.f32	s14, s15, s14
 801b684:	eea6 7a26 	vfma.f32	s14, s12, s13
 801b688:	f000 80e1 	beq.w	801b84e <MEMS_runMagCal.constprop.0+0x1b56>
 801b68c:	eddd 5a4e 	vldr	s11, [sp, #312]	@ 0x138
 801b690:	eeb0 6ae5 	vabs.f32	s12, s11
 801b694:	eeb4 6ac9 	vcmpe.f32	s12, s18
 801b698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b69c:	f100 80ff 	bmi.w	801b89e <MEMS_runMagCal.constprop.0+0x1ba6>
 801b6a0:	ed90 6a02 	vldr	s12, [r0, #8]
 801b6a4:	ee36 7a47 	vsub.f32	s14, s12, s14
 801b6a8:	2a03      	cmp	r2, #3
 801b6aa:	ee87 6a25 	vdiv.f32	s12, s14, s11
 801b6ae:	ed83 6a02 	vstr	s12, [r3, #8]
 801b6b2:	ed9d 7a51 	vldr	s14, [sp, #324]	@ 0x144
 801b6b6:	eddd 5a50 	vldr	s11, [sp, #320]	@ 0x140
 801b6ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b6be:	ed9d 7a52 	vldr	s14, [sp, #328]	@ 0x148
 801b6c2:	eee5 7aa6 	vfma.f32	s15, s11, s13
 801b6c6:	eee7 7a06 	vfma.f32	s15, s14, s12
 801b6ca:	f000 80dc 	beq.w	801b886 <MEMS_runMagCal.constprop.0+0x1b8e>
 801b6ce:	ed9d 6a53 	vldr	s12, [sp, #332]	@ 0x14c
 801b6d2:	eeb0 7ac6 	vabs.f32	s14, s12
 801b6d6:	eeb4 7ac9 	vcmpe.f32	s14, s18
 801b6da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6de:	f100 80de 	bmi.w	801b89e <MEMS_runMagCal.constprop.0+0x1ba6>
 801b6e2:	ed90 7a03 	vldr	s14, [r0, #12]
 801b6e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b6ea:	eec7 6a86 	vdiv.f32	s13, s15, s12
 801b6ee:	edc3 6a03 	vstr	s13, [r3, #12]
 801b6f2:	3201      	adds	r2, #1
 801b6f4:	2a04      	cmp	r2, #4
 801b6f6:	f100 0010 	add.w	r0, r0, #16
 801b6fa:	f103 0310 	add.w	r3, r3, #16
 801b6fe:	f101 0114 	add.w	r1, r1, #20
 801b702:	d189      	bne.n	801b618 <MEMS_runMagCal.constprop.0+0x1920>
 801b704:	aa1f      	add	r2, sp, #124	@ 0x7c
 801b706:	a91b      	add	r1, sp, #108	@ 0x6c
 801b708:	a844      	add	r0, sp, #272	@ 0x110
 801b70a:	f7f9 fa29 	bl	8014b60 <llEvaluate.constprop.0>
 801b70e:	ed5f ba6f 	vldr	s23, [pc, #-444]	@ 801b554 <MEMS_runMagCal.constprop.0+0x185c>
 801b712:	9d04      	ldr	r5, [sp, #16]
 801b714:	f8cd 8018 	str.w	r8, [sp, #24]
 801b718:	ab1f      	add	r3, sp, #124	@ 0x7c
 801b71a:	46b0      	mov	r8, r6
 801b71c:	f10d 0b8c 	add.w	fp, sp, #140	@ 0x8c
 801b720:	4626      	mov	r6, r4
 801b722:	2700      	movs	r7, #0
 801b724:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 801b728:	461c      	mov	r4, r3
 801b72a:	e9cd 771f 	strd	r7, r7, [sp, #124]	@ 0x7c
 801b72e:	e9cd 7721 	strd	r7, r7, [sp, #132]	@ 0x84
 801b732:	aa1f      	add	r2, sp, #124	@ 0x7c
 801b734:	eca4 1a01 	vstmia	r4!, {s2}
 801b738:	a923      	add	r1, sp, #140	@ 0x8c
 801b73a:	a844      	add	r0, sp, #272	@ 0x110
 801b73c:	f7f9 fa10 	bl	8014b60 <llEvaluate.constprop.0>
 801b740:	ecbb 7a01 	vldmia	fp!, {s14}
 801b744:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801b748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b74c:	f340 84b2 	ble.w	801c0b4 <MEMS_runMagCal.constprop.0+0x23bc>
 801b750:	eef1 7ac7 	vsqrt.f32	s15, s14
 801b754:	eef4 bae7 	vcmpe.f32	s23, s15
 801b758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b75c:	bfb8      	it	lt
 801b75e:	eef0 ba67 	vmovlt.f32	s23, s15
 801b762:	3501      	adds	r5, #1
 801b764:	b2ed      	uxtb	r5, r5
 801b766:	2d03      	cmp	r5, #3
 801b768:	d1df      	bne.n	801b72a <MEMS_runMagCal.constprop.0+0x1a32>
 801b76a:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 801b76e:	ee6b 7a27 	vmul.f32	s15, s22, s15
 801b772:	ed9d 7a1e 	vldr	s14, [sp, #120]	@ 0x78
 801b776:	eddd 5a1c 	vldr	s11, [sp, #112]	@ 0x70
 801b77a:	ed9d 5a1b 	vldr	s10, [sp, #108]	@ 0x6c
 801b77e:	ed9d 6a1d 	vldr	s12, [sp, #116]	@ 0x74
 801b782:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b78a:	eeb0 7ae5 	vabs.f32	s14, s11
 801b78e:	bf48      	it	mi
 801b790:	edcd 7a1e 	vstrmi	s15, [sp, #120]	@ 0x78
 801b794:	eef0 7ac5 	vabs.f32	s15, s10
 801b798:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7a0:	bfb8      	it	lt
 801b7a2:	eef0 7a47 	vmovlt.f32	s15, s14
 801b7a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b7aa:	ed1f 7a9a 	vldr	s14, [pc, #-616]	@ 801b544 <MEMS_runMagCal.constprop.0+0x184c>
 801b7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7b2:	bfb8      	it	lt
 801b7b4:	eef0 7a47 	vmovlt.f32	s15, s14
 801b7b8:	eef0 6ac6 	vabs.f32	s13, s12
 801b7bc:	eef4 6ae7 	vcmpe.f32	s13, s15
 801b7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7c4:	ed9d 7a1e 	vldr	s14, [sp, #120]	@ 0x78
 801b7c8:	ee79 9aa5 	vadd.f32	s19, s19, s11
 801b7cc:	ed5f 5aa5 	vldr	s11, [pc, #-660]	@ 801b53c <MEMS_runMagCal.constprop.0+0x1844>
 801b7d0:	edcd 9a2d 	vstr	s19, [sp, #180]	@ 0xb4
 801b7d4:	bfb8      	it	lt
 801b7d6:	eef0 6a67 	vmovlt.f32	s13, s15
 801b7da:	ee3a aa05 	vadd.f32	s20, s20, s10
 801b7de:	ee36 6a2a 	vadd.f32	s12, s12, s21
 801b7e2:	ee3b ba07 	vadd.f32	s22, s22, s14
 801b7e6:	eef4 6ae5 	vcmpe.f32	s13, s11
 801b7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7ee:	4634      	mov	r4, r6
 801b7f0:	ed8d aa2c 	vstr	s20, [sp, #176]	@ 0xb0
 801b7f4:	4646      	mov	r6, r8
 801b7f6:	ed8d 6a2e 	vstr	s12, [sp, #184]	@ 0xb8
 801b7fa:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801b7fe:	ed8d ba2f 	vstr	s22, [sp, #188]	@ 0xbc
 801b802:	eef0 7ac7 	vabs.f32	s15, s14
 801b806:	f140 8459 	bpl.w	801c0bc <MEMS_runMagCal.constprop.0+0x23c4>
 801b80a:	ed1f 7ab3 	vldr	s14, [pc, #-716]	@ 801b540 <MEMS_runMagCal.constprop.0+0x1848>
 801b80e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b816:	f140 8451 	bpl.w	801c0bc <MEMS_runMagCal.constprop.0+0x23c4>
 801b81a:	2e01      	cmp	r6, #1
 801b81c:	f200 8453 	bhi.w	801c0c6 <MEMS_runMagCal.constprop.0+0x23ce>
 801b820:	3601      	adds	r6, #1
 801b822:	b2f6      	uxtb	r6, r6
 801b824:	f7ff baa3 	b.w	801ad6e <MEMS_runMagCal.constprop.0+0x1076>
 801b828:	fb98 f3f9 	sdiv	r3, r8, r9
 801b82c:	fb09 8313 	mls	r3, r9, r3, r8
 801b830:	b21b      	sxth	r3, r3
 801b832:	f7ff bae5 	b.w	801ae00 <MEMS_runMagCal.constprop.0+0x1108>
 801b836:	edd1 7a00 	vldr	s15, [r1]
 801b83a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b842:	dd2c      	ble.n	801b89e <MEMS_runMagCal.constprop.0+0x1ba6>
 801b844:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801b848:	ed83 7a00 	vstr	s14, [r3]
 801b84c:	e751      	b.n	801b6f2 <MEMS_runMagCal.constprop.0+0x19fa>
 801b84e:	edd1 7a00 	vldr	s15, [r1]
 801b852:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b85a:	dd20      	ble.n	801b89e <MEMS_runMagCal.constprop.0+0x1ba6>
 801b85c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b860:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801b864:	ed83 7a02 	vstr	s14, [r3, #8]
 801b868:	e743      	b.n	801b6f2 <MEMS_runMagCal.constprop.0+0x19fa>
 801b86a:	ed91 7a00 	vldr	s14, [r1]
 801b86e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b876:	dd12      	ble.n	801b89e <MEMS_runMagCal.constprop.0+0x1ba6>
 801b878:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b87c:	eef1 7ac7 	vsqrt.f32	s15, s14
 801b880:	edc3 7a01 	vstr	s15, [r3, #4]
 801b884:	e735      	b.n	801b6f2 <MEMS_runMagCal.constprop.0+0x19fa>
 801b886:	ed91 7a00 	vldr	s14, [r1]
 801b88a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b88e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b892:	dd04      	ble.n	801b89e <MEMS_runMagCal.constprop.0+0x1ba6>
 801b894:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b898:	eef1 6ac7 	vsqrt.f32	s13, s14
 801b89c:	e727      	b.n	801b6ee <MEMS_runMagCal.constprop.0+0x19f6>
 801b89e:	ed5f bad7 	vldr	s23, [pc, #-860]	@ 801b544 <MEMS_runMagCal.constprop.0+0x184c>
 801b8a2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801b8a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801b8aa:	ed5f 6ad9 	vldr	s13, [pc, #-868]	@ 801b548 <MEMS_runMagCal.constprop.0+0x1850>
 801b8ae:	eef0 7a6b 	vmov.f32	s15, s23
 801b8b2:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
 801b8b6:	ed9d 7a2f 	vldr	s14, [sp, #188]	@ 0xbc
 801b8ba:	ed5f 5adc 	vldr	s11, [pc, #-880]	@ 801b54c <MEMS_runMagCal.constprop.0+0x1854>
 801b8be:	eef4 6ac6 	vcmpe.f32	s13, s12
 801b8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8c6:	eec5 9a87 	vdiv.f32	s19, s11, s14
 801b8ca:	dc0e      	bgt.n	801b8ea <MEMS_runMagCal.constprop.0+0x1bf2>
 801b8cc:	ed5f 6ae0 	vldr	s13, [pc, #-896]	@ 801b550 <MEMS_runMagCal.constprop.0+0x1858>
 801b8d0:	eef4 7ae6 	vcmpe.f32	s15, s13
 801b8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8d8:	dc07      	bgt.n	801b8ea <MEMS_runMagCal.constprop.0+0x1bf2>
 801b8da:	ed5f 7ae2 	vldr	s15, [pc, #-904]	@ 801b554 <MEMS_runMagCal.constprop.0+0x185c>
 801b8de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8e6:	f200 81f8 	bhi.w	801bcda <MEMS_runMagCal.constprop.0+0x1fe2>
 801b8ea:	4be2      	ldr	r3, [pc, #904]	@ (801bc74 <MEMS_runMagCal.constprop.0+0x1f7c>)
 801b8ec:	ed9f 9ae2 	vldr	s18, [pc, #904]	@ 801bc78 <MEMS_runMagCal.constprop.0+0x1f80>
 801b8f0:	9323      	str	r3, [sp, #140]	@ 0x8c
 801b8f2:	9332      	str	r3, [sp, #200]	@ 0xc8
 801b8f4:	eddd 6a2c 	vldr	s13, [sp, #176]	@ 0xb0
 801b8f8:	ed9d 7a2d 	vldr	s14, [sp, #180]	@ 0xb4
 801b8fc:	eddd 7a2e 	vldr	s15, [sp, #184]	@ 0xb8
 801b900:	ed9d 6a32 	vldr	s12, [sp, #200]	@ 0xc8
 801b904:	eddd 5a23 	vldr	s11, [sp, #140]	@ 0x8c
 801b908:	edcd 9a44 	vstr	s19, [sp, #272]	@ 0x110
 801b90c:	ee66 6a88 	vmul.f32	s13, s13, s16
 801b910:	ee27 7a08 	vmul.f32	s14, s14, s16
 801b914:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b918:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801b91c:	2300      	movs	r3, #0
 801b91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b922:	e9cd 3345 	strd	r3, r3, [sp, #276]	@ 0x114
 801b926:	e9cd 3349 	strd	r3, r3, [sp, #292]	@ 0x124
 801b92a:	edcd 6a34 	vstr	s13, [sp, #208]	@ 0xd0
 801b92e:	ed8d 7a35 	vstr	s14, [sp, #212]	@ 0xd4
 801b932:	edcd 9a48 	vstr	s19, [sp, #288]	@ 0x120
 801b936:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 801b93a:	edcd 9a4c 	vstr	s19, [sp, #304]	@ 0x130
 801b93e:	9347      	str	r3, [sp, #284]	@ 0x11c
 801b940:	934b      	str	r3, [sp, #300]	@ 0x12c
 801b942:	f100 83b4 	bmi.w	801c0ae <MEMS_runMagCal.constprop.0+0x23b6>
 801b946:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801b94a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b94e:	f100 83ae 	bmi.w	801c0ae <MEMS_runMagCal.constprop.0+0x23b6>
 801b952:	eec5 7a86 	vdiv.f32	s15, s11, s12
 801b956:	eeb7 aa00 	vmov.f32	s20, #112	@ 0x3f800000  1.0
 801b95a:	ee3a aa67 	vsub.f32	s20, s20, s15
 801b95e:	ed9f 7ac7 	vldr	s14, [pc, #796]	@ 801bc7c <MEMS_runMagCal.constprop.0+0x1f84>
 801b962:	eddf 6ac7 	vldr	s13, [pc, #796]	@ 801bc80 <MEMS_runMagCal.constprop.0+0x1f88>
 801b966:	ee39 7ac7 	vsub.f32	s14, s19, s14
 801b96a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801b96e:	eeb0 7ac7 	vabs.f32	s14, s14
 801b972:	ee79 7ae7 	vsub.f32	s15, s19, s15
 801b976:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801b97a:	ed9f 7ac2 	vldr	s14, [pc, #776]	@ 801bc84 <MEMS_runMagCal.constprop.0+0x1f8c>
 801b97e:	eef0 7ae7 	vabs.f32	s15, s15
 801b982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b986:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b98a:	f100 8313 	bmi.w	801bfb4 <MEMS_runMagCal.constprop.0+0x22bc>
 801b98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b992:	f280 831b 	bge.w	801bfcc <MEMS_runMagCal.constprop.0+0x22d4>
 801b996:	eddf 7abc 	vldr	s15, [pc, #752]	@ 801bc88 <MEMS_runMagCal.constprop.0+0x1f90>
 801b99a:	eeb4 aae7 	vcmpe.f32	s20, s15
 801b99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9a2:	f100 8313 	bmi.w	801bfcc <MEMS_runMagCal.constprop.0+0x22d4>
 801b9a6:	ae19      	add	r6, sp, #100	@ 0x64
 801b9a8:	9c04      	ldr	r4, [sp, #16]
 801b9aa:	ad34      	add	r5, sp, #208	@ 0xd0
 801b9ac:	46b0      	mov	r8, r6
 801b9ae:	ecb5 0a01 	vldmia	r5!, {s0}
 801b9b2:	f001 fcf5 	bl	801d3a0 <roundf>
 801b9b6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b9ba:	3401      	adds	r4, #1
 801b9bc:	ee10 3a10 	vmov	r3, s0
 801b9c0:	b2e4      	uxtb	r4, r4
 801b9c2:	2c03      	cmp	r4, #3
 801b9c4:	f828 3b02 	strh.w	r3, [r8], #2
 801b9c8:	d1f1      	bne.n	801b9ae <MEMS_runMagCal.constprop.0+0x1cb6>
 801b9ca:	eddd 7a02 	vldr	s15, [sp, #8]
 801b9ce:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801b9d2:	eddf 7aae 	vldr	s15, [pc, #696]	@ 801bc8c <MEMS_runMagCal.constprop.0+0x1f94>
 801b9d6:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b9da:	f001 fce1 	bl	801d3a0 <roundf>
 801b9de:	eef0 7a40 	vmov.f32	s15, s0
 801b9e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b9e6:	ab15      	add	r3, sp, #84	@ 0x54
 801b9e8:	eeb0 0a68 	vmov.f32	s0, s17
 801b9ec:	aa16      	add	r2, sp, #88	@ 0x58
 801b9ee:	a944      	add	r1, sp, #272	@ 0x110
 801b9f0:	4630      	mov	r0, r6
 801b9f2:	ee17 8a90 	vmov	r8, s15
 801b9f6:	edca 7a06 	vstr	s15, [sl, #24]
 801b9fa:	f7f9 f929 	bl	8014c50 <getMagStats.constprop.0>
 801b9fe:	f89a 30a0 	ldrb.w	r3, [sl, #160]	@ 0xa0
 801ba02:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 801bc90 <MEMS_runMagCal.constprop.0+0x1f98>
 801ba06:	f89a 50a0 	ldrb.w	r5, [sl, #160]	@ 0xa0
 801ba0a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 801ba0e:	005b      	lsls	r3, r3, #1
 801ba10:	ee07 3a90 	vmov	s15, r3
 801ba14:	ee07 0a10 	vmov	s14, r0
 801ba18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ba1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ba20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ba24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ba28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba2c:	dc0d      	bgt.n	801ba4a <MEMS_runMagCal.constprop.0+0x1d52>
 801ba2e:	ed9d 7a15 	vldr	s14, [sp, #84]	@ 0x54
 801ba32:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 801ba36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ba3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba3e:	bfc6      	itte	gt
 801ba40:	fabb f38b 	clzgt	r3, fp
 801ba44:	095b      	lsrgt	r3, r3, #5
 801ba46:	2301      	movle	r3, #1
 801ba48:	9304      	str	r3, [sp, #16]
 801ba4a:	ee28 0a09 	vmul.f32	s0, s16, s18
 801ba4e:	f8cd 809c 	str.w	r8, [sp, #156]	@ 0x9c
 801ba52:	f001 fca5 	bl	801d3a0 <roundf>
 801ba56:	eddf 7a8f 	vldr	s15, [pc, #572]	@ 801bc94 <MEMS_runMagCal.constprop.0+0x1f9c>
 801ba5a:	6830      	ldr	r0, [r6, #0]
 801ba5c:	eddd aa15 	vldr	s21, [sp, #84]	@ 0x54
 801ba60:	f8cd 00a2 	str.w	r0, [sp, #162]	@ 0xa2
 801ba64:	ee69 7aa7 	vmul.f32	s15, s19, s15
 801ba68:	2300      	movs	r3, #0
 801ba6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ba6e:	f1b9 0f01 	cmp.w	r9, #1
 801ba72:	ee17 2a90 	vmov	r2, s15
 801ba76:	b294      	uxth	r4, r2
 801ba78:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801ba7c:	f364 030f 	bfi	r3, r4, #0, #16
 801ba80:	f364 431f 	bfi	r3, r4, #16, #16
 801ba84:	932a      	str	r3, [sp, #168]	@ 0xa8
 801ba86:	ee17 3a90 	vmov	r3, s15
 801ba8a:	f88d 30a1 	strb.w	r3, [sp, #161]	@ 0xa1
 801ba8e:	88b3      	ldrh	r3, [r6, #4]
 801ba90:	f8ad 40ac 	strh.w	r4, [sp, #172]	@ 0xac
 801ba94:	f8ad 30a6 	strh.w	r3, [sp, #166]	@ 0xa6
 801ba98:	f000 828a 	beq.w	801bfb0 <MEMS_runMagCal.constprop.0+0x22b8>
 801ba9c:	ee28 0a2a 	vmul.f32	s0, s16, s21
 801baa0:	ee80 0a0a 	vdiv.f32	s0, s0, s20
 801baa4:	f001 fc7c 	bl	801d3a0 <roundf>
 801baa8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801baac:	edcd 7a01 	vstr	s15, [sp, #4]
 801bab0:	f89d 6004 	ldrb.w	r6, [sp, #4]
 801bab4:	9a04      	ldr	r2, [sp, #16]
 801bab6:	f88d 60a0 	strb.w	r6, [sp, #160]	@ 0xa0
 801baba:	2300      	movs	r3, #0
 801babc:	f88a 3014 	strb.w	r3, [sl, #20]
 801bac0:	2a00      	cmp	r2, #0
 801bac2:	f43e ad23 	beq.w	801a50c <MEMS_runMagCal.constprop.0+0x814>
 801bac6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801bac8:	f88a 3015 	strb.w	r3, [sl, #21]
 801bacc:	2a00      	cmp	r2, #0
 801bace:	f040 8133 	bne.w	801bd38 <MEMS_runMagCal.constprop.0+0x2040>
 801bad2:	af14      	add	r7, sp, #80	@ 0x50
 801bad4:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	@ 0xac
 801bad8:	f8bd 10a8 	ldrh.w	r1, [sp, #168]	@ 0xa8
 801badc:	f8bd 20aa 	ldrh.w	r2, [sp, #170]	@ 0xaa
 801bae0:	f8df e1c0 	ldr.w	lr, [pc, #448]	@ 801bca4 <MEMS_runMagCal.constprop.0+0x1fac>
 801bae4:	eddf 7a70 	vldr	s15, [pc, #448]	@ 801bca8 <MEMS_runMagCal.constprop.0+0x1fb0>
 801bae8:	f8ca 801c 	str.w	r8, [sl, #28]
 801baec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801baf0:	fb00 f303 	mul.w	r3, r0, r3
 801baf4:	ee06 3a10 	vmov	s12, r3
 801baf8:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	@ 0xa2
 801bafc:	ed9a 0a01 	vldr	s0, [sl, #4]
 801bb00:	f89a 4025 	ldrb.w	r4, [sl, #37]	@ 0x25
 801bb04:	ee03 3a90 	vmov	s7, r3
 801bb08:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	@ 0xa4
 801bb0c:	ee04 3a10 	vmov	s8, r3
 801bb10:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	@ 0xa6
 801bb14:	fb00 f101 	mul.w	r1, r0, r1
 801bb18:	ee04 3a90 	vmov	s9, r3
 801bb1c:	fb00 f202 	mul.w	r2, r0, r2
 801bb20:	23ff      	movs	r3, #255	@ 0xff
 801bb22:	f10d 0c9c 	add.w	ip, sp, #156	@ 0x9c
 801bb26:	ee05 1a10 	vmov	s10, r1
 801bb2a:	ee05 2a90 	vmov	s11, r2
 801bb2e:	f88a 3026 	strb.w	r3, [sl, #38]	@ 0x26
 801bb32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bb36:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bb3a:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801bb3e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801bb42:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801bb46:	ee25 5a27 	vmul.f32	s10, s10, s15
 801bb4a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801bb4e:	ee26 6a27 	vmul.f32	s12, s12, s15
 801bb52:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801bb56:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801bb5a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801bb5e:	f04f 0801 	mov.w	r8, #1
 801bb62:	f8dc 3000 	ldr.w	r3, [ip]
 801bb66:	f8ce 3000 	str.w	r3, [lr]
 801bb6a:	ed8a 5a1f 	vstr	s10, [sl, #124]	@ 0x7c
 801bb6e:	edca 5a23 	vstr	s11, [sl, #140]	@ 0x8c
 801bb72:	ed8a 6a27 	vstr	s12, [sl, #156]	@ 0x9c
 801bb76:	f88a 8054 	strb.w	r8, [sl, #84]	@ 0x54
 801bb7a:	f88a 806d 	strb.w	r8, [sl, #109]	@ 0x6d
 801bb7e:	edca 3a1c 	vstr	s7, [sl, #112]	@ 0x70
 801bb82:	ed8a 4a1d 	vstr	s8, [sl, #116]	@ 0x74
 801bb86:	edca 4a1e 	vstr	s9, [sl, #120]	@ 0x78
 801bb8a:	2d00      	cmp	r5, #0
 801bb8c:	d04d      	beq.n	801bc2a <MEMS_runMagCal.constprop.0+0x1f32>
 801bb8e:	ed9f 3a42 	vldr	s6, [pc, #264]	@ 801bc98 <MEMS_runMagCal.constprop.0+0x1fa0>
 801bb92:	f89a 00a1 	ldrb.w	r0, [sl, #161]	@ 0xa1
 801bb96:	2100      	movs	r1, #0
 801bb98:	ee20 3a03 	vmul.f32	s6, s0, s6
 801bb9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801bba0:	460b      	mov	r3, r1
 801bba2:	fbb3 fcf0 	udiv	ip, r3, r0
 801bba6:	fb00 331c 	mls	r3, r0, ip, r3
 801bbaa:	3315      	adds	r3, #21
 801bbac:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801bbb0:	3201      	adds	r2, #1
 801bbb2:	fb92 fcf4 	sdiv	ip, r2, r4
 801bbb6:	fb04 221c 	mls	r2, r4, ip, r2
 801bbba:	f9b3 c01c 	ldrsh.w	ip, [r3, #28]
 801bbbe:	ee07 ca90 	vmov	s15, ip
 801bbc2:	f9b3 c01a 	ldrsh.w	ip, [r3, #26]
 801bbc6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801bbca:	ee06 ca90 	vmov	s13, ip
 801bbce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bbd2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801bbd6:	ee77 7ac4 	vsub.f32	s15, s15, s8
 801bbda:	ee07 3a10 	vmov	s14, r3
 801bbde:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801bbe2:	ee76 6ae3 	vsub.f32	s13, s13, s7
 801bbe6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801bbea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bbee:	ee66 6a85 	vmul.f32	s13, s13, s10
 801bbf2:	ee37 7a64 	vsub.f32	s14, s14, s9
 801bbf6:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801bbfa:	b252      	sxtb	r2, r2
 801bbfc:	eb0a 0342 	add.w	r3, sl, r2, lsl #1
 801bc00:	ee27 7a06 	vmul.f32	s14, s14, s12
 801bc04:	3101      	adds	r1, #1
 801bc06:	eee7 7a07 	vfma.f32	s15, s14, s14
 801bc0a:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801bc0e:	ee67 7a03 	vmul.f32	s15, s14, s6
 801bc12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bc16:	ee17 ca90 	vmov	ip, s15
 801bc1a:	f8a3 c028 	strh.w	ip, [r3, #40]	@ 0x28
 801bc1e:	b28b      	uxth	r3, r1
 801bc20:	42ab      	cmp	r3, r5
 801bc22:	b209      	sxth	r1, r1
 801bc24:	dbbd      	blt.n	801bba2 <MEMS_runMagCal.constprop.0+0x1eaa>
 801bc26:	f88a 2026 	strb.w	r2, [sl, #38]	@ 0x26
 801bc2a:	42ac      	cmp	r4, r5
 801bc2c:	bf28      	it	cs
 801bc2e:	462c      	movcs	r4, r5
 801bc30:	aa13      	add	r2, sp, #76	@ 0x4c
 801bc32:	491a      	ldr	r1, [pc, #104]	@ (801bc9c <MEMS_runMagCal.constprop.0+0x1fa4>)
 801bc34:	f88a 4024 	strb.w	r4, [sl, #36]	@ 0x24
 801bc38:	f10d 00a2 	add.w	r0, sp, #162	@ 0xa2
 801bc3c:	463b      	mov	r3, r7
 801bc3e:	f7f9 f807 	bl	8014c50 <getMagStats.constprop.0>
 801bc42:	eddf 6a17 	vldr	s13, [pc, #92]	@ 801bca0 <MEMS_runMagCal.constprop.0+0x1fa8>
 801bc46:	edd2 7a00 	vldr	s15, [r2]
 801bc4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bc4e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801bc52:	eef0 7ae7 	vabs.f32	s15, s15
 801bc56:	eef4 7ac7 	vcmpe.f32	s15, s14
 801bc5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc5e:	edd7 6a00 	vldr	s13, [r7]
 801bc62:	d523      	bpl.n	801bcac <MEMS_runMagCal.constprop.0+0x1fb4>
 801bc64:	eef4 6ac7 	vcmpe.f32	s13, s14
 801bc68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc6c:	f100 819b 	bmi.w	801bfa6 <MEMS_runMagCal.constprop.0+0x22ae>
 801bc70:	e01c      	b.n	801bcac <MEMS_runMagCal.constprop.0+0x1fb4>
 801bc72:	bf00      	nop
 801bc74:	423c0000 	.word	0x423c0000
 801bc78:	41f00001 	.word	0x41f00001
 801bc7c:	3f8ccccd 	.word	0x3f8ccccd
 801bc80:	3f266666 	.word	0x3f266666
 801bc84:	3eb33333 	.word	0x3eb33333
 801bc88:	3f19999a 	.word	0x3f19999a
 801bc8c:	3a83126f 	.word	0x3a83126f
 801bc90:	3c23d70a 	.word	0x3c23d70a
 801bc94:	447a0000 	.word	0x447a0000
 801bc98:	42c80000 	.word	0x42c80000
 801bc9c:	20000408 	.word	0x20000408
 801bca0:	423c0000 	.word	0x423c0000
 801bca4:	200003e4 	.word	0x200003e4
 801bca8:	358637bd 	.word	0x358637bd
 801bcac:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 801bcb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 801bcb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcb8:	d507      	bpl.n	801bcca <MEMS_runMagCal.constprop.0+0x1fd2>
 801bcba:	eef4 6a47 	vcmp.f32	s13, s14
 801bcbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcc2:	9b04      	ldr	r3, [sp, #16]
 801bcc4:	bf48      	it	mi
 801bcc6:	2302      	movmi	r3, #2
 801bcc8:	9304      	str	r3, [sp, #16]
 801bcca:	2ec9      	cmp	r6, #201	@ 0xc9
 801bccc:	9b04      	ldr	r3, [sp, #16]
 801bcce:	bf28      	it	cs
 801bcd0:	2302      	movcs	r3, #2
 801bcd2:	f88a 306c 	strb.w	r3, [sl, #108]	@ 0x6c
 801bcd6:	f7fe bc19 	b.w	801a50c <MEMS_runMagCal.constprop.0+0x814>
 801bcda:	2224      	movs	r2, #36	@ 0x24
 801bcdc:	2100      	movs	r1, #0
 801bcde:	a844      	add	r0, sp, #272	@ 0x110
 801bce0:	f004 f859 	bl	801fd96 <memset>
 801bce4:	ad2c      	add	r5, sp, #176	@ 0xb0
 801bce6:	f10d 08d0 	add.w	r8, sp, #208	@ 0xd0
 801bcea:	ae44      	add	r6, sp, #272	@ 0x110
 801bcec:	2400      	movs	r4, #0
 801bcee:	ecb5 0a01 	vldmia	r5!, {s0}
 801bcf2:	ee28 0a00 	vmul.f32	s0, s16, s0
 801bcf6:	f001 fb53 	bl	801d3a0 <roundf>
 801bcfa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801bcfe:	4633      	mov	r3, r6
 801bd00:	3401      	adds	r4, #1
 801bd02:	edc3 9a00 	vstr	s19, [r3]
 801bd06:	ee10 3a10 	vmov	r3, s0
 801bd0a:	2c03      	cmp	r4, #3
 801bd0c:	f828 3b02 	strh.w	r3, [r8], #2
 801bd10:	f106 0610 	add.w	r6, r6, #16
 801bd14:	d1eb      	bne.n	801bcee <MEMS_runMagCal.constprop.0+0x1ff6>
 801bd16:	eeb0 0a68 	vmov.f32	s0, s17
 801bd1a:	ab23      	add	r3, sp, #140	@ 0x8c
 801bd1c:	aa32      	add	r2, sp, #200	@ 0xc8
 801bd1e:	a944      	add	r1, sp, #272	@ 0x110
 801bd20:	a834      	add	r0, sp, #208	@ 0xd0
 801bd22:	f7f8 ff95 	bl	8014c50 <getMagStats.constprop.0>
 801bd26:	ed9d 9a23 	vldr	s18, [sp, #140]	@ 0x8c
 801bd2a:	ee79 7a09 	vadd.f32	s15, s18, s18
 801bd2e:	ee29 9a2b 	vmul.f32	s18, s18, s23
 801bd32:	edcd 7a23 	vstr	s15, [sp, #140]	@ 0x8c
 801bd36:	e5dd      	b.n	801b8f4 <MEMS_runMagCal.constprop.0+0x1bfc>
 801bd38:	e9cd 3345 	strd	r3, r3, [sp, #276]	@ 0x114
 801bd3c:	e9cd 3349 	strd	r3, r3, [sp, #292]	@ 0x124
 801bd40:	9347      	str	r3, [sp, #284]	@ 0x11c
 801bd42:	934b      	str	r3, [sp, #300]	@ 0x12c
 801bd44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801bd48:	fb03 f304 	mul.w	r3, r3, r4
 801bd4c:	ee07 3a90 	vmov	s15, r3
 801bd50:	ed1f 7a2b 	vldr	s14, [pc, #-172]	@ 801bca8 <MEMS_runMagCal.constprop.0+0x1fb0>
 801bd54:	49e3      	ldr	r1, [pc, #908]	@ (801c0e4 <MEMS_runMagCal.constprop.0+0x23ec>)
 801bd56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bd5a:	eeb0 0a68 	vmov.f32	s0, s17
 801bd5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801bd62:	ab34      	add	r3, sp, #208	@ 0xd0
 801bd64:	aa13      	add	r2, sp, #76	@ 0x4c
 801bd66:	f1a1 001e 	sub.w	r0, r1, #30
 801bd6a:	af14      	add	r7, sp, #80	@ 0x50
 801bd6c:	edcd 7a44 	vstr	s15, [sp, #272]	@ 0x110
 801bd70:	edcd 7a48 	vstr	s15, [sp, #288]	@ 0x120
 801bd74:	edcd 7a4c 	vstr	s15, [sp, #304]	@ 0x130
 801bd78:	f7f8 ff6a 	bl	8014c50 <getMagStats.constprop.0>
 801bd7c:	eeb0 0a68 	vmov.f32	s0, s17
 801bd80:	a944      	add	r1, sp, #272	@ 0x110
 801bd82:	463b      	mov	r3, r7
 801bd84:	f10d 00a2 	add.w	r0, sp, #162	@ 0xa2
 801bd88:	f7f8 ff62 	bl	8014c50 <getMagStats.constprop.0>
 801bd8c:	eddd 7a13 	vldr	s15, [sp, #76]	@ 0x4c
 801bd90:	eddf 6ad5 	vldr	s13, [pc, #852]	@ 801c0e8 <MEMS_runMagCal.constprop.0+0x23f0>
 801bd94:	ed97 6a00 	vldr	s12, [r7]
 801bd98:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bd9c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801bda0:	eef0 7ae7 	vabs.f32	s15, s15
 801bda4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801bda8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdac:	d505      	bpl.n	801bdba <MEMS_runMagCal.constprop.0+0x20c2>
 801bdae:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801bdb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdb6:	f100 80f9 	bmi.w	801bfac <MEMS_runMagCal.constprop.0+0x22b4>
 801bdba:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 801bdbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 801bdc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdc6:	f140 80ec 	bpl.w	801bfa2 <MEMS_runMagCal.constprop.0+0x22aa>
 801bdca:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801bdce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdd2:	9b04      	ldr	r3, [sp, #16]
 801bdd4:	bfb8      	it	lt
 801bdd6:	2302      	movlt	r3, #2
 801bdd8:	eddd 5a34 	vldr	s11, [sp, #208]	@ 0xd0
 801bddc:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801bde0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801bde4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801bde8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdec:	f57e ab8e 	bpl.w	801a50c <MEMS_runMagCal.constprop.0+0x814>
 801bdf0:	f89a 206c 	ldrb.w	r2, [sl, #108]	@ 0x6c
 801bdf4:	429a      	cmp	r2, r3
 801bdf6:	f63e ab89 	bhi.w	801a50c <MEMS_runMagCal.constprop.0+0x814>
 801bdfa:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801bdfe:	ee66 7a27 	vmul.f32	s15, s12, s15
 801be02:	eef4 5ae7 	vcmpe.f32	s11, s15
 801be06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be0a:	d40c      	bmi.n	801be26 <MEMS_runMagCal.constprop.0+0x212e>
 801be0c:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 801be10:	eef4 5ae7 	vcmpe.f32	s11, s15
 801be14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be18:	f57f ae5c 	bpl.w	801bad4 <MEMS_runMagCal.constprop.0+0x1ddc>
 801be1c:	f89a 305c 	ldrb.w	r3, [sl, #92]	@ 0x5c
 801be20:	42b3      	cmp	r3, r6
 801be22:	f4bf ae57 	bcs.w	801bad4 <MEMS_runMagCal.constprop.0+0x1ddc>
 801be26:	f9ba 2060 	ldrsh.w	r2, [sl, #96]	@ 0x60
 801be2a:	f9bd e0a4 	ldrsh.w	lr, [sp, #164]	@ 0xa4
 801be2e:	f9bd b0a2 	ldrsh.w	fp, [sp, #162]	@ 0xa2
 801be32:	f9ba 105e 	ldrsh.w	r1, [sl, #94]	@ 0x5e
 801be36:	f9ba 3062 	ldrsh.w	r3, [sl, #98]	@ 0x62
 801be3a:	f9bd c0a6 	ldrsh.w	ip, [sp, #166]	@ 0xa6
 801be3e:	eba2 000e 	sub.w	r0, r2, lr
 801be42:	eba1 090b 	sub.w	r9, r1, fp
 801be46:	2800      	cmp	r0, #0
 801be48:	bfb8      	it	lt
 801be4a:	4240      	neglt	r0, r0
 801be4c:	f1b9 0f00 	cmp.w	r9, #0
 801be50:	bfb8      	it	lt
 801be52:	f1c9 0900 	rsblt	r9, r9, #0
 801be56:	4548      	cmp	r0, r9
 801be58:	bfb8      	it	lt
 801be5a:	4648      	movlt	r0, r9
 801be5c:	eba3 090c 	sub.w	r9, r3, ip
 801be60:	f1b9 0f00 	cmp.w	r9, #0
 801be64:	b200      	sxth	r0, r0
 801be66:	bfb8      	it	lt
 801be68:	f1c9 0900 	rsblt	r9, r9, #0
 801be6c:	4548      	cmp	r0, r9
 801be6e:	bfb8      	it	lt
 801be70:	4648      	movlt	r0, r9
 801be72:	b200      	sxth	r0, r0
 801be74:	ee07 0a90 	vmov	s15, r0
 801be78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801be7c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 801be80:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801be84:	eef4 7ac7 	vcmpe.f32	s15, s14
 801be88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be8c:	f57f ae22 	bpl.w	801bad4 <MEMS_runMagCal.constprop.0+0x1ddc>
 801be90:	ee36 6a25 	vadd.f32	s12, s12, s11
 801be94:	ee05 6a10 	vmov	s10, r6
 801be98:	ee85 4a86 	vdiv.f32	s8, s11, s12
 801be9c:	ee07 1a90 	vmov	s15, r1
 801bea0:	eeb8 2ac5 	vcvt.f32.s32	s4, s10
 801bea4:	ee05 4a10 	vmov	s10, r4
 801bea8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801beac:	eef8 3ac5 	vcvt.f32.s32	s7, s10
 801beb0:	ee07 2a90 	vmov	s15, r2
 801beb4:	ee05 ba10 	vmov	s10, fp
 801beb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801bebc:	eef8 2ac5 	vcvt.f32.s32	s5, s10
 801bec0:	ee07 3a90 	vmov	s15, r3
 801bec4:	ee05 ea10 	vmov	s10, lr
 801bec8:	f89a 305c 	ldrb.w	r3, [sl, #92]	@ 0x5c
 801becc:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 801bed0:	ee74 4ac4 	vsub.f32	s9, s9, s8
 801bed4:	eeb8 3ac5 	vcvt.f32.s32	s6, s10
 801bed8:	ee06 3a10 	vmov	s12, r3
 801bedc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bee0:	ee05 ca10 	vmov	s10, ip
 801bee4:	f8ba 3064 	ldrh.w	r3, [sl, #100]	@ 0x64
 801bee8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801beec:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801bef0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801bef4:	eee4 7a05 	vfma.f32	s15, s8, s10
 801bef8:	ee26 6a24 	vmul.f32	s12, s12, s9
 801befc:	ee05 3a10 	vmov	s10, r3
 801bf00:	eea4 6a02 	vfma.f32	s12, s8, s4
 801bf04:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
 801bf08:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801bf0c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801bf10:	ee05 3a90 	vmov	s11, r3
 801bf14:	eee4 6a22 	vfma.f32	s13, s8, s5
 801bf18:	f8ba 3068 	ldrh.w	r3, [sl, #104]	@ 0x68
 801bf1c:	ee25 5a24 	vmul.f32	s10, s10, s9
 801bf20:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 801bf24:	eea4 5a23 	vfma.f32	s10, s8, s7
 801bf28:	ee27 7a24 	vmul.f32	s14, s14, s9
 801bf2c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801bf30:	ed8d 6a01 	vstr	s12, [sp, #4]
 801bf34:	eea4 7a03 	vfma.f32	s14, s8, s6
 801bf38:	f89d 6004 	ldrb.w	r6, [sp, #4]
 801bf3c:	f88d 60a0 	strb.w	r6, [sp, #160]	@ 0xa0
 801bf40:	ee06 3a10 	vmov	s12, r3
 801bf44:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801bf48:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801bf4c:	eee4 5a23 	vfma.f32	s11, s8, s7
 801bf50:	ee16 3a90 	vmov	r3, s13
 801bf54:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801bf58:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 801bf5c:	ee26 6a24 	vmul.f32	s12, s12, s9
 801bf60:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801bf64:	f8ad 30a2 	strh.w	r3, [sp, #162]	@ 0xa2
 801bf68:	ee15 3a10 	vmov	r3, s10
 801bf6c:	eea4 6a23 	vfma.f32	s12, s8, s7
 801bf70:	f8ad 30a8 	strh.w	r3, [sp, #168]	@ 0xa8
 801bf74:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 801bf78:	ee17 3a10 	vmov	r3, s14
 801bf7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bf80:	f8ad 30a4 	strh.w	r3, [sp, #164]	@ 0xa4
 801bf84:	ee15 3a90 	vmov	r3, s11
 801bf88:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 801bf8c:	f8ad 30aa 	strh.w	r3, [sp, #170]	@ 0xaa
 801bf90:	ee17 3a90 	vmov	r3, s15
 801bf94:	f8ad 30a6 	strh.w	r3, [sp, #166]	@ 0xa6
 801bf98:	ee16 3a10 	vmov	r3, s12
 801bf9c:	f8ad 30ac 	strh.w	r3, [sp, #172]	@ 0xac
 801bfa0:	e598      	b.n	801bad4 <MEMS_runMagCal.constprop.0+0x1ddc>
 801bfa2:	9b04      	ldr	r3, [sp, #16]
 801bfa4:	e718      	b.n	801bdd8 <MEMS_runMagCal.constprop.0+0x20e0>
 801bfa6:	2303      	movs	r3, #3
 801bfa8:	9304      	str	r3, [sp, #16]
 801bfaa:	e68e      	b.n	801bcca <MEMS_runMagCal.constprop.0+0x1fd2>
 801bfac:	2303      	movs	r3, #3
 801bfae:	e713      	b.n	801bdd8 <MEMS_runMagCal.constprop.0+0x20e0>
 801bfb0:	26ff      	movs	r6, #255	@ 0xff
 801bfb2:	e57f      	b.n	801bab4 <MEMS_runMagCal.constprop.0+0x1dbc>
 801bfb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bfb8:	f6ff aced 	blt.w	801b996 <MEMS_runMagCal.constprop.0+0x1c9e>
 801bfbc:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 801c0ec <MEMS_runMagCal.constprop.0+0x23f4>
 801bfc0:	eef4 9ae7 	vcmpe.f32	s19, s15
 801bfc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bfc8:	f63f ace5 	bhi.w	801b996 <MEMS_runMagCal.constprop.0+0x1c9e>
 801bfcc:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 801c0f0 <MEMS_runMagCal.constprop.0+0x23f8>
 801bfd0:	9b01      	ldr	r3, [sp, #4]
 801bfd2:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801bfd6:	3b01      	subs	r3, #1
 801bfd8:	f88a 30a0 	strb.w	r3, [sl, #160]	@ 0xa0
 801bfdc:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 801bfe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bfe4:	ee80 0a28 	vdiv.f32	s0, s0, s17
 801bfe8:	ee17 3a90 	vmov	r3, s15
 801bfec:	b298      	uxth	r0, r3
 801bfee:	f7f8 ff1f 	bl	8014e30 <MEMS_updateMagBufferIndex.constprop.0>
 801bff2:	eddd 7a02 	vldr	s15, [sp, #8]
 801bff6:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801bffa:	eddf 7a41 	vldr	s15, [pc, #260]	@ 801c100 <MEMS_runMagCal.constprop.0+0x2408>
 801bffe:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c002:	f001 f9cd 	bl	801d3a0 <roundf>
 801c006:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801c00a:	2300      	movs	r3, #0
 801c00c:	f88a 3014 	strb.w	r3, [sl, #20]
 801c010:	ed8a 0a06 	vstr	s0, [sl, #24]
 801c014:	f7fe ba7a 	b.w	801a50c <MEMS_runMagCal.constprop.0+0x814>
 801c018:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801c01c:	f7fe be89 	b.w	801ad32 <MEMS_runMagCal.constprop.0+0x103a>
 801c020:	ed9a 0a1c 	vldr	s0, [sl, #112]	@ 0x70
 801c024:	f001 f9bc 	bl	801d3a0 <roundf>
 801c028:	eef0 7a40 	vmov.f32	s15, s0
 801c02c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c030:	ae19      	add	r6, sp, #100	@ 0x64
 801c032:	ee17 3a90 	vmov	r3, s15
 801c036:	ed9a 0a1d 	vldr	s0, [sl, #116]	@ 0x74
 801c03a:	8033      	strh	r3, [r6, #0]
 801c03c:	f001 f9b0 	bl	801d3a0 <roundf>
 801c040:	eef0 7a40 	vmov.f32	s15, s0
 801c044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c048:	ed9a 0a1e 	vldr	s0, [sl, #120]	@ 0x78
 801c04c:	ee17 3a90 	vmov	r3, s15
 801c050:	8073      	strh	r3, [r6, #2]
 801c052:	f001 f9a5 	bl	801d3a0 <roundf>
 801c056:	eef0 7a40 	vmov.f32	s15, s0
 801c05a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c05e:	4921      	ldr	r1, [pc, #132]	@ (801c0e4 <MEMS_runMagCal.constprop.0+0x23ec>)
 801c060:	ee17 3a90 	vmov	r3, s15
 801c064:	eeb0 0a68 	vmov.f32	s0, s17
 801c068:	80b3      	strh	r3, [r6, #4]
 801c06a:	aa16      	add	r2, sp, #88	@ 0x58
 801c06c:	ab15      	add	r3, sp, #84	@ 0x54
 801c06e:	4630      	mov	r0, r6
 801c070:	f7f8 fdee 	bl	8014c50 <getMagStats.constprop.0>
 801c074:	ed93 7a00 	vldr	s14, [r3]
 801c078:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801c0f4 <MEMS_runMagCal.constprop.0+0x23fc>
 801c07c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c084:	d50e      	bpl.n	801c0a4 <MEMS_runMagCal.constprop.0+0x23ac>
 801c086:	b968      	cbnz	r0, 801c0a4 <MEMS_runMagCal.constprop.0+0x23ac>
 801c088:	f1bb 0f00 	cmp.w	fp, #0
 801c08c:	d042      	beq.n	801c114 <MEMS_runMagCal.constprop.0+0x241c>
 801c08e:	f89a 305d 	ldrb.w	r3, [sl, #93]	@ 0x5d
 801c092:	ee07 3a90 	vmov	s15, r3
 801c096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c09a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801c09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c0a2:	dc37      	bgt.n	801c114 <MEMS_runMagCal.constprop.0+0x241c>
 801c0a4:	2300      	movs	r3, #0
 801c0a6:	6033      	str	r3, [r6, #0]
 801c0a8:	80b3      	strh	r3, [r6, #4]
 801c0aa:	f7fe bc9e 	b.w	801a9ea <MEMS_runMagCal.constprop.0+0xcf2>
 801c0ae:	ed9f aa12 	vldr	s20, [pc, #72]	@ 801c0f8 <MEMS_runMagCal.constprop.0+0x2400>
 801c0b2:	e454      	b.n	801b95e <MEMS_runMagCal.constprop.0+0x1c66>
 801c0b4:	eef2 ba04 	vmov.f32	s23, #36	@ 0x41200000  10.0
 801c0b8:	f7ff bb53 	b.w	801b762 <MEMS_runMagCal.constprop.0+0x1a6a>
 801c0bc:	3601      	adds	r6, #1
 801c0be:	b2f6      	uxtb	r6, r6
 801c0c0:	2e05      	cmp	r6, #5
 801c0c2:	f47e ae54 	bne.w	801ad6e <MEMS_runMagCal.constprop.0+0x1076>
 801c0c6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801c0ca:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801c0ce:	f7ff bbf0 	b.w	801b8b2 <MEMS_runMagCal.constprop.0+0x1bba>
 801c0d2:	ed9f ca09 	vldr	s24, [pc, #36]	@ 801c0f8 <MEMS_runMagCal.constprop.0+0x2400>
 801c0d6:	f7fe bd75 	b.w	801abc4 <MEMS_runMagCal.constprop.0+0xecc>
 801c0da:	ed9f ca08 	vldr	s24, [pc, #32]	@ 801c0fc <MEMS_runMagCal.constprop.0+0x2404>
 801c0de:	f7fe bd71 	b.w	801abc4 <MEMS_runMagCal.constprop.0+0xecc>
 801c0e2:	bf00      	nop
 801c0e4:	20000408 	.word	0x20000408
 801c0e8:	423c0000 	.word	0x423c0000
 801c0ec:	3ee66666 	.word	0x3ee66666
 801c0f0:	433d0000 	.word	0x433d0000
 801c0f4:	3ff4cccd 	.word	0x3ff4cccd
 801c0f8:	00000000 	.word	0x00000000
 801c0fc:	3f860a92 	.word	0x3f860a92
 801c100:	3a83126f 	.word	0x3a83126f
 801c104:	461a      	mov	r2, r3
 801c106:	fb97 f3f3 	sdiv	r3, r7, r3
 801c10a:	fb02 7313 	mls	r3, r2, r3, r7
 801c10e:	b21b      	sxth	r3, r3
 801c110:	f7fe bbd7 	b.w	801a8c2 <MEMS_runMagCal.constprop.0+0xbca>
 801c114:	eddd 7a02 	vldr	s15, [sp, #8]
 801c118:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801c11c:	ed5f 7a08 	vldr	s15, [pc, #-32]	@ 801c100 <MEMS_runMagCal.constprop.0+0x2408>
 801c120:	2303      	movs	r3, #3
 801c122:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c126:	f88a 306c 	strb.w	r3, [sl, #108]	@ 0x6c
 801c12a:	e76a      	b.n	801c002 <MEMS_runMagCal.constprop.0+0x230a>

0801c12c <MotionFX_GetStateSize>:
 801c12c:	f44f 6018 	mov.w	r0, #2432	@ 0x980
 801c130:	4770      	bx	lr
 801c132:	bf00      	nop

0801c134 <MotionFX_initialize>:
 801c134:	4a4b      	ldr	r2, [pc, #300]	@ (801c264 <MotionFX_initialize+0x130>)
 801c136:	6813      	ldr	r3, [r2, #0]
 801c138:	f04f 2ce0 	mov.w	ip, #3758153728	@ 0xe000e000
 801c13c:	f023 0301 	bic.w	r3, r3, #1
 801c140:	b530      	push	{r4, r5, lr}
 801c142:	6013      	str	r3, [r2, #0]
 801c144:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	@ 0xd00
 801c148:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 801c14c:	400b      	ands	r3, r1
 801c14e:	f24c 2240 	movw	r2, #49728	@ 0xc240
 801c152:	4293      	cmp	r3, r2
 801c154:	b085      	sub	sp, #20
 801c156:	4604      	mov	r4, r0
 801c158:	d013      	beq.n	801c182 <MotionFX_initialize+0x4e>
 801c15a:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	@ 0xd00
 801c15e:	f24c 2270 	movw	r2, #49776	@ 0xc270
 801c162:	400b      	ands	r3, r1
 801c164:	4293      	cmp	r3, r2
 801c166:	d00c      	beq.n	801c182 <MotionFX_initialize+0x4e>
 801c168:	4a3f      	ldr	r2, [pc, #252]	@ (801c268 <MotionFX_initialize+0x134>)
 801c16a:	2301      	movs	r3, #1
 801c16c:	6093      	str	r3, [r2, #8]
 801c16e:	6893      	ldr	r3, [r2, #8]
 801c170:	2b00      	cmp	r3, #0
 801c172:	d1fc      	bne.n	801c16e <MotionFX_initialize+0x3a>
 801c174:	4b3d      	ldr	r3, [pc, #244]	@ (801c26c <MotionFX_initialize+0x138>)
 801c176:	6013      	str	r3, [r2, #0]
 801c178:	6812      	ldr	r2, [r2, #0]
 801c17a:	4b3d      	ldr	r3, [pc, #244]	@ (801c270 <MotionFX_initialize+0x13c>)
 801c17c:	429a      	cmp	r2, r3
 801c17e:	d02c      	beq.n	801c1da <MotionFX_initialize+0xa6>
 801c180:	e7fe      	b.n	801c180 <MotionFX_initialize+0x4c>
 801c182:	4b3c      	ldr	r3, [pc, #240]	@ (801c274 <MotionFX_initialize+0x140>)
 801c184:	681b      	ldr	r3, [r3, #0]
 801c186:	2b00      	cmp	r3, #0
 801c188:	d1ee      	bne.n	801c168 <MotionFX_initialize+0x34>
 801c18a:	4a3b      	ldr	r2, [pc, #236]	@ (801c278 <MotionFX_initialize+0x144>)
 801c18c:	6813      	ldr	r3, [r2, #0]
 801c18e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c192:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 801c196:	d054      	beq.n	801c242 <MotionFX_initialize+0x10e>
 801c198:	6813      	ldr	r3, [r2, #0]
 801c19a:	f240 4183 	movw	r1, #1155	@ 0x483
 801c19e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c1a2:	428b      	cmp	r3, r1
 801c1a4:	d04d      	beq.n	801c242 <MotionFX_initialize+0x10e>
 801c1a6:	6813      	ldr	r3, [r2, #0]
 801c1a8:	f240 4285 	movw	r2, #1157	@ 0x485
 801c1ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c1b0:	4293      	cmp	r3, r2
 801c1b2:	d046      	beq.n	801c242 <MotionFX_initialize+0x10e>
 801c1b4:	4b31      	ldr	r3, [pc, #196]	@ (801c27c <MotionFX_initialize+0x148>)
 801c1b6:	681b      	ldr	r3, [r3, #0]
 801c1b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c1bc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801c1c0:	d1d2      	bne.n	801c168 <MotionFX_initialize+0x34>
 801c1c2:	4a2f      	ldr	r2, [pc, #188]	@ (801c280 <MotionFX_initialize+0x14c>)
 801c1c4:	2301      	movs	r3, #1
 801c1c6:	6093      	str	r3, [r2, #8]
 801c1c8:	6893      	ldr	r3, [r2, #8]
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d1fc      	bne.n	801c1c8 <MotionFX_initialize+0x94>
 801c1ce:	4b27      	ldr	r3, [pc, #156]	@ (801c26c <MotionFX_initialize+0x138>)
 801c1d0:	6013      	str	r3, [r2, #0]
 801c1d2:	6812      	ldr	r2, [r2, #0]
 801c1d4:	4b26      	ldr	r3, [pc, #152]	@ (801c270 <MotionFX_initialize+0x13c>)
 801c1d6:	429a      	cmp	r2, r3
 801c1d8:	d1d2      	bne.n	801c180 <MotionFX_initialize+0x4c>
 801c1da:	4b2a      	ldr	r3, [pc, #168]	@ (801c284 <MotionFX_initialize+0x150>)
 801c1dc:	4a2a      	ldr	r2, [pc, #168]	@ (801c288 <MotionFX_initialize+0x154>)
 801c1de:	9303      	str	r3, [sp, #12]
 801c1e0:	2501      	movs	r5, #1
 801c1e2:	4620      	mov	r0, r4
 801c1e4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801c1e8:	f882 53c4 	strb.w	r5, [r2, #964]	@ 0x3c4
 801c1ec:	f7f8 ffce 	bl	801518c <MFX_emptyAttitude>
 801c1f0:	a901      	add	r1, sp, #4
 801c1f2:	f104 003a 	add.w	r0, r4, #58	@ 0x3a
 801c1f6:	f7f7 fae3 	bl	80137c0 <updateOrientation>
 801c1fa:	a903      	add	r1, sp, #12
 801c1fc:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 801c200:	f7f7 fade 	bl	80137c0 <updateOrientation>
 801c204:	a902      	add	r1, sp, #8
 801c206:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 801c20a:	f7f7 fad9 	bl	80137c0 <updateOrientation>
 801c20e:	4b1f      	ldr	r3, [pc, #124]	@ (801c28c <MotionFX_initialize+0x158>)
 801c210:	491f      	ldr	r1, [pc, #124]	@ (801c290 <MotionFX_initialize+0x15c>)
 801c212:	61a3      	str	r3, [r4, #24]
 801c214:	4b1f      	ldr	r3, [pc, #124]	@ (801c294 <MotionFX_initialize+0x160>)
 801c216:	4a20      	ldr	r2, [pc, #128]	@ (801c298 <MotionFX_initialize+0x164>)
 801c218:	62a1      	str	r1, [r4, #40]	@ 0x28
 801c21a:	6223      	str	r3, [r4, #32]
 801c21c:	491f      	ldr	r1, [pc, #124]	@ (801c29c <MotionFX_initialize+0x168>)
 801c21e:	61e2      	str	r2, [r4, #28]
 801c220:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c224:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 801c228:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801c22c:	8723      	strh	r3, [r4, #56]	@ 0x38
 801c22e:	f240 1301 	movw	r3, #257	@ 0x101
 801c232:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801c234:	6361      	str	r1, [r4, #52]	@ 0x34
 801c236:	80a2      	strh	r2, [r4, #4]
 801c238:	f8a4 300d 	strh.w	r3, [r4, #13]
 801c23c:	73e5      	strb	r5, [r4, #15]
 801c23e:	b005      	add	sp, #20
 801c240:	bd30      	pop	{r4, r5, pc}
 801c242:	4a17      	ldr	r2, [pc, #92]	@ (801c2a0 <MotionFX_initialize+0x16c>)
 801c244:	2301      	movs	r3, #1
 801c246:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 801c24a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d1fb      	bne.n	801c24a <MotionFX_initialize+0x116>
 801c252:	4b06      	ldr	r3, [pc, #24]	@ (801c26c <MotionFX_initialize+0x138>)
 801c254:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 801c258:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 801c25c:	4b04      	ldr	r3, [pc, #16]	@ (801c270 <MotionFX_initialize+0x13c>)
 801c25e:	429a      	cmp	r2, r3
 801c260:	d0bb      	beq.n	801c1da <MotionFX_initialize+0xa6>
 801c262:	e78d      	b.n	801c180 <MotionFX_initialize+0x4c>
 801c264:	e0002000 	.word	0xe0002000
 801c268:	40023000 	.word	0x40023000
 801c26c:	f407a5c2 	.word	0xf407a5c2
 801c270:	b5e8b5cd 	.word	0xb5e8b5cd
 801c274:	e0042000 	.word	0xe0042000
 801c278:	5c001000 	.word	0x5c001000
 801c27c:	50081000 	.word	0x50081000
 801c280:	4c004000 	.word	0x4c004000
 801c284:	00756e65 	.word	0x00756e65
 801c288:	2000038c 	.word	0x2000038c
 801c28c:	3a51b717 	.word	0x3a51b717
 801c290:	3f666666 	.word	0x3f666666
 801c294:	3b378034 	.word	0x3b378034
 801c298:	3a378034 	.word	0x3a378034
 801c29c:	3f2ac083 	.word	0x3f2ac083
 801c2a0:	58024000 	.word	0x58024000

0801c2a4 <MotionFX_setKnobs>:
 801c2a4:	4b24      	ldr	r3, [pc, #144]	@ (801c338 <MotionFX_setKnobs+0x94>)
 801c2a6:	f893 23c4 	ldrb.w	r2, [r3, #964]	@ 0x3c4
 801c2aa:	b902      	cbnz	r2, 801c2ae <MotionFX_setKnobs+0xa>
 801c2ac:	4770      	bx	lr
 801c2ae:	460b      	mov	r3, r1
 801c2b0:	2900      	cmp	r1, #0
 801c2b2:	d0fb      	beq.n	801c2ac <MotionFX_setKnobs+0x8>
 801c2b4:	b510      	push	{r4, lr}
 801c2b6:	4604      	mov	r4, r0
 801c2b8:	689a      	ldr	r2, [r3, #8]
 801c2ba:	6808      	ldr	r0, [r1, #0]
 801c2bc:	6849      	ldr	r1, [r1, #4]
 801c2be:	62e1      	str	r1, [r4, #44]	@ 0x2c
 801c2c0:	62a0      	str	r0, [r4, #40]	@ 0x28
 801c2c2:	6362      	str	r2, [r4, #52]	@ 0x34
 801c2c4:	7b1a      	ldrb	r2, [r3, #12]
 801c2c6:	7162      	strb	r2, [r4, #5]
 801c2c8:	6918      	ldr	r0, [r3, #16]
 801c2ca:	6959      	ldr	r1, [r3, #20]
 801c2cc:	699a      	ldr	r2, [r3, #24]
 801c2ce:	6222      	str	r2, [r4, #32]
 801c2d0:	61a0      	str	r0, [r4, #24]
 801c2d2:	61e1      	str	r1, [r4, #28]
 801c2d4:	7f1a      	ldrb	r2, [r3, #28]
 801c2d6:	7122      	strb	r2, [r4, #4]
 801c2d8:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 801c2dc:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
 801c2e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c2e2:	f884 2978 	strb.w	r2, [r4, #2424]	@ 0x978
 801c2e6:	b084      	sub	sp, #16
 801c2e8:	f8b3 101d 	ldrh.w	r1, [r3, #29]
 801c2ec:	7fda      	ldrb	r2, [r3, #31]
 801c2ee:	f88d 2006 	strb.w	r2, [sp, #6]
 801c2f2:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c2f6:	f8b3 2021 	ldrh.w	r2, [r3, #33]	@ 0x21
 801c2fa:	f8ad 2008 	strh.w	r2, [sp, #8]
 801c2fe:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801c302:	f88d 200a 	strb.w	r2, [sp, #10]
 801c306:	f8b3 2025 	ldrh.w	r2, [r3, #37]	@ 0x25
 801c30a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801c30e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801c312:	f88d 300e 	strb.w	r3, [sp, #14]
 801c316:	a901      	add	r1, sp, #4
 801c318:	f104 003a 	add.w	r0, r4, #58	@ 0x3a
 801c31c:	f7f7 fa50 	bl	80137c0 <updateOrientation>
 801c320:	a903      	add	r1, sp, #12
 801c322:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 801c326:	f7f7 fa4b 	bl	80137c0 <updateOrientation>
 801c32a:	a902      	add	r1, sp, #8
 801c32c:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 801c330:	f7f7 fa46 	bl	80137c0 <updateOrientation>
 801c334:	b004      	add	sp, #16
 801c336:	bd10      	pop	{r4, pc}
 801c338:	2000038c 	.word	0x2000038c

0801c33c <MotionFX_getKnobs>:
 801c33c:	4b1d      	ldr	r3, [pc, #116]	@ (801c3b4 <MotionFX_getKnobs+0x78>)
 801c33e:	f893 33c4 	ldrb.w	r3, [r3, #964]	@ 0x3c4
 801c342:	b903      	cbnz	r3, 801c346 <MotionFX_getKnobs+0xa>
 801c344:	4770      	bx	lr
 801c346:	460a      	mov	r2, r1
 801c348:	2900      	cmp	r1, #0
 801c34a:	d0fb      	beq.n	801c344 <MotionFX_getKnobs+0x8>
 801c34c:	b510      	push	{r4, lr}
 801c34e:	4604      	mov	r4, r0
 801c350:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801c352:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801c354:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c356:	6093      	str	r3, [r2, #8]
 801c358:	6010      	str	r0, [r2, #0]
 801c35a:	6051      	str	r1, [r2, #4]
 801c35c:	7963      	ldrb	r3, [r4, #5]
 801c35e:	7313      	strb	r3, [r2, #12]
 801c360:	69a0      	ldr	r0, [r4, #24]
 801c362:	69e1      	ldr	r1, [r4, #28]
 801c364:	6a23      	ldr	r3, [r4, #32]
 801c366:	6193      	str	r3, [r2, #24]
 801c368:	6110      	str	r0, [r2, #16]
 801c36a:	6151      	str	r1, [r2, #20]
 801c36c:	7923      	ldrb	r3, [r4, #4]
 801c36e:	7713      	strb	r3, [r2, #28]
 801c370:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801c374:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
 801c378:	f894 3978 	ldrb.w	r3, [r4, #2424]	@ 0x978
 801c37c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801c37e:	f102 011d 	add.w	r1, r2, #29
 801c382:	f104 003a 	add.w	r0, r4, #58	@ 0x3a
 801c386:	f7f7 f8af 	bl	80134e8 <findAxis>
 801c38a:	f102 0121 	add.w	r1, r2, #33	@ 0x21
 801c38e:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 801c392:	f7f7 f8a9 	bl	80134e8 <findAxis>
 801c396:	f102 0125 	add.w	r1, r2, #37	@ 0x25
 801c39a:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 801c39e:	f7f7 f8a3 	bl	80134e8 <findAxis>
 801c3a2:	2300      	movs	r3, #0
 801c3a4:	f882 3020 	strb.w	r3, [r2, #32]
 801c3a8:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
 801c3ac:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 801c3b0:	bd10      	pop	{r4, pc}
 801c3b2:	bf00      	nop
 801c3b4:	2000038c 	.word	0x2000038c

0801c3b8 <MotionFX_enable_6X>:
 801c3b8:	4b0e      	ldr	r3, [pc, #56]	@ (801c3f4 <MotionFX_enable_6X+0x3c>)
 801c3ba:	f893 33c4 	ldrb.w	r3, [r3, #964]	@ 0x3c4
 801c3be:	b903      	cbnz	r3, 801c3c2 <MotionFX_enable_6X+0xa>
 801c3c0:	4770      	bx	lr
 801c3c2:	2900      	cmp	r1, #0
 801c3c4:	d0fc      	beq.n	801c3c0 <MotionFX_enable_6X+0x8>
 801c3c6:	b530      	push	{r4, r5, lr}
 801c3c8:	1d05      	adds	r5, r0, #4
 801c3ca:	b099      	sub	sp, #100	@ 0x64
 801c3cc:	4604      	mov	r4, r0
 801c3ce:	4629      	mov	r1, r5
 801c3d0:	225c      	movs	r2, #92	@ 0x5c
 801c3d2:	a801      	add	r0, sp, #4
 801c3d4:	f003 fe09 	bl	801ffea <memcpy>
 801c3d8:	4620      	mov	r0, r4
 801c3da:	f7f8 fed7 	bl	801518c <MFX_emptyAttitude>
 801c3de:	225c      	movs	r2, #92	@ 0x5c
 801c3e0:	a901      	add	r1, sp, #4
 801c3e2:	4628      	mov	r0, r5
 801c3e4:	f003 fe01 	bl	801ffea <memcpy>
 801c3e8:	2300      	movs	r3, #0
 801c3ea:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 801c3ee:	7363      	strb	r3, [r4, #13]
 801c3f0:	b019      	add	sp, #100	@ 0x64
 801c3f2:	bd30      	pop	{r4, r5, pc}
 801c3f4:	2000038c 	.word	0x2000038c

0801c3f8 <MotionFX_enable_9X>:
 801c3f8:	4b0e      	ldr	r3, [pc, #56]	@ (801c434 <MotionFX_enable_9X+0x3c>)
 801c3fa:	f893 33c4 	ldrb.w	r3, [r3, #964]	@ 0x3c4
 801c3fe:	b903      	cbnz	r3, 801c402 <MotionFX_enable_9X+0xa>
 801c400:	4770      	bx	lr
 801c402:	2900      	cmp	r1, #0
 801c404:	d0fc      	beq.n	801c400 <MotionFX_enable_9X+0x8>
 801c406:	b530      	push	{r4, r5, lr}
 801c408:	1d05      	adds	r5, r0, #4
 801c40a:	b099      	sub	sp, #100	@ 0x64
 801c40c:	4604      	mov	r4, r0
 801c40e:	4629      	mov	r1, r5
 801c410:	225c      	movs	r2, #92	@ 0x5c
 801c412:	a801      	add	r0, sp, #4
 801c414:	f003 fde9 	bl	801ffea <memcpy>
 801c418:	4620      	mov	r0, r4
 801c41a:	f7f8 feb7 	bl	801518c <MFX_emptyAttitude>
 801c41e:	225c      	movs	r2, #92	@ 0x5c
 801c420:	a901      	add	r1, sp, #4
 801c422:	4628      	mov	r0, r5
 801c424:	f003 fde1 	bl	801ffea <memcpy>
 801c428:	2301      	movs	r3, #1
 801c42a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 801c42e:	7363      	strb	r3, [r4, #13]
 801c430:	b019      	add	sp, #100	@ 0x64
 801c432:	bd30      	pop	{r4, r5, pc}
 801c434:	2000038c 	.word	0x2000038c

0801c438 <MotionFX_update>:
 801c438:	b430      	push	{r4, r5}
 801c43a:	4c06      	ldr	r4, [pc, #24]	@ (801c454 <MotionFX_update+0x1c>)
 801c43c:	9d02      	ldr	r5, [sp, #8]
 801c43e:	f894 43c4 	ldrb.w	r4, [r4, #964]	@ 0x3c4
 801c442:	b90c      	cbnz	r4, 801c448 <MotionFX_update+0x10>
 801c444:	bc30      	pop	{r4, r5}
 801c446:	4770      	bx	lr
 801c448:	ed93 0a00 	vldr	s0, [r3]
 801c44c:	462b      	mov	r3, r5
 801c44e:	bc30      	pop	{r4, r5}
 801c450:	f7f9 b986 	b.w	8015760 <iNemoEngine_API_Update>
 801c454:	2000038c 	.word	0x2000038c

0801c458 <MotionFX_propagate>:
 801c458:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c45a:	ed2d 8b06 	vpush	{d8-d10}
 801c45e:	4c79      	ldr	r4, [pc, #484]	@ (801c644 <MotionFX_propagate+0x1ec>)
 801c460:	f894 63c4 	ldrb.w	r6, [r4, #964]	@ 0x3c4
 801c464:	b09d      	sub	sp, #116	@ 0x74
 801c466:	b91e      	cbnz	r6, 801c470 <MotionFX_propagate+0x18>
 801c468:	b01d      	add	sp, #116	@ 0x74
 801c46a:	ecbd 8b06 	vpop	{d8-d10}
 801c46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c470:	4694      	mov	ip, r2
 801c472:	4604      	mov	r4, r0
 801c474:	460d      	mov	r5, r1
 801c476:	68d0      	ldr	r0, [r2, #12]
 801c478:	6911      	ldr	r1, [r2, #16]
 801c47a:	6952      	ldr	r2, [r2, #20]
 801c47c:	ed93 0a00 	vldr	s0, [r3]
 801c480:	ab0f      	add	r3, sp, #60	@ 0x3c
 801c482:	c307      	stmia	r3!, {r0, r1, r2}
 801c484:	f8dc 0018 	ldr.w	r0, [ip, #24]
 801c488:	f8dc 101c 	ldr.w	r1, [ip, #28]
 801c48c:	f8dc 2020 	ldr.w	r2, [ip, #32]
 801c490:	c307      	stmia	r3!, {r0, r1, r2}
 801c492:	aa12      	add	r2, sp, #72	@ 0x48
 801c494:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 801c498:	a802      	add	r0, sp, #8
 801c49a:	f7f6 ffc3 	bl	8013424 <rotVect>
 801c49e:	7923      	ldrb	r3, [r4, #4]
 801c4a0:	f104 073a 	add.w	r7, r4, #58	@ 0x3a
 801c4a4:	2b00      	cmp	r3, #0
 801c4a6:	f000 80bf 	beq.w	801c628 <MotionFX_propagate+0x1d0>
 801c4aa:	ee07 3a90 	vmov	s15, r3
 801c4ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c4b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c4b6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c4ba:	f604 135c 	addw	r3, r4, #2396	@ 0x95c
 801c4be:	f504 6613 	add.w	r6, r4, #2352	@ 0x930
 801c4c2:	edd3 7a00 	vldr	s15, [r3]
 801c4c6:	eddd 5a02 	vldr	s11, [sp, #8]
 801c4ca:	ed9d 5a03 	vldr	s10, [sp, #12]
 801c4ce:	ed9d 6a04 	vldr	s12, [sp, #16]
 801c4d2:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 801c648 <MotionFX_propagate+0x1f0>
 801c4d6:	eddf 4a5d 	vldr	s9, [pc, #372]	@ 801c64c <MotionFX_propagate+0x1f4>
 801c4da:	eee5 7aa6 	vfma.f32	s15, s11, s13
 801c4de:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 801c4e2:	edc3 7a00 	vstr	s15, [r3]
 801c4e6:	f504 6316 	add.w	r3, r4, #2400	@ 0x960
 801c4ea:	edd3 7a00 	vldr	s15, [r3]
 801c4ee:	eee5 7a26 	vfma.f32	s15, s10, s13
 801c4f2:	ee20 0a04 	vmul.f32	s0, s0, s8
 801c4f6:	edc3 7a00 	vstr	s15, [r3]
 801c4fa:	f604 1364 	addw	r3, r4, #2404	@ 0x964
 801c4fe:	edd3 7a00 	vldr	s15, [r3]
 801c502:	eee6 7a26 	vfma.f32	s15, s12, s13
 801c506:	edc3 7a00 	vstr	s15, [r3]
 801c50a:	f604 1344 	addw	r3, r4, #2372	@ 0x944
 801c50e:	edd3 8a00 	vldr	s17, [r3]
 801c512:	f504 6314 	add.w	r3, r4, #2368	@ 0x940
 801c516:	ed93 9a00 	vldr	s18, [r3]
 801c51a:	eed5 8a07 	vfnms.f32	s17, s10, s14
 801c51e:	f604 1348 	addw	r3, r4, #2376	@ 0x948
 801c522:	ee95 9a87 	vfnms.f32	s18, s11, s14
 801c526:	ee68 7aa8 	vmul.f32	s15, s17, s17
 801c52a:	ed93 8a00 	vldr	s16, [r3]
 801c52e:	eee9 7a09 	vfma.f32	s15, s18, s18
 801c532:	ee96 8a07 	vfnms.f32	s16, s12, s14
 801c536:	eee8 7a08 	vfma.f32	s15, s16, s16
 801c53a:	eef4 7ae4 	vcmpe.f32	s15, s9
 801c53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c542:	dd76      	ble.n	801c632 <MotionFX_propagate+0x1da>
 801c544:	eeb1 aae7 	vsqrt.f32	s20, s15
 801c548:	ee6a 9a00 	vmul.f32	s19, s20, s0
 801c54c:	eeb0 0a69 	vmov.f32	s0, s19
 801c550:	f000 fcd0 	bl	801cef4 <sinf>
 801c554:	eeb0 7a40 	vmov.f32	s14, s0
 801c558:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c55c:	eeb0 0a69 	vmov.f32	s0, s19
 801c560:	ee29 9a27 	vmul.f32	s18, s18, s15
 801c564:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801c568:	ee28 8a27 	vmul.f32	s16, s16, s15
 801c56c:	f000 fc76 	bl	801ce5c <cosf>
 801c570:	a805      	add	r0, sp, #20
 801c572:	4632      	mov	r2, r6
 801c574:	4631      	mov	r1, r6
 801c576:	ed8d 0a08 	vstr	s0, [sp, #32]
 801c57a:	ed8d 9a05 	vstr	s18, [sp, #20]
 801c57e:	edcd 8a06 	vstr	s17, [sp, #24]
 801c582:	ed8d 8a07 	vstr	s16, [sp, #28]
 801c586:	f7f7 f99f 	bl	80138c8 <qmult>
 801c58a:	f604 1c38 	addw	ip, r4, #2360	@ 0x938
 801c58e:	ed9c 7a00 	vldr	s14, [ip]
 801c592:	ed96 6a00 	vldr	s12, [r6]
 801c596:	f604 1e34 	addw	lr, r4, #2356	@ 0x934
 801c59a:	edde 6a00 	vldr	s13, [lr]
 801c59e:	ee67 7a07 	vmul.f32	s15, s14, s14
 801c5a2:	f604 133c 	addw	r3, r4, #2364	@ 0x93c
 801c5a6:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801c5aa:	aa0f      	add	r2, sp, #60	@ 0x3c
 801c5ac:	4639      	mov	r1, r7
 801c5ae:	edd3 5a00 	vldr	s11, [r3]
 801c5b2:	eee6 7a06 	vfma.f32	s15, s12, s12
 801c5b6:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 801c5ba:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801c5be:	eeb1 5ae7 	vsqrt.f32	s10, s15
 801c5c2:	eec4 7a85 	vdiv.f32	s15, s9, s10
 801c5c6:	ee27 4a86 	vmul.f32	s8, s15, s12
 801c5ca:	ee67 4aa6 	vmul.f32	s9, s15, s13
 801c5ce:	ee27 5a27 	vmul.f32	s10, s14, s15
 801c5d2:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801c5d6:	ed86 4a00 	vstr	s8, [r6]
 801c5da:	edce 4a00 	vstr	s9, [lr]
 801c5de:	ed8c 5a00 	vstr	s10, [ip]
 801c5e2:	edc3 5a00 	vstr	s11, [r3]
 801c5e6:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	@ 0x950
 801c5ea:	3301      	adds	r3, #1
 801c5ec:	f8a4 3950 	strh.w	r3, [r4, #2384]	@ 0x950
 801c5f0:	f7f6 ff18 	bl	8013424 <rotVect>
 801c5f4:	ed85 4a03 	vstr	s8, [r5, #12]
 801c5f8:	edc5 4a04 	vstr	s9, [r5, #16]
 801c5fc:	ed85 5a05 	vstr	s10, [r5, #20]
 801c600:	edc5 5a06 	vstr	s11, [r5, #24]
 801c604:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801c608:	f105 0328 	add.w	r3, r5, #40	@ 0x28
 801c60c:	e9cd 3200 	strd	r3, r2, [sp]
 801c610:	4601      	mov	r1, r0
 801c612:	f105 031c 	add.w	r3, r5, #28
 801c616:	462a      	mov	r2, r5
 801c618:	f105 000c 	add.w	r0, r5, #12
 801c61c:	f7f8 fce8 	bl	8014ff0 <output_update>
 801c620:	b01d      	add	sp, #116	@ 0x74
 801c622:	ecbd 8b06 	vpop	{d8-d10}
 801c626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c628:	2301      	movs	r3, #1
 801c62a:	7123      	strb	r3, [r4, #4]
 801c62c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c630:	e743      	b.n	801c4ba <MotionFX_propagate+0x62>
 801c632:	ee29 9a00 	vmul.f32	s18, s18, s0
 801c636:	ee68 8a80 	vmul.f32	s17, s17, s0
 801c63a:	ee28 8a00 	vmul.f32	s16, s16, s0
 801c63e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801c642:	e795      	b.n	801c570 <MotionFX_propagate+0x118>
 801c644:	2000038c 	.word	0x2000038c
 801c648:	3c8efa35 	.word	0x3c8efa35
 801c64c:	38d1b718 	.word	0x38d1b718

0801c650 <MotionFX_MagCal_init>:
 801c650:	b570      	push	{r4, r5, r6, lr}
 801c652:	4c42      	ldr	r4, [pc, #264]	@ (801c75c <MotionFX_MagCal_init+0x10c>)
 801c654:	f894 33c4 	ldrb.w	r3, [r4, #964]	@ 0x3c4
 801c658:	b903      	cbnz	r3, 801c65c <MotionFX_MagCal_init+0xc>
 801c65a:	bd70      	pop	{r4, r5, r6, pc}
 801c65c:	1e43      	subs	r3, r0, #1
 801c65e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c662:	4605      	mov	r5, r0
 801c664:	d2f9      	bcs.n	801c65a <MotionFX_MagCal_init+0xa>
 801c666:	2900      	cmp	r1, #0
 801c668:	d139      	bne.n	801c6de <MotionFX_MagCal_init+0x8e>
 801c66a:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
 801c66e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801c672:	4a3b      	ldr	r2, [pc, #236]	@ (801c760 <MotionFX_MagCal_init+0x110>)
 801c674:	1b5b      	subs	r3, r3, r5
 801c676:	ee07 3a90 	vmov	s15, r3
 801c67a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c67e:	23c8      	movs	r3, #200	@ 0xc8
 801c680:	eef0 7ae7 	vabs.f32	s15, s15
 801c684:	fb93 f3f5 	sdiv	r3, r3, r5
 801c688:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c68c:	b2db      	uxtb	r3, r3
 801c68e:	2b0f      	cmp	r3, #15
 801c690:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c694:	bf28      	it	cs
 801c696:	230f      	movcs	r3, #15
 801c698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c69c:	6015      	str	r5, [r2, #0]
 801c69e:	f884 37de 	strb.w	r3, [r4, #2014]	@ 0x7de
 801c6a2:	b22d      	sxth	r5, r5
 801c6a4:	dc0e      	bgt.n	801c6c4 <MotionFX_MagCal_init+0x74>
 801c6a6:	edd4 7a01 	vldr	s15, [r4, #4]
 801c6aa:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 801c764 <MotionFX_MagCal_init+0x114>
 801c6ae:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 801c768 <MotionFX_MagCal_init+0x118>
 801c6b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c6b6:	eef0 7ae7 	vabs.f32	s15, s15
 801c6ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c6be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6c2:	dd08      	ble.n	801c6d6 <MotionFX_MagCal_init+0x86>
 801c6c4:	2300      	movs	r3, #0
 801c6c6:	4a29      	ldr	r2, [pc, #164]	@ (801c76c <MotionFX_MagCal_init+0x11c>)
 801c6c8:	8123      	strh	r3, [r4, #8]
 801c6ca:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 801c6ce:	60e3      	str	r3, [r4, #12]
 801c6d0:	8021      	strh	r1, [r4, #0]
 801c6d2:	8065      	strh	r5, [r4, #2]
 801c6d4:	6062      	str	r2, [r4, #4]
 801c6d6:	2300      	movs	r3, #0
 801c6d8:	f884 3858 	strb.w	r3, [r4, #2136]	@ 0x858
 801c6dc:	bd70      	pop	{r4, r5, r6, pc}
 801c6de:	2600      	movs	r6, #0
 801c6e0:	f44f 0302 	mov.w	r3, #8519680	@ 0x820000
 801c6e4:	e9c4 3602 	strd	r3, r6, [r4, #8]
 801c6e8:	f504 7372 	add.w	r3, r4, #968	@ 0x3c8
 801c6ec:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801c6f0:	4631      	mov	r1, r6
 801c6f2:	6123      	str	r3, [r4, #16]
 801c6f4:	f104 00a0 	add.w	r0, r4, #160	@ 0xa0
 801c6f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801c6fc:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 801c700:	f884 6048 	strb.w	r6, [r4, #72]	@ 0x48
 801c704:	64e6      	str	r6, [r4, #76]	@ 0x4c
 801c706:	82a6      	strh	r6, [r4, #20]
 801c708:	f003 fb45 	bl	801fd96 <memset>
 801c70c:	225f      	movs	r2, #95	@ 0x5f
 801c70e:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
 801c712:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 801c716:	84a2      	strh	r2, [r4, #36]	@ 0x24
 801c718:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801c71c:	23ff      	movs	r3, #255	@ 0xff
 801c71e:	f8a4 2054 	strh.w	r2, [r4, #84]	@ 0x54
 801c722:	4631      	mov	r1, r6
 801c724:	2230      	movs	r2, #48	@ 0x30
 801c726:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 801c72a:	f884 30a2 	strb.w	r3, [r4, #162]	@ 0xa2
 801c72e:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
 801c732:	e9c4 6606 	strd	r6, r6, [r4, #24]
 801c736:	6226      	str	r6, [r4, #32]
 801c738:	f003 fb2d 	bl	801fd96 <memset>
 801c73c:	f1a5 030a 	sub.w	r3, r5, #10
 801c740:	b29b      	uxth	r3, r3
 801c742:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801c746:	2101      	movs	r1, #1
 801c748:	2b32      	cmp	r3, #50	@ 0x32
 801c74a:	f884 106d 	strb.w	r1, [r4, #109]	@ 0x6d
 801c74e:	67e2      	str	r2, [r4, #124]	@ 0x7c
 801c750:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
 801c754:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 801c758:	d889      	bhi.n	801c66e <MotionFX_MagCal_init+0x1e>
 801c75a:	e786      	b.n	801c66a <MotionFX_MagCal_init+0x1a>
 801c75c:	2000038c 	.word	0x2000038c
 801c760:	20000000 	.word	0x20000000
 801c764:	3dcccccd 	.word	0x3dcccccd
 801c768:	3c23d70a 	.word	0x3c23d70a
 801c76c:	3dcccccd 	.word	0x3dcccccd

0801c770 <MotionFX_MagCal_run>:
 801c770:	4940      	ldr	r1, [pc, #256]	@ (801c874 <MotionFX_MagCal_run+0x104>)
 801c772:	f891 33c4 	ldrb.w	r3, [r1, #964]	@ 0x3c4
 801c776:	2b00      	cmp	r3, #0
 801c778:	d07b      	beq.n	801c872 <MotionFX_MagCal_run+0x102>
 801c77a:	ed90 7a00 	vldr	s14, [r0]
 801c77e:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 801c878 <MotionFX_MagCal_run+0x108>
 801c782:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801c786:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c78e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801c792:	bfb4      	ite	lt
 801c794:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 801c798:	ee77 7a87 	vaddge.f32	s15, s15, s14
 801c79c:	ed90 7a01 	vldr	s14, [r0, #4]
 801c7a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c7a4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801c7a8:	ee17 ca90 	vmov	ip, s15
 801c7ac:	eddf 7a32 	vldr	s15, [pc, #200]	@ 801c878 <MotionFX_MagCal_run+0x108>
 801c7b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7b8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801c7bc:	bfb4      	ite	lt
 801c7be:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 801c7c2:	ee77 7a87 	vaddge.f32	s15, s15, s14
 801c7c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c7ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c7ce:	ed90 7a02 	vldr	s14, [r0, #8]
 801c7d2:	f891 3858 	ldrb.w	r3, [r1, #2136]	@ 0x858
 801c7d6:	68c0      	ldr	r0, [r0, #12]
 801c7d8:	ee17 2a90 	vmov	r2, s15
 801c7dc:	eddf 7a26 	vldr	s15, [pc, #152]	@ 801c878 <MotionFX_MagCal_run+0x108>
 801c7e0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801c7e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7ec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801c7f0:	bfac      	ite	ge
 801c7f2:	ee77 7a87 	vaddge.f32	s15, s15, s14
 801c7f6:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 801c7fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c7fe:	b38b      	cbz	r3, 801c864 <MotionFX_MagCal_run+0xf4>
 801c800:	481e      	ldr	r0, [pc, #120]	@ (801c87c <MotionFX_MagCal_run+0x10c>)
 801c802:	6800      	ldr	r0, [r0, #0]
 801c804:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 801c808:	fb10 f003 	smulbb	r0, r0, r3
 801c80c:	f8a4 07e0 	strh.w	r0, [r4, #2016]	@ 0x7e0
 801c810:	00d8      	lsls	r0, r3, #3
 801c812:	f647 74fe 	movw	r4, #32766	@ 0x7ffe
 801c816:	ee17 5a90 	vmov	r5, s15
 801c81a:	4f19      	ldr	r7, [pc, #100]	@ (801c880 <MotionFX_MagCal_run+0x110>)
 801c81c:	45a4      	cmp	ip, r4
 801c81e:	4666      	mov	r6, ip
 801c820:	bfa8      	it	ge
 801c822:	4626      	movge	r6, r4
 801c824:	42a5      	cmp	r5, r4
 801c826:	bfa8      	it	ge
 801c828:	4625      	movge	r5, r4
 801c82a:	42be      	cmp	r6, r7
 801c82c:	bfb8      	it	lt
 801c82e:	463e      	movlt	r6, r7
 801c830:	42ba      	cmp	r2, r7
 801c832:	db02      	blt.n	801c83a <MotionFX_MagCal_run+0xca>
 801c834:	4294      	cmp	r4, r2
 801c836:	bfa8      	it	ge
 801c838:	4614      	movge	r4, r2
 801c83a:	180a      	adds	r2, r1, r0
 801c83c:	4810      	ldr	r0, [pc, #64]	@ (801c880 <MotionFX_MagCal_run+0x110>)
 801c83e:	f8a2 67e2 	strh.w	r6, [r2, #2018]	@ 0x7e2
 801c842:	42a8      	cmp	r0, r5
 801c844:	bfb8      	it	lt
 801c846:	4628      	movlt	r0, r5
 801c848:	3301      	adds	r3, #1
 801c84a:	f891 57de 	ldrb.w	r5, [r1, #2014]	@ 0x7de
 801c84e:	f8a2 47e4 	strh.w	r4, [r2, #2020]	@ 0x7e4
 801c852:	b2db      	uxtb	r3, r3
 801c854:	42ab      	cmp	r3, r5
 801c856:	f881 3858 	strb.w	r3, [r1, #2136]	@ 0x858
 801c85a:	f8a2 07e6 	strh.w	r0, [r2, #2022]	@ 0x7e6
 801c85e:	d011      	beq.n	801c884 <MotionFX_MagCal_run+0x114>
 801c860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c864:	f8c1 07d8 	str.w	r0, [r1, #2008]	@ 0x7d8
 801c868:	2001      	movs	r0, #1
 801c86a:	f881 07dc 	strb.w	r0, [r1, #2012]	@ 0x7dc
 801c86e:	4618      	mov	r0, r3
 801c870:	e7cf      	b.n	801c812 <MotionFX_MagCal_run+0xa2>
 801c872:	4770      	bx	lr
 801c874:	2000038c 	.word	0x2000038c
 801c878:	43fa0000 	.word	0x43fa0000
 801c87c:	20000000 	.word	0x20000000
 801c880:	ffff8002 	.word	0xffff8002
 801c884:	f891 37dc 	ldrb.w	r3, [r1, #2012]	@ 0x7dc
 801c888:	f8d1 77d8 	ldr.w	r7, [r1, #2008]	@ 0x7d8
 801c88c:	2200      	movs	r2, #0
 801c88e:	f881 2858 	strb.w	r2, [r1, #2136]	@ 0x858
 801c892:	2b00      	cmp	r3, #0
 801c894:	f000 8169 	beq.w	801cb6a <MotionFX_MagCal_run+0x3fa>
 801c898:	2d00      	cmp	r5, #0
 801c89a:	f000 8166 	beq.w	801cb6a <MotionFX_MagCal_run+0x3fa>
 801c89e:	894e      	ldrh	r6, [r1, #10]
 801c8a0:	2e00      	cmp	r6, #0
 801c8a2:	f000 8162 	beq.w	801cb6a <MotionFX_MagCal_run+0x3fa>
 801c8a6:	890b      	ldrh	r3, [r1, #8]
 801c8a8:	690c      	ldr	r4, [r1, #16]
 801c8aa:	42b3      	cmp	r3, r6
 801c8ac:	bf28      	it	cs
 801c8ae:	4633      	movcs	r3, r6
 801c8b0:	3301      	adds	r3, #1
 801c8b2:	b29b      	uxth	r3, r3
 801c8b4:	42b3      	cmp	r3, r6
 801c8b6:	bf28      	it	cs
 801c8b8:	4633      	movcs	r3, r6
 801c8ba:	f06f 4860 	mvn.w	r8, #3758096384	@ 0xe0000000
 801c8be:	eb03 0208 	add.w	r2, r3, r8
 801c8c2:	f04f 0901 	mov.w	r9, #1
 801c8c6:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801c8ca:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801c8ce:	f8d1 c7e2 	ldr.w	ip, [r1, #2018]	@ 0x7e2
 801c8d2:	f8c2 c002 	str.w	ip, [r2, #2]
 801c8d6:	f9b1 07e6 	ldrsh.w	r0, [r1, #2022]	@ 0x7e6
 801c8da:	f8b1 e7e0 	ldrh.w	lr, [r1, #2016]	@ 0x7e0
 801c8de:	80d0      	strh	r0, [r2, #6]
 801c8e0:	454d      	cmp	r5, r9
 801c8e2:	f000 813a 	beq.w	801cb5a <MotionFX_MagCal_run+0x3ea>
 801c8e6:	444b      	add	r3, r9
 801c8e8:	b29b      	uxth	r3, r3
 801c8ea:	42b3      	cmp	r3, r6
 801c8ec:	bf28      	it	cs
 801c8ee:	4633      	movcs	r3, r6
 801c8f0:	eb03 0208 	add.w	r2, r3, r8
 801c8f4:	2d02      	cmp	r5, #2
 801c8f6:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801c8fa:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801c8fe:	f8d1 c7ea 	ldr.w	ip, [r1, #2026]	@ 0x7ea
 801c902:	f8c2 c002 	str.w	ip, [r2, #2]
 801c906:	f9b1 07ee 	ldrsh.w	r0, [r1, #2030]	@ 0x7ee
 801c90a:	f8b1 e7e8 	ldrh.w	lr, [r1, #2024]	@ 0x7e8
 801c90e:	80d0      	strh	r0, [r2, #6]
 801c910:	f000 8123 	beq.w	801cb5a <MotionFX_MagCal_run+0x3ea>
 801c914:	444b      	add	r3, r9
 801c916:	b29b      	uxth	r3, r3
 801c918:	42b3      	cmp	r3, r6
 801c91a:	bf28      	it	cs
 801c91c:	4633      	movcs	r3, r6
 801c91e:	eb03 0208 	add.w	r2, r3, r8
 801c922:	2d03      	cmp	r5, #3
 801c924:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801c928:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801c92c:	f8d1 c7f2 	ldr.w	ip, [r1, #2034]	@ 0x7f2
 801c930:	f8c2 c002 	str.w	ip, [r2, #2]
 801c934:	f9b1 07f6 	ldrsh.w	r0, [r1, #2038]	@ 0x7f6
 801c938:	f8b1 e7f0 	ldrh.w	lr, [r1, #2032]	@ 0x7f0
 801c93c:	80d0      	strh	r0, [r2, #6]
 801c93e:	f000 810c 	beq.w	801cb5a <MotionFX_MagCal_run+0x3ea>
 801c942:	444b      	add	r3, r9
 801c944:	b29b      	uxth	r3, r3
 801c946:	42b3      	cmp	r3, r6
 801c948:	bf28      	it	cs
 801c94a:	4633      	movcs	r3, r6
 801c94c:	eb03 0208 	add.w	r2, r3, r8
 801c950:	2d04      	cmp	r5, #4
 801c952:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801c956:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801c95a:	f8d1 c7fa 	ldr.w	ip, [r1, #2042]	@ 0x7fa
 801c95e:	f8c2 c002 	str.w	ip, [r2, #2]
 801c962:	f9b1 07fe 	ldrsh.w	r0, [r1, #2046]	@ 0x7fe
 801c966:	f8b1 e7f8 	ldrh.w	lr, [r1, #2040]	@ 0x7f8
 801c96a:	80d0      	strh	r0, [r2, #6]
 801c96c:	f000 80f5 	beq.w	801cb5a <MotionFX_MagCal_run+0x3ea>
 801c970:	444b      	add	r3, r9
 801c972:	b29b      	uxth	r3, r3
 801c974:	42b3      	cmp	r3, r6
 801c976:	bf28      	it	cs
 801c978:	4633      	movcs	r3, r6
 801c97a:	eb03 0208 	add.w	r2, r3, r8
 801c97e:	2d05      	cmp	r5, #5
 801c980:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801c984:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801c988:	f8d1 c802 	ldr.w	ip, [r1, #2050]	@ 0x802
 801c98c:	f8c2 c002 	str.w	ip, [r2, #2]
 801c990:	f9b1 0806 	ldrsh.w	r0, [r1, #2054]	@ 0x806
 801c994:	f8b1 e800 	ldrh.w	lr, [r1, #2048]	@ 0x800
 801c998:	80d0      	strh	r0, [r2, #6]
 801c99a:	f000 80de 	beq.w	801cb5a <MotionFX_MagCal_run+0x3ea>
 801c99e:	444b      	add	r3, r9
 801c9a0:	b29b      	uxth	r3, r3
 801c9a2:	42b3      	cmp	r3, r6
 801c9a4:	bf28      	it	cs
 801c9a6:	4633      	movcs	r3, r6
 801c9a8:	4498      	add	r8, r3
 801c9aa:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
 801c9ae:	f804 9038 	strb.w	r9, [r4, r8, lsl #3]
 801c9b2:	f8d1 c80a 	ldr.w	ip, [r1, #2058]	@ 0x80a
 801c9b6:	f8c2 c002 	str.w	ip, [r2, #2]
 801c9ba:	f9b1 080e 	ldrsh.w	r0, [r1, #2062]	@ 0x80e
 801c9be:	f8b1 e808 	ldrh.w	lr, [r1, #2056]	@ 0x808
 801c9c2:	80d0      	strh	r0, [r2, #6]
 801c9c4:	2d06      	cmp	r5, #6
 801c9c6:	f000 80c8 	beq.w	801cb5a <MotionFX_MagCal_run+0x3ea>
 801c9ca:	444b      	add	r3, r9
 801c9cc:	b29b      	uxth	r3, r3
 801c9ce:	42b3      	cmp	r3, r6
 801c9d0:	bf28      	it	cs
 801c9d2:	4633      	movcs	r3, r6
 801c9d4:	f06f 4860 	mvn.w	r8, #3758096384	@ 0xe0000000
 801c9d8:	eb03 0208 	add.w	r2, r3, r8
 801c9dc:	2d07      	cmp	r5, #7
 801c9de:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801c9e2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801c9e6:	f8d1 c812 	ldr.w	ip, [r1, #2066]	@ 0x812
 801c9ea:	f8c2 c002 	str.w	ip, [r2, #2]
 801c9ee:	f9b1 0816 	ldrsh.w	r0, [r1, #2070]	@ 0x816
 801c9f2:	f8b1 e810 	ldrh.w	lr, [r1, #2064]	@ 0x810
 801c9f6:	80d0      	strh	r0, [r2, #6]
 801c9f8:	f000 80af 	beq.w	801cb5a <MotionFX_MagCal_run+0x3ea>
 801c9fc:	444b      	add	r3, r9
 801c9fe:	b29b      	uxth	r3, r3
 801ca00:	42b3      	cmp	r3, r6
 801ca02:	bf28      	it	cs
 801ca04:	4633      	movcs	r3, r6
 801ca06:	eb03 0208 	add.w	r2, r3, r8
 801ca0a:	2d08      	cmp	r5, #8
 801ca0c:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801ca10:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801ca14:	f8d1 c81a 	ldr.w	ip, [r1, #2074]	@ 0x81a
 801ca18:	f8c2 c002 	str.w	ip, [r2, #2]
 801ca1c:	f9b1 081e 	ldrsh.w	r0, [r1, #2078]	@ 0x81e
 801ca20:	f8b1 e818 	ldrh.w	lr, [r1, #2072]	@ 0x818
 801ca24:	80d0      	strh	r0, [r2, #6]
 801ca26:	f000 8098 	beq.w	801cb5a <MotionFX_MagCal_run+0x3ea>
 801ca2a:	444b      	add	r3, r9
 801ca2c:	b29b      	uxth	r3, r3
 801ca2e:	42b3      	cmp	r3, r6
 801ca30:	bf28      	it	cs
 801ca32:	4633      	movcs	r3, r6
 801ca34:	eb03 0208 	add.w	r2, r3, r8
 801ca38:	2d09      	cmp	r5, #9
 801ca3a:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801ca3e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801ca42:	f8d1 c822 	ldr.w	ip, [r1, #2082]	@ 0x822
 801ca46:	f8c2 c002 	str.w	ip, [r2, #2]
 801ca4a:	f9b1 0826 	ldrsh.w	r0, [r1, #2086]	@ 0x826
 801ca4e:	f8b1 e820 	ldrh.w	lr, [r1, #2080]	@ 0x820
 801ca52:	80d0      	strh	r0, [r2, #6]
 801ca54:	f000 8081 	beq.w	801cb5a <MotionFX_MagCal_run+0x3ea>
 801ca58:	444b      	add	r3, r9
 801ca5a:	b29b      	uxth	r3, r3
 801ca5c:	42b3      	cmp	r3, r6
 801ca5e:	bf28      	it	cs
 801ca60:	4633      	movcs	r3, r6
 801ca62:	eb03 0208 	add.w	r2, r3, r8
 801ca66:	2d0a      	cmp	r5, #10
 801ca68:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801ca6c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801ca70:	f8d1 c82a 	ldr.w	ip, [r1, #2090]	@ 0x82a
 801ca74:	f8c2 c002 	str.w	ip, [r2, #2]
 801ca78:	f9b1 082e 	ldrsh.w	r0, [r1, #2094]	@ 0x82e
 801ca7c:	f8b1 e828 	ldrh.w	lr, [r1, #2088]	@ 0x828
 801ca80:	80d0      	strh	r0, [r2, #6]
 801ca82:	d06a      	beq.n	801cb5a <MotionFX_MagCal_run+0x3ea>
 801ca84:	444b      	add	r3, r9
 801ca86:	b29b      	uxth	r3, r3
 801ca88:	42b3      	cmp	r3, r6
 801ca8a:	bf28      	it	cs
 801ca8c:	4633      	movcs	r3, r6
 801ca8e:	eb03 0208 	add.w	r2, r3, r8
 801ca92:	2d0b      	cmp	r5, #11
 801ca94:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801ca98:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801ca9c:	f8d1 c832 	ldr.w	ip, [r1, #2098]	@ 0x832
 801caa0:	f8c2 c002 	str.w	ip, [r2, #2]
 801caa4:	f9b1 0836 	ldrsh.w	r0, [r1, #2102]	@ 0x836
 801caa8:	f8b1 e830 	ldrh.w	lr, [r1, #2096]	@ 0x830
 801caac:	80d0      	strh	r0, [r2, #6]
 801caae:	d054      	beq.n	801cb5a <MotionFX_MagCal_run+0x3ea>
 801cab0:	444b      	add	r3, r9
 801cab2:	b29b      	uxth	r3, r3
 801cab4:	42b3      	cmp	r3, r6
 801cab6:	bf28      	it	cs
 801cab8:	4633      	movcs	r3, r6
 801caba:	eb03 0208 	add.w	r2, r3, r8
 801cabe:	2d0c      	cmp	r5, #12
 801cac0:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801cac4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801cac8:	f8d1 c83a 	ldr.w	ip, [r1, #2106]	@ 0x83a
 801cacc:	f8c2 c002 	str.w	ip, [r2, #2]
 801cad0:	f9b1 083e 	ldrsh.w	r0, [r1, #2110]	@ 0x83e
 801cad4:	f8b1 e838 	ldrh.w	lr, [r1, #2104]	@ 0x838
 801cad8:	80d0      	strh	r0, [r2, #6]
 801cada:	d03e      	beq.n	801cb5a <MotionFX_MagCal_run+0x3ea>
 801cadc:	444b      	add	r3, r9
 801cade:	b29b      	uxth	r3, r3
 801cae0:	42b3      	cmp	r3, r6
 801cae2:	bf28      	it	cs
 801cae4:	4633      	movcs	r3, r6
 801cae6:	eb03 0208 	add.w	r2, r3, r8
 801caea:	2d0d      	cmp	r5, #13
 801caec:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801caf0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801caf4:	f8d1 c842 	ldr.w	ip, [r1, #2114]	@ 0x842
 801caf8:	f8c2 c002 	str.w	ip, [r2, #2]
 801cafc:	f9b1 0846 	ldrsh.w	r0, [r1, #2118]	@ 0x846
 801cb00:	f8b1 e840 	ldrh.w	lr, [r1, #2112]	@ 0x840
 801cb04:	80d0      	strh	r0, [r2, #6]
 801cb06:	d028      	beq.n	801cb5a <MotionFX_MagCal_run+0x3ea>
 801cb08:	444b      	add	r3, r9
 801cb0a:	b29b      	uxth	r3, r3
 801cb0c:	42b3      	cmp	r3, r6
 801cb0e:	bf28      	it	cs
 801cb10:	4633      	movcs	r3, r6
 801cb12:	eb03 0208 	add.w	r2, r3, r8
 801cb16:	2d0e      	cmp	r5, #14
 801cb18:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 801cb1c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801cb20:	f8d1 c84a 	ldr.w	ip, [r1, #2122]	@ 0x84a
 801cb24:	f8c2 c002 	str.w	ip, [r2, #2]
 801cb28:	f9b1 084e 	ldrsh.w	r0, [r1, #2126]	@ 0x84e
 801cb2c:	f8b1 e848 	ldrh.w	lr, [r1, #2120]	@ 0x848
 801cb30:	80d0      	strh	r0, [r2, #6]
 801cb32:	d012      	beq.n	801cb5a <MotionFX_MagCal_run+0x3ea>
 801cb34:	444b      	add	r3, r9
 801cb36:	b29b      	uxth	r3, r3
 801cb38:	42b3      	cmp	r3, r6
 801cb3a:	bf28      	it	cs
 801cb3c:	4633      	movcs	r3, r6
 801cb3e:	4498      	add	r8, r3
 801cb40:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
 801cb44:	f804 9038 	strb.w	r9, [r4, r8, lsl #3]
 801cb48:	f8d1 c852 	ldr.w	ip, [r1, #2130]	@ 0x852
 801cb4c:	f8c2 c002 	str.w	ip, [r2, #2]
 801cb50:	f9b1 0856 	ldrsh.w	r0, [r1, #2134]	@ 0x856
 801cb54:	f8b1 e850 	ldrh.w	lr, [r1, #2128]	@ 0x850
 801cb58:	80d0      	strh	r0, [r2, #6]
 801cb5a:	810b      	strh	r3, [r1, #8]
 801cb5c:	4477      	add	r7, lr
 801cb5e:	2301      	movs	r3, #1
 801cb60:	f8c2 c002 	str.w	ip, [r2, #2]
 801cb64:	80d0      	strh	r0, [r2, #6]
 801cb66:	7013      	strb	r3, [r2, #0]
 801cb68:	60cf      	str	r7, [r1, #12]
 801cb6a:	f891 3048 	ldrb.w	r3, [r1, #72]	@ 0x48
 801cb6e:	2b00      	cmp	r3, #0
 801cb70:	f43f ae76 	beq.w	801c860 <MotionFX_MagCal_run+0xf0>
 801cb74:	890a      	ldrh	r2, [r1, #8]
 801cb76:	894b      	ldrh	r3, [r1, #10]
 801cb78:	4293      	cmp	r3, r2
 801cb7a:	d022      	beq.n	801cbc2 <MotionFX_MagCal_run+0x452>
 801cb7c:	b32a      	cbz	r2, 801cbca <MotionFX_MagCal_run+0x45a>
 801cb7e:	68cb      	ldr	r3, [r1, #12]
 801cb80:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 801cb84:	3301      	adds	r3, #1
 801cb86:	4403      	add	r3, r0
 801cb88:	1c58      	adds	r0, r3, #1
 801cb8a:	d01e      	beq.n	801cbca <MotionFX_MagCal_run+0x45a>
 801cb8c:	f503 541c 	add.w	r4, r3, #9984	@ 0x2700
 801cb90:	3410      	adds	r4, #16
 801cb92:	6cc8      	ldr	r0, [r1, #76]	@ 0x4c
 801cb94:	42a0      	cmp	r0, r4
 801cb96:	f8b1 4050 	ldrh.w	r4, [r1, #80]	@ 0x50
 801cb9a:	bf84      	itt	hi
 801cb9c:	64cb      	strhi	r3, [r1, #76]	@ 0x4c
 801cb9e:	4618      	movhi	r0, r3
 801cba0:	4420      	add	r0, r4
 801cba2:	4283      	cmp	r3, r0
 801cba4:	f4ff ae5c 	bcc.w	801c860 <MotionFX_MagCal_run+0xf0>
 801cba8:	b132      	cbz	r2, 801cbb8 <MotionFX_MagCal_run+0x448>
 801cbaa:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 801cbae:	68c9      	ldr	r1, [r1, #12]
 801cbb0:	3a01      	subs	r2, #1
 801cbb2:	fb00 1212 	mls	r2, r0, r2, r1
 801cbb6:	b292      	uxth	r2, r2
 801cbb8:	1a9b      	subs	r3, r3, r2
 801cbba:	b21b      	sxth	r3, r3
 801cbbc:	42a3      	cmp	r3, r4
 801cbbe:	f6ff ae4f 	blt.w	801c860 <MotionFX_MagCal_run+0xf0>
 801cbc2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cbc6:	f7fd b897 	b.w	8019cf8 <MEMS_runMagCal.constprop.0>
 801cbca:	f242 7410 	movw	r4, #10000	@ 0x2710
 801cbce:	2300      	movs	r3, #0
 801cbd0:	e7df      	b.n	801cb92 <MotionFX_MagCal_run+0x422>
 801cbd2:	bf00      	nop

0801cbd4 <MotionFX_MagCal_getParams>:
 801cbd4:	4b20      	ldr	r3, [pc, #128]	@ (801cc58 <MotionFX_MagCal_getParams+0x84>)
 801cbd6:	f893 23c4 	ldrb.w	r2, [r3, #964]	@ 0x3c4
 801cbda:	b902      	cbnz	r2, 801cbde <MotionFX_MagCal_getParams+0xa>
 801cbdc:	4770      	bx	lr
 801cbde:	b530      	push	{r4, r5, lr}
 801cbe0:	f103 0e6c 	add.w	lr, r3, #108	@ 0x6c
 801cbe4:	4604      	mov	r4, r0
 801cbe6:	f893 506c 	ldrb.w	r5, [r3, #108]	@ 0x6c
 801cbea:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 801cc5c <MotionFX_MagCal_getParams+0x88>
 801cbee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cbf2:	b08f      	sub	sp, #60	@ 0x3c
 801cbf4:	f10d 0c04 	add.w	ip, sp, #4
 801cbf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cbfc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cc00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cc04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cc08:	eddd 6a02 	vldr	s13, [sp, #8]
 801cc0c:	ed9d 7a03 	vldr	s14, [sp, #12]
 801cc10:	eddd 7a04 	vldr	s15, [sp, #16]
 801cc14:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801cc18:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801cc1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cc20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cc24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801cc28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cc2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cc30:	f8de 3000 	ldr.w	r3, [lr]
 801cc34:	7325      	strb	r5, [r4, #12]
 801cc36:	ee66 6a86 	vmul.f32	s13, s13, s12
 801cc3a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801cc3e:	ee67 7a86 	vmul.f32	s15, s15, s12
 801cc42:	edc4 6a00 	vstr	s13, [r4]
 801cc46:	f8cc 3000 	str.w	r3, [ip]
 801cc4a:	ed84 7a01 	vstr	s14, [r4, #4]
 801cc4e:	edc4 7a02 	vstr	s15, [r4, #8]
 801cc52:	b00f      	add	sp, #60	@ 0x3c
 801cc54:	bd30      	pop	{r4, r5, pc}
 801cc56:	bf00      	nop
 801cc58:	2000038c 	.word	0x2000038c
 801cc5c:	3b03126f 	.word	0x3b03126f

0801cc60 <_ZdlPvj>:
 801cc60:	f000 b811 	b.w	801cc86 <_ZdlPv>

0801cc64 <_Znwj>:
 801cc64:	2801      	cmp	r0, #1
 801cc66:	bf38      	it	cc
 801cc68:	2001      	movcc	r0, #1
 801cc6a:	b510      	push	{r4, lr}
 801cc6c:	4604      	mov	r4, r0
 801cc6e:	4620      	mov	r0, r4
 801cc70:	f002 fa42 	bl	801f0f8 <malloc>
 801cc74:	b100      	cbz	r0, 801cc78 <_Znwj+0x14>
 801cc76:	bd10      	pop	{r4, pc}
 801cc78:	f000 f808 	bl	801cc8c <_ZSt15get_new_handlerv>
 801cc7c:	b908      	cbnz	r0, 801cc82 <_Znwj+0x1e>
 801cc7e:	f002 fa33 	bl	801f0e8 <abort>
 801cc82:	4780      	blx	r0
 801cc84:	e7f3      	b.n	801cc6e <_Znwj+0xa>

0801cc86 <_ZdlPv>:
 801cc86:	f002 ba3f 	b.w	801f108 <free>
	...

0801cc8c <_ZSt15get_new_handlerv>:
 801cc8c:	4b02      	ldr	r3, [pc, #8]	@ (801cc98 <_ZSt15get_new_handlerv+0xc>)
 801cc8e:	6818      	ldr	r0, [r3, #0]
 801cc90:	f3bf 8f5b 	dmb	ish
 801cc94:	4770      	bx	lr
 801cc96:	bf00      	nop
 801cc98:	20018730 	.word	0x20018730

0801cc9c <atan2>:
 801cc9c:	f000 bba4 	b.w	801d3e8 <__ieee754_atan2>

0801cca0 <sqrt>:
 801cca0:	b538      	push	{r3, r4, r5, lr}
 801cca2:	ed2d 8b02 	vpush	{d8}
 801cca6:	ec55 4b10 	vmov	r4, r5, d0
 801ccaa:	f000 f9a5 	bl	801cff8 <__ieee754_sqrt>
 801ccae:	4622      	mov	r2, r4
 801ccb0:	462b      	mov	r3, r5
 801ccb2:	4620      	mov	r0, r4
 801ccb4:	4629      	mov	r1, r5
 801ccb6:	eeb0 8a40 	vmov.f32	s16, s0
 801ccba:	eef0 8a60 	vmov.f32	s17, s1
 801ccbe:	f7e3 ff5d 	bl	8000b7c <__aeabi_dcmpun>
 801ccc2:	b990      	cbnz	r0, 801ccea <sqrt+0x4a>
 801ccc4:	2200      	movs	r2, #0
 801ccc6:	2300      	movs	r3, #0
 801ccc8:	4620      	mov	r0, r4
 801ccca:	4629      	mov	r1, r5
 801cccc:	f7e3 ff2e 	bl	8000b2c <__aeabi_dcmplt>
 801ccd0:	b158      	cbz	r0, 801ccea <sqrt+0x4a>
 801ccd2:	f003 f95d 	bl	801ff90 <__errno>
 801ccd6:	2321      	movs	r3, #33	@ 0x21
 801ccd8:	6003      	str	r3, [r0, #0]
 801ccda:	2200      	movs	r2, #0
 801ccdc:	2300      	movs	r3, #0
 801ccde:	4610      	mov	r0, r2
 801cce0:	4619      	mov	r1, r3
 801cce2:	f7e3 fddb 	bl	800089c <__aeabi_ddiv>
 801cce6:	ec41 0b18 	vmov	d8, r0, r1
 801ccea:	eeb0 0a48 	vmov.f32	s0, s16
 801ccee:	eef0 0a68 	vmov.f32	s1, s17
 801ccf2:	ecbd 8b02 	vpop	{d8}
 801ccf6:	bd38      	pop	{r3, r4, r5, pc}

0801ccf8 <acosf>:
 801ccf8:	b508      	push	{r3, lr}
 801ccfa:	ed2d 8b02 	vpush	{d8}
 801ccfe:	eeb0 8a40 	vmov.f32	s16, s0
 801cd02:	f000 ff59 	bl	801dbb8 <__ieee754_acosf>
 801cd06:	eeb4 8a48 	vcmp.f32	s16, s16
 801cd0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd0e:	eef0 8a40 	vmov.f32	s17, s0
 801cd12:	d615      	bvs.n	801cd40 <acosf+0x48>
 801cd14:	eeb0 0a48 	vmov.f32	s0, s16
 801cd18:	f000 f8e4 	bl	801cee4 <fabsf>
 801cd1c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801cd20:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801cd24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd28:	dd0a      	ble.n	801cd40 <acosf+0x48>
 801cd2a:	f003 f931 	bl	801ff90 <__errno>
 801cd2e:	ecbd 8b02 	vpop	{d8}
 801cd32:	2321      	movs	r3, #33	@ 0x21
 801cd34:	6003      	str	r3, [r0, #0]
 801cd36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801cd3a:	4804      	ldr	r0, [pc, #16]	@ (801cd4c <acosf+0x54>)
 801cd3c:	f000 b956 	b.w	801cfec <nanf>
 801cd40:	eeb0 0a68 	vmov.f32	s0, s17
 801cd44:	ecbd 8b02 	vpop	{d8}
 801cd48:	bd08      	pop	{r3, pc}
 801cd4a:	bf00      	nop
 801cd4c:	08022ef6 	.word	0x08022ef6

0801cd50 <asinf>:
 801cd50:	b508      	push	{r3, lr}
 801cd52:	ed2d 8b02 	vpush	{d8}
 801cd56:	eeb0 8a40 	vmov.f32	s16, s0
 801cd5a:	f001 f825 	bl	801dda8 <__ieee754_asinf>
 801cd5e:	eeb4 8a48 	vcmp.f32	s16, s16
 801cd62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd66:	eef0 8a40 	vmov.f32	s17, s0
 801cd6a:	d615      	bvs.n	801cd98 <asinf+0x48>
 801cd6c:	eeb0 0a48 	vmov.f32	s0, s16
 801cd70:	f000 f8b8 	bl	801cee4 <fabsf>
 801cd74:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801cd78:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801cd7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd80:	dd0a      	ble.n	801cd98 <asinf+0x48>
 801cd82:	f003 f905 	bl	801ff90 <__errno>
 801cd86:	ecbd 8b02 	vpop	{d8}
 801cd8a:	2321      	movs	r3, #33	@ 0x21
 801cd8c:	6003      	str	r3, [r0, #0]
 801cd8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801cd92:	4804      	ldr	r0, [pc, #16]	@ (801cda4 <asinf+0x54>)
 801cd94:	f000 b92a 	b.w	801cfec <nanf>
 801cd98:	eeb0 0a68 	vmov.f32	s0, s17
 801cd9c:	ecbd 8b02 	vpop	{d8}
 801cda0:	bd08      	pop	{r3, pc}
 801cda2:	bf00      	nop
 801cda4:	08022ef6 	.word	0x08022ef6

0801cda8 <atan2f>:
 801cda8:	f001 b8e4 	b.w	801df74 <__ieee754_atan2f>

0801cdac <powf>:
 801cdac:	b508      	push	{r3, lr}
 801cdae:	ed2d 8b04 	vpush	{d8-d9}
 801cdb2:	eeb0 8a60 	vmov.f32	s16, s1
 801cdb6:	eeb0 9a40 	vmov.f32	s18, s0
 801cdba:	f001 f97b 	bl	801e0b4 <__ieee754_powf>
 801cdbe:	eeb4 8a48 	vcmp.f32	s16, s16
 801cdc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdc6:	eef0 8a40 	vmov.f32	s17, s0
 801cdca:	d63e      	bvs.n	801ce4a <powf+0x9e>
 801cdcc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801cdd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdd4:	d112      	bne.n	801cdfc <powf+0x50>
 801cdd6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801cdda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdde:	d039      	beq.n	801ce54 <powf+0xa8>
 801cde0:	eeb0 0a48 	vmov.f32	s0, s16
 801cde4:	f000 f8f8 	bl	801cfd8 <finitef>
 801cde8:	b378      	cbz	r0, 801ce4a <powf+0x9e>
 801cdea:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801cdee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdf2:	d52a      	bpl.n	801ce4a <powf+0x9e>
 801cdf4:	f003 f8cc 	bl	801ff90 <__errno>
 801cdf8:	2322      	movs	r3, #34	@ 0x22
 801cdfa:	e014      	b.n	801ce26 <powf+0x7a>
 801cdfc:	f000 f8ec 	bl	801cfd8 <finitef>
 801ce00:	b998      	cbnz	r0, 801ce2a <powf+0x7e>
 801ce02:	eeb0 0a49 	vmov.f32	s0, s18
 801ce06:	f000 f8e7 	bl	801cfd8 <finitef>
 801ce0a:	b170      	cbz	r0, 801ce2a <powf+0x7e>
 801ce0c:	eeb0 0a48 	vmov.f32	s0, s16
 801ce10:	f000 f8e2 	bl	801cfd8 <finitef>
 801ce14:	b148      	cbz	r0, 801ce2a <powf+0x7e>
 801ce16:	eef4 8a68 	vcmp.f32	s17, s17
 801ce1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce1e:	d7e9      	bvc.n	801cdf4 <powf+0x48>
 801ce20:	f003 f8b6 	bl	801ff90 <__errno>
 801ce24:	2321      	movs	r3, #33	@ 0x21
 801ce26:	6003      	str	r3, [r0, #0]
 801ce28:	e00f      	b.n	801ce4a <powf+0x9e>
 801ce2a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801ce2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce32:	d10a      	bne.n	801ce4a <powf+0x9e>
 801ce34:	eeb0 0a49 	vmov.f32	s0, s18
 801ce38:	f000 f8ce 	bl	801cfd8 <finitef>
 801ce3c:	b128      	cbz	r0, 801ce4a <powf+0x9e>
 801ce3e:	eeb0 0a48 	vmov.f32	s0, s16
 801ce42:	f000 f8c9 	bl	801cfd8 <finitef>
 801ce46:	2800      	cmp	r0, #0
 801ce48:	d1d4      	bne.n	801cdf4 <powf+0x48>
 801ce4a:	eeb0 0a68 	vmov.f32	s0, s17
 801ce4e:	ecbd 8b04 	vpop	{d8-d9}
 801ce52:	bd08      	pop	{r3, pc}
 801ce54:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801ce58:	e7f7      	b.n	801ce4a <powf+0x9e>
	...

0801ce5c <cosf>:
 801ce5c:	ee10 3a10 	vmov	r3, s0
 801ce60:	b507      	push	{r0, r1, r2, lr}
 801ce62:	4a1e      	ldr	r2, [pc, #120]	@ (801cedc <cosf+0x80>)
 801ce64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ce68:	4293      	cmp	r3, r2
 801ce6a:	d806      	bhi.n	801ce7a <cosf+0x1e>
 801ce6c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801cee0 <cosf+0x84>
 801ce70:	b003      	add	sp, #12
 801ce72:	f85d eb04 	ldr.w	lr, [sp], #4
 801ce76:	f000 bd1f 	b.w	801d8b8 <__kernel_cosf>
 801ce7a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ce7e:	d304      	bcc.n	801ce8a <cosf+0x2e>
 801ce80:	ee30 0a40 	vsub.f32	s0, s0, s0
 801ce84:	b003      	add	sp, #12
 801ce86:	f85d fb04 	ldr.w	pc, [sp], #4
 801ce8a:	4668      	mov	r0, sp
 801ce8c:	f001 fbe2 	bl	801e654 <__ieee754_rem_pio2f>
 801ce90:	f000 0003 	and.w	r0, r0, #3
 801ce94:	2801      	cmp	r0, #1
 801ce96:	d009      	beq.n	801ceac <cosf+0x50>
 801ce98:	2802      	cmp	r0, #2
 801ce9a:	d010      	beq.n	801cebe <cosf+0x62>
 801ce9c:	b9b0      	cbnz	r0, 801cecc <cosf+0x70>
 801ce9e:	eddd 0a01 	vldr	s1, [sp, #4]
 801cea2:	ed9d 0a00 	vldr	s0, [sp]
 801cea6:	f000 fd07 	bl	801d8b8 <__kernel_cosf>
 801ceaa:	e7eb      	b.n	801ce84 <cosf+0x28>
 801ceac:	eddd 0a01 	vldr	s1, [sp, #4]
 801ceb0:	ed9d 0a00 	vldr	s0, [sp]
 801ceb4:	f000 fd58 	bl	801d968 <__kernel_sinf>
 801ceb8:	eeb1 0a40 	vneg.f32	s0, s0
 801cebc:	e7e2      	b.n	801ce84 <cosf+0x28>
 801cebe:	eddd 0a01 	vldr	s1, [sp, #4]
 801cec2:	ed9d 0a00 	vldr	s0, [sp]
 801cec6:	f000 fcf7 	bl	801d8b8 <__kernel_cosf>
 801ceca:	e7f5      	b.n	801ceb8 <cosf+0x5c>
 801cecc:	eddd 0a01 	vldr	s1, [sp, #4]
 801ced0:	ed9d 0a00 	vldr	s0, [sp]
 801ced4:	2001      	movs	r0, #1
 801ced6:	f000 fd47 	bl	801d968 <__kernel_sinf>
 801ceda:	e7d3      	b.n	801ce84 <cosf+0x28>
 801cedc:	3f490fd8 	.word	0x3f490fd8
 801cee0:	00000000 	.word	0x00000000

0801cee4 <fabsf>:
 801cee4:	ee10 3a10 	vmov	r3, s0
 801cee8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ceec:	ee00 3a10 	vmov	s0, r3
 801cef0:	4770      	bx	lr
	...

0801cef4 <sinf>:
 801cef4:	ee10 3a10 	vmov	r3, s0
 801cef8:	b507      	push	{r0, r1, r2, lr}
 801cefa:	4a1f      	ldr	r2, [pc, #124]	@ (801cf78 <sinf+0x84>)
 801cefc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cf00:	4293      	cmp	r3, r2
 801cf02:	d807      	bhi.n	801cf14 <sinf+0x20>
 801cf04:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801cf7c <sinf+0x88>
 801cf08:	2000      	movs	r0, #0
 801cf0a:	b003      	add	sp, #12
 801cf0c:	f85d eb04 	ldr.w	lr, [sp], #4
 801cf10:	f000 bd2a 	b.w	801d968 <__kernel_sinf>
 801cf14:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801cf18:	d304      	bcc.n	801cf24 <sinf+0x30>
 801cf1a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801cf1e:	b003      	add	sp, #12
 801cf20:	f85d fb04 	ldr.w	pc, [sp], #4
 801cf24:	4668      	mov	r0, sp
 801cf26:	f001 fb95 	bl	801e654 <__ieee754_rem_pio2f>
 801cf2a:	f000 0003 	and.w	r0, r0, #3
 801cf2e:	2801      	cmp	r0, #1
 801cf30:	d00a      	beq.n	801cf48 <sinf+0x54>
 801cf32:	2802      	cmp	r0, #2
 801cf34:	d00f      	beq.n	801cf56 <sinf+0x62>
 801cf36:	b9c0      	cbnz	r0, 801cf6a <sinf+0x76>
 801cf38:	eddd 0a01 	vldr	s1, [sp, #4]
 801cf3c:	ed9d 0a00 	vldr	s0, [sp]
 801cf40:	2001      	movs	r0, #1
 801cf42:	f000 fd11 	bl	801d968 <__kernel_sinf>
 801cf46:	e7ea      	b.n	801cf1e <sinf+0x2a>
 801cf48:	eddd 0a01 	vldr	s1, [sp, #4]
 801cf4c:	ed9d 0a00 	vldr	s0, [sp]
 801cf50:	f000 fcb2 	bl	801d8b8 <__kernel_cosf>
 801cf54:	e7e3      	b.n	801cf1e <sinf+0x2a>
 801cf56:	eddd 0a01 	vldr	s1, [sp, #4]
 801cf5a:	ed9d 0a00 	vldr	s0, [sp]
 801cf5e:	2001      	movs	r0, #1
 801cf60:	f000 fd02 	bl	801d968 <__kernel_sinf>
 801cf64:	eeb1 0a40 	vneg.f32	s0, s0
 801cf68:	e7d9      	b.n	801cf1e <sinf+0x2a>
 801cf6a:	eddd 0a01 	vldr	s1, [sp, #4]
 801cf6e:	ed9d 0a00 	vldr	s0, [sp]
 801cf72:	f000 fca1 	bl	801d8b8 <__kernel_cosf>
 801cf76:	e7f5      	b.n	801cf64 <sinf+0x70>
 801cf78:	3f490fd8 	.word	0x3f490fd8
 801cf7c:	00000000 	.word	0x00000000

0801cf80 <tanf>:
 801cf80:	ee10 3a10 	vmov	r3, s0
 801cf84:	b507      	push	{r0, r1, r2, lr}
 801cf86:	4a12      	ldr	r2, [pc, #72]	@ (801cfd0 <tanf+0x50>)
 801cf88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cf8c:	4293      	cmp	r3, r2
 801cf8e:	d807      	bhi.n	801cfa0 <tanf+0x20>
 801cf90:	eddf 0a10 	vldr	s1, [pc, #64]	@ 801cfd4 <tanf+0x54>
 801cf94:	2001      	movs	r0, #1
 801cf96:	b003      	add	sp, #12
 801cf98:	f85d eb04 	ldr.w	lr, [sp], #4
 801cf9c:	f000 bd2c 	b.w	801d9f8 <__kernel_tanf>
 801cfa0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801cfa4:	d304      	bcc.n	801cfb0 <tanf+0x30>
 801cfa6:	ee30 0a40 	vsub.f32	s0, s0, s0
 801cfaa:	b003      	add	sp, #12
 801cfac:	f85d fb04 	ldr.w	pc, [sp], #4
 801cfb0:	4668      	mov	r0, sp
 801cfb2:	f001 fb4f 	bl	801e654 <__ieee754_rem_pio2f>
 801cfb6:	0040      	lsls	r0, r0, #1
 801cfb8:	f000 0002 	and.w	r0, r0, #2
 801cfbc:	eddd 0a01 	vldr	s1, [sp, #4]
 801cfc0:	ed9d 0a00 	vldr	s0, [sp]
 801cfc4:	f1c0 0001 	rsb	r0, r0, #1
 801cfc8:	f000 fd16 	bl	801d9f8 <__kernel_tanf>
 801cfcc:	e7ed      	b.n	801cfaa <tanf+0x2a>
 801cfce:	bf00      	nop
 801cfd0:	3f490fda 	.word	0x3f490fda
 801cfd4:	00000000 	.word	0x00000000

0801cfd8 <finitef>:
 801cfd8:	ee10 3a10 	vmov	r3, s0
 801cfdc:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801cfe0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801cfe4:	bfac      	ite	ge
 801cfe6:	2000      	movge	r0, #0
 801cfe8:	2001      	movlt	r0, #1
 801cfea:	4770      	bx	lr

0801cfec <nanf>:
 801cfec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801cff4 <nanf+0x8>
 801cff0:	4770      	bx	lr
 801cff2:	bf00      	nop
 801cff4:	7fc00000 	.word	0x7fc00000

0801cff8 <__ieee754_sqrt>:
 801cff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cffc:	4a68      	ldr	r2, [pc, #416]	@ (801d1a0 <__ieee754_sqrt+0x1a8>)
 801cffe:	ec55 4b10 	vmov	r4, r5, d0
 801d002:	43aa      	bics	r2, r5
 801d004:	462b      	mov	r3, r5
 801d006:	4621      	mov	r1, r4
 801d008:	d110      	bne.n	801d02c <__ieee754_sqrt+0x34>
 801d00a:	4622      	mov	r2, r4
 801d00c:	4620      	mov	r0, r4
 801d00e:	4629      	mov	r1, r5
 801d010:	f7e3 fb1a 	bl	8000648 <__aeabi_dmul>
 801d014:	4602      	mov	r2, r0
 801d016:	460b      	mov	r3, r1
 801d018:	4620      	mov	r0, r4
 801d01a:	4629      	mov	r1, r5
 801d01c:	f7e3 f95e 	bl	80002dc <__adddf3>
 801d020:	4604      	mov	r4, r0
 801d022:	460d      	mov	r5, r1
 801d024:	ec45 4b10 	vmov	d0, r4, r5
 801d028:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d02c:	2d00      	cmp	r5, #0
 801d02e:	dc0e      	bgt.n	801d04e <__ieee754_sqrt+0x56>
 801d030:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801d034:	4322      	orrs	r2, r4
 801d036:	d0f5      	beq.n	801d024 <__ieee754_sqrt+0x2c>
 801d038:	b19d      	cbz	r5, 801d062 <__ieee754_sqrt+0x6a>
 801d03a:	4622      	mov	r2, r4
 801d03c:	4620      	mov	r0, r4
 801d03e:	4629      	mov	r1, r5
 801d040:	f7e3 f94a 	bl	80002d8 <__aeabi_dsub>
 801d044:	4602      	mov	r2, r0
 801d046:	460b      	mov	r3, r1
 801d048:	f7e3 fc28 	bl	800089c <__aeabi_ddiv>
 801d04c:	e7e8      	b.n	801d020 <__ieee754_sqrt+0x28>
 801d04e:	152a      	asrs	r2, r5, #20
 801d050:	d115      	bne.n	801d07e <__ieee754_sqrt+0x86>
 801d052:	2000      	movs	r0, #0
 801d054:	e009      	b.n	801d06a <__ieee754_sqrt+0x72>
 801d056:	0acb      	lsrs	r3, r1, #11
 801d058:	3a15      	subs	r2, #21
 801d05a:	0549      	lsls	r1, r1, #21
 801d05c:	2b00      	cmp	r3, #0
 801d05e:	d0fa      	beq.n	801d056 <__ieee754_sqrt+0x5e>
 801d060:	e7f7      	b.n	801d052 <__ieee754_sqrt+0x5a>
 801d062:	462a      	mov	r2, r5
 801d064:	e7fa      	b.n	801d05c <__ieee754_sqrt+0x64>
 801d066:	005b      	lsls	r3, r3, #1
 801d068:	3001      	adds	r0, #1
 801d06a:	02dc      	lsls	r4, r3, #11
 801d06c:	d5fb      	bpl.n	801d066 <__ieee754_sqrt+0x6e>
 801d06e:	1e44      	subs	r4, r0, #1
 801d070:	1b12      	subs	r2, r2, r4
 801d072:	f1c0 0420 	rsb	r4, r0, #32
 801d076:	fa21 f404 	lsr.w	r4, r1, r4
 801d07a:	4323      	orrs	r3, r4
 801d07c:	4081      	lsls	r1, r0
 801d07e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d082:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801d086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d08a:	07d2      	lsls	r2, r2, #31
 801d08c:	bf5c      	itt	pl
 801d08e:	005b      	lslpl	r3, r3, #1
 801d090:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801d094:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d098:	bf58      	it	pl
 801d09a:	0049      	lslpl	r1, r1, #1
 801d09c:	2600      	movs	r6, #0
 801d09e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801d0a2:	106d      	asrs	r5, r5, #1
 801d0a4:	0049      	lsls	r1, r1, #1
 801d0a6:	2016      	movs	r0, #22
 801d0a8:	4632      	mov	r2, r6
 801d0aa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801d0ae:	1917      	adds	r7, r2, r4
 801d0b0:	429f      	cmp	r7, r3
 801d0b2:	bfde      	ittt	le
 801d0b4:	193a      	addle	r2, r7, r4
 801d0b6:	1bdb      	suble	r3, r3, r7
 801d0b8:	1936      	addle	r6, r6, r4
 801d0ba:	0fcf      	lsrs	r7, r1, #31
 801d0bc:	3801      	subs	r0, #1
 801d0be:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801d0c2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d0c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801d0ca:	d1f0      	bne.n	801d0ae <__ieee754_sqrt+0xb6>
 801d0cc:	4604      	mov	r4, r0
 801d0ce:	2720      	movs	r7, #32
 801d0d0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801d0d4:	429a      	cmp	r2, r3
 801d0d6:	eb00 0e0c 	add.w	lr, r0, ip
 801d0da:	db02      	blt.n	801d0e2 <__ieee754_sqrt+0xea>
 801d0dc:	d113      	bne.n	801d106 <__ieee754_sqrt+0x10e>
 801d0de:	458e      	cmp	lr, r1
 801d0e0:	d811      	bhi.n	801d106 <__ieee754_sqrt+0x10e>
 801d0e2:	f1be 0f00 	cmp.w	lr, #0
 801d0e6:	eb0e 000c 	add.w	r0, lr, ip
 801d0ea:	da42      	bge.n	801d172 <__ieee754_sqrt+0x17a>
 801d0ec:	2800      	cmp	r0, #0
 801d0ee:	db40      	blt.n	801d172 <__ieee754_sqrt+0x17a>
 801d0f0:	f102 0801 	add.w	r8, r2, #1
 801d0f4:	1a9b      	subs	r3, r3, r2
 801d0f6:	458e      	cmp	lr, r1
 801d0f8:	bf88      	it	hi
 801d0fa:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801d0fe:	eba1 010e 	sub.w	r1, r1, lr
 801d102:	4464      	add	r4, ip
 801d104:	4642      	mov	r2, r8
 801d106:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801d10a:	3f01      	subs	r7, #1
 801d10c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801d110:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d114:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801d118:	d1dc      	bne.n	801d0d4 <__ieee754_sqrt+0xdc>
 801d11a:	4319      	orrs	r1, r3
 801d11c:	d01b      	beq.n	801d156 <__ieee754_sqrt+0x15e>
 801d11e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801d1a4 <__ieee754_sqrt+0x1ac>
 801d122:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801d1a8 <__ieee754_sqrt+0x1b0>
 801d126:	e9da 0100 	ldrd	r0, r1, [sl]
 801d12a:	e9db 2300 	ldrd	r2, r3, [fp]
 801d12e:	f7e3 f8d3 	bl	80002d8 <__aeabi_dsub>
 801d132:	e9da 8900 	ldrd	r8, r9, [sl]
 801d136:	4602      	mov	r2, r0
 801d138:	460b      	mov	r3, r1
 801d13a:	4640      	mov	r0, r8
 801d13c:	4649      	mov	r1, r9
 801d13e:	f7e3 fcff 	bl	8000b40 <__aeabi_dcmple>
 801d142:	b140      	cbz	r0, 801d156 <__ieee754_sqrt+0x15e>
 801d144:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801d148:	e9da 0100 	ldrd	r0, r1, [sl]
 801d14c:	e9db 2300 	ldrd	r2, r3, [fp]
 801d150:	d111      	bne.n	801d176 <__ieee754_sqrt+0x17e>
 801d152:	3601      	adds	r6, #1
 801d154:	463c      	mov	r4, r7
 801d156:	1072      	asrs	r2, r6, #1
 801d158:	0863      	lsrs	r3, r4, #1
 801d15a:	07f1      	lsls	r1, r6, #31
 801d15c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801d160:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801d164:	bf48      	it	mi
 801d166:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801d16a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801d16e:	4618      	mov	r0, r3
 801d170:	e756      	b.n	801d020 <__ieee754_sqrt+0x28>
 801d172:	4690      	mov	r8, r2
 801d174:	e7be      	b.n	801d0f4 <__ieee754_sqrt+0xfc>
 801d176:	f7e3 f8b1 	bl	80002dc <__adddf3>
 801d17a:	e9da 8900 	ldrd	r8, r9, [sl]
 801d17e:	4602      	mov	r2, r0
 801d180:	460b      	mov	r3, r1
 801d182:	4640      	mov	r0, r8
 801d184:	4649      	mov	r1, r9
 801d186:	f7e3 fcd1 	bl	8000b2c <__aeabi_dcmplt>
 801d18a:	b120      	cbz	r0, 801d196 <__ieee754_sqrt+0x19e>
 801d18c:	1ca0      	adds	r0, r4, #2
 801d18e:	bf08      	it	eq
 801d190:	3601      	addeq	r6, #1
 801d192:	3402      	adds	r4, #2
 801d194:	e7df      	b.n	801d156 <__ieee754_sqrt+0x15e>
 801d196:	1c63      	adds	r3, r4, #1
 801d198:	f023 0401 	bic.w	r4, r3, #1
 801d19c:	e7db      	b.n	801d156 <__ieee754_sqrt+0x15e>
 801d19e:	bf00      	nop
 801d1a0:	7ff00000 	.word	0x7ff00000
 801d1a4:	200001a0 	.word	0x200001a0
 801d1a8:	20000198 	.word	0x20000198
 801d1ac:	00000000 	.word	0x00000000

0801d1b0 <ceil>:
 801d1b0:	ec51 0b10 	vmov	r0, r1, d0
 801d1b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d1bc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801d1c0:	2e13      	cmp	r6, #19
 801d1c2:	460c      	mov	r4, r1
 801d1c4:	4605      	mov	r5, r0
 801d1c6:	4680      	mov	r8, r0
 801d1c8:	dc2e      	bgt.n	801d228 <ceil+0x78>
 801d1ca:	2e00      	cmp	r6, #0
 801d1cc:	da11      	bge.n	801d1f2 <ceil+0x42>
 801d1ce:	a332      	add	r3, pc, #200	@ (adr r3, 801d298 <ceil+0xe8>)
 801d1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1d4:	f7e3 f882 	bl	80002dc <__adddf3>
 801d1d8:	2200      	movs	r2, #0
 801d1da:	2300      	movs	r3, #0
 801d1dc:	f7e3 fcc4 	bl	8000b68 <__aeabi_dcmpgt>
 801d1e0:	b120      	cbz	r0, 801d1ec <ceil+0x3c>
 801d1e2:	2c00      	cmp	r4, #0
 801d1e4:	db4f      	blt.n	801d286 <ceil+0xd6>
 801d1e6:	4325      	orrs	r5, r4
 801d1e8:	d151      	bne.n	801d28e <ceil+0xde>
 801d1ea:	462c      	mov	r4, r5
 801d1ec:	4621      	mov	r1, r4
 801d1ee:	4628      	mov	r0, r5
 801d1f0:	e023      	b.n	801d23a <ceil+0x8a>
 801d1f2:	4f2b      	ldr	r7, [pc, #172]	@ (801d2a0 <ceil+0xf0>)
 801d1f4:	4137      	asrs	r7, r6
 801d1f6:	ea01 0307 	and.w	r3, r1, r7
 801d1fa:	4303      	orrs	r3, r0
 801d1fc:	d01d      	beq.n	801d23a <ceil+0x8a>
 801d1fe:	a326      	add	r3, pc, #152	@ (adr r3, 801d298 <ceil+0xe8>)
 801d200:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d204:	f7e3 f86a 	bl	80002dc <__adddf3>
 801d208:	2200      	movs	r2, #0
 801d20a:	2300      	movs	r3, #0
 801d20c:	f7e3 fcac 	bl	8000b68 <__aeabi_dcmpgt>
 801d210:	2800      	cmp	r0, #0
 801d212:	d0eb      	beq.n	801d1ec <ceil+0x3c>
 801d214:	2c00      	cmp	r4, #0
 801d216:	bfc2      	ittt	gt
 801d218:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 801d21c:	4133      	asrgt	r3, r6
 801d21e:	18e4      	addgt	r4, r4, r3
 801d220:	ea24 0407 	bic.w	r4, r4, r7
 801d224:	2500      	movs	r5, #0
 801d226:	e7e1      	b.n	801d1ec <ceil+0x3c>
 801d228:	2e33      	cmp	r6, #51	@ 0x33
 801d22a:	dd0a      	ble.n	801d242 <ceil+0x92>
 801d22c:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801d230:	d103      	bne.n	801d23a <ceil+0x8a>
 801d232:	4602      	mov	r2, r0
 801d234:	460b      	mov	r3, r1
 801d236:	f7e3 f851 	bl	80002dc <__adddf3>
 801d23a:	ec41 0b10 	vmov	d0, r0, r1
 801d23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d242:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801d246:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801d24a:	40df      	lsrs	r7, r3
 801d24c:	4238      	tst	r0, r7
 801d24e:	d0f4      	beq.n	801d23a <ceil+0x8a>
 801d250:	a311      	add	r3, pc, #68	@ (adr r3, 801d298 <ceil+0xe8>)
 801d252:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d256:	f7e3 f841 	bl	80002dc <__adddf3>
 801d25a:	2200      	movs	r2, #0
 801d25c:	2300      	movs	r3, #0
 801d25e:	f7e3 fc83 	bl	8000b68 <__aeabi_dcmpgt>
 801d262:	2800      	cmp	r0, #0
 801d264:	d0c2      	beq.n	801d1ec <ceil+0x3c>
 801d266:	2c00      	cmp	r4, #0
 801d268:	dd0a      	ble.n	801d280 <ceil+0xd0>
 801d26a:	2e14      	cmp	r6, #20
 801d26c:	d101      	bne.n	801d272 <ceil+0xc2>
 801d26e:	3401      	adds	r4, #1
 801d270:	e006      	b.n	801d280 <ceil+0xd0>
 801d272:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801d276:	2301      	movs	r3, #1
 801d278:	40b3      	lsls	r3, r6
 801d27a:	441d      	add	r5, r3
 801d27c:	45a8      	cmp	r8, r5
 801d27e:	d8f6      	bhi.n	801d26e <ceil+0xbe>
 801d280:	ea25 0507 	bic.w	r5, r5, r7
 801d284:	e7b2      	b.n	801d1ec <ceil+0x3c>
 801d286:	2500      	movs	r5, #0
 801d288:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 801d28c:	e7ae      	b.n	801d1ec <ceil+0x3c>
 801d28e:	4c05      	ldr	r4, [pc, #20]	@ (801d2a4 <ceil+0xf4>)
 801d290:	2500      	movs	r5, #0
 801d292:	e7ab      	b.n	801d1ec <ceil+0x3c>
 801d294:	f3af 8000 	nop.w
 801d298:	8800759c 	.word	0x8800759c
 801d29c:	7e37e43c 	.word	0x7e37e43c
 801d2a0:	000fffff 	.word	0x000fffff
 801d2a4:	3ff00000 	.word	0x3ff00000

0801d2a8 <floor>:
 801d2a8:	ec51 0b10 	vmov	r0, r1, d0
 801d2ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2b4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801d2b8:	2e13      	cmp	r6, #19
 801d2ba:	460c      	mov	r4, r1
 801d2bc:	4605      	mov	r5, r0
 801d2be:	4680      	mov	r8, r0
 801d2c0:	dc34      	bgt.n	801d32c <floor+0x84>
 801d2c2:	2e00      	cmp	r6, #0
 801d2c4:	da17      	bge.n	801d2f6 <floor+0x4e>
 801d2c6:	a332      	add	r3, pc, #200	@ (adr r3, 801d390 <floor+0xe8>)
 801d2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2cc:	f7e3 f806 	bl	80002dc <__adddf3>
 801d2d0:	2200      	movs	r2, #0
 801d2d2:	2300      	movs	r3, #0
 801d2d4:	f7e3 fc48 	bl	8000b68 <__aeabi_dcmpgt>
 801d2d8:	b150      	cbz	r0, 801d2f0 <floor+0x48>
 801d2da:	2c00      	cmp	r4, #0
 801d2dc:	da55      	bge.n	801d38a <floor+0xe2>
 801d2de:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801d2e2:	432c      	orrs	r4, r5
 801d2e4:	2500      	movs	r5, #0
 801d2e6:	42ac      	cmp	r4, r5
 801d2e8:	4c2b      	ldr	r4, [pc, #172]	@ (801d398 <floor+0xf0>)
 801d2ea:	bf08      	it	eq
 801d2ec:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801d2f0:	4621      	mov	r1, r4
 801d2f2:	4628      	mov	r0, r5
 801d2f4:	e023      	b.n	801d33e <floor+0x96>
 801d2f6:	4f29      	ldr	r7, [pc, #164]	@ (801d39c <floor+0xf4>)
 801d2f8:	4137      	asrs	r7, r6
 801d2fa:	ea01 0307 	and.w	r3, r1, r7
 801d2fe:	4303      	orrs	r3, r0
 801d300:	d01d      	beq.n	801d33e <floor+0x96>
 801d302:	a323      	add	r3, pc, #140	@ (adr r3, 801d390 <floor+0xe8>)
 801d304:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d308:	f7e2 ffe8 	bl	80002dc <__adddf3>
 801d30c:	2200      	movs	r2, #0
 801d30e:	2300      	movs	r3, #0
 801d310:	f7e3 fc2a 	bl	8000b68 <__aeabi_dcmpgt>
 801d314:	2800      	cmp	r0, #0
 801d316:	d0eb      	beq.n	801d2f0 <floor+0x48>
 801d318:	2c00      	cmp	r4, #0
 801d31a:	bfbe      	ittt	lt
 801d31c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801d320:	4133      	asrlt	r3, r6
 801d322:	18e4      	addlt	r4, r4, r3
 801d324:	ea24 0407 	bic.w	r4, r4, r7
 801d328:	2500      	movs	r5, #0
 801d32a:	e7e1      	b.n	801d2f0 <floor+0x48>
 801d32c:	2e33      	cmp	r6, #51	@ 0x33
 801d32e:	dd0a      	ble.n	801d346 <floor+0x9e>
 801d330:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801d334:	d103      	bne.n	801d33e <floor+0x96>
 801d336:	4602      	mov	r2, r0
 801d338:	460b      	mov	r3, r1
 801d33a:	f7e2 ffcf 	bl	80002dc <__adddf3>
 801d33e:	ec41 0b10 	vmov	d0, r0, r1
 801d342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d346:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801d34a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801d34e:	40df      	lsrs	r7, r3
 801d350:	4207      	tst	r7, r0
 801d352:	d0f4      	beq.n	801d33e <floor+0x96>
 801d354:	a30e      	add	r3, pc, #56	@ (adr r3, 801d390 <floor+0xe8>)
 801d356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d35a:	f7e2 ffbf 	bl	80002dc <__adddf3>
 801d35e:	2200      	movs	r2, #0
 801d360:	2300      	movs	r3, #0
 801d362:	f7e3 fc01 	bl	8000b68 <__aeabi_dcmpgt>
 801d366:	2800      	cmp	r0, #0
 801d368:	d0c2      	beq.n	801d2f0 <floor+0x48>
 801d36a:	2c00      	cmp	r4, #0
 801d36c:	da0a      	bge.n	801d384 <floor+0xdc>
 801d36e:	2e14      	cmp	r6, #20
 801d370:	d101      	bne.n	801d376 <floor+0xce>
 801d372:	3401      	adds	r4, #1
 801d374:	e006      	b.n	801d384 <floor+0xdc>
 801d376:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801d37a:	2301      	movs	r3, #1
 801d37c:	40b3      	lsls	r3, r6
 801d37e:	441d      	add	r5, r3
 801d380:	4545      	cmp	r5, r8
 801d382:	d3f6      	bcc.n	801d372 <floor+0xca>
 801d384:	ea25 0507 	bic.w	r5, r5, r7
 801d388:	e7b2      	b.n	801d2f0 <floor+0x48>
 801d38a:	2500      	movs	r5, #0
 801d38c:	462c      	mov	r4, r5
 801d38e:	e7af      	b.n	801d2f0 <floor+0x48>
 801d390:	8800759c 	.word	0x8800759c
 801d394:	7e37e43c 	.word	0x7e37e43c
 801d398:	bff00000 	.word	0xbff00000
 801d39c:	000fffff 	.word	0x000fffff

0801d3a0 <roundf>:
 801d3a0:	ee10 0a10 	vmov	r0, s0
 801d3a4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801d3a8:	3a7f      	subs	r2, #127	@ 0x7f
 801d3aa:	2a16      	cmp	r2, #22
 801d3ac:	dc15      	bgt.n	801d3da <roundf+0x3a>
 801d3ae:	2a00      	cmp	r2, #0
 801d3b0:	da08      	bge.n	801d3c4 <roundf+0x24>
 801d3b2:	3201      	adds	r2, #1
 801d3b4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 801d3b8:	d101      	bne.n	801d3be <roundf+0x1e>
 801d3ba:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 801d3be:	ee00 3a10 	vmov	s0, r3
 801d3c2:	4770      	bx	lr
 801d3c4:	4907      	ldr	r1, [pc, #28]	@ (801d3e4 <roundf+0x44>)
 801d3c6:	4111      	asrs	r1, r2
 801d3c8:	4201      	tst	r1, r0
 801d3ca:	d0fa      	beq.n	801d3c2 <roundf+0x22>
 801d3cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801d3d0:	4113      	asrs	r3, r2
 801d3d2:	4403      	add	r3, r0
 801d3d4:	ea23 0301 	bic.w	r3, r3, r1
 801d3d8:	e7f1      	b.n	801d3be <roundf+0x1e>
 801d3da:	2a80      	cmp	r2, #128	@ 0x80
 801d3dc:	d1f1      	bne.n	801d3c2 <roundf+0x22>
 801d3de:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d3e2:	4770      	bx	lr
 801d3e4:	007fffff 	.word	0x007fffff

0801d3e8 <__ieee754_atan2>:
 801d3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d3ec:	ec57 6b11 	vmov	r6, r7, d1
 801d3f0:	4273      	negs	r3, r6
 801d3f2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801d570 <__ieee754_atan2+0x188>
 801d3f6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801d3fa:	4333      	orrs	r3, r6
 801d3fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801d400:	4543      	cmp	r3, r8
 801d402:	ec51 0b10 	vmov	r0, r1, d0
 801d406:	4635      	mov	r5, r6
 801d408:	d809      	bhi.n	801d41e <__ieee754_atan2+0x36>
 801d40a:	4244      	negs	r4, r0
 801d40c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801d410:	4304      	orrs	r4, r0
 801d412:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801d416:	4544      	cmp	r4, r8
 801d418:	468e      	mov	lr, r1
 801d41a:	4681      	mov	r9, r0
 801d41c:	d907      	bls.n	801d42e <__ieee754_atan2+0x46>
 801d41e:	4632      	mov	r2, r6
 801d420:	463b      	mov	r3, r7
 801d422:	f7e2 ff5b 	bl	80002dc <__adddf3>
 801d426:	ec41 0b10 	vmov	d0, r0, r1
 801d42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d42e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801d432:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801d436:	4334      	orrs	r4, r6
 801d438:	d103      	bne.n	801d442 <__ieee754_atan2+0x5a>
 801d43a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d43e:	f000 b89b 	b.w	801d578 <atan>
 801d442:	17bc      	asrs	r4, r7, #30
 801d444:	f004 0402 	and.w	r4, r4, #2
 801d448:	ea53 0909 	orrs.w	r9, r3, r9
 801d44c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801d450:	d107      	bne.n	801d462 <__ieee754_atan2+0x7a>
 801d452:	2c02      	cmp	r4, #2
 801d454:	d05f      	beq.n	801d516 <__ieee754_atan2+0x12e>
 801d456:	2c03      	cmp	r4, #3
 801d458:	d1e5      	bne.n	801d426 <__ieee754_atan2+0x3e>
 801d45a:	a141      	add	r1, pc, #260	@ (adr r1, 801d560 <__ieee754_atan2+0x178>)
 801d45c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d460:	e7e1      	b.n	801d426 <__ieee754_atan2+0x3e>
 801d462:	4315      	orrs	r5, r2
 801d464:	d106      	bne.n	801d474 <__ieee754_atan2+0x8c>
 801d466:	f1be 0f00 	cmp.w	lr, #0
 801d46a:	da5f      	bge.n	801d52c <__ieee754_atan2+0x144>
 801d46c:	a13e      	add	r1, pc, #248	@ (adr r1, 801d568 <__ieee754_atan2+0x180>)
 801d46e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d472:	e7d8      	b.n	801d426 <__ieee754_atan2+0x3e>
 801d474:	4542      	cmp	r2, r8
 801d476:	d10f      	bne.n	801d498 <__ieee754_atan2+0xb0>
 801d478:	4293      	cmp	r3, r2
 801d47a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801d47e:	d107      	bne.n	801d490 <__ieee754_atan2+0xa8>
 801d480:	2c02      	cmp	r4, #2
 801d482:	d84c      	bhi.n	801d51e <__ieee754_atan2+0x136>
 801d484:	4b34      	ldr	r3, [pc, #208]	@ (801d558 <__ieee754_atan2+0x170>)
 801d486:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d48a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d48e:	e7ca      	b.n	801d426 <__ieee754_atan2+0x3e>
 801d490:	2c02      	cmp	r4, #2
 801d492:	d848      	bhi.n	801d526 <__ieee754_atan2+0x13e>
 801d494:	4b31      	ldr	r3, [pc, #196]	@ (801d55c <__ieee754_atan2+0x174>)
 801d496:	e7f6      	b.n	801d486 <__ieee754_atan2+0x9e>
 801d498:	4543      	cmp	r3, r8
 801d49a:	d0e4      	beq.n	801d466 <__ieee754_atan2+0x7e>
 801d49c:	1a9b      	subs	r3, r3, r2
 801d49e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801d4a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d4a6:	da1e      	bge.n	801d4e6 <__ieee754_atan2+0xfe>
 801d4a8:	2f00      	cmp	r7, #0
 801d4aa:	da01      	bge.n	801d4b0 <__ieee754_atan2+0xc8>
 801d4ac:	323c      	adds	r2, #60	@ 0x3c
 801d4ae:	db1e      	blt.n	801d4ee <__ieee754_atan2+0x106>
 801d4b0:	4632      	mov	r2, r6
 801d4b2:	463b      	mov	r3, r7
 801d4b4:	f7e3 f9f2 	bl	800089c <__aeabi_ddiv>
 801d4b8:	ec41 0b10 	vmov	d0, r0, r1
 801d4bc:	f000 f9f4 	bl	801d8a8 <fabs>
 801d4c0:	f000 f85a 	bl	801d578 <atan>
 801d4c4:	ec51 0b10 	vmov	r0, r1, d0
 801d4c8:	2c01      	cmp	r4, #1
 801d4ca:	d013      	beq.n	801d4f4 <__ieee754_atan2+0x10c>
 801d4cc:	2c02      	cmp	r4, #2
 801d4ce:	d015      	beq.n	801d4fc <__ieee754_atan2+0x114>
 801d4d0:	2c00      	cmp	r4, #0
 801d4d2:	d0a8      	beq.n	801d426 <__ieee754_atan2+0x3e>
 801d4d4:	a318      	add	r3, pc, #96	@ (adr r3, 801d538 <__ieee754_atan2+0x150>)
 801d4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4da:	f7e2 fefd 	bl	80002d8 <__aeabi_dsub>
 801d4de:	a318      	add	r3, pc, #96	@ (adr r3, 801d540 <__ieee754_atan2+0x158>)
 801d4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4e4:	e014      	b.n	801d510 <__ieee754_atan2+0x128>
 801d4e6:	a118      	add	r1, pc, #96	@ (adr r1, 801d548 <__ieee754_atan2+0x160>)
 801d4e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d4ec:	e7ec      	b.n	801d4c8 <__ieee754_atan2+0xe0>
 801d4ee:	2000      	movs	r0, #0
 801d4f0:	2100      	movs	r1, #0
 801d4f2:	e7e9      	b.n	801d4c8 <__ieee754_atan2+0xe0>
 801d4f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d4f8:	4619      	mov	r1, r3
 801d4fa:	e794      	b.n	801d426 <__ieee754_atan2+0x3e>
 801d4fc:	a30e      	add	r3, pc, #56	@ (adr r3, 801d538 <__ieee754_atan2+0x150>)
 801d4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d502:	f7e2 fee9 	bl	80002d8 <__aeabi_dsub>
 801d506:	4602      	mov	r2, r0
 801d508:	460b      	mov	r3, r1
 801d50a:	a10d      	add	r1, pc, #52	@ (adr r1, 801d540 <__ieee754_atan2+0x158>)
 801d50c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d510:	f7e2 fee2 	bl	80002d8 <__aeabi_dsub>
 801d514:	e787      	b.n	801d426 <__ieee754_atan2+0x3e>
 801d516:	a10a      	add	r1, pc, #40	@ (adr r1, 801d540 <__ieee754_atan2+0x158>)
 801d518:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d51c:	e783      	b.n	801d426 <__ieee754_atan2+0x3e>
 801d51e:	a10c      	add	r1, pc, #48	@ (adr r1, 801d550 <__ieee754_atan2+0x168>)
 801d520:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d524:	e77f      	b.n	801d426 <__ieee754_atan2+0x3e>
 801d526:	2000      	movs	r0, #0
 801d528:	2100      	movs	r1, #0
 801d52a:	e77c      	b.n	801d426 <__ieee754_atan2+0x3e>
 801d52c:	a106      	add	r1, pc, #24	@ (adr r1, 801d548 <__ieee754_atan2+0x160>)
 801d52e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d532:	e778      	b.n	801d426 <__ieee754_atan2+0x3e>
 801d534:	f3af 8000 	nop.w
 801d538:	33145c07 	.word	0x33145c07
 801d53c:	3ca1a626 	.word	0x3ca1a626
 801d540:	54442d18 	.word	0x54442d18
 801d544:	400921fb 	.word	0x400921fb
 801d548:	54442d18 	.word	0x54442d18
 801d54c:	3ff921fb 	.word	0x3ff921fb
 801d550:	54442d18 	.word	0x54442d18
 801d554:	3fe921fb 	.word	0x3fe921fb
 801d558:	08022810 	.word	0x08022810
 801d55c:	080227f8 	.word	0x080227f8
 801d560:	54442d18 	.word	0x54442d18
 801d564:	c00921fb 	.word	0xc00921fb
 801d568:	54442d18 	.word	0x54442d18
 801d56c:	bff921fb 	.word	0xbff921fb
 801d570:	7ff00000 	.word	0x7ff00000
 801d574:	00000000 	.word	0x00000000

0801d578 <atan>:
 801d578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d57c:	ec55 4b10 	vmov	r4, r5, d0
 801d580:	4bbf      	ldr	r3, [pc, #764]	@ (801d880 <atan+0x308>)
 801d582:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801d586:	429e      	cmp	r6, r3
 801d588:	46ab      	mov	fp, r5
 801d58a:	d918      	bls.n	801d5be <atan+0x46>
 801d58c:	4bbd      	ldr	r3, [pc, #756]	@ (801d884 <atan+0x30c>)
 801d58e:	429e      	cmp	r6, r3
 801d590:	d801      	bhi.n	801d596 <atan+0x1e>
 801d592:	d109      	bne.n	801d5a8 <atan+0x30>
 801d594:	b144      	cbz	r4, 801d5a8 <atan+0x30>
 801d596:	4622      	mov	r2, r4
 801d598:	462b      	mov	r3, r5
 801d59a:	4620      	mov	r0, r4
 801d59c:	4629      	mov	r1, r5
 801d59e:	f7e2 fe9d 	bl	80002dc <__adddf3>
 801d5a2:	4604      	mov	r4, r0
 801d5a4:	460d      	mov	r5, r1
 801d5a6:	e006      	b.n	801d5b6 <atan+0x3e>
 801d5a8:	f1bb 0f00 	cmp.w	fp, #0
 801d5ac:	f340 812b 	ble.w	801d806 <atan+0x28e>
 801d5b0:	a597      	add	r5, pc, #604	@ (adr r5, 801d810 <atan+0x298>)
 801d5b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d5b6:	ec45 4b10 	vmov	d0, r4, r5
 801d5ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5be:	4bb2      	ldr	r3, [pc, #712]	@ (801d888 <atan+0x310>)
 801d5c0:	429e      	cmp	r6, r3
 801d5c2:	d813      	bhi.n	801d5ec <atan+0x74>
 801d5c4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801d5c8:	429e      	cmp	r6, r3
 801d5ca:	d80c      	bhi.n	801d5e6 <atan+0x6e>
 801d5cc:	a392      	add	r3, pc, #584	@ (adr r3, 801d818 <atan+0x2a0>)
 801d5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5d2:	4620      	mov	r0, r4
 801d5d4:	4629      	mov	r1, r5
 801d5d6:	f7e2 fe81 	bl	80002dc <__adddf3>
 801d5da:	4bac      	ldr	r3, [pc, #688]	@ (801d88c <atan+0x314>)
 801d5dc:	2200      	movs	r2, #0
 801d5de:	f7e3 fac3 	bl	8000b68 <__aeabi_dcmpgt>
 801d5e2:	2800      	cmp	r0, #0
 801d5e4:	d1e7      	bne.n	801d5b6 <atan+0x3e>
 801d5e6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801d5ea:	e029      	b.n	801d640 <atan+0xc8>
 801d5ec:	f000 f95c 	bl	801d8a8 <fabs>
 801d5f0:	4ba7      	ldr	r3, [pc, #668]	@ (801d890 <atan+0x318>)
 801d5f2:	429e      	cmp	r6, r3
 801d5f4:	ec55 4b10 	vmov	r4, r5, d0
 801d5f8:	f200 80bc 	bhi.w	801d774 <atan+0x1fc>
 801d5fc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801d600:	429e      	cmp	r6, r3
 801d602:	f200 809e 	bhi.w	801d742 <atan+0x1ca>
 801d606:	4622      	mov	r2, r4
 801d608:	462b      	mov	r3, r5
 801d60a:	4620      	mov	r0, r4
 801d60c:	4629      	mov	r1, r5
 801d60e:	f7e2 fe65 	bl	80002dc <__adddf3>
 801d612:	4b9e      	ldr	r3, [pc, #632]	@ (801d88c <atan+0x314>)
 801d614:	2200      	movs	r2, #0
 801d616:	f7e2 fe5f 	bl	80002d8 <__aeabi_dsub>
 801d61a:	2200      	movs	r2, #0
 801d61c:	4606      	mov	r6, r0
 801d61e:	460f      	mov	r7, r1
 801d620:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801d624:	4620      	mov	r0, r4
 801d626:	4629      	mov	r1, r5
 801d628:	f7e2 fe58 	bl	80002dc <__adddf3>
 801d62c:	4602      	mov	r2, r0
 801d62e:	460b      	mov	r3, r1
 801d630:	4630      	mov	r0, r6
 801d632:	4639      	mov	r1, r7
 801d634:	f7e3 f932 	bl	800089c <__aeabi_ddiv>
 801d638:	f04f 0a00 	mov.w	sl, #0
 801d63c:	4604      	mov	r4, r0
 801d63e:	460d      	mov	r5, r1
 801d640:	4622      	mov	r2, r4
 801d642:	462b      	mov	r3, r5
 801d644:	4620      	mov	r0, r4
 801d646:	4629      	mov	r1, r5
 801d648:	f7e2 fffe 	bl	8000648 <__aeabi_dmul>
 801d64c:	4602      	mov	r2, r0
 801d64e:	460b      	mov	r3, r1
 801d650:	4680      	mov	r8, r0
 801d652:	4689      	mov	r9, r1
 801d654:	f7e2 fff8 	bl	8000648 <__aeabi_dmul>
 801d658:	a371      	add	r3, pc, #452	@ (adr r3, 801d820 <atan+0x2a8>)
 801d65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d65e:	4606      	mov	r6, r0
 801d660:	460f      	mov	r7, r1
 801d662:	f7e2 fff1 	bl	8000648 <__aeabi_dmul>
 801d666:	a370      	add	r3, pc, #448	@ (adr r3, 801d828 <atan+0x2b0>)
 801d668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d66c:	f7e2 fe36 	bl	80002dc <__adddf3>
 801d670:	4632      	mov	r2, r6
 801d672:	463b      	mov	r3, r7
 801d674:	f7e2 ffe8 	bl	8000648 <__aeabi_dmul>
 801d678:	a36d      	add	r3, pc, #436	@ (adr r3, 801d830 <atan+0x2b8>)
 801d67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d67e:	f7e2 fe2d 	bl	80002dc <__adddf3>
 801d682:	4632      	mov	r2, r6
 801d684:	463b      	mov	r3, r7
 801d686:	f7e2 ffdf 	bl	8000648 <__aeabi_dmul>
 801d68a:	a36b      	add	r3, pc, #428	@ (adr r3, 801d838 <atan+0x2c0>)
 801d68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d690:	f7e2 fe24 	bl	80002dc <__adddf3>
 801d694:	4632      	mov	r2, r6
 801d696:	463b      	mov	r3, r7
 801d698:	f7e2 ffd6 	bl	8000648 <__aeabi_dmul>
 801d69c:	a368      	add	r3, pc, #416	@ (adr r3, 801d840 <atan+0x2c8>)
 801d69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6a2:	f7e2 fe1b 	bl	80002dc <__adddf3>
 801d6a6:	4632      	mov	r2, r6
 801d6a8:	463b      	mov	r3, r7
 801d6aa:	f7e2 ffcd 	bl	8000648 <__aeabi_dmul>
 801d6ae:	a366      	add	r3, pc, #408	@ (adr r3, 801d848 <atan+0x2d0>)
 801d6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6b4:	f7e2 fe12 	bl	80002dc <__adddf3>
 801d6b8:	4642      	mov	r2, r8
 801d6ba:	464b      	mov	r3, r9
 801d6bc:	f7e2 ffc4 	bl	8000648 <__aeabi_dmul>
 801d6c0:	a363      	add	r3, pc, #396	@ (adr r3, 801d850 <atan+0x2d8>)
 801d6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6c6:	4680      	mov	r8, r0
 801d6c8:	4689      	mov	r9, r1
 801d6ca:	4630      	mov	r0, r6
 801d6cc:	4639      	mov	r1, r7
 801d6ce:	f7e2 ffbb 	bl	8000648 <__aeabi_dmul>
 801d6d2:	a361      	add	r3, pc, #388	@ (adr r3, 801d858 <atan+0x2e0>)
 801d6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6d8:	f7e2 fdfe 	bl	80002d8 <__aeabi_dsub>
 801d6dc:	4632      	mov	r2, r6
 801d6de:	463b      	mov	r3, r7
 801d6e0:	f7e2 ffb2 	bl	8000648 <__aeabi_dmul>
 801d6e4:	a35e      	add	r3, pc, #376	@ (adr r3, 801d860 <atan+0x2e8>)
 801d6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6ea:	f7e2 fdf5 	bl	80002d8 <__aeabi_dsub>
 801d6ee:	4632      	mov	r2, r6
 801d6f0:	463b      	mov	r3, r7
 801d6f2:	f7e2 ffa9 	bl	8000648 <__aeabi_dmul>
 801d6f6:	a35c      	add	r3, pc, #368	@ (adr r3, 801d868 <atan+0x2f0>)
 801d6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6fc:	f7e2 fdec 	bl	80002d8 <__aeabi_dsub>
 801d700:	4632      	mov	r2, r6
 801d702:	463b      	mov	r3, r7
 801d704:	f7e2 ffa0 	bl	8000648 <__aeabi_dmul>
 801d708:	a359      	add	r3, pc, #356	@ (adr r3, 801d870 <atan+0x2f8>)
 801d70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d70e:	f7e2 fde3 	bl	80002d8 <__aeabi_dsub>
 801d712:	4632      	mov	r2, r6
 801d714:	463b      	mov	r3, r7
 801d716:	f7e2 ff97 	bl	8000648 <__aeabi_dmul>
 801d71a:	4602      	mov	r2, r0
 801d71c:	460b      	mov	r3, r1
 801d71e:	4640      	mov	r0, r8
 801d720:	4649      	mov	r1, r9
 801d722:	f7e2 fddb 	bl	80002dc <__adddf3>
 801d726:	4622      	mov	r2, r4
 801d728:	462b      	mov	r3, r5
 801d72a:	f7e2 ff8d 	bl	8000648 <__aeabi_dmul>
 801d72e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801d732:	4602      	mov	r2, r0
 801d734:	460b      	mov	r3, r1
 801d736:	d148      	bne.n	801d7ca <atan+0x252>
 801d738:	4620      	mov	r0, r4
 801d73a:	4629      	mov	r1, r5
 801d73c:	f7e2 fdcc 	bl	80002d8 <__aeabi_dsub>
 801d740:	e72f      	b.n	801d5a2 <atan+0x2a>
 801d742:	4b52      	ldr	r3, [pc, #328]	@ (801d88c <atan+0x314>)
 801d744:	2200      	movs	r2, #0
 801d746:	4620      	mov	r0, r4
 801d748:	4629      	mov	r1, r5
 801d74a:	f7e2 fdc5 	bl	80002d8 <__aeabi_dsub>
 801d74e:	4b4f      	ldr	r3, [pc, #316]	@ (801d88c <atan+0x314>)
 801d750:	4606      	mov	r6, r0
 801d752:	460f      	mov	r7, r1
 801d754:	2200      	movs	r2, #0
 801d756:	4620      	mov	r0, r4
 801d758:	4629      	mov	r1, r5
 801d75a:	f7e2 fdbf 	bl	80002dc <__adddf3>
 801d75e:	4602      	mov	r2, r0
 801d760:	460b      	mov	r3, r1
 801d762:	4630      	mov	r0, r6
 801d764:	4639      	mov	r1, r7
 801d766:	f7e3 f899 	bl	800089c <__aeabi_ddiv>
 801d76a:	f04f 0a01 	mov.w	sl, #1
 801d76e:	4604      	mov	r4, r0
 801d770:	460d      	mov	r5, r1
 801d772:	e765      	b.n	801d640 <atan+0xc8>
 801d774:	4b47      	ldr	r3, [pc, #284]	@ (801d894 <atan+0x31c>)
 801d776:	429e      	cmp	r6, r3
 801d778:	d21c      	bcs.n	801d7b4 <atan+0x23c>
 801d77a:	4b47      	ldr	r3, [pc, #284]	@ (801d898 <atan+0x320>)
 801d77c:	2200      	movs	r2, #0
 801d77e:	4620      	mov	r0, r4
 801d780:	4629      	mov	r1, r5
 801d782:	f7e2 fda9 	bl	80002d8 <__aeabi_dsub>
 801d786:	4b44      	ldr	r3, [pc, #272]	@ (801d898 <atan+0x320>)
 801d788:	4606      	mov	r6, r0
 801d78a:	460f      	mov	r7, r1
 801d78c:	2200      	movs	r2, #0
 801d78e:	4620      	mov	r0, r4
 801d790:	4629      	mov	r1, r5
 801d792:	f7e2 ff59 	bl	8000648 <__aeabi_dmul>
 801d796:	4b3d      	ldr	r3, [pc, #244]	@ (801d88c <atan+0x314>)
 801d798:	2200      	movs	r2, #0
 801d79a:	f7e2 fd9f 	bl	80002dc <__adddf3>
 801d79e:	4602      	mov	r2, r0
 801d7a0:	460b      	mov	r3, r1
 801d7a2:	4630      	mov	r0, r6
 801d7a4:	4639      	mov	r1, r7
 801d7a6:	f7e3 f879 	bl	800089c <__aeabi_ddiv>
 801d7aa:	f04f 0a02 	mov.w	sl, #2
 801d7ae:	4604      	mov	r4, r0
 801d7b0:	460d      	mov	r5, r1
 801d7b2:	e745      	b.n	801d640 <atan+0xc8>
 801d7b4:	4622      	mov	r2, r4
 801d7b6:	462b      	mov	r3, r5
 801d7b8:	4938      	ldr	r1, [pc, #224]	@ (801d89c <atan+0x324>)
 801d7ba:	2000      	movs	r0, #0
 801d7bc:	f7e3 f86e 	bl	800089c <__aeabi_ddiv>
 801d7c0:	f04f 0a03 	mov.w	sl, #3
 801d7c4:	4604      	mov	r4, r0
 801d7c6:	460d      	mov	r5, r1
 801d7c8:	e73a      	b.n	801d640 <atan+0xc8>
 801d7ca:	4b35      	ldr	r3, [pc, #212]	@ (801d8a0 <atan+0x328>)
 801d7cc:	4e35      	ldr	r6, [pc, #212]	@ (801d8a4 <atan+0x32c>)
 801d7ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7d6:	f7e2 fd7f 	bl	80002d8 <__aeabi_dsub>
 801d7da:	4622      	mov	r2, r4
 801d7dc:	462b      	mov	r3, r5
 801d7de:	f7e2 fd7b 	bl	80002d8 <__aeabi_dsub>
 801d7e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801d7e6:	4602      	mov	r2, r0
 801d7e8:	460b      	mov	r3, r1
 801d7ea:	e9d6 0100 	ldrd	r0, r1, [r6]
 801d7ee:	f7e2 fd73 	bl	80002d8 <__aeabi_dsub>
 801d7f2:	f1bb 0f00 	cmp.w	fp, #0
 801d7f6:	4604      	mov	r4, r0
 801d7f8:	460d      	mov	r5, r1
 801d7fa:	f6bf aedc 	bge.w	801d5b6 <atan+0x3e>
 801d7fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d802:	461d      	mov	r5, r3
 801d804:	e6d7      	b.n	801d5b6 <atan+0x3e>
 801d806:	a51c      	add	r5, pc, #112	@ (adr r5, 801d878 <atan+0x300>)
 801d808:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d80c:	e6d3      	b.n	801d5b6 <atan+0x3e>
 801d80e:	bf00      	nop
 801d810:	54442d18 	.word	0x54442d18
 801d814:	3ff921fb 	.word	0x3ff921fb
 801d818:	8800759c 	.word	0x8800759c
 801d81c:	7e37e43c 	.word	0x7e37e43c
 801d820:	e322da11 	.word	0xe322da11
 801d824:	3f90ad3a 	.word	0x3f90ad3a
 801d828:	24760deb 	.word	0x24760deb
 801d82c:	3fa97b4b 	.word	0x3fa97b4b
 801d830:	a0d03d51 	.word	0xa0d03d51
 801d834:	3fb10d66 	.word	0x3fb10d66
 801d838:	c54c206e 	.word	0xc54c206e
 801d83c:	3fb745cd 	.word	0x3fb745cd
 801d840:	920083ff 	.word	0x920083ff
 801d844:	3fc24924 	.word	0x3fc24924
 801d848:	5555550d 	.word	0x5555550d
 801d84c:	3fd55555 	.word	0x3fd55555
 801d850:	2c6a6c2f 	.word	0x2c6a6c2f
 801d854:	bfa2b444 	.word	0xbfa2b444
 801d858:	52defd9a 	.word	0x52defd9a
 801d85c:	3fadde2d 	.word	0x3fadde2d
 801d860:	af749a6d 	.word	0xaf749a6d
 801d864:	3fb3b0f2 	.word	0x3fb3b0f2
 801d868:	fe231671 	.word	0xfe231671
 801d86c:	3fbc71c6 	.word	0x3fbc71c6
 801d870:	9998ebc4 	.word	0x9998ebc4
 801d874:	3fc99999 	.word	0x3fc99999
 801d878:	54442d18 	.word	0x54442d18
 801d87c:	bff921fb 	.word	0xbff921fb
 801d880:	440fffff 	.word	0x440fffff
 801d884:	7ff00000 	.word	0x7ff00000
 801d888:	3fdbffff 	.word	0x3fdbffff
 801d88c:	3ff00000 	.word	0x3ff00000
 801d890:	3ff2ffff 	.word	0x3ff2ffff
 801d894:	40038000 	.word	0x40038000
 801d898:	3ff80000 	.word	0x3ff80000
 801d89c:	bff00000 	.word	0xbff00000
 801d8a0:	08022828 	.word	0x08022828
 801d8a4:	08022848 	.word	0x08022848

0801d8a8 <fabs>:
 801d8a8:	ec51 0b10 	vmov	r0, r1, d0
 801d8ac:	4602      	mov	r2, r0
 801d8ae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801d8b2:	ec43 2b10 	vmov	d0, r2, r3
 801d8b6:	4770      	bx	lr

0801d8b8 <__kernel_cosf>:
 801d8b8:	ee10 3a10 	vmov	r3, s0
 801d8bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d8c0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801d8c4:	eef0 6a40 	vmov.f32	s13, s0
 801d8c8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801d8cc:	d204      	bcs.n	801d8d8 <__kernel_cosf+0x20>
 801d8ce:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801d8d2:	ee17 2a90 	vmov	r2, s15
 801d8d6:	b342      	cbz	r2, 801d92a <__kernel_cosf+0x72>
 801d8d8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801d8dc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801d948 <__kernel_cosf+0x90>
 801d8e0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801d94c <__kernel_cosf+0x94>
 801d8e4:	4a1a      	ldr	r2, [pc, #104]	@ (801d950 <__kernel_cosf+0x98>)
 801d8e6:	eea7 6a27 	vfma.f32	s12, s14, s15
 801d8ea:	4293      	cmp	r3, r2
 801d8ec:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801d954 <__kernel_cosf+0x9c>
 801d8f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d8f4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801d958 <__kernel_cosf+0xa0>
 801d8f8:	eea7 6a87 	vfma.f32	s12, s15, s14
 801d8fc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801d95c <__kernel_cosf+0xa4>
 801d900:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d904:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801d960 <__kernel_cosf+0xa8>
 801d908:	eea7 6a87 	vfma.f32	s12, s15, s14
 801d90c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801d910:	ee26 6a07 	vmul.f32	s12, s12, s14
 801d914:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801d918:	eee7 0a06 	vfma.f32	s1, s14, s12
 801d91c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d920:	d804      	bhi.n	801d92c <__kernel_cosf+0x74>
 801d922:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801d926:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d92a:	4770      	bx	lr
 801d92c:	4a0d      	ldr	r2, [pc, #52]	@ (801d964 <__kernel_cosf+0xac>)
 801d92e:	4293      	cmp	r3, r2
 801d930:	bf9a      	itte	ls
 801d932:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801d936:	ee07 3a10 	vmovls	s14, r3
 801d93a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801d93e:	ee30 0a47 	vsub.f32	s0, s0, s14
 801d942:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d946:	e7ec      	b.n	801d922 <__kernel_cosf+0x6a>
 801d948:	ad47d74e 	.word	0xad47d74e
 801d94c:	310f74f6 	.word	0x310f74f6
 801d950:	3e999999 	.word	0x3e999999
 801d954:	b493f27c 	.word	0xb493f27c
 801d958:	37d00d01 	.word	0x37d00d01
 801d95c:	bab60b61 	.word	0xbab60b61
 801d960:	3d2aaaab 	.word	0x3d2aaaab
 801d964:	3f480000 	.word	0x3f480000

0801d968 <__kernel_sinf>:
 801d968:	ee10 3a10 	vmov	r3, s0
 801d96c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d970:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801d974:	d204      	bcs.n	801d980 <__kernel_sinf+0x18>
 801d976:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801d97a:	ee17 3a90 	vmov	r3, s15
 801d97e:	b35b      	cbz	r3, 801d9d8 <__kernel_sinf+0x70>
 801d980:	ee20 7a00 	vmul.f32	s14, s0, s0
 801d984:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801d9dc <__kernel_sinf+0x74>
 801d988:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801d9e0 <__kernel_sinf+0x78>
 801d98c:	eea7 6a27 	vfma.f32	s12, s14, s15
 801d990:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801d9e4 <__kernel_sinf+0x7c>
 801d994:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d998:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801d9e8 <__kernel_sinf+0x80>
 801d99c:	eea7 6a87 	vfma.f32	s12, s15, s14
 801d9a0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801d9ec <__kernel_sinf+0x84>
 801d9a4:	ee60 6a07 	vmul.f32	s13, s0, s14
 801d9a8:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d9ac:	b930      	cbnz	r0, 801d9bc <__kernel_sinf+0x54>
 801d9ae:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801d9f0 <__kernel_sinf+0x88>
 801d9b2:	eea7 6a27 	vfma.f32	s12, s14, s15
 801d9b6:	eea6 0a26 	vfma.f32	s0, s12, s13
 801d9ba:	4770      	bx	lr
 801d9bc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801d9c0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801d9c4:	eee0 7a86 	vfma.f32	s15, s1, s12
 801d9c8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801d9cc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801d9f4 <__kernel_sinf+0x8c>
 801d9d0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801d9d4:	ee30 0a60 	vsub.f32	s0, s0, s1
 801d9d8:	4770      	bx	lr
 801d9da:	bf00      	nop
 801d9dc:	2f2ec9d3 	.word	0x2f2ec9d3
 801d9e0:	b2d72f34 	.word	0xb2d72f34
 801d9e4:	3638ef1b 	.word	0x3638ef1b
 801d9e8:	b9500d01 	.word	0xb9500d01
 801d9ec:	3c088889 	.word	0x3c088889
 801d9f0:	be2aaaab 	.word	0xbe2aaaab
 801d9f4:	3e2aaaab 	.word	0x3e2aaaab

0801d9f8 <__kernel_tanf>:
 801d9f8:	b508      	push	{r3, lr}
 801d9fa:	ee10 3a10 	vmov	r3, s0
 801d9fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801da02:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 801da06:	eef0 7a40 	vmov.f32	s15, s0
 801da0a:	d217      	bcs.n	801da3c <__kernel_tanf+0x44>
 801da0c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801da10:	ee17 1a10 	vmov	r1, s14
 801da14:	bb41      	cbnz	r1, 801da68 <__kernel_tanf+0x70>
 801da16:	1c43      	adds	r3, r0, #1
 801da18:	4313      	orrs	r3, r2
 801da1a:	d108      	bne.n	801da2e <__kernel_tanf+0x36>
 801da1c:	f7ff fa62 	bl	801cee4 <fabsf>
 801da20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801da24:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801da28:	eeb0 0a67 	vmov.f32	s0, s15
 801da2c:	bd08      	pop	{r3, pc}
 801da2e:	2801      	cmp	r0, #1
 801da30:	d0fa      	beq.n	801da28 <__kernel_tanf+0x30>
 801da32:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801da36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801da3a:	e7f5      	b.n	801da28 <__kernel_tanf+0x30>
 801da3c:	494c      	ldr	r1, [pc, #304]	@ (801db70 <__kernel_tanf+0x178>)
 801da3e:	428a      	cmp	r2, r1
 801da40:	d312      	bcc.n	801da68 <__kernel_tanf+0x70>
 801da42:	2b00      	cmp	r3, #0
 801da44:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 801db74 <__kernel_tanf+0x17c>
 801da48:	bfb8      	it	lt
 801da4a:	eef1 7a40 	vneglt.f32	s15, s0
 801da4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 801da52:	eddf 7a49 	vldr	s15, [pc, #292]	@ 801db78 <__kernel_tanf+0x180>
 801da56:	bfb8      	it	lt
 801da58:	eef1 0a60 	vneglt.f32	s1, s1
 801da5c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801da60:	eddf 0a46 	vldr	s1, [pc, #280]	@ 801db7c <__kernel_tanf+0x184>
 801da64:	ee77 7a87 	vadd.f32	s15, s15, s14
 801da68:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801da6c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 801db80 <__kernel_tanf+0x188>
 801da70:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 801db84 <__kernel_tanf+0x18c>
 801da74:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 801db88 <__kernel_tanf+0x190>
 801da78:	493d      	ldr	r1, [pc, #244]	@ (801db70 <__kernel_tanf+0x178>)
 801da7a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801da7e:	428a      	cmp	r2, r1
 801da80:	eea7 6a25 	vfma.f32	s12, s14, s11
 801da84:	eddf 5a41 	vldr	s11, [pc, #260]	@ 801db8c <__kernel_tanf+0x194>
 801da88:	eee6 5a07 	vfma.f32	s11, s12, s14
 801da8c:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 801db90 <__kernel_tanf+0x198>
 801da90:	eea5 6a87 	vfma.f32	s12, s11, s14
 801da94:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801db94 <__kernel_tanf+0x19c>
 801da98:	eee6 5a07 	vfma.f32	s11, s12, s14
 801da9c:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 801db98 <__kernel_tanf+0x1a0>
 801daa0:	eea5 6a87 	vfma.f32	s12, s11, s14
 801daa4:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 801db9c <__kernel_tanf+0x1a4>
 801daa8:	eee7 5a05 	vfma.f32	s11, s14, s10
 801daac:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801dba0 <__kernel_tanf+0x1a8>
 801dab0:	eea5 5a87 	vfma.f32	s10, s11, s14
 801dab4:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801dba4 <__kernel_tanf+0x1ac>
 801dab8:	eee5 5a07 	vfma.f32	s11, s10, s14
 801dabc:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801dba8 <__kernel_tanf+0x1b0>
 801dac0:	eea5 5a87 	vfma.f32	s10, s11, s14
 801dac4:	eddf 5a39 	vldr	s11, [pc, #228]	@ 801dbac <__kernel_tanf+0x1b4>
 801dac8:	eee5 5a07 	vfma.f32	s11, s10, s14
 801dacc:	eeb0 7a46 	vmov.f32	s14, s12
 801dad0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801dad4:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801dad8:	eeb0 6a60 	vmov.f32	s12, s1
 801dadc:	eea7 6a05 	vfma.f32	s12, s14, s10
 801dae0:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 801dbb0 <__kernel_tanf+0x1b8>
 801dae4:	eee6 0a26 	vfma.f32	s1, s12, s13
 801dae8:	eee5 0a07 	vfma.f32	s1, s10, s14
 801daec:	ee37 6aa0 	vadd.f32	s12, s15, s1
 801daf0:	d31d      	bcc.n	801db2e <__kernel_tanf+0x136>
 801daf2:	ee07 0a10 	vmov	s14, r0
 801daf6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dafa:	ee26 5a06 	vmul.f32	s10, s12, s12
 801dafe:	ee36 6a07 	vadd.f32	s12, s12, s14
 801db02:	179b      	asrs	r3, r3, #30
 801db04:	eec5 5a06 	vdiv.f32	s11, s10, s12
 801db08:	f003 0302 	and.w	r3, r3, #2
 801db0c:	f1c3 0301 	rsb	r3, r3, #1
 801db10:	ee06 3a90 	vmov	s13, r3
 801db14:	ee35 6ae0 	vsub.f32	s12, s11, s1
 801db18:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801db1c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801db20:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801db24:	eea7 7ac6 	vfms.f32	s14, s15, s12
 801db28:	ee66 7a87 	vmul.f32	s15, s13, s14
 801db2c:	e77c      	b.n	801da28 <__kernel_tanf+0x30>
 801db2e:	2801      	cmp	r0, #1
 801db30:	d01b      	beq.n	801db6a <__kernel_tanf+0x172>
 801db32:	4b20      	ldr	r3, [pc, #128]	@ (801dbb4 <__kernel_tanf+0x1bc>)
 801db34:	ee16 2a10 	vmov	r2, s12
 801db38:	401a      	ands	r2, r3
 801db3a:	ee05 2a90 	vmov	s11, r2
 801db3e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801db42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801db46:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801db4a:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 801db4e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 801db52:	ee16 2a90 	vmov	r2, s13
 801db56:	4013      	ands	r3, r2
 801db58:	ee07 3a90 	vmov	s15, r3
 801db5c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801db60:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801db64:	eee7 7a26 	vfma.f32	s15, s14, s13
 801db68:	e75e      	b.n	801da28 <__kernel_tanf+0x30>
 801db6a:	eef0 7a46 	vmov.f32	s15, s12
 801db6e:	e75b      	b.n	801da28 <__kernel_tanf+0x30>
 801db70:	3f2ca140 	.word	0x3f2ca140
 801db74:	3f490fda 	.word	0x3f490fda
 801db78:	33222168 	.word	0x33222168
 801db7c:	00000000 	.word	0x00000000
 801db80:	b79bae5f 	.word	0xb79bae5f
 801db84:	38a3f445 	.word	0x38a3f445
 801db88:	37d95384 	.word	0x37d95384
 801db8c:	3a1a26c8 	.word	0x3a1a26c8
 801db90:	3b6b6916 	.word	0x3b6b6916
 801db94:	3cb327a4 	.word	0x3cb327a4
 801db98:	3e088889 	.word	0x3e088889
 801db9c:	3895c07a 	.word	0x3895c07a
 801dba0:	398137b9 	.word	0x398137b9
 801dba4:	3abede48 	.word	0x3abede48
 801dba8:	3c11371f 	.word	0x3c11371f
 801dbac:	3d5d0dd1 	.word	0x3d5d0dd1
 801dbb0:	3eaaaaab 	.word	0x3eaaaaab
 801dbb4:	fffff000 	.word	0xfffff000

0801dbb8 <__ieee754_acosf>:
 801dbb8:	b508      	push	{r3, lr}
 801dbba:	ee10 3a10 	vmov	r3, s0
 801dbbe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801dbc2:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801dbc6:	ed2d 8b0c 	vpush	{d8-d13}
 801dbca:	d10a      	bne.n	801dbe2 <__ieee754_acosf+0x2a>
 801dbcc:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 801dd64 <__ieee754_acosf+0x1ac>
 801dbd0:	eddf 7a65 	vldr	s15, [pc, #404]	@ 801dd68 <__ieee754_acosf+0x1b0>
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	bfc8      	it	gt
 801dbd8:	eeb0 0a67 	vmovgt.f32	s0, s15
 801dbdc:	ecbd 8b0c 	vpop	{d8-d13}
 801dbe0:	bd08      	pop	{r3, pc}
 801dbe2:	d904      	bls.n	801dbee <__ieee754_acosf+0x36>
 801dbe4:	ee30 8a40 	vsub.f32	s16, s0, s0
 801dbe8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801dbec:	e7f6      	b.n	801dbdc <__ieee754_acosf+0x24>
 801dbee:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 801dbf2:	d23c      	bcs.n	801dc6e <__ieee754_acosf+0xb6>
 801dbf4:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 801dbf8:	f240 80b1 	bls.w	801dd5e <__ieee754_acosf+0x1a6>
 801dbfc:	ee60 7a00 	vmul.f32	s15, s0, s0
 801dc00:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 801dd6c <__ieee754_acosf+0x1b4>
 801dc04:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 801dd70 <__ieee754_acosf+0x1b8>
 801dc08:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 801dd74 <__ieee754_acosf+0x1bc>
 801dc0c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801dc10:	eddf 6a59 	vldr	s13, [pc, #356]	@ 801dd78 <__ieee754_acosf+0x1c0>
 801dc14:	eee7 6a27 	vfma.f32	s13, s14, s15
 801dc18:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801dd7c <__ieee754_acosf+0x1c4>
 801dc1c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801dc20:	eddf 6a57 	vldr	s13, [pc, #348]	@ 801dd80 <__ieee754_acosf+0x1c8>
 801dc24:	eee7 6a27 	vfma.f32	s13, s14, s15
 801dc28:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 801dd84 <__ieee754_acosf+0x1cc>
 801dc2c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801dc30:	eddf 6a55 	vldr	s13, [pc, #340]	@ 801dd88 <__ieee754_acosf+0x1d0>
 801dc34:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801dc38:	eddf 6a54 	vldr	s13, [pc, #336]	@ 801dd8c <__ieee754_acosf+0x1d4>
 801dc3c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801dc40:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 801dd90 <__ieee754_acosf+0x1d8>
 801dc44:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801dc48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dc4c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801dc50:	ee27 7a27 	vmul.f32	s14, s14, s15
 801dc54:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 801dd94 <__ieee754_acosf+0x1dc>
 801dc58:	ee87 6a26 	vdiv.f32	s12, s14, s13
 801dc5c:	eee0 7a46 	vfms.f32	s15, s0, s12
 801dc60:	ee70 7a67 	vsub.f32	s15, s0, s15
 801dc64:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 801dd98 <__ieee754_acosf+0x1e0>
 801dc68:	ee30 0a67 	vsub.f32	s0, s0, s15
 801dc6c:	e7b6      	b.n	801dbdc <__ieee754_acosf+0x24>
 801dc6e:	2b00      	cmp	r3, #0
 801dc70:	eddf da3e 	vldr	s27, [pc, #248]	@ 801dd6c <__ieee754_acosf+0x1b4>
 801dc74:	eddf ca3e 	vldr	s25, [pc, #248]	@ 801dd70 <__ieee754_acosf+0x1b8>
 801dc78:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 801dd78 <__ieee754_acosf+0x1c0>
 801dc7c:	eddf ba3f 	vldr	s23, [pc, #252]	@ 801dd7c <__ieee754_acosf+0x1c4>
 801dc80:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 801dd80 <__ieee754_acosf+0x1c8>
 801dc84:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 801dd84 <__ieee754_acosf+0x1cc>
 801dc88:	ed9f da3f 	vldr	s26, [pc, #252]	@ 801dd88 <__ieee754_acosf+0x1d0>
 801dc8c:	eddf aa39 	vldr	s21, [pc, #228]	@ 801dd74 <__ieee754_acosf+0x1bc>
 801dc90:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 801dd8c <__ieee754_acosf+0x1d4>
 801dc94:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 801dd90 <__ieee754_acosf+0x1d8>
 801dc98:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 801dc9c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801dca0:	da28      	bge.n	801dcf4 <__ieee754_acosf+0x13c>
 801dca2:	ee30 8a09 	vadd.f32	s16, s0, s18
 801dca6:	ee28 0a27 	vmul.f32	s0, s16, s15
 801dcaa:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801dcae:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801dcb2:	eeac ca80 	vfma.f32	s24, s25, s0
 801dcb6:	eeaa aa80 	vfma.f32	s20, s21, s0
 801dcba:	eeec ba00 	vfma.f32	s23, s24, s0
 801dcbe:	eeea 9a00 	vfma.f32	s19, s20, s0
 801dcc2:	eeab ba80 	vfma.f32	s22, s23, s0
 801dcc6:	eea9 9a80 	vfma.f32	s18, s19, s0
 801dcca:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801dcce:	ee68 8a80 	vmul.f32	s17, s17, s0
 801dcd2:	f000 ff4f 	bl	801eb74 <__ieee754_sqrtf>
 801dcd6:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801dcda:	eddf 7a30 	vldr	s15, [pc, #192]	@ 801dd9c <__ieee754_acosf+0x1e4>
 801dcde:	eee0 7a07 	vfma.f32	s15, s0, s14
 801dce2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801dce6:	ee77 7a80 	vadd.f32	s15, s15, s0
 801dcea:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 801dda0 <__ieee754_acosf+0x1e8>
 801dcee:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801dcf2:	e773      	b.n	801dbdc <__ieee754_acosf+0x24>
 801dcf4:	ee39 8a40 	vsub.f32	s16, s18, s0
 801dcf8:	ee28 8a27 	vmul.f32	s16, s16, s15
 801dcfc:	eeb0 0a48 	vmov.f32	s0, s16
 801dd00:	f000 ff38 	bl	801eb74 <__ieee754_sqrtf>
 801dd04:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801dd08:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801dd0c:	eeac ca88 	vfma.f32	s24, s25, s16
 801dd10:	eeaa aa88 	vfma.f32	s20, s21, s16
 801dd14:	eeec ba08 	vfma.f32	s23, s24, s16
 801dd18:	ee10 3a10 	vmov	r3, s0
 801dd1c:	eeab ba88 	vfma.f32	s22, s23, s16
 801dd20:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801dd24:	f023 030f 	bic.w	r3, r3, #15
 801dd28:	eeea 9a08 	vfma.f32	s19, s20, s16
 801dd2c:	ee07 3a90 	vmov	s15, r3
 801dd30:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801dd34:	eeb0 6a48 	vmov.f32	s12, s16
 801dd38:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801dd3c:	eea9 9a88 	vfma.f32	s18, s19, s16
 801dd40:	ee70 6a27 	vadd.f32	s13, s0, s15
 801dd44:	ee68 8a88 	vmul.f32	s17, s17, s16
 801dd48:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801dd4c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 801dd50:	eea0 7a26 	vfma.f32	s14, s0, s13
 801dd54:	ee37 0a87 	vadd.f32	s0, s15, s14
 801dd58:	ee30 0a00 	vadd.f32	s0, s0, s0
 801dd5c:	e73e      	b.n	801dbdc <__ieee754_acosf+0x24>
 801dd5e:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 801dda4 <__ieee754_acosf+0x1ec>
 801dd62:	e73b      	b.n	801dbdc <__ieee754_acosf+0x24>
 801dd64:	40490fdb 	.word	0x40490fdb
 801dd68:	00000000 	.word	0x00000000
 801dd6c:	3811ef08 	.word	0x3811ef08
 801dd70:	3a4f7f04 	.word	0x3a4f7f04
 801dd74:	bf303361 	.word	0xbf303361
 801dd78:	bd241146 	.word	0xbd241146
 801dd7c:	3e4e0aa8 	.word	0x3e4e0aa8
 801dd80:	bea6b090 	.word	0xbea6b090
 801dd84:	3e2aaaab 	.word	0x3e2aaaab
 801dd88:	3d9dc62e 	.word	0x3d9dc62e
 801dd8c:	4001572d 	.word	0x4001572d
 801dd90:	c019d139 	.word	0xc019d139
 801dd94:	33a22168 	.word	0x33a22168
 801dd98:	3fc90fda 	.word	0x3fc90fda
 801dd9c:	b3a22168 	.word	0xb3a22168
 801dda0:	40490fda 	.word	0x40490fda
 801dda4:	3fc90fdb 	.word	0x3fc90fdb

0801dda8 <__ieee754_asinf>:
 801dda8:	b538      	push	{r3, r4, r5, lr}
 801ddaa:	ee10 5a10 	vmov	r5, s0
 801ddae:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801ddb2:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 801ddb6:	ed2d 8b04 	vpush	{d8-d9}
 801ddba:	d10c      	bne.n	801ddd6 <__ieee754_asinf+0x2e>
 801ddbc:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 801df34 <__ieee754_asinf+0x18c>
 801ddc0:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 801df38 <__ieee754_asinf+0x190>
 801ddc4:	ee60 7a27 	vmul.f32	s15, s0, s15
 801ddc8:	eee0 7a07 	vfma.f32	s15, s0, s14
 801ddcc:	eeb0 0a67 	vmov.f32	s0, s15
 801ddd0:	ecbd 8b04 	vpop	{d8-d9}
 801ddd4:	bd38      	pop	{r3, r4, r5, pc}
 801ddd6:	d904      	bls.n	801dde2 <__ieee754_asinf+0x3a>
 801ddd8:	ee70 7a40 	vsub.f32	s15, s0, s0
 801dddc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801dde0:	e7f6      	b.n	801ddd0 <__ieee754_asinf+0x28>
 801dde2:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801dde6:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801ddea:	d20b      	bcs.n	801de04 <__ieee754_asinf+0x5c>
 801ddec:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 801ddf0:	d252      	bcs.n	801de98 <__ieee754_asinf+0xf0>
 801ddf2:	eddf 7a52 	vldr	s15, [pc, #328]	@ 801df3c <__ieee754_asinf+0x194>
 801ddf6:	ee70 7a27 	vadd.f32	s15, s0, s15
 801ddfa:	eef4 7ae8 	vcmpe.f32	s15, s17
 801ddfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de02:	dce5      	bgt.n	801ddd0 <__ieee754_asinf+0x28>
 801de04:	f7ff f86e 	bl	801cee4 <fabsf>
 801de08:	ee38 8ac0 	vsub.f32	s16, s17, s0
 801de0c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801de10:	ee28 8a27 	vmul.f32	s16, s16, s15
 801de14:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 801df40 <__ieee754_asinf+0x198>
 801de18:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 801df44 <__ieee754_asinf+0x19c>
 801de1c:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 801df48 <__ieee754_asinf+0x1a0>
 801de20:	eea8 7a27 	vfma.f32	s14, s16, s15
 801de24:	eddf 7a49 	vldr	s15, [pc, #292]	@ 801df4c <__ieee754_asinf+0x1a4>
 801de28:	eee7 7a08 	vfma.f32	s15, s14, s16
 801de2c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 801df50 <__ieee754_asinf+0x1a8>
 801de30:	eea7 7a88 	vfma.f32	s14, s15, s16
 801de34:	eddf 7a47 	vldr	s15, [pc, #284]	@ 801df54 <__ieee754_asinf+0x1ac>
 801de38:	eee7 7a08 	vfma.f32	s15, s14, s16
 801de3c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 801df58 <__ieee754_asinf+0x1b0>
 801de40:	eea7 9a88 	vfma.f32	s18, s15, s16
 801de44:	eddf 7a45 	vldr	s15, [pc, #276]	@ 801df5c <__ieee754_asinf+0x1b4>
 801de48:	eee8 7a07 	vfma.f32	s15, s16, s14
 801de4c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 801df60 <__ieee754_asinf+0x1b8>
 801de50:	eea7 7a88 	vfma.f32	s14, s15, s16
 801de54:	eddf 7a43 	vldr	s15, [pc, #268]	@ 801df64 <__ieee754_asinf+0x1bc>
 801de58:	eee7 7a08 	vfma.f32	s15, s14, s16
 801de5c:	eeb0 0a48 	vmov.f32	s0, s16
 801de60:	eee7 8a88 	vfma.f32	s17, s15, s16
 801de64:	f000 fe86 	bl	801eb74 <__ieee754_sqrtf>
 801de68:	4b3f      	ldr	r3, [pc, #252]	@ (801df68 <__ieee754_asinf+0x1c0>)
 801de6a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801de6e:	429c      	cmp	r4, r3
 801de70:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801de74:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801de78:	d93d      	bls.n	801def6 <__ieee754_asinf+0x14e>
 801de7a:	eea0 0a06 	vfma.f32	s0, s0, s12
 801de7e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 801df6c <__ieee754_asinf+0x1c4>
 801de82:	eee0 7a26 	vfma.f32	s15, s0, s13
 801de86:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 801df38 <__ieee754_asinf+0x190>
 801de8a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801de8e:	2d00      	cmp	r5, #0
 801de90:	bfd8      	it	le
 801de92:	eeb1 0a40 	vnegle.f32	s0, s0
 801de96:	e79b      	b.n	801ddd0 <__ieee754_asinf+0x28>
 801de98:	ee60 7a00 	vmul.f32	s15, s0, s0
 801de9c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801df44 <__ieee754_asinf+0x19c>
 801dea0:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 801df40 <__ieee754_asinf+0x198>
 801dea4:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 801df58 <__ieee754_asinf+0x1b0>
 801dea8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801deac:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801df4c <__ieee754_asinf+0x1a4>
 801deb0:	eee7 6a27 	vfma.f32	s13, s14, s15
 801deb4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 801df50 <__ieee754_asinf+0x1a8>
 801deb8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801debc:	eddf 6a25 	vldr	s13, [pc, #148]	@ 801df54 <__ieee754_asinf+0x1ac>
 801dec0:	eee7 6a27 	vfma.f32	s13, s14, s15
 801dec4:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 801df48 <__ieee754_asinf+0x1a0>
 801dec8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801decc:	eddf 6a23 	vldr	s13, [pc, #140]	@ 801df5c <__ieee754_asinf+0x1b4>
 801ded0:	eee7 6a86 	vfma.f32	s13, s15, s12
 801ded4:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 801df60 <__ieee754_asinf+0x1b8>
 801ded8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801dedc:	eddf 6a21 	vldr	s13, [pc, #132]	@ 801df64 <__ieee754_asinf+0x1bc>
 801dee0:	eee6 6a27 	vfma.f32	s13, s12, s15
 801dee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 801dee8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801deec:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801def0:	eea0 0a27 	vfma.f32	s0, s0, s15
 801def4:	e76c      	b.n	801ddd0 <__ieee754_asinf+0x28>
 801def6:	ee10 3a10 	vmov	r3, s0
 801defa:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801defe:	f023 030f 	bic.w	r3, r3, #15
 801df02:	ee07 3a10 	vmov	s14, r3
 801df06:	eea7 8a47 	vfms.f32	s16, s14, s14
 801df0a:	ee70 5a00 	vadd.f32	s11, s0, s0
 801df0e:	ee30 0a07 	vadd.f32	s0, s0, s14
 801df12:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801df34 <__ieee754_asinf+0x18c>
 801df16:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801df1a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 801df70 <__ieee754_asinf+0x1c8>
 801df1e:	eee5 7a66 	vfms.f32	s15, s10, s13
 801df22:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801df26:	eeb0 6a40 	vmov.f32	s12, s0
 801df2a:	eea7 6a66 	vfms.f32	s12, s14, s13
 801df2e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801df32:	e7aa      	b.n	801de8a <__ieee754_asinf+0xe2>
 801df34:	b33bbd2e 	.word	0xb33bbd2e
 801df38:	3fc90fdb 	.word	0x3fc90fdb
 801df3c:	7149f2ca 	.word	0x7149f2ca
 801df40:	3a4f7f04 	.word	0x3a4f7f04
 801df44:	3811ef08 	.word	0x3811ef08
 801df48:	3e2aaaab 	.word	0x3e2aaaab
 801df4c:	bd241146 	.word	0xbd241146
 801df50:	3e4e0aa8 	.word	0x3e4e0aa8
 801df54:	bea6b090 	.word	0xbea6b090
 801df58:	3d9dc62e 	.word	0x3d9dc62e
 801df5c:	bf303361 	.word	0xbf303361
 801df60:	4001572d 	.word	0x4001572d
 801df64:	c019d139 	.word	0xc019d139
 801df68:	3f799999 	.word	0x3f799999
 801df6c:	333bbd2e 	.word	0x333bbd2e
 801df70:	3f490fdb 	.word	0x3f490fdb

0801df74 <__ieee754_atan2f>:
 801df74:	ee10 2a90 	vmov	r2, s1
 801df78:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 801df7c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801df80:	b510      	push	{r4, lr}
 801df82:	eef0 7a40 	vmov.f32	s15, s0
 801df86:	d806      	bhi.n	801df96 <__ieee754_atan2f+0x22>
 801df88:	ee10 0a10 	vmov	r0, s0
 801df8c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801df90:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801df94:	d904      	bls.n	801dfa0 <__ieee754_atan2f+0x2c>
 801df96:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801df9a:	eeb0 0a67 	vmov.f32	s0, s15
 801df9e:	bd10      	pop	{r4, pc}
 801dfa0:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801dfa4:	d103      	bne.n	801dfae <__ieee754_atan2f+0x3a>
 801dfa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dfaa:	f000 bc83 	b.w	801e8b4 <atanf>
 801dfae:	1794      	asrs	r4, r2, #30
 801dfb0:	f004 0402 	and.w	r4, r4, #2
 801dfb4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801dfb8:	b943      	cbnz	r3, 801dfcc <__ieee754_atan2f+0x58>
 801dfba:	2c02      	cmp	r4, #2
 801dfbc:	d05e      	beq.n	801e07c <__ieee754_atan2f+0x108>
 801dfbe:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801e090 <__ieee754_atan2f+0x11c>
 801dfc2:	2c03      	cmp	r4, #3
 801dfc4:	bf08      	it	eq
 801dfc6:	eef0 7a47 	vmoveq.f32	s15, s14
 801dfca:	e7e6      	b.n	801df9a <__ieee754_atan2f+0x26>
 801dfcc:	b941      	cbnz	r1, 801dfe0 <__ieee754_atan2f+0x6c>
 801dfce:	eddf 7a31 	vldr	s15, [pc, #196]	@ 801e094 <__ieee754_atan2f+0x120>
 801dfd2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801e098 <__ieee754_atan2f+0x124>
 801dfd6:	2800      	cmp	r0, #0
 801dfd8:	bfb8      	it	lt
 801dfda:	eef0 7a47 	vmovlt.f32	s15, s14
 801dfde:	e7dc      	b.n	801df9a <__ieee754_atan2f+0x26>
 801dfe0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801dfe4:	d110      	bne.n	801e008 <__ieee754_atan2f+0x94>
 801dfe6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801dfea:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801dfee:	d107      	bne.n	801e000 <__ieee754_atan2f+0x8c>
 801dff0:	2c02      	cmp	r4, #2
 801dff2:	d846      	bhi.n	801e082 <__ieee754_atan2f+0x10e>
 801dff4:	4b29      	ldr	r3, [pc, #164]	@ (801e09c <__ieee754_atan2f+0x128>)
 801dff6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801dffa:	edd3 7a00 	vldr	s15, [r3]
 801dffe:	e7cc      	b.n	801df9a <__ieee754_atan2f+0x26>
 801e000:	2c02      	cmp	r4, #2
 801e002:	d841      	bhi.n	801e088 <__ieee754_atan2f+0x114>
 801e004:	4b26      	ldr	r3, [pc, #152]	@ (801e0a0 <__ieee754_atan2f+0x12c>)
 801e006:	e7f6      	b.n	801dff6 <__ieee754_atan2f+0x82>
 801e008:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801e00c:	d0df      	beq.n	801dfce <__ieee754_atan2f+0x5a>
 801e00e:	1a5b      	subs	r3, r3, r1
 801e010:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 801e014:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801e018:	da1a      	bge.n	801e050 <__ieee754_atan2f+0xdc>
 801e01a:	2a00      	cmp	r2, #0
 801e01c:	da01      	bge.n	801e022 <__ieee754_atan2f+0xae>
 801e01e:	313c      	adds	r1, #60	@ 0x3c
 801e020:	db19      	blt.n	801e056 <__ieee754_atan2f+0xe2>
 801e022:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801e026:	f7fe ff5d 	bl	801cee4 <fabsf>
 801e02a:	f000 fc43 	bl	801e8b4 <atanf>
 801e02e:	eef0 7a40 	vmov.f32	s15, s0
 801e032:	2c01      	cmp	r4, #1
 801e034:	d012      	beq.n	801e05c <__ieee754_atan2f+0xe8>
 801e036:	2c02      	cmp	r4, #2
 801e038:	d017      	beq.n	801e06a <__ieee754_atan2f+0xf6>
 801e03a:	2c00      	cmp	r4, #0
 801e03c:	d0ad      	beq.n	801df9a <__ieee754_atan2f+0x26>
 801e03e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 801e0a4 <__ieee754_atan2f+0x130>
 801e042:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e046:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 801e0a8 <__ieee754_atan2f+0x134>
 801e04a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e04e:	e7a4      	b.n	801df9a <__ieee754_atan2f+0x26>
 801e050:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801e094 <__ieee754_atan2f+0x120>
 801e054:	e7ed      	b.n	801e032 <__ieee754_atan2f+0xbe>
 801e056:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801e0ac <__ieee754_atan2f+0x138>
 801e05a:	e7ea      	b.n	801e032 <__ieee754_atan2f+0xbe>
 801e05c:	ee17 3a90 	vmov	r3, s15
 801e060:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801e064:	ee07 3a90 	vmov	s15, r3
 801e068:	e797      	b.n	801df9a <__ieee754_atan2f+0x26>
 801e06a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 801e0a4 <__ieee754_atan2f+0x130>
 801e06e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e072:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 801e0a8 <__ieee754_atan2f+0x134>
 801e076:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e07a:	e78e      	b.n	801df9a <__ieee754_atan2f+0x26>
 801e07c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 801e0a8 <__ieee754_atan2f+0x134>
 801e080:	e78b      	b.n	801df9a <__ieee754_atan2f+0x26>
 801e082:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 801e0b0 <__ieee754_atan2f+0x13c>
 801e086:	e788      	b.n	801df9a <__ieee754_atan2f+0x26>
 801e088:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801e0ac <__ieee754_atan2f+0x138>
 801e08c:	e785      	b.n	801df9a <__ieee754_atan2f+0x26>
 801e08e:	bf00      	nop
 801e090:	c0490fdb 	.word	0xc0490fdb
 801e094:	3fc90fdb 	.word	0x3fc90fdb
 801e098:	bfc90fdb 	.word	0xbfc90fdb
 801e09c:	08022874 	.word	0x08022874
 801e0a0:	08022868 	.word	0x08022868
 801e0a4:	33bbbd2e 	.word	0x33bbbd2e
 801e0a8:	40490fdb 	.word	0x40490fdb
 801e0ac:	00000000 	.word	0x00000000
 801e0b0:	3f490fdb 	.word	0x3f490fdb

0801e0b4 <__ieee754_powf>:
 801e0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e0b8:	ee10 4a90 	vmov	r4, s1
 801e0bc:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 801e0c0:	ed2d 8b02 	vpush	{d8}
 801e0c4:	ee10 6a10 	vmov	r6, s0
 801e0c8:	eeb0 8a40 	vmov.f32	s16, s0
 801e0cc:	eef0 8a60 	vmov.f32	s17, s1
 801e0d0:	d10c      	bne.n	801e0ec <__ieee754_powf+0x38>
 801e0d2:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 801e0d6:	0076      	lsls	r6, r6, #1
 801e0d8:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 801e0dc:	f240 829c 	bls.w	801e618 <__ieee754_powf+0x564>
 801e0e0:	ee38 0a28 	vadd.f32	s0, s16, s17
 801e0e4:	ecbd 8b02 	vpop	{d8}
 801e0e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e0ec:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 801e0f0:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 801e0f4:	d802      	bhi.n	801e0fc <__ieee754_powf+0x48>
 801e0f6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801e0fa:	d908      	bls.n	801e10e <__ieee754_powf+0x5a>
 801e0fc:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801e100:	d1ee      	bne.n	801e0e0 <__ieee754_powf+0x2c>
 801e102:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 801e106:	0064      	lsls	r4, r4, #1
 801e108:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 801e10c:	e7e6      	b.n	801e0dc <__ieee754_powf+0x28>
 801e10e:	2e00      	cmp	r6, #0
 801e110:	da1e      	bge.n	801e150 <__ieee754_powf+0x9c>
 801e112:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 801e116:	d22b      	bcs.n	801e170 <__ieee754_powf+0xbc>
 801e118:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801e11c:	d332      	bcc.n	801e184 <__ieee754_powf+0xd0>
 801e11e:	ea4f 53e9 	mov.w	r3, r9, asr #23
 801e122:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 801e126:	fa49 f503 	asr.w	r5, r9, r3
 801e12a:	fa05 f303 	lsl.w	r3, r5, r3
 801e12e:	454b      	cmp	r3, r9
 801e130:	d126      	bne.n	801e180 <__ieee754_powf+0xcc>
 801e132:	f005 0501 	and.w	r5, r5, #1
 801e136:	f1c5 0502 	rsb	r5, r5, #2
 801e13a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801e13e:	d122      	bne.n	801e186 <__ieee754_powf+0xd2>
 801e140:	2c00      	cmp	r4, #0
 801e142:	f280 826f 	bge.w	801e624 <__ieee754_powf+0x570>
 801e146:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801e14a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801e14e:	e7c9      	b.n	801e0e4 <__ieee754_powf+0x30>
 801e150:	2500      	movs	r5, #0
 801e152:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801e156:	d1f0      	bne.n	801e13a <__ieee754_powf+0x86>
 801e158:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 801e15c:	f000 825c 	beq.w	801e618 <__ieee754_powf+0x564>
 801e160:	d908      	bls.n	801e174 <__ieee754_powf+0xc0>
 801e162:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 801e4c4 <__ieee754_powf+0x410>
 801e166:	2c00      	cmp	r4, #0
 801e168:	bfa8      	it	ge
 801e16a:	eeb0 0a68 	vmovge.f32	s0, s17
 801e16e:	e7b9      	b.n	801e0e4 <__ieee754_powf+0x30>
 801e170:	2502      	movs	r5, #2
 801e172:	e7ee      	b.n	801e152 <__ieee754_powf+0x9e>
 801e174:	2c00      	cmp	r4, #0
 801e176:	f280 8252 	bge.w	801e61e <__ieee754_powf+0x56a>
 801e17a:	eeb1 0a68 	vneg.f32	s0, s17
 801e17e:	e7b1      	b.n	801e0e4 <__ieee754_powf+0x30>
 801e180:	2500      	movs	r5, #0
 801e182:	e7da      	b.n	801e13a <__ieee754_powf+0x86>
 801e184:	2500      	movs	r5, #0
 801e186:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801e18a:	d102      	bne.n	801e192 <__ieee754_powf+0xde>
 801e18c:	ee28 0a08 	vmul.f32	s0, s16, s16
 801e190:	e7a8      	b.n	801e0e4 <__ieee754_powf+0x30>
 801e192:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801e196:	d109      	bne.n	801e1ac <__ieee754_powf+0xf8>
 801e198:	2e00      	cmp	r6, #0
 801e19a:	db07      	blt.n	801e1ac <__ieee754_powf+0xf8>
 801e19c:	eeb0 0a48 	vmov.f32	s0, s16
 801e1a0:	ecbd 8b02 	vpop	{d8}
 801e1a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e1a8:	f000 bce4 	b.w	801eb74 <__ieee754_sqrtf>
 801e1ac:	eeb0 0a48 	vmov.f32	s0, s16
 801e1b0:	f7fe fe98 	bl	801cee4 <fabsf>
 801e1b4:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 801e1b8:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801e1bc:	4647      	mov	r7, r8
 801e1be:	d002      	beq.n	801e1c6 <__ieee754_powf+0x112>
 801e1c0:	f1b8 0f00 	cmp.w	r8, #0
 801e1c4:	d117      	bne.n	801e1f6 <__ieee754_powf+0x142>
 801e1c6:	2c00      	cmp	r4, #0
 801e1c8:	bfbc      	itt	lt
 801e1ca:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801e1ce:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801e1d2:	2e00      	cmp	r6, #0
 801e1d4:	da86      	bge.n	801e0e4 <__ieee754_powf+0x30>
 801e1d6:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 801e1da:	ea58 0805 	orrs.w	r8, r8, r5
 801e1de:	d104      	bne.n	801e1ea <__ieee754_powf+0x136>
 801e1e0:	ee70 7a40 	vsub.f32	s15, s0, s0
 801e1e4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801e1e8:	e77c      	b.n	801e0e4 <__ieee754_powf+0x30>
 801e1ea:	2d01      	cmp	r5, #1
 801e1ec:	f47f af7a 	bne.w	801e0e4 <__ieee754_powf+0x30>
 801e1f0:	eeb1 0a40 	vneg.f32	s0, s0
 801e1f4:	e776      	b.n	801e0e4 <__ieee754_powf+0x30>
 801e1f6:	0ff0      	lsrs	r0, r6, #31
 801e1f8:	3801      	subs	r0, #1
 801e1fa:	ea55 0300 	orrs.w	r3, r5, r0
 801e1fe:	d104      	bne.n	801e20a <__ieee754_powf+0x156>
 801e200:	ee38 8a48 	vsub.f32	s16, s16, s16
 801e204:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801e208:	e76c      	b.n	801e0e4 <__ieee754_powf+0x30>
 801e20a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801e20e:	d973      	bls.n	801e2f8 <__ieee754_powf+0x244>
 801e210:	4bad      	ldr	r3, [pc, #692]	@ (801e4c8 <__ieee754_powf+0x414>)
 801e212:	4598      	cmp	r8, r3
 801e214:	d808      	bhi.n	801e228 <__ieee754_powf+0x174>
 801e216:	2c00      	cmp	r4, #0
 801e218:	da0b      	bge.n	801e232 <__ieee754_powf+0x17e>
 801e21a:	2000      	movs	r0, #0
 801e21c:	ecbd 8b02 	vpop	{d8}
 801e220:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e224:	f000 bca0 	b.w	801eb68 <__math_oflowf>
 801e228:	4ba8      	ldr	r3, [pc, #672]	@ (801e4cc <__ieee754_powf+0x418>)
 801e22a:	4598      	cmp	r8, r3
 801e22c:	d908      	bls.n	801e240 <__ieee754_powf+0x18c>
 801e22e:	2c00      	cmp	r4, #0
 801e230:	dcf3      	bgt.n	801e21a <__ieee754_powf+0x166>
 801e232:	2000      	movs	r0, #0
 801e234:	ecbd 8b02 	vpop	{d8}
 801e238:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e23c:	f000 bc8e 	b.w	801eb5c <__math_uflowf>
 801e240:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801e244:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e248:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 801e4d0 <__ieee754_powf+0x41c>
 801e24c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801e250:	eee0 6a67 	vfms.f32	s13, s0, s15
 801e254:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801e258:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801e25c:	ee20 7a00 	vmul.f32	s14, s0, s0
 801e260:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e264:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 801e4d4 <__ieee754_powf+0x420>
 801e268:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801e26c:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 801e4d8 <__ieee754_powf+0x424>
 801e270:	eee0 7a07 	vfma.f32	s15, s0, s14
 801e274:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 801e4dc <__ieee754_powf+0x428>
 801e278:	eef0 6a67 	vmov.f32	s13, s15
 801e27c:	eee0 6a07 	vfma.f32	s13, s0, s14
 801e280:	ee16 3a90 	vmov	r3, s13
 801e284:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801e288:	f023 030f 	bic.w	r3, r3, #15
 801e28c:	ee06 3a90 	vmov	s13, r3
 801e290:	eee0 6a47 	vfms.f32	s13, s0, s14
 801e294:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e298:	3d01      	subs	r5, #1
 801e29a:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 801e29e:	4305      	orrs	r5, r0
 801e2a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e2a4:	f024 040f 	bic.w	r4, r4, #15
 801e2a8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 801e2ac:	bf18      	it	ne
 801e2ae:	eeb0 8a47 	vmovne.f32	s16, s14
 801e2b2:	ee07 4a10 	vmov	s14, r4
 801e2b6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801e2ba:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801e2be:	ee07 3a90 	vmov	s15, r3
 801e2c2:	eee7 0a27 	vfma.f32	s1, s14, s15
 801e2c6:	ee07 4a10 	vmov	s14, r4
 801e2ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e2ce:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801e2d2:	ee17 1a10 	vmov	r1, s14
 801e2d6:	2900      	cmp	r1, #0
 801e2d8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e2dc:	f340 80dd 	ble.w	801e49a <__ieee754_powf+0x3e6>
 801e2e0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 801e2e4:	f240 80ca 	bls.w	801e47c <__ieee754_powf+0x3c8>
 801e2e8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801e2ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2f0:	bf4c      	ite	mi
 801e2f2:	2001      	movmi	r0, #1
 801e2f4:	2000      	movpl	r0, #0
 801e2f6:	e791      	b.n	801e21c <__ieee754_powf+0x168>
 801e2f8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801e2fc:	bf01      	itttt	eq
 801e2fe:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 801e4e0 <__ieee754_powf+0x42c>
 801e302:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801e306:	f06f 0317 	mvneq.w	r3, #23
 801e30a:	ee17 7a90 	vmoveq	r7, s15
 801e30e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 801e312:	bf18      	it	ne
 801e314:	2300      	movne	r3, #0
 801e316:	3a7f      	subs	r2, #127	@ 0x7f
 801e318:	441a      	add	r2, r3
 801e31a:	4b72      	ldr	r3, [pc, #456]	@ (801e4e4 <__ieee754_powf+0x430>)
 801e31c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 801e320:	429f      	cmp	r7, r3
 801e322:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 801e326:	dd06      	ble.n	801e336 <__ieee754_powf+0x282>
 801e328:	4b6f      	ldr	r3, [pc, #444]	@ (801e4e8 <__ieee754_powf+0x434>)
 801e32a:	429f      	cmp	r7, r3
 801e32c:	f340 80a4 	ble.w	801e478 <__ieee754_powf+0x3c4>
 801e330:	3201      	adds	r2, #1
 801e332:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 801e336:	2600      	movs	r6, #0
 801e338:	4b6c      	ldr	r3, [pc, #432]	@ (801e4ec <__ieee754_powf+0x438>)
 801e33a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801e33e:	ee07 1a10 	vmov	s14, r1
 801e342:	edd3 5a00 	vldr	s11, [r3]
 801e346:	4b6a      	ldr	r3, [pc, #424]	@ (801e4f0 <__ieee754_powf+0x43c>)
 801e348:	ee75 7a87 	vadd.f32	s15, s11, s14
 801e34c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e350:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 801e354:	1049      	asrs	r1, r1, #1
 801e356:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801e35a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801e35e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 801e362:	ee37 6a65 	vsub.f32	s12, s14, s11
 801e366:	ee07 1a90 	vmov	s15, r1
 801e36a:	ee26 5a24 	vmul.f32	s10, s12, s9
 801e36e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801e372:	ee15 7a10 	vmov	r7, s10
 801e376:	401f      	ands	r7, r3
 801e378:	ee06 7a90 	vmov	s13, r7
 801e37c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801e380:	ee37 7a65 	vsub.f32	s14, s14, s11
 801e384:	ee65 7a05 	vmul.f32	s15, s10, s10
 801e388:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801e38c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 801e4f4 <__ieee754_powf+0x440>
 801e390:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 801e4f8 <__ieee754_powf+0x444>
 801e394:	eee7 5a87 	vfma.f32	s11, s15, s14
 801e398:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801e4fc <__ieee754_powf+0x448>
 801e39c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801e3a0:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 801e4d0 <__ieee754_powf+0x41c>
 801e3a4:	eee7 5a27 	vfma.f32	s11, s14, s15
 801e3a8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 801e500 <__ieee754_powf+0x44c>
 801e3ac:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801e3b0:	eddf 5a54 	vldr	s11, [pc, #336]	@ 801e504 <__ieee754_powf+0x450>
 801e3b4:	ee26 6a24 	vmul.f32	s12, s12, s9
 801e3b8:	eee7 5a27 	vfma.f32	s11, s14, s15
 801e3bc:	ee35 7a26 	vadd.f32	s14, s10, s13
 801e3c0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801e3c4:	ee27 7a06 	vmul.f32	s14, s14, s12
 801e3c8:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801e3cc:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801e3d0:	eef0 5a67 	vmov.f32	s11, s15
 801e3d4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 801e3d8:	ee75 5a87 	vadd.f32	s11, s11, s14
 801e3dc:	ee15 1a90 	vmov	r1, s11
 801e3e0:	4019      	ands	r1, r3
 801e3e2:	ee05 1a90 	vmov	s11, r1
 801e3e6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801e3ea:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801e3ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e3f2:	ee67 7a85 	vmul.f32	s15, s15, s10
 801e3f6:	eee6 7a25 	vfma.f32	s15, s12, s11
 801e3fa:	eeb0 6a67 	vmov.f32	s12, s15
 801e3fe:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801e402:	ee16 1a10 	vmov	r1, s12
 801e406:	4019      	ands	r1, r3
 801e408:	ee06 1a10 	vmov	s12, r1
 801e40c:	eeb0 7a46 	vmov.f32	s14, s12
 801e410:	eea6 7ae5 	vfms.f32	s14, s13, s11
 801e414:	493c      	ldr	r1, [pc, #240]	@ (801e508 <__ieee754_powf+0x454>)
 801e416:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801e41a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e41e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801e50c <__ieee754_powf+0x458>
 801e422:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801e510 <__ieee754_powf+0x45c>
 801e426:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e42a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 801e514 <__ieee754_powf+0x460>
 801e42e:	eee6 7a07 	vfma.f32	s15, s12, s14
 801e432:	ed91 7a00 	vldr	s14, [r1]
 801e436:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e43a:	ee07 2a10 	vmov	s14, r2
 801e43e:	eef0 6a67 	vmov.f32	s13, s15
 801e442:	4a35      	ldr	r2, [pc, #212]	@ (801e518 <__ieee754_powf+0x464>)
 801e444:	eee6 6a25 	vfma.f32	s13, s12, s11
 801e448:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 801e44c:	ed92 5a00 	vldr	s10, [r2]
 801e450:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e454:	ee76 6a85 	vadd.f32	s13, s13, s10
 801e458:	ee76 6a87 	vadd.f32	s13, s13, s14
 801e45c:	ee16 2a90 	vmov	r2, s13
 801e460:	4013      	ands	r3, r2
 801e462:	ee06 3a90 	vmov	s13, r3
 801e466:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801e46a:	ee37 7a45 	vsub.f32	s14, s14, s10
 801e46e:	eea6 7a65 	vfms.f32	s14, s12, s11
 801e472:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e476:	e70f      	b.n	801e298 <__ieee754_powf+0x1e4>
 801e478:	2601      	movs	r6, #1
 801e47a:	e75d      	b.n	801e338 <__ieee754_powf+0x284>
 801e47c:	d152      	bne.n	801e524 <__ieee754_powf+0x470>
 801e47e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801e51c <__ieee754_powf+0x468>
 801e482:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e486:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801e48a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801e48e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e492:	f73f af29 	bgt.w	801e2e8 <__ieee754_powf+0x234>
 801e496:	2386      	movs	r3, #134	@ 0x86
 801e498:	e048      	b.n	801e52c <__ieee754_powf+0x478>
 801e49a:	4a21      	ldr	r2, [pc, #132]	@ (801e520 <__ieee754_powf+0x46c>)
 801e49c:	4293      	cmp	r3, r2
 801e49e:	d907      	bls.n	801e4b0 <__ieee754_powf+0x3fc>
 801e4a0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801e4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4a8:	bf4c      	ite	mi
 801e4aa:	2001      	movmi	r0, #1
 801e4ac:	2000      	movpl	r0, #0
 801e4ae:	e6c1      	b.n	801e234 <__ieee754_powf+0x180>
 801e4b0:	d138      	bne.n	801e524 <__ieee754_powf+0x470>
 801e4b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e4b6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801e4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4be:	dbea      	blt.n	801e496 <__ieee754_powf+0x3e2>
 801e4c0:	e7ee      	b.n	801e4a0 <__ieee754_powf+0x3ec>
 801e4c2:	bf00      	nop
 801e4c4:	00000000 	.word	0x00000000
 801e4c8:	3f7ffff3 	.word	0x3f7ffff3
 801e4cc:	3f800007 	.word	0x3f800007
 801e4d0:	3eaaaaab 	.word	0x3eaaaaab
 801e4d4:	3fb8aa3b 	.word	0x3fb8aa3b
 801e4d8:	36eca570 	.word	0x36eca570
 801e4dc:	3fb8aa00 	.word	0x3fb8aa00
 801e4e0:	4b800000 	.word	0x4b800000
 801e4e4:	001cc471 	.word	0x001cc471
 801e4e8:	005db3d6 	.word	0x005db3d6
 801e4ec:	08022890 	.word	0x08022890
 801e4f0:	fffff000 	.word	0xfffff000
 801e4f4:	3e6c3255 	.word	0x3e6c3255
 801e4f8:	3e53f142 	.word	0x3e53f142
 801e4fc:	3e8ba305 	.word	0x3e8ba305
 801e500:	3edb6db7 	.word	0x3edb6db7
 801e504:	3f19999a 	.word	0x3f19999a
 801e508:	08022880 	.word	0x08022880
 801e50c:	3f76384f 	.word	0x3f76384f
 801e510:	3f763800 	.word	0x3f763800
 801e514:	369dc3a0 	.word	0x369dc3a0
 801e518:	08022888 	.word	0x08022888
 801e51c:	3338aa3c 	.word	0x3338aa3c
 801e520:	43160000 	.word	0x43160000
 801e524:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 801e528:	d971      	bls.n	801e60e <__ieee754_powf+0x55a>
 801e52a:	15db      	asrs	r3, r3, #23
 801e52c:	3b7e      	subs	r3, #126	@ 0x7e
 801e52e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801e532:	4118      	asrs	r0, r3
 801e534:	4408      	add	r0, r1
 801e536:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801e53a:	4a3c      	ldr	r2, [pc, #240]	@ (801e62c <__ieee754_powf+0x578>)
 801e53c:	3b7f      	subs	r3, #127	@ 0x7f
 801e53e:	411a      	asrs	r2, r3
 801e540:	4002      	ands	r2, r0
 801e542:	ee07 2a10 	vmov	s14, r2
 801e546:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801e54a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801e54e:	f1c3 0317 	rsb	r3, r3, #23
 801e552:	4118      	asrs	r0, r3
 801e554:	2900      	cmp	r1, #0
 801e556:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e55a:	bfb8      	it	lt
 801e55c:	4240      	neglt	r0, r0
 801e55e:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801e562:	eddf 6a33 	vldr	s13, [pc, #204]	@ 801e630 <__ieee754_powf+0x57c>
 801e566:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 801e634 <__ieee754_powf+0x580>
 801e56a:	ee17 3a10 	vmov	r3, s14
 801e56e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801e572:	f023 030f 	bic.w	r3, r3, #15
 801e576:	ee07 3a10 	vmov	s14, r3
 801e57a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e57e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801e582:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801e586:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 801e638 <__ieee754_powf+0x584>
 801e58a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e58e:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801e592:	eef0 6a67 	vmov.f32	s13, s15
 801e596:	eee7 6a06 	vfma.f32	s13, s14, s12
 801e59a:	eef0 5a66 	vmov.f32	s11, s13
 801e59e:	eee7 5a46 	vfms.f32	s11, s14, s12
 801e5a2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801e5a6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801e5aa:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 801e63c <__ieee754_powf+0x588>
 801e5ae:	eddf 5a24 	vldr	s11, [pc, #144]	@ 801e640 <__ieee754_powf+0x58c>
 801e5b2:	eea7 6a25 	vfma.f32	s12, s14, s11
 801e5b6:	eddf 5a23 	vldr	s11, [pc, #140]	@ 801e644 <__ieee754_powf+0x590>
 801e5ba:	eee6 5a07 	vfma.f32	s11, s12, s14
 801e5be:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 801e648 <__ieee754_powf+0x594>
 801e5c2:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e5c6:	eddf 5a21 	vldr	s11, [pc, #132]	@ 801e64c <__ieee754_powf+0x598>
 801e5ca:	eee6 5a07 	vfma.f32	s11, s12, s14
 801e5ce:	eeb0 6a66 	vmov.f32	s12, s13
 801e5d2:	eea5 6ac7 	vfms.f32	s12, s11, s14
 801e5d6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801e5da:	ee66 5a86 	vmul.f32	s11, s13, s12
 801e5de:	ee36 6a47 	vsub.f32	s12, s12, s14
 801e5e2:	eee6 7aa7 	vfma.f32	s15, s13, s15
 801e5e6:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801e5ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e5ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e5f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e5f6:	ee10 3a10 	vmov	r3, s0
 801e5fa:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801e5fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801e602:	da06      	bge.n	801e612 <__ieee754_powf+0x55e>
 801e604:	f000 fa2a 	bl	801ea5c <scalbnf>
 801e608:	ee20 0a08 	vmul.f32	s0, s0, s16
 801e60c:	e56a      	b.n	801e0e4 <__ieee754_powf+0x30>
 801e60e:	2000      	movs	r0, #0
 801e610:	e7a5      	b.n	801e55e <__ieee754_powf+0x4aa>
 801e612:	ee00 3a10 	vmov	s0, r3
 801e616:	e7f7      	b.n	801e608 <__ieee754_powf+0x554>
 801e618:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801e61c:	e562      	b.n	801e0e4 <__ieee754_powf+0x30>
 801e61e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 801e650 <__ieee754_powf+0x59c>
 801e622:	e55f      	b.n	801e0e4 <__ieee754_powf+0x30>
 801e624:	eeb0 0a48 	vmov.f32	s0, s16
 801e628:	e55c      	b.n	801e0e4 <__ieee754_powf+0x30>
 801e62a:	bf00      	nop
 801e62c:	ff800000 	.word	0xff800000
 801e630:	3f317218 	.word	0x3f317218
 801e634:	3f317200 	.word	0x3f317200
 801e638:	35bfbe8c 	.word	0x35bfbe8c
 801e63c:	b5ddea0e 	.word	0xb5ddea0e
 801e640:	3331bb4c 	.word	0x3331bb4c
 801e644:	388ab355 	.word	0x388ab355
 801e648:	bb360b61 	.word	0xbb360b61
 801e64c:	3e2aaaab 	.word	0x3e2aaaab
 801e650:	00000000 	.word	0x00000000

0801e654 <__ieee754_rem_pio2f>:
 801e654:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e656:	ee10 6a10 	vmov	r6, s0
 801e65a:	4b88      	ldr	r3, [pc, #544]	@ (801e87c <__ieee754_rem_pio2f+0x228>)
 801e65c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801e660:	429d      	cmp	r5, r3
 801e662:	b087      	sub	sp, #28
 801e664:	4604      	mov	r4, r0
 801e666:	d805      	bhi.n	801e674 <__ieee754_rem_pio2f+0x20>
 801e668:	2300      	movs	r3, #0
 801e66a:	ed80 0a00 	vstr	s0, [r0]
 801e66e:	6043      	str	r3, [r0, #4]
 801e670:	2000      	movs	r0, #0
 801e672:	e022      	b.n	801e6ba <__ieee754_rem_pio2f+0x66>
 801e674:	4b82      	ldr	r3, [pc, #520]	@ (801e880 <__ieee754_rem_pio2f+0x22c>)
 801e676:	429d      	cmp	r5, r3
 801e678:	d83a      	bhi.n	801e6f0 <__ieee754_rem_pio2f+0x9c>
 801e67a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801e67e:	2e00      	cmp	r6, #0
 801e680:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801e884 <__ieee754_rem_pio2f+0x230>
 801e684:	4a80      	ldr	r2, [pc, #512]	@ (801e888 <__ieee754_rem_pio2f+0x234>)
 801e686:	f023 030f 	bic.w	r3, r3, #15
 801e68a:	dd18      	ble.n	801e6be <__ieee754_rem_pio2f+0x6a>
 801e68c:	4293      	cmp	r3, r2
 801e68e:	ee70 7a47 	vsub.f32	s15, s0, s14
 801e692:	bf09      	itett	eq
 801e694:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801e88c <__ieee754_rem_pio2f+0x238>
 801e698:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801e890 <__ieee754_rem_pio2f+0x23c>
 801e69c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801e894 <__ieee754_rem_pio2f+0x240>
 801e6a0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801e6a4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801e6a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e6ac:	ed80 7a00 	vstr	s14, [r0]
 801e6b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e6b4:	edc0 7a01 	vstr	s15, [r0, #4]
 801e6b8:	2001      	movs	r0, #1
 801e6ba:	b007      	add	sp, #28
 801e6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e6be:	4293      	cmp	r3, r2
 801e6c0:	ee70 7a07 	vadd.f32	s15, s0, s14
 801e6c4:	bf09      	itett	eq
 801e6c6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801e88c <__ieee754_rem_pio2f+0x238>
 801e6ca:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801e890 <__ieee754_rem_pio2f+0x23c>
 801e6ce:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801e894 <__ieee754_rem_pio2f+0x240>
 801e6d2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801e6d6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801e6da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e6de:	ed80 7a00 	vstr	s14, [r0]
 801e6e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e6e6:	edc0 7a01 	vstr	s15, [r0, #4]
 801e6ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e6ee:	e7e4      	b.n	801e6ba <__ieee754_rem_pio2f+0x66>
 801e6f0:	4b69      	ldr	r3, [pc, #420]	@ (801e898 <__ieee754_rem_pio2f+0x244>)
 801e6f2:	429d      	cmp	r5, r3
 801e6f4:	d873      	bhi.n	801e7de <__ieee754_rem_pio2f+0x18a>
 801e6f6:	f7fe fbf5 	bl	801cee4 <fabsf>
 801e6fa:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801e89c <__ieee754_rem_pio2f+0x248>
 801e6fe:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801e702:	eee0 7a07 	vfma.f32	s15, s0, s14
 801e706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e70a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e70e:	ee17 0a90 	vmov	r0, s15
 801e712:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801e884 <__ieee754_rem_pio2f+0x230>
 801e716:	eea7 0a67 	vfms.f32	s0, s14, s15
 801e71a:	281f      	cmp	r0, #31
 801e71c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801e890 <__ieee754_rem_pio2f+0x23c>
 801e720:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e724:	eeb1 6a47 	vneg.f32	s12, s14
 801e728:	ee70 6a67 	vsub.f32	s13, s0, s15
 801e72c:	ee16 1a90 	vmov	r1, s13
 801e730:	dc09      	bgt.n	801e746 <__ieee754_rem_pio2f+0xf2>
 801e732:	4a5b      	ldr	r2, [pc, #364]	@ (801e8a0 <__ieee754_rem_pio2f+0x24c>)
 801e734:	1e47      	subs	r7, r0, #1
 801e736:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801e73a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801e73e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801e742:	4293      	cmp	r3, r2
 801e744:	d107      	bne.n	801e756 <__ieee754_rem_pio2f+0x102>
 801e746:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801e74a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801e74e:	2a08      	cmp	r2, #8
 801e750:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801e754:	dc14      	bgt.n	801e780 <__ieee754_rem_pio2f+0x12c>
 801e756:	6021      	str	r1, [r4, #0]
 801e758:	ed94 7a00 	vldr	s14, [r4]
 801e75c:	ee30 0a47 	vsub.f32	s0, s0, s14
 801e760:	2e00      	cmp	r6, #0
 801e762:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e766:	ed84 0a01 	vstr	s0, [r4, #4]
 801e76a:	daa6      	bge.n	801e6ba <__ieee754_rem_pio2f+0x66>
 801e76c:	eeb1 7a47 	vneg.f32	s14, s14
 801e770:	eeb1 0a40 	vneg.f32	s0, s0
 801e774:	ed84 7a00 	vstr	s14, [r4]
 801e778:	ed84 0a01 	vstr	s0, [r4, #4]
 801e77c:	4240      	negs	r0, r0
 801e77e:	e79c      	b.n	801e6ba <__ieee754_rem_pio2f+0x66>
 801e780:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801e88c <__ieee754_rem_pio2f+0x238>
 801e784:	eef0 6a40 	vmov.f32	s13, s0
 801e788:	eee6 6a25 	vfma.f32	s13, s12, s11
 801e78c:	ee70 7a66 	vsub.f32	s15, s0, s13
 801e790:	eee6 7a25 	vfma.f32	s15, s12, s11
 801e794:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801e894 <__ieee754_rem_pio2f+0x240>
 801e798:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801e79c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801e7a0:	ee15 2a90 	vmov	r2, s11
 801e7a4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801e7a8:	1a5b      	subs	r3, r3, r1
 801e7aa:	2b19      	cmp	r3, #25
 801e7ac:	dc04      	bgt.n	801e7b8 <__ieee754_rem_pio2f+0x164>
 801e7ae:	edc4 5a00 	vstr	s11, [r4]
 801e7b2:	eeb0 0a66 	vmov.f32	s0, s13
 801e7b6:	e7cf      	b.n	801e758 <__ieee754_rem_pio2f+0x104>
 801e7b8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801e8a4 <__ieee754_rem_pio2f+0x250>
 801e7bc:	eeb0 0a66 	vmov.f32	s0, s13
 801e7c0:	eea6 0a25 	vfma.f32	s0, s12, s11
 801e7c4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801e7c8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801e8a8 <__ieee754_rem_pio2f+0x254>
 801e7cc:	eee6 7a25 	vfma.f32	s15, s12, s11
 801e7d0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801e7d4:	ee30 7a67 	vsub.f32	s14, s0, s15
 801e7d8:	ed84 7a00 	vstr	s14, [r4]
 801e7dc:	e7bc      	b.n	801e758 <__ieee754_rem_pio2f+0x104>
 801e7de:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801e7e2:	d306      	bcc.n	801e7f2 <__ieee754_rem_pio2f+0x19e>
 801e7e4:	ee70 7a40 	vsub.f32	s15, s0, s0
 801e7e8:	edc0 7a01 	vstr	s15, [r0, #4]
 801e7ec:	edc0 7a00 	vstr	s15, [r0]
 801e7f0:	e73e      	b.n	801e670 <__ieee754_rem_pio2f+0x1c>
 801e7f2:	15ea      	asrs	r2, r5, #23
 801e7f4:	3a86      	subs	r2, #134	@ 0x86
 801e7f6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801e7fa:	ee07 3a90 	vmov	s15, r3
 801e7fe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801e802:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801e8ac <__ieee754_rem_pio2f+0x258>
 801e806:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e80a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e80e:	ed8d 7a03 	vstr	s14, [sp, #12]
 801e812:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e816:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801e81a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e81e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e822:	ed8d 7a04 	vstr	s14, [sp, #16]
 801e826:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e82a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801e82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e832:	edcd 7a05 	vstr	s15, [sp, #20]
 801e836:	d11e      	bne.n	801e876 <__ieee754_rem_pio2f+0x222>
 801e838:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801e83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e840:	bf0c      	ite	eq
 801e842:	2301      	moveq	r3, #1
 801e844:	2302      	movne	r3, #2
 801e846:	491a      	ldr	r1, [pc, #104]	@ (801e8b0 <__ieee754_rem_pio2f+0x25c>)
 801e848:	9101      	str	r1, [sp, #4]
 801e84a:	2102      	movs	r1, #2
 801e84c:	9100      	str	r1, [sp, #0]
 801e84e:	a803      	add	r0, sp, #12
 801e850:	4621      	mov	r1, r4
 801e852:	f000 f993 	bl	801eb7c <__kernel_rem_pio2f>
 801e856:	2e00      	cmp	r6, #0
 801e858:	f6bf af2f 	bge.w	801e6ba <__ieee754_rem_pio2f+0x66>
 801e85c:	edd4 7a00 	vldr	s15, [r4]
 801e860:	eef1 7a67 	vneg.f32	s15, s15
 801e864:	edc4 7a00 	vstr	s15, [r4]
 801e868:	edd4 7a01 	vldr	s15, [r4, #4]
 801e86c:	eef1 7a67 	vneg.f32	s15, s15
 801e870:	edc4 7a01 	vstr	s15, [r4, #4]
 801e874:	e782      	b.n	801e77c <__ieee754_rem_pio2f+0x128>
 801e876:	2303      	movs	r3, #3
 801e878:	e7e5      	b.n	801e846 <__ieee754_rem_pio2f+0x1f2>
 801e87a:	bf00      	nop
 801e87c:	3f490fd8 	.word	0x3f490fd8
 801e880:	4016cbe3 	.word	0x4016cbe3
 801e884:	3fc90f80 	.word	0x3fc90f80
 801e888:	3fc90fd0 	.word	0x3fc90fd0
 801e88c:	37354400 	.word	0x37354400
 801e890:	37354443 	.word	0x37354443
 801e894:	2e85a308 	.word	0x2e85a308
 801e898:	43490f80 	.word	0x43490f80
 801e89c:	3f22f984 	.word	0x3f22f984
 801e8a0:	08022898 	.word	0x08022898
 801e8a4:	2e85a300 	.word	0x2e85a300
 801e8a8:	248d3132 	.word	0x248d3132
 801e8ac:	43800000 	.word	0x43800000
 801e8b0:	08022918 	.word	0x08022918

0801e8b4 <atanf>:
 801e8b4:	b538      	push	{r3, r4, r5, lr}
 801e8b6:	ee10 5a10 	vmov	r5, s0
 801e8ba:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801e8be:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801e8c2:	eef0 7a40 	vmov.f32	s15, s0
 801e8c6:	d310      	bcc.n	801e8ea <atanf+0x36>
 801e8c8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801e8cc:	d904      	bls.n	801e8d8 <atanf+0x24>
 801e8ce:	ee70 7a00 	vadd.f32	s15, s0, s0
 801e8d2:	eeb0 0a67 	vmov.f32	s0, s15
 801e8d6:	bd38      	pop	{r3, r4, r5, pc}
 801e8d8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 801ea10 <atanf+0x15c>
 801e8dc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 801ea14 <atanf+0x160>
 801e8e0:	2d00      	cmp	r5, #0
 801e8e2:	bfc8      	it	gt
 801e8e4:	eef0 7a47 	vmovgt.f32	s15, s14
 801e8e8:	e7f3      	b.n	801e8d2 <atanf+0x1e>
 801e8ea:	4b4b      	ldr	r3, [pc, #300]	@ (801ea18 <atanf+0x164>)
 801e8ec:	429c      	cmp	r4, r3
 801e8ee:	d810      	bhi.n	801e912 <atanf+0x5e>
 801e8f0:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801e8f4:	d20a      	bcs.n	801e90c <atanf+0x58>
 801e8f6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801ea1c <atanf+0x168>
 801e8fa:	ee30 7a07 	vadd.f32	s14, s0, s14
 801e8fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e902:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801e906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e90a:	dce2      	bgt.n	801e8d2 <atanf+0x1e>
 801e90c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e910:	e013      	b.n	801e93a <atanf+0x86>
 801e912:	f7fe fae7 	bl	801cee4 <fabsf>
 801e916:	4b42      	ldr	r3, [pc, #264]	@ (801ea20 <atanf+0x16c>)
 801e918:	429c      	cmp	r4, r3
 801e91a:	d84f      	bhi.n	801e9bc <atanf+0x108>
 801e91c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 801e920:	429c      	cmp	r4, r3
 801e922:	d841      	bhi.n	801e9a8 <atanf+0xf4>
 801e924:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801e928:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801e92c:	eea0 7a27 	vfma.f32	s14, s0, s15
 801e930:	2300      	movs	r3, #0
 801e932:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e936:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e93a:	1c5a      	adds	r2, r3, #1
 801e93c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801e940:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 801ea24 <atanf+0x170>
 801e944:	eddf 5a38 	vldr	s11, [pc, #224]	@ 801ea28 <atanf+0x174>
 801e948:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 801ea2c <atanf+0x178>
 801e94c:	ee66 6a06 	vmul.f32	s13, s12, s12
 801e950:	eee6 5a87 	vfma.f32	s11, s13, s14
 801e954:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 801ea30 <atanf+0x17c>
 801e958:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801e95c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 801ea34 <atanf+0x180>
 801e960:	eee7 5a26 	vfma.f32	s11, s14, s13
 801e964:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801ea38 <atanf+0x184>
 801e968:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801e96c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801ea3c <atanf+0x188>
 801e970:	eee7 5a26 	vfma.f32	s11, s14, s13
 801e974:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 801ea40 <atanf+0x18c>
 801e978:	eea6 5a87 	vfma.f32	s10, s13, s14
 801e97c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801ea44 <atanf+0x190>
 801e980:	eea5 7a26 	vfma.f32	s14, s10, s13
 801e984:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 801ea48 <atanf+0x194>
 801e988:	eea7 5a26 	vfma.f32	s10, s14, s13
 801e98c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 801ea4c <atanf+0x198>
 801e990:	eea5 7a26 	vfma.f32	s14, s10, s13
 801e994:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e998:	eea5 7a86 	vfma.f32	s14, s11, s12
 801e99c:	ee27 7a87 	vmul.f32	s14, s15, s14
 801e9a0:	d121      	bne.n	801e9e6 <atanf+0x132>
 801e9a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e9a6:	e794      	b.n	801e8d2 <atanf+0x1e>
 801e9a8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801e9ac:	ee30 7a67 	vsub.f32	s14, s0, s15
 801e9b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e9b4:	2301      	movs	r3, #1
 801e9b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e9ba:	e7be      	b.n	801e93a <atanf+0x86>
 801e9bc:	4b24      	ldr	r3, [pc, #144]	@ (801ea50 <atanf+0x19c>)
 801e9be:	429c      	cmp	r4, r3
 801e9c0:	d80b      	bhi.n	801e9da <atanf+0x126>
 801e9c2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801e9c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e9ca:	eea0 7a27 	vfma.f32	s14, s0, s15
 801e9ce:	2302      	movs	r3, #2
 801e9d0:	ee70 6a67 	vsub.f32	s13, s0, s15
 801e9d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e9d8:	e7af      	b.n	801e93a <atanf+0x86>
 801e9da:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801e9de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e9e2:	2303      	movs	r3, #3
 801e9e4:	e7a9      	b.n	801e93a <atanf+0x86>
 801e9e6:	4a1b      	ldr	r2, [pc, #108]	@ (801ea54 <atanf+0x1a0>)
 801e9e8:	491b      	ldr	r1, [pc, #108]	@ (801ea58 <atanf+0x1a4>)
 801e9ea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801e9ee:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e9f2:	edd3 6a00 	vldr	s13, [r3]
 801e9f6:	ee37 7a66 	vsub.f32	s14, s14, s13
 801e9fa:	2d00      	cmp	r5, #0
 801e9fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ea00:	edd2 7a00 	vldr	s15, [r2]
 801ea04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ea08:	bfb8      	it	lt
 801ea0a:	eef1 7a67 	vneglt.f32	s15, s15
 801ea0e:	e760      	b.n	801e8d2 <atanf+0x1e>
 801ea10:	bfc90fdb 	.word	0xbfc90fdb
 801ea14:	3fc90fdb 	.word	0x3fc90fdb
 801ea18:	3edfffff 	.word	0x3edfffff
 801ea1c:	7149f2ca 	.word	0x7149f2ca
 801ea20:	3f97ffff 	.word	0x3f97ffff
 801ea24:	3c8569d7 	.word	0x3c8569d7
 801ea28:	3d4bda59 	.word	0x3d4bda59
 801ea2c:	bd6ef16b 	.word	0xbd6ef16b
 801ea30:	3d886b35 	.word	0x3d886b35
 801ea34:	3dba2e6e 	.word	0x3dba2e6e
 801ea38:	3e124925 	.word	0x3e124925
 801ea3c:	3eaaaaab 	.word	0x3eaaaaab
 801ea40:	bd15a221 	.word	0xbd15a221
 801ea44:	bd9d8795 	.word	0xbd9d8795
 801ea48:	bde38e38 	.word	0xbde38e38
 801ea4c:	be4ccccd 	.word	0xbe4ccccd
 801ea50:	401bffff 	.word	0x401bffff
 801ea54:	08022c40 	.word	0x08022c40
 801ea58:	08022c30 	.word	0x08022c30

0801ea5c <scalbnf>:
 801ea5c:	ee10 3a10 	vmov	r3, s0
 801ea60:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801ea64:	d02b      	beq.n	801eabe <scalbnf+0x62>
 801ea66:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801ea6a:	d302      	bcc.n	801ea72 <scalbnf+0x16>
 801ea6c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ea70:	4770      	bx	lr
 801ea72:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801ea76:	d123      	bne.n	801eac0 <scalbnf+0x64>
 801ea78:	4b24      	ldr	r3, [pc, #144]	@ (801eb0c <scalbnf+0xb0>)
 801ea7a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801eb10 <scalbnf+0xb4>
 801ea7e:	4298      	cmp	r0, r3
 801ea80:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ea84:	db17      	blt.n	801eab6 <scalbnf+0x5a>
 801ea86:	ee10 3a10 	vmov	r3, s0
 801ea8a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ea8e:	3a19      	subs	r2, #25
 801ea90:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801ea94:	4288      	cmp	r0, r1
 801ea96:	dd15      	ble.n	801eac4 <scalbnf+0x68>
 801ea98:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801eb14 <scalbnf+0xb8>
 801ea9c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801eb18 <scalbnf+0xbc>
 801eaa0:	ee10 3a10 	vmov	r3, s0
 801eaa4:	eeb0 7a67 	vmov.f32	s14, s15
 801eaa8:	2b00      	cmp	r3, #0
 801eaaa:	bfb8      	it	lt
 801eaac:	eef0 7a66 	vmovlt.f32	s15, s13
 801eab0:	ee27 0a87 	vmul.f32	s0, s15, s14
 801eab4:	4770      	bx	lr
 801eab6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801eb1c <scalbnf+0xc0>
 801eaba:	ee27 0a80 	vmul.f32	s0, s15, s0
 801eabe:	4770      	bx	lr
 801eac0:	0dd2      	lsrs	r2, r2, #23
 801eac2:	e7e5      	b.n	801ea90 <scalbnf+0x34>
 801eac4:	4410      	add	r0, r2
 801eac6:	28fe      	cmp	r0, #254	@ 0xfe
 801eac8:	dce6      	bgt.n	801ea98 <scalbnf+0x3c>
 801eaca:	2800      	cmp	r0, #0
 801eacc:	dd06      	ble.n	801eadc <scalbnf+0x80>
 801eace:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ead2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801ead6:	ee00 3a10 	vmov	s0, r3
 801eada:	4770      	bx	lr
 801eadc:	f110 0f16 	cmn.w	r0, #22
 801eae0:	da09      	bge.n	801eaf6 <scalbnf+0x9a>
 801eae2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801eb1c <scalbnf+0xc0>
 801eae6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801eb20 <scalbnf+0xc4>
 801eaea:	ee10 3a10 	vmov	r3, s0
 801eaee:	eeb0 7a67 	vmov.f32	s14, s15
 801eaf2:	2b00      	cmp	r3, #0
 801eaf4:	e7d9      	b.n	801eaaa <scalbnf+0x4e>
 801eaf6:	3019      	adds	r0, #25
 801eaf8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801eafc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801eb00:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801eb24 <scalbnf+0xc8>
 801eb04:	ee07 3a90 	vmov	s15, r3
 801eb08:	e7d7      	b.n	801eaba <scalbnf+0x5e>
 801eb0a:	bf00      	nop
 801eb0c:	ffff3cb0 	.word	0xffff3cb0
 801eb10:	4c000000 	.word	0x4c000000
 801eb14:	7149f2ca 	.word	0x7149f2ca
 801eb18:	f149f2ca 	.word	0xf149f2ca
 801eb1c:	0da24260 	.word	0x0da24260
 801eb20:	8da24260 	.word	0x8da24260
 801eb24:	33000000 	.word	0x33000000

0801eb28 <with_errnof>:
 801eb28:	b510      	push	{r4, lr}
 801eb2a:	ed2d 8b02 	vpush	{d8}
 801eb2e:	eeb0 8a40 	vmov.f32	s16, s0
 801eb32:	4604      	mov	r4, r0
 801eb34:	f001 fa2c 	bl	801ff90 <__errno>
 801eb38:	eeb0 0a48 	vmov.f32	s0, s16
 801eb3c:	ecbd 8b02 	vpop	{d8}
 801eb40:	6004      	str	r4, [r0, #0]
 801eb42:	bd10      	pop	{r4, pc}

0801eb44 <xflowf>:
 801eb44:	b130      	cbz	r0, 801eb54 <xflowf+0x10>
 801eb46:	eef1 7a40 	vneg.f32	s15, s0
 801eb4a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801eb4e:	2022      	movs	r0, #34	@ 0x22
 801eb50:	f7ff bfea 	b.w	801eb28 <with_errnof>
 801eb54:	eef0 7a40 	vmov.f32	s15, s0
 801eb58:	e7f7      	b.n	801eb4a <xflowf+0x6>
	...

0801eb5c <__math_uflowf>:
 801eb5c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801eb64 <__math_uflowf+0x8>
 801eb60:	f7ff bff0 	b.w	801eb44 <xflowf>
 801eb64:	10000000 	.word	0x10000000

0801eb68 <__math_oflowf>:
 801eb68:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801eb70 <__math_oflowf+0x8>
 801eb6c:	f7ff bfea 	b.w	801eb44 <xflowf>
 801eb70:	70000000 	.word	0x70000000

0801eb74 <__ieee754_sqrtf>:
 801eb74:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801eb78:	4770      	bx	lr
	...

0801eb7c <__kernel_rem_pio2f>:
 801eb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb80:	ed2d 8b04 	vpush	{d8-d9}
 801eb84:	b0d9      	sub	sp, #356	@ 0x164
 801eb86:	4690      	mov	r8, r2
 801eb88:	9001      	str	r0, [sp, #4]
 801eb8a:	4ab9      	ldr	r2, [pc, #740]	@ (801ee70 <__kernel_rem_pio2f+0x2f4>)
 801eb8c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801eb8e:	f118 0f04 	cmn.w	r8, #4
 801eb92:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801eb96:	460f      	mov	r7, r1
 801eb98:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801eb9c:	db27      	blt.n	801ebee <__kernel_rem_pio2f+0x72>
 801eb9e:	f1b8 0203 	subs.w	r2, r8, #3
 801eba2:	bf48      	it	mi
 801eba4:	f108 0204 	addmi.w	r2, r8, #4
 801eba8:	10d2      	asrs	r2, r2, #3
 801ebaa:	1c55      	adds	r5, r2, #1
 801ebac:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801ebae:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801ee80 <__kernel_rem_pio2f+0x304>
 801ebb2:	00e8      	lsls	r0, r5, #3
 801ebb4:	eba2 060b 	sub.w	r6, r2, fp
 801ebb8:	9002      	str	r0, [sp, #8]
 801ebba:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801ebbe:	eb0a 0c0b 	add.w	ip, sl, fp
 801ebc2:	ac1c      	add	r4, sp, #112	@ 0x70
 801ebc4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801ebc8:	2000      	movs	r0, #0
 801ebca:	4560      	cmp	r0, ip
 801ebcc:	dd11      	ble.n	801ebf2 <__kernel_rem_pio2f+0x76>
 801ebce:	a91c      	add	r1, sp, #112	@ 0x70
 801ebd0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801ebd4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801ebd8:	f04f 0c00 	mov.w	ip, #0
 801ebdc:	45d4      	cmp	ip, sl
 801ebde:	dc27      	bgt.n	801ec30 <__kernel_rem_pio2f+0xb4>
 801ebe0:	f8dd e004 	ldr.w	lr, [sp, #4]
 801ebe4:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801ee80 <__kernel_rem_pio2f+0x304>
 801ebe8:	4606      	mov	r6, r0
 801ebea:	2400      	movs	r4, #0
 801ebec:	e016      	b.n	801ec1c <__kernel_rem_pio2f+0xa0>
 801ebee:	2200      	movs	r2, #0
 801ebf0:	e7db      	b.n	801ebaa <__kernel_rem_pio2f+0x2e>
 801ebf2:	42c6      	cmn	r6, r0
 801ebf4:	bf5d      	ittte	pl
 801ebf6:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801ebfa:	ee07 1a90 	vmovpl	s15, r1
 801ebfe:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801ec02:	eef0 7a47 	vmovmi.f32	s15, s14
 801ec06:	ece4 7a01 	vstmia	r4!, {s15}
 801ec0a:	3001      	adds	r0, #1
 801ec0c:	e7dd      	b.n	801ebca <__kernel_rem_pio2f+0x4e>
 801ec0e:	ecfe 6a01 	vldmia	lr!, {s13}
 801ec12:	ed96 7a00 	vldr	s14, [r6]
 801ec16:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ec1a:	3401      	adds	r4, #1
 801ec1c:	455c      	cmp	r4, fp
 801ec1e:	f1a6 0604 	sub.w	r6, r6, #4
 801ec22:	ddf4      	ble.n	801ec0e <__kernel_rem_pio2f+0x92>
 801ec24:	ece9 7a01 	vstmia	r9!, {s15}
 801ec28:	f10c 0c01 	add.w	ip, ip, #1
 801ec2c:	3004      	adds	r0, #4
 801ec2e:	e7d5      	b.n	801ebdc <__kernel_rem_pio2f+0x60>
 801ec30:	a908      	add	r1, sp, #32
 801ec32:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ec36:	9104      	str	r1, [sp, #16]
 801ec38:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801ec3a:	eddf 8a90 	vldr	s17, [pc, #576]	@ 801ee7c <__kernel_rem_pio2f+0x300>
 801ec3e:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 801ee78 <__kernel_rem_pio2f+0x2fc>
 801ec42:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801ec46:	9203      	str	r2, [sp, #12]
 801ec48:	4654      	mov	r4, sl
 801ec4a:	00a2      	lsls	r2, r4, #2
 801ec4c:	9205      	str	r2, [sp, #20]
 801ec4e:	aa58      	add	r2, sp, #352	@ 0x160
 801ec50:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801ec54:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801ec58:	a944      	add	r1, sp, #272	@ 0x110
 801ec5a:	aa08      	add	r2, sp, #32
 801ec5c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801ec60:	4694      	mov	ip, r2
 801ec62:	4626      	mov	r6, r4
 801ec64:	2e00      	cmp	r6, #0
 801ec66:	f1a0 0004 	sub.w	r0, r0, #4
 801ec6a:	dc4c      	bgt.n	801ed06 <__kernel_rem_pio2f+0x18a>
 801ec6c:	4628      	mov	r0, r5
 801ec6e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ec72:	f7ff fef3 	bl	801ea5c <scalbnf>
 801ec76:	eeb0 8a40 	vmov.f32	s16, s0
 801ec7a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801ec7e:	ee28 0a00 	vmul.f32	s0, s16, s0
 801ec82:	f000 f9ed 	bl	801f060 <floorf>
 801ec86:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801ec8a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801ec8e:	2d00      	cmp	r5, #0
 801ec90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ec94:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801ec98:	ee17 9a90 	vmov	r9, s15
 801ec9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801eca0:	ee38 8a67 	vsub.f32	s16, s16, s15
 801eca4:	dd41      	ble.n	801ed2a <__kernel_rem_pio2f+0x1ae>
 801eca6:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801ecaa:	a908      	add	r1, sp, #32
 801ecac:	f1c5 0e08 	rsb	lr, r5, #8
 801ecb0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801ecb4:	fa46 f00e 	asr.w	r0, r6, lr
 801ecb8:	4481      	add	r9, r0
 801ecba:	fa00 f00e 	lsl.w	r0, r0, lr
 801ecbe:	1a36      	subs	r6, r6, r0
 801ecc0:	f1c5 0007 	rsb	r0, r5, #7
 801ecc4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801ecc8:	4106      	asrs	r6, r0
 801ecca:	2e00      	cmp	r6, #0
 801eccc:	dd3c      	ble.n	801ed48 <__kernel_rem_pio2f+0x1cc>
 801ecce:	f04f 0e00 	mov.w	lr, #0
 801ecd2:	f109 0901 	add.w	r9, r9, #1
 801ecd6:	4670      	mov	r0, lr
 801ecd8:	4574      	cmp	r4, lr
 801ecda:	dc68      	bgt.n	801edae <__kernel_rem_pio2f+0x232>
 801ecdc:	2d00      	cmp	r5, #0
 801ecde:	dd03      	ble.n	801ece8 <__kernel_rem_pio2f+0x16c>
 801ece0:	2d01      	cmp	r5, #1
 801ece2:	d074      	beq.n	801edce <__kernel_rem_pio2f+0x252>
 801ece4:	2d02      	cmp	r5, #2
 801ece6:	d07d      	beq.n	801ede4 <__kernel_rem_pio2f+0x268>
 801ece8:	2e02      	cmp	r6, #2
 801ecea:	d12d      	bne.n	801ed48 <__kernel_rem_pio2f+0x1cc>
 801ecec:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801ecf0:	ee30 8a48 	vsub.f32	s16, s0, s16
 801ecf4:	b340      	cbz	r0, 801ed48 <__kernel_rem_pio2f+0x1cc>
 801ecf6:	4628      	mov	r0, r5
 801ecf8:	9306      	str	r3, [sp, #24]
 801ecfa:	f7ff feaf 	bl	801ea5c <scalbnf>
 801ecfe:	9b06      	ldr	r3, [sp, #24]
 801ed00:	ee38 8a40 	vsub.f32	s16, s16, s0
 801ed04:	e020      	b.n	801ed48 <__kernel_rem_pio2f+0x1cc>
 801ed06:	ee60 7a28 	vmul.f32	s15, s0, s17
 801ed0a:	3e01      	subs	r6, #1
 801ed0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ed10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ed14:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801ed18:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801ed1c:	ecac 0a01 	vstmia	ip!, {s0}
 801ed20:	ed90 0a00 	vldr	s0, [r0]
 801ed24:	ee37 0a80 	vadd.f32	s0, s15, s0
 801ed28:	e79c      	b.n	801ec64 <__kernel_rem_pio2f+0xe8>
 801ed2a:	d105      	bne.n	801ed38 <__kernel_rem_pio2f+0x1bc>
 801ed2c:	1e60      	subs	r0, r4, #1
 801ed2e:	a908      	add	r1, sp, #32
 801ed30:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801ed34:	11f6      	asrs	r6, r6, #7
 801ed36:	e7c8      	b.n	801ecca <__kernel_rem_pio2f+0x14e>
 801ed38:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801ed3c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801ed40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed44:	da31      	bge.n	801edaa <__kernel_rem_pio2f+0x22e>
 801ed46:	2600      	movs	r6, #0
 801ed48:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801ed4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed50:	f040 8098 	bne.w	801ee84 <__kernel_rem_pio2f+0x308>
 801ed54:	1e60      	subs	r0, r4, #1
 801ed56:	2200      	movs	r2, #0
 801ed58:	4550      	cmp	r0, sl
 801ed5a:	da4b      	bge.n	801edf4 <__kernel_rem_pio2f+0x278>
 801ed5c:	2a00      	cmp	r2, #0
 801ed5e:	d065      	beq.n	801ee2c <__kernel_rem_pio2f+0x2b0>
 801ed60:	3c01      	subs	r4, #1
 801ed62:	ab08      	add	r3, sp, #32
 801ed64:	3d08      	subs	r5, #8
 801ed66:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801ed6a:	2b00      	cmp	r3, #0
 801ed6c:	d0f8      	beq.n	801ed60 <__kernel_rem_pio2f+0x1e4>
 801ed6e:	4628      	mov	r0, r5
 801ed70:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801ed74:	f7ff fe72 	bl	801ea5c <scalbnf>
 801ed78:	1c63      	adds	r3, r4, #1
 801ed7a:	aa44      	add	r2, sp, #272	@ 0x110
 801ed7c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801ee7c <__kernel_rem_pio2f+0x300>
 801ed80:	0099      	lsls	r1, r3, #2
 801ed82:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801ed86:	4623      	mov	r3, r4
 801ed88:	2b00      	cmp	r3, #0
 801ed8a:	f280 80a9 	bge.w	801eee0 <__kernel_rem_pio2f+0x364>
 801ed8e:	4623      	mov	r3, r4
 801ed90:	2b00      	cmp	r3, #0
 801ed92:	f2c0 80c7 	blt.w	801ef24 <__kernel_rem_pio2f+0x3a8>
 801ed96:	aa44      	add	r2, sp, #272	@ 0x110
 801ed98:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801ed9c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801ee74 <__kernel_rem_pio2f+0x2f8>
 801eda0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801ee80 <__kernel_rem_pio2f+0x304>
 801eda4:	2000      	movs	r0, #0
 801eda6:	1ae2      	subs	r2, r4, r3
 801eda8:	e0b1      	b.n	801ef0e <__kernel_rem_pio2f+0x392>
 801edaa:	2602      	movs	r6, #2
 801edac:	e78f      	b.n	801ecce <__kernel_rem_pio2f+0x152>
 801edae:	f852 1b04 	ldr.w	r1, [r2], #4
 801edb2:	b948      	cbnz	r0, 801edc8 <__kernel_rem_pio2f+0x24c>
 801edb4:	b121      	cbz	r1, 801edc0 <__kernel_rem_pio2f+0x244>
 801edb6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801edba:	f842 1c04 	str.w	r1, [r2, #-4]
 801edbe:	2101      	movs	r1, #1
 801edc0:	f10e 0e01 	add.w	lr, lr, #1
 801edc4:	4608      	mov	r0, r1
 801edc6:	e787      	b.n	801ecd8 <__kernel_rem_pio2f+0x15c>
 801edc8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801edcc:	e7f5      	b.n	801edba <__kernel_rem_pio2f+0x23e>
 801edce:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801edd2:	aa08      	add	r2, sp, #32
 801edd4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801edd8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801eddc:	a908      	add	r1, sp, #32
 801edde:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801ede2:	e781      	b.n	801ece8 <__kernel_rem_pio2f+0x16c>
 801ede4:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801ede8:	aa08      	add	r2, sp, #32
 801edea:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801edee:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801edf2:	e7f3      	b.n	801eddc <__kernel_rem_pio2f+0x260>
 801edf4:	a908      	add	r1, sp, #32
 801edf6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801edfa:	3801      	subs	r0, #1
 801edfc:	430a      	orrs	r2, r1
 801edfe:	e7ab      	b.n	801ed58 <__kernel_rem_pio2f+0x1dc>
 801ee00:	3201      	adds	r2, #1
 801ee02:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801ee06:	2e00      	cmp	r6, #0
 801ee08:	d0fa      	beq.n	801ee00 <__kernel_rem_pio2f+0x284>
 801ee0a:	9905      	ldr	r1, [sp, #20]
 801ee0c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801ee10:	eb0d 0001 	add.w	r0, sp, r1
 801ee14:	18e6      	adds	r6, r4, r3
 801ee16:	a91c      	add	r1, sp, #112	@ 0x70
 801ee18:	f104 0c01 	add.w	ip, r4, #1
 801ee1c:	384c      	subs	r0, #76	@ 0x4c
 801ee1e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801ee22:	4422      	add	r2, r4
 801ee24:	4562      	cmp	r2, ip
 801ee26:	da04      	bge.n	801ee32 <__kernel_rem_pio2f+0x2b6>
 801ee28:	4614      	mov	r4, r2
 801ee2a:	e70e      	b.n	801ec4a <__kernel_rem_pio2f+0xce>
 801ee2c:	9804      	ldr	r0, [sp, #16]
 801ee2e:	2201      	movs	r2, #1
 801ee30:	e7e7      	b.n	801ee02 <__kernel_rem_pio2f+0x286>
 801ee32:	9903      	ldr	r1, [sp, #12]
 801ee34:	f8dd e004 	ldr.w	lr, [sp, #4]
 801ee38:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801ee3c:	9105      	str	r1, [sp, #20]
 801ee3e:	ee07 1a90 	vmov	s15, r1
 801ee42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ee46:	2400      	movs	r4, #0
 801ee48:	ece6 7a01 	vstmia	r6!, {s15}
 801ee4c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801ee80 <__kernel_rem_pio2f+0x304>
 801ee50:	46b1      	mov	r9, r6
 801ee52:	455c      	cmp	r4, fp
 801ee54:	dd04      	ble.n	801ee60 <__kernel_rem_pio2f+0x2e4>
 801ee56:	ece0 7a01 	vstmia	r0!, {s15}
 801ee5a:	f10c 0c01 	add.w	ip, ip, #1
 801ee5e:	e7e1      	b.n	801ee24 <__kernel_rem_pio2f+0x2a8>
 801ee60:	ecfe 6a01 	vldmia	lr!, {s13}
 801ee64:	ed39 7a01 	vldmdb	r9!, {s14}
 801ee68:	3401      	adds	r4, #1
 801ee6a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ee6e:	e7f0      	b.n	801ee52 <__kernel_rem_pio2f+0x2d6>
 801ee70:	08022c7c 	.word	0x08022c7c
 801ee74:	08022c50 	.word	0x08022c50
 801ee78:	43800000 	.word	0x43800000
 801ee7c:	3b800000 	.word	0x3b800000
 801ee80:	00000000 	.word	0x00000000
 801ee84:	9b02      	ldr	r3, [sp, #8]
 801ee86:	eeb0 0a48 	vmov.f32	s0, s16
 801ee8a:	eba3 0008 	sub.w	r0, r3, r8
 801ee8e:	f7ff fde5 	bl	801ea5c <scalbnf>
 801ee92:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801ee78 <__kernel_rem_pio2f+0x2fc>
 801ee96:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801ee9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee9e:	db19      	blt.n	801eed4 <__kernel_rem_pio2f+0x358>
 801eea0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801ee7c <__kernel_rem_pio2f+0x300>
 801eea4:	ee60 7a27 	vmul.f32	s15, s0, s15
 801eea8:	aa08      	add	r2, sp, #32
 801eeaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801eeae:	3508      	adds	r5, #8
 801eeb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801eeb4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801eeb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801eebc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801eec0:	ee10 3a10 	vmov	r3, s0
 801eec4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801eec8:	ee17 3a90 	vmov	r3, s15
 801eecc:	3401      	adds	r4, #1
 801eece:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801eed2:	e74c      	b.n	801ed6e <__kernel_rem_pio2f+0x1f2>
 801eed4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801eed8:	aa08      	add	r2, sp, #32
 801eeda:	ee10 3a10 	vmov	r3, s0
 801eede:	e7f6      	b.n	801eece <__kernel_rem_pio2f+0x352>
 801eee0:	a808      	add	r0, sp, #32
 801eee2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801eee6:	9001      	str	r0, [sp, #4]
 801eee8:	ee07 0a90 	vmov	s15, r0
 801eeec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801eef0:	3b01      	subs	r3, #1
 801eef2:	ee67 7a80 	vmul.f32	s15, s15, s0
 801eef6:	ee20 0a07 	vmul.f32	s0, s0, s14
 801eefa:	ed62 7a01 	vstmdb	r2!, {s15}
 801eefe:	e743      	b.n	801ed88 <__kernel_rem_pio2f+0x20c>
 801ef00:	ecfc 6a01 	vldmia	ip!, {s13}
 801ef04:	ecb5 7a01 	vldmia	r5!, {s14}
 801ef08:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ef0c:	3001      	adds	r0, #1
 801ef0e:	4550      	cmp	r0, sl
 801ef10:	dc01      	bgt.n	801ef16 <__kernel_rem_pio2f+0x39a>
 801ef12:	4282      	cmp	r2, r0
 801ef14:	daf4      	bge.n	801ef00 <__kernel_rem_pio2f+0x384>
 801ef16:	a858      	add	r0, sp, #352	@ 0x160
 801ef18:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801ef1c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801ef20:	3b01      	subs	r3, #1
 801ef22:	e735      	b.n	801ed90 <__kernel_rem_pio2f+0x214>
 801ef24:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801ef26:	2b02      	cmp	r3, #2
 801ef28:	dc09      	bgt.n	801ef3e <__kernel_rem_pio2f+0x3c2>
 801ef2a:	2b00      	cmp	r3, #0
 801ef2c:	dc2b      	bgt.n	801ef86 <__kernel_rem_pio2f+0x40a>
 801ef2e:	d044      	beq.n	801efba <__kernel_rem_pio2f+0x43e>
 801ef30:	f009 0007 	and.w	r0, r9, #7
 801ef34:	b059      	add	sp, #356	@ 0x164
 801ef36:	ecbd 8b04 	vpop	{d8-d9}
 801ef3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef3e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801ef40:	2b03      	cmp	r3, #3
 801ef42:	d1f5      	bne.n	801ef30 <__kernel_rem_pio2f+0x3b4>
 801ef44:	aa30      	add	r2, sp, #192	@ 0xc0
 801ef46:	1f0b      	subs	r3, r1, #4
 801ef48:	4413      	add	r3, r2
 801ef4a:	461a      	mov	r2, r3
 801ef4c:	4620      	mov	r0, r4
 801ef4e:	2800      	cmp	r0, #0
 801ef50:	f1a2 0204 	sub.w	r2, r2, #4
 801ef54:	dc52      	bgt.n	801effc <__kernel_rem_pio2f+0x480>
 801ef56:	4622      	mov	r2, r4
 801ef58:	2a01      	cmp	r2, #1
 801ef5a:	f1a3 0304 	sub.w	r3, r3, #4
 801ef5e:	dc5d      	bgt.n	801f01c <__kernel_rem_pio2f+0x4a0>
 801ef60:	ab30      	add	r3, sp, #192	@ 0xc0
 801ef62:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801ee80 <__kernel_rem_pio2f+0x304>
 801ef66:	440b      	add	r3, r1
 801ef68:	2c01      	cmp	r4, #1
 801ef6a:	dc67      	bgt.n	801f03c <__kernel_rem_pio2f+0x4c0>
 801ef6c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801ef70:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801ef74:	2e00      	cmp	r6, #0
 801ef76:	d167      	bne.n	801f048 <__kernel_rem_pio2f+0x4cc>
 801ef78:	edc7 6a00 	vstr	s13, [r7]
 801ef7c:	ed87 7a01 	vstr	s14, [r7, #4]
 801ef80:	edc7 7a02 	vstr	s15, [r7, #8]
 801ef84:	e7d4      	b.n	801ef30 <__kernel_rem_pio2f+0x3b4>
 801ef86:	ab30      	add	r3, sp, #192	@ 0xc0
 801ef88:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801ee80 <__kernel_rem_pio2f+0x304>
 801ef8c:	440b      	add	r3, r1
 801ef8e:	4622      	mov	r2, r4
 801ef90:	2a00      	cmp	r2, #0
 801ef92:	da24      	bge.n	801efde <__kernel_rem_pio2f+0x462>
 801ef94:	b34e      	cbz	r6, 801efea <__kernel_rem_pio2f+0x46e>
 801ef96:	eef1 7a47 	vneg.f32	s15, s14
 801ef9a:	edc7 7a00 	vstr	s15, [r7]
 801ef9e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801efa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801efa6:	aa31      	add	r2, sp, #196	@ 0xc4
 801efa8:	2301      	movs	r3, #1
 801efaa:	429c      	cmp	r4, r3
 801efac:	da20      	bge.n	801eff0 <__kernel_rem_pio2f+0x474>
 801efae:	b10e      	cbz	r6, 801efb4 <__kernel_rem_pio2f+0x438>
 801efb0:	eef1 7a67 	vneg.f32	s15, s15
 801efb4:	edc7 7a01 	vstr	s15, [r7, #4]
 801efb8:	e7ba      	b.n	801ef30 <__kernel_rem_pio2f+0x3b4>
 801efba:	ab30      	add	r3, sp, #192	@ 0xc0
 801efbc:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801ee80 <__kernel_rem_pio2f+0x304>
 801efc0:	440b      	add	r3, r1
 801efc2:	2c00      	cmp	r4, #0
 801efc4:	da05      	bge.n	801efd2 <__kernel_rem_pio2f+0x456>
 801efc6:	b10e      	cbz	r6, 801efcc <__kernel_rem_pio2f+0x450>
 801efc8:	eef1 7a67 	vneg.f32	s15, s15
 801efcc:	edc7 7a00 	vstr	s15, [r7]
 801efd0:	e7ae      	b.n	801ef30 <__kernel_rem_pio2f+0x3b4>
 801efd2:	ed33 7a01 	vldmdb	r3!, {s14}
 801efd6:	3c01      	subs	r4, #1
 801efd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801efdc:	e7f1      	b.n	801efc2 <__kernel_rem_pio2f+0x446>
 801efde:	ed73 7a01 	vldmdb	r3!, {s15}
 801efe2:	3a01      	subs	r2, #1
 801efe4:	ee37 7a27 	vadd.f32	s14, s14, s15
 801efe8:	e7d2      	b.n	801ef90 <__kernel_rem_pio2f+0x414>
 801efea:	eef0 7a47 	vmov.f32	s15, s14
 801efee:	e7d4      	b.n	801ef9a <__kernel_rem_pio2f+0x41e>
 801eff0:	ecb2 7a01 	vldmia	r2!, {s14}
 801eff4:	3301      	adds	r3, #1
 801eff6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801effa:	e7d6      	b.n	801efaa <__kernel_rem_pio2f+0x42e>
 801effc:	edd2 7a00 	vldr	s15, [r2]
 801f000:	edd2 6a01 	vldr	s13, [r2, #4]
 801f004:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f008:	3801      	subs	r0, #1
 801f00a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f00e:	ed82 7a00 	vstr	s14, [r2]
 801f012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f016:	edc2 7a01 	vstr	s15, [r2, #4]
 801f01a:	e798      	b.n	801ef4e <__kernel_rem_pio2f+0x3d2>
 801f01c:	edd3 7a00 	vldr	s15, [r3]
 801f020:	edd3 6a01 	vldr	s13, [r3, #4]
 801f024:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f028:	3a01      	subs	r2, #1
 801f02a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f02e:	ed83 7a00 	vstr	s14, [r3]
 801f032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f036:	edc3 7a01 	vstr	s15, [r3, #4]
 801f03a:	e78d      	b.n	801ef58 <__kernel_rem_pio2f+0x3dc>
 801f03c:	ed33 7a01 	vldmdb	r3!, {s14}
 801f040:	3c01      	subs	r4, #1
 801f042:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f046:	e78f      	b.n	801ef68 <__kernel_rem_pio2f+0x3ec>
 801f048:	eef1 6a66 	vneg.f32	s13, s13
 801f04c:	eeb1 7a47 	vneg.f32	s14, s14
 801f050:	edc7 6a00 	vstr	s13, [r7]
 801f054:	ed87 7a01 	vstr	s14, [r7, #4]
 801f058:	eef1 7a67 	vneg.f32	s15, s15
 801f05c:	e790      	b.n	801ef80 <__kernel_rem_pio2f+0x404>
 801f05e:	bf00      	nop

0801f060 <floorf>:
 801f060:	ee10 3a10 	vmov	r3, s0
 801f064:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801f068:	3a7f      	subs	r2, #127	@ 0x7f
 801f06a:	2a16      	cmp	r2, #22
 801f06c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801f070:	dc2b      	bgt.n	801f0ca <floorf+0x6a>
 801f072:	2a00      	cmp	r2, #0
 801f074:	da12      	bge.n	801f09c <floorf+0x3c>
 801f076:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801f0dc <floorf+0x7c>
 801f07a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f07e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f086:	dd06      	ble.n	801f096 <floorf+0x36>
 801f088:	2b00      	cmp	r3, #0
 801f08a:	da24      	bge.n	801f0d6 <floorf+0x76>
 801f08c:	2900      	cmp	r1, #0
 801f08e:	4b14      	ldr	r3, [pc, #80]	@ (801f0e0 <floorf+0x80>)
 801f090:	bf08      	it	eq
 801f092:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801f096:	ee00 3a10 	vmov	s0, r3
 801f09a:	4770      	bx	lr
 801f09c:	4911      	ldr	r1, [pc, #68]	@ (801f0e4 <floorf+0x84>)
 801f09e:	4111      	asrs	r1, r2
 801f0a0:	420b      	tst	r3, r1
 801f0a2:	d0fa      	beq.n	801f09a <floorf+0x3a>
 801f0a4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801f0dc <floorf+0x7c>
 801f0a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f0ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f0b4:	ddef      	ble.n	801f096 <floorf+0x36>
 801f0b6:	2b00      	cmp	r3, #0
 801f0b8:	bfbe      	ittt	lt
 801f0ba:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801f0be:	fa40 f202 	asrlt.w	r2, r0, r2
 801f0c2:	189b      	addlt	r3, r3, r2
 801f0c4:	ea23 0301 	bic.w	r3, r3, r1
 801f0c8:	e7e5      	b.n	801f096 <floorf+0x36>
 801f0ca:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801f0ce:	d3e4      	bcc.n	801f09a <floorf+0x3a>
 801f0d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f0d4:	4770      	bx	lr
 801f0d6:	2300      	movs	r3, #0
 801f0d8:	e7dd      	b.n	801f096 <floorf+0x36>
 801f0da:	bf00      	nop
 801f0dc:	7149f2ca 	.word	0x7149f2ca
 801f0e0:	bf800000 	.word	0xbf800000
 801f0e4:	007fffff 	.word	0x007fffff

0801f0e8 <abort>:
 801f0e8:	b508      	push	{r3, lr}
 801f0ea:	2006      	movs	r0, #6
 801f0ec:	f000 fe84 	bl	801fdf8 <raise>
 801f0f0:	2001      	movs	r0, #1
 801f0f2:	f7e6 f861 	bl	80051b8 <_exit>
	...

0801f0f8 <malloc>:
 801f0f8:	4b02      	ldr	r3, [pc, #8]	@ (801f104 <malloc+0xc>)
 801f0fa:	4601      	mov	r1, r0
 801f0fc:	6818      	ldr	r0, [r3, #0]
 801f0fe:	f000 b82d 	b.w	801f15c <_malloc_r>
 801f102:	bf00      	nop
 801f104:	200001b4 	.word	0x200001b4

0801f108 <free>:
 801f108:	4b02      	ldr	r3, [pc, #8]	@ (801f114 <free+0xc>)
 801f10a:	4601      	mov	r1, r0
 801f10c:	6818      	ldr	r0, [r3, #0]
 801f10e:	f001 bdc7 	b.w	8020ca0 <_free_r>
 801f112:	bf00      	nop
 801f114:	200001b4 	.word	0x200001b4

0801f118 <sbrk_aligned>:
 801f118:	b570      	push	{r4, r5, r6, lr}
 801f11a:	4e0f      	ldr	r6, [pc, #60]	@ (801f158 <sbrk_aligned+0x40>)
 801f11c:	460c      	mov	r4, r1
 801f11e:	6831      	ldr	r1, [r6, #0]
 801f120:	4605      	mov	r5, r0
 801f122:	b911      	cbnz	r1, 801f12a <sbrk_aligned+0x12>
 801f124:	f000 ff12 	bl	801ff4c <_sbrk_r>
 801f128:	6030      	str	r0, [r6, #0]
 801f12a:	4621      	mov	r1, r4
 801f12c:	4628      	mov	r0, r5
 801f12e:	f000 ff0d 	bl	801ff4c <_sbrk_r>
 801f132:	1c43      	adds	r3, r0, #1
 801f134:	d103      	bne.n	801f13e <sbrk_aligned+0x26>
 801f136:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801f13a:	4620      	mov	r0, r4
 801f13c:	bd70      	pop	{r4, r5, r6, pc}
 801f13e:	1cc4      	adds	r4, r0, #3
 801f140:	f024 0403 	bic.w	r4, r4, #3
 801f144:	42a0      	cmp	r0, r4
 801f146:	d0f8      	beq.n	801f13a <sbrk_aligned+0x22>
 801f148:	1a21      	subs	r1, r4, r0
 801f14a:	4628      	mov	r0, r5
 801f14c:	f000 fefe 	bl	801ff4c <_sbrk_r>
 801f150:	3001      	adds	r0, #1
 801f152:	d1f2      	bne.n	801f13a <sbrk_aligned+0x22>
 801f154:	e7ef      	b.n	801f136 <sbrk_aligned+0x1e>
 801f156:	bf00      	nop
 801f158:	20018734 	.word	0x20018734

0801f15c <_malloc_r>:
 801f15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f160:	1ccd      	adds	r5, r1, #3
 801f162:	f025 0503 	bic.w	r5, r5, #3
 801f166:	3508      	adds	r5, #8
 801f168:	2d0c      	cmp	r5, #12
 801f16a:	bf38      	it	cc
 801f16c:	250c      	movcc	r5, #12
 801f16e:	2d00      	cmp	r5, #0
 801f170:	4606      	mov	r6, r0
 801f172:	db01      	blt.n	801f178 <_malloc_r+0x1c>
 801f174:	42a9      	cmp	r1, r5
 801f176:	d904      	bls.n	801f182 <_malloc_r+0x26>
 801f178:	230c      	movs	r3, #12
 801f17a:	6033      	str	r3, [r6, #0]
 801f17c:	2000      	movs	r0, #0
 801f17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f182:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801f258 <_malloc_r+0xfc>
 801f186:	f000 f869 	bl	801f25c <__malloc_lock>
 801f18a:	f8d8 3000 	ldr.w	r3, [r8]
 801f18e:	461c      	mov	r4, r3
 801f190:	bb44      	cbnz	r4, 801f1e4 <_malloc_r+0x88>
 801f192:	4629      	mov	r1, r5
 801f194:	4630      	mov	r0, r6
 801f196:	f7ff ffbf 	bl	801f118 <sbrk_aligned>
 801f19a:	1c43      	adds	r3, r0, #1
 801f19c:	4604      	mov	r4, r0
 801f19e:	d158      	bne.n	801f252 <_malloc_r+0xf6>
 801f1a0:	f8d8 4000 	ldr.w	r4, [r8]
 801f1a4:	4627      	mov	r7, r4
 801f1a6:	2f00      	cmp	r7, #0
 801f1a8:	d143      	bne.n	801f232 <_malloc_r+0xd6>
 801f1aa:	2c00      	cmp	r4, #0
 801f1ac:	d04b      	beq.n	801f246 <_malloc_r+0xea>
 801f1ae:	6823      	ldr	r3, [r4, #0]
 801f1b0:	4639      	mov	r1, r7
 801f1b2:	4630      	mov	r0, r6
 801f1b4:	eb04 0903 	add.w	r9, r4, r3
 801f1b8:	f000 fec8 	bl	801ff4c <_sbrk_r>
 801f1bc:	4581      	cmp	r9, r0
 801f1be:	d142      	bne.n	801f246 <_malloc_r+0xea>
 801f1c0:	6821      	ldr	r1, [r4, #0]
 801f1c2:	1a6d      	subs	r5, r5, r1
 801f1c4:	4629      	mov	r1, r5
 801f1c6:	4630      	mov	r0, r6
 801f1c8:	f7ff ffa6 	bl	801f118 <sbrk_aligned>
 801f1cc:	3001      	adds	r0, #1
 801f1ce:	d03a      	beq.n	801f246 <_malloc_r+0xea>
 801f1d0:	6823      	ldr	r3, [r4, #0]
 801f1d2:	442b      	add	r3, r5
 801f1d4:	6023      	str	r3, [r4, #0]
 801f1d6:	f8d8 3000 	ldr.w	r3, [r8]
 801f1da:	685a      	ldr	r2, [r3, #4]
 801f1dc:	bb62      	cbnz	r2, 801f238 <_malloc_r+0xdc>
 801f1de:	f8c8 7000 	str.w	r7, [r8]
 801f1e2:	e00f      	b.n	801f204 <_malloc_r+0xa8>
 801f1e4:	6822      	ldr	r2, [r4, #0]
 801f1e6:	1b52      	subs	r2, r2, r5
 801f1e8:	d420      	bmi.n	801f22c <_malloc_r+0xd0>
 801f1ea:	2a0b      	cmp	r2, #11
 801f1ec:	d917      	bls.n	801f21e <_malloc_r+0xc2>
 801f1ee:	1961      	adds	r1, r4, r5
 801f1f0:	42a3      	cmp	r3, r4
 801f1f2:	6025      	str	r5, [r4, #0]
 801f1f4:	bf18      	it	ne
 801f1f6:	6059      	strne	r1, [r3, #4]
 801f1f8:	6863      	ldr	r3, [r4, #4]
 801f1fa:	bf08      	it	eq
 801f1fc:	f8c8 1000 	streq.w	r1, [r8]
 801f200:	5162      	str	r2, [r4, r5]
 801f202:	604b      	str	r3, [r1, #4]
 801f204:	4630      	mov	r0, r6
 801f206:	f000 f82f 	bl	801f268 <__malloc_unlock>
 801f20a:	f104 000b 	add.w	r0, r4, #11
 801f20e:	1d23      	adds	r3, r4, #4
 801f210:	f020 0007 	bic.w	r0, r0, #7
 801f214:	1ac2      	subs	r2, r0, r3
 801f216:	bf1c      	itt	ne
 801f218:	1a1b      	subne	r3, r3, r0
 801f21a:	50a3      	strne	r3, [r4, r2]
 801f21c:	e7af      	b.n	801f17e <_malloc_r+0x22>
 801f21e:	6862      	ldr	r2, [r4, #4]
 801f220:	42a3      	cmp	r3, r4
 801f222:	bf0c      	ite	eq
 801f224:	f8c8 2000 	streq.w	r2, [r8]
 801f228:	605a      	strne	r2, [r3, #4]
 801f22a:	e7eb      	b.n	801f204 <_malloc_r+0xa8>
 801f22c:	4623      	mov	r3, r4
 801f22e:	6864      	ldr	r4, [r4, #4]
 801f230:	e7ae      	b.n	801f190 <_malloc_r+0x34>
 801f232:	463c      	mov	r4, r7
 801f234:	687f      	ldr	r7, [r7, #4]
 801f236:	e7b6      	b.n	801f1a6 <_malloc_r+0x4a>
 801f238:	461a      	mov	r2, r3
 801f23a:	685b      	ldr	r3, [r3, #4]
 801f23c:	42a3      	cmp	r3, r4
 801f23e:	d1fb      	bne.n	801f238 <_malloc_r+0xdc>
 801f240:	2300      	movs	r3, #0
 801f242:	6053      	str	r3, [r2, #4]
 801f244:	e7de      	b.n	801f204 <_malloc_r+0xa8>
 801f246:	230c      	movs	r3, #12
 801f248:	6033      	str	r3, [r6, #0]
 801f24a:	4630      	mov	r0, r6
 801f24c:	f000 f80c 	bl	801f268 <__malloc_unlock>
 801f250:	e794      	b.n	801f17c <_malloc_r+0x20>
 801f252:	6005      	str	r5, [r0, #0]
 801f254:	e7d6      	b.n	801f204 <_malloc_r+0xa8>
 801f256:	bf00      	nop
 801f258:	20018738 	.word	0x20018738

0801f25c <__malloc_lock>:
 801f25c:	4801      	ldr	r0, [pc, #4]	@ (801f264 <__malloc_lock+0x8>)
 801f25e:	f000 bec2 	b.w	801ffe6 <__retarget_lock_acquire_recursive>
 801f262:	bf00      	nop
 801f264:	2001887c 	.word	0x2001887c

0801f268 <__malloc_unlock>:
 801f268:	4801      	ldr	r0, [pc, #4]	@ (801f270 <__malloc_unlock+0x8>)
 801f26a:	f000 bebd 	b.w	801ffe8 <__retarget_lock_release_recursive>
 801f26e:	bf00      	nop
 801f270:	2001887c 	.word	0x2001887c

0801f274 <__cvt>:
 801f274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f278:	ec57 6b10 	vmov	r6, r7, d0
 801f27c:	2f00      	cmp	r7, #0
 801f27e:	460c      	mov	r4, r1
 801f280:	4619      	mov	r1, r3
 801f282:	463b      	mov	r3, r7
 801f284:	bfbb      	ittet	lt
 801f286:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801f28a:	461f      	movlt	r7, r3
 801f28c:	2300      	movge	r3, #0
 801f28e:	232d      	movlt	r3, #45	@ 0x2d
 801f290:	700b      	strb	r3, [r1, #0]
 801f292:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f294:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801f298:	4691      	mov	r9, r2
 801f29a:	f023 0820 	bic.w	r8, r3, #32
 801f29e:	bfbc      	itt	lt
 801f2a0:	4632      	movlt	r2, r6
 801f2a2:	4616      	movlt	r6, r2
 801f2a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801f2a8:	d005      	beq.n	801f2b6 <__cvt+0x42>
 801f2aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801f2ae:	d100      	bne.n	801f2b2 <__cvt+0x3e>
 801f2b0:	3401      	adds	r4, #1
 801f2b2:	2102      	movs	r1, #2
 801f2b4:	e000      	b.n	801f2b8 <__cvt+0x44>
 801f2b6:	2103      	movs	r1, #3
 801f2b8:	ab03      	add	r3, sp, #12
 801f2ba:	9301      	str	r3, [sp, #4]
 801f2bc:	ab02      	add	r3, sp, #8
 801f2be:	9300      	str	r3, [sp, #0]
 801f2c0:	ec47 6b10 	vmov	d0, r6, r7
 801f2c4:	4653      	mov	r3, sl
 801f2c6:	4622      	mov	r2, r4
 801f2c8:	f000 ff26 	bl	8020118 <_dtoa_r>
 801f2cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801f2d0:	4605      	mov	r5, r0
 801f2d2:	d119      	bne.n	801f308 <__cvt+0x94>
 801f2d4:	f019 0f01 	tst.w	r9, #1
 801f2d8:	d00e      	beq.n	801f2f8 <__cvt+0x84>
 801f2da:	eb00 0904 	add.w	r9, r0, r4
 801f2de:	2200      	movs	r2, #0
 801f2e0:	2300      	movs	r3, #0
 801f2e2:	4630      	mov	r0, r6
 801f2e4:	4639      	mov	r1, r7
 801f2e6:	f7e1 fc17 	bl	8000b18 <__aeabi_dcmpeq>
 801f2ea:	b108      	cbz	r0, 801f2f0 <__cvt+0x7c>
 801f2ec:	f8cd 900c 	str.w	r9, [sp, #12]
 801f2f0:	2230      	movs	r2, #48	@ 0x30
 801f2f2:	9b03      	ldr	r3, [sp, #12]
 801f2f4:	454b      	cmp	r3, r9
 801f2f6:	d31e      	bcc.n	801f336 <__cvt+0xc2>
 801f2f8:	9b03      	ldr	r3, [sp, #12]
 801f2fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f2fc:	1b5b      	subs	r3, r3, r5
 801f2fe:	4628      	mov	r0, r5
 801f300:	6013      	str	r3, [r2, #0]
 801f302:	b004      	add	sp, #16
 801f304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f308:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801f30c:	eb00 0904 	add.w	r9, r0, r4
 801f310:	d1e5      	bne.n	801f2de <__cvt+0x6a>
 801f312:	7803      	ldrb	r3, [r0, #0]
 801f314:	2b30      	cmp	r3, #48	@ 0x30
 801f316:	d10a      	bne.n	801f32e <__cvt+0xba>
 801f318:	2200      	movs	r2, #0
 801f31a:	2300      	movs	r3, #0
 801f31c:	4630      	mov	r0, r6
 801f31e:	4639      	mov	r1, r7
 801f320:	f7e1 fbfa 	bl	8000b18 <__aeabi_dcmpeq>
 801f324:	b918      	cbnz	r0, 801f32e <__cvt+0xba>
 801f326:	f1c4 0401 	rsb	r4, r4, #1
 801f32a:	f8ca 4000 	str.w	r4, [sl]
 801f32e:	f8da 3000 	ldr.w	r3, [sl]
 801f332:	4499      	add	r9, r3
 801f334:	e7d3      	b.n	801f2de <__cvt+0x6a>
 801f336:	1c59      	adds	r1, r3, #1
 801f338:	9103      	str	r1, [sp, #12]
 801f33a:	701a      	strb	r2, [r3, #0]
 801f33c:	e7d9      	b.n	801f2f2 <__cvt+0x7e>

0801f33e <__exponent>:
 801f33e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f340:	2900      	cmp	r1, #0
 801f342:	bfba      	itte	lt
 801f344:	4249      	neglt	r1, r1
 801f346:	232d      	movlt	r3, #45	@ 0x2d
 801f348:	232b      	movge	r3, #43	@ 0x2b
 801f34a:	2909      	cmp	r1, #9
 801f34c:	7002      	strb	r2, [r0, #0]
 801f34e:	7043      	strb	r3, [r0, #1]
 801f350:	dd29      	ble.n	801f3a6 <__exponent+0x68>
 801f352:	f10d 0307 	add.w	r3, sp, #7
 801f356:	461d      	mov	r5, r3
 801f358:	270a      	movs	r7, #10
 801f35a:	461a      	mov	r2, r3
 801f35c:	fbb1 f6f7 	udiv	r6, r1, r7
 801f360:	fb07 1416 	mls	r4, r7, r6, r1
 801f364:	3430      	adds	r4, #48	@ 0x30
 801f366:	f802 4c01 	strb.w	r4, [r2, #-1]
 801f36a:	460c      	mov	r4, r1
 801f36c:	2c63      	cmp	r4, #99	@ 0x63
 801f36e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801f372:	4631      	mov	r1, r6
 801f374:	dcf1      	bgt.n	801f35a <__exponent+0x1c>
 801f376:	3130      	adds	r1, #48	@ 0x30
 801f378:	1e94      	subs	r4, r2, #2
 801f37a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801f37e:	1c41      	adds	r1, r0, #1
 801f380:	4623      	mov	r3, r4
 801f382:	42ab      	cmp	r3, r5
 801f384:	d30a      	bcc.n	801f39c <__exponent+0x5e>
 801f386:	f10d 0309 	add.w	r3, sp, #9
 801f38a:	1a9b      	subs	r3, r3, r2
 801f38c:	42ac      	cmp	r4, r5
 801f38e:	bf88      	it	hi
 801f390:	2300      	movhi	r3, #0
 801f392:	3302      	adds	r3, #2
 801f394:	4403      	add	r3, r0
 801f396:	1a18      	subs	r0, r3, r0
 801f398:	b003      	add	sp, #12
 801f39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f39c:	f813 6b01 	ldrb.w	r6, [r3], #1
 801f3a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 801f3a4:	e7ed      	b.n	801f382 <__exponent+0x44>
 801f3a6:	2330      	movs	r3, #48	@ 0x30
 801f3a8:	3130      	adds	r1, #48	@ 0x30
 801f3aa:	7083      	strb	r3, [r0, #2]
 801f3ac:	70c1      	strb	r1, [r0, #3]
 801f3ae:	1d03      	adds	r3, r0, #4
 801f3b0:	e7f1      	b.n	801f396 <__exponent+0x58>
	...

0801f3b4 <_printf_float>:
 801f3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3b8:	b08d      	sub	sp, #52	@ 0x34
 801f3ba:	460c      	mov	r4, r1
 801f3bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801f3c0:	4616      	mov	r6, r2
 801f3c2:	461f      	mov	r7, r3
 801f3c4:	4605      	mov	r5, r0
 801f3c6:	f000 fd1f 	bl	801fe08 <_localeconv_r>
 801f3ca:	6803      	ldr	r3, [r0, #0]
 801f3cc:	9304      	str	r3, [sp, #16]
 801f3ce:	4618      	mov	r0, r3
 801f3d0:	f7e0 ff76 	bl	80002c0 <strlen>
 801f3d4:	2300      	movs	r3, #0
 801f3d6:	930a      	str	r3, [sp, #40]	@ 0x28
 801f3d8:	f8d8 3000 	ldr.w	r3, [r8]
 801f3dc:	9005      	str	r0, [sp, #20]
 801f3de:	3307      	adds	r3, #7
 801f3e0:	f023 0307 	bic.w	r3, r3, #7
 801f3e4:	f103 0208 	add.w	r2, r3, #8
 801f3e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 801f3ec:	f8d4 b000 	ldr.w	fp, [r4]
 801f3f0:	f8c8 2000 	str.w	r2, [r8]
 801f3f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f3f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801f3fc:	9307      	str	r3, [sp, #28]
 801f3fe:	f8cd 8018 	str.w	r8, [sp, #24]
 801f402:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801f406:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f40a:	4b9c      	ldr	r3, [pc, #624]	@ (801f67c <_printf_float+0x2c8>)
 801f40c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801f410:	f7e1 fbb4 	bl	8000b7c <__aeabi_dcmpun>
 801f414:	bb70      	cbnz	r0, 801f474 <_printf_float+0xc0>
 801f416:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f41a:	4b98      	ldr	r3, [pc, #608]	@ (801f67c <_printf_float+0x2c8>)
 801f41c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801f420:	f7e1 fb8e 	bl	8000b40 <__aeabi_dcmple>
 801f424:	bb30      	cbnz	r0, 801f474 <_printf_float+0xc0>
 801f426:	2200      	movs	r2, #0
 801f428:	2300      	movs	r3, #0
 801f42a:	4640      	mov	r0, r8
 801f42c:	4649      	mov	r1, r9
 801f42e:	f7e1 fb7d 	bl	8000b2c <__aeabi_dcmplt>
 801f432:	b110      	cbz	r0, 801f43a <_printf_float+0x86>
 801f434:	232d      	movs	r3, #45	@ 0x2d
 801f436:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801f43a:	4a91      	ldr	r2, [pc, #580]	@ (801f680 <_printf_float+0x2cc>)
 801f43c:	4b91      	ldr	r3, [pc, #580]	@ (801f684 <_printf_float+0x2d0>)
 801f43e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801f442:	bf94      	ite	ls
 801f444:	4690      	movls	r8, r2
 801f446:	4698      	movhi	r8, r3
 801f448:	2303      	movs	r3, #3
 801f44a:	6123      	str	r3, [r4, #16]
 801f44c:	f02b 0304 	bic.w	r3, fp, #4
 801f450:	6023      	str	r3, [r4, #0]
 801f452:	f04f 0900 	mov.w	r9, #0
 801f456:	9700      	str	r7, [sp, #0]
 801f458:	4633      	mov	r3, r6
 801f45a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801f45c:	4621      	mov	r1, r4
 801f45e:	4628      	mov	r0, r5
 801f460:	f000 f9d2 	bl	801f808 <_printf_common>
 801f464:	3001      	adds	r0, #1
 801f466:	f040 808d 	bne.w	801f584 <_printf_float+0x1d0>
 801f46a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f46e:	b00d      	add	sp, #52	@ 0x34
 801f470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f474:	4642      	mov	r2, r8
 801f476:	464b      	mov	r3, r9
 801f478:	4640      	mov	r0, r8
 801f47a:	4649      	mov	r1, r9
 801f47c:	f7e1 fb7e 	bl	8000b7c <__aeabi_dcmpun>
 801f480:	b140      	cbz	r0, 801f494 <_printf_float+0xe0>
 801f482:	464b      	mov	r3, r9
 801f484:	2b00      	cmp	r3, #0
 801f486:	bfbc      	itt	lt
 801f488:	232d      	movlt	r3, #45	@ 0x2d
 801f48a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801f48e:	4a7e      	ldr	r2, [pc, #504]	@ (801f688 <_printf_float+0x2d4>)
 801f490:	4b7e      	ldr	r3, [pc, #504]	@ (801f68c <_printf_float+0x2d8>)
 801f492:	e7d4      	b.n	801f43e <_printf_float+0x8a>
 801f494:	6863      	ldr	r3, [r4, #4]
 801f496:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801f49a:	9206      	str	r2, [sp, #24]
 801f49c:	1c5a      	adds	r2, r3, #1
 801f49e:	d13b      	bne.n	801f518 <_printf_float+0x164>
 801f4a0:	2306      	movs	r3, #6
 801f4a2:	6063      	str	r3, [r4, #4]
 801f4a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801f4a8:	2300      	movs	r3, #0
 801f4aa:	6022      	str	r2, [r4, #0]
 801f4ac:	9303      	str	r3, [sp, #12]
 801f4ae:	ab0a      	add	r3, sp, #40	@ 0x28
 801f4b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 801f4b4:	ab09      	add	r3, sp, #36	@ 0x24
 801f4b6:	9300      	str	r3, [sp, #0]
 801f4b8:	6861      	ldr	r1, [r4, #4]
 801f4ba:	ec49 8b10 	vmov	d0, r8, r9
 801f4be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801f4c2:	4628      	mov	r0, r5
 801f4c4:	f7ff fed6 	bl	801f274 <__cvt>
 801f4c8:	9b06      	ldr	r3, [sp, #24]
 801f4ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f4cc:	2b47      	cmp	r3, #71	@ 0x47
 801f4ce:	4680      	mov	r8, r0
 801f4d0:	d129      	bne.n	801f526 <_printf_float+0x172>
 801f4d2:	1cc8      	adds	r0, r1, #3
 801f4d4:	db02      	blt.n	801f4dc <_printf_float+0x128>
 801f4d6:	6863      	ldr	r3, [r4, #4]
 801f4d8:	4299      	cmp	r1, r3
 801f4da:	dd41      	ble.n	801f560 <_printf_float+0x1ac>
 801f4dc:	f1aa 0a02 	sub.w	sl, sl, #2
 801f4e0:	fa5f fa8a 	uxtb.w	sl, sl
 801f4e4:	3901      	subs	r1, #1
 801f4e6:	4652      	mov	r2, sl
 801f4e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801f4ec:	9109      	str	r1, [sp, #36]	@ 0x24
 801f4ee:	f7ff ff26 	bl	801f33e <__exponent>
 801f4f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f4f4:	1813      	adds	r3, r2, r0
 801f4f6:	2a01      	cmp	r2, #1
 801f4f8:	4681      	mov	r9, r0
 801f4fa:	6123      	str	r3, [r4, #16]
 801f4fc:	dc02      	bgt.n	801f504 <_printf_float+0x150>
 801f4fe:	6822      	ldr	r2, [r4, #0]
 801f500:	07d2      	lsls	r2, r2, #31
 801f502:	d501      	bpl.n	801f508 <_printf_float+0x154>
 801f504:	3301      	adds	r3, #1
 801f506:	6123      	str	r3, [r4, #16]
 801f508:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801f50c:	2b00      	cmp	r3, #0
 801f50e:	d0a2      	beq.n	801f456 <_printf_float+0xa2>
 801f510:	232d      	movs	r3, #45	@ 0x2d
 801f512:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801f516:	e79e      	b.n	801f456 <_printf_float+0xa2>
 801f518:	9a06      	ldr	r2, [sp, #24]
 801f51a:	2a47      	cmp	r2, #71	@ 0x47
 801f51c:	d1c2      	bne.n	801f4a4 <_printf_float+0xf0>
 801f51e:	2b00      	cmp	r3, #0
 801f520:	d1c0      	bne.n	801f4a4 <_printf_float+0xf0>
 801f522:	2301      	movs	r3, #1
 801f524:	e7bd      	b.n	801f4a2 <_printf_float+0xee>
 801f526:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801f52a:	d9db      	bls.n	801f4e4 <_printf_float+0x130>
 801f52c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801f530:	d118      	bne.n	801f564 <_printf_float+0x1b0>
 801f532:	2900      	cmp	r1, #0
 801f534:	6863      	ldr	r3, [r4, #4]
 801f536:	dd0b      	ble.n	801f550 <_printf_float+0x19c>
 801f538:	6121      	str	r1, [r4, #16]
 801f53a:	b913      	cbnz	r3, 801f542 <_printf_float+0x18e>
 801f53c:	6822      	ldr	r2, [r4, #0]
 801f53e:	07d0      	lsls	r0, r2, #31
 801f540:	d502      	bpl.n	801f548 <_printf_float+0x194>
 801f542:	3301      	adds	r3, #1
 801f544:	440b      	add	r3, r1
 801f546:	6123      	str	r3, [r4, #16]
 801f548:	65a1      	str	r1, [r4, #88]	@ 0x58
 801f54a:	f04f 0900 	mov.w	r9, #0
 801f54e:	e7db      	b.n	801f508 <_printf_float+0x154>
 801f550:	b913      	cbnz	r3, 801f558 <_printf_float+0x1a4>
 801f552:	6822      	ldr	r2, [r4, #0]
 801f554:	07d2      	lsls	r2, r2, #31
 801f556:	d501      	bpl.n	801f55c <_printf_float+0x1a8>
 801f558:	3302      	adds	r3, #2
 801f55a:	e7f4      	b.n	801f546 <_printf_float+0x192>
 801f55c:	2301      	movs	r3, #1
 801f55e:	e7f2      	b.n	801f546 <_printf_float+0x192>
 801f560:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801f564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f566:	4299      	cmp	r1, r3
 801f568:	db05      	blt.n	801f576 <_printf_float+0x1c2>
 801f56a:	6823      	ldr	r3, [r4, #0]
 801f56c:	6121      	str	r1, [r4, #16]
 801f56e:	07d8      	lsls	r0, r3, #31
 801f570:	d5ea      	bpl.n	801f548 <_printf_float+0x194>
 801f572:	1c4b      	adds	r3, r1, #1
 801f574:	e7e7      	b.n	801f546 <_printf_float+0x192>
 801f576:	2900      	cmp	r1, #0
 801f578:	bfd4      	ite	le
 801f57a:	f1c1 0202 	rsble	r2, r1, #2
 801f57e:	2201      	movgt	r2, #1
 801f580:	4413      	add	r3, r2
 801f582:	e7e0      	b.n	801f546 <_printf_float+0x192>
 801f584:	6823      	ldr	r3, [r4, #0]
 801f586:	055a      	lsls	r2, r3, #21
 801f588:	d407      	bmi.n	801f59a <_printf_float+0x1e6>
 801f58a:	6923      	ldr	r3, [r4, #16]
 801f58c:	4642      	mov	r2, r8
 801f58e:	4631      	mov	r1, r6
 801f590:	4628      	mov	r0, r5
 801f592:	47b8      	blx	r7
 801f594:	3001      	adds	r0, #1
 801f596:	d12b      	bne.n	801f5f0 <_printf_float+0x23c>
 801f598:	e767      	b.n	801f46a <_printf_float+0xb6>
 801f59a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801f59e:	f240 80dd 	bls.w	801f75c <_printf_float+0x3a8>
 801f5a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801f5a6:	2200      	movs	r2, #0
 801f5a8:	2300      	movs	r3, #0
 801f5aa:	f7e1 fab5 	bl	8000b18 <__aeabi_dcmpeq>
 801f5ae:	2800      	cmp	r0, #0
 801f5b0:	d033      	beq.n	801f61a <_printf_float+0x266>
 801f5b2:	4a37      	ldr	r2, [pc, #220]	@ (801f690 <_printf_float+0x2dc>)
 801f5b4:	2301      	movs	r3, #1
 801f5b6:	4631      	mov	r1, r6
 801f5b8:	4628      	mov	r0, r5
 801f5ba:	47b8      	blx	r7
 801f5bc:	3001      	adds	r0, #1
 801f5be:	f43f af54 	beq.w	801f46a <_printf_float+0xb6>
 801f5c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801f5c6:	4543      	cmp	r3, r8
 801f5c8:	db02      	blt.n	801f5d0 <_printf_float+0x21c>
 801f5ca:	6823      	ldr	r3, [r4, #0]
 801f5cc:	07d8      	lsls	r0, r3, #31
 801f5ce:	d50f      	bpl.n	801f5f0 <_printf_float+0x23c>
 801f5d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f5d4:	4631      	mov	r1, r6
 801f5d6:	4628      	mov	r0, r5
 801f5d8:	47b8      	blx	r7
 801f5da:	3001      	adds	r0, #1
 801f5dc:	f43f af45 	beq.w	801f46a <_printf_float+0xb6>
 801f5e0:	f04f 0900 	mov.w	r9, #0
 801f5e4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801f5e8:	f104 0a1a 	add.w	sl, r4, #26
 801f5ec:	45c8      	cmp	r8, r9
 801f5ee:	dc09      	bgt.n	801f604 <_printf_float+0x250>
 801f5f0:	6823      	ldr	r3, [r4, #0]
 801f5f2:	079b      	lsls	r3, r3, #30
 801f5f4:	f100 8103 	bmi.w	801f7fe <_printf_float+0x44a>
 801f5f8:	68e0      	ldr	r0, [r4, #12]
 801f5fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f5fc:	4298      	cmp	r0, r3
 801f5fe:	bfb8      	it	lt
 801f600:	4618      	movlt	r0, r3
 801f602:	e734      	b.n	801f46e <_printf_float+0xba>
 801f604:	2301      	movs	r3, #1
 801f606:	4652      	mov	r2, sl
 801f608:	4631      	mov	r1, r6
 801f60a:	4628      	mov	r0, r5
 801f60c:	47b8      	blx	r7
 801f60e:	3001      	adds	r0, #1
 801f610:	f43f af2b 	beq.w	801f46a <_printf_float+0xb6>
 801f614:	f109 0901 	add.w	r9, r9, #1
 801f618:	e7e8      	b.n	801f5ec <_printf_float+0x238>
 801f61a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f61c:	2b00      	cmp	r3, #0
 801f61e:	dc39      	bgt.n	801f694 <_printf_float+0x2e0>
 801f620:	4a1b      	ldr	r2, [pc, #108]	@ (801f690 <_printf_float+0x2dc>)
 801f622:	2301      	movs	r3, #1
 801f624:	4631      	mov	r1, r6
 801f626:	4628      	mov	r0, r5
 801f628:	47b8      	blx	r7
 801f62a:	3001      	adds	r0, #1
 801f62c:	f43f af1d 	beq.w	801f46a <_printf_float+0xb6>
 801f630:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801f634:	ea59 0303 	orrs.w	r3, r9, r3
 801f638:	d102      	bne.n	801f640 <_printf_float+0x28c>
 801f63a:	6823      	ldr	r3, [r4, #0]
 801f63c:	07d9      	lsls	r1, r3, #31
 801f63e:	d5d7      	bpl.n	801f5f0 <_printf_float+0x23c>
 801f640:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f644:	4631      	mov	r1, r6
 801f646:	4628      	mov	r0, r5
 801f648:	47b8      	blx	r7
 801f64a:	3001      	adds	r0, #1
 801f64c:	f43f af0d 	beq.w	801f46a <_printf_float+0xb6>
 801f650:	f04f 0a00 	mov.w	sl, #0
 801f654:	f104 0b1a 	add.w	fp, r4, #26
 801f658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f65a:	425b      	negs	r3, r3
 801f65c:	4553      	cmp	r3, sl
 801f65e:	dc01      	bgt.n	801f664 <_printf_float+0x2b0>
 801f660:	464b      	mov	r3, r9
 801f662:	e793      	b.n	801f58c <_printf_float+0x1d8>
 801f664:	2301      	movs	r3, #1
 801f666:	465a      	mov	r2, fp
 801f668:	4631      	mov	r1, r6
 801f66a:	4628      	mov	r0, r5
 801f66c:	47b8      	blx	r7
 801f66e:	3001      	adds	r0, #1
 801f670:	f43f aefb 	beq.w	801f46a <_printf_float+0xb6>
 801f674:	f10a 0a01 	add.w	sl, sl, #1
 801f678:	e7ee      	b.n	801f658 <_printf_float+0x2a4>
 801f67a:	bf00      	nop
 801f67c:	7fefffff 	.word	0x7fefffff
 801f680:	08022c88 	.word	0x08022c88
 801f684:	08022c8c 	.word	0x08022c8c
 801f688:	08022c90 	.word	0x08022c90
 801f68c:	08022c94 	.word	0x08022c94
 801f690:	08022c98 	.word	0x08022c98
 801f694:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801f696:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801f69a:	4553      	cmp	r3, sl
 801f69c:	bfa8      	it	ge
 801f69e:	4653      	movge	r3, sl
 801f6a0:	2b00      	cmp	r3, #0
 801f6a2:	4699      	mov	r9, r3
 801f6a4:	dc36      	bgt.n	801f714 <_printf_float+0x360>
 801f6a6:	f04f 0b00 	mov.w	fp, #0
 801f6aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f6ae:	f104 021a 	add.w	r2, r4, #26
 801f6b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801f6b4:	9306      	str	r3, [sp, #24]
 801f6b6:	eba3 0309 	sub.w	r3, r3, r9
 801f6ba:	455b      	cmp	r3, fp
 801f6bc:	dc31      	bgt.n	801f722 <_printf_float+0x36e>
 801f6be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f6c0:	459a      	cmp	sl, r3
 801f6c2:	dc3a      	bgt.n	801f73a <_printf_float+0x386>
 801f6c4:	6823      	ldr	r3, [r4, #0]
 801f6c6:	07da      	lsls	r2, r3, #31
 801f6c8:	d437      	bmi.n	801f73a <_printf_float+0x386>
 801f6ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f6cc:	ebaa 0903 	sub.w	r9, sl, r3
 801f6d0:	9b06      	ldr	r3, [sp, #24]
 801f6d2:	ebaa 0303 	sub.w	r3, sl, r3
 801f6d6:	4599      	cmp	r9, r3
 801f6d8:	bfa8      	it	ge
 801f6da:	4699      	movge	r9, r3
 801f6dc:	f1b9 0f00 	cmp.w	r9, #0
 801f6e0:	dc33      	bgt.n	801f74a <_printf_float+0x396>
 801f6e2:	f04f 0800 	mov.w	r8, #0
 801f6e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f6ea:	f104 0b1a 	add.w	fp, r4, #26
 801f6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f6f0:	ebaa 0303 	sub.w	r3, sl, r3
 801f6f4:	eba3 0309 	sub.w	r3, r3, r9
 801f6f8:	4543      	cmp	r3, r8
 801f6fa:	f77f af79 	ble.w	801f5f0 <_printf_float+0x23c>
 801f6fe:	2301      	movs	r3, #1
 801f700:	465a      	mov	r2, fp
 801f702:	4631      	mov	r1, r6
 801f704:	4628      	mov	r0, r5
 801f706:	47b8      	blx	r7
 801f708:	3001      	adds	r0, #1
 801f70a:	f43f aeae 	beq.w	801f46a <_printf_float+0xb6>
 801f70e:	f108 0801 	add.w	r8, r8, #1
 801f712:	e7ec      	b.n	801f6ee <_printf_float+0x33a>
 801f714:	4642      	mov	r2, r8
 801f716:	4631      	mov	r1, r6
 801f718:	4628      	mov	r0, r5
 801f71a:	47b8      	blx	r7
 801f71c:	3001      	adds	r0, #1
 801f71e:	d1c2      	bne.n	801f6a6 <_printf_float+0x2f2>
 801f720:	e6a3      	b.n	801f46a <_printf_float+0xb6>
 801f722:	2301      	movs	r3, #1
 801f724:	4631      	mov	r1, r6
 801f726:	4628      	mov	r0, r5
 801f728:	9206      	str	r2, [sp, #24]
 801f72a:	47b8      	blx	r7
 801f72c:	3001      	adds	r0, #1
 801f72e:	f43f ae9c 	beq.w	801f46a <_printf_float+0xb6>
 801f732:	9a06      	ldr	r2, [sp, #24]
 801f734:	f10b 0b01 	add.w	fp, fp, #1
 801f738:	e7bb      	b.n	801f6b2 <_printf_float+0x2fe>
 801f73a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f73e:	4631      	mov	r1, r6
 801f740:	4628      	mov	r0, r5
 801f742:	47b8      	blx	r7
 801f744:	3001      	adds	r0, #1
 801f746:	d1c0      	bne.n	801f6ca <_printf_float+0x316>
 801f748:	e68f      	b.n	801f46a <_printf_float+0xb6>
 801f74a:	9a06      	ldr	r2, [sp, #24]
 801f74c:	464b      	mov	r3, r9
 801f74e:	4442      	add	r2, r8
 801f750:	4631      	mov	r1, r6
 801f752:	4628      	mov	r0, r5
 801f754:	47b8      	blx	r7
 801f756:	3001      	adds	r0, #1
 801f758:	d1c3      	bne.n	801f6e2 <_printf_float+0x32e>
 801f75a:	e686      	b.n	801f46a <_printf_float+0xb6>
 801f75c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801f760:	f1ba 0f01 	cmp.w	sl, #1
 801f764:	dc01      	bgt.n	801f76a <_printf_float+0x3b6>
 801f766:	07db      	lsls	r3, r3, #31
 801f768:	d536      	bpl.n	801f7d8 <_printf_float+0x424>
 801f76a:	2301      	movs	r3, #1
 801f76c:	4642      	mov	r2, r8
 801f76e:	4631      	mov	r1, r6
 801f770:	4628      	mov	r0, r5
 801f772:	47b8      	blx	r7
 801f774:	3001      	adds	r0, #1
 801f776:	f43f ae78 	beq.w	801f46a <_printf_float+0xb6>
 801f77a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f77e:	4631      	mov	r1, r6
 801f780:	4628      	mov	r0, r5
 801f782:	47b8      	blx	r7
 801f784:	3001      	adds	r0, #1
 801f786:	f43f ae70 	beq.w	801f46a <_printf_float+0xb6>
 801f78a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801f78e:	2200      	movs	r2, #0
 801f790:	2300      	movs	r3, #0
 801f792:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801f796:	f7e1 f9bf 	bl	8000b18 <__aeabi_dcmpeq>
 801f79a:	b9c0      	cbnz	r0, 801f7ce <_printf_float+0x41a>
 801f79c:	4653      	mov	r3, sl
 801f79e:	f108 0201 	add.w	r2, r8, #1
 801f7a2:	4631      	mov	r1, r6
 801f7a4:	4628      	mov	r0, r5
 801f7a6:	47b8      	blx	r7
 801f7a8:	3001      	adds	r0, #1
 801f7aa:	d10c      	bne.n	801f7c6 <_printf_float+0x412>
 801f7ac:	e65d      	b.n	801f46a <_printf_float+0xb6>
 801f7ae:	2301      	movs	r3, #1
 801f7b0:	465a      	mov	r2, fp
 801f7b2:	4631      	mov	r1, r6
 801f7b4:	4628      	mov	r0, r5
 801f7b6:	47b8      	blx	r7
 801f7b8:	3001      	adds	r0, #1
 801f7ba:	f43f ae56 	beq.w	801f46a <_printf_float+0xb6>
 801f7be:	f108 0801 	add.w	r8, r8, #1
 801f7c2:	45d0      	cmp	r8, sl
 801f7c4:	dbf3      	blt.n	801f7ae <_printf_float+0x3fa>
 801f7c6:	464b      	mov	r3, r9
 801f7c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801f7cc:	e6df      	b.n	801f58e <_printf_float+0x1da>
 801f7ce:	f04f 0800 	mov.w	r8, #0
 801f7d2:	f104 0b1a 	add.w	fp, r4, #26
 801f7d6:	e7f4      	b.n	801f7c2 <_printf_float+0x40e>
 801f7d8:	2301      	movs	r3, #1
 801f7da:	4642      	mov	r2, r8
 801f7dc:	e7e1      	b.n	801f7a2 <_printf_float+0x3ee>
 801f7de:	2301      	movs	r3, #1
 801f7e0:	464a      	mov	r2, r9
 801f7e2:	4631      	mov	r1, r6
 801f7e4:	4628      	mov	r0, r5
 801f7e6:	47b8      	blx	r7
 801f7e8:	3001      	adds	r0, #1
 801f7ea:	f43f ae3e 	beq.w	801f46a <_printf_float+0xb6>
 801f7ee:	f108 0801 	add.w	r8, r8, #1
 801f7f2:	68e3      	ldr	r3, [r4, #12]
 801f7f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f7f6:	1a5b      	subs	r3, r3, r1
 801f7f8:	4543      	cmp	r3, r8
 801f7fa:	dcf0      	bgt.n	801f7de <_printf_float+0x42a>
 801f7fc:	e6fc      	b.n	801f5f8 <_printf_float+0x244>
 801f7fe:	f04f 0800 	mov.w	r8, #0
 801f802:	f104 0919 	add.w	r9, r4, #25
 801f806:	e7f4      	b.n	801f7f2 <_printf_float+0x43e>

0801f808 <_printf_common>:
 801f808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f80c:	4616      	mov	r6, r2
 801f80e:	4698      	mov	r8, r3
 801f810:	688a      	ldr	r2, [r1, #8]
 801f812:	690b      	ldr	r3, [r1, #16]
 801f814:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801f818:	4293      	cmp	r3, r2
 801f81a:	bfb8      	it	lt
 801f81c:	4613      	movlt	r3, r2
 801f81e:	6033      	str	r3, [r6, #0]
 801f820:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801f824:	4607      	mov	r7, r0
 801f826:	460c      	mov	r4, r1
 801f828:	b10a      	cbz	r2, 801f82e <_printf_common+0x26>
 801f82a:	3301      	adds	r3, #1
 801f82c:	6033      	str	r3, [r6, #0]
 801f82e:	6823      	ldr	r3, [r4, #0]
 801f830:	0699      	lsls	r1, r3, #26
 801f832:	bf42      	ittt	mi
 801f834:	6833      	ldrmi	r3, [r6, #0]
 801f836:	3302      	addmi	r3, #2
 801f838:	6033      	strmi	r3, [r6, #0]
 801f83a:	6825      	ldr	r5, [r4, #0]
 801f83c:	f015 0506 	ands.w	r5, r5, #6
 801f840:	d106      	bne.n	801f850 <_printf_common+0x48>
 801f842:	f104 0a19 	add.w	sl, r4, #25
 801f846:	68e3      	ldr	r3, [r4, #12]
 801f848:	6832      	ldr	r2, [r6, #0]
 801f84a:	1a9b      	subs	r3, r3, r2
 801f84c:	42ab      	cmp	r3, r5
 801f84e:	dc26      	bgt.n	801f89e <_printf_common+0x96>
 801f850:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801f854:	6822      	ldr	r2, [r4, #0]
 801f856:	3b00      	subs	r3, #0
 801f858:	bf18      	it	ne
 801f85a:	2301      	movne	r3, #1
 801f85c:	0692      	lsls	r2, r2, #26
 801f85e:	d42b      	bmi.n	801f8b8 <_printf_common+0xb0>
 801f860:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801f864:	4641      	mov	r1, r8
 801f866:	4638      	mov	r0, r7
 801f868:	47c8      	blx	r9
 801f86a:	3001      	adds	r0, #1
 801f86c:	d01e      	beq.n	801f8ac <_printf_common+0xa4>
 801f86e:	6823      	ldr	r3, [r4, #0]
 801f870:	6922      	ldr	r2, [r4, #16]
 801f872:	f003 0306 	and.w	r3, r3, #6
 801f876:	2b04      	cmp	r3, #4
 801f878:	bf02      	ittt	eq
 801f87a:	68e5      	ldreq	r5, [r4, #12]
 801f87c:	6833      	ldreq	r3, [r6, #0]
 801f87e:	1aed      	subeq	r5, r5, r3
 801f880:	68a3      	ldr	r3, [r4, #8]
 801f882:	bf0c      	ite	eq
 801f884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f888:	2500      	movne	r5, #0
 801f88a:	4293      	cmp	r3, r2
 801f88c:	bfc4      	itt	gt
 801f88e:	1a9b      	subgt	r3, r3, r2
 801f890:	18ed      	addgt	r5, r5, r3
 801f892:	2600      	movs	r6, #0
 801f894:	341a      	adds	r4, #26
 801f896:	42b5      	cmp	r5, r6
 801f898:	d11a      	bne.n	801f8d0 <_printf_common+0xc8>
 801f89a:	2000      	movs	r0, #0
 801f89c:	e008      	b.n	801f8b0 <_printf_common+0xa8>
 801f89e:	2301      	movs	r3, #1
 801f8a0:	4652      	mov	r2, sl
 801f8a2:	4641      	mov	r1, r8
 801f8a4:	4638      	mov	r0, r7
 801f8a6:	47c8      	blx	r9
 801f8a8:	3001      	adds	r0, #1
 801f8aa:	d103      	bne.n	801f8b4 <_printf_common+0xac>
 801f8ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f8b4:	3501      	adds	r5, #1
 801f8b6:	e7c6      	b.n	801f846 <_printf_common+0x3e>
 801f8b8:	18e1      	adds	r1, r4, r3
 801f8ba:	1c5a      	adds	r2, r3, #1
 801f8bc:	2030      	movs	r0, #48	@ 0x30
 801f8be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801f8c2:	4422      	add	r2, r4
 801f8c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801f8c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801f8cc:	3302      	adds	r3, #2
 801f8ce:	e7c7      	b.n	801f860 <_printf_common+0x58>
 801f8d0:	2301      	movs	r3, #1
 801f8d2:	4622      	mov	r2, r4
 801f8d4:	4641      	mov	r1, r8
 801f8d6:	4638      	mov	r0, r7
 801f8d8:	47c8      	blx	r9
 801f8da:	3001      	adds	r0, #1
 801f8dc:	d0e6      	beq.n	801f8ac <_printf_common+0xa4>
 801f8de:	3601      	adds	r6, #1
 801f8e0:	e7d9      	b.n	801f896 <_printf_common+0x8e>
	...

0801f8e4 <_printf_i>:
 801f8e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f8e8:	7e0f      	ldrb	r7, [r1, #24]
 801f8ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801f8ec:	2f78      	cmp	r7, #120	@ 0x78
 801f8ee:	4691      	mov	r9, r2
 801f8f0:	4680      	mov	r8, r0
 801f8f2:	460c      	mov	r4, r1
 801f8f4:	469a      	mov	sl, r3
 801f8f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801f8fa:	d807      	bhi.n	801f90c <_printf_i+0x28>
 801f8fc:	2f62      	cmp	r7, #98	@ 0x62
 801f8fe:	d80a      	bhi.n	801f916 <_printf_i+0x32>
 801f900:	2f00      	cmp	r7, #0
 801f902:	f000 80d2 	beq.w	801faaa <_printf_i+0x1c6>
 801f906:	2f58      	cmp	r7, #88	@ 0x58
 801f908:	f000 80b9 	beq.w	801fa7e <_printf_i+0x19a>
 801f90c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801f910:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801f914:	e03a      	b.n	801f98c <_printf_i+0xa8>
 801f916:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801f91a:	2b15      	cmp	r3, #21
 801f91c:	d8f6      	bhi.n	801f90c <_printf_i+0x28>
 801f91e:	a101      	add	r1, pc, #4	@ (adr r1, 801f924 <_printf_i+0x40>)
 801f920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f924:	0801f97d 	.word	0x0801f97d
 801f928:	0801f991 	.word	0x0801f991
 801f92c:	0801f90d 	.word	0x0801f90d
 801f930:	0801f90d 	.word	0x0801f90d
 801f934:	0801f90d 	.word	0x0801f90d
 801f938:	0801f90d 	.word	0x0801f90d
 801f93c:	0801f991 	.word	0x0801f991
 801f940:	0801f90d 	.word	0x0801f90d
 801f944:	0801f90d 	.word	0x0801f90d
 801f948:	0801f90d 	.word	0x0801f90d
 801f94c:	0801f90d 	.word	0x0801f90d
 801f950:	0801fa91 	.word	0x0801fa91
 801f954:	0801f9bb 	.word	0x0801f9bb
 801f958:	0801fa4b 	.word	0x0801fa4b
 801f95c:	0801f90d 	.word	0x0801f90d
 801f960:	0801f90d 	.word	0x0801f90d
 801f964:	0801fab3 	.word	0x0801fab3
 801f968:	0801f90d 	.word	0x0801f90d
 801f96c:	0801f9bb 	.word	0x0801f9bb
 801f970:	0801f90d 	.word	0x0801f90d
 801f974:	0801f90d 	.word	0x0801f90d
 801f978:	0801fa53 	.word	0x0801fa53
 801f97c:	6833      	ldr	r3, [r6, #0]
 801f97e:	1d1a      	adds	r2, r3, #4
 801f980:	681b      	ldr	r3, [r3, #0]
 801f982:	6032      	str	r2, [r6, #0]
 801f984:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801f988:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801f98c:	2301      	movs	r3, #1
 801f98e:	e09d      	b.n	801facc <_printf_i+0x1e8>
 801f990:	6833      	ldr	r3, [r6, #0]
 801f992:	6820      	ldr	r0, [r4, #0]
 801f994:	1d19      	adds	r1, r3, #4
 801f996:	6031      	str	r1, [r6, #0]
 801f998:	0606      	lsls	r6, r0, #24
 801f99a:	d501      	bpl.n	801f9a0 <_printf_i+0xbc>
 801f99c:	681d      	ldr	r5, [r3, #0]
 801f99e:	e003      	b.n	801f9a8 <_printf_i+0xc4>
 801f9a0:	0645      	lsls	r5, r0, #25
 801f9a2:	d5fb      	bpl.n	801f99c <_printf_i+0xb8>
 801f9a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801f9a8:	2d00      	cmp	r5, #0
 801f9aa:	da03      	bge.n	801f9b4 <_printf_i+0xd0>
 801f9ac:	232d      	movs	r3, #45	@ 0x2d
 801f9ae:	426d      	negs	r5, r5
 801f9b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801f9b4:	4859      	ldr	r0, [pc, #356]	@ (801fb1c <_printf_i+0x238>)
 801f9b6:	230a      	movs	r3, #10
 801f9b8:	e011      	b.n	801f9de <_printf_i+0xfa>
 801f9ba:	6821      	ldr	r1, [r4, #0]
 801f9bc:	6833      	ldr	r3, [r6, #0]
 801f9be:	0608      	lsls	r0, r1, #24
 801f9c0:	f853 5b04 	ldr.w	r5, [r3], #4
 801f9c4:	d402      	bmi.n	801f9cc <_printf_i+0xe8>
 801f9c6:	0649      	lsls	r1, r1, #25
 801f9c8:	bf48      	it	mi
 801f9ca:	b2ad      	uxthmi	r5, r5
 801f9cc:	2f6f      	cmp	r7, #111	@ 0x6f
 801f9ce:	4853      	ldr	r0, [pc, #332]	@ (801fb1c <_printf_i+0x238>)
 801f9d0:	6033      	str	r3, [r6, #0]
 801f9d2:	bf14      	ite	ne
 801f9d4:	230a      	movne	r3, #10
 801f9d6:	2308      	moveq	r3, #8
 801f9d8:	2100      	movs	r1, #0
 801f9da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801f9de:	6866      	ldr	r6, [r4, #4]
 801f9e0:	60a6      	str	r6, [r4, #8]
 801f9e2:	2e00      	cmp	r6, #0
 801f9e4:	bfa2      	ittt	ge
 801f9e6:	6821      	ldrge	r1, [r4, #0]
 801f9e8:	f021 0104 	bicge.w	r1, r1, #4
 801f9ec:	6021      	strge	r1, [r4, #0]
 801f9ee:	b90d      	cbnz	r5, 801f9f4 <_printf_i+0x110>
 801f9f0:	2e00      	cmp	r6, #0
 801f9f2:	d04b      	beq.n	801fa8c <_printf_i+0x1a8>
 801f9f4:	4616      	mov	r6, r2
 801f9f6:	fbb5 f1f3 	udiv	r1, r5, r3
 801f9fa:	fb03 5711 	mls	r7, r3, r1, r5
 801f9fe:	5dc7      	ldrb	r7, [r0, r7]
 801fa00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801fa04:	462f      	mov	r7, r5
 801fa06:	42bb      	cmp	r3, r7
 801fa08:	460d      	mov	r5, r1
 801fa0a:	d9f4      	bls.n	801f9f6 <_printf_i+0x112>
 801fa0c:	2b08      	cmp	r3, #8
 801fa0e:	d10b      	bne.n	801fa28 <_printf_i+0x144>
 801fa10:	6823      	ldr	r3, [r4, #0]
 801fa12:	07df      	lsls	r7, r3, #31
 801fa14:	d508      	bpl.n	801fa28 <_printf_i+0x144>
 801fa16:	6923      	ldr	r3, [r4, #16]
 801fa18:	6861      	ldr	r1, [r4, #4]
 801fa1a:	4299      	cmp	r1, r3
 801fa1c:	bfde      	ittt	le
 801fa1e:	2330      	movle	r3, #48	@ 0x30
 801fa20:	f806 3c01 	strble.w	r3, [r6, #-1]
 801fa24:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801fa28:	1b92      	subs	r2, r2, r6
 801fa2a:	6122      	str	r2, [r4, #16]
 801fa2c:	f8cd a000 	str.w	sl, [sp]
 801fa30:	464b      	mov	r3, r9
 801fa32:	aa03      	add	r2, sp, #12
 801fa34:	4621      	mov	r1, r4
 801fa36:	4640      	mov	r0, r8
 801fa38:	f7ff fee6 	bl	801f808 <_printf_common>
 801fa3c:	3001      	adds	r0, #1
 801fa3e:	d14a      	bne.n	801fad6 <_printf_i+0x1f2>
 801fa40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fa44:	b004      	add	sp, #16
 801fa46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fa4a:	6823      	ldr	r3, [r4, #0]
 801fa4c:	f043 0320 	orr.w	r3, r3, #32
 801fa50:	6023      	str	r3, [r4, #0]
 801fa52:	4833      	ldr	r0, [pc, #204]	@ (801fb20 <_printf_i+0x23c>)
 801fa54:	2778      	movs	r7, #120	@ 0x78
 801fa56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801fa5a:	6823      	ldr	r3, [r4, #0]
 801fa5c:	6831      	ldr	r1, [r6, #0]
 801fa5e:	061f      	lsls	r7, r3, #24
 801fa60:	f851 5b04 	ldr.w	r5, [r1], #4
 801fa64:	d402      	bmi.n	801fa6c <_printf_i+0x188>
 801fa66:	065f      	lsls	r7, r3, #25
 801fa68:	bf48      	it	mi
 801fa6a:	b2ad      	uxthmi	r5, r5
 801fa6c:	6031      	str	r1, [r6, #0]
 801fa6e:	07d9      	lsls	r1, r3, #31
 801fa70:	bf44      	itt	mi
 801fa72:	f043 0320 	orrmi.w	r3, r3, #32
 801fa76:	6023      	strmi	r3, [r4, #0]
 801fa78:	b11d      	cbz	r5, 801fa82 <_printf_i+0x19e>
 801fa7a:	2310      	movs	r3, #16
 801fa7c:	e7ac      	b.n	801f9d8 <_printf_i+0xf4>
 801fa7e:	4827      	ldr	r0, [pc, #156]	@ (801fb1c <_printf_i+0x238>)
 801fa80:	e7e9      	b.n	801fa56 <_printf_i+0x172>
 801fa82:	6823      	ldr	r3, [r4, #0]
 801fa84:	f023 0320 	bic.w	r3, r3, #32
 801fa88:	6023      	str	r3, [r4, #0]
 801fa8a:	e7f6      	b.n	801fa7a <_printf_i+0x196>
 801fa8c:	4616      	mov	r6, r2
 801fa8e:	e7bd      	b.n	801fa0c <_printf_i+0x128>
 801fa90:	6833      	ldr	r3, [r6, #0]
 801fa92:	6825      	ldr	r5, [r4, #0]
 801fa94:	6961      	ldr	r1, [r4, #20]
 801fa96:	1d18      	adds	r0, r3, #4
 801fa98:	6030      	str	r0, [r6, #0]
 801fa9a:	062e      	lsls	r6, r5, #24
 801fa9c:	681b      	ldr	r3, [r3, #0]
 801fa9e:	d501      	bpl.n	801faa4 <_printf_i+0x1c0>
 801faa0:	6019      	str	r1, [r3, #0]
 801faa2:	e002      	b.n	801faaa <_printf_i+0x1c6>
 801faa4:	0668      	lsls	r0, r5, #25
 801faa6:	d5fb      	bpl.n	801faa0 <_printf_i+0x1bc>
 801faa8:	8019      	strh	r1, [r3, #0]
 801faaa:	2300      	movs	r3, #0
 801faac:	6123      	str	r3, [r4, #16]
 801faae:	4616      	mov	r6, r2
 801fab0:	e7bc      	b.n	801fa2c <_printf_i+0x148>
 801fab2:	6833      	ldr	r3, [r6, #0]
 801fab4:	1d1a      	adds	r2, r3, #4
 801fab6:	6032      	str	r2, [r6, #0]
 801fab8:	681e      	ldr	r6, [r3, #0]
 801faba:	6862      	ldr	r2, [r4, #4]
 801fabc:	2100      	movs	r1, #0
 801fabe:	4630      	mov	r0, r6
 801fac0:	f7e0 fbae 	bl	8000220 <memchr>
 801fac4:	b108      	cbz	r0, 801faca <_printf_i+0x1e6>
 801fac6:	1b80      	subs	r0, r0, r6
 801fac8:	6060      	str	r0, [r4, #4]
 801faca:	6863      	ldr	r3, [r4, #4]
 801facc:	6123      	str	r3, [r4, #16]
 801face:	2300      	movs	r3, #0
 801fad0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801fad4:	e7aa      	b.n	801fa2c <_printf_i+0x148>
 801fad6:	6923      	ldr	r3, [r4, #16]
 801fad8:	4632      	mov	r2, r6
 801fada:	4649      	mov	r1, r9
 801fadc:	4640      	mov	r0, r8
 801fade:	47d0      	blx	sl
 801fae0:	3001      	adds	r0, #1
 801fae2:	d0ad      	beq.n	801fa40 <_printf_i+0x15c>
 801fae4:	6823      	ldr	r3, [r4, #0]
 801fae6:	079b      	lsls	r3, r3, #30
 801fae8:	d413      	bmi.n	801fb12 <_printf_i+0x22e>
 801faea:	68e0      	ldr	r0, [r4, #12]
 801faec:	9b03      	ldr	r3, [sp, #12]
 801faee:	4298      	cmp	r0, r3
 801faf0:	bfb8      	it	lt
 801faf2:	4618      	movlt	r0, r3
 801faf4:	e7a6      	b.n	801fa44 <_printf_i+0x160>
 801faf6:	2301      	movs	r3, #1
 801faf8:	4632      	mov	r2, r6
 801fafa:	4649      	mov	r1, r9
 801fafc:	4640      	mov	r0, r8
 801fafe:	47d0      	blx	sl
 801fb00:	3001      	adds	r0, #1
 801fb02:	d09d      	beq.n	801fa40 <_printf_i+0x15c>
 801fb04:	3501      	adds	r5, #1
 801fb06:	68e3      	ldr	r3, [r4, #12]
 801fb08:	9903      	ldr	r1, [sp, #12]
 801fb0a:	1a5b      	subs	r3, r3, r1
 801fb0c:	42ab      	cmp	r3, r5
 801fb0e:	dcf2      	bgt.n	801faf6 <_printf_i+0x212>
 801fb10:	e7eb      	b.n	801faea <_printf_i+0x206>
 801fb12:	2500      	movs	r5, #0
 801fb14:	f104 0619 	add.w	r6, r4, #25
 801fb18:	e7f5      	b.n	801fb06 <_printf_i+0x222>
 801fb1a:	bf00      	nop
 801fb1c:	08022c9a 	.word	0x08022c9a
 801fb20:	08022cab 	.word	0x08022cab

0801fb24 <std>:
 801fb24:	2300      	movs	r3, #0
 801fb26:	b510      	push	{r4, lr}
 801fb28:	4604      	mov	r4, r0
 801fb2a:	e9c0 3300 	strd	r3, r3, [r0]
 801fb2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801fb32:	6083      	str	r3, [r0, #8]
 801fb34:	8181      	strh	r1, [r0, #12]
 801fb36:	6643      	str	r3, [r0, #100]	@ 0x64
 801fb38:	81c2      	strh	r2, [r0, #14]
 801fb3a:	6183      	str	r3, [r0, #24]
 801fb3c:	4619      	mov	r1, r3
 801fb3e:	2208      	movs	r2, #8
 801fb40:	305c      	adds	r0, #92	@ 0x5c
 801fb42:	f000 f928 	bl	801fd96 <memset>
 801fb46:	4b0d      	ldr	r3, [pc, #52]	@ (801fb7c <std+0x58>)
 801fb48:	6263      	str	r3, [r4, #36]	@ 0x24
 801fb4a:	4b0d      	ldr	r3, [pc, #52]	@ (801fb80 <std+0x5c>)
 801fb4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801fb4e:	4b0d      	ldr	r3, [pc, #52]	@ (801fb84 <std+0x60>)
 801fb50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801fb52:	4b0d      	ldr	r3, [pc, #52]	@ (801fb88 <std+0x64>)
 801fb54:	6323      	str	r3, [r4, #48]	@ 0x30
 801fb56:	4b0d      	ldr	r3, [pc, #52]	@ (801fb8c <std+0x68>)
 801fb58:	6224      	str	r4, [r4, #32]
 801fb5a:	429c      	cmp	r4, r3
 801fb5c:	d006      	beq.n	801fb6c <std+0x48>
 801fb5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801fb62:	4294      	cmp	r4, r2
 801fb64:	d002      	beq.n	801fb6c <std+0x48>
 801fb66:	33d0      	adds	r3, #208	@ 0xd0
 801fb68:	429c      	cmp	r4, r3
 801fb6a:	d105      	bne.n	801fb78 <std+0x54>
 801fb6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801fb70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fb74:	f000 ba36 	b.w	801ffe4 <__retarget_lock_init_recursive>
 801fb78:	bd10      	pop	{r4, pc}
 801fb7a:	bf00      	nop
 801fb7c:	0801fd11 	.word	0x0801fd11
 801fb80:	0801fd33 	.word	0x0801fd33
 801fb84:	0801fd6b 	.word	0x0801fd6b
 801fb88:	0801fd8f 	.word	0x0801fd8f
 801fb8c:	2001873c 	.word	0x2001873c

0801fb90 <stdio_exit_handler>:
 801fb90:	4a02      	ldr	r2, [pc, #8]	@ (801fb9c <stdio_exit_handler+0xc>)
 801fb92:	4903      	ldr	r1, [pc, #12]	@ (801fba0 <stdio_exit_handler+0x10>)
 801fb94:	4803      	ldr	r0, [pc, #12]	@ (801fba4 <stdio_exit_handler+0x14>)
 801fb96:	f000 b869 	b.w	801fc6c <_fwalk_sglue>
 801fb9a:	bf00      	nop
 801fb9c:	200001a8 	.word	0x200001a8
 801fba0:	080217f1 	.word	0x080217f1
 801fba4:	200001b8 	.word	0x200001b8

0801fba8 <cleanup_stdio>:
 801fba8:	6841      	ldr	r1, [r0, #4]
 801fbaa:	4b0c      	ldr	r3, [pc, #48]	@ (801fbdc <cleanup_stdio+0x34>)
 801fbac:	4299      	cmp	r1, r3
 801fbae:	b510      	push	{r4, lr}
 801fbb0:	4604      	mov	r4, r0
 801fbb2:	d001      	beq.n	801fbb8 <cleanup_stdio+0x10>
 801fbb4:	f001 fe1c 	bl	80217f0 <_fflush_r>
 801fbb8:	68a1      	ldr	r1, [r4, #8]
 801fbba:	4b09      	ldr	r3, [pc, #36]	@ (801fbe0 <cleanup_stdio+0x38>)
 801fbbc:	4299      	cmp	r1, r3
 801fbbe:	d002      	beq.n	801fbc6 <cleanup_stdio+0x1e>
 801fbc0:	4620      	mov	r0, r4
 801fbc2:	f001 fe15 	bl	80217f0 <_fflush_r>
 801fbc6:	68e1      	ldr	r1, [r4, #12]
 801fbc8:	4b06      	ldr	r3, [pc, #24]	@ (801fbe4 <cleanup_stdio+0x3c>)
 801fbca:	4299      	cmp	r1, r3
 801fbcc:	d004      	beq.n	801fbd8 <cleanup_stdio+0x30>
 801fbce:	4620      	mov	r0, r4
 801fbd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fbd4:	f001 be0c 	b.w	80217f0 <_fflush_r>
 801fbd8:	bd10      	pop	{r4, pc}
 801fbda:	bf00      	nop
 801fbdc:	2001873c 	.word	0x2001873c
 801fbe0:	200187a4 	.word	0x200187a4
 801fbe4:	2001880c 	.word	0x2001880c

0801fbe8 <global_stdio_init.part.0>:
 801fbe8:	b510      	push	{r4, lr}
 801fbea:	4b0b      	ldr	r3, [pc, #44]	@ (801fc18 <global_stdio_init.part.0+0x30>)
 801fbec:	4c0b      	ldr	r4, [pc, #44]	@ (801fc1c <global_stdio_init.part.0+0x34>)
 801fbee:	4a0c      	ldr	r2, [pc, #48]	@ (801fc20 <global_stdio_init.part.0+0x38>)
 801fbf0:	601a      	str	r2, [r3, #0]
 801fbf2:	4620      	mov	r0, r4
 801fbf4:	2200      	movs	r2, #0
 801fbf6:	2104      	movs	r1, #4
 801fbf8:	f7ff ff94 	bl	801fb24 <std>
 801fbfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801fc00:	2201      	movs	r2, #1
 801fc02:	2109      	movs	r1, #9
 801fc04:	f7ff ff8e 	bl	801fb24 <std>
 801fc08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801fc0c:	2202      	movs	r2, #2
 801fc0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fc12:	2112      	movs	r1, #18
 801fc14:	f7ff bf86 	b.w	801fb24 <std>
 801fc18:	20018874 	.word	0x20018874
 801fc1c:	2001873c 	.word	0x2001873c
 801fc20:	0801fb91 	.word	0x0801fb91

0801fc24 <__sfp_lock_acquire>:
 801fc24:	4801      	ldr	r0, [pc, #4]	@ (801fc2c <__sfp_lock_acquire+0x8>)
 801fc26:	f000 b9de 	b.w	801ffe6 <__retarget_lock_acquire_recursive>
 801fc2a:	bf00      	nop
 801fc2c:	2001887d 	.word	0x2001887d

0801fc30 <__sfp_lock_release>:
 801fc30:	4801      	ldr	r0, [pc, #4]	@ (801fc38 <__sfp_lock_release+0x8>)
 801fc32:	f000 b9d9 	b.w	801ffe8 <__retarget_lock_release_recursive>
 801fc36:	bf00      	nop
 801fc38:	2001887d 	.word	0x2001887d

0801fc3c <__sinit>:
 801fc3c:	b510      	push	{r4, lr}
 801fc3e:	4604      	mov	r4, r0
 801fc40:	f7ff fff0 	bl	801fc24 <__sfp_lock_acquire>
 801fc44:	6a23      	ldr	r3, [r4, #32]
 801fc46:	b11b      	cbz	r3, 801fc50 <__sinit+0x14>
 801fc48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fc4c:	f7ff bff0 	b.w	801fc30 <__sfp_lock_release>
 801fc50:	4b04      	ldr	r3, [pc, #16]	@ (801fc64 <__sinit+0x28>)
 801fc52:	6223      	str	r3, [r4, #32]
 801fc54:	4b04      	ldr	r3, [pc, #16]	@ (801fc68 <__sinit+0x2c>)
 801fc56:	681b      	ldr	r3, [r3, #0]
 801fc58:	2b00      	cmp	r3, #0
 801fc5a:	d1f5      	bne.n	801fc48 <__sinit+0xc>
 801fc5c:	f7ff ffc4 	bl	801fbe8 <global_stdio_init.part.0>
 801fc60:	e7f2      	b.n	801fc48 <__sinit+0xc>
 801fc62:	bf00      	nop
 801fc64:	0801fba9 	.word	0x0801fba9
 801fc68:	20018874 	.word	0x20018874

0801fc6c <_fwalk_sglue>:
 801fc6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fc70:	4607      	mov	r7, r0
 801fc72:	4688      	mov	r8, r1
 801fc74:	4614      	mov	r4, r2
 801fc76:	2600      	movs	r6, #0
 801fc78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fc7c:	f1b9 0901 	subs.w	r9, r9, #1
 801fc80:	d505      	bpl.n	801fc8e <_fwalk_sglue+0x22>
 801fc82:	6824      	ldr	r4, [r4, #0]
 801fc84:	2c00      	cmp	r4, #0
 801fc86:	d1f7      	bne.n	801fc78 <_fwalk_sglue+0xc>
 801fc88:	4630      	mov	r0, r6
 801fc8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fc8e:	89ab      	ldrh	r3, [r5, #12]
 801fc90:	2b01      	cmp	r3, #1
 801fc92:	d907      	bls.n	801fca4 <_fwalk_sglue+0x38>
 801fc94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fc98:	3301      	adds	r3, #1
 801fc9a:	d003      	beq.n	801fca4 <_fwalk_sglue+0x38>
 801fc9c:	4629      	mov	r1, r5
 801fc9e:	4638      	mov	r0, r7
 801fca0:	47c0      	blx	r8
 801fca2:	4306      	orrs	r6, r0
 801fca4:	3568      	adds	r5, #104	@ 0x68
 801fca6:	e7e9      	b.n	801fc7c <_fwalk_sglue+0x10>

0801fca8 <sniprintf>:
 801fca8:	b40c      	push	{r2, r3}
 801fcaa:	b530      	push	{r4, r5, lr}
 801fcac:	4b17      	ldr	r3, [pc, #92]	@ (801fd0c <sniprintf+0x64>)
 801fcae:	1e0c      	subs	r4, r1, #0
 801fcb0:	681d      	ldr	r5, [r3, #0]
 801fcb2:	b09d      	sub	sp, #116	@ 0x74
 801fcb4:	da08      	bge.n	801fcc8 <sniprintf+0x20>
 801fcb6:	238b      	movs	r3, #139	@ 0x8b
 801fcb8:	602b      	str	r3, [r5, #0]
 801fcba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fcbe:	b01d      	add	sp, #116	@ 0x74
 801fcc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fcc4:	b002      	add	sp, #8
 801fcc6:	4770      	bx	lr
 801fcc8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801fccc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801fcd0:	bf14      	ite	ne
 801fcd2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801fcd6:	4623      	moveq	r3, r4
 801fcd8:	9304      	str	r3, [sp, #16]
 801fcda:	9307      	str	r3, [sp, #28]
 801fcdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801fce0:	9002      	str	r0, [sp, #8]
 801fce2:	9006      	str	r0, [sp, #24]
 801fce4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fce8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801fcea:	ab21      	add	r3, sp, #132	@ 0x84
 801fcec:	a902      	add	r1, sp, #8
 801fcee:	4628      	mov	r0, r5
 801fcf0:	9301      	str	r3, [sp, #4]
 801fcf2:	f001 fbfd 	bl	80214f0 <_svfiprintf_r>
 801fcf6:	1c43      	adds	r3, r0, #1
 801fcf8:	bfbc      	itt	lt
 801fcfa:	238b      	movlt	r3, #139	@ 0x8b
 801fcfc:	602b      	strlt	r3, [r5, #0]
 801fcfe:	2c00      	cmp	r4, #0
 801fd00:	d0dd      	beq.n	801fcbe <sniprintf+0x16>
 801fd02:	9b02      	ldr	r3, [sp, #8]
 801fd04:	2200      	movs	r2, #0
 801fd06:	701a      	strb	r2, [r3, #0]
 801fd08:	e7d9      	b.n	801fcbe <sniprintf+0x16>
 801fd0a:	bf00      	nop
 801fd0c:	200001b4 	.word	0x200001b4

0801fd10 <__sread>:
 801fd10:	b510      	push	{r4, lr}
 801fd12:	460c      	mov	r4, r1
 801fd14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd18:	f000 f8f2 	bl	801ff00 <_read_r>
 801fd1c:	2800      	cmp	r0, #0
 801fd1e:	bfab      	itete	ge
 801fd20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801fd22:	89a3      	ldrhlt	r3, [r4, #12]
 801fd24:	181b      	addge	r3, r3, r0
 801fd26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801fd2a:	bfac      	ite	ge
 801fd2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801fd2e:	81a3      	strhlt	r3, [r4, #12]
 801fd30:	bd10      	pop	{r4, pc}

0801fd32 <__swrite>:
 801fd32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd36:	461f      	mov	r7, r3
 801fd38:	898b      	ldrh	r3, [r1, #12]
 801fd3a:	05db      	lsls	r3, r3, #23
 801fd3c:	4605      	mov	r5, r0
 801fd3e:	460c      	mov	r4, r1
 801fd40:	4616      	mov	r6, r2
 801fd42:	d505      	bpl.n	801fd50 <__swrite+0x1e>
 801fd44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd48:	2302      	movs	r3, #2
 801fd4a:	2200      	movs	r2, #0
 801fd4c:	f000 f8c6 	bl	801fedc <_lseek_r>
 801fd50:	89a3      	ldrh	r3, [r4, #12]
 801fd52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fd56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801fd5a:	81a3      	strh	r3, [r4, #12]
 801fd5c:	4632      	mov	r2, r6
 801fd5e:	463b      	mov	r3, r7
 801fd60:	4628      	mov	r0, r5
 801fd62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fd66:	f000 b901 	b.w	801ff6c <_write_r>

0801fd6a <__sseek>:
 801fd6a:	b510      	push	{r4, lr}
 801fd6c:	460c      	mov	r4, r1
 801fd6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd72:	f000 f8b3 	bl	801fedc <_lseek_r>
 801fd76:	1c43      	adds	r3, r0, #1
 801fd78:	89a3      	ldrh	r3, [r4, #12]
 801fd7a:	bf15      	itete	ne
 801fd7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801fd7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801fd82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801fd86:	81a3      	strheq	r3, [r4, #12]
 801fd88:	bf18      	it	ne
 801fd8a:	81a3      	strhne	r3, [r4, #12]
 801fd8c:	bd10      	pop	{r4, pc}

0801fd8e <__sclose>:
 801fd8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd92:	f000 b83d 	b.w	801fe10 <_close_r>

0801fd96 <memset>:
 801fd96:	4402      	add	r2, r0
 801fd98:	4603      	mov	r3, r0
 801fd9a:	4293      	cmp	r3, r2
 801fd9c:	d100      	bne.n	801fda0 <memset+0xa>
 801fd9e:	4770      	bx	lr
 801fda0:	f803 1b01 	strb.w	r1, [r3], #1
 801fda4:	e7f9      	b.n	801fd9a <memset+0x4>

0801fda6 <_raise_r>:
 801fda6:	291f      	cmp	r1, #31
 801fda8:	b538      	push	{r3, r4, r5, lr}
 801fdaa:	4605      	mov	r5, r0
 801fdac:	460c      	mov	r4, r1
 801fdae:	d904      	bls.n	801fdba <_raise_r+0x14>
 801fdb0:	2316      	movs	r3, #22
 801fdb2:	6003      	str	r3, [r0, #0]
 801fdb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fdb8:	bd38      	pop	{r3, r4, r5, pc}
 801fdba:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801fdbc:	b112      	cbz	r2, 801fdc4 <_raise_r+0x1e>
 801fdbe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fdc2:	b94b      	cbnz	r3, 801fdd8 <_raise_r+0x32>
 801fdc4:	4628      	mov	r0, r5
 801fdc6:	f000 f8bf 	bl	801ff48 <_getpid_r>
 801fdca:	4622      	mov	r2, r4
 801fdcc:	4601      	mov	r1, r0
 801fdce:	4628      	mov	r0, r5
 801fdd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fdd4:	f000 b8a6 	b.w	801ff24 <_kill_r>
 801fdd8:	2b01      	cmp	r3, #1
 801fdda:	d00a      	beq.n	801fdf2 <_raise_r+0x4c>
 801fddc:	1c59      	adds	r1, r3, #1
 801fdde:	d103      	bne.n	801fde8 <_raise_r+0x42>
 801fde0:	2316      	movs	r3, #22
 801fde2:	6003      	str	r3, [r0, #0]
 801fde4:	2001      	movs	r0, #1
 801fde6:	e7e7      	b.n	801fdb8 <_raise_r+0x12>
 801fde8:	2100      	movs	r1, #0
 801fdea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801fdee:	4620      	mov	r0, r4
 801fdf0:	4798      	blx	r3
 801fdf2:	2000      	movs	r0, #0
 801fdf4:	e7e0      	b.n	801fdb8 <_raise_r+0x12>
	...

0801fdf8 <raise>:
 801fdf8:	4b02      	ldr	r3, [pc, #8]	@ (801fe04 <raise+0xc>)
 801fdfa:	4601      	mov	r1, r0
 801fdfc:	6818      	ldr	r0, [r3, #0]
 801fdfe:	f7ff bfd2 	b.w	801fda6 <_raise_r>
 801fe02:	bf00      	nop
 801fe04:	200001b4 	.word	0x200001b4

0801fe08 <_localeconv_r>:
 801fe08:	4800      	ldr	r0, [pc, #0]	@ (801fe0c <_localeconv_r+0x4>)
 801fe0a:	4770      	bx	lr
 801fe0c:	200002f4 	.word	0x200002f4

0801fe10 <_close_r>:
 801fe10:	b538      	push	{r3, r4, r5, lr}
 801fe12:	4d06      	ldr	r5, [pc, #24]	@ (801fe2c <_close_r+0x1c>)
 801fe14:	2300      	movs	r3, #0
 801fe16:	4604      	mov	r4, r0
 801fe18:	4608      	mov	r0, r1
 801fe1a:	602b      	str	r3, [r5, #0]
 801fe1c:	f7e5 fa10 	bl	8005240 <_close>
 801fe20:	1c43      	adds	r3, r0, #1
 801fe22:	d102      	bne.n	801fe2a <_close_r+0x1a>
 801fe24:	682b      	ldr	r3, [r5, #0]
 801fe26:	b103      	cbz	r3, 801fe2a <_close_r+0x1a>
 801fe28:	6023      	str	r3, [r4, #0]
 801fe2a:	bd38      	pop	{r3, r4, r5, pc}
 801fe2c:	20018878 	.word	0x20018878

0801fe30 <_reclaim_reent>:
 801fe30:	4b29      	ldr	r3, [pc, #164]	@ (801fed8 <_reclaim_reent+0xa8>)
 801fe32:	681b      	ldr	r3, [r3, #0]
 801fe34:	4283      	cmp	r3, r0
 801fe36:	b570      	push	{r4, r5, r6, lr}
 801fe38:	4604      	mov	r4, r0
 801fe3a:	d04b      	beq.n	801fed4 <_reclaim_reent+0xa4>
 801fe3c:	69c3      	ldr	r3, [r0, #28]
 801fe3e:	b1ab      	cbz	r3, 801fe6c <_reclaim_reent+0x3c>
 801fe40:	68db      	ldr	r3, [r3, #12]
 801fe42:	b16b      	cbz	r3, 801fe60 <_reclaim_reent+0x30>
 801fe44:	2500      	movs	r5, #0
 801fe46:	69e3      	ldr	r3, [r4, #28]
 801fe48:	68db      	ldr	r3, [r3, #12]
 801fe4a:	5959      	ldr	r1, [r3, r5]
 801fe4c:	2900      	cmp	r1, #0
 801fe4e:	d13b      	bne.n	801fec8 <_reclaim_reent+0x98>
 801fe50:	3504      	adds	r5, #4
 801fe52:	2d80      	cmp	r5, #128	@ 0x80
 801fe54:	d1f7      	bne.n	801fe46 <_reclaim_reent+0x16>
 801fe56:	69e3      	ldr	r3, [r4, #28]
 801fe58:	4620      	mov	r0, r4
 801fe5a:	68d9      	ldr	r1, [r3, #12]
 801fe5c:	f000 ff20 	bl	8020ca0 <_free_r>
 801fe60:	69e3      	ldr	r3, [r4, #28]
 801fe62:	6819      	ldr	r1, [r3, #0]
 801fe64:	b111      	cbz	r1, 801fe6c <_reclaim_reent+0x3c>
 801fe66:	4620      	mov	r0, r4
 801fe68:	f000 ff1a 	bl	8020ca0 <_free_r>
 801fe6c:	6961      	ldr	r1, [r4, #20]
 801fe6e:	b111      	cbz	r1, 801fe76 <_reclaim_reent+0x46>
 801fe70:	4620      	mov	r0, r4
 801fe72:	f000 ff15 	bl	8020ca0 <_free_r>
 801fe76:	69e1      	ldr	r1, [r4, #28]
 801fe78:	b111      	cbz	r1, 801fe80 <_reclaim_reent+0x50>
 801fe7a:	4620      	mov	r0, r4
 801fe7c:	f000 ff10 	bl	8020ca0 <_free_r>
 801fe80:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801fe82:	b111      	cbz	r1, 801fe8a <_reclaim_reent+0x5a>
 801fe84:	4620      	mov	r0, r4
 801fe86:	f000 ff0b 	bl	8020ca0 <_free_r>
 801fe8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801fe8c:	b111      	cbz	r1, 801fe94 <_reclaim_reent+0x64>
 801fe8e:	4620      	mov	r0, r4
 801fe90:	f000 ff06 	bl	8020ca0 <_free_r>
 801fe94:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801fe96:	b111      	cbz	r1, 801fe9e <_reclaim_reent+0x6e>
 801fe98:	4620      	mov	r0, r4
 801fe9a:	f000 ff01 	bl	8020ca0 <_free_r>
 801fe9e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801fea0:	b111      	cbz	r1, 801fea8 <_reclaim_reent+0x78>
 801fea2:	4620      	mov	r0, r4
 801fea4:	f000 fefc 	bl	8020ca0 <_free_r>
 801fea8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801feaa:	b111      	cbz	r1, 801feb2 <_reclaim_reent+0x82>
 801feac:	4620      	mov	r0, r4
 801feae:	f000 fef7 	bl	8020ca0 <_free_r>
 801feb2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801feb4:	b111      	cbz	r1, 801febc <_reclaim_reent+0x8c>
 801feb6:	4620      	mov	r0, r4
 801feb8:	f000 fef2 	bl	8020ca0 <_free_r>
 801febc:	6a23      	ldr	r3, [r4, #32]
 801febe:	b14b      	cbz	r3, 801fed4 <_reclaim_reent+0xa4>
 801fec0:	4620      	mov	r0, r4
 801fec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fec6:	4718      	bx	r3
 801fec8:	680e      	ldr	r6, [r1, #0]
 801feca:	4620      	mov	r0, r4
 801fecc:	f000 fee8 	bl	8020ca0 <_free_r>
 801fed0:	4631      	mov	r1, r6
 801fed2:	e7bb      	b.n	801fe4c <_reclaim_reent+0x1c>
 801fed4:	bd70      	pop	{r4, r5, r6, pc}
 801fed6:	bf00      	nop
 801fed8:	200001b4 	.word	0x200001b4

0801fedc <_lseek_r>:
 801fedc:	b538      	push	{r3, r4, r5, lr}
 801fede:	4d07      	ldr	r5, [pc, #28]	@ (801fefc <_lseek_r+0x20>)
 801fee0:	4604      	mov	r4, r0
 801fee2:	4608      	mov	r0, r1
 801fee4:	4611      	mov	r1, r2
 801fee6:	2200      	movs	r2, #0
 801fee8:	602a      	str	r2, [r5, #0]
 801feea:	461a      	mov	r2, r3
 801feec:	f7e5 f9cf 	bl	800528e <_lseek>
 801fef0:	1c43      	adds	r3, r0, #1
 801fef2:	d102      	bne.n	801fefa <_lseek_r+0x1e>
 801fef4:	682b      	ldr	r3, [r5, #0]
 801fef6:	b103      	cbz	r3, 801fefa <_lseek_r+0x1e>
 801fef8:	6023      	str	r3, [r4, #0]
 801fefa:	bd38      	pop	{r3, r4, r5, pc}
 801fefc:	20018878 	.word	0x20018878

0801ff00 <_read_r>:
 801ff00:	b538      	push	{r3, r4, r5, lr}
 801ff02:	4d07      	ldr	r5, [pc, #28]	@ (801ff20 <_read_r+0x20>)
 801ff04:	4604      	mov	r4, r0
 801ff06:	4608      	mov	r0, r1
 801ff08:	4611      	mov	r1, r2
 801ff0a:	2200      	movs	r2, #0
 801ff0c:	602a      	str	r2, [r5, #0]
 801ff0e:	461a      	mov	r2, r3
 801ff10:	f7e5 f95d 	bl	80051ce <_read>
 801ff14:	1c43      	adds	r3, r0, #1
 801ff16:	d102      	bne.n	801ff1e <_read_r+0x1e>
 801ff18:	682b      	ldr	r3, [r5, #0]
 801ff1a:	b103      	cbz	r3, 801ff1e <_read_r+0x1e>
 801ff1c:	6023      	str	r3, [r4, #0]
 801ff1e:	bd38      	pop	{r3, r4, r5, pc}
 801ff20:	20018878 	.word	0x20018878

0801ff24 <_kill_r>:
 801ff24:	b538      	push	{r3, r4, r5, lr}
 801ff26:	4d07      	ldr	r5, [pc, #28]	@ (801ff44 <_kill_r+0x20>)
 801ff28:	2300      	movs	r3, #0
 801ff2a:	4604      	mov	r4, r0
 801ff2c:	4608      	mov	r0, r1
 801ff2e:	4611      	mov	r1, r2
 801ff30:	602b      	str	r3, [r5, #0]
 801ff32:	f7e5 f931 	bl	8005198 <_kill>
 801ff36:	1c43      	adds	r3, r0, #1
 801ff38:	d102      	bne.n	801ff40 <_kill_r+0x1c>
 801ff3a:	682b      	ldr	r3, [r5, #0]
 801ff3c:	b103      	cbz	r3, 801ff40 <_kill_r+0x1c>
 801ff3e:	6023      	str	r3, [r4, #0]
 801ff40:	bd38      	pop	{r3, r4, r5, pc}
 801ff42:	bf00      	nop
 801ff44:	20018878 	.word	0x20018878

0801ff48 <_getpid_r>:
 801ff48:	f7e5 b91e 	b.w	8005188 <_getpid>

0801ff4c <_sbrk_r>:
 801ff4c:	b538      	push	{r3, r4, r5, lr}
 801ff4e:	4d06      	ldr	r5, [pc, #24]	@ (801ff68 <_sbrk_r+0x1c>)
 801ff50:	2300      	movs	r3, #0
 801ff52:	4604      	mov	r4, r0
 801ff54:	4608      	mov	r0, r1
 801ff56:	602b      	str	r3, [r5, #0]
 801ff58:	f7e5 f9a6 	bl	80052a8 <_sbrk>
 801ff5c:	1c43      	adds	r3, r0, #1
 801ff5e:	d102      	bne.n	801ff66 <_sbrk_r+0x1a>
 801ff60:	682b      	ldr	r3, [r5, #0]
 801ff62:	b103      	cbz	r3, 801ff66 <_sbrk_r+0x1a>
 801ff64:	6023      	str	r3, [r4, #0]
 801ff66:	bd38      	pop	{r3, r4, r5, pc}
 801ff68:	20018878 	.word	0x20018878

0801ff6c <_write_r>:
 801ff6c:	b538      	push	{r3, r4, r5, lr}
 801ff6e:	4d07      	ldr	r5, [pc, #28]	@ (801ff8c <_write_r+0x20>)
 801ff70:	4604      	mov	r4, r0
 801ff72:	4608      	mov	r0, r1
 801ff74:	4611      	mov	r1, r2
 801ff76:	2200      	movs	r2, #0
 801ff78:	602a      	str	r2, [r5, #0]
 801ff7a:	461a      	mov	r2, r3
 801ff7c:	f7e5 f944 	bl	8005208 <_write>
 801ff80:	1c43      	adds	r3, r0, #1
 801ff82:	d102      	bne.n	801ff8a <_write_r+0x1e>
 801ff84:	682b      	ldr	r3, [r5, #0]
 801ff86:	b103      	cbz	r3, 801ff8a <_write_r+0x1e>
 801ff88:	6023      	str	r3, [r4, #0]
 801ff8a:	bd38      	pop	{r3, r4, r5, pc}
 801ff8c:	20018878 	.word	0x20018878

0801ff90 <__errno>:
 801ff90:	4b01      	ldr	r3, [pc, #4]	@ (801ff98 <__errno+0x8>)
 801ff92:	6818      	ldr	r0, [r3, #0]
 801ff94:	4770      	bx	lr
 801ff96:	bf00      	nop
 801ff98:	200001b4 	.word	0x200001b4

0801ff9c <__libc_init_array>:
 801ff9c:	b570      	push	{r4, r5, r6, lr}
 801ff9e:	4d0d      	ldr	r5, [pc, #52]	@ (801ffd4 <__libc_init_array+0x38>)
 801ffa0:	4c0d      	ldr	r4, [pc, #52]	@ (801ffd8 <__libc_init_array+0x3c>)
 801ffa2:	1b64      	subs	r4, r4, r5
 801ffa4:	10a4      	asrs	r4, r4, #2
 801ffa6:	2600      	movs	r6, #0
 801ffa8:	42a6      	cmp	r6, r4
 801ffaa:	d109      	bne.n	801ffc0 <__libc_init_array+0x24>
 801ffac:	4d0b      	ldr	r5, [pc, #44]	@ (801ffdc <__libc_init_array+0x40>)
 801ffae:	4c0c      	ldr	r4, [pc, #48]	@ (801ffe0 <__libc_init_array+0x44>)
 801ffb0:	f001 ff54 	bl	8021e5c <_init>
 801ffb4:	1b64      	subs	r4, r4, r5
 801ffb6:	10a4      	asrs	r4, r4, #2
 801ffb8:	2600      	movs	r6, #0
 801ffba:	42a6      	cmp	r6, r4
 801ffbc:	d105      	bne.n	801ffca <__libc_init_array+0x2e>
 801ffbe:	bd70      	pop	{r4, r5, r6, pc}
 801ffc0:	f855 3b04 	ldr.w	r3, [r5], #4
 801ffc4:	4798      	blx	r3
 801ffc6:	3601      	adds	r6, #1
 801ffc8:	e7ee      	b.n	801ffa8 <__libc_init_array+0xc>
 801ffca:	f855 3b04 	ldr.w	r3, [r5], #4
 801ffce:	4798      	blx	r3
 801ffd0:	3601      	adds	r6, #1
 801ffd2:	e7f2      	b.n	801ffba <__libc_init_array+0x1e>
 801ffd4:	08023000 	.word	0x08023000
 801ffd8:	08023000 	.word	0x08023000
 801ffdc:	08023000 	.word	0x08023000
 801ffe0:	08023008 	.word	0x08023008

0801ffe4 <__retarget_lock_init_recursive>:
 801ffe4:	4770      	bx	lr

0801ffe6 <__retarget_lock_acquire_recursive>:
 801ffe6:	4770      	bx	lr

0801ffe8 <__retarget_lock_release_recursive>:
 801ffe8:	4770      	bx	lr

0801ffea <memcpy>:
 801ffea:	440a      	add	r2, r1
 801ffec:	4291      	cmp	r1, r2
 801ffee:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801fff2:	d100      	bne.n	801fff6 <memcpy+0xc>
 801fff4:	4770      	bx	lr
 801fff6:	b510      	push	{r4, lr}
 801fff8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fffc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020000:	4291      	cmp	r1, r2
 8020002:	d1f9      	bne.n	801fff8 <memcpy+0xe>
 8020004:	bd10      	pop	{r4, pc}

08020006 <quorem>:
 8020006:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802000a:	6903      	ldr	r3, [r0, #16]
 802000c:	690c      	ldr	r4, [r1, #16]
 802000e:	42a3      	cmp	r3, r4
 8020010:	4607      	mov	r7, r0
 8020012:	db7e      	blt.n	8020112 <quorem+0x10c>
 8020014:	3c01      	subs	r4, #1
 8020016:	f101 0814 	add.w	r8, r1, #20
 802001a:	00a3      	lsls	r3, r4, #2
 802001c:	f100 0514 	add.w	r5, r0, #20
 8020020:	9300      	str	r3, [sp, #0]
 8020022:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020026:	9301      	str	r3, [sp, #4]
 8020028:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802002c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020030:	3301      	adds	r3, #1
 8020032:	429a      	cmp	r2, r3
 8020034:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020038:	fbb2 f6f3 	udiv	r6, r2, r3
 802003c:	d32e      	bcc.n	802009c <quorem+0x96>
 802003e:	f04f 0a00 	mov.w	sl, #0
 8020042:	46c4      	mov	ip, r8
 8020044:	46ae      	mov	lr, r5
 8020046:	46d3      	mov	fp, sl
 8020048:	f85c 3b04 	ldr.w	r3, [ip], #4
 802004c:	b298      	uxth	r0, r3
 802004e:	fb06 a000 	mla	r0, r6, r0, sl
 8020052:	0c02      	lsrs	r2, r0, #16
 8020054:	0c1b      	lsrs	r3, r3, #16
 8020056:	fb06 2303 	mla	r3, r6, r3, r2
 802005a:	f8de 2000 	ldr.w	r2, [lr]
 802005e:	b280      	uxth	r0, r0
 8020060:	b292      	uxth	r2, r2
 8020062:	1a12      	subs	r2, r2, r0
 8020064:	445a      	add	r2, fp
 8020066:	f8de 0000 	ldr.w	r0, [lr]
 802006a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802006e:	b29b      	uxth	r3, r3
 8020070:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8020074:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8020078:	b292      	uxth	r2, r2
 802007a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802007e:	45e1      	cmp	r9, ip
 8020080:	f84e 2b04 	str.w	r2, [lr], #4
 8020084:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8020088:	d2de      	bcs.n	8020048 <quorem+0x42>
 802008a:	9b00      	ldr	r3, [sp, #0]
 802008c:	58eb      	ldr	r3, [r5, r3]
 802008e:	b92b      	cbnz	r3, 802009c <quorem+0x96>
 8020090:	9b01      	ldr	r3, [sp, #4]
 8020092:	3b04      	subs	r3, #4
 8020094:	429d      	cmp	r5, r3
 8020096:	461a      	mov	r2, r3
 8020098:	d32f      	bcc.n	80200fa <quorem+0xf4>
 802009a:	613c      	str	r4, [r7, #16]
 802009c:	4638      	mov	r0, r7
 802009e:	f001 f8c3 	bl	8021228 <__mcmp>
 80200a2:	2800      	cmp	r0, #0
 80200a4:	db25      	blt.n	80200f2 <quorem+0xec>
 80200a6:	4629      	mov	r1, r5
 80200a8:	2000      	movs	r0, #0
 80200aa:	f858 2b04 	ldr.w	r2, [r8], #4
 80200ae:	f8d1 c000 	ldr.w	ip, [r1]
 80200b2:	fa1f fe82 	uxth.w	lr, r2
 80200b6:	fa1f f38c 	uxth.w	r3, ip
 80200ba:	eba3 030e 	sub.w	r3, r3, lr
 80200be:	4403      	add	r3, r0
 80200c0:	0c12      	lsrs	r2, r2, #16
 80200c2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80200c6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80200ca:	b29b      	uxth	r3, r3
 80200cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80200d0:	45c1      	cmp	r9, r8
 80200d2:	f841 3b04 	str.w	r3, [r1], #4
 80200d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80200da:	d2e6      	bcs.n	80200aa <quorem+0xa4>
 80200dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80200e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80200e4:	b922      	cbnz	r2, 80200f0 <quorem+0xea>
 80200e6:	3b04      	subs	r3, #4
 80200e8:	429d      	cmp	r5, r3
 80200ea:	461a      	mov	r2, r3
 80200ec:	d30b      	bcc.n	8020106 <quorem+0x100>
 80200ee:	613c      	str	r4, [r7, #16]
 80200f0:	3601      	adds	r6, #1
 80200f2:	4630      	mov	r0, r6
 80200f4:	b003      	add	sp, #12
 80200f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200fa:	6812      	ldr	r2, [r2, #0]
 80200fc:	3b04      	subs	r3, #4
 80200fe:	2a00      	cmp	r2, #0
 8020100:	d1cb      	bne.n	802009a <quorem+0x94>
 8020102:	3c01      	subs	r4, #1
 8020104:	e7c6      	b.n	8020094 <quorem+0x8e>
 8020106:	6812      	ldr	r2, [r2, #0]
 8020108:	3b04      	subs	r3, #4
 802010a:	2a00      	cmp	r2, #0
 802010c:	d1ef      	bne.n	80200ee <quorem+0xe8>
 802010e:	3c01      	subs	r4, #1
 8020110:	e7ea      	b.n	80200e8 <quorem+0xe2>
 8020112:	2000      	movs	r0, #0
 8020114:	e7ee      	b.n	80200f4 <quorem+0xee>
	...

08020118 <_dtoa_r>:
 8020118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802011c:	69c7      	ldr	r7, [r0, #28]
 802011e:	b099      	sub	sp, #100	@ 0x64
 8020120:	ed8d 0b02 	vstr	d0, [sp, #8]
 8020124:	ec55 4b10 	vmov	r4, r5, d0
 8020128:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802012a:	9109      	str	r1, [sp, #36]	@ 0x24
 802012c:	4683      	mov	fp, r0
 802012e:	920e      	str	r2, [sp, #56]	@ 0x38
 8020130:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020132:	b97f      	cbnz	r7, 8020154 <_dtoa_r+0x3c>
 8020134:	2010      	movs	r0, #16
 8020136:	f7fe ffdf 	bl	801f0f8 <malloc>
 802013a:	4602      	mov	r2, r0
 802013c:	f8cb 001c 	str.w	r0, [fp, #28]
 8020140:	b920      	cbnz	r0, 802014c <_dtoa_r+0x34>
 8020142:	4ba7      	ldr	r3, [pc, #668]	@ (80203e0 <_dtoa_r+0x2c8>)
 8020144:	21ef      	movs	r1, #239	@ 0xef
 8020146:	48a7      	ldr	r0, [pc, #668]	@ (80203e4 <_dtoa_r+0x2cc>)
 8020148:	f001 fb94 	bl	8021874 <__assert_func>
 802014c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8020150:	6007      	str	r7, [r0, #0]
 8020152:	60c7      	str	r7, [r0, #12]
 8020154:	f8db 301c 	ldr.w	r3, [fp, #28]
 8020158:	6819      	ldr	r1, [r3, #0]
 802015a:	b159      	cbz	r1, 8020174 <_dtoa_r+0x5c>
 802015c:	685a      	ldr	r2, [r3, #4]
 802015e:	604a      	str	r2, [r1, #4]
 8020160:	2301      	movs	r3, #1
 8020162:	4093      	lsls	r3, r2
 8020164:	608b      	str	r3, [r1, #8]
 8020166:	4658      	mov	r0, fp
 8020168:	f000 fe24 	bl	8020db4 <_Bfree>
 802016c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8020170:	2200      	movs	r2, #0
 8020172:	601a      	str	r2, [r3, #0]
 8020174:	1e2b      	subs	r3, r5, #0
 8020176:	bfb9      	ittee	lt
 8020178:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802017c:	9303      	strlt	r3, [sp, #12]
 802017e:	2300      	movge	r3, #0
 8020180:	6033      	strge	r3, [r6, #0]
 8020182:	9f03      	ldr	r7, [sp, #12]
 8020184:	4b98      	ldr	r3, [pc, #608]	@ (80203e8 <_dtoa_r+0x2d0>)
 8020186:	bfbc      	itt	lt
 8020188:	2201      	movlt	r2, #1
 802018a:	6032      	strlt	r2, [r6, #0]
 802018c:	43bb      	bics	r3, r7
 802018e:	d112      	bne.n	80201b6 <_dtoa_r+0x9e>
 8020190:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020192:	f242 730f 	movw	r3, #9999	@ 0x270f
 8020196:	6013      	str	r3, [r2, #0]
 8020198:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802019c:	4323      	orrs	r3, r4
 802019e:	f000 854d 	beq.w	8020c3c <_dtoa_r+0xb24>
 80201a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80201a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80203fc <_dtoa_r+0x2e4>
 80201a8:	2b00      	cmp	r3, #0
 80201aa:	f000 854f 	beq.w	8020c4c <_dtoa_r+0xb34>
 80201ae:	f10a 0303 	add.w	r3, sl, #3
 80201b2:	f000 bd49 	b.w	8020c48 <_dtoa_r+0xb30>
 80201b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80201ba:	2200      	movs	r2, #0
 80201bc:	ec51 0b17 	vmov	r0, r1, d7
 80201c0:	2300      	movs	r3, #0
 80201c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80201c6:	f7e0 fca7 	bl	8000b18 <__aeabi_dcmpeq>
 80201ca:	4680      	mov	r8, r0
 80201cc:	b158      	cbz	r0, 80201e6 <_dtoa_r+0xce>
 80201ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80201d0:	2301      	movs	r3, #1
 80201d2:	6013      	str	r3, [r2, #0]
 80201d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80201d6:	b113      	cbz	r3, 80201de <_dtoa_r+0xc6>
 80201d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80201da:	4b84      	ldr	r3, [pc, #528]	@ (80203ec <_dtoa_r+0x2d4>)
 80201dc:	6013      	str	r3, [r2, #0]
 80201de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8020400 <_dtoa_r+0x2e8>
 80201e2:	f000 bd33 	b.w	8020c4c <_dtoa_r+0xb34>
 80201e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80201ea:	aa16      	add	r2, sp, #88	@ 0x58
 80201ec:	a917      	add	r1, sp, #92	@ 0x5c
 80201ee:	4658      	mov	r0, fp
 80201f0:	f001 f8ca 	bl	8021388 <__d2b>
 80201f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80201f8:	4681      	mov	r9, r0
 80201fa:	2e00      	cmp	r6, #0
 80201fc:	d077      	beq.n	80202ee <_dtoa_r+0x1d6>
 80201fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020200:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8020204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802020c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8020210:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8020214:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8020218:	4619      	mov	r1, r3
 802021a:	2200      	movs	r2, #0
 802021c:	4b74      	ldr	r3, [pc, #464]	@ (80203f0 <_dtoa_r+0x2d8>)
 802021e:	f7e0 f85b 	bl	80002d8 <__aeabi_dsub>
 8020222:	a369      	add	r3, pc, #420	@ (adr r3, 80203c8 <_dtoa_r+0x2b0>)
 8020224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020228:	f7e0 fa0e 	bl	8000648 <__aeabi_dmul>
 802022c:	a368      	add	r3, pc, #416	@ (adr r3, 80203d0 <_dtoa_r+0x2b8>)
 802022e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020232:	f7e0 f853 	bl	80002dc <__adddf3>
 8020236:	4604      	mov	r4, r0
 8020238:	4630      	mov	r0, r6
 802023a:	460d      	mov	r5, r1
 802023c:	f7e0 f99a 	bl	8000574 <__aeabi_i2d>
 8020240:	a365      	add	r3, pc, #404	@ (adr r3, 80203d8 <_dtoa_r+0x2c0>)
 8020242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020246:	f7e0 f9ff 	bl	8000648 <__aeabi_dmul>
 802024a:	4602      	mov	r2, r0
 802024c:	460b      	mov	r3, r1
 802024e:	4620      	mov	r0, r4
 8020250:	4629      	mov	r1, r5
 8020252:	f7e0 f843 	bl	80002dc <__adddf3>
 8020256:	4604      	mov	r4, r0
 8020258:	460d      	mov	r5, r1
 802025a:	f7e0 fca5 	bl	8000ba8 <__aeabi_d2iz>
 802025e:	2200      	movs	r2, #0
 8020260:	4607      	mov	r7, r0
 8020262:	2300      	movs	r3, #0
 8020264:	4620      	mov	r0, r4
 8020266:	4629      	mov	r1, r5
 8020268:	f7e0 fc60 	bl	8000b2c <__aeabi_dcmplt>
 802026c:	b140      	cbz	r0, 8020280 <_dtoa_r+0x168>
 802026e:	4638      	mov	r0, r7
 8020270:	f7e0 f980 	bl	8000574 <__aeabi_i2d>
 8020274:	4622      	mov	r2, r4
 8020276:	462b      	mov	r3, r5
 8020278:	f7e0 fc4e 	bl	8000b18 <__aeabi_dcmpeq>
 802027c:	b900      	cbnz	r0, 8020280 <_dtoa_r+0x168>
 802027e:	3f01      	subs	r7, #1
 8020280:	2f16      	cmp	r7, #22
 8020282:	d851      	bhi.n	8020328 <_dtoa_r+0x210>
 8020284:	4b5b      	ldr	r3, [pc, #364]	@ (80203f4 <_dtoa_r+0x2dc>)
 8020286:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802028a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802028e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020292:	f7e0 fc4b 	bl	8000b2c <__aeabi_dcmplt>
 8020296:	2800      	cmp	r0, #0
 8020298:	d048      	beq.n	802032c <_dtoa_r+0x214>
 802029a:	3f01      	subs	r7, #1
 802029c:	2300      	movs	r3, #0
 802029e:	9312      	str	r3, [sp, #72]	@ 0x48
 80202a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80202a2:	1b9b      	subs	r3, r3, r6
 80202a4:	1e5a      	subs	r2, r3, #1
 80202a6:	bf44      	itt	mi
 80202a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80202ac:	2300      	movmi	r3, #0
 80202ae:	9208      	str	r2, [sp, #32]
 80202b0:	bf54      	ite	pl
 80202b2:	f04f 0800 	movpl.w	r8, #0
 80202b6:	9308      	strmi	r3, [sp, #32]
 80202b8:	2f00      	cmp	r7, #0
 80202ba:	db39      	blt.n	8020330 <_dtoa_r+0x218>
 80202bc:	9b08      	ldr	r3, [sp, #32]
 80202be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80202c0:	443b      	add	r3, r7
 80202c2:	9308      	str	r3, [sp, #32]
 80202c4:	2300      	movs	r3, #0
 80202c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80202c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80202ca:	2b09      	cmp	r3, #9
 80202cc:	d864      	bhi.n	8020398 <_dtoa_r+0x280>
 80202ce:	2b05      	cmp	r3, #5
 80202d0:	bfc4      	itt	gt
 80202d2:	3b04      	subgt	r3, #4
 80202d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80202d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80202d8:	f1a3 0302 	sub.w	r3, r3, #2
 80202dc:	bfcc      	ite	gt
 80202de:	2400      	movgt	r4, #0
 80202e0:	2401      	movle	r4, #1
 80202e2:	2b03      	cmp	r3, #3
 80202e4:	d863      	bhi.n	80203ae <_dtoa_r+0x296>
 80202e6:	e8df f003 	tbb	[pc, r3]
 80202ea:	372a      	.short	0x372a
 80202ec:	5535      	.short	0x5535
 80202ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80202f2:	441e      	add	r6, r3
 80202f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80202f8:	2b20      	cmp	r3, #32
 80202fa:	bfc1      	itttt	gt
 80202fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8020300:	409f      	lslgt	r7, r3
 8020302:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8020306:	fa24 f303 	lsrgt.w	r3, r4, r3
 802030a:	bfd6      	itet	le
 802030c:	f1c3 0320 	rsble	r3, r3, #32
 8020310:	ea47 0003 	orrgt.w	r0, r7, r3
 8020314:	fa04 f003 	lslle.w	r0, r4, r3
 8020318:	f7e0 f91c 	bl	8000554 <__aeabi_ui2d>
 802031c:	2201      	movs	r2, #1
 802031e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8020322:	3e01      	subs	r6, #1
 8020324:	9214      	str	r2, [sp, #80]	@ 0x50
 8020326:	e777      	b.n	8020218 <_dtoa_r+0x100>
 8020328:	2301      	movs	r3, #1
 802032a:	e7b8      	b.n	802029e <_dtoa_r+0x186>
 802032c:	9012      	str	r0, [sp, #72]	@ 0x48
 802032e:	e7b7      	b.n	80202a0 <_dtoa_r+0x188>
 8020330:	427b      	negs	r3, r7
 8020332:	930a      	str	r3, [sp, #40]	@ 0x28
 8020334:	2300      	movs	r3, #0
 8020336:	eba8 0807 	sub.w	r8, r8, r7
 802033a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802033c:	e7c4      	b.n	80202c8 <_dtoa_r+0x1b0>
 802033e:	2300      	movs	r3, #0
 8020340:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020342:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020344:	2b00      	cmp	r3, #0
 8020346:	dc35      	bgt.n	80203b4 <_dtoa_r+0x29c>
 8020348:	2301      	movs	r3, #1
 802034a:	9300      	str	r3, [sp, #0]
 802034c:	9307      	str	r3, [sp, #28]
 802034e:	461a      	mov	r2, r3
 8020350:	920e      	str	r2, [sp, #56]	@ 0x38
 8020352:	e00b      	b.n	802036c <_dtoa_r+0x254>
 8020354:	2301      	movs	r3, #1
 8020356:	e7f3      	b.n	8020340 <_dtoa_r+0x228>
 8020358:	2300      	movs	r3, #0
 802035a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802035c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802035e:	18fb      	adds	r3, r7, r3
 8020360:	9300      	str	r3, [sp, #0]
 8020362:	3301      	adds	r3, #1
 8020364:	2b01      	cmp	r3, #1
 8020366:	9307      	str	r3, [sp, #28]
 8020368:	bfb8      	it	lt
 802036a:	2301      	movlt	r3, #1
 802036c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8020370:	2100      	movs	r1, #0
 8020372:	2204      	movs	r2, #4
 8020374:	f102 0514 	add.w	r5, r2, #20
 8020378:	429d      	cmp	r5, r3
 802037a:	d91f      	bls.n	80203bc <_dtoa_r+0x2a4>
 802037c:	6041      	str	r1, [r0, #4]
 802037e:	4658      	mov	r0, fp
 8020380:	f000 fcd8 	bl	8020d34 <_Balloc>
 8020384:	4682      	mov	sl, r0
 8020386:	2800      	cmp	r0, #0
 8020388:	d13c      	bne.n	8020404 <_dtoa_r+0x2ec>
 802038a:	4b1b      	ldr	r3, [pc, #108]	@ (80203f8 <_dtoa_r+0x2e0>)
 802038c:	4602      	mov	r2, r0
 802038e:	f240 11af 	movw	r1, #431	@ 0x1af
 8020392:	e6d8      	b.n	8020146 <_dtoa_r+0x2e>
 8020394:	2301      	movs	r3, #1
 8020396:	e7e0      	b.n	802035a <_dtoa_r+0x242>
 8020398:	2401      	movs	r4, #1
 802039a:	2300      	movs	r3, #0
 802039c:	9309      	str	r3, [sp, #36]	@ 0x24
 802039e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80203a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80203a4:	9300      	str	r3, [sp, #0]
 80203a6:	9307      	str	r3, [sp, #28]
 80203a8:	2200      	movs	r2, #0
 80203aa:	2312      	movs	r3, #18
 80203ac:	e7d0      	b.n	8020350 <_dtoa_r+0x238>
 80203ae:	2301      	movs	r3, #1
 80203b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80203b2:	e7f5      	b.n	80203a0 <_dtoa_r+0x288>
 80203b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80203b6:	9300      	str	r3, [sp, #0]
 80203b8:	9307      	str	r3, [sp, #28]
 80203ba:	e7d7      	b.n	802036c <_dtoa_r+0x254>
 80203bc:	3101      	adds	r1, #1
 80203be:	0052      	lsls	r2, r2, #1
 80203c0:	e7d8      	b.n	8020374 <_dtoa_r+0x25c>
 80203c2:	bf00      	nop
 80203c4:	f3af 8000 	nop.w
 80203c8:	636f4361 	.word	0x636f4361
 80203cc:	3fd287a7 	.word	0x3fd287a7
 80203d0:	8b60c8b3 	.word	0x8b60c8b3
 80203d4:	3fc68a28 	.word	0x3fc68a28
 80203d8:	509f79fb 	.word	0x509f79fb
 80203dc:	3fd34413 	.word	0x3fd34413
 80203e0:	08022cc9 	.word	0x08022cc9
 80203e4:	08022ce0 	.word	0x08022ce0
 80203e8:	7ff00000 	.word	0x7ff00000
 80203ec:	08022c99 	.word	0x08022c99
 80203f0:	3ff80000 	.word	0x3ff80000
 80203f4:	08022dd8 	.word	0x08022dd8
 80203f8:	08022d38 	.word	0x08022d38
 80203fc:	08022cc5 	.word	0x08022cc5
 8020400:	08022c98 	.word	0x08022c98
 8020404:	f8db 301c 	ldr.w	r3, [fp, #28]
 8020408:	6018      	str	r0, [r3, #0]
 802040a:	9b07      	ldr	r3, [sp, #28]
 802040c:	2b0e      	cmp	r3, #14
 802040e:	f200 80a4 	bhi.w	802055a <_dtoa_r+0x442>
 8020412:	2c00      	cmp	r4, #0
 8020414:	f000 80a1 	beq.w	802055a <_dtoa_r+0x442>
 8020418:	2f00      	cmp	r7, #0
 802041a:	dd33      	ble.n	8020484 <_dtoa_r+0x36c>
 802041c:	4bad      	ldr	r3, [pc, #692]	@ (80206d4 <_dtoa_r+0x5bc>)
 802041e:	f007 020f 	and.w	r2, r7, #15
 8020422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020426:	ed93 7b00 	vldr	d7, [r3]
 802042a:	05f8      	lsls	r0, r7, #23
 802042c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8020430:	ea4f 1427 	mov.w	r4, r7, asr #4
 8020434:	d516      	bpl.n	8020464 <_dtoa_r+0x34c>
 8020436:	4ba8      	ldr	r3, [pc, #672]	@ (80206d8 <_dtoa_r+0x5c0>)
 8020438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802043c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8020440:	f7e0 fa2c 	bl	800089c <__aeabi_ddiv>
 8020444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020448:	f004 040f 	and.w	r4, r4, #15
 802044c:	2603      	movs	r6, #3
 802044e:	4da2      	ldr	r5, [pc, #648]	@ (80206d8 <_dtoa_r+0x5c0>)
 8020450:	b954      	cbnz	r4, 8020468 <_dtoa_r+0x350>
 8020452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8020456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802045a:	f7e0 fa1f 	bl	800089c <__aeabi_ddiv>
 802045e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020462:	e028      	b.n	80204b6 <_dtoa_r+0x39e>
 8020464:	2602      	movs	r6, #2
 8020466:	e7f2      	b.n	802044e <_dtoa_r+0x336>
 8020468:	07e1      	lsls	r1, r4, #31
 802046a:	d508      	bpl.n	802047e <_dtoa_r+0x366>
 802046c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8020470:	e9d5 2300 	ldrd	r2, r3, [r5]
 8020474:	f7e0 f8e8 	bl	8000648 <__aeabi_dmul>
 8020478:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802047c:	3601      	adds	r6, #1
 802047e:	1064      	asrs	r4, r4, #1
 8020480:	3508      	adds	r5, #8
 8020482:	e7e5      	b.n	8020450 <_dtoa_r+0x338>
 8020484:	f000 80d2 	beq.w	802062c <_dtoa_r+0x514>
 8020488:	427c      	negs	r4, r7
 802048a:	4b92      	ldr	r3, [pc, #584]	@ (80206d4 <_dtoa_r+0x5bc>)
 802048c:	4d92      	ldr	r5, [pc, #584]	@ (80206d8 <_dtoa_r+0x5c0>)
 802048e:	f004 020f 	and.w	r2, r4, #15
 8020492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020496:	e9d3 2300 	ldrd	r2, r3, [r3]
 802049a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802049e:	f7e0 f8d3 	bl	8000648 <__aeabi_dmul>
 80204a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80204a6:	1124      	asrs	r4, r4, #4
 80204a8:	2300      	movs	r3, #0
 80204aa:	2602      	movs	r6, #2
 80204ac:	2c00      	cmp	r4, #0
 80204ae:	f040 80b2 	bne.w	8020616 <_dtoa_r+0x4fe>
 80204b2:	2b00      	cmp	r3, #0
 80204b4:	d1d3      	bne.n	802045e <_dtoa_r+0x346>
 80204b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80204b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80204bc:	2b00      	cmp	r3, #0
 80204be:	f000 80b7 	beq.w	8020630 <_dtoa_r+0x518>
 80204c2:	4b86      	ldr	r3, [pc, #536]	@ (80206dc <_dtoa_r+0x5c4>)
 80204c4:	2200      	movs	r2, #0
 80204c6:	4620      	mov	r0, r4
 80204c8:	4629      	mov	r1, r5
 80204ca:	f7e0 fb2f 	bl	8000b2c <__aeabi_dcmplt>
 80204ce:	2800      	cmp	r0, #0
 80204d0:	f000 80ae 	beq.w	8020630 <_dtoa_r+0x518>
 80204d4:	9b07      	ldr	r3, [sp, #28]
 80204d6:	2b00      	cmp	r3, #0
 80204d8:	f000 80aa 	beq.w	8020630 <_dtoa_r+0x518>
 80204dc:	9b00      	ldr	r3, [sp, #0]
 80204de:	2b00      	cmp	r3, #0
 80204e0:	dd37      	ble.n	8020552 <_dtoa_r+0x43a>
 80204e2:	1e7b      	subs	r3, r7, #1
 80204e4:	9304      	str	r3, [sp, #16]
 80204e6:	4620      	mov	r0, r4
 80204e8:	4b7d      	ldr	r3, [pc, #500]	@ (80206e0 <_dtoa_r+0x5c8>)
 80204ea:	2200      	movs	r2, #0
 80204ec:	4629      	mov	r1, r5
 80204ee:	f7e0 f8ab 	bl	8000648 <__aeabi_dmul>
 80204f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80204f6:	9c00      	ldr	r4, [sp, #0]
 80204f8:	3601      	adds	r6, #1
 80204fa:	4630      	mov	r0, r6
 80204fc:	f7e0 f83a 	bl	8000574 <__aeabi_i2d>
 8020500:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020504:	f7e0 f8a0 	bl	8000648 <__aeabi_dmul>
 8020508:	4b76      	ldr	r3, [pc, #472]	@ (80206e4 <_dtoa_r+0x5cc>)
 802050a:	2200      	movs	r2, #0
 802050c:	f7df fee6 	bl	80002dc <__adddf3>
 8020510:	4605      	mov	r5, r0
 8020512:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8020516:	2c00      	cmp	r4, #0
 8020518:	f040 808d 	bne.w	8020636 <_dtoa_r+0x51e>
 802051c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020520:	4b71      	ldr	r3, [pc, #452]	@ (80206e8 <_dtoa_r+0x5d0>)
 8020522:	2200      	movs	r2, #0
 8020524:	f7df fed8 	bl	80002d8 <__aeabi_dsub>
 8020528:	4602      	mov	r2, r0
 802052a:	460b      	mov	r3, r1
 802052c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8020530:	462a      	mov	r2, r5
 8020532:	4633      	mov	r3, r6
 8020534:	f7e0 fb18 	bl	8000b68 <__aeabi_dcmpgt>
 8020538:	2800      	cmp	r0, #0
 802053a:	f040 828b 	bne.w	8020a54 <_dtoa_r+0x93c>
 802053e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020542:	462a      	mov	r2, r5
 8020544:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8020548:	f7e0 faf0 	bl	8000b2c <__aeabi_dcmplt>
 802054c:	2800      	cmp	r0, #0
 802054e:	f040 8128 	bne.w	80207a2 <_dtoa_r+0x68a>
 8020552:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8020556:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802055a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802055c:	2b00      	cmp	r3, #0
 802055e:	f2c0 815a 	blt.w	8020816 <_dtoa_r+0x6fe>
 8020562:	2f0e      	cmp	r7, #14
 8020564:	f300 8157 	bgt.w	8020816 <_dtoa_r+0x6fe>
 8020568:	4b5a      	ldr	r3, [pc, #360]	@ (80206d4 <_dtoa_r+0x5bc>)
 802056a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802056e:	ed93 7b00 	vldr	d7, [r3]
 8020572:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020574:	2b00      	cmp	r3, #0
 8020576:	ed8d 7b00 	vstr	d7, [sp]
 802057a:	da03      	bge.n	8020584 <_dtoa_r+0x46c>
 802057c:	9b07      	ldr	r3, [sp, #28]
 802057e:	2b00      	cmp	r3, #0
 8020580:	f340 8101 	ble.w	8020786 <_dtoa_r+0x66e>
 8020584:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8020588:	4656      	mov	r6, sl
 802058a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802058e:	4620      	mov	r0, r4
 8020590:	4629      	mov	r1, r5
 8020592:	f7e0 f983 	bl	800089c <__aeabi_ddiv>
 8020596:	f7e0 fb07 	bl	8000ba8 <__aeabi_d2iz>
 802059a:	4680      	mov	r8, r0
 802059c:	f7df ffea 	bl	8000574 <__aeabi_i2d>
 80205a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80205a4:	f7e0 f850 	bl	8000648 <__aeabi_dmul>
 80205a8:	4602      	mov	r2, r0
 80205aa:	460b      	mov	r3, r1
 80205ac:	4620      	mov	r0, r4
 80205ae:	4629      	mov	r1, r5
 80205b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80205b4:	f7df fe90 	bl	80002d8 <__aeabi_dsub>
 80205b8:	f806 4b01 	strb.w	r4, [r6], #1
 80205bc:	9d07      	ldr	r5, [sp, #28]
 80205be:	eba6 040a 	sub.w	r4, r6, sl
 80205c2:	42a5      	cmp	r5, r4
 80205c4:	4602      	mov	r2, r0
 80205c6:	460b      	mov	r3, r1
 80205c8:	f040 8117 	bne.w	80207fa <_dtoa_r+0x6e2>
 80205cc:	f7df fe86 	bl	80002dc <__adddf3>
 80205d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80205d4:	4604      	mov	r4, r0
 80205d6:	460d      	mov	r5, r1
 80205d8:	f7e0 fac6 	bl	8000b68 <__aeabi_dcmpgt>
 80205dc:	2800      	cmp	r0, #0
 80205de:	f040 80f9 	bne.w	80207d4 <_dtoa_r+0x6bc>
 80205e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80205e6:	4620      	mov	r0, r4
 80205e8:	4629      	mov	r1, r5
 80205ea:	f7e0 fa95 	bl	8000b18 <__aeabi_dcmpeq>
 80205ee:	b118      	cbz	r0, 80205f8 <_dtoa_r+0x4e0>
 80205f0:	f018 0f01 	tst.w	r8, #1
 80205f4:	f040 80ee 	bne.w	80207d4 <_dtoa_r+0x6bc>
 80205f8:	4649      	mov	r1, r9
 80205fa:	4658      	mov	r0, fp
 80205fc:	f000 fbda 	bl	8020db4 <_Bfree>
 8020600:	2300      	movs	r3, #0
 8020602:	7033      	strb	r3, [r6, #0]
 8020604:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020606:	3701      	adds	r7, #1
 8020608:	601f      	str	r7, [r3, #0]
 802060a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802060c:	2b00      	cmp	r3, #0
 802060e:	f000 831d 	beq.w	8020c4c <_dtoa_r+0xb34>
 8020612:	601e      	str	r6, [r3, #0]
 8020614:	e31a      	b.n	8020c4c <_dtoa_r+0xb34>
 8020616:	07e2      	lsls	r2, r4, #31
 8020618:	d505      	bpl.n	8020626 <_dtoa_r+0x50e>
 802061a:	e9d5 2300 	ldrd	r2, r3, [r5]
 802061e:	f7e0 f813 	bl	8000648 <__aeabi_dmul>
 8020622:	3601      	adds	r6, #1
 8020624:	2301      	movs	r3, #1
 8020626:	1064      	asrs	r4, r4, #1
 8020628:	3508      	adds	r5, #8
 802062a:	e73f      	b.n	80204ac <_dtoa_r+0x394>
 802062c:	2602      	movs	r6, #2
 802062e:	e742      	b.n	80204b6 <_dtoa_r+0x39e>
 8020630:	9c07      	ldr	r4, [sp, #28]
 8020632:	9704      	str	r7, [sp, #16]
 8020634:	e761      	b.n	80204fa <_dtoa_r+0x3e2>
 8020636:	4b27      	ldr	r3, [pc, #156]	@ (80206d4 <_dtoa_r+0x5bc>)
 8020638:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802063a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802063e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8020642:	4454      	add	r4, sl
 8020644:	2900      	cmp	r1, #0
 8020646:	d053      	beq.n	80206f0 <_dtoa_r+0x5d8>
 8020648:	4928      	ldr	r1, [pc, #160]	@ (80206ec <_dtoa_r+0x5d4>)
 802064a:	2000      	movs	r0, #0
 802064c:	f7e0 f926 	bl	800089c <__aeabi_ddiv>
 8020650:	4633      	mov	r3, r6
 8020652:	462a      	mov	r2, r5
 8020654:	f7df fe40 	bl	80002d8 <__aeabi_dsub>
 8020658:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802065c:	4656      	mov	r6, sl
 802065e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020662:	f7e0 faa1 	bl	8000ba8 <__aeabi_d2iz>
 8020666:	4605      	mov	r5, r0
 8020668:	f7df ff84 	bl	8000574 <__aeabi_i2d>
 802066c:	4602      	mov	r2, r0
 802066e:	460b      	mov	r3, r1
 8020670:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020674:	f7df fe30 	bl	80002d8 <__aeabi_dsub>
 8020678:	3530      	adds	r5, #48	@ 0x30
 802067a:	4602      	mov	r2, r0
 802067c:	460b      	mov	r3, r1
 802067e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8020682:	f806 5b01 	strb.w	r5, [r6], #1
 8020686:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802068a:	f7e0 fa4f 	bl	8000b2c <__aeabi_dcmplt>
 802068e:	2800      	cmp	r0, #0
 8020690:	d171      	bne.n	8020776 <_dtoa_r+0x65e>
 8020692:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020696:	4911      	ldr	r1, [pc, #68]	@ (80206dc <_dtoa_r+0x5c4>)
 8020698:	2000      	movs	r0, #0
 802069a:	f7df fe1d 	bl	80002d8 <__aeabi_dsub>
 802069e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80206a2:	f7e0 fa43 	bl	8000b2c <__aeabi_dcmplt>
 80206a6:	2800      	cmp	r0, #0
 80206a8:	f040 8095 	bne.w	80207d6 <_dtoa_r+0x6be>
 80206ac:	42a6      	cmp	r6, r4
 80206ae:	f43f af50 	beq.w	8020552 <_dtoa_r+0x43a>
 80206b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80206b6:	4b0a      	ldr	r3, [pc, #40]	@ (80206e0 <_dtoa_r+0x5c8>)
 80206b8:	2200      	movs	r2, #0
 80206ba:	f7df ffc5 	bl	8000648 <__aeabi_dmul>
 80206be:	4b08      	ldr	r3, [pc, #32]	@ (80206e0 <_dtoa_r+0x5c8>)
 80206c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80206c4:	2200      	movs	r2, #0
 80206c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80206ca:	f7df ffbd 	bl	8000648 <__aeabi_dmul>
 80206ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80206d2:	e7c4      	b.n	802065e <_dtoa_r+0x546>
 80206d4:	08022dd8 	.word	0x08022dd8
 80206d8:	08022db0 	.word	0x08022db0
 80206dc:	3ff00000 	.word	0x3ff00000
 80206e0:	40240000 	.word	0x40240000
 80206e4:	401c0000 	.word	0x401c0000
 80206e8:	40140000 	.word	0x40140000
 80206ec:	3fe00000 	.word	0x3fe00000
 80206f0:	4631      	mov	r1, r6
 80206f2:	4628      	mov	r0, r5
 80206f4:	f7df ffa8 	bl	8000648 <__aeabi_dmul>
 80206f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80206fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80206fe:	4656      	mov	r6, sl
 8020700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020704:	f7e0 fa50 	bl	8000ba8 <__aeabi_d2iz>
 8020708:	4605      	mov	r5, r0
 802070a:	f7df ff33 	bl	8000574 <__aeabi_i2d>
 802070e:	4602      	mov	r2, r0
 8020710:	460b      	mov	r3, r1
 8020712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020716:	f7df fddf 	bl	80002d8 <__aeabi_dsub>
 802071a:	3530      	adds	r5, #48	@ 0x30
 802071c:	f806 5b01 	strb.w	r5, [r6], #1
 8020720:	4602      	mov	r2, r0
 8020722:	460b      	mov	r3, r1
 8020724:	42a6      	cmp	r6, r4
 8020726:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802072a:	f04f 0200 	mov.w	r2, #0
 802072e:	d124      	bne.n	802077a <_dtoa_r+0x662>
 8020730:	4bac      	ldr	r3, [pc, #688]	@ (80209e4 <_dtoa_r+0x8cc>)
 8020732:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8020736:	f7df fdd1 	bl	80002dc <__adddf3>
 802073a:	4602      	mov	r2, r0
 802073c:	460b      	mov	r3, r1
 802073e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020742:	f7e0 fa11 	bl	8000b68 <__aeabi_dcmpgt>
 8020746:	2800      	cmp	r0, #0
 8020748:	d145      	bne.n	80207d6 <_dtoa_r+0x6be>
 802074a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802074e:	49a5      	ldr	r1, [pc, #660]	@ (80209e4 <_dtoa_r+0x8cc>)
 8020750:	2000      	movs	r0, #0
 8020752:	f7df fdc1 	bl	80002d8 <__aeabi_dsub>
 8020756:	4602      	mov	r2, r0
 8020758:	460b      	mov	r3, r1
 802075a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802075e:	f7e0 f9e5 	bl	8000b2c <__aeabi_dcmplt>
 8020762:	2800      	cmp	r0, #0
 8020764:	f43f aef5 	beq.w	8020552 <_dtoa_r+0x43a>
 8020768:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 802076a:	1e73      	subs	r3, r6, #1
 802076c:	9315      	str	r3, [sp, #84]	@ 0x54
 802076e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8020772:	2b30      	cmp	r3, #48	@ 0x30
 8020774:	d0f8      	beq.n	8020768 <_dtoa_r+0x650>
 8020776:	9f04      	ldr	r7, [sp, #16]
 8020778:	e73e      	b.n	80205f8 <_dtoa_r+0x4e0>
 802077a:	4b9b      	ldr	r3, [pc, #620]	@ (80209e8 <_dtoa_r+0x8d0>)
 802077c:	f7df ff64 	bl	8000648 <__aeabi_dmul>
 8020780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020784:	e7bc      	b.n	8020700 <_dtoa_r+0x5e8>
 8020786:	d10c      	bne.n	80207a2 <_dtoa_r+0x68a>
 8020788:	4b98      	ldr	r3, [pc, #608]	@ (80209ec <_dtoa_r+0x8d4>)
 802078a:	2200      	movs	r2, #0
 802078c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020790:	f7df ff5a 	bl	8000648 <__aeabi_dmul>
 8020794:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020798:	f7e0 f9dc 	bl	8000b54 <__aeabi_dcmpge>
 802079c:	2800      	cmp	r0, #0
 802079e:	f000 8157 	beq.w	8020a50 <_dtoa_r+0x938>
 80207a2:	2400      	movs	r4, #0
 80207a4:	4625      	mov	r5, r4
 80207a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80207a8:	43db      	mvns	r3, r3
 80207aa:	9304      	str	r3, [sp, #16]
 80207ac:	4656      	mov	r6, sl
 80207ae:	2700      	movs	r7, #0
 80207b0:	4621      	mov	r1, r4
 80207b2:	4658      	mov	r0, fp
 80207b4:	f000 fafe 	bl	8020db4 <_Bfree>
 80207b8:	2d00      	cmp	r5, #0
 80207ba:	d0dc      	beq.n	8020776 <_dtoa_r+0x65e>
 80207bc:	b12f      	cbz	r7, 80207ca <_dtoa_r+0x6b2>
 80207be:	42af      	cmp	r7, r5
 80207c0:	d003      	beq.n	80207ca <_dtoa_r+0x6b2>
 80207c2:	4639      	mov	r1, r7
 80207c4:	4658      	mov	r0, fp
 80207c6:	f000 faf5 	bl	8020db4 <_Bfree>
 80207ca:	4629      	mov	r1, r5
 80207cc:	4658      	mov	r0, fp
 80207ce:	f000 faf1 	bl	8020db4 <_Bfree>
 80207d2:	e7d0      	b.n	8020776 <_dtoa_r+0x65e>
 80207d4:	9704      	str	r7, [sp, #16]
 80207d6:	4633      	mov	r3, r6
 80207d8:	461e      	mov	r6, r3
 80207da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80207de:	2a39      	cmp	r2, #57	@ 0x39
 80207e0:	d107      	bne.n	80207f2 <_dtoa_r+0x6da>
 80207e2:	459a      	cmp	sl, r3
 80207e4:	d1f8      	bne.n	80207d8 <_dtoa_r+0x6c0>
 80207e6:	9a04      	ldr	r2, [sp, #16]
 80207e8:	3201      	adds	r2, #1
 80207ea:	9204      	str	r2, [sp, #16]
 80207ec:	2230      	movs	r2, #48	@ 0x30
 80207ee:	f88a 2000 	strb.w	r2, [sl]
 80207f2:	781a      	ldrb	r2, [r3, #0]
 80207f4:	3201      	adds	r2, #1
 80207f6:	701a      	strb	r2, [r3, #0]
 80207f8:	e7bd      	b.n	8020776 <_dtoa_r+0x65e>
 80207fa:	4b7b      	ldr	r3, [pc, #492]	@ (80209e8 <_dtoa_r+0x8d0>)
 80207fc:	2200      	movs	r2, #0
 80207fe:	f7df ff23 	bl	8000648 <__aeabi_dmul>
 8020802:	2200      	movs	r2, #0
 8020804:	2300      	movs	r3, #0
 8020806:	4604      	mov	r4, r0
 8020808:	460d      	mov	r5, r1
 802080a:	f7e0 f985 	bl	8000b18 <__aeabi_dcmpeq>
 802080e:	2800      	cmp	r0, #0
 8020810:	f43f aebb 	beq.w	802058a <_dtoa_r+0x472>
 8020814:	e6f0      	b.n	80205f8 <_dtoa_r+0x4e0>
 8020816:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020818:	2a00      	cmp	r2, #0
 802081a:	f000 80db 	beq.w	80209d4 <_dtoa_r+0x8bc>
 802081e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020820:	2a01      	cmp	r2, #1
 8020822:	f300 80bf 	bgt.w	80209a4 <_dtoa_r+0x88c>
 8020826:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020828:	2a00      	cmp	r2, #0
 802082a:	f000 80b7 	beq.w	802099c <_dtoa_r+0x884>
 802082e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8020832:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020834:	4646      	mov	r6, r8
 8020836:	9a08      	ldr	r2, [sp, #32]
 8020838:	2101      	movs	r1, #1
 802083a:	441a      	add	r2, r3
 802083c:	4658      	mov	r0, fp
 802083e:	4498      	add	r8, r3
 8020840:	9208      	str	r2, [sp, #32]
 8020842:	f000 fb6b 	bl	8020f1c <__i2b>
 8020846:	4605      	mov	r5, r0
 8020848:	b15e      	cbz	r6, 8020862 <_dtoa_r+0x74a>
 802084a:	9b08      	ldr	r3, [sp, #32]
 802084c:	2b00      	cmp	r3, #0
 802084e:	dd08      	ble.n	8020862 <_dtoa_r+0x74a>
 8020850:	42b3      	cmp	r3, r6
 8020852:	9a08      	ldr	r2, [sp, #32]
 8020854:	bfa8      	it	ge
 8020856:	4633      	movge	r3, r6
 8020858:	eba8 0803 	sub.w	r8, r8, r3
 802085c:	1af6      	subs	r6, r6, r3
 802085e:	1ad3      	subs	r3, r2, r3
 8020860:	9308      	str	r3, [sp, #32]
 8020862:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020864:	b1f3      	cbz	r3, 80208a4 <_dtoa_r+0x78c>
 8020866:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020868:	2b00      	cmp	r3, #0
 802086a:	f000 80b7 	beq.w	80209dc <_dtoa_r+0x8c4>
 802086e:	b18c      	cbz	r4, 8020894 <_dtoa_r+0x77c>
 8020870:	4629      	mov	r1, r5
 8020872:	4622      	mov	r2, r4
 8020874:	4658      	mov	r0, fp
 8020876:	f000 fc11 	bl	802109c <__pow5mult>
 802087a:	464a      	mov	r2, r9
 802087c:	4601      	mov	r1, r0
 802087e:	4605      	mov	r5, r0
 8020880:	4658      	mov	r0, fp
 8020882:	f000 fb61 	bl	8020f48 <__multiply>
 8020886:	4649      	mov	r1, r9
 8020888:	9004      	str	r0, [sp, #16]
 802088a:	4658      	mov	r0, fp
 802088c:	f000 fa92 	bl	8020db4 <_Bfree>
 8020890:	9b04      	ldr	r3, [sp, #16]
 8020892:	4699      	mov	r9, r3
 8020894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020896:	1b1a      	subs	r2, r3, r4
 8020898:	d004      	beq.n	80208a4 <_dtoa_r+0x78c>
 802089a:	4649      	mov	r1, r9
 802089c:	4658      	mov	r0, fp
 802089e:	f000 fbfd 	bl	802109c <__pow5mult>
 80208a2:	4681      	mov	r9, r0
 80208a4:	2101      	movs	r1, #1
 80208a6:	4658      	mov	r0, fp
 80208a8:	f000 fb38 	bl	8020f1c <__i2b>
 80208ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80208ae:	4604      	mov	r4, r0
 80208b0:	2b00      	cmp	r3, #0
 80208b2:	f000 81cf 	beq.w	8020c54 <_dtoa_r+0xb3c>
 80208b6:	461a      	mov	r2, r3
 80208b8:	4601      	mov	r1, r0
 80208ba:	4658      	mov	r0, fp
 80208bc:	f000 fbee 	bl	802109c <__pow5mult>
 80208c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80208c2:	2b01      	cmp	r3, #1
 80208c4:	4604      	mov	r4, r0
 80208c6:	f300 8095 	bgt.w	80209f4 <_dtoa_r+0x8dc>
 80208ca:	9b02      	ldr	r3, [sp, #8]
 80208cc:	2b00      	cmp	r3, #0
 80208ce:	f040 8087 	bne.w	80209e0 <_dtoa_r+0x8c8>
 80208d2:	9b03      	ldr	r3, [sp, #12]
 80208d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80208d8:	2b00      	cmp	r3, #0
 80208da:	f040 8089 	bne.w	80209f0 <_dtoa_r+0x8d8>
 80208de:	9b03      	ldr	r3, [sp, #12]
 80208e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80208e4:	0d1b      	lsrs	r3, r3, #20
 80208e6:	051b      	lsls	r3, r3, #20
 80208e8:	b12b      	cbz	r3, 80208f6 <_dtoa_r+0x7de>
 80208ea:	9b08      	ldr	r3, [sp, #32]
 80208ec:	3301      	adds	r3, #1
 80208ee:	9308      	str	r3, [sp, #32]
 80208f0:	f108 0801 	add.w	r8, r8, #1
 80208f4:	2301      	movs	r3, #1
 80208f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80208f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80208fa:	2b00      	cmp	r3, #0
 80208fc:	f000 81b0 	beq.w	8020c60 <_dtoa_r+0xb48>
 8020900:	6923      	ldr	r3, [r4, #16]
 8020902:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8020906:	6918      	ldr	r0, [r3, #16]
 8020908:	f000 fabc 	bl	8020e84 <__hi0bits>
 802090c:	f1c0 0020 	rsb	r0, r0, #32
 8020910:	9b08      	ldr	r3, [sp, #32]
 8020912:	4418      	add	r0, r3
 8020914:	f010 001f 	ands.w	r0, r0, #31
 8020918:	d077      	beq.n	8020a0a <_dtoa_r+0x8f2>
 802091a:	f1c0 0320 	rsb	r3, r0, #32
 802091e:	2b04      	cmp	r3, #4
 8020920:	dd6b      	ble.n	80209fa <_dtoa_r+0x8e2>
 8020922:	9b08      	ldr	r3, [sp, #32]
 8020924:	f1c0 001c 	rsb	r0, r0, #28
 8020928:	4403      	add	r3, r0
 802092a:	4480      	add	r8, r0
 802092c:	4406      	add	r6, r0
 802092e:	9308      	str	r3, [sp, #32]
 8020930:	f1b8 0f00 	cmp.w	r8, #0
 8020934:	dd05      	ble.n	8020942 <_dtoa_r+0x82a>
 8020936:	4649      	mov	r1, r9
 8020938:	4642      	mov	r2, r8
 802093a:	4658      	mov	r0, fp
 802093c:	f000 fc08 	bl	8021150 <__lshift>
 8020940:	4681      	mov	r9, r0
 8020942:	9b08      	ldr	r3, [sp, #32]
 8020944:	2b00      	cmp	r3, #0
 8020946:	dd05      	ble.n	8020954 <_dtoa_r+0x83c>
 8020948:	4621      	mov	r1, r4
 802094a:	461a      	mov	r2, r3
 802094c:	4658      	mov	r0, fp
 802094e:	f000 fbff 	bl	8021150 <__lshift>
 8020952:	4604      	mov	r4, r0
 8020954:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020956:	2b00      	cmp	r3, #0
 8020958:	d059      	beq.n	8020a0e <_dtoa_r+0x8f6>
 802095a:	4621      	mov	r1, r4
 802095c:	4648      	mov	r0, r9
 802095e:	f000 fc63 	bl	8021228 <__mcmp>
 8020962:	2800      	cmp	r0, #0
 8020964:	da53      	bge.n	8020a0e <_dtoa_r+0x8f6>
 8020966:	1e7b      	subs	r3, r7, #1
 8020968:	9304      	str	r3, [sp, #16]
 802096a:	4649      	mov	r1, r9
 802096c:	2300      	movs	r3, #0
 802096e:	220a      	movs	r2, #10
 8020970:	4658      	mov	r0, fp
 8020972:	f000 fa41 	bl	8020df8 <__multadd>
 8020976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020978:	4681      	mov	r9, r0
 802097a:	2b00      	cmp	r3, #0
 802097c:	f000 8172 	beq.w	8020c64 <_dtoa_r+0xb4c>
 8020980:	2300      	movs	r3, #0
 8020982:	4629      	mov	r1, r5
 8020984:	220a      	movs	r2, #10
 8020986:	4658      	mov	r0, fp
 8020988:	f000 fa36 	bl	8020df8 <__multadd>
 802098c:	9b00      	ldr	r3, [sp, #0]
 802098e:	2b00      	cmp	r3, #0
 8020990:	4605      	mov	r5, r0
 8020992:	dc67      	bgt.n	8020a64 <_dtoa_r+0x94c>
 8020994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020996:	2b02      	cmp	r3, #2
 8020998:	dc41      	bgt.n	8020a1e <_dtoa_r+0x906>
 802099a:	e063      	b.n	8020a64 <_dtoa_r+0x94c>
 802099c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802099e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80209a2:	e746      	b.n	8020832 <_dtoa_r+0x71a>
 80209a4:	9b07      	ldr	r3, [sp, #28]
 80209a6:	1e5c      	subs	r4, r3, #1
 80209a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80209aa:	42a3      	cmp	r3, r4
 80209ac:	bfbf      	itttt	lt
 80209ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80209b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80209b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80209b4:	1ae3      	sublt	r3, r4, r3
 80209b6:	bfb4      	ite	lt
 80209b8:	18d2      	addlt	r2, r2, r3
 80209ba:	1b1c      	subge	r4, r3, r4
 80209bc:	9b07      	ldr	r3, [sp, #28]
 80209be:	bfbc      	itt	lt
 80209c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80209c2:	2400      	movlt	r4, #0
 80209c4:	2b00      	cmp	r3, #0
 80209c6:	bfb5      	itete	lt
 80209c8:	eba8 0603 	sublt.w	r6, r8, r3
 80209cc:	9b07      	ldrge	r3, [sp, #28]
 80209ce:	2300      	movlt	r3, #0
 80209d0:	4646      	movge	r6, r8
 80209d2:	e730      	b.n	8020836 <_dtoa_r+0x71e>
 80209d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80209d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80209d8:	4646      	mov	r6, r8
 80209da:	e735      	b.n	8020848 <_dtoa_r+0x730>
 80209dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80209de:	e75c      	b.n	802089a <_dtoa_r+0x782>
 80209e0:	2300      	movs	r3, #0
 80209e2:	e788      	b.n	80208f6 <_dtoa_r+0x7de>
 80209e4:	3fe00000 	.word	0x3fe00000
 80209e8:	40240000 	.word	0x40240000
 80209ec:	40140000 	.word	0x40140000
 80209f0:	9b02      	ldr	r3, [sp, #8]
 80209f2:	e780      	b.n	80208f6 <_dtoa_r+0x7de>
 80209f4:	2300      	movs	r3, #0
 80209f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80209f8:	e782      	b.n	8020900 <_dtoa_r+0x7e8>
 80209fa:	d099      	beq.n	8020930 <_dtoa_r+0x818>
 80209fc:	9a08      	ldr	r2, [sp, #32]
 80209fe:	331c      	adds	r3, #28
 8020a00:	441a      	add	r2, r3
 8020a02:	4498      	add	r8, r3
 8020a04:	441e      	add	r6, r3
 8020a06:	9208      	str	r2, [sp, #32]
 8020a08:	e792      	b.n	8020930 <_dtoa_r+0x818>
 8020a0a:	4603      	mov	r3, r0
 8020a0c:	e7f6      	b.n	80209fc <_dtoa_r+0x8e4>
 8020a0e:	9b07      	ldr	r3, [sp, #28]
 8020a10:	9704      	str	r7, [sp, #16]
 8020a12:	2b00      	cmp	r3, #0
 8020a14:	dc20      	bgt.n	8020a58 <_dtoa_r+0x940>
 8020a16:	9300      	str	r3, [sp, #0]
 8020a18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020a1a:	2b02      	cmp	r3, #2
 8020a1c:	dd1e      	ble.n	8020a5c <_dtoa_r+0x944>
 8020a1e:	9b00      	ldr	r3, [sp, #0]
 8020a20:	2b00      	cmp	r3, #0
 8020a22:	f47f aec0 	bne.w	80207a6 <_dtoa_r+0x68e>
 8020a26:	4621      	mov	r1, r4
 8020a28:	2205      	movs	r2, #5
 8020a2a:	4658      	mov	r0, fp
 8020a2c:	f000 f9e4 	bl	8020df8 <__multadd>
 8020a30:	4601      	mov	r1, r0
 8020a32:	4604      	mov	r4, r0
 8020a34:	4648      	mov	r0, r9
 8020a36:	f000 fbf7 	bl	8021228 <__mcmp>
 8020a3a:	2800      	cmp	r0, #0
 8020a3c:	f77f aeb3 	ble.w	80207a6 <_dtoa_r+0x68e>
 8020a40:	4656      	mov	r6, sl
 8020a42:	2331      	movs	r3, #49	@ 0x31
 8020a44:	f806 3b01 	strb.w	r3, [r6], #1
 8020a48:	9b04      	ldr	r3, [sp, #16]
 8020a4a:	3301      	adds	r3, #1
 8020a4c:	9304      	str	r3, [sp, #16]
 8020a4e:	e6ae      	b.n	80207ae <_dtoa_r+0x696>
 8020a50:	9c07      	ldr	r4, [sp, #28]
 8020a52:	9704      	str	r7, [sp, #16]
 8020a54:	4625      	mov	r5, r4
 8020a56:	e7f3      	b.n	8020a40 <_dtoa_r+0x928>
 8020a58:	9b07      	ldr	r3, [sp, #28]
 8020a5a:	9300      	str	r3, [sp, #0]
 8020a5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020a5e:	2b00      	cmp	r3, #0
 8020a60:	f000 8104 	beq.w	8020c6c <_dtoa_r+0xb54>
 8020a64:	2e00      	cmp	r6, #0
 8020a66:	dd05      	ble.n	8020a74 <_dtoa_r+0x95c>
 8020a68:	4629      	mov	r1, r5
 8020a6a:	4632      	mov	r2, r6
 8020a6c:	4658      	mov	r0, fp
 8020a6e:	f000 fb6f 	bl	8021150 <__lshift>
 8020a72:	4605      	mov	r5, r0
 8020a74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020a76:	2b00      	cmp	r3, #0
 8020a78:	d05a      	beq.n	8020b30 <_dtoa_r+0xa18>
 8020a7a:	6869      	ldr	r1, [r5, #4]
 8020a7c:	4658      	mov	r0, fp
 8020a7e:	f000 f959 	bl	8020d34 <_Balloc>
 8020a82:	4606      	mov	r6, r0
 8020a84:	b928      	cbnz	r0, 8020a92 <_dtoa_r+0x97a>
 8020a86:	4b84      	ldr	r3, [pc, #528]	@ (8020c98 <_dtoa_r+0xb80>)
 8020a88:	4602      	mov	r2, r0
 8020a8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8020a8e:	f7ff bb5a 	b.w	8020146 <_dtoa_r+0x2e>
 8020a92:	692a      	ldr	r2, [r5, #16]
 8020a94:	3202      	adds	r2, #2
 8020a96:	0092      	lsls	r2, r2, #2
 8020a98:	f105 010c 	add.w	r1, r5, #12
 8020a9c:	300c      	adds	r0, #12
 8020a9e:	f7ff faa4 	bl	801ffea <memcpy>
 8020aa2:	2201      	movs	r2, #1
 8020aa4:	4631      	mov	r1, r6
 8020aa6:	4658      	mov	r0, fp
 8020aa8:	f000 fb52 	bl	8021150 <__lshift>
 8020aac:	f10a 0301 	add.w	r3, sl, #1
 8020ab0:	9307      	str	r3, [sp, #28]
 8020ab2:	9b00      	ldr	r3, [sp, #0]
 8020ab4:	4453      	add	r3, sl
 8020ab6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020ab8:	9b02      	ldr	r3, [sp, #8]
 8020aba:	f003 0301 	and.w	r3, r3, #1
 8020abe:	462f      	mov	r7, r5
 8020ac0:	930a      	str	r3, [sp, #40]	@ 0x28
 8020ac2:	4605      	mov	r5, r0
 8020ac4:	9b07      	ldr	r3, [sp, #28]
 8020ac6:	4621      	mov	r1, r4
 8020ac8:	3b01      	subs	r3, #1
 8020aca:	4648      	mov	r0, r9
 8020acc:	9300      	str	r3, [sp, #0]
 8020ace:	f7ff fa9a 	bl	8020006 <quorem>
 8020ad2:	4639      	mov	r1, r7
 8020ad4:	9002      	str	r0, [sp, #8]
 8020ad6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8020ada:	4648      	mov	r0, r9
 8020adc:	f000 fba4 	bl	8021228 <__mcmp>
 8020ae0:	462a      	mov	r2, r5
 8020ae2:	9008      	str	r0, [sp, #32]
 8020ae4:	4621      	mov	r1, r4
 8020ae6:	4658      	mov	r0, fp
 8020ae8:	f000 fbba 	bl	8021260 <__mdiff>
 8020aec:	68c2      	ldr	r2, [r0, #12]
 8020aee:	4606      	mov	r6, r0
 8020af0:	bb02      	cbnz	r2, 8020b34 <_dtoa_r+0xa1c>
 8020af2:	4601      	mov	r1, r0
 8020af4:	4648      	mov	r0, r9
 8020af6:	f000 fb97 	bl	8021228 <__mcmp>
 8020afa:	4602      	mov	r2, r0
 8020afc:	4631      	mov	r1, r6
 8020afe:	4658      	mov	r0, fp
 8020b00:	920e      	str	r2, [sp, #56]	@ 0x38
 8020b02:	f000 f957 	bl	8020db4 <_Bfree>
 8020b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020b0a:	9e07      	ldr	r6, [sp, #28]
 8020b0c:	ea43 0102 	orr.w	r1, r3, r2
 8020b10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020b12:	4319      	orrs	r1, r3
 8020b14:	d110      	bne.n	8020b38 <_dtoa_r+0xa20>
 8020b16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8020b1a:	d029      	beq.n	8020b70 <_dtoa_r+0xa58>
 8020b1c:	9b08      	ldr	r3, [sp, #32]
 8020b1e:	2b00      	cmp	r3, #0
 8020b20:	dd02      	ble.n	8020b28 <_dtoa_r+0xa10>
 8020b22:	9b02      	ldr	r3, [sp, #8]
 8020b24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8020b28:	9b00      	ldr	r3, [sp, #0]
 8020b2a:	f883 8000 	strb.w	r8, [r3]
 8020b2e:	e63f      	b.n	80207b0 <_dtoa_r+0x698>
 8020b30:	4628      	mov	r0, r5
 8020b32:	e7bb      	b.n	8020aac <_dtoa_r+0x994>
 8020b34:	2201      	movs	r2, #1
 8020b36:	e7e1      	b.n	8020afc <_dtoa_r+0x9e4>
 8020b38:	9b08      	ldr	r3, [sp, #32]
 8020b3a:	2b00      	cmp	r3, #0
 8020b3c:	db04      	blt.n	8020b48 <_dtoa_r+0xa30>
 8020b3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020b40:	430b      	orrs	r3, r1
 8020b42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020b44:	430b      	orrs	r3, r1
 8020b46:	d120      	bne.n	8020b8a <_dtoa_r+0xa72>
 8020b48:	2a00      	cmp	r2, #0
 8020b4a:	dded      	ble.n	8020b28 <_dtoa_r+0xa10>
 8020b4c:	4649      	mov	r1, r9
 8020b4e:	2201      	movs	r2, #1
 8020b50:	4658      	mov	r0, fp
 8020b52:	f000 fafd 	bl	8021150 <__lshift>
 8020b56:	4621      	mov	r1, r4
 8020b58:	4681      	mov	r9, r0
 8020b5a:	f000 fb65 	bl	8021228 <__mcmp>
 8020b5e:	2800      	cmp	r0, #0
 8020b60:	dc03      	bgt.n	8020b6a <_dtoa_r+0xa52>
 8020b62:	d1e1      	bne.n	8020b28 <_dtoa_r+0xa10>
 8020b64:	f018 0f01 	tst.w	r8, #1
 8020b68:	d0de      	beq.n	8020b28 <_dtoa_r+0xa10>
 8020b6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8020b6e:	d1d8      	bne.n	8020b22 <_dtoa_r+0xa0a>
 8020b70:	9a00      	ldr	r2, [sp, #0]
 8020b72:	2339      	movs	r3, #57	@ 0x39
 8020b74:	7013      	strb	r3, [r2, #0]
 8020b76:	4633      	mov	r3, r6
 8020b78:	461e      	mov	r6, r3
 8020b7a:	3b01      	subs	r3, #1
 8020b7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8020b80:	2a39      	cmp	r2, #57	@ 0x39
 8020b82:	d052      	beq.n	8020c2a <_dtoa_r+0xb12>
 8020b84:	3201      	adds	r2, #1
 8020b86:	701a      	strb	r2, [r3, #0]
 8020b88:	e612      	b.n	80207b0 <_dtoa_r+0x698>
 8020b8a:	2a00      	cmp	r2, #0
 8020b8c:	dd07      	ble.n	8020b9e <_dtoa_r+0xa86>
 8020b8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8020b92:	d0ed      	beq.n	8020b70 <_dtoa_r+0xa58>
 8020b94:	9a00      	ldr	r2, [sp, #0]
 8020b96:	f108 0301 	add.w	r3, r8, #1
 8020b9a:	7013      	strb	r3, [r2, #0]
 8020b9c:	e608      	b.n	80207b0 <_dtoa_r+0x698>
 8020b9e:	9b07      	ldr	r3, [sp, #28]
 8020ba0:	9a07      	ldr	r2, [sp, #28]
 8020ba2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8020ba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020ba8:	4293      	cmp	r3, r2
 8020baa:	d028      	beq.n	8020bfe <_dtoa_r+0xae6>
 8020bac:	4649      	mov	r1, r9
 8020bae:	2300      	movs	r3, #0
 8020bb0:	220a      	movs	r2, #10
 8020bb2:	4658      	mov	r0, fp
 8020bb4:	f000 f920 	bl	8020df8 <__multadd>
 8020bb8:	42af      	cmp	r7, r5
 8020bba:	4681      	mov	r9, r0
 8020bbc:	f04f 0300 	mov.w	r3, #0
 8020bc0:	f04f 020a 	mov.w	r2, #10
 8020bc4:	4639      	mov	r1, r7
 8020bc6:	4658      	mov	r0, fp
 8020bc8:	d107      	bne.n	8020bda <_dtoa_r+0xac2>
 8020bca:	f000 f915 	bl	8020df8 <__multadd>
 8020bce:	4607      	mov	r7, r0
 8020bd0:	4605      	mov	r5, r0
 8020bd2:	9b07      	ldr	r3, [sp, #28]
 8020bd4:	3301      	adds	r3, #1
 8020bd6:	9307      	str	r3, [sp, #28]
 8020bd8:	e774      	b.n	8020ac4 <_dtoa_r+0x9ac>
 8020bda:	f000 f90d 	bl	8020df8 <__multadd>
 8020bde:	4629      	mov	r1, r5
 8020be0:	4607      	mov	r7, r0
 8020be2:	2300      	movs	r3, #0
 8020be4:	220a      	movs	r2, #10
 8020be6:	4658      	mov	r0, fp
 8020be8:	f000 f906 	bl	8020df8 <__multadd>
 8020bec:	4605      	mov	r5, r0
 8020bee:	e7f0      	b.n	8020bd2 <_dtoa_r+0xaba>
 8020bf0:	9b00      	ldr	r3, [sp, #0]
 8020bf2:	2b00      	cmp	r3, #0
 8020bf4:	bfcc      	ite	gt
 8020bf6:	461e      	movgt	r6, r3
 8020bf8:	2601      	movle	r6, #1
 8020bfa:	4456      	add	r6, sl
 8020bfc:	2700      	movs	r7, #0
 8020bfe:	4649      	mov	r1, r9
 8020c00:	2201      	movs	r2, #1
 8020c02:	4658      	mov	r0, fp
 8020c04:	f000 faa4 	bl	8021150 <__lshift>
 8020c08:	4621      	mov	r1, r4
 8020c0a:	4681      	mov	r9, r0
 8020c0c:	f000 fb0c 	bl	8021228 <__mcmp>
 8020c10:	2800      	cmp	r0, #0
 8020c12:	dcb0      	bgt.n	8020b76 <_dtoa_r+0xa5e>
 8020c14:	d102      	bne.n	8020c1c <_dtoa_r+0xb04>
 8020c16:	f018 0f01 	tst.w	r8, #1
 8020c1a:	d1ac      	bne.n	8020b76 <_dtoa_r+0xa5e>
 8020c1c:	4633      	mov	r3, r6
 8020c1e:	461e      	mov	r6, r3
 8020c20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020c24:	2a30      	cmp	r2, #48	@ 0x30
 8020c26:	d0fa      	beq.n	8020c1e <_dtoa_r+0xb06>
 8020c28:	e5c2      	b.n	80207b0 <_dtoa_r+0x698>
 8020c2a:	459a      	cmp	sl, r3
 8020c2c:	d1a4      	bne.n	8020b78 <_dtoa_r+0xa60>
 8020c2e:	9b04      	ldr	r3, [sp, #16]
 8020c30:	3301      	adds	r3, #1
 8020c32:	9304      	str	r3, [sp, #16]
 8020c34:	2331      	movs	r3, #49	@ 0x31
 8020c36:	f88a 3000 	strb.w	r3, [sl]
 8020c3a:	e5b9      	b.n	80207b0 <_dtoa_r+0x698>
 8020c3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020c3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8020c9c <_dtoa_r+0xb84>
 8020c42:	b11b      	cbz	r3, 8020c4c <_dtoa_r+0xb34>
 8020c44:	f10a 0308 	add.w	r3, sl, #8
 8020c48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8020c4a:	6013      	str	r3, [r2, #0]
 8020c4c:	4650      	mov	r0, sl
 8020c4e:	b019      	add	sp, #100	@ 0x64
 8020c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020c56:	2b01      	cmp	r3, #1
 8020c58:	f77f ae37 	ble.w	80208ca <_dtoa_r+0x7b2>
 8020c5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020c5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8020c60:	2001      	movs	r0, #1
 8020c62:	e655      	b.n	8020910 <_dtoa_r+0x7f8>
 8020c64:	9b00      	ldr	r3, [sp, #0]
 8020c66:	2b00      	cmp	r3, #0
 8020c68:	f77f aed6 	ble.w	8020a18 <_dtoa_r+0x900>
 8020c6c:	4656      	mov	r6, sl
 8020c6e:	4621      	mov	r1, r4
 8020c70:	4648      	mov	r0, r9
 8020c72:	f7ff f9c8 	bl	8020006 <quorem>
 8020c76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8020c7a:	f806 8b01 	strb.w	r8, [r6], #1
 8020c7e:	9b00      	ldr	r3, [sp, #0]
 8020c80:	eba6 020a 	sub.w	r2, r6, sl
 8020c84:	4293      	cmp	r3, r2
 8020c86:	ddb3      	ble.n	8020bf0 <_dtoa_r+0xad8>
 8020c88:	4649      	mov	r1, r9
 8020c8a:	2300      	movs	r3, #0
 8020c8c:	220a      	movs	r2, #10
 8020c8e:	4658      	mov	r0, fp
 8020c90:	f000 f8b2 	bl	8020df8 <__multadd>
 8020c94:	4681      	mov	r9, r0
 8020c96:	e7ea      	b.n	8020c6e <_dtoa_r+0xb56>
 8020c98:	08022d38 	.word	0x08022d38
 8020c9c:	08022cbc 	.word	0x08022cbc

08020ca0 <_free_r>:
 8020ca0:	b538      	push	{r3, r4, r5, lr}
 8020ca2:	4605      	mov	r5, r0
 8020ca4:	2900      	cmp	r1, #0
 8020ca6:	d041      	beq.n	8020d2c <_free_r+0x8c>
 8020ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020cac:	1f0c      	subs	r4, r1, #4
 8020cae:	2b00      	cmp	r3, #0
 8020cb0:	bfb8      	it	lt
 8020cb2:	18e4      	addlt	r4, r4, r3
 8020cb4:	f7fe fad2 	bl	801f25c <__malloc_lock>
 8020cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8020d30 <_free_r+0x90>)
 8020cba:	6813      	ldr	r3, [r2, #0]
 8020cbc:	b933      	cbnz	r3, 8020ccc <_free_r+0x2c>
 8020cbe:	6063      	str	r3, [r4, #4]
 8020cc0:	6014      	str	r4, [r2, #0]
 8020cc2:	4628      	mov	r0, r5
 8020cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020cc8:	f7fe bace 	b.w	801f268 <__malloc_unlock>
 8020ccc:	42a3      	cmp	r3, r4
 8020cce:	d908      	bls.n	8020ce2 <_free_r+0x42>
 8020cd0:	6820      	ldr	r0, [r4, #0]
 8020cd2:	1821      	adds	r1, r4, r0
 8020cd4:	428b      	cmp	r3, r1
 8020cd6:	bf01      	itttt	eq
 8020cd8:	6819      	ldreq	r1, [r3, #0]
 8020cda:	685b      	ldreq	r3, [r3, #4]
 8020cdc:	1809      	addeq	r1, r1, r0
 8020cde:	6021      	streq	r1, [r4, #0]
 8020ce0:	e7ed      	b.n	8020cbe <_free_r+0x1e>
 8020ce2:	461a      	mov	r2, r3
 8020ce4:	685b      	ldr	r3, [r3, #4]
 8020ce6:	b10b      	cbz	r3, 8020cec <_free_r+0x4c>
 8020ce8:	42a3      	cmp	r3, r4
 8020cea:	d9fa      	bls.n	8020ce2 <_free_r+0x42>
 8020cec:	6811      	ldr	r1, [r2, #0]
 8020cee:	1850      	adds	r0, r2, r1
 8020cf0:	42a0      	cmp	r0, r4
 8020cf2:	d10b      	bne.n	8020d0c <_free_r+0x6c>
 8020cf4:	6820      	ldr	r0, [r4, #0]
 8020cf6:	4401      	add	r1, r0
 8020cf8:	1850      	adds	r0, r2, r1
 8020cfa:	4283      	cmp	r3, r0
 8020cfc:	6011      	str	r1, [r2, #0]
 8020cfe:	d1e0      	bne.n	8020cc2 <_free_r+0x22>
 8020d00:	6818      	ldr	r0, [r3, #0]
 8020d02:	685b      	ldr	r3, [r3, #4]
 8020d04:	6053      	str	r3, [r2, #4]
 8020d06:	4408      	add	r0, r1
 8020d08:	6010      	str	r0, [r2, #0]
 8020d0a:	e7da      	b.n	8020cc2 <_free_r+0x22>
 8020d0c:	d902      	bls.n	8020d14 <_free_r+0x74>
 8020d0e:	230c      	movs	r3, #12
 8020d10:	602b      	str	r3, [r5, #0]
 8020d12:	e7d6      	b.n	8020cc2 <_free_r+0x22>
 8020d14:	6820      	ldr	r0, [r4, #0]
 8020d16:	1821      	adds	r1, r4, r0
 8020d18:	428b      	cmp	r3, r1
 8020d1a:	bf04      	itt	eq
 8020d1c:	6819      	ldreq	r1, [r3, #0]
 8020d1e:	685b      	ldreq	r3, [r3, #4]
 8020d20:	6063      	str	r3, [r4, #4]
 8020d22:	bf04      	itt	eq
 8020d24:	1809      	addeq	r1, r1, r0
 8020d26:	6021      	streq	r1, [r4, #0]
 8020d28:	6054      	str	r4, [r2, #4]
 8020d2a:	e7ca      	b.n	8020cc2 <_free_r+0x22>
 8020d2c:	bd38      	pop	{r3, r4, r5, pc}
 8020d2e:	bf00      	nop
 8020d30:	20018738 	.word	0x20018738

08020d34 <_Balloc>:
 8020d34:	b570      	push	{r4, r5, r6, lr}
 8020d36:	69c6      	ldr	r6, [r0, #28]
 8020d38:	4604      	mov	r4, r0
 8020d3a:	460d      	mov	r5, r1
 8020d3c:	b976      	cbnz	r6, 8020d5c <_Balloc+0x28>
 8020d3e:	2010      	movs	r0, #16
 8020d40:	f7fe f9da 	bl	801f0f8 <malloc>
 8020d44:	4602      	mov	r2, r0
 8020d46:	61e0      	str	r0, [r4, #28]
 8020d48:	b920      	cbnz	r0, 8020d54 <_Balloc+0x20>
 8020d4a:	4b18      	ldr	r3, [pc, #96]	@ (8020dac <_Balloc+0x78>)
 8020d4c:	4818      	ldr	r0, [pc, #96]	@ (8020db0 <_Balloc+0x7c>)
 8020d4e:	216b      	movs	r1, #107	@ 0x6b
 8020d50:	f000 fd90 	bl	8021874 <__assert_func>
 8020d54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020d58:	6006      	str	r6, [r0, #0]
 8020d5a:	60c6      	str	r6, [r0, #12]
 8020d5c:	69e6      	ldr	r6, [r4, #28]
 8020d5e:	68f3      	ldr	r3, [r6, #12]
 8020d60:	b183      	cbz	r3, 8020d84 <_Balloc+0x50>
 8020d62:	69e3      	ldr	r3, [r4, #28]
 8020d64:	68db      	ldr	r3, [r3, #12]
 8020d66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020d6a:	b9b8      	cbnz	r0, 8020d9c <_Balloc+0x68>
 8020d6c:	2101      	movs	r1, #1
 8020d6e:	fa01 f605 	lsl.w	r6, r1, r5
 8020d72:	1d72      	adds	r2, r6, #5
 8020d74:	0092      	lsls	r2, r2, #2
 8020d76:	4620      	mov	r0, r4
 8020d78:	f000 fd9a 	bl	80218b0 <_calloc_r>
 8020d7c:	b160      	cbz	r0, 8020d98 <_Balloc+0x64>
 8020d7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020d82:	e00e      	b.n	8020da2 <_Balloc+0x6e>
 8020d84:	2221      	movs	r2, #33	@ 0x21
 8020d86:	2104      	movs	r1, #4
 8020d88:	4620      	mov	r0, r4
 8020d8a:	f000 fd91 	bl	80218b0 <_calloc_r>
 8020d8e:	69e3      	ldr	r3, [r4, #28]
 8020d90:	60f0      	str	r0, [r6, #12]
 8020d92:	68db      	ldr	r3, [r3, #12]
 8020d94:	2b00      	cmp	r3, #0
 8020d96:	d1e4      	bne.n	8020d62 <_Balloc+0x2e>
 8020d98:	2000      	movs	r0, #0
 8020d9a:	bd70      	pop	{r4, r5, r6, pc}
 8020d9c:	6802      	ldr	r2, [r0, #0]
 8020d9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020da2:	2300      	movs	r3, #0
 8020da4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020da8:	e7f7      	b.n	8020d9a <_Balloc+0x66>
 8020daa:	bf00      	nop
 8020dac:	08022cc9 	.word	0x08022cc9
 8020db0:	08022d49 	.word	0x08022d49

08020db4 <_Bfree>:
 8020db4:	b570      	push	{r4, r5, r6, lr}
 8020db6:	69c6      	ldr	r6, [r0, #28]
 8020db8:	4605      	mov	r5, r0
 8020dba:	460c      	mov	r4, r1
 8020dbc:	b976      	cbnz	r6, 8020ddc <_Bfree+0x28>
 8020dbe:	2010      	movs	r0, #16
 8020dc0:	f7fe f99a 	bl	801f0f8 <malloc>
 8020dc4:	4602      	mov	r2, r0
 8020dc6:	61e8      	str	r0, [r5, #28]
 8020dc8:	b920      	cbnz	r0, 8020dd4 <_Bfree+0x20>
 8020dca:	4b09      	ldr	r3, [pc, #36]	@ (8020df0 <_Bfree+0x3c>)
 8020dcc:	4809      	ldr	r0, [pc, #36]	@ (8020df4 <_Bfree+0x40>)
 8020dce:	218f      	movs	r1, #143	@ 0x8f
 8020dd0:	f000 fd50 	bl	8021874 <__assert_func>
 8020dd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020dd8:	6006      	str	r6, [r0, #0]
 8020dda:	60c6      	str	r6, [r0, #12]
 8020ddc:	b13c      	cbz	r4, 8020dee <_Bfree+0x3a>
 8020dde:	69eb      	ldr	r3, [r5, #28]
 8020de0:	6862      	ldr	r2, [r4, #4]
 8020de2:	68db      	ldr	r3, [r3, #12]
 8020de4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020de8:	6021      	str	r1, [r4, #0]
 8020dea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020dee:	bd70      	pop	{r4, r5, r6, pc}
 8020df0:	08022cc9 	.word	0x08022cc9
 8020df4:	08022d49 	.word	0x08022d49

08020df8 <__multadd>:
 8020df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020dfc:	690d      	ldr	r5, [r1, #16]
 8020dfe:	4607      	mov	r7, r0
 8020e00:	460c      	mov	r4, r1
 8020e02:	461e      	mov	r6, r3
 8020e04:	f101 0c14 	add.w	ip, r1, #20
 8020e08:	2000      	movs	r0, #0
 8020e0a:	f8dc 3000 	ldr.w	r3, [ip]
 8020e0e:	b299      	uxth	r1, r3
 8020e10:	fb02 6101 	mla	r1, r2, r1, r6
 8020e14:	0c1e      	lsrs	r6, r3, #16
 8020e16:	0c0b      	lsrs	r3, r1, #16
 8020e18:	fb02 3306 	mla	r3, r2, r6, r3
 8020e1c:	b289      	uxth	r1, r1
 8020e1e:	3001      	adds	r0, #1
 8020e20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8020e24:	4285      	cmp	r5, r0
 8020e26:	f84c 1b04 	str.w	r1, [ip], #4
 8020e2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8020e2e:	dcec      	bgt.n	8020e0a <__multadd+0x12>
 8020e30:	b30e      	cbz	r6, 8020e76 <__multadd+0x7e>
 8020e32:	68a3      	ldr	r3, [r4, #8]
 8020e34:	42ab      	cmp	r3, r5
 8020e36:	dc19      	bgt.n	8020e6c <__multadd+0x74>
 8020e38:	6861      	ldr	r1, [r4, #4]
 8020e3a:	4638      	mov	r0, r7
 8020e3c:	3101      	adds	r1, #1
 8020e3e:	f7ff ff79 	bl	8020d34 <_Balloc>
 8020e42:	4680      	mov	r8, r0
 8020e44:	b928      	cbnz	r0, 8020e52 <__multadd+0x5a>
 8020e46:	4602      	mov	r2, r0
 8020e48:	4b0c      	ldr	r3, [pc, #48]	@ (8020e7c <__multadd+0x84>)
 8020e4a:	480d      	ldr	r0, [pc, #52]	@ (8020e80 <__multadd+0x88>)
 8020e4c:	21ba      	movs	r1, #186	@ 0xba
 8020e4e:	f000 fd11 	bl	8021874 <__assert_func>
 8020e52:	6922      	ldr	r2, [r4, #16]
 8020e54:	3202      	adds	r2, #2
 8020e56:	f104 010c 	add.w	r1, r4, #12
 8020e5a:	0092      	lsls	r2, r2, #2
 8020e5c:	300c      	adds	r0, #12
 8020e5e:	f7ff f8c4 	bl	801ffea <memcpy>
 8020e62:	4621      	mov	r1, r4
 8020e64:	4638      	mov	r0, r7
 8020e66:	f7ff ffa5 	bl	8020db4 <_Bfree>
 8020e6a:	4644      	mov	r4, r8
 8020e6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8020e70:	3501      	adds	r5, #1
 8020e72:	615e      	str	r6, [r3, #20]
 8020e74:	6125      	str	r5, [r4, #16]
 8020e76:	4620      	mov	r0, r4
 8020e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020e7c:	08022d38 	.word	0x08022d38
 8020e80:	08022d49 	.word	0x08022d49

08020e84 <__hi0bits>:
 8020e84:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8020e88:	4603      	mov	r3, r0
 8020e8a:	bf36      	itet	cc
 8020e8c:	0403      	lslcc	r3, r0, #16
 8020e8e:	2000      	movcs	r0, #0
 8020e90:	2010      	movcc	r0, #16
 8020e92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8020e96:	bf3c      	itt	cc
 8020e98:	021b      	lslcc	r3, r3, #8
 8020e9a:	3008      	addcc	r0, #8
 8020e9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8020ea0:	bf3c      	itt	cc
 8020ea2:	011b      	lslcc	r3, r3, #4
 8020ea4:	3004      	addcc	r0, #4
 8020ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020eaa:	bf3c      	itt	cc
 8020eac:	009b      	lslcc	r3, r3, #2
 8020eae:	3002      	addcc	r0, #2
 8020eb0:	2b00      	cmp	r3, #0
 8020eb2:	db05      	blt.n	8020ec0 <__hi0bits+0x3c>
 8020eb4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8020eb8:	f100 0001 	add.w	r0, r0, #1
 8020ebc:	bf08      	it	eq
 8020ebe:	2020      	moveq	r0, #32
 8020ec0:	4770      	bx	lr

08020ec2 <__lo0bits>:
 8020ec2:	6803      	ldr	r3, [r0, #0]
 8020ec4:	4602      	mov	r2, r0
 8020ec6:	f013 0007 	ands.w	r0, r3, #7
 8020eca:	d00b      	beq.n	8020ee4 <__lo0bits+0x22>
 8020ecc:	07d9      	lsls	r1, r3, #31
 8020ece:	d421      	bmi.n	8020f14 <__lo0bits+0x52>
 8020ed0:	0798      	lsls	r0, r3, #30
 8020ed2:	bf49      	itett	mi
 8020ed4:	085b      	lsrmi	r3, r3, #1
 8020ed6:	089b      	lsrpl	r3, r3, #2
 8020ed8:	2001      	movmi	r0, #1
 8020eda:	6013      	strmi	r3, [r2, #0]
 8020edc:	bf5c      	itt	pl
 8020ede:	6013      	strpl	r3, [r2, #0]
 8020ee0:	2002      	movpl	r0, #2
 8020ee2:	4770      	bx	lr
 8020ee4:	b299      	uxth	r1, r3
 8020ee6:	b909      	cbnz	r1, 8020eec <__lo0bits+0x2a>
 8020ee8:	0c1b      	lsrs	r3, r3, #16
 8020eea:	2010      	movs	r0, #16
 8020eec:	b2d9      	uxtb	r1, r3
 8020eee:	b909      	cbnz	r1, 8020ef4 <__lo0bits+0x32>
 8020ef0:	3008      	adds	r0, #8
 8020ef2:	0a1b      	lsrs	r3, r3, #8
 8020ef4:	0719      	lsls	r1, r3, #28
 8020ef6:	bf04      	itt	eq
 8020ef8:	091b      	lsreq	r3, r3, #4
 8020efa:	3004      	addeq	r0, #4
 8020efc:	0799      	lsls	r1, r3, #30
 8020efe:	bf04      	itt	eq
 8020f00:	089b      	lsreq	r3, r3, #2
 8020f02:	3002      	addeq	r0, #2
 8020f04:	07d9      	lsls	r1, r3, #31
 8020f06:	d403      	bmi.n	8020f10 <__lo0bits+0x4e>
 8020f08:	085b      	lsrs	r3, r3, #1
 8020f0a:	f100 0001 	add.w	r0, r0, #1
 8020f0e:	d003      	beq.n	8020f18 <__lo0bits+0x56>
 8020f10:	6013      	str	r3, [r2, #0]
 8020f12:	4770      	bx	lr
 8020f14:	2000      	movs	r0, #0
 8020f16:	4770      	bx	lr
 8020f18:	2020      	movs	r0, #32
 8020f1a:	4770      	bx	lr

08020f1c <__i2b>:
 8020f1c:	b510      	push	{r4, lr}
 8020f1e:	460c      	mov	r4, r1
 8020f20:	2101      	movs	r1, #1
 8020f22:	f7ff ff07 	bl	8020d34 <_Balloc>
 8020f26:	4602      	mov	r2, r0
 8020f28:	b928      	cbnz	r0, 8020f36 <__i2b+0x1a>
 8020f2a:	4b05      	ldr	r3, [pc, #20]	@ (8020f40 <__i2b+0x24>)
 8020f2c:	4805      	ldr	r0, [pc, #20]	@ (8020f44 <__i2b+0x28>)
 8020f2e:	f240 1145 	movw	r1, #325	@ 0x145
 8020f32:	f000 fc9f 	bl	8021874 <__assert_func>
 8020f36:	2301      	movs	r3, #1
 8020f38:	6144      	str	r4, [r0, #20]
 8020f3a:	6103      	str	r3, [r0, #16]
 8020f3c:	bd10      	pop	{r4, pc}
 8020f3e:	bf00      	nop
 8020f40:	08022d38 	.word	0x08022d38
 8020f44:	08022d49 	.word	0x08022d49

08020f48 <__multiply>:
 8020f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f4c:	4614      	mov	r4, r2
 8020f4e:	690a      	ldr	r2, [r1, #16]
 8020f50:	6923      	ldr	r3, [r4, #16]
 8020f52:	429a      	cmp	r2, r3
 8020f54:	bfa8      	it	ge
 8020f56:	4623      	movge	r3, r4
 8020f58:	460f      	mov	r7, r1
 8020f5a:	bfa4      	itt	ge
 8020f5c:	460c      	movge	r4, r1
 8020f5e:	461f      	movge	r7, r3
 8020f60:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8020f64:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8020f68:	68a3      	ldr	r3, [r4, #8]
 8020f6a:	6861      	ldr	r1, [r4, #4]
 8020f6c:	eb0a 0609 	add.w	r6, sl, r9
 8020f70:	42b3      	cmp	r3, r6
 8020f72:	b085      	sub	sp, #20
 8020f74:	bfb8      	it	lt
 8020f76:	3101      	addlt	r1, #1
 8020f78:	f7ff fedc 	bl	8020d34 <_Balloc>
 8020f7c:	b930      	cbnz	r0, 8020f8c <__multiply+0x44>
 8020f7e:	4602      	mov	r2, r0
 8020f80:	4b44      	ldr	r3, [pc, #272]	@ (8021094 <__multiply+0x14c>)
 8020f82:	4845      	ldr	r0, [pc, #276]	@ (8021098 <__multiply+0x150>)
 8020f84:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8020f88:	f000 fc74 	bl	8021874 <__assert_func>
 8020f8c:	f100 0514 	add.w	r5, r0, #20
 8020f90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8020f94:	462b      	mov	r3, r5
 8020f96:	2200      	movs	r2, #0
 8020f98:	4543      	cmp	r3, r8
 8020f9a:	d321      	bcc.n	8020fe0 <__multiply+0x98>
 8020f9c:	f107 0114 	add.w	r1, r7, #20
 8020fa0:	f104 0214 	add.w	r2, r4, #20
 8020fa4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8020fa8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8020fac:	9302      	str	r3, [sp, #8]
 8020fae:	1b13      	subs	r3, r2, r4
 8020fb0:	3b15      	subs	r3, #21
 8020fb2:	f023 0303 	bic.w	r3, r3, #3
 8020fb6:	3304      	adds	r3, #4
 8020fb8:	f104 0715 	add.w	r7, r4, #21
 8020fbc:	42ba      	cmp	r2, r7
 8020fbe:	bf38      	it	cc
 8020fc0:	2304      	movcc	r3, #4
 8020fc2:	9301      	str	r3, [sp, #4]
 8020fc4:	9b02      	ldr	r3, [sp, #8]
 8020fc6:	9103      	str	r1, [sp, #12]
 8020fc8:	428b      	cmp	r3, r1
 8020fca:	d80c      	bhi.n	8020fe6 <__multiply+0x9e>
 8020fcc:	2e00      	cmp	r6, #0
 8020fce:	dd03      	ble.n	8020fd8 <__multiply+0x90>
 8020fd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8020fd4:	2b00      	cmp	r3, #0
 8020fd6:	d05b      	beq.n	8021090 <__multiply+0x148>
 8020fd8:	6106      	str	r6, [r0, #16]
 8020fda:	b005      	add	sp, #20
 8020fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fe0:	f843 2b04 	str.w	r2, [r3], #4
 8020fe4:	e7d8      	b.n	8020f98 <__multiply+0x50>
 8020fe6:	f8b1 a000 	ldrh.w	sl, [r1]
 8020fea:	f1ba 0f00 	cmp.w	sl, #0
 8020fee:	d024      	beq.n	802103a <__multiply+0xf2>
 8020ff0:	f104 0e14 	add.w	lr, r4, #20
 8020ff4:	46a9      	mov	r9, r5
 8020ff6:	f04f 0c00 	mov.w	ip, #0
 8020ffa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8020ffe:	f8d9 3000 	ldr.w	r3, [r9]
 8021002:	fa1f fb87 	uxth.w	fp, r7
 8021006:	b29b      	uxth	r3, r3
 8021008:	fb0a 330b 	mla	r3, sl, fp, r3
 802100c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8021010:	f8d9 7000 	ldr.w	r7, [r9]
 8021014:	4463      	add	r3, ip
 8021016:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802101a:	fb0a c70b 	mla	r7, sl, fp, ip
 802101e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8021022:	b29b      	uxth	r3, r3
 8021024:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8021028:	4572      	cmp	r2, lr
 802102a:	f849 3b04 	str.w	r3, [r9], #4
 802102e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8021032:	d8e2      	bhi.n	8020ffa <__multiply+0xb2>
 8021034:	9b01      	ldr	r3, [sp, #4]
 8021036:	f845 c003 	str.w	ip, [r5, r3]
 802103a:	9b03      	ldr	r3, [sp, #12]
 802103c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8021040:	3104      	adds	r1, #4
 8021042:	f1b9 0f00 	cmp.w	r9, #0
 8021046:	d021      	beq.n	802108c <__multiply+0x144>
 8021048:	682b      	ldr	r3, [r5, #0]
 802104a:	f104 0c14 	add.w	ip, r4, #20
 802104e:	46ae      	mov	lr, r5
 8021050:	f04f 0a00 	mov.w	sl, #0
 8021054:	f8bc b000 	ldrh.w	fp, [ip]
 8021058:	f8be 7002 	ldrh.w	r7, [lr, #2]
 802105c:	fb09 770b 	mla	r7, r9, fp, r7
 8021060:	4457      	add	r7, sl
 8021062:	b29b      	uxth	r3, r3
 8021064:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8021068:	f84e 3b04 	str.w	r3, [lr], #4
 802106c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8021070:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8021074:	f8be 3000 	ldrh.w	r3, [lr]
 8021078:	fb09 330a 	mla	r3, r9, sl, r3
 802107c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8021080:	4562      	cmp	r2, ip
 8021082:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8021086:	d8e5      	bhi.n	8021054 <__multiply+0x10c>
 8021088:	9f01      	ldr	r7, [sp, #4]
 802108a:	51eb      	str	r3, [r5, r7]
 802108c:	3504      	adds	r5, #4
 802108e:	e799      	b.n	8020fc4 <__multiply+0x7c>
 8021090:	3e01      	subs	r6, #1
 8021092:	e79b      	b.n	8020fcc <__multiply+0x84>
 8021094:	08022d38 	.word	0x08022d38
 8021098:	08022d49 	.word	0x08022d49

0802109c <__pow5mult>:
 802109c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80210a0:	4615      	mov	r5, r2
 80210a2:	f012 0203 	ands.w	r2, r2, #3
 80210a6:	4607      	mov	r7, r0
 80210a8:	460e      	mov	r6, r1
 80210aa:	d007      	beq.n	80210bc <__pow5mult+0x20>
 80210ac:	4c25      	ldr	r4, [pc, #148]	@ (8021144 <__pow5mult+0xa8>)
 80210ae:	3a01      	subs	r2, #1
 80210b0:	2300      	movs	r3, #0
 80210b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80210b6:	f7ff fe9f 	bl	8020df8 <__multadd>
 80210ba:	4606      	mov	r6, r0
 80210bc:	10ad      	asrs	r5, r5, #2
 80210be:	d03d      	beq.n	802113c <__pow5mult+0xa0>
 80210c0:	69fc      	ldr	r4, [r7, #28]
 80210c2:	b97c      	cbnz	r4, 80210e4 <__pow5mult+0x48>
 80210c4:	2010      	movs	r0, #16
 80210c6:	f7fe f817 	bl	801f0f8 <malloc>
 80210ca:	4602      	mov	r2, r0
 80210cc:	61f8      	str	r0, [r7, #28]
 80210ce:	b928      	cbnz	r0, 80210dc <__pow5mult+0x40>
 80210d0:	4b1d      	ldr	r3, [pc, #116]	@ (8021148 <__pow5mult+0xac>)
 80210d2:	481e      	ldr	r0, [pc, #120]	@ (802114c <__pow5mult+0xb0>)
 80210d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80210d8:	f000 fbcc 	bl	8021874 <__assert_func>
 80210dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80210e0:	6004      	str	r4, [r0, #0]
 80210e2:	60c4      	str	r4, [r0, #12]
 80210e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80210e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80210ec:	b94c      	cbnz	r4, 8021102 <__pow5mult+0x66>
 80210ee:	f240 2171 	movw	r1, #625	@ 0x271
 80210f2:	4638      	mov	r0, r7
 80210f4:	f7ff ff12 	bl	8020f1c <__i2b>
 80210f8:	2300      	movs	r3, #0
 80210fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80210fe:	4604      	mov	r4, r0
 8021100:	6003      	str	r3, [r0, #0]
 8021102:	f04f 0900 	mov.w	r9, #0
 8021106:	07eb      	lsls	r3, r5, #31
 8021108:	d50a      	bpl.n	8021120 <__pow5mult+0x84>
 802110a:	4631      	mov	r1, r6
 802110c:	4622      	mov	r2, r4
 802110e:	4638      	mov	r0, r7
 8021110:	f7ff ff1a 	bl	8020f48 <__multiply>
 8021114:	4631      	mov	r1, r6
 8021116:	4680      	mov	r8, r0
 8021118:	4638      	mov	r0, r7
 802111a:	f7ff fe4b 	bl	8020db4 <_Bfree>
 802111e:	4646      	mov	r6, r8
 8021120:	106d      	asrs	r5, r5, #1
 8021122:	d00b      	beq.n	802113c <__pow5mult+0xa0>
 8021124:	6820      	ldr	r0, [r4, #0]
 8021126:	b938      	cbnz	r0, 8021138 <__pow5mult+0x9c>
 8021128:	4622      	mov	r2, r4
 802112a:	4621      	mov	r1, r4
 802112c:	4638      	mov	r0, r7
 802112e:	f7ff ff0b 	bl	8020f48 <__multiply>
 8021132:	6020      	str	r0, [r4, #0]
 8021134:	f8c0 9000 	str.w	r9, [r0]
 8021138:	4604      	mov	r4, r0
 802113a:	e7e4      	b.n	8021106 <__pow5mult+0x6a>
 802113c:	4630      	mov	r0, r6
 802113e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021142:	bf00      	nop
 8021144:	08022da4 	.word	0x08022da4
 8021148:	08022cc9 	.word	0x08022cc9
 802114c:	08022d49 	.word	0x08022d49

08021150 <__lshift>:
 8021150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021154:	460c      	mov	r4, r1
 8021156:	6849      	ldr	r1, [r1, #4]
 8021158:	6923      	ldr	r3, [r4, #16]
 802115a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802115e:	68a3      	ldr	r3, [r4, #8]
 8021160:	4607      	mov	r7, r0
 8021162:	4691      	mov	r9, r2
 8021164:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021168:	f108 0601 	add.w	r6, r8, #1
 802116c:	42b3      	cmp	r3, r6
 802116e:	db0b      	blt.n	8021188 <__lshift+0x38>
 8021170:	4638      	mov	r0, r7
 8021172:	f7ff fddf 	bl	8020d34 <_Balloc>
 8021176:	4605      	mov	r5, r0
 8021178:	b948      	cbnz	r0, 802118e <__lshift+0x3e>
 802117a:	4602      	mov	r2, r0
 802117c:	4b28      	ldr	r3, [pc, #160]	@ (8021220 <__lshift+0xd0>)
 802117e:	4829      	ldr	r0, [pc, #164]	@ (8021224 <__lshift+0xd4>)
 8021180:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8021184:	f000 fb76 	bl	8021874 <__assert_func>
 8021188:	3101      	adds	r1, #1
 802118a:	005b      	lsls	r3, r3, #1
 802118c:	e7ee      	b.n	802116c <__lshift+0x1c>
 802118e:	2300      	movs	r3, #0
 8021190:	f100 0114 	add.w	r1, r0, #20
 8021194:	f100 0210 	add.w	r2, r0, #16
 8021198:	4618      	mov	r0, r3
 802119a:	4553      	cmp	r3, sl
 802119c:	db33      	blt.n	8021206 <__lshift+0xb6>
 802119e:	6920      	ldr	r0, [r4, #16]
 80211a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80211a4:	f104 0314 	add.w	r3, r4, #20
 80211a8:	f019 091f 	ands.w	r9, r9, #31
 80211ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80211b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80211b4:	d02b      	beq.n	802120e <__lshift+0xbe>
 80211b6:	f1c9 0e20 	rsb	lr, r9, #32
 80211ba:	468a      	mov	sl, r1
 80211bc:	2200      	movs	r2, #0
 80211be:	6818      	ldr	r0, [r3, #0]
 80211c0:	fa00 f009 	lsl.w	r0, r0, r9
 80211c4:	4310      	orrs	r0, r2
 80211c6:	f84a 0b04 	str.w	r0, [sl], #4
 80211ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80211ce:	459c      	cmp	ip, r3
 80211d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80211d4:	d8f3      	bhi.n	80211be <__lshift+0x6e>
 80211d6:	ebac 0304 	sub.w	r3, ip, r4
 80211da:	3b15      	subs	r3, #21
 80211dc:	f023 0303 	bic.w	r3, r3, #3
 80211e0:	3304      	adds	r3, #4
 80211e2:	f104 0015 	add.w	r0, r4, #21
 80211e6:	4584      	cmp	ip, r0
 80211e8:	bf38      	it	cc
 80211ea:	2304      	movcc	r3, #4
 80211ec:	50ca      	str	r2, [r1, r3]
 80211ee:	b10a      	cbz	r2, 80211f4 <__lshift+0xa4>
 80211f0:	f108 0602 	add.w	r6, r8, #2
 80211f4:	3e01      	subs	r6, #1
 80211f6:	4638      	mov	r0, r7
 80211f8:	612e      	str	r6, [r5, #16]
 80211fa:	4621      	mov	r1, r4
 80211fc:	f7ff fdda 	bl	8020db4 <_Bfree>
 8021200:	4628      	mov	r0, r5
 8021202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021206:	f842 0f04 	str.w	r0, [r2, #4]!
 802120a:	3301      	adds	r3, #1
 802120c:	e7c5      	b.n	802119a <__lshift+0x4a>
 802120e:	3904      	subs	r1, #4
 8021210:	f853 2b04 	ldr.w	r2, [r3], #4
 8021214:	f841 2f04 	str.w	r2, [r1, #4]!
 8021218:	459c      	cmp	ip, r3
 802121a:	d8f9      	bhi.n	8021210 <__lshift+0xc0>
 802121c:	e7ea      	b.n	80211f4 <__lshift+0xa4>
 802121e:	bf00      	nop
 8021220:	08022d38 	.word	0x08022d38
 8021224:	08022d49 	.word	0x08022d49

08021228 <__mcmp>:
 8021228:	690a      	ldr	r2, [r1, #16]
 802122a:	4603      	mov	r3, r0
 802122c:	6900      	ldr	r0, [r0, #16]
 802122e:	1a80      	subs	r0, r0, r2
 8021230:	b530      	push	{r4, r5, lr}
 8021232:	d10e      	bne.n	8021252 <__mcmp+0x2a>
 8021234:	3314      	adds	r3, #20
 8021236:	3114      	adds	r1, #20
 8021238:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 802123c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8021240:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8021244:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8021248:	4295      	cmp	r5, r2
 802124a:	d003      	beq.n	8021254 <__mcmp+0x2c>
 802124c:	d205      	bcs.n	802125a <__mcmp+0x32>
 802124e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021252:	bd30      	pop	{r4, r5, pc}
 8021254:	42a3      	cmp	r3, r4
 8021256:	d3f3      	bcc.n	8021240 <__mcmp+0x18>
 8021258:	e7fb      	b.n	8021252 <__mcmp+0x2a>
 802125a:	2001      	movs	r0, #1
 802125c:	e7f9      	b.n	8021252 <__mcmp+0x2a>
	...

08021260 <__mdiff>:
 8021260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021264:	4689      	mov	r9, r1
 8021266:	4606      	mov	r6, r0
 8021268:	4611      	mov	r1, r2
 802126a:	4648      	mov	r0, r9
 802126c:	4614      	mov	r4, r2
 802126e:	f7ff ffdb 	bl	8021228 <__mcmp>
 8021272:	1e05      	subs	r5, r0, #0
 8021274:	d112      	bne.n	802129c <__mdiff+0x3c>
 8021276:	4629      	mov	r1, r5
 8021278:	4630      	mov	r0, r6
 802127a:	f7ff fd5b 	bl	8020d34 <_Balloc>
 802127e:	4602      	mov	r2, r0
 8021280:	b928      	cbnz	r0, 802128e <__mdiff+0x2e>
 8021282:	4b3f      	ldr	r3, [pc, #252]	@ (8021380 <__mdiff+0x120>)
 8021284:	f240 2137 	movw	r1, #567	@ 0x237
 8021288:	483e      	ldr	r0, [pc, #248]	@ (8021384 <__mdiff+0x124>)
 802128a:	f000 faf3 	bl	8021874 <__assert_func>
 802128e:	2301      	movs	r3, #1
 8021290:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021294:	4610      	mov	r0, r2
 8021296:	b003      	add	sp, #12
 8021298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802129c:	bfbc      	itt	lt
 802129e:	464b      	movlt	r3, r9
 80212a0:	46a1      	movlt	r9, r4
 80212a2:	4630      	mov	r0, r6
 80212a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80212a8:	bfba      	itte	lt
 80212aa:	461c      	movlt	r4, r3
 80212ac:	2501      	movlt	r5, #1
 80212ae:	2500      	movge	r5, #0
 80212b0:	f7ff fd40 	bl	8020d34 <_Balloc>
 80212b4:	4602      	mov	r2, r0
 80212b6:	b918      	cbnz	r0, 80212c0 <__mdiff+0x60>
 80212b8:	4b31      	ldr	r3, [pc, #196]	@ (8021380 <__mdiff+0x120>)
 80212ba:	f240 2145 	movw	r1, #581	@ 0x245
 80212be:	e7e3      	b.n	8021288 <__mdiff+0x28>
 80212c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80212c4:	6926      	ldr	r6, [r4, #16]
 80212c6:	60c5      	str	r5, [r0, #12]
 80212c8:	f109 0310 	add.w	r3, r9, #16
 80212cc:	f109 0514 	add.w	r5, r9, #20
 80212d0:	f104 0e14 	add.w	lr, r4, #20
 80212d4:	f100 0b14 	add.w	fp, r0, #20
 80212d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80212dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80212e0:	9301      	str	r3, [sp, #4]
 80212e2:	46d9      	mov	r9, fp
 80212e4:	f04f 0c00 	mov.w	ip, #0
 80212e8:	9b01      	ldr	r3, [sp, #4]
 80212ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80212ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 80212f2:	9301      	str	r3, [sp, #4]
 80212f4:	fa1f f38a 	uxth.w	r3, sl
 80212f8:	4619      	mov	r1, r3
 80212fa:	b283      	uxth	r3, r0
 80212fc:	1acb      	subs	r3, r1, r3
 80212fe:	0c00      	lsrs	r0, r0, #16
 8021300:	4463      	add	r3, ip
 8021302:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8021306:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802130a:	b29b      	uxth	r3, r3
 802130c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8021310:	4576      	cmp	r6, lr
 8021312:	f849 3b04 	str.w	r3, [r9], #4
 8021316:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802131a:	d8e5      	bhi.n	80212e8 <__mdiff+0x88>
 802131c:	1b33      	subs	r3, r6, r4
 802131e:	3b15      	subs	r3, #21
 8021320:	f023 0303 	bic.w	r3, r3, #3
 8021324:	3415      	adds	r4, #21
 8021326:	3304      	adds	r3, #4
 8021328:	42a6      	cmp	r6, r4
 802132a:	bf38      	it	cc
 802132c:	2304      	movcc	r3, #4
 802132e:	441d      	add	r5, r3
 8021330:	445b      	add	r3, fp
 8021332:	461e      	mov	r6, r3
 8021334:	462c      	mov	r4, r5
 8021336:	4544      	cmp	r4, r8
 8021338:	d30e      	bcc.n	8021358 <__mdiff+0xf8>
 802133a:	f108 0103 	add.w	r1, r8, #3
 802133e:	1b49      	subs	r1, r1, r5
 8021340:	f021 0103 	bic.w	r1, r1, #3
 8021344:	3d03      	subs	r5, #3
 8021346:	45a8      	cmp	r8, r5
 8021348:	bf38      	it	cc
 802134a:	2100      	movcc	r1, #0
 802134c:	440b      	add	r3, r1
 802134e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8021352:	b191      	cbz	r1, 802137a <__mdiff+0x11a>
 8021354:	6117      	str	r7, [r2, #16]
 8021356:	e79d      	b.n	8021294 <__mdiff+0x34>
 8021358:	f854 1b04 	ldr.w	r1, [r4], #4
 802135c:	46e6      	mov	lr, ip
 802135e:	0c08      	lsrs	r0, r1, #16
 8021360:	fa1c fc81 	uxtah	ip, ip, r1
 8021364:	4471      	add	r1, lr
 8021366:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802136a:	b289      	uxth	r1, r1
 802136c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8021370:	f846 1b04 	str.w	r1, [r6], #4
 8021374:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8021378:	e7dd      	b.n	8021336 <__mdiff+0xd6>
 802137a:	3f01      	subs	r7, #1
 802137c:	e7e7      	b.n	802134e <__mdiff+0xee>
 802137e:	bf00      	nop
 8021380:	08022d38 	.word	0x08022d38
 8021384:	08022d49 	.word	0x08022d49

08021388 <__d2b>:
 8021388:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802138c:	460f      	mov	r7, r1
 802138e:	2101      	movs	r1, #1
 8021390:	ec59 8b10 	vmov	r8, r9, d0
 8021394:	4616      	mov	r6, r2
 8021396:	f7ff fccd 	bl	8020d34 <_Balloc>
 802139a:	4604      	mov	r4, r0
 802139c:	b930      	cbnz	r0, 80213ac <__d2b+0x24>
 802139e:	4602      	mov	r2, r0
 80213a0:	4b23      	ldr	r3, [pc, #140]	@ (8021430 <__d2b+0xa8>)
 80213a2:	4824      	ldr	r0, [pc, #144]	@ (8021434 <__d2b+0xac>)
 80213a4:	f240 310f 	movw	r1, #783	@ 0x30f
 80213a8:	f000 fa64 	bl	8021874 <__assert_func>
 80213ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80213b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80213b4:	b10d      	cbz	r5, 80213ba <__d2b+0x32>
 80213b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80213ba:	9301      	str	r3, [sp, #4]
 80213bc:	f1b8 0300 	subs.w	r3, r8, #0
 80213c0:	d023      	beq.n	802140a <__d2b+0x82>
 80213c2:	4668      	mov	r0, sp
 80213c4:	9300      	str	r3, [sp, #0]
 80213c6:	f7ff fd7c 	bl	8020ec2 <__lo0bits>
 80213ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 80213ce:	b1d0      	cbz	r0, 8021406 <__d2b+0x7e>
 80213d0:	f1c0 0320 	rsb	r3, r0, #32
 80213d4:	fa02 f303 	lsl.w	r3, r2, r3
 80213d8:	430b      	orrs	r3, r1
 80213da:	40c2      	lsrs	r2, r0
 80213dc:	6163      	str	r3, [r4, #20]
 80213de:	9201      	str	r2, [sp, #4]
 80213e0:	9b01      	ldr	r3, [sp, #4]
 80213e2:	61a3      	str	r3, [r4, #24]
 80213e4:	2b00      	cmp	r3, #0
 80213e6:	bf0c      	ite	eq
 80213e8:	2201      	moveq	r2, #1
 80213ea:	2202      	movne	r2, #2
 80213ec:	6122      	str	r2, [r4, #16]
 80213ee:	b1a5      	cbz	r5, 802141a <__d2b+0x92>
 80213f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80213f4:	4405      	add	r5, r0
 80213f6:	603d      	str	r5, [r7, #0]
 80213f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80213fc:	6030      	str	r0, [r6, #0]
 80213fe:	4620      	mov	r0, r4
 8021400:	b003      	add	sp, #12
 8021402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021406:	6161      	str	r1, [r4, #20]
 8021408:	e7ea      	b.n	80213e0 <__d2b+0x58>
 802140a:	a801      	add	r0, sp, #4
 802140c:	f7ff fd59 	bl	8020ec2 <__lo0bits>
 8021410:	9b01      	ldr	r3, [sp, #4]
 8021412:	6163      	str	r3, [r4, #20]
 8021414:	3020      	adds	r0, #32
 8021416:	2201      	movs	r2, #1
 8021418:	e7e8      	b.n	80213ec <__d2b+0x64>
 802141a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802141e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8021422:	6038      	str	r0, [r7, #0]
 8021424:	6918      	ldr	r0, [r3, #16]
 8021426:	f7ff fd2d 	bl	8020e84 <__hi0bits>
 802142a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802142e:	e7e5      	b.n	80213fc <__d2b+0x74>
 8021430:	08022d38 	.word	0x08022d38
 8021434:	08022d49 	.word	0x08022d49

08021438 <__ssputs_r>:
 8021438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802143c:	688e      	ldr	r6, [r1, #8]
 802143e:	461f      	mov	r7, r3
 8021440:	42be      	cmp	r6, r7
 8021442:	680b      	ldr	r3, [r1, #0]
 8021444:	4682      	mov	sl, r0
 8021446:	460c      	mov	r4, r1
 8021448:	4690      	mov	r8, r2
 802144a:	d82d      	bhi.n	80214a8 <__ssputs_r+0x70>
 802144c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021450:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8021454:	d026      	beq.n	80214a4 <__ssputs_r+0x6c>
 8021456:	6965      	ldr	r5, [r4, #20]
 8021458:	6909      	ldr	r1, [r1, #16]
 802145a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802145e:	eba3 0901 	sub.w	r9, r3, r1
 8021462:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021466:	1c7b      	adds	r3, r7, #1
 8021468:	444b      	add	r3, r9
 802146a:	106d      	asrs	r5, r5, #1
 802146c:	429d      	cmp	r5, r3
 802146e:	bf38      	it	cc
 8021470:	461d      	movcc	r5, r3
 8021472:	0553      	lsls	r3, r2, #21
 8021474:	d527      	bpl.n	80214c6 <__ssputs_r+0x8e>
 8021476:	4629      	mov	r1, r5
 8021478:	f7fd fe70 	bl	801f15c <_malloc_r>
 802147c:	4606      	mov	r6, r0
 802147e:	b360      	cbz	r0, 80214da <__ssputs_r+0xa2>
 8021480:	6921      	ldr	r1, [r4, #16]
 8021482:	464a      	mov	r2, r9
 8021484:	f7fe fdb1 	bl	801ffea <memcpy>
 8021488:	89a3      	ldrh	r3, [r4, #12]
 802148a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802148e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021492:	81a3      	strh	r3, [r4, #12]
 8021494:	6126      	str	r6, [r4, #16]
 8021496:	6165      	str	r5, [r4, #20]
 8021498:	444e      	add	r6, r9
 802149a:	eba5 0509 	sub.w	r5, r5, r9
 802149e:	6026      	str	r6, [r4, #0]
 80214a0:	60a5      	str	r5, [r4, #8]
 80214a2:	463e      	mov	r6, r7
 80214a4:	42be      	cmp	r6, r7
 80214a6:	d900      	bls.n	80214aa <__ssputs_r+0x72>
 80214a8:	463e      	mov	r6, r7
 80214aa:	6820      	ldr	r0, [r4, #0]
 80214ac:	4632      	mov	r2, r6
 80214ae:	4641      	mov	r1, r8
 80214b0:	f000 f9c6 	bl	8021840 <memmove>
 80214b4:	68a3      	ldr	r3, [r4, #8]
 80214b6:	1b9b      	subs	r3, r3, r6
 80214b8:	60a3      	str	r3, [r4, #8]
 80214ba:	6823      	ldr	r3, [r4, #0]
 80214bc:	4433      	add	r3, r6
 80214be:	6023      	str	r3, [r4, #0]
 80214c0:	2000      	movs	r0, #0
 80214c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80214c6:	462a      	mov	r2, r5
 80214c8:	f000 fa18 	bl	80218fc <_realloc_r>
 80214cc:	4606      	mov	r6, r0
 80214ce:	2800      	cmp	r0, #0
 80214d0:	d1e0      	bne.n	8021494 <__ssputs_r+0x5c>
 80214d2:	6921      	ldr	r1, [r4, #16]
 80214d4:	4650      	mov	r0, sl
 80214d6:	f7ff fbe3 	bl	8020ca0 <_free_r>
 80214da:	230c      	movs	r3, #12
 80214dc:	f8ca 3000 	str.w	r3, [sl]
 80214e0:	89a3      	ldrh	r3, [r4, #12]
 80214e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80214e6:	81a3      	strh	r3, [r4, #12]
 80214e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80214ec:	e7e9      	b.n	80214c2 <__ssputs_r+0x8a>
	...

080214f0 <_svfiprintf_r>:
 80214f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214f4:	4698      	mov	r8, r3
 80214f6:	898b      	ldrh	r3, [r1, #12]
 80214f8:	061b      	lsls	r3, r3, #24
 80214fa:	b09d      	sub	sp, #116	@ 0x74
 80214fc:	4607      	mov	r7, r0
 80214fe:	460d      	mov	r5, r1
 8021500:	4614      	mov	r4, r2
 8021502:	d510      	bpl.n	8021526 <_svfiprintf_r+0x36>
 8021504:	690b      	ldr	r3, [r1, #16]
 8021506:	b973      	cbnz	r3, 8021526 <_svfiprintf_r+0x36>
 8021508:	2140      	movs	r1, #64	@ 0x40
 802150a:	f7fd fe27 	bl	801f15c <_malloc_r>
 802150e:	6028      	str	r0, [r5, #0]
 8021510:	6128      	str	r0, [r5, #16]
 8021512:	b930      	cbnz	r0, 8021522 <_svfiprintf_r+0x32>
 8021514:	230c      	movs	r3, #12
 8021516:	603b      	str	r3, [r7, #0]
 8021518:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802151c:	b01d      	add	sp, #116	@ 0x74
 802151e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021522:	2340      	movs	r3, #64	@ 0x40
 8021524:	616b      	str	r3, [r5, #20]
 8021526:	2300      	movs	r3, #0
 8021528:	9309      	str	r3, [sp, #36]	@ 0x24
 802152a:	2320      	movs	r3, #32
 802152c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021530:	f8cd 800c 	str.w	r8, [sp, #12]
 8021534:	2330      	movs	r3, #48	@ 0x30
 8021536:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80216d4 <_svfiprintf_r+0x1e4>
 802153a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802153e:	f04f 0901 	mov.w	r9, #1
 8021542:	4623      	mov	r3, r4
 8021544:	469a      	mov	sl, r3
 8021546:	f813 2b01 	ldrb.w	r2, [r3], #1
 802154a:	b10a      	cbz	r2, 8021550 <_svfiprintf_r+0x60>
 802154c:	2a25      	cmp	r2, #37	@ 0x25
 802154e:	d1f9      	bne.n	8021544 <_svfiprintf_r+0x54>
 8021550:	ebba 0b04 	subs.w	fp, sl, r4
 8021554:	d00b      	beq.n	802156e <_svfiprintf_r+0x7e>
 8021556:	465b      	mov	r3, fp
 8021558:	4622      	mov	r2, r4
 802155a:	4629      	mov	r1, r5
 802155c:	4638      	mov	r0, r7
 802155e:	f7ff ff6b 	bl	8021438 <__ssputs_r>
 8021562:	3001      	adds	r0, #1
 8021564:	f000 80a7 	beq.w	80216b6 <_svfiprintf_r+0x1c6>
 8021568:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802156a:	445a      	add	r2, fp
 802156c:	9209      	str	r2, [sp, #36]	@ 0x24
 802156e:	f89a 3000 	ldrb.w	r3, [sl]
 8021572:	2b00      	cmp	r3, #0
 8021574:	f000 809f 	beq.w	80216b6 <_svfiprintf_r+0x1c6>
 8021578:	2300      	movs	r3, #0
 802157a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802157e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021582:	f10a 0a01 	add.w	sl, sl, #1
 8021586:	9304      	str	r3, [sp, #16]
 8021588:	9307      	str	r3, [sp, #28]
 802158a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802158e:	931a      	str	r3, [sp, #104]	@ 0x68
 8021590:	4654      	mov	r4, sl
 8021592:	2205      	movs	r2, #5
 8021594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021598:	484e      	ldr	r0, [pc, #312]	@ (80216d4 <_svfiprintf_r+0x1e4>)
 802159a:	f7de fe41 	bl	8000220 <memchr>
 802159e:	9a04      	ldr	r2, [sp, #16]
 80215a0:	b9d8      	cbnz	r0, 80215da <_svfiprintf_r+0xea>
 80215a2:	06d0      	lsls	r0, r2, #27
 80215a4:	bf44      	itt	mi
 80215a6:	2320      	movmi	r3, #32
 80215a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80215ac:	0711      	lsls	r1, r2, #28
 80215ae:	bf44      	itt	mi
 80215b0:	232b      	movmi	r3, #43	@ 0x2b
 80215b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80215b6:	f89a 3000 	ldrb.w	r3, [sl]
 80215ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80215bc:	d015      	beq.n	80215ea <_svfiprintf_r+0xfa>
 80215be:	9a07      	ldr	r2, [sp, #28]
 80215c0:	4654      	mov	r4, sl
 80215c2:	2000      	movs	r0, #0
 80215c4:	f04f 0c0a 	mov.w	ip, #10
 80215c8:	4621      	mov	r1, r4
 80215ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80215ce:	3b30      	subs	r3, #48	@ 0x30
 80215d0:	2b09      	cmp	r3, #9
 80215d2:	d94b      	bls.n	802166c <_svfiprintf_r+0x17c>
 80215d4:	b1b0      	cbz	r0, 8021604 <_svfiprintf_r+0x114>
 80215d6:	9207      	str	r2, [sp, #28]
 80215d8:	e014      	b.n	8021604 <_svfiprintf_r+0x114>
 80215da:	eba0 0308 	sub.w	r3, r0, r8
 80215de:	fa09 f303 	lsl.w	r3, r9, r3
 80215e2:	4313      	orrs	r3, r2
 80215e4:	9304      	str	r3, [sp, #16]
 80215e6:	46a2      	mov	sl, r4
 80215e8:	e7d2      	b.n	8021590 <_svfiprintf_r+0xa0>
 80215ea:	9b03      	ldr	r3, [sp, #12]
 80215ec:	1d19      	adds	r1, r3, #4
 80215ee:	681b      	ldr	r3, [r3, #0]
 80215f0:	9103      	str	r1, [sp, #12]
 80215f2:	2b00      	cmp	r3, #0
 80215f4:	bfbb      	ittet	lt
 80215f6:	425b      	neglt	r3, r3
 80215f8:	f042 0202 	orrlt.w	r2, r2, #2
 80215fc:	9307      	strge	r3, [sp, #28]
 80215fe:	9307      	strlt	r3, [sp, #28]
 8021600:	bfb8      	it	lt
 8021602:	9204      	strlt	r2, [sp, #16]
 8021604:	7823      	ldrb	r3, [r4, #0]
 8021606:	2b2e      	cmp	r3, #46	@ 0x2e
 8021608:	d10a      	bne.n	8021620 <_svfiprintf_r+0x130>
 802160a:	7863      	ldrb	r3, [r4, #1]
 802160c:	2b2a      	cmp	r3, #42	@ 0x2a
 802160e:	d132      	bne.n	8021676 <_svfiprintf_r+0x186>
 8021610:	9b03      	ldr	r3, [sp, #12]
 8021612:	1d1a      	adds	r2, r3, #4
 8021614:	681b      	ldr	r3, [r3, #0]
 8021616:	9203      	str	r2, [sp, #12]
 8021618:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802161c:	3402      	adds	r4, #2
 802161e:	9305      	str	r3, [sp, #20]
 8021620:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80216e4 <_svfiprintf_r+0x1f4>
 8021624:	7821      	ldrb	r1, [r4, #0]
 8021626:	2203      	movs	r2, #3
 8021628:	4650      	mov	r0, sl
 802162a:	f7de fdf9 	bl	8000220 <memchr>
 802162e:	b138      	cbz	r0, 8021640 <_svfiprintf_r+0x150>
 8021630:	9b04      	ldr	r3, [sp, #16]
 8021632:	eba0 000a 	sub.w	r0, r0, sl
 8021636:	2240      	movs	r2, #64	@ 0x40
 8021638:	4082      	lsls	r2, r0
 802163a:	4313      	orrs	r3, r2
 802163c:	3401      	adds	r4, #1
 802163e:	9304      	str	r3, [sp, #16]
 8021640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021644:	4824      	ldr	r0, [pc, #144]	@ (80216d8 <_svfiprintf_r+0x1e8>)
 8021646:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802164a:	2206      	movs	r2, #6
 802164c:	f7de fde8 	bl	8000220 <memchr>
 8021650:	2800      	cmp	r0, #0
 8021652:	d036      	beq.n	80216c2 <_svfiprintf_r+0x1d2>
 8021654:	4b21      	ldr	r3, [pc, #132]	@ (80216dc <_svfiprintf_r+0x1ec>)
 8021656:	bb1b      	cbnz	r3, 80216a0 <_svfiprintf_r+0x1b0>
 8021658:	9b03      	ldr	r3, [sp, #12]
 802165a:	3307      	adds	r3, #7
 802165c:	f023 0307 	bic.w	r3, r3, #7
 8021660:	3308      	adds	r3, #8
 8021662:	9303      	str	r3, [sp, #12]
 8021664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021666:	4433      	add	r3, r6
 8021668:	9309      	str	r3, [sp, #36]	@ 0x24
 802166a:	e76a      	b.n	8021542 <_svfiprintf_r+0x52>
 802166c:	fb0c 3202 	mla	r2, ip, r2, r3
 8021670:	460c      	mov	r4, r1
 8021672:	2001      	movs	r0, #1
 8021674:	e7a8      	b.n	80215c8 <_svfiprintf_r+0xd8>
 8021676:	2300      	movs	r3, #0
 8021678:	3401      	adds	r4, #1
 802167a:	9305      	str	r3, [sp, #20]
 802167c:	4619      	mov	r1, r3
 802167e:	f04f 0c0a 	mov.w	ip, #10
 8021682:	4620      	mov	r0, r4
 8021684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021688:	3a30      	subs	r2, #48	@ 0x30
 802168a:	2a09      	cmp	r2, #9
 802168c:	d903      	bls.n	8021696 <_svfiprintf_r+0x1a6>
 802168e:	2b00      	cmp	r3, #0
 8021690:	d0c6      	beq.n	8021620 <_svfiprintf_r+0x130>
 8021692:	9105      	str	r1, [sp, #20]
 8021694:	e7c4      	b.n	8021620 <_svfiprintf_r+0x130>
 8021696:	fb0c 2101 	mla	r1, ip, r1, r2
 802169a:	4604      	mov	r4, r0
 802169c:	2301      	movs	r3, #1
 802169e:	e7f0      	b.n	8021682 <_svfiprintf_r+0x192>
 80216a0:	ab03      	add	r3, sp, #12
 80216a2:	9300      	str	r3, [sp, #0]
 80216a4:	462a      	mov	r2, r5
 80216a6:	4b0e      	ldr	r3, [pc, #56]	@ (80216e0 <_svfiprintf_r+0x1f0>)
 80216a8:	a904      	add	r1, sp, #16
 80216aa:	4638      	mov	r0, r7
 80216ac:	f7fd fe82 	bl	801f3b4 <_printf_float>
 80216b0:	1c42      	adds	r2, r0, #1
 80216b2:	4606      	mov	r6, r0
 80216b4:	d1d6      	bne.n	8021664 <_svfiprintf_r+0x174>
 80216b6:	89ab      	ldrh	r3, [r5, #12]
 80216b8:	065b      	lsls	r3, r3, #25
 80216ba:	f53f af2d 	bmi.w	8021518 <_svfiprintf_r+0x28>
 80216be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80216c0:	e72c      	b.n	802151c <_svfiprintf_r+0x2c>
 80216c2:	ab03      	add	r3, sp, #12
 80216c4:	9300      	str	r3, [sp, #0]
 80216c6:	462a      	mov	r2, r5
 80216c8:	4b05      	ldr	r3, [pc, #20]	@ (80216e0 <_svfiprintf_r+0x1f0>)
 80216ca:	a904      	add	r1, sp, #16
 80216cc:	4638      	mov	r0, r7
 80216ce:	f7fe f909 	bl	801f8e4 <_printf_i>
 80216d2:	e7ed      	b.n	80216b0 <_svfiprintf_r+0x1c0>
 80216d4:	08022ea0 	.word	0x08022ea0
 80216d8:	08022eaa 	.word	0x08022eaa
 80216dc:	0801f3b5 	.word	0x0801f3b5
 80216e0:	08021439 	.word	0x08021439
 80216e4:	08022ea6 	.word	0x08022ea6

080216e8 <__sflush_r>:
 80216e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80216ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80216f0:	0716      	lsls	r6, r2, #28
 80216f2:	4605      	mov	r5, r0
 80216f4:	460c      	mov	r4, r1
 80216f6:	d454      	bmi.n	80217a2 <__sflush_r+0xba>
 80216f8:	684b      	ldr	r3, [r1, #4]
 80216fa:	2b00      	cmp	r3, #0
 80216fc:	dc02      	bgt.n	8021704 <__sflush_r+0x1c>
 80216fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8021700:	2b00      	cmp	r3, #0
 8021702:	dd48      	ble.n	8021796 <__sflush_r+0xae>
 8021704:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021706:	2e00      	cmp	r6, #0
 8021708:	d045      	beq.n	8021796 <__sflush_r+0xae>
 802170a:	2300      	movs	r3, #0
 802170c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8021710:	682f      	ldr	r7, [r5, #0]
 8021712:	6a21      	ldr	r1, [r4, #32]
 8021714:	602b      	str	r3, [r5, #0]
 8021716:	d030      	beq.n	802177a <__sflush_r+0x92>
 8021718:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802171a:	89a3      	ldrh	r3, [r4, #12]
 802171c:	0759      	lsls	r1, r3, #29
 802171e:	d505      	bpl.n	802172c <__sflush_r+0x44>
 8021720:	6863      	ldr	r3, [r4, #4]
 8021722:	1ad2      	subs	r2, r2, r3
 8021724:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021726:	b10b      	cbz	r3, 802172c <__sflush_r+0x44>
 8021728:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802172a:	1ad2      	subs	r2, r2, r3
 802172c:	2300      	movs	r3, #0
 802172e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021730:	6a21      	ldr	r1, [r4, #32]
 8021732:	4628      	mov	r0, r5
 8021734:	47b0      	blx	r6
 8021736:	1c43      	adds	r3, r0, #1
 8021738:	89a3      	ldrh	r3, [r4, #12]
 802173a:	d106      	bne.n	802174a <__sflush_r+0x62>
 802173c:	6829      	ldr	r1, [r5, #0]
 802173e:	291d      	cmp	r1, #29
 8021740:	d82b      	bhi.n	802179a <__sflush_r+0xb2>
 8021742:	4a2a      	ldr	r2, [pc, #168]	@ (80217ec <__sflush_r+0x104>)
 8021744:	410a      	asrs	r2, r1
 8021746:	07d6      	lsls	r6, r2, #31
 8021748:	d427      	bmi.n	802179a <__sflush_r+0xb2>
 802174a:	2200      	movs	r2, #0
 802174c:	6062      	str	r2, [r4, #4]
 802174e:	04d9      	lsls	r1, r3, #19
 8021750:	6922      	ldr	r2, [r4, #16]
 8021752:	6022      	str	r2, [r4, #0]
 8021754:	d504      	bpl.n	8021760 <__sflush_r+0x78>
 8021756:	1c42      	adds	r2, r0, #1
 8021758:	d101      	bne.n	802175e <__sflush_r+0x76>
 802175a:	682b      	ldr	r3, [r5, #0]
 802175c:	b903      	cbnz	r3, 8021760 <__sflush_r+0x78>
 802175e:	6560      	str	r0, [r4, #84]	@ 0x54
 8021760:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021762:	602f      	str	r7, [r5, #0]
 8021764:	b1b9      	cbz	r1, 8021796 <__sflush_r+0xae>
 8021766:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802176a:	4299      	cmp	r1, r3
 802176c:	d002      	beq.n	8021774 <__sflush_r+0x8c>
 802176e:	4628      	mov	r0, r5
 8021770:	f7ff fa96 	bl	8020ca0 <_free_r>
 8021774:	2300      	movs	r3, #0
 8021776:	6363      	str	r3, [r4, #52]	@ 0x34
 8021778:	e00d      	b.n	8021796 <__sflush_r+0xae>
 802177a:	2301      	movs	r3, #1
 802177c:	4628      	mov	r0, r5
 802177e:	47b0      	blx	r6
 8021780:	4602      	mov	r2, r0
 8021782:	1c50      	adds	r0, r2, #1
 8021784:	d1c9      	bne.n	802171a <__sflush_r+0x32>
 8021786:	682b      	ldr	r3, [r5, #0]
 8021788:	2b00      	cmp	r3, #0
 802178a:	d0c6      	beq.n	802171a <__sflush_r+0x32>
 802178c:	2b1d      	cmp	r3, #29
 802178e:	d001      	beq.n	8021794 <__sflush_r+0xac>
 8021790:	2b16      	cmp	r3, #22
 8021792:	d11e      	bne.n	80217d2 <__sflush_r+0xea>
 8021794:	602f      	str	r7, [r5, #0]
 8021796:	2000      	movs	r0, #0
 8021798:	e022      	b.n	80217e0 <__sflush_r+0xf8>
 802179a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802179e:	b21b      	sxth	r3, r3
 80217a0:	e01b      	b.n	80217da <__sflush_r+0xf2>
 80217a2:	690f      	ldr	r7, [r1, #16]
 80217a4:	2f00      	cmp	r7, #0
 80217a6:	d0f6      	beq.n	8021796 <__sflush_r+0xae>
 80217a8:	0793      	lsls	r3, r2, #30
 80217aa:	680e      	ldr	r6, [r1, #0]
 80217ac:	bf08      	it	eq
 80217ae:	694b      	ldreq	r3, [r1, #20]
 80217b0:	600f      	str	r7, [r1, #0]
 80217b2:	bf18      	it	ne
 80217b4:	2300      	movne	r3, #0
 80217b6:	eba6 0807 	sub.w	r8, r6, r7
 80217ba:	608b      	str	r3, [r1, #8]
 80217bc:	f1b8 0f00 	cmp.w	r8, #0
 80217c0:	dde9      	ble.n	8021796 <__sflush_r+0xae>
 80217c2:	6a21      	ldr	r1, [r4, #32]
 80217c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80217c6:	4643      	mov	r3, r8
 80217c8:	463a      	mov	r2, r7
 80217ca:	4628      	mov	r0, r5
 80217cc:	47b0      	blx	r6
 80217ce:	2800      	cmp	r0, #0
 80217d0:	dc08      	bgt.n	80217e4 <__sflush_r+0xfc>
 80217d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80217d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80217da:	81a3      	strh	r3, [r4, #12]
 80217dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80217e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80217e4:	4407      	add	r7, r0
 80217e6:	eba8 0800 	sub.w	r8, r8, r0
 80217ea:	e7e7      	b.n	80217bc <__sflush_r+0xd4>
 80217ec:	dfbffffe 	.word	0xdfbffffe

080217f0 <_fflush_r>:
 80217f0:	b538      	push	{r3, r4, r5, lr}
 80217f2:	690b      	ldr	r3, [r1, #16]
 80217f4:	4605      	mov	r5, r0
 80217f6:	460c      	mov	r4, r1
 80217f8:	b913      	cbnz	r3, 8021800 <_fflush_r+0x10>
 80217fa:	2500      	movs	r5, #0
 80217fc:	4628      	mov	r0, r5
 80217fe:	bd38      	pop	{r3, r4, r5, pc}
 8021800:	b118      	cbz	r0, 802180a <_fflush_r+0x1a>
 8021802:	6a03      	ldr	r3, [r0, #32]
 8021804:	b90b      	cbnz	r3, 802180a <_fflush_r+0x1a>
 8021806:	f7fe fa19 	bl	801fc3c <__sinit>
 802180a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802180e:	2b00      	cmp	r3, #0
 8021810:	d0f3      	beq.n	80217fa <_fflush_r+0xa>
 8021812:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021814:	07d0      	lsls	r0, r2, #31
 8021816:	d404      	bmi.n	8021822 <_fflush_r+0x32>
 8021818:	0599      	lsls	r1, r3, #22
 802181a:	d402      	bmi.n	8021822 <_fflush_r+0x32>
 802181c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802181e:	f7fe fbe2 	bl	801ffe6 <__retarget_lock_acquire_recursive>
 8021822:	4628      	mov	r0, r5
 8021824:	4621      	mov	r1, r4
 8021826:	f7ff ff5f 	bl	80216e8 <__sflush_r>
 802182a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802182c:	07da      	lsls	r2, r3, #31
 802182e:	4605      	mov	r5, r0
 8021830:	d4e4      	bmi.n	80217fc <_fflush_r+0xc>
 8021832:	89a3      	ldrh	r3, [r4, #12]
 8021834:	059b      	lsls	r3, r3, #22
 8021836:	d4e1      	bmi.n	80217fc <_fflush_r+0xc>
 8021838:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802183a:	f7fe fbd5 	bl	801ffe8 <__retarget_lock_release_recursive>
 802183e:	e7dd      	b.n	80217fc <_fflush_r+0xc>

08021840 <memmove>:
 8021840:	4288      	cmp	r0, r1
 8021842:	b510      	push	{r4, lr}
 8021844:	eb01 0402 	add.w	r4, r1, r2
 8021848:	d902      	bls.n	8021850 <memmove+0x10>
 802184a:	4284      	cmp	r4, r0
 802184c:	4623      	mov	r3, r4
 802184e:	d807      	bhi.n	8021860 <memmove+0x20>
 8021850:	1e43      	subs	r3, r0, #1
 8021852:	42a1      	cmp	r1, r4
 8021854:	d008      	beq.n	8021868 <memmove+0x28>
 8021856:	f811 2b01 	ldrb.w	r2, [r1], #1
 802185a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802185e:	e7f8      	b.n	8021852 <memmove+0x12>
 8021860:	4402      	add	r2, r0
 8021862:	4601      	mov	r1, r0
 8021864:	428a      	cmp	r2, r1
 8021866:	d100      	bne.n	802186a <memmove+0x2a>
 8021868:	bd10      	pop	{r4, pc}
 802186a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802186e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021872:	e7f7      	b.n	8021864 <memmove+0x24>

08021874 <__assert_func>:
 8021874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021876:	4614      	mov	r4, r2
 8021878:	461a      	mov	r2, r3
 802187a:	4b09      	ldr	r3, [pc, #36]	@ (80218a0 <__assert_func+0x2c>)
 802187c:	681b      	ldr	r3, [r3, #0]
 802187e:	4605      	mov	r5, r0
 8021880:	68d8      	ldr	r0, [r3, #12]
 8021882:	b954      	cbnz	r4, 802189a <__assert_func+0x26>
 8021884:	4b07      	ldr	r3, [pc, #28]	@ (80218a4 <__assert_func+0x30>)
 8021886:	461c      	mov	r4, r3
 8021888:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802188c:	9100      	str	r1, [sp, #0]
 802188e:	462b      	mov	r3, r5
 8021890:	4905      	ldr	r1, [pc, #20]	@ (80218a8 <__assert_func+0x34>)
 8021892:	f000 f86f 	bl	8021974 <fiprintf>
 8021896:	f7fd fc27 	bl	801f0e8 <abort>
 802189a:	4b04      	ldr	r3, [pc, #16]	@ (80218ac <__assert_func+0x38>)
 802189c:	e7f4      	b.n	8021888 <__assert_func+0x14>
 802189e:	bf00      	nop
 80218a0:	200001b4 	.word	0x200001b4
 80218a4:	08022ef6 	.word	0x08022ef6
 80218a8:	08022ec8 	.word	0x08022ec8
 80218ac:	08022ebb 	.word	0x08022ebb

080218b0 <_calloc_r>:
 80218b0:	b570      	push	{r4, r5, r6, lr}
 80218b2:	fba1 5402 	umull	r5, r4, r1, r2
 80218b6:	b93c      	cbnz	r4, 80218c8 <_calloc_r+0x18>
 80218b8:	4629      	mov	r1, r5
 80218ba:	f7fd fc4f 	bl	801f15c <_malloc_r>
 80218be:	4606      	mov	r6, r0
 80218c0:	b928      	cbnz	r0, 80218ce <_calloc_r+0x1e>
 80218c2:	2600      	movs	r6, #0
 80218c4:	4630      	mov	r0, r6
 80218c6:	bd70      	pop	{r4, r5, r6, pc}
 80218c8:	220c      	movs	r2, #12
 80218ca:	6002      	str	r2, [r0, #0]
 80218cc:	e7f9      	b.n	80218c2 <_calloc_r+0x12>
 80218ce:	462a      	mov	r2, r5
 80218d0:	4621      	mov	r1, r4
 80218d2:	f7fe fa60 	bl	801fd96 <memset>
 80218d6:	e7f5      	b.n	80218c4 <_calloc_r+0x14>

080218d8 <__ascii_mbtowc>:
 80218d8:	b082      	sub	sp, #8
 80218da:	b901      	cbnz	r1, 80218de <__ascii_mbtowc+0x6>
 80218dc:	a901      	add	r1, sp, #4
 80218de:	b142      	cbz	r2, 80218f2 <__ascii_mbtowc+0x1a>
 80218e0:	b14b      	cbz	r3, 80218f6 <__ascii_mbtowc+0x1e>
 80218e2:	7813      	ldrb	r3, [r2, #0]
 80218e4:	600b      	str	r3, [r1, #0]
 80218e6:	7812      	ldrb	r2, [r2, #0]
 80218e8:	1e10      	subs	r0, r2, #0
 80218ea:	bf18      	it	ne
 80218ec:	2001      	movne	r0, #1
 80218ee:	b002      	add	sp, #8
 80218f0:	4770      	bx	lr
 80218f2:	4610      	mov	r0, r2
 80218f4:	e7fb      	b.n	80218ee <__ascii_mbtowc+0x16>
 80218f6:	f06f 0001 	mvn.w	r0, #1
 80218fa:	e7f8      	b.n	80218ee <__ascii_mbtowc+0x16>

080218fc <_realloc_r>:
 80218fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021900:	4680      	mov	r8, r0
 8021902:	4615      	mov	r5, r2
 8021904:	460c      	mov	r4, r1
 8021906:	b921      	cbnz	r1, 8021912 <_realloc_r+0x16>
 8021908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802190c:	4611      	mov	r1, r2
 802190e:	f7fd bc25 	b.w	801f15c <_malloc_r>
 8021912:	b92a      	cbnz	r2, 8021920 <_realloc_r+0x24>
 8021914:	f7ff f9c4 	bl	8020ca0 <_free_r>
 8021918:	2400      	movs	r4, #0
 802191a:	4620      	mov	r0, r4
 802191c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021920:	f000 f83a 	bl	8021998 <_malloc_usable_size_r>
 8021924:	4285      	cmp	r5, r0
 8021926:	4606      	mov	r6, r0
 8021928:	d802      	bhi.n	8021930 <_realloc_r+0x34>
 802192a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802192e:	d8f4      	bhi.n	802191a <_realloc_r+0x1e>
 8021930:	4629      	mov	r1, r5
 8021932:	4640      	mov	r0, r8
 8021934:	f7fd fc12 	bl	801f15c <_malloc_r>
 8021938:	4607      	mov	r7, r0
 802193a:	2800      	cmp	r0, #0
 802193c:	d0ec      	beq.n	8021918 <_realloc_r+0x1c>
 802193e:	42b5      	cmp	r5, r6
 8021940:	462a      	mov	r2, r5
 8021942:	4621      	mov	r1, r4
 8021944:	bf28      	it	cs
 8021946:	4632      	movcs	r2, r6
 8021948:	f7fe fb4f 	bl	801ffea <memcpy>
 802194c:	4621      	mov	r1, r4
 802194e:	4640      	mov	r0, r8
 8021950:	f7ff f9a6 	bl	8020ca0 <_free_r>
 8021954:	463c      	mov	r4, r7
 8021956:	e7e0      	b.n	802191a <_realloc_r+0x1e>

08021958 <__ascii_wctomb>:
 8021958:	4603      	mov	r3, r0
 802195a:	4608      	mov	r0, r1
 802195c:	b141      	cbz	r1, 8021970 <__ascii_wctomb+0x18>
 802195e:	2aff      	cmp	r2, #255	@ 0xff
 8021960:	d904      	bls.n	802196c <__ascii_wctomb+0x14>
 8021962:	228a      	movs	r2, #138	@ 0x8a
 8021964:	601a      	str	r2, [r3, #0]
 8021966:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802196a:	4770      	bx	lr
 802196c:	700a      	strb	r2, [r1, #0]
 802196e:	2001      	movs	r0, #1
 8021970:	4770      	bx	lr
	...

08021974 <fiprintf>:
 8021974:	b40e      	push	{r1, r2, r3}
 8021976:	b503      	push	{r0, r1, lr}
 8021978:	4601      	mov	r1, r0
 802197a:	ab03      	add	r3, sp, #12
 802197c:	4805      	ldr	r0, [pc, #20]	@ (8021994 <fiprintf+0x20>)
 802197e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021982:	6800      	ldr	r0, [r0, #0]
 8021984:	9301      	str	r3, [sp, #4]
 8021986:	f000 f839 	bl	80219fc <_vfiprintf_r>
 802198a:	b002      	add	sp, #8
 802198c:	f85d eb04 	ldr.w	lr, [sp], #4
 8021990:	b003      	add	sp, #12
 8021992:	4770      	bx	lr
 8021994:	200001b4 	.word	0x200001b4

08021998 <_malloc_usable_size_r>:
 8021998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802199c:	1f18      	subs	r0, r3, #4
 802199e:	2b00      	cmp	r3, #0
 80219a0:	bfbc      	itt	lt
 80219a2:	580b      	ldrlt	r3, [r1, r0]
 80219a4:	18c0      	addlt	r0, r0, r3
 80219a6:	4770      	bx	lr

080219a8 <__sfputc_r>:
 80219a8:	6893      	ldr	r3, [r2, #8]
 80219aa:	3b01      	subs	r3, #1
 80219ac:	2b00      	cmp	r3, #0
 80219ae:	b410      	push	{r4}
 80219b0:	6093      	str	r3, [r2, #8]
 80219b2:	da08      	bge.n	80219c6 <__sfputc_r+0x1e>
 80219b4:	6994      	ldr	r4, [r2, #24]
 80219b6:	42a3      	cmp	r3, r4
 80219b8:	db01      	blt.n	80219be <__sfputc_r+0x16>
 80219ba:	290a      	cmp	r1, #10
 80219bc:	d103      	bne.n	80219c6 <__sfputc_r+0x1e>
 80219be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80219c2:	f000 b933 	b.w	8021c2c <__swbuf_r>
 80219c6:	6813      	ldr	r3, [r2, #0]
 80219c8:	1c58      	adds	r0, r3, #1
 80219ca:	6010      	str	r0, [r2, #0]
 80219cc:	7019      	strb	r1, [r3, #0]
 80219ce:	4608      	mov	r0, r1
 80219d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80219d4:	4770      	bx	lr

080219d6 <__sfputs_r>:
 80219d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80219d8:	4606      	mov	r6, r0
 80219da:	460f      	mov	r7, r1
 80219dc:	4614      	mov	r4, r2
 80219de:	18d5      	adds	r5, r2, r3
 80219e0:	42ac      	cmp	r4, r5
 80219e2:	d101      	bne.n	80219e8 <__sfputs_r+0x12>
 80219e4:	2000      	movs	r0, #0
 80219e6:	e007      	b.n	80219f8 <__sfputs_r+0x22>
 80219e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80219ec:	463a      	mov	r2, r7
 80219ee:	4630      	mov	r0, r6
 80219f0:	f7ff ffda 	bl	80219a8 <__sfputc_r>
 80219f4:	1c43      	adds	r3, r0, #1
 80219f6:	d1f3      	bne.n	80219e0 <__sfputs_r+0xa>
 80219f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080219fc <_vfiprintf_r>:
 80219fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a00:	460d      	mov	r5, r1
 8021a02:	b09d      	sub	sp, #116	@ 0x74
 8021a04:	4614      	mov	r4, r2
 8021a06:	4698      	mov	r8, r3
 8021a08:	4606      	mov	r6, r0
 8021a0a:	b118      	cbz	r0, 8021a14 <_vfiprintf_r+0x18>
 8021a0c:	6a03      	ldr	r3, [r0, #32]
 8021a0e:	b90b      	cbnz	r3, 8021a14 <_vfiprintf_r+0x18>
 8021a10:	f7fe f914 	bl	801fc3c <__sinit>
 8021a14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021a16:	07d9      	lsls	r1, r3, #31
 8021a18:	d405      	bmi.n	8021a26 <_vfiprintf_r+0x2a>
 8021a1a:	89ab      	ldrh	r3, [r5, #12]
 8021a1c:	059a      	lsls	r2, r3, #22
 8021a1e:	d402      	bmi.n	8021a26 <_vfiprintf_r+0x2a>
 8021a20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021a22:	f7fe fae0 	bl	801ffe6 <__retarget_lock_acquire_recursive>
 8021a26:	89ab      	ldrh	r3, [r5, #12]
 8021a28:	071b      	lsls	r3, r3, #28
 8021a2a:	d501      	bpl.n	8021a30 <_vfiprintf_r+0x34>
 8021a2c:	692b      	ldr	r3, [r5, #16]
 8021a2e:	b99b      	cbnz	r3, 8021a58 <_vfiprintf_r+0x5c>
 8021a30:	4629      	mov	r1, r5
 8021a32:	4630      	mov	r0, r6
 8021a34:	f000 f938 	bl	8021ca8 <__swsetup_r>
 8021a38:	b170      	cbz	r0, 8021a58 <_vfiprintf_r+0x5c>
 8021a3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021a3c:	07dc      	lsls	r4, r3, #31
 8021a3e:	d504      	bpl.n	8021a4a <_vfiprintf_r+0x4e>
 8021a40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021a44:	b01d      	add	sp, #116	@ 0x74
 8021a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a4a:	89ab      	ldrh	r3, [r5, #12]
 8021a4c:	0598      	lsls	r0, r3, #22
 8021a4e:	d4f7      	bmi.n	8021a40 <_vfiprintf_r+0x44>
 8021a50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021a52:	f7fe fac9 	bl	801ffe8 <__retarget_lock_release_recursive>
 8021a56:	e7f3      	b.n	8021a40 <_vfiprintf_r+0x44>
 8021a58:	2300      	movs	r3, #0
 8021a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8021a5c:	2320      	movs	r3, #32
 8021a5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021a62:	f8cd 800c 	str.w	r8, [sp, #12]
 8021a66:	2330      	movs	r3, #48	@ 0x30
 8021a68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8021c18 <_vfiprintf_r+0x21c>
 8021a6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021a70:	f04f 0901 	mov.w	r9, #1
 8021a74:	4623      	mov	r3, r4
 8021a76:	469a      	mov	sl, r3
 8021a78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021a7c:	b10a      	cbz	r2, 8021a82 <_vfiprintf_r+0x86>
 8021a7e:	2a25      	cmp	r2, #37	@ 0x25
 8021a80:	d1f9      	bne.n	8021a76 <_vfiprintf_r+0x7a>
 8021a82:	ebba 0b04 	subs.w	fp, sl, r4
 8021a86:	d00b      	beq.n	8021aa0 <_vfiprintf_r+0xa4>
 8021a88:	465b      	mov	r3, fp
 8021a8a:	4622      	mov	r2, r4
 8021a8c:	4629      	mov	r1, r5
 8021a8e:	4630      	mov	r0, r6
 8021a90:	f7ff ffa1 	bl	80219d6 <__sfputs_r>
 8021a94:	3001      	adds	r0, #1
 8021a96:	f000 80a7 	beq.w	8021be8 <_vfiprintf_r+0x1ec>
 8021a9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021a9c:	445a      	add	r2, fp
 8021a9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8021aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8021aa4:	2b00      	cmp	r3, #0
 8021aa6:	f000 809f 	beq.w	8021be8 <_vfiprintf_r+0x1ec>
 8021aaa:	2300      	movs	r3, #0
 8021aac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021ab0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021ab4:	f10a 0a01 	add.w	sl, sl, #1
 8021ab8:	9304      	str	r3, [sp, #16]
 8021aba:	9307      	str	r3, [sp, #28]
 8021abc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021ac0:	931a      	str	r3, [sp, #104]	@ 0x68
 8021ac2:	4654      	mov	r4, sl
 8021ac4:	2205      	movs	r2, #5
 8021ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021aca:	4853      	ldr	r0, [pc, #332]	@ (8021c18 <_vfiprintf_r+0x21c>)
 8021acc:	f7de fba8 	bl	8000220 <memchr>
 8021ad0:	9a04      	ldr	r2, [sp, #16]
 8021ad2:	b9d8      	cbnz	r0, 8021b0c <_vfiprintf_r+0x110>
 8021ad4:	06d1      	lsls	r1, r2, #27
 8021ad6:	bf44      	itt	mi
 8021ad8:	2320      	movmi	r3, #32
 8021ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021ade:	0713      	lsls	r3, r2, #28
 8021ae0:	bf44      	itt	mi
 8021ae2:	232b      	movmi	r3, #43	@ 0x2b
 8021ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8021aec:	2b2a      	cmp	r3, #42	@ 0x2a
 8021aee:	d015      	beq.n	8021b1c <_vfiprintf_r+0x120>
 8021af0:	9a07      	ldr	r2, [sp, #28]
 8021af2:	4654      	mov	r4, sl
 8021af4:	2000      	movs	r0, #0
 8021af6:	f04f 0c0a 	mov.w	ip, #10
 8021afa:	4621      	mov	r1, r4
 8021afc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021b00:	3b30      	subs	r3, #48	@ 0x30
 8021b02:	2b09      	cmp	r3, #9
 8021b04:	d94b      	bls.n	8021b9e <_vfiprintf_r+0x1a2>
 8021b06:	b1b0      	cbz	r0, 8021b36 <_vfiprintf_r+0x13a>
 8021b08:	9207      	str	r2, [sp, #28]
 8021b0a:	e014      	b.n	8021b36 <_vfiprintf_r+0x13a>
 8021b0c:	eba0 0308 	sub.w	r3, r0, r8
 8021b10:	fa09 f303 	lsl.w	r3, r9, r3
 8021b14:	4313      	orrs	r3, r2
 8021b16:	9304      	str	r3, [sp, #16]
 8021b18:	46a2      	mov	sl, r4
 8021b1a:	e7d2      	b.n	8021ac2 <_vfiprintf_r+0xc6>
 8021b1c:	9b03      	ldr	r3, [sp, #12]
 8021b1e:	1d19      	adds	r1, r3, #4
 8021b20:	681b      	ldr	r3, [r3, #0]
 8021b22:	9103      	str	r1, [sp, #12]
 8021b24:	2b00      	cmp	r3, #0
 8021b26:	bfbb      	ittet	lt
 8021b28:	425b      	neglt	r3, r3
 8021b2a:	f042 0202 	orrlt.w	r2, r2, #2
 8021b2e:	9307      	strge	r3, [sp, #28]
 8021b30:	9307      	strlt	r3, [sp, #28]
 8021b32:	bfb8      	it	lt
 8021b34:	9204      	strlt	r2, [sp, #16]
 8021b36:	7823      	ldrb	r3, [r4, #0]
 8021b38:	2b2e      	cmp	r3, #46	@ 0x2e
 8021b3a:	d10a      	bne.n	8021b52 <_vfiprintf_r+0x156>
 8021b3c:	7863      	ldrb	r3, [r4, #1]
 8021b3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8021b40:	d132      	bne.n	8021ba8 <_vfiprintf_r+0x1ac>
 8021b42:	9b03      	ldr	r3, [sp, #12]
 8021b44:	1d1a      	adds	r2, r3, #4
 8021b46:	681b      	ldr	r3, [r3, #0]
 8021b48:	9203      	str	r2, [sp, #12]
 8021b4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021b4e:	3402      	adds	r4, #2
 8021b50:	9305      	str	r3, [sp, #20]
 8021b52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8021c28 <_vfiprintf_r+0x22c>
 8021b56:	7821      	ldrb	r1, [r4, #0]
 8021b58:	2203      	movs	r2, #3
 8021b5a:	4650      	mov	r0, sl
 8021b5c:	f7de fb60 	bl	8000220 <memchr>
 8021b60:	b138      	cbz	r0, 8021b72 <_vfiprintf_r+0x176>
 8021b62:	9b04      	ldr	r3, [sp, #16]
 8021b64:	eba0 000a 	sub.w	r0, r0, sl
 8021b68:	2240      	movs	r2, #64	@ 0x40
 8021b6a:	4082      	lsls	r2, r0
 8021b6c:	4313      	orrs	r3, r2
 8021b6e:	3401      	adds	r4, #1
 8021b70:	9304      	str	r3, [sp, #16]
 8021b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021b76:	4829      	ldr	r0, [pc, #164]	@ (8021c1c <_vfiprintf_r+0x220>)
 8021b78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021b7c:	2206      	movs	r2, #6
 8021b7e:	f7de fb4f 	bl	8000220 <memchr>
 8021b82:	2800      	cmp	r0, #0
 8021b84:	d03f      	beq.n	8021c06 <_vfiprintf_r+0x20a>
 8021b86:	4b26      	ldr	r3, [pc, #152]	@ (8021c20 <_vfiprintf_r+0x224>)
 8021b88:	bb1b      	cbnz	r3, 8021bd2 <_vfiprintf_r+0x1d6>
 8021b8a:	9b03      	ldr	r3, [sp, #12]
 8021b8c:	3307      	adds	r3, #7
 8021b8e:	f023 0307 	bic.w	r3, r3, #7
 8021b92:	3308      	adds	r3, #8
 8021b94:	9303      	str	r3, [sp, #12]
 8021b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021b98:	443b      	add	r3, r7
 8021b9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8021b9c:	e76a      	b.n	8021a74 <_vfiprintf_r+0x78>
 8021b9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8021ba2:	460c      	mov	r4, r1
 8021ba4:	2001      	movs	r0, #1
 8021ba6:	e7a8      	b.n	8021afa <_vfiprintf_r+0xfe>
 8021ba8:	2300      	movs	r3, #0
 8021baa:	3401      	adds	r4, #1
 8021bac:	9305      	str	r3, [sp, #20]
 8021bae:	4619      	mov	r1, r3
 8021bb0:	f04f 0c0a 	mov.w	ip, #10
 8021bb4:	4620      	mov	r0, r4
 8021bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021bba:	3a30      	subs	r2, #48	@ 0x30
 8021bbc:	2a09      	cmp	r2, #9
 8021bbe:	d903      	bls.n	8021bc8 <_vfiprintf_r+0x1cc>
 8021bc0:	2b00      	cmp	r3, #0
 8021bc2:	d0c6      	beq.n	8021b52 <_vfiprintf_r+0x156>
 8021bc4:	9105      	str	r1, [sp, #20]
 8021bc6:	e7c4      	b.n	8021b52 <_vfiprintf_r+0x156>
 8021bc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8021bcc:	4604      	mov	r4, r0
 8021bce:	2301      	movs	r3, #1
 8021bd0:	e7f0      	b.n	8021bb4 <_vfiprintf_r+0x1b8>
 8021bd2:	ab03      	add	r3, sp, #12
 8021bd4:	9300      	str	r3, [sp, #0]
 8021bd6:	462a      	mov	r2, r5
 8021bd8:	4b12      	ldr	r3, [pc, #72]	@ (8021c24 <_vfiprintf_r+0x228>)
 8021bda:	a904      	add	r1, sp, #16
 8021bdc:	4630      	mov	r0, r6
 8021bde:	f7fd fbe9 	bl	801f3b4 <_printf_float>
 8021be2:	4607      	mov	r7, r0
 8021be4:	1c78      	adds	r0, r7, #1
 8021be6:	d1d6      	bne.n	8021b96 <_vfiprintf_r+0x19a>
 8021be8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021bea:	07d9      	lsls	r1, r3, #31
 8021bec:	d405      	bmi.n	8021bfa <_vfiprintf_r+0x1fe>
 8021bee:	89ab      	ldrh	r3, [r5, #12]
 8021bf0:	059a      	lsls	r2, r3, #22
 8021bf2:	d402      	bmi.n	8021bfa <_vfiprintf_r+0x1fe>
 8021bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021bf6:	f7fe f9f7 	bl	801ffe8 <__retarget_lock_release_recursive>
 8021bfa:	89ab      	ldrh	r3, [r5, #12]
 8021bfc:	065b      	lsls	r3, r3, #25
 8021bfe:	f53f af1f 	bmi.w	8021a40 <_vfiprintf_r+0x44>
 8021c02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021c04:	e71e      	b.n	8021a44 <_vfiprintf_r+0x48>
 8021c06:	ab03      	add	r3, sp, #12
 8021c08:	9300      	str	r3, [sp, #0]
 8021c0a:	462a      	mov	r2, r5
 8021c0c:	4b05      	ldr	r3, [pc, #20]	@ (8021c24 <_vfiprintf_r+0x228>)
 8021c0e:	a904      	add	r1, sp, #16
 8021c10:	4630      	mov	r0, r6
 8021c12:	f7fd fe67 	bl	801f8e4 <_printf_i>
 8021c16:	e7e4      	b.n	8021be2 <_vfiprintf_r+0x1e6>
 8021c18:	08022ea0 	.word	0x08022ea0
 8021c1c:	08022eaa 	.word	0x08022eaa
 8021c20:	0801f3b5 	.word	0x0801f3b5
 8021c24:	080219d7 	.word	0x080219d7
 8021c28:	08022ea6 	.word	0x08022ea6

08021c2c <__swbuf_r>:
 8021c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c2e:	460e      	mov	r6, r1
 8021c30:	4614      	mov	r4, r2
 8021c32:	4605      	mov	r5, r0
 8021c34:	b118      	cbz	r0, 8021c3e <__swbuf_r+0x12>
 8021c36:	6a03      	ldr	r3, [r0, #32]
 8021c38:	b90b      	cbnz	r3, 8021c3e <__swbuf_r+0x12>
 8021c3a:	f7fd ffff 	bl	801fc3c <__sinit>
 8021c3e:	69a3      	ldr	r3, [r4, #24]
 8021c40:	60a3      	str	r3, [r4, #8]
 8021c42:	89a3      	ldrh	r3, [r4, #12]
 8021c44:	071a      	lsls	r2, r3, #28
 8021c46:	d501      	bpl.n	8021c4c <__swbuf_r+0x20>
 8021c48:	6923      	ldr	r3, [r4, #16]
 8021c4a:	b943      	cbnz	r3, 8021c5e <__swbuf_r+0x32>
 8021c4c:	4621      	mov	r1, r4
 8021c4e:	4628      	mov	r0, r5
 8021c50:	f000 f82a 	bl	8021ca8 <__swsetup_r>
 8021c54:	b118      	cbz	r0, 8021c5e <__swbuf_r+0x32>
 8021c56:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8021c5a:	4638      	mov	r0, r7
 8021c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021c5e:	6823      	ldr	r3, [r4, #0]
 8021c60:	6922      	ldr	r2, [r4, #16]
 8021c62:	1a98      	subs	r0, r3, r2
 8021c64:	6963      	ldr	r3, [r4, #20]
 8021c66:	b2f6      	uxtb	r6, r6
 8021c68:	4283      	cmp	r3, r0
 8021c6a:	4637      	mov	r7, r6
 8021c6c:	dc05      	bgt.n	8021c7a <__swbuf_r+0x4e>
 8021c6e:	4621      	mov	r1, r4
 8021c70:	4628      	mov	r0, r5
 8021c72:	f7ff fdbd 	bl	80217f0 <_fflush_r>
 8021c76:	2800      	cmp	r0, #0
 8021c78:	d1ed      	bne.n	8021c56 <__swbuf_r+0x2a>
 8021c7a:	68a3      	ldr	r3, [r4, #8]
 8021c7c:	3b01      	subs	r3, #1
 8021c7e:	60a3      	str	r3, [r4, #8]
 8021c80:	6823      	ldr	r3, [r4, #0]
 8021c82:	1c5a      	adds	r2, r3, #1
 8021c84:	6022      	str	r2, [r4, #0]
 8021c86:	701e      	strb	r6, [r3, #0]
 8021c88:	6962      	ldr	r2, [r4, #20]
 8021c8a:	1c43      	adds	r3, r0, #1
 8021c8c:	429a      	cmp	r2, r3
 8021c8e:	d004      	beq.n	8021c9a <__swbuf_r+0x6e>
 8021c90:	89a3      	ldrh	r3, [r4, #12]
 8021c92:	07db      	lsls	r3, r3, #31
 8021c94:	d5e1      	bpl.n	8021c5a <__swbuf_r+0x2e>
 8021c96:	2e0a      	cmp	r6, #10
 8021c98:	d1df      	bne.n	8021c5a <__swbuf_r+0x2e>
 8021c9a:	4621      	mov	r1, r4
 8021c9c:	4628      	mov	r0, r5
 8021c9e:	f7ff fda7 	bl	80217f0 <_fflush_r>
 8021ca2:	2800      	cmp	r0, #0
 8021ca4:	d0d9      	beq.n	8021c5a <__swbuf_r+0x2e>
 8021ca6:	e7d6      	b.n	8021c56 <__swbuf_r+0x2a>

08021ca8 <__swsetup_r>:
 8021ca8:	b538      	push	{r3, r4, r5, lr}
 8021caa:	4b29      	ldr	r3, [pc, #164]	@ (8021d50 <__swsetup_r+0xa8>)
 8021cac:	4605      	mov	r5, r0
 8021cae:	6818      	ldr	r0, [r3, #0]
 8021cb0:	460c      	mov	r4, r1
 8021cb2:	b118      	cbz	r0, 8021cbc <__swsetup_r+0x14>
 8021cb4:	6a03      	ldr	r3, [r0, #32]
 8021cb6:	b90b      	cbnz	r3, 8021cbc <__swsetup_r+0x14>
 8021cb8:	f7fd ffc0 	bl	801fc3c <__sinit>
 8021cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021cc0:	0719      	lsls	r1, r3, #28
 8021cc2:	d422      	bmi.n	8021d0a <__swsetup_r+0x62>
 8021cc4:	06da      	lsls	r2, r3, #27
 8021cc6:	d407      	bmi.n	8021cd8 <__swsetup_r+0x30>
 8021cc8:	2209      	movs	r2, #9
 8021cca:	602a      	str	r2, [r5, #0]
 8021ccc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021cd0:	81a3      	strh	r3, [r4, #12]
 8021cd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021cd6:	e033      	b.n	8021d40 <__swsetup_r+0x98>
 8021cd8:	0758      	lsls	r0, r3, #29
 8021cda:	d512      	bpl.n	8021d02 <__swsetup_r+0x5a>
 8021cdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021cde:	b141      	cbz	r1, 8021cf2 <__swsetup_r+0x4a>
 8021ce0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021ce4:	4299      	cmp	r1, r3
 8021ce6:	d002      	beq.n	8021cee <__swsetup_r+0x46>
 8021ce8:	4628      	mov	r0, r5
 8021cea:	f7fe ffd9 	bl	8020ca0 <_free_r>
 8021cee:	2300      	movs	r3, #0
 8021cf0:	6363      	str	r3, [r4, #52]	@ 0x34
 8021cf2:	89a3      	ldrh	r3, [r4, #12]
 8021cf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8021cf8:	81a3      	strh	r3, [r4, #12]
 8021cfa:	2300      	movs	r3, #0
 8021cfc:	6063      	str	r3, [r4, #4]
 8021cfe:	6923      	ldr	r3, [r4, #16]
 8021d00:	6023      	str	r3, [r4, #0]
 8021d02:	89a3      	ldrh	r3, [r4, #12]
 8021d04:	f043 0308 	orr.w	r3, r3, #8
 8021d08:	81a3      	strh	r3, [r4, #12]
 8021d0a:	6923      	ldr	r3, [r4, #16]
 8021d0c:	b94b      	cbnz	r3, 8021d22 <__swsetup_r+0x7a>
 8021d0e:	89a3      	ldrh	r3, [r4, #12]
 8021d10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8021d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021d18:	d003      	beq.n	8021d22 <__swsetup_r+0x7a>
 8021d1a:	4621      	mov	r1, r4
 8021d1c:	4628      	mov	r0, r5
 8021d1e:	f000 f83f 	bl	8021da0 <__smakebuf_r>
 8021d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021d26:	f013 0201 	ands.w	r2, r3, #1
 8021d2a:	d00a      	beq.n	8021d42 <__swsetup_r+0x9a>
 8021d2c:	2200      	movs	r2, #0
 8021d2e:	60a2      	str	r2, [r4, #8]
 8021d30:	6962      	ldr	r2, [r4, #20]
 8021d32:	4252      	negs	r2, r2
 8021d34:	61a2      	str	r2, [r4, #24]
 8021d36:	6922      	ldr	r2, [r4, #16]
 8021d38:	b942      	cbnz	r2, 8021d4c <__swsetup_r+0xa4>
 8021d3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8021d3e:	d1c5      	bne.n	8021ccc <__swsetup_r+0x24>
 8021d40:	bd38      	pop	{r3, r4, r5, pc}
 8021d42:	0799      	lsls	r1, r3, #30
 8021d44:	bf58      	it	pl
 8021d46:	6962      	ldrpl	r2, [r4, #20]
 8021d48:	60a2      	str	r2, [r4, #8]
 8021d4a:	e7f4      	b.n	8021d36 <__swsetup_r+0x8e>
 8021d4c:	2000      	movs	r0, #0
 8021d4e:	e7f7      	b.n	8021d40 <__swsetup_r+0x98>
 8021d50:	200001b4 	.word	0x200001b4

08021d54 <__swhatbuf_r>:
 8021d54:	b570      	push	{r4, r5, r6, lr}
 8021d56:	460c      	mov	r4, r1
 8021d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021d5c:	2900      	cmp	r1, #0
 8021d5e:	b096      	sub	sp, #88	@ 0x58
 8021d60:	4615      	mov	r5, r2
 8021d62:	461e      	mov	r6, r3
 8021d64:	da0d      	bge.n	8021d82 <__swhatbuf_r+0x2e>
 8021d66:	89a3      	ldrh	r3, [r4, #12]
 8021d68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021d6c:	f04f 0100 	mov.w	r1, #0
 8021d70:	bf14      	ite	ne
 8021d72:	2340      	movne	r3, #64	@ 0x40
 8021d74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021d78:	2000      	movs	r0, #0
 8021d7a:	6031      	str	r1, [r6, #0]
 8021d7c:	602b      	str	r3, [r5, #0]
 8021d7e:	b016      	add	sp, #88	@ 0x58
 8021d80:	bd70      	pop	{r4, r5, r6, pc}
 8021d82:	466a      	mov	r2, sp
 8021d84:	f000 f848 	bl	8021e18 <_fstat_r>
 8021d88:	2800      	cmp	r0, #0
 8021d8a:	dbec      	blt.n	8021d66 <__swhatbuf_r+0x12>
 8021d8c:	9901      	ldr	r1, [sp, #4]
 8021d8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8021d92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8021d96:	4259      	negs	r1, r3
 8021d98:	4159      	adcs	r1, r3
 8021d9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021d9e:	e7eb      	b.n	8021d78 <__swhatbuf_r+0x24>

08021da0 <__smakebuf_r>:
 8021da0:	898b      	ldrh	r3, [r1, #12]
 8021da2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021da4:	079d      	lsls	r5, r3, #30
 8021da6:	4606      	mov	r6, r0
 8021da8:	460c      	mov	r4, r1
 8021daa:	d507      	bpl.n	8021dbc <__smakebuf_r+0x1c>
 8021dac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021db0:	6023      	str	r3, [r4, #0]
 8021db2:	6123      	str	r3, [r4, #16]
 8021db4:	2301      	movs	r3, #1
 8021db6:	6163      	str	r3, [r4, #20]
 8021db8:	b003      	add	sp, #12
 8021dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021dbc:	ab01      	add	r3, sp, #4
 8021dbe:	466a      	mov	r2, sp
 8021dc0:	f7ff ffc8 	bl	8021d54 <__swhatbuf_r>
 8021dc4:	9f00      	ldr	r7, [sp, #0]
 8021dc6:	4605      	mov	r5, r0
 8021dc8:	4639      	mov	r1, r7
 8021dca:	4630      	mov	r0, r6
 8021dcc:	f7fd f9c6 	bl	801f15c <_malloc_r>
 8021dd0:	b948      	cbnz	r0, 8021de6 <__smakebuf_r+0x46>
 8021dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021dd6:	059a      	lsls	r2, r3, #22
 8021dd8:	d4ee      	bmi.n	8021db8 <__smakebuf_r+0x18>
 8021dda:	f023 0303 	bic.w	r3, r3, #3
 8021dde:	f043 0302 	orr.w	r3, r3, #2
 8021de2:	81a3      	strh	r3, [r4, #12]
 8021de4:	e7e2      	b.n	8021dac <__smakebuf_r+0xc>
 8021de6:	89a3      	ldrh	r3, [r4, #12]
 8021de8:	6020      	str	r0, [r4, #0]
 8021dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021dee:	81a3      	strh	r3, [r4, #12]
 8021df0:	9b01      	ldr	r3, [sp, #4]
 8021df2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8021df6:	b15b      	cbz	r3, 8021e10 <__smakebuf_r+0x70>
 8021df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021dfc:	4630      	mov	r0, r6
 8021dfe:	f000 f81d 	bl	8021e3c <_isatty_r>
 8021e02:	b128      	cbz	r0, 8021e10 <__smakebuf_r+0x70>
 8021e04:	89a3      	ldrh	r3, [r4, #12]
 8021e06:	f023 0303 	bic.w	r3, r3, #3
 8021e0a:	f043 0301 	orr.w	r3, r3, #1
 8021e0e:	81a3      	strh	r3, [r4, #12]
 8021e10:	89a3      	ldrh	r3, [r4, #12]
 8021e12:	431d      	orrs	r5, r3
 8021e14:	81a5      	strh	r5, [r4, #12]
 8021e16:	e7cf      	b.n	8021db8 <__smakebuf_r+0x18>

08021e18 <_fstat_r>:
 8021e18:	b538      	push	{r3, r4, r5, lr}
 8021e1a:	4d07      	ldr	r5, [pc, #28]	@ (8021e38 <_fstat_r+0x20>)
 8021e1c:	2300      	movs	r3, #0
 8021e1e:	4604      	mov	r4, r0
 8021e20:	4608      	mov	r0, r1
 8021e22:	4611      	mov	r1, r2
 8021e24:	602b      	str	r3, [r5, #0]
 8021e26:	f7e3 fa17 	bl	8005258 <_fstat>
 8021e2a:	1c43      	adds	r3, r0, #1
 8021e2c:	d102      	bne.n	8021e34 <_fstat_r+0x1c>
 8021e2e:	682b      	ldr	r3, [r5, #0]
 8021e30:	b103      	cbz	r3, 8021e34 <_fstat_r+0x1c>
 8021e32:	6023      	str	r3, [r4, #0]
 8021e34:	bd38      	pop	{r3, r4, r5, pc}
 8021e36:	bf00      	nop
 8021e38:	20018878 	.word	0x20018878

08021e3c <_isatty_r>:
 8021e3c:	b538      	push	{r3, r4, r5, lr}
 8021e3e:	4d06      	ldr	r5, [pc, #24]	@ (8021e58 <_isatty_r+0x1c>)
 8021e40:	2300      	movs	r3, #0
 8021e42:	4604      	mov	r4, r0
 8021e44:	4608      	mov	r0, r1
 8021e46:	602b      	str	r3, [r5, #0]
 8021e48:	f7e3 fa16 	bl	8005278 <_isatty>
 8021e4c:	1c43      	adds	r3, r0, #1
 8021e4e:	d102      	bne.n	8021e56 <_isatty_r+0x1a>
 8021e50:	682b      	ldr	r3, [r5, #0]
 8021e52:	b103      	cbz	r3, 8021e56 <_isatty_r+0x1a>
 8021e54:	6023      	str	r3, [r4, #0]
 8021e56:	bd38      	pop	{r3, r4, r5, pc}
 8021e58:	20018878 	.word	0x20018878

08021e5c <_init>:
 8021e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e5e:	bf00      	nop
 8021e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021e62:	bc08      	pop	{r3}
 8021e64:	469e      	mov	lr, r3
 8021e66:	4770      	bx	lr

08021e68 <_fini>:
 8021e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e6a:	bf00      	nop
 8021e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021e6e:	bc08      	pop	{r3}
 8021e70:	469e      	mov	lr, r3
 8021e72:	4770      	bx	lr
